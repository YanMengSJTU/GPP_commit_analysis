diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 34a38990d..e4a622272 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -5,7 +5,7 @@ repositories {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.+'
+    compile 'com.android.support:support-v4:23.3.0'
     compile "com.google.android.gms:play-services-gcm:8.4.0"
     compile "com.google.android.gms:play-services-maps:8.4.0"
     compile 'net.hockeyapp.android:HockeySDK:3.6.+'
@@ -14,10 +14,10 @@ dependencies {
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    buildToolsVersion '23.0.3'
 
     useLibrary 'org.apache.http.legacy'
-    defaultConfig.applicationId = "org.telegram.messenger"
+    defaultConfig.applicationId = "org.softastur.asturgram"
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
@@ -63,6 +63,8 @@ android {
         }
     }
 
+    defaultConfig.versionCode = 787
+
     sourceSets.main {
         jniLibs.srcDir 'libs'
         jni.srcDirs = [] //disable automatic ndk-build call
@@ -80,10 +82,40 @@ android {
         manifest.srcFile 'config/foss/AndroidManifest.xml'
     }
 
+    productFlavors {
+        x86 {
+            ndk {
+                abiFilter "x86"
+            }
+            versionCode = 2
+        }
+        arm {
+            ndk {
+                abiFilter "armeabi"
+            }
+            versionCode = 0
+        }
+        armv7 {
+            ndk {
+                abiFilter "armeabi-v7a"
+            }
+            versionCode = 1
+        }
+        fat {
+            versionCode = 3
+        }
+    }
+
+    applicationVariants.all { variant ->
+        def abiVersion = variant.productFlavors.get(0).versionCode
+        variant.mergedFlavor.versionCode = defaultConfig.versionCode * 10 + abiVersion;
+    }
+
     defaultConfig {
         minSdkVersion 9
         targetSdkVersion 23
-        versionCode 755
-        versionName "3.6.1"
+        versionName "Espinela"
     }
 }
+
+apply plugin: 'com.google.gms.google-services'
diff --git a/TMessagesProj/google-services.json b/TMessagesProj/google-services.json
new file mode 100644
index 000000000..6c1a9a332
--- /dev/null
+++ b/TMessagesProj/google-services.json
@@ -0,0 +1,75 @@
+{
+  "project_info": {
+    "project_id": "tmessages2",
+    "project_number": "760348033671",
+    "name": "Asturgram"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:760348033671:android:f6afd7b67eae3860",
+        "client_id": "android:org.softastur.asturgram",
+        "client_type": 1,
+        "android_client_info": {
+          "package_name": "org.softastur.asturgram",
+          "certificate_hash": []
+        }
+      },
+      "oauth_client": [],
+      "api_key": [],
+      "services": {
+        "analytics_service": {
+          "status": 1
+        },
+        "cloud_messaging_service": {
+          "status": 2,
+          "apns_config": []
+        },
+        "appinvite_service": {
+          "status": 1,
+          "other_platform_oauth_client": []
+        },
+        "google_signin_service": {
+          "status": 1
+        },
+        "ads_service": {
+          "status": 1
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:760348033671:android:dc022572c167a16c",
+        "client_id": "android:org.softastur.asturgram.beta",
+        "client_type": 1,
+        "android_client_info": {
+          "package_name": "org.softastur.asturgram.beta",
+          "certificate_hash": []
+        }
+      },
+      "oauth_client": [],
+      "api_key": [],
+      "services": {
+        "analytics_service": {
+          "status": 1
+        },
+        "cloud_messaging_service": {
+          "status": 2,
+          "apns_config": []
+        },
+        "appinvite_service": {
+          "status": 1,
+          "other_platform_oauth_client": []
+        },
+        "google_signin_service": {
+          "status": 1
+        },
+        "ads_service": {
+          "status": 1
+        }
+      }
+    }
+  ],
+  "client_info": [],
+  "ARTIFACT_VERSION": "1"
+}
diff --git a/TMessagesProj/jni/Android.mk b/TMessagesProj/jni/Android.mk
index 995a53ee6..e5ca2a519 100755
--- a/TMessagesProj/jni/Android.mk
+++ b/TMessagesProj/jni/Android.mk
@@ -235,12 +235,12 @@ include $(BUILD_STATIC_LIBRARY)
 include $(CLEAR_VARS)
 LOCAL_PRELINK_MODULE := false
 
-LOCAL_MODULE 	:= tmessages.19
+LOCAL_MODULE 	:= tmessages.21
 LOCAL_CFLAGS 	:= -w -std=c11 -Os -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
 LOCAL_CFLAGS 	+= -Drestrict='' -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA -DHAVE_LRINT -DHAVE_LRINTF -fno-math-errno
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT -ffast-math -D__STDC_CONSTANT_MACROS
 LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -Os -funroll-loops -std=c++11
-LOCAL_LDLIBS 	:= -ljnigraphics -llog -lz
+LOCAL_LDLIBS 	:= -ljnigraphics -llog -lz -latomic
 LOCAL_STATIC_LIBRARIES := webp sqlite tgnet breakpad avformat avcodec avutil
 
 LOCAL_SRC_FILES     := \
diff --git a/TMessagesProj/jni/Application.mk b/TMessagesProj/jni/Application.mk
index 0460b3340..bd546a41a 100644
--- a/TMessagesProj/jni/Application.mk
+++ b/TMessagesProj/jni/Application.mk
@@ -1,4 +1,4 @@
 APP_PLATFORM := android-9
 APP_ABI := armeabi armeabi-v7a x86
-NDK_TOOLCHAIN_VERSION := 4.8
+NDK_TOOLCHAIN_VERSION := 4.9
 APP_STL := gnustl_static
\ No newline at end of file
diff --git a/TMessagesProj/jni/TgNetWrapper.cpp b/TMessagesProj/jni/TgNetWrapper.cpp
index a83920bf4..decb50bd9 100644
--- a/TMessagesProj/jni/TgNetWrapper.cpp
+++ b/TMessagesProj/jni/TgNetWrapper.cpp
@@ -157,6 +157,10 @@ void setNetworkAvailable(JNIEnv *env, jclass c, jboolean value) {
     ConnectionsManager::getInstance().setNetworkAvailable(value);
 }
 
+void setPushConnectionEnabled(JNIEnv *env, jclass c, jboolean value) {
+    ConnectionsManager::getInstance().setPushConnectionEnabled(value);
+}
+
 class Delegate : public ConnectiosManagerDelegate {
     
     void onUpdate() {
@@ -194,7 +198,7 @@ class Delegate : public ConnectiosManagerDelegate {
     }
 };
 
-void init(JNIEnv *env, jclass c, jint version, jint layer, jint apiId, jstring deviceModel, jstring systemVersion, jstring appVersion, jstring langCode, jstring configPath, jstring logPath, jint userId) {
+void init(JNIEnv *env, jclass c, jint version, jint layer, jint apiId, jstring deviceModel, jstring systemVersion, jstring appVersion, jstring langCode, jstring configPath, jstring logPath, jint userId, jboolean enablePushConnection) {
     const char *deviceModelStr = env->GetStringUTFChars(deviceModel, 0);
     const char *systemVersionStr = env->GetStringUTFChars(systemVersion, 0);
     const char *appVersionStr = env->GetStringUTFChars(appVersion, 0);
@@ -202,7 +206,7 @@ void init(JNIEnv *env, jclass c, jint version, jint layer, jint apiId, jstring d
     const char *configPathStr = env->GetStringUTFChars(configPath, 0);
     const char *logPathStr = env->GetStringUTFChars(logPath, 0);
 
-    ConnectionsManager::getInstance().init(version, layer, apiId, std::string(deviceModelStr), std::string(systemVersionStr), std::string(appVersionStr), std::string(langCodeStr), std::string(configPathStr), std::string(logPathStr), userId, true);
+    ConnectionsManager::getInstance().init(version, layer, apiId, std::string(deviceModelStr), std::string(systemVersionStr), std::string(appVersionStr), std::string(langCodeStr), std::string(configPathStr), std::string(logPathStr), userId, true, enablePushConnection);
 
     if (deviceModelStr != 0) {
         env->ReleaseStringUTFChars(deviceModel, deviceModelStr);
@@ -242,13 +246,14 @@ static JNINativeMethod ConnectionsManagerMethods[] = {
         {"native_applyDatacenterAddress", "(ILjava/lang/String;I)V", (void *) applyDatacenterAddress},
         {"native_getConnectionState", "()I", (void *) getConnectionState},
         {"native_setUserId", "(I)V", (void *) setUserId},
-        {"native_init", "(IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", (void *) init},
+        {"native_init", "(IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V", (void *) init},
         {"native_switchBackend", "()V", (void *) switchBackend},
         {"native_pauseNetwork", "()V", (void *) pauseNetwork},
         {"native_resumeNetwork", "(Z)V", (void *) resumeNetwork},
         {"native_updateDcSettings", "()V", (void *) updateDcSettings},
         {"native_setUseIpv6", "(Z)V", (void *) setUseIpv6},
         {"native_setNetworkAvailable", "(Z)V", (void *) setNetworkAvailable},
+        {"native_setPushConnectionEnabled", "(Z)V", (void *) setPushConnectionEnabled},
         {"native_setJava", "(Z)V", (void *) setJava}
 };
 
diff --git a/TMessagesProj/jni/audio.c b/TMessagesProj/jni/audio.c
index 87f946d4d..c6fd3650a 100644
--- a/TMessagesProj/jni/audio.c
+++ b/TMessagesProj/jni/audio.c
@@ -671,8 +671,7 @@ JNIEXPORT int Java_org_telegram_messenger_MediaController_isOpusFile(JNIEnv *env
     return result;
 }
 
-static inline void set_bits(uint8_t *bytes, int32_t bitOffset, int32_t numBits, int32_t value) {
-    numBits = (unsigned int) (2 << (numBits - 1)) - 1;
+static inline void set_bits(uint8_t *bytes, int32_t bitOffset, int32_t value) {
     bytes += bitOffset / 8;
     bitOffset %= 8;
     *((int32_t *) bytes) |= (value << bitOffset);
@@ -727,7 +726,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform2(JN
     
     for (int i = 0; i < resultSamples; i++) {
         int32_t value = min(31, abs((int32_t) samples[i]) * 31 / peak);
-        set_bits(bytes, i * 5, 5, value & 31);
+        set_bits(bytes, i * 5, value & 31);
     }
     
     (*env)->ReleaseByteArrayElements(env, result, bytes, JNI_COMMIT);
@@ -805,7 +804,7 @@ JNIEXPORT jbyteArray Java_org_telegram_messenger_MediaController_getWaveform(JNI
         
         for (int i = 0; i < resultSamples; i++) {
             int32_t value = min(31, abs((int32_t) samples[i]) * 31 / peak);
-            set_bits(bytes, i * 5, 5, value & 31);
+            set_bits(bytes, i * 5, value & 31);
         }
 
         (*env)->ReleaseByteArrayElements(env, result, bytes, JNI_COMMIT);
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index f7a2cfefa..5f1d78dee 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -397,13 +397,13 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_calcCDT(JNIEnv *env, jclass
 
 JNIEXPORT int Java_org_telegram_messenger_Utilities_pinBitmap(JNIEnv *env, jclass class, jobject bitmap) {
     if (bitmap == NULL) {
-        return;
+        return 0;
     }
     unsigned char *pixels;
     return AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0 ? 1 : 0;
 }
 
-JNIEXPORT int Java_org_telegram_messenger_Utilities_unpinBitmap(JNIEnv *env, jclass class, jobject bitmap) {
+JNIEXPORT void Java_org_telegram_messenger_Utilities_unpinBitmap(JNIEnv *env, jclass class, jobject bitmap) {
     if (bitmap == NULL) {
         return;
     }
diff --git a/TMessagesProj/jni/jni.c b/TMessagesProj/jni/jni.c
index 2b17fd617..711b91c90 100644
--- a/TMessagesProj/jni/jni.c
+++ b/TMessagesProj/jni/jni.c
@@ -5,6 +5,7 @@
 #include <inttypes.h>
 #include <stdlib.h>
 #include <openssl/aes.h>
+#include <unistd.h>
 #include "utils.h"
 #include "sqlite.h"
 #include "image.h"
diff --git a/TMessagesProj/jni/sqlite_statement.c b/TMessagesProj/jni/sqlite_statement.c
index 2fc4ef337..4957f790b 100755
--- a/TMessagesProj/jni/sqlite_statement.c
+++ b/TMessagesProj/jni/sqlite_statement.c
@@ -8,8 +8,8 @@ jint sqliteOnJNILoad(JavaVM *vm, void *reserved, JNIEnv *env) {
 	return JNI_VERSION_1_6;
 }
 
-int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv* env, jobject object, int statementHandle) {
-	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv *env, jobject object, int statementHandle) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
     
     int errcode = sqlite3_step(handle);
     if (errcode == SQLITE_ROW)  {
@@ -23,7 +23,7 @@ int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv* env, jobject o
 }
 
 int Java_org_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobject object, int sqliteHandle, jstring sql) {
-	sqlite3* handle = (sqlite3 *)sqliteHandle;
+	sqlite3 *handle = (sqlite3 *) sqliteHandle;
 
     char const *sqlStr = (*env)->GetStringUTFChars(env, sql, 0);
 
@@ -41,11 +41,11 @@ int Java_org_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobjec
         (*env)->ReleaseStringUTFChars(env, sql, sqlStr);
     }
 
-    return (int)stmt_handle;
+    return (int) stmt_handle;
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject object, int statementHandle) {
-	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
 
 	int errcode = sqlite3_reset(handle);
     if (SQLITE_OK != errcode) {
@@ -54,16 +54,11 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobject object, int statementHandle) {
-	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
-
-	int errcode = sqlite3_finalize (handle);
-    if (SQLITE_OK != errcode) {
-    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
-    }
+    sqlite3_finalize((sqlite3_stmt *) statementHandle);
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env, jobject object, int statementHandle, int index, jobject value, int length) {
-	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
     jbyte *buf = (*env)->GetDirectBufferAddress(env, value);
     
 	int errcode = sqlite3_bind_blob(handle, index, buf, length, SQLITE_STATIC);
@@ -73,7 +68,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jobject object, int statementHandle, int index, jstring value) {
-	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
 
 	char const *valueStr = (*env)->GetStringUTFChars(env, value, 0);
 
@@ -88,7 +83,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jo
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobject object, int statementHandle, int index, int value) {
-	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
 
 	int errcode = sqlite3_bind_int(handle, index, value);
     if (SQLITE_OK != errcode) {
@@ -97,7 +92,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobje
 }
 
 void Java_org_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobject object, int statementHandle, int index, long long value) {
-	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
     
 	int errcode = sqlite3_bind_int64(handle, index, value);
     if (SQLITE_OK != errcode) {
@@ -105,8 +100,8 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobj
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv* env, jobject object, int statementHandle, int index, double value) {
-	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv *env, jobject object, int statementHandle, int index, double value) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
 
 	int errcode = sqlite3_bind_double(handle, index, value);
     if (SQLITE_OK != errcode) {
@@ -114,8 +109,8 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv* env, jo
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindNull(JNIEnv* env, jobject object, int statementHandle, int index) {
-	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindNull(JNIEnv *env, jobject object, int statementHandle, int index) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
 
 	int errcode = sqlite3_bind_null(handle, index);
     if (SQLITE_OK != errcode) {
diff --git a/TMessagesProj/jni/tgnet/Connection.cpp b/TMessagesProj/jni/tgnet/Connection.cpp
index 3a9e7a3af..9ea752b8d 100644
--- a/TMessagesProj/jni/tgnet/Connection.cpp
+++ b/TMessagesProj/jni/tgnet/Connection.cpp
@@ -57,7 +57,7 @@ void Connection::suspendConnection() {
 }
 
 void Connection::onReceivedData(NativeByteBuffer *buffer) {
-    //AES_ctr128_encrypt(buffer->bytes(), buffer->bytes(), buffer->limit(), &decryptKey, decryptIv, decryptCount, &decryptNum);
+    AES_ctr128_encrypt(buffer->bytes(), buffer->bytes(), buffer->limit(), &decryptKey, decryptIv, decryptCount, &decryptNum);
     
     failedConnectionCount = 0;
 
@@ -323,11 +323,11 @@ void Connection::sendData(NativeByteBuffer *buff, bool reportAck) {
             uint32_t val = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0]);
             uint32_t val2 = (bytes[7] << 24) | (bytes[6] << 16) | (bytes[5] << 8) | (bytes[4]);
             if (bytes[0] != 0xef && val != 0x44414548 && val != 0x54534f50 && val != 0x20544547 && val != 0x4954504f && val != 0xeeeeeeee && val2 != 0x00000000) {
-                //bytes[56] = bytes[57] = bytes[58] = bytes[59] = 0xef;
+                bytes[56] = bytes[57] = bytes[58] = bytes[59] = 0xef;
                 break;
             }
         }
-        /*for (int a = 0; a < 48; a++) {
+        for (int a = 0; a < 48; a++) {
             temp[a] = bytes[55 - a];
         }
         
@@ -348,7 +348,7 @@ void Connection::sendData(NativeByteBuffer *buff, bool reportAck) {
         memcpy(decryptIv, temp + 32, 16);
         
         AES_ctr128_encrypt(bytes, temp, 64, &encryptKey, encryptIv, encryptCount, &encryptNum);
-        memcpy(bytes + 56, temp + 56, 8);*/
+        memcpy(bytes + 56, temp + 56, 8);
         
         firstPacketSent = true;
     }
@@ -358,7 +358,7 @@ void Connection::sendData(NativeByteBuffer *buff, bool reportAck) {
         }
         buffer->writeByte((uint8_t) packetLength);
         bytes += (buffer->limit() - 1);
-        //AES_ctr128_encrypt(bytes, bytes, 1, &encryptKey, encryptIv, encryptCount, &encryptNum);
+        AES_ctr128_encrypt(bytes, bytes, 1, &encryptKey, encryptIv, encryptCount, &encryptNum);
     } else {
         packetLength = (packetLength << 8) + 0x7f;
         if (reportAck) {
@@ -366,13 +366,13 @@ void Connection::sendData(NativeByteBuffer *buff, bool reportAck) {
         }
         buffer->writeInt32(packetLength);
         bytes += (buffer->limit() - 4);
-        //AES_ctr128_encrypt(bytes, bytes, 4, &encryptKey, encryptIv, encryptCount, &encryptNum);
+        AES_ctr128_encrypt(bytes, bytes, 4, &encryptKey, encryptIv, encryptCount, &encryptNum);
     }
 
     buffer->rewind();
     writeBuffer(buffer);
     buff->rewind();
-    //AES_ctr128_encrypt(buff->bytes(), buff->bytes(), buff->limit(), &encryptKey, encryptIv, encryptCount, &encryptNum);
+    AES_ctr128_encrypt(buff->bytes(), buff->bytes(), buff->limit(), &encryptKey, encryptIv, encryptCount, &encryptNum);
     writeBuffer(buff);
 }
 
@@ -394,7 +394,7 @@ void Connection::onDisconnected(int reason) {
     ConnectionsManager::getInstance().onConnectionClosed(this);
 
     uint32_t datacenterId = currentDatacenter->getDatacenterId();
-    if (connectionState == TcpConnectionStageIdle && connectionType == ConnectionTypeGeneric && (datacenterId == ConnectionsManager::getInstance().currentDatacenterId || datacenterId == ConnectionsManager::getInstance().movingToDatacenterId)) {
+    if (connectionState == TcpConnectionStageIdle && connectionType == ConnectionTypeGeneric && (currentDatacenter->isHandshaking() || datacenterId == ConnectionsManager::getInstance().currentDatacenterId || datacenterId == ConnectionsManager::getInstance().movingToDatacenterId)) {
         connectionState = TcpConnectionStageReconnecting;
         failedConnectionCount++;
         if (failedConnectionCount == 1) {
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 1b8a85b74..3e6f07689 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -170,22 +170,24 @@ void ConnectionsManager::select() {
     }
 
     Datacenter *datacenter = getDatacenterWithId(currentDatacenterId);
-    if ((sendingPushPing && abs(now - lastPushPingTime) >= 30000) || abs(now - lastPushPingTime) >= 60000 * 3 + 10000) {
-        lastPushPingTime = 0;
-        sendingPushPing = false;
-        if (datacenter != nullptr) {
-            Connection *connection = datacenter->getPushConnection(false);
-            if (connection != nullptr) {
-                connection->suspendConnection();
+    if (pushConnectionEnabled) {
+        if ((sendingPushPing && abs(now - lastPushPingTime) >= 30000) || abs(now - lastPushPingTime) >= 60000 * 3 + 10000) {
+            lastPushPingTime = 0;
+            sendingPushPing = false;
+            if (datacenter != nullptr) {
+                Connection *connection = datacenter->getPushConnection(false);
+                if (connection != nullptr) {
+                    connection->suspendConnection();
+                }
             }
+            DEBUG_D("push ping timeout");
         }
-        DEBUG_D("push ping timeout");
-    }
-    if (abs(now - lastPushPingTime) >= 60000 * 3) {
-        DEBUG_D("time for push ping");
-        lastPushPingTime = now;
-        if (datacenter != nullptr) {
-            sendPing(datacenter, true);
+        if (abs(now - lastPushPingTime) >= 60000 * 3) {
+            DEBUG_D("time for push ping");
+            lastPushPingTime = now;
+            if (datacenter != nullptr) {
+                sendPing(datacenter, true);
+            }
         }
     }
 
@@ -220,7 +222,7 @@ void ConnectionsManager::select() {
             return;
         } else {
             lastPauseTime = now;
-            DEBUG_D("don't sleep 30 seconds because of salt, upload or download request");
+            DEBUG_D("don't sleep because of salt, upload or download request");
         }
     }
     if (networkPaused) {
@@ -285,7 +287,7 @@ void *ConnectionsManager::ThreadProc(void *data) {
     javaVm->AttachCurrentThread(&jniEnv, NULL);
 #endif
     ConnectionsManager *networkManager = (ConnectionsManager *) (data);
-    if (networkManager->currentUserId != 0) {
+    if (networkManager->currentUserId != 0 && networkManager->pushConnectionEnabled) {
         Datacenter *datacenter = networkManager->getDatacenterWithId(networkManager->currentDatacenterId);
         if (datacenter != nullptr) {
             datacenter->createPushConnection()->setSessionId(networkManager->pushSessionId);
@@ -595,7 +597,6 @@ void ConnectionsManager::onConnectionConnected(Connection *connection) {
         } else {
             if (networkPaused && lastPauseTime != 0) {
                 lastPauseTime = getCurrentTimeMillis();
-                nextSleepTimeout = 30000;
             }
             processRequestQueue(connection->getConnectionType(), datacenter->getDatacenterId());
         }
@@ -1210,7 +1211,6 @@ void ConnectionsManager::processServerResponse(TLObject *message, int64_t messag
         if (connection->connectionType == ConnectionTypePush) {
             if (networkPaused) {
                 lastPauseTime = getCurrentTimeMillis();
-                nextSleepTimeout = 30000;
                 DEBUG_D("received internal push: wakeup network in background");
             } else if (lastPauseTime != 0) {
                 lastPauseTime = getCurrentTimeMillis();
@@ -1234,7 +1234,7 @@ void ConnectionsManager::processServerResponse(TLObject *message, int64_t messag
 }
 
 void ConnectionsManager::sendPing(Datacenter *datacenter, bool usePushConnection) {
-    if (usePushConnection && currentUserId == 0) {
+    if (usePushConnection && (currentUserId == 0 || !usePushConnection)) {
         return;
     }
     Connection *connection = nullptr;
@@ -1401,7 +1401,7 @@ void ConnectionsManager::sendRequest(TLObject *object, onCompleteFunc onComplete
         request->ptr1 = ptr1;
         request->ptr2 = ptr2;
         request->rpcRequest = wrapInLayer(object, getDatacenterWithId(datacenterId), request);
-        DEBUG_D("send request wrapped %p - %s", request->rpcRequest.get(), typeid(*request->rpcRequest.get()).name());
+        DEBUG_D("send request wrapped %p - %s", request->rpcRequest.get(), typeid(*(request->rpcRequest.get())).name());
         requestsQueue.push_back(std::unique_ptr<Request>(request));
         if (immediate) {
             processRequestQueue(0, 0);
@@ -1452,7 +1452,7 @@ void ConnectionsManager::setUserId(int32_t userId) {
         if (currentUserId != userId && userId != 0) {
             updateDcSettings(0);
         }
-        if (currentUserId != 0) {
+        if (currentUserId != 0 && pushConnectionEnabled) {
             Datacenter *datacenter = getDatacenterWithId(currentDatacenterId);
             if (datacenter != nullptr) {
                 datacenter->createPushConnection()->setSessionId(pushSessionId);
@@ -2121,7 +2121,7 @@ void ConnectionsManager::processRequestQueue(uint32_t connectionTypes, uint32_t
                             request->outgoingQuery = message->outgoingBody;
                             message->outgoingBody = nullptr;
                         } else {
-                            DEBUG_D("wrap body(%p, %s) to TL_invokeAfterMsg", message->body.get(), typeid(*message->body.get()).name());
+                            DEBUG_D("wrap body(%p, %s) to TL_invokeAfterMsg", message->body.get(), typeid(*(message->body.get())).name());
                             request->query = std::move(message->body);
                         }
                         message->body = std::unique_ptr<TLObject>(request);
@@ -2390,7 +2390,23 @@ void ConnectionsManager::setDelegate(ConnectiosManagerDelegate *connectiosManage
     delegate = connectiosManagerDelegate;
 }
 
-void ConnectionsManager::init(uint32_t version, int32_t layer, int32_t apiId, std::string deviceModel, std::string systemVersion, std::string appVersion, std::string langCode, std::string configPath, std::string logPath, int32_t userId, bool isPaused) {
+void ConnectionsManager::setPushConnectionEnabled(bool value) {
+    pushConnectionEnabled = value;
+    Datacenter *datacenter = getDatacenterWithId(currentDatacenterId);
+    if (datacenter != nullptr) {
+        if (!pushConnectionEnabled) {
+            Connection *connection = datacenter->getPushConnection(false);
+            if (connection != nullptr) {
+                connection->suspendConnection();
+            }
+        } else {
+            datacenter->createPushConnection()->setSessionId(pushSessionId);
+            sendPing(datacenter, true);
+        }
+    }
+}
+
+void ConnectionsManager::init(uint32_t version, int32_t layer, int32_t apiId, std::string deviceModel, std::string systemVersion, std::string appVersion, std::string langCode, std::string configPath, std::string logPath, int32_t userId, bool isPaused, bool enablePushConnection) {
     currentVersion = version;
     currentLayer = layer;
     currentApiId = apiId;
@@ -2401,6 +2417,7 @@ void ConnectionsManager::init(uint32_t version, int32_t layer, int32_t apiId, st
     currentLangCode = langCode;
     currentUserId = userId;
     currentLogPath = logPath;
+    pushConnectionEnabled = enablePushConnection;
     if (isPaused) {
         lastPauseTime = getCurrentTimeMillis();
     }
@@ -2423,7 +2440,6 @@ void ConnectionsManager::resumeNetwork(bool partial) {
         if (partial) {
             if (networkPaused) {
                 lastPauseTime = getCurrentTimeMillis();
-                nextSleepTimeout = 30000;
                 networkPaused = false;
                 DEBUG_D("wakeup network in background");
             } else if (lastPauseTime != 0) {
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.h b/TMessagesProj/jni/tgnet/ConnectionsManager.h
index d389cb32f..ecfad29d1 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.h
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.h
@@ -60,8 +60,9 @@ class ConnectionsManager {
     void pauseNetwork();
     void setNetworkAvailable(bool value);
     void setUseIpv6(bool value);
-    void init(uint32_t version, int32_t layer, int32_t apiId, std::string deviceModel, std::string systemVersion, std::string appVersion, std::string langCode, std::string configPath, std::string logPath, int32_t userId, bool isPaused);
+    void init(uint32_t version, int32_t layer, int32_t apiId, std::string deviceModel, std::string systemVersion, std::string appVersion, std::string langCode, std::string configPath, std::string logPath, int32_t userId, bool isPaused, bool enablePushConnection);
     void updateDcSettings(uint32_t datacenterId);
+    void setPushConnectionEnabled(bool value);
 
 #ifdef ANDROID
     void sendRequest(TLObject *object, onCompleteFunc onComplete, onQuickAckFunc onQuickAck, uint32_t flags, uint32_t datacenterId, ConnectionType connetionType, bool immediate, int32_t requestToken, jobject ptr1, jobject ptr2);
@@ -133,7 +134,7 @@ class ConnectionsManager {
     int32_t lastDcUpdateTime = 0;
     int64_t lastPingTime = getCurrentTimeMillis();
     bool networkPaused = false;
-    int32_t nextSleepTimeout = 30000;
+    int32_t nextSleepTimeout = CONNECTION_BACKGROUND_KEEP_TIME;
     int64_t lastPauseTime = 0;
     ConnectionState connectionState = ConnectionStateConnecting;
     std::unique_ptr<ByteArray> movingAuthorization;
@@ -172,6 +173,7 @@ class ConnectionsManager {
     std::string currentLogPath;
     int32_t currentUserId = 0;
     bool registeredForInternalPush = false;
+    bool pushConnectionEnabled = true;
 
     ConnectiosManagerDelegate *delegate;
 
diff --git a/TMessagesProj/jni/tgnet/Defines.h b/TMessagesProj/jni/tgnet/Defines.h
index 92d9ab34a..168199bdb 100644
--- a/TMessagesProj/jni/tgnet/Defines.h
+++ b/TMessagesProj/jni/tgnet/Defines.h
@@ -21,6 +21,7 @@
 #define DEFAULT_DATACENTER_ID INT_MAX
 #define DC_UPDATE_TIME 60 * 60
 #define DOWNLOAD_CONNECTIONS_COUNT 2
+#define CONNECTION_BACKGROUND_KEEP_TIME 10000
 
 class TLObject;
 class TL_error;
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index d73a9affa..f16acf716 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -99,6 +99,8 @@
                 <category android:name="android.intent.category.BROWSABLE" />
                 <data android:host="telegram.me" android:scheme="http" />
                 <data android:host="telegram.me" android:scheme="https" />
+                <data android:host="telegram.dog" android:scheme="http" />
+                <data android:host="telegram.dog" android:scheme="https" />
             </intent-filter>
             <intent-filter android:icon="@drawable/ic_launcher" android:priority="1">
                 <action android:name="android.intent.action.VIEW" />
@@ -211,6 +213,8 @@
 
         <receiver android:name=".WearReplyReceiver" android:enabled="true"/>
 
+        <receiver android:name=".ShareBroadcastReceiver" android:enabled="true"/>
+
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
         <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
index c68c62db2..6ab2e575d 100755
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
@@ -77,7 +77,6 @@ public void finalize() throws Throwable {
 		close();
 	}
 
-    private StackTraceElement[] temp;
     public void beginTransaction() throws SQLiteException {
         if (inTransaction) {
             throw new SQLiteException("database already in transaction");
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index c0dece7b2..133433214 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -19,19 +19,19 @@
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.Cursor;
+import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.Typeface;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
-import android.os.Parcelable;
-import android.provider.Browser;
 import android.provider.DocumentsContract;
 import android.provider.MediaStore;
-import android.text.Spannable;
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
 import android.text.style.ForegroundColorSpan;
@@ -59,6 +59,7 @@
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.ForegroundDetector;
 import org.telegram.ui.Components.NumberPicker;
 import org.telegram.ui.Components.TypefaceSpan;
@@ -84,7 +85,9 @@
     private static final Hashtable<String, Typeface> typefaceCache = new Hashtable<>();
     private static int prevOrientation = -10;
     private static boolean waitingForSms = false;
+    private static boolean waitingForCall = false;
     private static final Object smsLock = new Object();
+    private static final Object callLock = new Object();
 
     public static int statusBarHeight = 0;
     public static float density = 1;
@@ -124,14 +127,111 @@
         }
     }
 
-
-
     static {
         density = ApplicationLoader.applicationContext.getResources().getDisplayMetrics().density;
         leftBaseline = isTablet() ? 80 : 72;
         checkDisplaySize();
     }
 
+    public static int[] calcDrawableColor(Drawable drawable) {
+        int bitmapColor = 0xff000000;
+        int result[] = new int[2];
+        try {
+            if (drawable instanceof BitmapDrawable) {
+                Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
+                if (bitmap != null) {
+                    Bitmap b = Bitmaps.createScaledBitmap(bitmap, 1, 1, true);
+                    if (b != null) {
+                        bitmapColor = b.getPixel(0, 0);
+                        b.recycle();
+                    }
+                }
+            } else if (drawable instanceof ColorDrawable) {
+                if (Build.VERSION.SDK_INT >= 11) {
+                    bitmapColor = ((ColorDrawable) drawable).getColor();
+                } else {
+                    bitmapColor = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getInt("selectedColor", 0xff000000);
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        double[] hsv = rgbToHsv((bitmapColor >> 16) & 0xff, (bitmapColor >> 8) & 0xff, bitmapColor & 0xff);
+        hsv[1] = Math.min(1.0, hsv[1] + 0.05 + 0.1 * (1.0 - hsv[1]));
+        hsv[2] = Math.max(0, hsv[2] * 0.65);
+        int rgb[] = hsvToRgb(hsv[0], hsv[1], hsv[2]);
+        result[0] = Color.argb(0x66, rgb[0], rgb[1], rgb[2]);
+        result[1] = Color.argb(0x88, rgb[0], rgb[1], rgb[2]);
+        return result;
+    }
+
+    private static double[] rgbToHsv(int r, int g, int b) {
+        double rf = r / 255.0;
+        double gf = g / 255.0;
+        double bf = b / 255.0;
+        double max = (rf > gf && rf > bf) ? rf : (gf > bf) ? gf : bf;
+        double min = (rf < gf && rf < bf) ? rf : (gf < bf) ? gf : bf;
+        double h, s;
+        double d = max - min;
+        s = max == 0 ? 0 : d / max;
+        if (max == min) {
+            h = 0;
+        } else {
+            if (rf > gf && rf > bf) {
+                h = (gf - bf) / d + (gf < bf ? 6 : 0);
+            } else if (gf > bf) {
+                h = (bf - rf) / d + 2;
+            } else {
+                h = (rf - gf) / d + 4;
+            }
+            h /= 6;
+        }
+        return new double[]{h, s, max};
+    }
+
+    private static int[] hsvToRgb(double h, double s, double v) {
+        double r = 0, g = 0, b = 0;
+        double i = (int) Math.floor(h * 6);
+        double f = h * 6 - i;
+        double p = v * (1 - s);
+        double q = v * (1 - f * s);
+        double t = v * (1 - (1 - f) * s);
+        switch ((int) i % 6) {
+            case 0:
+                r = v;
+                g = t;
+                b = p;
+                break;
+            case 1:
+                r = q;
+                g = v;
+                b = p;
+                break;
+            case 2:
+                r = p;
+                g = v;
+                b = t;
+                break;
+            case 3:
+                r = p;
+                g = q;
+                b = v;
+                break;
+            case 4:
+                r = t;
+                g = p;
+                b = v;
+                break;
+            case 5:
+                r = v;
+                g = p;
+                b = q;
+                break;
+        }
+        return new int[]{(int) (r * 255), (int) (g * 255), (int) (b * 255)};
+    }
+
     public static void requestAdjustResize(Activity activity, int classGuid) {
         if (activity == null || isTablet()) {
             return;
@@ -149,8 +249,36 @@ public static void removeAdjustResize(Activity activity, int classGuid) {
         }
     }
 
+    public static boolean isGoogleMapsInstalled(final BaseFragment fragment) {
+        try {
+            ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
+            return true;
+        } catch (PackageManager.NameNotFoundException e) {
+            if (fragment.getParentActivity() == null) {
+                return false;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
+            builder.setMessage("Install Google Maps?");
+            builder.setCancelable(true);
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    try {
+                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.google.android.apps.maps"));
+                        fragment.getParentActivity().startActivityForResult(intent, 500);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+            fragment.showDialog(builder.create());
+            return false;
+        }
+    }
+
     public static void lockOrientation(Activity activity) {
-        if (activity == null || prevOrientation != -10 || Build.VERSION.SDK_INT < 9) {
+        if (activity == null || prevOrientation != -10) {
             return;
         }
         try {
@@ -159,22 +287,16 @@ public static void lockOrientation(Activity activity) {
             if (manager != null && manager.getDefaultDisplay() != null) {
                 int rotation = manager.getDefaultDisplay().getRotation();
                 int orientation = activity.getResources().getConfiguration().orientation;
-                int SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 8;
-                int SCREEN_ORIENTATION_REVERSE_PORTRAIT = 9;
-                if (Build.VERSION.SDK_INT < 9) {
-                    SCREEN_ORIENTATION_REVERSE_LANDSCAPE = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
-                    SCREEN_ORIENTATION_REVERSE_PORTRAIT = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-                }
 
                 if (rotation == Surface.ROTATION_270) {
                     if (orientation == Configuration.ORIENTATION_PORTRAIT) {
                         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                     } else {
-                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
                     }
                 } else if (rotation == Surface.ROTATION_90) {
                     if (orientation == Configuration.ORIENTATION_PORTRAIT) {
-                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
                     } else {
                         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
                     }
@@ -186,9 +308,9 @@ public static void lockOrientation(Activity activity) {
                     }
                 } else {
                     if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
                     } else {
-                        activity.setRequestedOrientation(SCREEN_ORIENTATION_REVERSE_PORTRAIT);
+                        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
                     }
                 }
             }
@@ -198,7 +320,7 @@ public static void lockOrientation(Activity activity) {
     }
 
     public static void unlockOrientation(Activity activity) {
-        if (activity == null || Build.VERSION.SDK_INT < 9) {
+        if (activity == null) {
             return;
         }
         try {
@@ -240,6 +362,20 @@ public static void setWaitingForSms(boolean value) {
         }
     }
 
+    public static boolean isWaitingForCall() {
+        boolean value;
+        synchronized (callLock) {
+            value = waitingForCall;
+        }
+        return value;
+    }
+
+    public static void setWaitingForCall(boolean value) {
+        synchronized (callLock) {
+            waitingForCall = value;
+        }
+    }
+
     public static void showKeyboard(View view) {
         if (view == null) {
             return;
@@ -411,29 +547,6 @@ public static int getMinTabletSide() {
         }
     }
 
-    public static void openUrl(Context context, String url) {
-        if (context == null || url == null) {
-            return;
-        }
-        openUrl(context, Uri.parse(url));
-    }
-
-    public static void openUrl(Context context, Uri uri) {
-        if (context == null || uri == null) {
-            return;
-        }
-        try {
-            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-            intent.putExtra("android.support.customtabs.extra.SESSION", (Parcelable) null);
-            intent.putExtra("android.support.customtabs.extra.TOOLBAR_COLOR", 0xff54759e);
-            intent.putExtra("android.support.customtabs.extra.TITLE_VISIBILITY", 1);
-            intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());
-            context.startActivity(intent);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
     public static int getPhotoSize() {
         if (photoSize == null) {
             if (Build.VERSION.SDK_INT >= 16) {
@@ -649,11 +762,11 @@ public static void clearDrawableAnimation(View view) {
     public static final int FLAG_TAG_COLOR = 4;
     public static final int FLAG_TAG_ALL = FLAG_TAG_BR | FLAG_TAG_BOLD | FLAG_TAG_COLOR;
 
-    public static Spannable replaceTags(String str) {
+    public static SpannableStringBuilder replaceTags(String str) {
         return replaceTags(str, FLAG_TAG_ALL);
     }
 
-    public static Spannable replaceTags(String str, int flag) {
+    public static SpannableStringBuilder replaceTags(String str, int flag) {
         try {
             int start;
             int end;
@@ -917,7 +1030,11 @@ public static String getDataColumn(Context context, Uri uri, String selection, S
             cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);
             if (cursor != null && cursor.moveToFirst()) {
                 final int column_index = cursor.getColumnIndexOrThrow(column);
-                return cursor.getString(column_index);
+                String value = cursor.getString(column_index);
+                if (value.startsWith("content://") || !value.startsWith("/") && !value.startsWith("file://")) {
+                    return null;
+                }
+                return value;
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index e511f2b16..6ed4862d6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -20,6 +20,9 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
@@ -45,6 +48,9 @@
     private static boolean isCustomTheme;
     private static final Object sync = new Object();
 
+    private static int serviceMessageColor;
+    private static int serviceSelectedMessageColor;
+
     public static volatile Context applicationContext;
     public static volatile Handler applicationHandler;
     private static volatile boolean applicationInited = false;
@@ -62,9 +68,27 @@ public static int getSelectedColor() {
 
     public static void reloadWallpaper() {
         cachedWallpaper = null;
+        serviceMessageColor = 0;
+        ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).edit().remove("serviceMessageColor").commit();
         loadWallpaper();
     }
 
+    private static void calcBackgroundColor() {
+        int result[] = AndroidUtilities.calcDrawableColor(cachedWallpaper);
+        serviceMessageColor = result[0];
+        serviceSelectedMessageColor = result[1];
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        preferences.edit().putInt("serviceMessageColor", serviceMessageColor).putInt("serviceSelectedMessageColor", serviceSelectedMessageColor).commit();
+    }
+
+    public static int getServiceMessageColor() {
+        return serviceMessageColor;
+    }
+
+    public static int getServiceSelectedMessageColor() {
+        return serviceSelectedMessageColor;
+    }
+
     public static void loadWallpaper() {
         if (cachedWallpaper != null) {
             return;
@@ -78,6 +102,8 @@ public void run() {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                         int selectedBackground = preferences.getInt("selectedBackground", 1000001);
                         selectedColor = preferences.getInt("selectedColor", 0);
+                        serviceMessageColor = preferences.getInt("serviceMessageColor", 0);
+                        serviceSelectedMessageColor = preferences.getInt("serviceSelectedMessageColor", 0);
                         if (selectedColor == 0) {
                             if (selectedBackground == 1000001) {
                                 cachedWallpaper = applicationContext.getResources().getDrawable(R.drawable.background_hd);
@@ -102,6 +128,9 @@ public void run() {
                         }
                         cachedWallpaper = new ColorDrawable(selectedColor);
                     }
+                    if (serviceMessageColor == 0) {
+                        calcBackgroundColor();
+                    }
                 }
             }
         });
@@ -213,7 +242,7 @@ public static void postInitApplication() {
         String configPath = getFilesDirFixed().toString();
 
         try {
-            langCode = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
+            langCode = LocaleController.getLocaleStringIso639();
             deviceModel = Build.MANUFACTURER + Build.MODEL;
             PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
             appVersion = pInfo.versionName + " (" + pInfo.versionCode + ")";
@@ -237,8 +266,11 @@ public static void postInitApplication() {
             systemVersion = "SDK Unknown";
         }
 
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        boolean enablePushConnection = preferences.getBoolean("pushConnection", true);
+
         MessagesController.getInstance();
-        ConnectionsManager.getInstance().init(BuildVars.BUILD_VERSION, TLRPC.LAYER, BuildVars.APP_ID, deviceModel, systemVersion, appVersion, langCode, configPath, FileLog.getNetworkLogPath(), UserConfig.getClientUserId());
+        ConnectionsManager.getInstance().init(BuildVars.BUILD_VERSION, TLRPC.LAYER, BuildVars.APP_ID, deviceModel, systemVersion, appVersion, langCode, configPath, FileLog.getNetworkLogPath(), UserConfig.getClientUserId(), enablePushConnection);
         if (UserConfig.getCurrentUser() != null) {
             MessagesController.getInstance().putUser(UserConfig.getCurrentUser(), true);
             ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
@@ -321,13 +353,18 @@ private void initPlayServices() {
             @Override
             public void run() {
                 if (checkPlayServices()) {
-                    if (UserConfig.pushString == null || UserConfig.pushString.length() == 0) {
+                    if (UserConfig.pushString != null && UserConfig.pushString.length() != 0) {
+                        FileLog.d("tmessages", "GCM regId = " + UserConfig.pushString);
+                    } else {
                         FileLog.d("tmessages", "GCM Registration not found.");
+                    }
+
+                    //if (UserConfig.pushString == null || UserConfig.pushString.length() == 0) {
                         Intent intent = new Intent(applicationContext, GcmRegistrationIntentService.class);
                         startService(intent);
-                    } else {
-                        FileLog.d("tmessages", "GCM regId = " + UserConfig.pushString);
-                    }
+                    //} else {
+                    //    FileLog.d("tmessages", "GCM regId = " + UserConfig.pushString);
+                    //}
                 } else {
                     FileLog.d("tmessages", "No valid Google Play Services APK found.");
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageHeardReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageHeardReceiver.java
index dd3baa741..a00576b78 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageHeardReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageHeardReceiver.java
@@ -16,6 +16,7 @@
 
     @Override
     public void onReceive(Context context, Intent intent) {
+        ApplicationLoader.postInitApplication();
         long dialog_id = intent.getLongExtra("dialog_id", 0);
         int max_id = intent.getIntExtra("max_id", 0);
         if (dialog_id == 0 || max_id == 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageReplyReceiver.java
index ba91e0f0a..1635bd37b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageReplyReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AutoMessageReplyReceiver.java
@@ -18,6 +18,7 @@
 
     @Override
     public void onReceive(Context context, Intent intent) {
+        ApplicationLoader.postInitApplication();
         Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
         if (remoteInput == null) {
             return;
@@ -31,7 +32,7 @@ public void onReceive(Context context, Intent intent) {
         if (dialog_id == 0 || max_id == 0) {
             return;
         }
-        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true, false, null, null);
+        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true, false, null, null, null);
         MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, true, false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 561857a6c..347eef541 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -10,8 +10,8 @@
 
 public class BuildVars {
     public static boolean DEBUG_VERSION = false;
-    public static int BUILD_VERSION = 753;
-    public static String BUILD_VERSION_STRING = "3.6";
+    public static int BUILD_VERSION = 787;
+    public static String BUILD_VERSION_STRING = "3.8";
     public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
     public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
     public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/CallReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/CallReceiver.java
index 2aae70ab0..58eeacd26 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/CallReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/CallReceiver.java
@@ -11,20 +11,24 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.telephony.PhoneStateListener;
+import android.telephony.TelephonyManager;
+
+import org.telegram.PhoneFormat.PhoneFormat;
 
 public class CallReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(final Context context, Intent intent) {
-        /*TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+        TelephonyManager telephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
         telephony.listen(new PhoneStateListener() {
             @Override
             public void onCallStateChanged(int state, String incomingNumber) {
                 super.onCallStateChanged(state, incomingNumber);
                 if (state == 1 && incomingNumber != null && incomingNumber.length() > 0) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceiveCall, incomingNumber);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceiveCall, PhoneFormat.stripExceptNumbers(incomingNumber));
                 }
             }
-        }, PhoneStateListener.LISTEN_CALL_STATE);*/
+        }, PhoneStateListener.LISTEN_CALL_STATE);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ClearCacheService.java b/TMessagesProj/src/main/java/org/telegram/messenger/ClearCacheService.java
index 044f80dcc..fb45992d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ClearCacheService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ClearCacheService.java
@@ -27,6 +27,8 @@ public ClearCacheService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        ApplicationLoader.postInitApplication();
+
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         final int keepMedia = preferences.getInt("keep_media", 2);
         if (keepMedia == 2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 4831c12b5..376ba2ede 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -173,7 +173,7 @@ public void checkInviteText() {
         if (!updatingInviteText && (inviteText == null || time + 86400 < (int)(System.currentTimeMillis() / 1000))) {
             updatingInviteText = true;
             TLRPC.TL_help_getInviteText req = new TLRPC.TL_help_getInviteText();
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
+            req.lang_code = LocaleController.getLocaleStringIso639();
             if (req.lang_code.length() == 0) {
                 req.lang_code = "en";
             }
@@ -1652,7 +1652,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
                 }*/
 
-                for (final TLRPC.User u : res.users) {
+                for (int a = 0; a < res.users.size(); a++) {
+                    final TLRPC.User u = res.users.get(a);
                     Utilities.phoneBookQueue.postRunnable(new Runnable() {
                         @Override
                         public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
index 49c0dc44f..7a5328550 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
@@ -265,9 +265,9 @@ public void run() {
                 b = getBounds();
             }
 
-            if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
+            //if (!canvas.quickReject(b.left, b.top, b.right, b.bottom, Canvas.EdgeType.AA)) {
                 canvas.drawBitmap(emojiBmp[info.page][info.page2], info.rect, b, paint);
-            }
+            //}
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 420b76718..2521e1d22 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -115,7 +115,7 @@ public FileLoadOperation(TLRPC.Document documentLocation) {
             }
             ext = FileLoader.getDocumentFileName(documentLocation);
             int idx;
-            if (ext == null || (idx = ext.lastIndexOf(".")) == -1) {
+            if (ext == null || (idx = ext.lastIndexOf('.')) == -1) {
                 ext = "";
             } else {
                 ext = ext.substring(idx);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 6e8d4f3fe..f07c29e17 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -550,13 +550,17 @@ public static String getMessageFileName(TLRPC.Message message) {
                         return getAttachFileName(sizeFull);
                     }
                 }
-            } else if (message.media instanceof TLRPC.TL_messageMediaWebPage && message.media.webpage.photo != null) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.media.webpage.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getAttachFileName(sizeFull);
+            } else if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
+                if (message.media.webpage.photo != null) {
+                    ArrayList<TLRPC.PhotoSize> sizes = message.media.webpage.photo.sizes;
+                    if (sizes.size() > 0) {
+                        TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
+                        if (sizeFull != null) {
+                            return getAttachFileName(sizeFull);
+                        }
                     }
+                } else if (message.media.webpage.document != null) {
+                    return getAttachFileName(message.media.webpage.document);
                 }
             }
         }
@@ -588,12 +592,16 @@ public static File getPathToMessage(TLRPC.Message message) {
                         return getPathToAttach(sizeFull);
                     }
                 }
-            } else if (message.media instanceof TLRPC.TL_messageMediaWebPage && message.media.webpage.photo != null) {
-                ArrayList<TLRPC.PhotoSize> sizes = message.media.webpage.photo.sizes;
-                if (sizes.size() > 0) {
-                    TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
-                    if (sizeFull != null) {
-                        return getPathToAttach(sizeFull);
+            } else if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
+                if (message.media.webpage.document != null) {
+                    return getPathToAttach(message.media.webpage.document);
+                } else if (message.media.webpage.photo != null) {
+                    ArrayList<TLRPC.PhotoSize> sizes = message.media.webpage.photo.sizes;
+                    if (sizes.size() > 0) {
+                        TLRPC.PhotoSize sizeFull = getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
+                        if (sizeFull != null) {
+                            return getPathToAttach(sizeFull);
+                        }
                     }
                 }
             }
@@ -659,7 +667,8 @@ public static File getPathToAttach(TLObject attach, String ext, boolean forceCac
         }
         int lastSide = 0;
         TLRPC.PhotoSize closestObject = null;
-        for (TLRPC.PhotoSize obj : sizes) {
+        for (int a = 0; a < sizes.size(); a++) {
+            TLRPC.PhotoSize obj = sizes.get(a);
             if (obj == null) {
                 continue;
             }
@@ -683,7 +692,7 @@ public static File getPathToAttach(TLObject attach, String ext, boolean forceCac
     public static String getFileExtension(File file) {
         String name = file.getName();
         try {
-            return name.substring(name.lastIndexOf(".") + 1);
+            return name.substring(name.lastIndexOf('.') + 1);
         } catch (Exception e) {
             return "";
         }
@@ -704,6 +713,23 @@ public static String getDocumentFileName(TLRPC.Document document) {
         return "";
     }
 
+    public static String getDocumentExtension(TLRPC.Document document) {
+        String fileName = getDocumentFileName(document);
+        int idx = fileName.lastIndexOf('.');
+        String ext = null;
+        if (idx != -1) {
+            ext = fileName.substring(idx + 1);
+        }
+        if (ext == null || ext.length() == 0) {
+            ext = document.mime_type;
+        }
+        if (ext == null) {
+            ext = "";
+        }
+        ext = ext.toUpperCase();
+        return ext;
+    }
+
     public static String getAttachFileName(TLObject attach) {
         return getAttachFileName(attach, null);
     }
@@ -715,7 +741,7 @@ public static String getAttachFileName(TLObject attach, String ext) {
             if (docExt == null) {
                 docExt = getDocumentFileName(document);
                 int idx;
-                if (docExt == null || (idx = docExt.lastIndexOf(".")) == -1) {
+                if (docExt == null || (idx = docExt.lastIndexOf('.')) == -1) {
                     docExt = "";
                 } else {
                     docExt = docExt.substring(idx);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
index 580f3ac99..6f0b6dc6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
@@ -138,8 +138,8 @@ public void run() {
                     try {
                         getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/" + tag + "﹕ " + e + "\n");
                         StackTraceElement[] stack = e.getStackTrace();
-                        for (StackTraceElement el : stack) {
-                            getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/" + tag + "﹕ " + el + "\n");
+                        for (int a = 0; a < stack.length; a++) {
+                            getInstance().streamWriter.write(getInstance().dateFormat.format(System.currentTimeMillis()) + " E/" + tag + "﹕ " + stack[a] + "\n");
                         }
                         getInstance().streamWriter.flush();
                     } catch (Exception e) {
@@ -194,16 +194,22 @@ public void run() {
 
     public static void cleanupLogs() {
         File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
+        if (sdCard == null) {
+            return;
+        }
         File dir = new File (sdCard.getAbsolutePath() + "/logs");
         File[] files = dir.listFiles();
-        for (File file : files) {
-            if (getInstance().currentFile != null && file.getAbsolutePath().equals(getInstance().currentFile.getAbsolutePath())) {
-                continue;
-            }
-            if (getInstance().networkFile != null && file.getAbsolutePath().equals(getInstance().networkFile.getAbsolutePath())) {
-                continue;
+        if (files != null) {
+            for (int a = 0; a < files.length; a++) {
+                File file = files[a];
+                if (getInstance().currentFile != null && file.getAbsolutePath().equals(getInstance().currentFile.getAbsolutePath())) {
+                    continue;
+                }
+                if (getInstance().networkFile != null && file.getAbsolutePath().equals(getInstance().networkFile.getAbsolutePath())) {
+                    continue;
+                }
+                file.delete();
             }
-            file.delete();
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
index f683a7251..e02a2d1e5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
@@ -46,6 +46,7 @@ public void run() {
                     FileLog.e("tmessages", e);
                 }
 
+                ConnectionsManager.onInternalPushReceived();
                 ConnectionsManager.getInstance().resumeNetworkMaybe();
             }
         });
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java
index c135cce48..f99e711f5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java
@@ -24,9 +24,15 @@ public GcmRegistrationIntentService() {
     protected void onHandleIntent(Intent intent) {
         try {
             InstanceID instanceID = InstanceID.getInstance(this);
-            String token = instanceID.getToken(BuildVars.GCM_SENDER_ID, GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
+            final String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
             FileLog.d("tmessages", "GCM Registration Token: " + token);
-            sendRegistrationToServer(token);
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    ApplicationLoader.postInitApplication();
+                    sendRegistrationToServer(token);
+                }
+            });
         } catch (Exception e) {
             FileLog.e("tmessages", e);
             final int failCount = intent.getIntExtra("failCount", 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
index 68efb2c5f..079514d34 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageLoader.java
@@ -23,7 +23,6 @@
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Environment;
-import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
 import org.telegram.tgnet.ConnectionsManager;
@@ -33,7 +32,6 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.FileDescriptor;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
@@ -1811,7 +1809,7 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
                 key = document.dc_id + "_" + document.id;
                 String docExt = FileLoader.getDocumentFileName(document);
                 int idx;
-                if (docExt == null || (idx = docExt.lastIndexOf(".")) == -1) {
+                if (docExt == null || (idx = docExt.lastIndexOf('.')) == -1) {
                     docExt = "";
                 } else {
                     docExt = docExt.substring(idx);
@@ -1948,21 +1946,12 @@ private void runHttpTasks(boolean complete) {
         }
     }
 
-    public void loadHttpFile(String url, String extension) {
+    public void loadHttpFile(String url, String defaultExt) {
         if (url == null || url.length() == 0 || httpFileLoadTasksByKeys.containsKey(url)) {
             return;
         }
-        String ext = extension;
-        if (ext == null) {
-            int idx = url.lastIndexOf(".");
-            if (idx != -1) {
-                ext = url.substring(idx + 1);
-            }
-            if (ext == null || ext.length() == 0 || ext.length() > 4) {
-                ext = "jpg";
-            }
-        }
-        File file = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(url) + "_temp." + getHttpUrlExtension(url, extension));
+        String ext = getHttpUrlExtension(url, defaultExt);
+        File file = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(url) + "_temp." + ext);
         file.delete();
 
         HttpFileTask task = new HttpFileTask(url, file, ext);
@@ -2031,8 +2020,7 @@ public void run() {
     public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxHeight, boolean useMaxScale) {
         BitmapFactory.Options bmOptions = new BitmapFactory.Options();
         bmOptions.inJustDecodeBounds = true;
-        FileDescriptor fileDescriptor = null;
-        ParcelFileDescriptor parcelFD = null;
+        InputStream inputStream = null;
 
         if (path == null && uri != null && uri.getScheme() != null) {
             String imageFilePath = null;
@@ -2052,9 +2040,10 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
         } else if (uri != null) {
             boolean error = false;
             try {
-                parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-                fileDescriptor = parcelFD.getFileDescriptor();
-                BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
+                inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
+                BitmapFactory.decodeStream(inputStream, null, bmOptions);
+                inputStream.close();
+                inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
             } catch (Throwable e) {
                 FileLog.e("tmessages", e);
                 return null;
@@ -2138,7 +2127,7 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
             }
         } else if (uri != null) {
             try {
-                b = BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
+                b = BitmapFactory.decodeStream(inputStream, null, bmOptions);
                 if (b != null) {
                     if (bmOptions.inPurgeable) {
                         Utilities.pinBitmap(b);
@@ -2153,7 +2142,7 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
                 FileLog.e("tmessages", e);
             } finally {
                 try {
-                    parcelFD.close();
+                    inputStream.close();
                 } catch (Throwable e) {
                     FileLog.e("tmessages", e);
                 }
@@ -2278,7 +2267,7 @@ public static void fillPhotoSizeWithBytes(TLRPC.PhotoSize photoSize) {
 
     public static String getHttpUrlExtension(String url, String defaultExt) {
         String ext = null;
-        int idx = url.lastIndexOf(".");
+        int idx = url.lastIndexOf('.');
         if (idx != -1) {
             ext = url.substring(idx + 1);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
index 340d5f120..b7d156e08 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
@@ -50,6 +50,7 @@
     private Integer thumbTag;
     private MessageObject parentMessageObject;
     private boolean canceledLoading;
+    private static PorterDuffColorFilter selectedColorFilter = new PorterDuffColorFilter(0xffdddddd, PorterDuff.Mode.MULTIPLY);
 
     private SetImageBackup setImageBackup;
 
@@ -79,10 +80,11 @@
     private boolean forcePreview;
     private int roundRadius;
     private BitmapShader bitmapShader;
-    private Paint roundPaint;
-    private RectF roundRect;
-    private RectF bitmapRect;
-    private Matrix shaderMatrix;
+    private BitmapShader bitmapShaderThumb;
+    private static Paint roundPaint;
+    private RectF roundRect = new RectF();
+    private RectF bitmapRect = new RectF();
+    private Matrix shaderMatrix = new Matrix();
     private float overrideAlpha = 1.0f;
     private boolean isPressed;
     private int orientation;
@@ -95,11 +97,14 @@
     private ColorFilter colorFilter;
 
     public ImageReceiver() {
-
+        this(null);
     }
 
     public ImageReceiver(View view) {
         parentView = view;
+        if (roundPaint == null) {
+            roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        }
     }
 
     public void cancelLoadImage() {
@@ -156,6 +161,7 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
             currentSize = 0;
             currentImage = null;
             bitmapShader = null;
+            bitmapShaderThumb = null;
             ImageLoader.getInstance().cancelLoadingForImageReceiver(this, 0);
             if (parentView != null) {
                 if (invalidateAll) {
@@ -228,6 +234,7 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
         currentThumbLocation = thumbLocation;
         staticThumb = thumb;
         bitmapShader = null;
+        bitmapShaderThumb = null;
         currentAlpha = 1.0f;
 
         if (delegate != null) {
@@ -300,6 +307,7 @@ public void setImageBitmap(Drawable bitmap) {
         currentSize = 0;
         currentCacheOnly = false;
         bitmapShader = null;
+        bitmapShaderThumb = null;
         if (setImageBackup != null) {
             setImageBackup.fileLocation = null;
             setImageBackup.httpUrl = null;
@@ -356,33 +364,40 @@ public boolean onAttachedToWindow() {
         return false;
     }
 
-    private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
+    private void drawDrawable(Canvas canvas, Drawable drawable, int alpha, BitmapShader shader) {
         if (drawable instanceof BitmapDrawable) {
             BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
 
-            Paint paint = bitmapDrawable.getPaint();
+            Paint paint;
+            if (shader != null) {
+                paint = roundPaint;
+            } else {
+                paint = bitmapDrawable.getPaint();
+            }
             boolean hasFilter = paint != null && paint.getColorFilter() != null;
             if (hasFilter && !isPressed) {
-                bitmapDrawable.setColorFilter(null);
+                if (shader != null) {
+                    roundPaint.setColorFilter(null);
+                } else {
+                    bitmapDrawable.setColorFilter(null);
+                }
             } else if (!hasFilter && isPressed) {
-                bitmapDrawable.setColorFilter(new PorterDuffColorFilter(0xffdddddd, PorterDuff.Mode.MULTIPLY));
+                if (shader != null) {
+                    roundPaint.setColorFilter(selectedColorFilter);
+                } else {
+                    bitmapDrawable.setColorFilter(selectedColorFilter);
+                }
             }
             if (colorFilter != null) {
-                bitmapDrawable.setColorFilter(colorFilter);
-            }
-            if (bitmapShader != null) {
-                drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
-                if (isVisible) {
-                    roundRect.set(drawRegion);
-                    shaderMatrix.reset();
-                    shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
-                    bitmapShader.setLocalMatrix(shaderMatrix);
-                    roundPaint.setAlpha(alpha);
-                    canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
+                if (shader != null) {
+                    roundPaint.setColorFilter(colorFilter);
+                } else {
+                    bitmapDrawable.setColorFilter(colorFilter);
                 }
-            } else {
-                int bitmapW;
-                int bitmapH;
+            }
+            int bitmapW;
+            int bitmapH;
+            if (bitmapDrawable instanceof AnimatedFileDrawable) {
                 if (orientation % 360 == 90 || orientation % 360 == 270) {
                     bitmapW = bitmapDrawable.getIntrinsicHeight();
                     bitmapH = bitmapDrawable.getIntrinsicWidth();
@@ -390,9 +405,47 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
                     bitmapW = bitmapDrawable.getIntrinsicWidth();
                     bitmapH = bitmapDrawable.getIntrinsicHeight();
                 }
-                float scaleW = bitmapW / (float) imageW;
-                float scaleH = bitmapH / (float) imageH;
-
+            } else {
+                if (orientation % 360 == 90 || orientation % 360 == 270) {
+                    bitmapW = bitmapDrawable.getBitmap().getHeight();
+                    bitmapH = bitmapDrawable.getBitmap().getWidth();
+                } else {
+                    bitmapW = bitmapDrawable.getBitmap().getWidth();
+                    bitmapH = bitmapDrawable.getBitmap().getHeight();
+                }
+            }
+            float scaleW = bitmapW / (float) imageW;
+            float scaleH = bitmapH / (float) imageH;
+
+            if (shader != null) {
+                roundPaint.setShader(shader);
+                float scale = Math.min(scaleW, scaleH);
+                roundRect.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                shaderMatrix.reset();
+                if (Math.abs(scaleW - scaleH) > 0.00001f) {
+                    if (bitmapW / scaleH > imageW) {
+                        drawRegion.set(imageX - ((int) (bitmapW / scaleH) - imageW) / 2, imageY, imageX + ((int) (bitmapW / scaleH) + imageW) / 2, imageY + imageH);
+                    } else {
+                        drawRegion.set(imageX, imageY - ((int) (bitmapH / scaleW) - imageH) / 2, imageX + imageW, imageY + ((int) (bitmapH / scaleW) + imageH) / 2);
+                    }
+                } else {
+                    drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                }
+                if (isVisible) {
+                    if (Math.abs(scaleW - scaleH) > 0.00001f) {
+                        int w = (int) Math.floor(imageW * scale);
+                        int h = (int) Math.floor(imageH * scale);
+                        bitmapRect.set((bitmapW - w) / 2, (bitmapH - h) / 2, (bitmapW + w) / 2, (bitmapH + h) / 2);
+                        shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.START);
+                    } else {
+                        bitmapRect.set(0, 0, bitmapW, bitmapH);
+                        shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                    }
+                    shader.setLocalMatrix(shaderMatrix);
+                    roundPaint.setAlpha(alpha);
+                    canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
+                }
+            } else {
                 if (isAspectFit) {
                     float scale = Math.max(scaleW, scaleH);
                     canvas.save();
@@ -428,12 +481,16 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
                             }
                         }
 
-                        if (bitmapW / scaleH > imageW) {
-                            bitmapW /= scaleH;
-                            drawRegion.set(imageX - (bitmapW - imageW) / 2, imageY, imageX + (bitmapW + imageW) / 2, imageY + imageH);
+                        if (bitmapDrawable instanceof AnimatedFileDrawable) {
+                            drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
                         } else {
-                            bitmapH /= scaleW;
-                            drawRegion.set(imageX, imageY - (bitmapH - imageH) / 2, imageX + imageW, imageY + (bitmapH + imageH) / 2);
+                            if (bitmapW / scaleH > imageW) {
+                                bitmapW /= scaleH;
+                                drawRegion.set(imageX - (bitmapW - imageW) / 2, imageY, imageX + (bitmapW + imageW) / 2, imageY + imageH);
+                            } else {
+                                bitmapH /= scaleW;
+                                drawRegion.set(imageX, imageY - (bitmapH - imageH) / 2, imageX + imageW, imageY + (bitmapH + imageH) / 2);
+                            }
                         }
                         if (orientation % 360 == 90 || orientation % 360 == 270) {
                             int width = (drawRegion.right - drawRegion.left) / 2;
@@ -519,7 +576,11 @@ private void checkAlphaAnimation(boolean skip) {
         if (currentAlpha != 1) {
             if (!skip) {
                 long currentTime = System.currentTimeMillis();
-                currentAlpha += (currentTime - lastUpdateAlphaTime) / 150.0f;
+                long dt = currentTime - lastUpdateAlphaTime;
+                if (dt > 18) {
+                    dt = 18;
+                }
+                currentAlpha += dt / 150.0f;
                 if (currentAlpha > 1) {
                     currentAlpha = 1;
                 }
@@ -539,17 +600,20 @@ public boolean draw(Canvas canvas) {
         try {
             Drawable drawable = null;
             boolean animationNotReady = currentImage instanceof AnimatedFileDrawable && !((AnimatedFileDrawable) currentImage).hasBitmap();
+            boolean isThumb = false;
             if (!forcePreview && currentImage != null && !animationNotReady) {
                 drawable = currentImage;
             } else if (staticThumb instanceof BitmapDrawable) {
                 drawable = staticThumb;
+                isThumb = true;
             } else if (currentThumb != null) {
                 drawable = currentThumb;
+                isThumb = true;
             }
             if (drawable != null) {
                 if (crossfadeAlpha != 0) {
                     if (crossfadeWithThumb && animationNotReady) {
-                        drawDrawable(canvas, drawable, (int) (overrideAlpha * 255));
+                        drawDrawable(canvas, drawable, (int) (overrideAlpha * 255), bitmapShaderThumb);
                     } else {
                         if (crossfadeWithThumb && currentAlpha != 1.0f) {
                             Drawable thumbDrawable = null;
@@ -565,19 +629,19 @@ public boolean draw(Canvas canvas) {
                                 }
                             }
                             if (thumbDrawable != null) {
-                                drawDrawable(canvas, thumbDrawable, (int) (overrideAlpha * 255));
+                                drawDrawable(canvas, thumbDrawable, (int) (overrideAlpha * 255), bitmapShaderThumb);
                             }
                         }
-                        drawDrawable(canvas, drawable, (int) (overrideAlpha * currentAlpha * 255));
+                        drawDrawable(canvas, drawable, (int) (overrideAlpha * currentAlpha * 255), isThumb ? bitmapShaderThumb : bitmapShader);
                     }
                 } else {
-                    drawDrawable(canvas, drawable, (int) (overrideAlpha * 255));
+                    drawDrawable(canvas, drawable, (int) (overrideAlpha * 255), isThumb ? bitmapShaderThumb : bitmapShader);
                 }
 
                 checkAlphaAnimation(animationNotReady && crossfadeWithThumb);
                 return true;
             } else if (staticThumb != null) {
-                drawDrawable(canvas, staticThumb, 255);
+                drawDrawable(canvas, staticThumb, 255, null);
                 checkAlphaAnimation(animationNotReady);
                 return true;
             } else {
@@ -753,19 +817,6 @@ public boolean isForcePreview() {
 
     public void setRoundRadius(int value) {
         roundRadius = value;
-        if (roundRadius != 0) {
-            if (roundPaint == null) {
-                roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-                roundRect = new RectF();
-                shaderMatrix = new Matrix();
-                bitmapRect = new RectF();
-            }
-        } else {
-            roundPaint = null;
-            roundRect = null;
-            shaderMatrix = null;
-            bitmapRect = null;
-        }
     }
 
     public int getRoundRadius() {
@@ -853,11 +904,15 @@ protected boolean setImageBitmapByKey(BitmapDrawable bitmap, String key, boolean
                 ImageLoader.getInstance().incrementUseCount(currentKey);
             }
             currentImage = bitmap;
-            if (roundRadius != 0) {
-                Bitmap object = bitmap.getBitmap();
-                bitmapShader = new BitmapShader(object, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
-                roundPaint.setShader(bitmapShader);
-                bitmapRect.set(0, 0, object.getWidth(), object.getHeight());
+            if (roundRadius != 0 && bitmap instanceof BitmapDrawable) {
+                if (bitmap instanceof AnimatedFileDrawable) {
+                    ((AnimatedFileDrawable) bitmap).setRoundRadius(roundRadius);
+                } else {
+                    Bitmap object = bitmap.getBitmap();
+                    bitmapShader = new BitmapShader(object, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                }
+            } else {
+                bitmapShader = null;
             }
 
             if (!memCache && !forcePreview) {
@@ -892,6 +947,17 @@ protected boolean setImageBitmapByKey(BitmapDrawable bitmap, String key, boolean
 
             currentThumb = bitmap;
 
+            if (roundRadius != 0 && currentImage == null && bitmap instanceof BitmapDrawable) {
+                if (bitmap instanceof AnimatedFileDrawable) {
+                    ((AnimatedFileDrawable) bitmap).setRoundRadius(roundRadius);
+                } else {
+                    Bitmap object = bitmap.getBitmap();
+                    bitmapShaderThumb = new BitmapShader(object, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                }
+            } else {
+                bitmapShaderThumb = null;
+            }
+
             if (!memCache && crossfadeAlpha != 2) {
                 currentAlpha = 0.0f;
                 lastUpdateAlphaTime = System.currentTimeMillis();
@@ -961,6 +1027,12 @@ public void didReceivedNotification(int id, Object... args) {
                     ImageLoader.getInstance().incrementUseCount(currentThumbKey);
                 }
                 currentThumb = (BitmapDrawable) args[0];
+                if (roundRadius != 0 && currentImage == null && currentThumb instanceof BitmapDrawable && !(currentThumb instanceof AnimatedFileDrawable)) {
+                    Bitmap object = ((BitmapDrawable) currentThumb).getBitmap();
+                    bitmapShaderThumb = new BitmapShader(object, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                } else {
+                    bitmapShaderThumb = null;
+                }
                 if (staticThumb instanceof BitmapDrawable) {
                     staticThumb = null;
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
index 97ea54fdf..a3ba4cc63 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
@@ -154,76 +154,13 @@ public LocaleController() {
                 "tr", "vi", "wo", "yo", "zh", "bo", "dz", "id", "jv", "ka", "km", "kn", "ms", "th"}, new PluralRules_None());
 
         LocaleInfo localeInfo = new LocaleInfo();
-        localeInfo.name = "English";
-        localeInfo.nameEnglish = "English";
+        localeInfo.name = "Asturianu";
+        localeInfo.nameEnglish = "Asturianu";
         localeInfo.shortName = "en";
         localeInfo.pathToFile = null;
         sortedLanguages.add(localeInfo);
         languagesDict.put(localeInfo.shortName, localeInfo);
 
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Italiano";
-        localeInfo.nameEnglish = "Italian";
-        localeInfo.shortName = "it";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Español";
-        localeInfo.nameEnglish = "Spanish";
-        localeInfo.shortName = "es";
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Deutsch";
-        localeInfo.nameEnglish = "German";
-        localeInfo.shortName = "de";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Nederlands";
-        localeInfo.nameEnglish = "Dutch";
-        localeInfo.shortName = "nl";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "العربية";
-        localeInfo.nameEnglish = "Arabic";
-        localeInfo.shortName = "ar";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Português (Brasil)";
-        localeInfo.nameEnglish = "Portuguese (Brazil)";
-        localeInfo.shortName = "pt_BR";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "Português (Portugal)";
-        localeInfo.nameEnglish = "Portuguese (Portugal)";
-        localeInfo.shortName = "pt_PT";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
-        localeInfo = new LocaleInfo();
-        localeInfo.name = "한국어";
-        localeInfo.nameEnglish = "Korean";
-        localeInfo.shortName = "ko";
-        localeInfo.pathToFile = null;
-        sortedLanguages.add(localeInfo);
-        languagesDict.put(localeInfo.shortName, localeInfo);
-
         loadOtherLanguages();
 
         for (LocaleInfo locale : otherLanguages) {
@@ -309,7 +246,7 @@ public Locale getSystemDefaultLocale() {
         return systemDefaultLocale;
     }
 
-    public static String getLocaleString(Locale locale) {
+    private String getLocaleString(Locale locale) {
         if (locale == null) {
             return "en";
         }
@@ -332,6 +269,30 @@ public static String getLocaleString(Locale locale) {
         return result.toString();
     }
 
+    public static String getLocaleStringIso639() {
+        Locale locale = getInstance().getSystemDefaultLocale();
+        if (locale == null) {
+            return "en";
+        }
+        String languageCode = locale.getLanguage();
+        String countryCode = locale.getCountry();
+        String variantCode = locale.getVariant();
+        if (languageCode.length() == 0 && countryCode.length() == 0) {
+            return "en";
+        }
+        StringBuilder result = new StringBuilder(11);
+        result.append(languageCode);
+        if (countryCode.length() > 0 || variantCode.length() > 0) {
+            result.append('-');
+        }
+        result.append(countryCode);
+        if (variantCode.length() > 0) {
+            result.append('_');
+        }
+        result.append(variantCode);
+        return result.toString();
+    }
+
     public boolean applyLanguageFile(File file) {
         try {
             HashMap<String, String> stringMap = getLocaleFileStrings(file);
@@ -583,7 +544,11 @@ public static String getCurrentLanguageName() {
     private String getStringInternal(String key, int res) {
         String value = localeValues.get(key);
         if (value == null) {
-            value = ApplicationLoader.applicationContext.getString(res);
+            try {
+                value = ApplicationLoader.applicationContext.getString(res);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         }
         if (value == null) {
             value = "LOC_ERR:" + key;
@@ -664,16 +629,21 @@ public void onDeviceConfigurationChange(Configuration newConfig) {
     }
 
     public static String formatDateChat(long date) {
-        Calendar rightNow = Calendar.getInstance();
-        int year = rightNow.get(Calendar.YEAR);
+        try {
+            Calendar rightNow = Calendar.getInstance();
+            int year = rightNow.get(Calendar.YEAR);
 
-        rightNow.setTimeInMillis(date * 1000);
-        int dateYear = rightNow.get(Calendar.YEAR);
+            rightNow.setTimeInMillis(date * 1000);
+            int dateYear = rightNow.get(Calendar.YEAR);
 
-        if (year == dateYear) {
-            return getInstance().chatDate.format(date * 1000);
+            if (year == dateYear) {
+                return getInstance().chatDate.format(date * 1000);
+            }
+            return getInstance().chatFullDate.format(date * 1000);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
         }
-        return getInstance().chatFullDate.format(date * 1000);
+        return "LOC_ERR: formatDateChat";
     }
 
     public static String formatDate(long date) {
@@ -697,7 +667,7 @@ public static String formatDate(long date) {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
-        return "LOC_ERR";
+        return "LOC_ERR: formatDate";
     }
 
     public static String formatDateAudio(long date) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 5d5cb3297..ef7b89218 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -12,6 +12,7 @@
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
+import android.app.DownloadManager;
 import android.app.ProgressDialog;
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -42,10 +43,10 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
-import android.os.ParcelFileDescriptor;
 import android.os.PowerManager;
 import android.os.Vibrator;
 import android.provider.MediaStore;
+import android.provider.OpenableColumns;
 import android.telephony.PhoneStateListener;
 import android.telephony.TelephonyManager;
 
@@ -63,6 +64,7 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -235,7 +237,7 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private float[] gravityFast = new float[3];
     private float[] linearAcceleration = new float[3];
 
-    private boolean hasAudioFoces;
+    private int hasAudioFocus;
     private boolean callInProgress;
 
     private ArrayList<MessageObject> videoConvertQueue = new ArrayList<>();
@@ -269,6 +271,8 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private boolean saveToGallery = true;
     private boolean autoplayGifs = true;
     private boolean raiseToSpeak = true;
+    private boolean customTabs = true;
+    private boolean directShare = true;
     private boolean shuffleMusic;
     private int repeatMode;
 
@@ -276,6 +280,7 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     public static AlbumEntry allPhotosAlbumEntry;
 
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<>();
+    private HashMap<String, ArrayList<MessageObject>> loadingFileMessagesObservers = new HashMap<>();
     private HashMap<Integer, String> observersByTag = new HashMap<>();
     private boolean listenerInProgress = false;
     private HashMap<String, FileDownloadProgressListener> addLaterArray = new HashMap<>();
@@ -595,6 +600,8 @@ public MediaController() {
         saveToGallery = preferences.getBoolean("save_gallery", false);
         autoplayGifs = preferences.getBoolean("autoplay_gif", true) && Build.VERSION.SDK_INT >= 11;
         raiseToSpeak = preferences.getBoolean("raise_to_speak", true) && Build.VERSION.SDK_INT >= 11;
+        customTabs = preferences.getBoolean("custom_tabs", true);
+        directShare = preferences.getBoolean("direct_share", true);
         shuffleMusic = preferences.getBoolean("shuffleMusic", false);
         repeatMode = preferences.getInt("repeatMode", 0);
 
@@ -689,7 +696,7 @@ public void onAudioFocusChange(int focusChange) {
             if (MediaController.getInstance().isPlayingAudio(MediaController.getInstance().getPlayingMessageObject()) && !MediaController.getInstance().isAudioPaused()) {
                 MediaController.getInstance().pauseAudio(MediaController.getInstance().getPlayingMessageObject());
             }
-            hasAudioFoces = false;
+            hasAudioFocus = 0;
         } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
             //MediaController.getInstance().playAudio(MediaController.getInstance().getPlayingMessageObject());
         }
@@ -1156,6 +1163,10 @@ public int generateObserverTag() {
     }
 
     public void addLoadingFileObserver(String fileName, FileDownloadProgressListener observer) {
+        addLoadingFileObserver(fileName, null, observer);
+    }
+
+    public void addLoadingFileObserver(String fileName, MessageObject messageObject, FileDownloadProgressListener observer) {
         if (listenerInProgress) {
             addLaterArray.put(fileName, observer);
             return;
@@ -1168,6 +1179,14 @@ public void addLoadingFileObserver(String fileName, FileDownloadProgressListener
             loadingFileObservers.put(fileName, arrayList);
         }
         arrayList.add(new WeakReference<>(observer));
+        if (messageObject != null) {
+            ArrayList<MessageObject> messageObjects = loadingFileMessagesObservers.get(fileName);
+            if (messageObjects == null) {
+                messageObjects = new ArrayList<>();
+                loadingFileMessagesObservers.put(fileName, messageObjects);
+            }
+            messageObjects.add(messageObject);
+        }
 
         observersByTag.put(observer.getObserverTag(), fileName);
     }
@@ -1198,7 +1217,7 @@ public void removeLoadingFileObserver(FileDownloadProgressListener observer) {
 
     private void processLaterArrays() {
         for (HashMap.Entry<String, FileDownloadProgressListener> listener : addLaterArray.entrySet()) {
-            addLoadingFileObserver(listener.getKey(), listener.getValue());
+            addLoadingFileObserver(listener.getKey(), listener.getValue()); //TODO
         }
         addLaterArray.clear();
         for (FileDownloadProgressListener listener : deleteLaterArray) {
@@ -1213,9 +1232,11 @@ public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidFailedLoad) {
             listenerInProgress = true;
             String fileName = (String) args[0];
+            loadingFileMessagesObservers.get(fileName);
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
+                for (int a = 0; a < arrayList.size(); a++) {
+                    WeakReference<FileDownloadProgressListener> reference = arrayList.get(a);
                     if (reference.get() != null) {
                         reference.get().onFailedDownload(fileName);
                         observersByTag.remove(reference.get().getObserverTag());
@@ -1230,15 +1251,24 @@ public void didReceivedNotification(int id, Object... args) {
             listenerInProgress = true;
             String fileName = (String) args[0];
             if (downloadingCurrentMessage && playingMessageObject != null) {
-                String file = FileLoader.getAttachFileName(playingMessageObject.messageOwner.media.document);
+                String file = FileLoader.getAttachFileName(playingMessageObject.getDocument());
                 if (file.equals(fileName)) {
                     playMusicAgain = true;
                     playAudio(playingMessageObject);
                 }
             }
+            ArrayList<MessageObject> messageObjects = loadingFileMessagesObservers.get(fileName);
+            if (messageObjects != null) {
+                for (int a = 0; a < messageObjects.size(); a++) {
+                    MessageObject messageObject = messageObjects.get(a);
+                    messageObject.mediaExists = true;
+                }
+                loadingFileMessagesObservers.remove(fileName);
+            }
             ArrayList<WeakReference<FileDownloadProgressListener>> arrayList = loadingFileObservers.get(fileName);
             if (arrayList != null) {
-                for (WeakReference<FileDownloadProgressListener> reference : arrayList) {
+                for (int a = 0; a < arrayList.size(); a++) {
+                    WeakReference<FileDownloadProgressListener> reference = arrayList.get(a);
                     if (reference.get() != null) {
                         reference.get().onSuccessDownload(fileName);
                         observersByTag.remove(reference.get().getObserverTag());
@@ -1583,14 +1613,14 @@ public void onSensorChanged(SensorEvent event) {
                         startRecording(raiseChat.getDialogId(), null, false);
                     }
                     ignoreOnPause = true;
-                    if (proximityWakeLock != null && !proximityWakeLock.isHeld()) {
+                    if (proximityHasDifferentValues && proximityWakeLock != null && !proximityWakeLock.isHeld()) {
                         proximityWakeLock.acquire();
                     }
                 }
             } else if (playingMessageObject != null && playingMessageObject.isVoice()) {
                 if (!useFrontSpeaker) {
                     FileLog.e("tmessages", "start listen");
-                    if (proximityWakeLock != null && !proximityWakeLock.isHeld()) {
+                    if (proximityHasDifferentValues && proximityWakeLock != null && !proximityWakeLock.isHeld()) {
                         proximityWakeLock.acquire();
                     }
                     useFrontSpeaker = true;
@@ -1605,7 +1635,7 @@ public void onSensorChanged(SensorEvent event) {
             if (playingMessageObject != null && playingMessageObject.isVoice()) {
                 if (!useFrontSpeaker) {
                     FileLog.e("tmessages", "start listen by proximity only");
-                    if (proximityWakeLock != null && !proximityWakeLock.isHeld()) {
+                    if (proximityHasDifferentValues && proximityWakeLock != null && !proximityWakeLock.isHeld()) {
                         proximityWakeLock.acquire();
                     }
                     useFrontSpeaker = true;
@@ -1619,7 +1649,7 @@ public void onSensorChanged(SensorEvent event) {
                 stopRecording(2);
                 raiseToEarRecord = false;
                 ignoreOnPause = false;
-                if (proximityWakeLock != null && proximityWakeLock.isHeld()) {
+                if (proximityHasDifferentValues && proximityWakeLock != null && proximityWakeLock.isHeld()) {
                     proximityWakeLock.release();
                 }
             } else if (useFrontSpeaker) {
@@ -1627,7 +1657,7 @@ public void onSensorChanged(SensorEvent event) {
                 useFrontSpeaker = false;
                 startAudioAgain(true);
                 ignoreOnPause = false;
-                if (proximityWakeLock != null && proximityWakeLock.isHeld()) {
+                if (proximityHasDifferentValues && proximityWakeLock != null && proximityWakeLock.isHeld()) {
                     proximityWakeLock.release();
                 }
             }
@@ -1653,14 +1683,24 @@ private void startAudioAgain(boolean paused) {
         if (playingMessageObject == null) {
             return;
         }
+        boolean post = audioPlayer != null;
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioRouteChanged, useFrontSpeaker);
-        MessageObject currentMessageObject = playingMessageObject;
+        final MessageObject currentMessageObject = playingMessageObject;
         float progress = playingMessageObject.audioProgress;
         cleanupPlayer(false, true);
         currentMessageObject.audioProgress = progress;
         playAudio(currentMessageObject);
         if (paused) {
-            pauseAudio(currentMessageObject);
+            if (post) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        pauseAudio(currentMessageObject);
+                    }
+                }, 100);
+            } else {
+                pauseAudio(currentMessageObject);
+            }
         }
     }
 
@@ -1743,7 +1783,7 @@ public void run() {
                 sensorManager.unregisterListener(MediaController.this, proximitySensor);
             }
         });
-        if (proximityWakeLock != null && proximityWakeLock.isHeld()) {
+        if (proximityHasDifferentValues && proximityWakeLock != null && proximityWakeLock.isHeld()) {
             proximityWakeLock.release();
         }
     }
@@ -1792,7 +1832,7 @@ public void cleanupPlayer(boolean notify, boolean stopService, boolean byVoiceEn
         isPaused = false;
         if (playingMessageObject != null) {
             if (downloadingCurrentMessage) {
-                FileLoader.getInstance().cancelLoadFile(playingMessageObject.messageOwner.media.document);
+                FileLoader.getInstance().cancelLoadFile(playingMessageObject.getDocument());
             }
             MessageObject lastFile = playingMessageObject;
             playingMessageObject.audioProgress = 0.0f;
@@ -1801,6 +1841,8 @@ public void cleanupPlayer(boolean notify, boolean stopService, boolean byVoiceEn
             playingMessageObject = null;
             downloadingCurrentMessage = false;
             if (notify) {
+                NotificationsController.getInstance().audioManager.abandonAudioFocus(this);
+                hasAudioFocus = 0;
                 if (voiceMessagesPlaylist != null) {
                     if (byVoiceEnd && voiceMessagesPlaylist.get(0) == lastFile) {
                         voiceMessagesPlaylist.remove(0);
@@ -1929,7 +1971,7 @@ public boolean setPlaylist(ArrayList<MessageObject> messageObjects, MessageObjec
         if (currentPlaylistNum == -1) {
             playlist.clear();
             shuffledPlaylist.clear();
-            return false;
+            playlist.add(current);
         }
         if (current.isMusic()) {
             if (shuffleMusic) {
@@ -1959,6 +2001,11 @@ private void playNextMessage(boolean byStop) {
             if (byStop && repeatMode == 0) {
                 if (audioPlayer != null || audioTrackPlayer != null) {
                     if (audioPlayer != null) {
+                        try {
+                            audioPlayer.reset();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
                         try {
                             audioPlayer.stop();
                         } catch (Exception e) {
@@ -2042,7 +2089,7 @@ private void checkIsNextMusicFileDownloaded() {
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(nextAudio.messageOwner);
         boolean exist = cacheFile != null && cacheFile.exists();
         if (cacheFile != null && cacheFile != file && !cacheFile.exists() && nextAudio.isMusic()) {
-            FileLoader.getInstance().loadFile(nextAudio.messageOwner.media.document, false, false);
+            FileLoader.getInstance().loadFile(nextAudio.getDocument(), false, false);
         }
     }
 
@@ -2058,7 +2105,28 @@ public void setVoiceMessagesPlaylist(ArrayList<MessageObject> playlist, boolean
         }
     }
 
-    public boolean playAudio(MessageObject messageObject) {
+    private void checkAudioFocus(MessageObject messageObject) {
+        int neededAudioFocus;
+        if (messageObject.isVoice()) {
+            if (useFrontSpeaker) {
+                neededAudioFocus = 3;
+            } else {
+                neededAudioFocus = 2;
+            }
+        } else {
+            neededAudioFocus = 1;
+        }
+        if (hasAudioFocus != neededAudioFocus) {
+            hasAudioFocus = neededAudioFocus;
+            if (neededAudioFocus == 3) {
+                NotificationsController.getInstance().audioManager.requestAudioFocus(this, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN);
+            } else {
+                NotificationsController.getInstance().audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC, neededAudioFocus == 2 ? AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK : AudioManager.AUDIOFOCUS_GAIN);
+            }
+        }
+    }
+
+    public boolean playAudio(final MessageObject messageObject) {
         if (messageObject == null) {
             return false;
         }
@@ -2089,14 +2157,14 @@ public boolean playAudio(MessageObject messageObject) {
         }
         final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
         if (cacheFile != null && cacheFile != file && !cacheFile.exists() && messageObject.isMusic()) {
-            FileLoader.getInstance().loadFile(messageObject.messageOwner.media.document, false, false);
+            FileLoader.getInstance().loadFile(messageObject.getDocument(), false, false);
             downloadingCurrentMessage = true;
             isPaused = false;
             lastProgress = 0;
             lastPlayPcm = 0;
             audioInfo = null;
             playingMessageObject = messageObject;
-            if (playingMessageObject.messageOwner.media.document != null) {
+            if (playingMessageObject.getDocument() != null) {
                 Intent intent = new Intent(ApplicationLoader.applicationContext, MusicPlayerService.class);
                 ApplicationLoader.applicationContext.startService(intent);
             } else {
@@ -2171,7 +2239,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                         if (!playlist.isEmpty() && playlist.size() > 1) {
                             playNextMessage(true);
                         } else {
-                            cleanupPlayer(true, true);
+                            cleanupPlayer(true, true, messageObject != null && messageObject.isVoice());
                         }
                     }
                 });
@@ -2201,10 +2269,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                 return false;
             }
         }
-        if (!hasAudioFoces) {
-            hasAudioFoces = true;
-            NotificationsController.getInstance().audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
-        }
+        checkAudioFocus(messageObject);
 
         isPaused = false;
         lastProgress = 0;
@@ -2270,6 +2335,11 @@ public void stopAudio() {
         }
         try {
             if (audioPlayer != null) {
+                try {
+                    audioPlayer.reset();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
                 audioPlayer.stop();
             } else if (audioTrackPlayer != null) {
                 audioTrackPlayer.pause();
@@ -2378,10 +2448,7 @@ public boolean resumeAudio(MessageObject messageObject) {
                 audioTrackPlayer.play();
                 checkPlayerQueue();
             }
-            if (!hasAudioFoces) {
-                hasAudioFoces = true;
-                NotificationsController.getInstance().audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
-            }
+            checkAudioFocus(messageObject);
             isPaused = false;
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioPlayStateChanged, playingMessageObject.getId());
         } catch (Exception e) {
@@ -2507,19 +2574,6 @@ public void run() {
     public void generateWaveform(MessageObject messageObject) {
         final String id = messageObject.getId() + "_" + messageObject.getDialogId();
         final String path = FileLoader.getPathToMessage(messageObject.messageOwner).getAbsolutePath();
-        /*for (int a = 0; a < currentMessageObject.messageOwner.media.document.attributes.size(); a++) { TODO if old attribute
-            TLRPC.DocumentAttribute attribute = currentMessageObject.messageOwner.media.document.attributes.get(a);
-            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                if (attribute.waveform == null || attribute.waveform.length == 0) {
-                    attribute.waveform = MediaController.getInstance().getWaveform(path.getAbsolutePath());
-                }
-                if (attribute.waveform != null) {
-                    hasWaveform = true;
-                }
-                seekBarWaveform.setWaveform(attribute.waveform);
-                break;
-            }
-        }*/
         if (generatingWaveform.containsKey(id)) {
             return;
         }
@@ -2536,8 +2590,8 @@ public void run() {
                             return;
                         }
                         if (waveform != null) {
-                            for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                                TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
+                            for (int a = 0; a < messageObject.getDocument().attributes.size(); a++) {
+                                TLRPC.DocumentAttribute attribute = messageObject.getDocument().attributes.get(a);
                                 if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
                                     attribute.waveform = waveform;
                                     attribute.flags |= 4;
@@ -2581,7 +2635,7 @@ public void run() {
                             audioToSend.attributes.add(attributeAudio);
                             if (duration > 700) {
                                 if (send == 1) {
-                                    SendMessagesHelper.getInstance().sendMessage(audioToSend, null, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject, recordAsAdmin, null);
+                                    SendMessagesHelper.getInstance().sendMessage(audioToSend, null, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject, recordAsAdmin, null, null);
                                 }
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidSent, send == 2 ? audioToSend : null, send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
                             } else {
@@ -2643,7 +2697,7 @@ public void run() {
         });
     }
 
-    public static void saveFile(String fullPath, Context context, final int type, final String name) {
+    public static void saveFile(String fullPath, Context context, final int type, final String name, final String mime) {
         if (fullPath == null) {
             return;
         }
@@ -2740,8 +2794,15 @@ public void run() {
                             }
                         }
 
-                        if (result && (type == 0 || type == 1 || type == 3)) {
-                            AndroidUtilities.addMediaToGallery(Uri.fromFile(destFile));
+                        if (result) {
+                            if (type == 2) {
+                                if (Build.VERSION.SDK_INT >= 12) {
+                                    DownloadManager downloadManager = (DownloadManager) ApplicationLoader.applicationContext.getSystemService(Context.DOWNLOAD_SERVICE);
+                                    downloadManager.addCompletedDownload(destFile.getName(), destFile.getName(), false, mime, destFile.getAbsolutePath(), destFile.length(), true);
+                                }
+                            } else {
+                                AndroidUtilities.addMediaToGallery(Uri.fromFile(destFile));
+                            }
                         }
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
@@ -2764,14 +2825,11 @@ public void run() {
     }
 
     public static boolean isWebp(Uri uri) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
+        InputStream inputStream = null;
         try {
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            if (input.getChannel().size() > 12) {
-                byte[] header = new byte[12];
-                input.read(header, 0, 12);
+            inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
+            byte[] header = new byte[12];
+            if (inputStream.read(header, 0, 12) == 12) {
                 String str = new String(header);
                 if (str != null) {
                     str = str.toLowerCase();
@@ -2784,15 +2842,8 @@ public static boolean isWebp(Uri uri) {
             FileLog.e("tmessages", e);
         } finally {
             try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
+                if (inputStream != null) {
+                    inputStream.close();
                 }
             } catch (Exception e2) {
                 FileLog.e("tmessages", e2);
@@ -2802,14 +2853,11 @@ public static boolean isWebp(Uri uri) {
     }
 
     public static boolean isGif(Uri uri) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
+        InputStream inputStream = null;
         try {
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            if (input.getChannel().size() > 3) {
-                byte[] header = new byte[3];
-                input.read(header, 0, 3);
+            inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
+            byte[] header = new byte[3];
+            if (inputStream.read(header, 0, 3) == 3) {
                 String str = new String(header);
                 if (str != null && str.equalsIgnoreCase("gif")) {
                     return true;
@@ -2819,50 +2867,68 @@ public static boolean isGif(Uri uri) {
             FileLog.e("tmessages", e);
         } finally {
             try {
-                if (parcelFD != null) {
-                    parcelFD.close();
+                if (inputStream != null) {
+                    inputStream.close();
                 }
             } catch (Exception e2) {
                 FileLog.e("tmessages", e2);
             }
+        }
+        return false;
+    }
+
+    public static String getFileName(Uri uri) {
+        String result = null;
+        if (uri.getScheme().equals("content")) {
+            Cursor cursor = ApplicationLoader.applicationContext.getContentResolver().query(uri, null, null, null, null);
             try {
-                if (input != null) {
-                    input.close();
+                if (cursor.moveToFirst()) {
+                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            } finally {
+                if (cursor != null) {
+                    cursor.close();
                 }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
             }
         }
-        return false;
+        if (result == null) {
+            result = uri.getPath();
+            int cut = result.lastIndexOf('/');
+            if (cut != -1) {
+                result = result.substring(cut + 1);
+            }
+        }
+        return result;
     }
 
-    public static String copyDocumentToCache(Uri uri, String ext) {
-        ParcelFileDescriptor parcelFD = null;
-        FileInputStream input = null;
+    public static String copyFileToCache(Uri uri, String ext) {
+        InputStream inputStream = null;
         FileOutputStream output = null;
         try {
-            int id = UserConfig.lastLocalId;
-            UserConfig.lastLocalId--;
-            parcelFD = ApplicationLoader.applicationContext.getContentResolver().openFileDescriptor(uri, "r");
-            input = new FileInputStream(parcelFD.getFileDescriptor());
-            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), String.format(Locale.US, "%d.%s", id, ext));
+            String name = getFileName(uri);
+            if (name == null) {
+                int id = UserConfig.lastLocalId;
+                UserConfig.lastLocalId--;
+                UserConfig.saveConfig(false);
+                name = String.format(Locale.US, "%d.%s", id, ext);
+            }
+            inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), name);
             output = new FileOutputStream(f);
-            input.getChannel().transferTo(0, input.getChannel().size(), output.getChannel());
-            UserConfig.saveConfig(false);
+            byte[] buffer = new byte[1024 * 20];
+            int len;
+            while ((len = inputStream.read(buffer)) != -1) {
+                output.write(buffer, 0, len);
+            }
             return f.getAbsolutePath();
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         } finally {
             try {
-                if (parcelFD != null) {
-                    parcelFD.close();
-                }
-            } catch (Exception e2) {
-                FileLog.e("tmessages", e2);
-            }
-            try {
-                if (input != null) {
-                    input.close();
+                if (inputStream != null) {
+                    inputStream.close();
                 }
             } catch (Exception e2) {
                 FileLog.e("tmessages", e2);
@@ -2903,6 +2969,22 @@ public void toogleRaiseToSpeak() {
         editor.commit();
     }
 
+    public void toggleCustomTabs() {
+        customTabs = !customTabs;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("custom_tabs", customTabs);
+        editor.commit();
+    }
+
+    public void toggleDirectShare() {
+        directShare = !directShare;
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("direct_share", directShare);
+        editor.commit();
+    }
+
     public void checkSaveToGalleryFiles() {
         try {
             File telegramPath = new File(Environment.getExternalStorageDirectory(), "Telegram");
@@ -2943,8 +3025,16 @@ public boolean canRaiseToSpeak() {
         return raiseToSpeak;
     }
 
+    public boolean canCustomTabs() {
+        return customTabs;
+    }
+
+    public boolean canDirectShare() {
+        return directShare;
+    }
+
     public static void loadGalleryPhotosAlbums(final int guid) {
-        new Thread(new Runnable() {
+        Thread thread = new Thread(new Runnable() {
             @Override
             public void run() {
                 final ArrayList<AlbumEntry> albumsSorted = new ArrayList<>();
@@ -3089,7 +3179,9 @@ public void run() {
                     }
                 });
             }
-        }).start();
+        });
+        thread.setPriority(Thread.MIN_PRIORITY);
+        thread.start();
     }
 
     public void scheduleVideoConvert(MessageObject messageObject) {
@@ -3246,6 +3338,7 @@ private long readAndWriteTrack(final MessageObject messageObject, MediaExtractor
             long startTime = -1;
 
             checkConversionCanceled();
+            long lastTimestamp = -100;
 
             while (!inputDone) {
                 checkConversionCanceled();
@@ -3254,28 +3347,37 @@ private long readAndWriteTrack(final MessageObject messageObject, MediaExtractor
                 int index = extractor.getSampleTrackIndex();
                 if (index == trackIndex) {
                     info.size = extractor.readSampleData(buffer, 0);
-
-                    if (info.size < 0) {
+                    if (info.size >= 0) {
+                        info.presentationTimeUs = extractor.getSampleTime();
+                    } else {
                         info.size = 0;
                         eof = true;
-                    } else {
-                        info.presentationTimeUs = extractor.getSampleTime();
+                    }
+
+                    if (info.size > 0 && !eof) {
                         if (start > 0 && startTime == -1) {
                             startTime = info.presentationTimeUs;
                         }
                         if (end < 0 || info.presentationTimeUs < end) {
-                            info.offset = 0;
-                            info.flags = extractor.getSampleFlags();
-                            if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info, isAudio)) {
-                                didWriteData(messageObject, file, false, false);
+                            if (info.presentationTimeUs > lastTimestamp) {
+                                info.offset = 0;
+                                info.flags = extractor.getSampleFlags();
+                                if (mediaMuxer.writeSampleData(muxerTrackIndex, buffer, info, isAudio)) {
+                                    didWriteData(messageObject, file, false, false);
+                                }
                             }
-                            extractor.advance();
+                            lastTimestamp = info.presentationTimeUs;
                         } else {
                             eof = true;
                         }
                     }
+                    if (!eof) {
+                        extractor.advance();
+                    }
                 } else if (index == -1) {
                     eof = true;
+                } else {
+                    extractor.advance();
                 }
                 if (eof) {
                     inputDone = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index aa34a3758..234a5f8a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -23,12 +23,14 @@
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TypefaceSpan;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 import org.telegram.ui.Components.URLSpanNoUnderlineBold;
 import org.telegram.ui.Components.URLSpanReplacement;
 
+import java.io.File;
 import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -47,7 +49,7 @@
     public CharSequence linkDescription;
     public CharSequence caption;
     public MessageObject replyMessageObject;
-    public int type;
+    public int type = 1000;
     public int contentType;
     public String dateKey;
     public String monthKey;
@@ -57,12 +59,17 @@
     public ArrayList<TLRPC.PhotoSize> photoThumbs;
     public VideoEditedInfo videoEditedInfo;
     public boolean viewsReloaded;
+    public int wantedBotKeyboardWidth;
+    public boolean attachPathExists;
+    public boolean mediaExists;
 
-    public static TextPaint textPaint;
+    public boolean forceUpdate;
+
+    private static TextPaint textPaint;
+    private static TextPaint botButtonPaint;
     public int lastLineWidth;
     public int textWidth;
     public int textHeight;
-    public int blockHeight = Integer.MAX_VALUE;
 
     private boolean layoutCreated;
 
@@ -70,9 +77,10 @@
 
     public static class TextLayoutBlock {
         public StaticLayout textLayout;
-        public float textXOffset = 0;
-        public float textYOffset = 0;
-        public int charactersOffset = 0;
+        public float textXOffset;
+        public float textYOffset;
+        public int charactersOffset;
+        public int height;
     }
 
     private static final int LINES_PER_BLOCK = 10;
@@ -86,8 +94,8 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
     public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, AbstractMap<Integer, TLRPC.Chat> chats, boolean generateLayout) {
         if (textPaint == null) {
             textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            textPaint.setColor(0xff000000);
-            textPaint.linkColor = 0xff316f9f;
+            textPaint.setColor(Theme.MSG_TEXT_COLOR);
+            textPaint.linkColor = Theme.MSG_LINK_TEXT_COLOR;
         }
 
         textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
@@ -99,7 +107,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         }
 
         TLRPC.User fromUser = null;
-        if (isFromUser()) {
+        if (message.from_id > 0) {
             if (users != null) {
                 fromUser = users.get(message.from_id);
             }
@@ -114,22 +122,14 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     if (isOut()) {
                         messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
                     } else {
-                        if (fromUser != null) {
-                            messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
-                        } else {
-                            messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", "");
-                        }
+                        messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                     if (message.action.user_id == message.from_id) {
                         if (isOut()) {
                             messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
                         } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", "");
-                            }
+                            messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
                         }
                     } else {
                         TLRPC.User whoUser = null;
@@ -139,17 +139,13 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (whoUser == null) {
                             whoUser = MessagesController.getInstance().getUser(message.action.user_id);
                         }
-                        if (whoUser != null && fromUser != null) {
-                            if (isOut()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
-                            } else if (message.action.user_id == UserConfig.getClientUserId()) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
-                            } else {
-                                messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
-                                messageText = replaceWithLink(messageText, "un1", fromUser);
-                            }
+                        if (isOut()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
+                        } else if (message.action.user_id == UserConfig.getClientUserId()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
                         } else {
-                            messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", "").replace("un1", "");
+                            messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
+                            messageText = replaceWithLink(messageText, "un1", fromUser);
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatAddUser) {
@@ -165,36 +161,38 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (whoUser == null) {
                             whoUser = MessagesController.getInstance().getUser(singleUserId);
                         }
-                        if (message.to_id.channel_id != 0 && !isMegagroup()) {
-                            if (whoUser != null && whoUser.id != UserConfig.getClientUserId()) {
-                                if (isMegagroup()) {
-                                    messageText = replaceWithLink(LocaleController.getString("MegaAddedBy", R.string.MegaAddedBy), "un1", whoUser);
+                        if (singleUserId == message.from_id) {
+                            if (message.to_id.channel_id != 0 && !isMegagroup()) {
+                                messageText = LocaleController.getString("ChannelJoined", R.string.ChannelJoined);
+                            } else {
+                                if (message.to_id.channel_id != 0 && isMegagroup()) {
+                                    if (singleUserId == UserConfig.getClientUserId()) {
+                                        messageText = LocaleController.getString("ChannelMegaJoined", R.string.ChannelMegaJoined);
+                                    } else {
+                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelfMega", R.string.ActionAddUserSelfMega), "un1", fromUser);
+                                    }
+                                } else if (isOut()) {
+                                    messageText = LocaleController.getString("ActionAddUserSelfYou", R.string.ActionAddUserSelfYou);
                                 } else {
-                                    messageText = replaceWithLink(LocaleController.getString("ChannelAddedBy", R.string.ChannelAddedBy), "un1", whoUser);
+                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelf", R.string.ActionAddUserSelf), "un1", fromUser);
                                 }
-                            } else {
-                                messageText = LocaleController.getString("ChannelJoined", R.string.ChannelJoined);
                             }
                         } else {
-                            if (whoUser != null && fromUser != null) {
-                                if (whoUser.id == fromUser.id) {
-                                    if (isOut()) {
-                                        messageText = LocaleController.getString("ActionAddUserSelfYou", R.string.ActionAddUserSelfYou);
+                            if (isOut()) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
+                            } else if (singleUserId == UserConfig.getClientUserId()) {
+                                if (message.to_id.channel_id != 0) {
+                                    if (isMegagroup()) {
+                                        messageText = replaceWithLink(LocaleController.getString("MegaAddedBy", R.string.MegaAddedBy), "un1", fromUser);
                                     } else {
-                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUserSelf", R.string.ActionAddUserSelf), "un1", fromUser);
+                                        messageText = replaceWithLink(LocaleController.getString("ChannelAddedBy", R.string.ChannelAddedBy), "un1", fromUser);
                                     }
                                 } else {
-                                    if (isOut()) {
-                                        messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
-                                    } else if (singleUserId == UserConfig.getClientUserId()) {
-                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
-                                    } else {
-                                        messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
-                                        messageText = replaceWithLink(messageText, "un1", fromUser);
-                                    }
+                                    messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
                                 }
                             } else {
-                                messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", "").replace("un1", "");
+                                messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
+                                messageText = replaceWithLink(messageText, "un1", fromUser);
                             }
                         }
                     } else {
@@ -206,14 +204,10 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
-                    if (fromUser != null) {
-                        if (isOut()) {
-                            messageText = LocaleController.getString("ActionInviteYou", R.string.ActionInviteYou);
-                        } else {
-                            messageText = replaceWithLink(LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser), "un1", fromUser);
-                        }
+                    if (isOut()) {
+                        messageText = LocaleController.getString("ActionInviteYou", R.string.ActionInviteYou);
                     } else {
-                        messageText = LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser).replace("un1", "");
+                        messageText = replaceWithLink(LocaleController.getString("ActionInviteUser", R.string.ActionInviteUser), "un1", fromUser);
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
                     if (message.to_id.channel_id != 0 && !isMegagroup()) {
@@ -222,11 +216,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (isOut()) {
                             messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
                         } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", "");
-                            }
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatEditTitle) {
@@ -236,11 +226,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (isOut()) {
                             messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", message.action.title);
                         } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", message.action.title), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", "").replace("un2", message.action.title);
-                            }
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", message.action.title), "un1", fromUser);
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
@@ -250,11 +236,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (isOut()) {
                             messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
                         } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", "");
-                            }
+                            messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionTTLChange) {
@@ -262,21 +244,13 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                         if (isOut()) {
                             messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(message.action.ttl));
                         } else {
-                            if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(message.action.ttl));
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(message.action.ttl));
-                            }
+                            messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(message.action.ttl));
                         }
                     } else {
                         if (isOut()) {
                             messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
                         } else {
-                            if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
-                            } else {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
-                            }
+                            messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
                         }
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
@@ -299,27 +273,15 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     String name = to_user != null ? UserObject.getFirstName(to_user) : "";
                     messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
                 } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
-                    if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(fromUser));
-                    } else {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, "");
-                    }
+                    messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(fromUser));
                 } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                    if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(fromUser));
-                    } else {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
-                    }
+                    messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(fromUser));
                 } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
                     if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
                         if (isOut()) {
                             messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
                         } else {
-                            if (fromUser != null) {
-                                messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
-                            } else {
-                                messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", "");
-                            }
+                            messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
                         }
                     } else if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                         TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) message.action.encryptedAction;
@@ -327,21 +289,13 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             if (isOut()) {
                                 messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(action.ttl_seconds));
                             } else {
-                                if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(action.ttl_seconds));
-                                } else {
-                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(action.ttl_seconds));
-                                }
+                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(action.ttl_seconds));
                             }
                         } else {
                             if (isOut()) {
                                 messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
                             } else {
-                                if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
-                                } else {
-                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
-                                }
+                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
                             }
                         }
                     }
@@ -357,6 +311,8 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
                 } else if (message.action instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
                     messageText = LocaleController.getString("ActionMigrateFromGroup", R.string.ActionMigrateFromGroup);
+                } else if (message.action instanceof TLRPC.TL_messageActionPinMessage) {
+                    generatePinMessageText(fromUser, fromUser == null ? chats.get(message.to_id.channel_id) : null);
                 }
             }
         } else if (!isMediaEmpty()) {
@@ -400,37 +356,137 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             messageText = "";
         }
 
-        if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded_old2) {
+        setType();
+        measureInlineBotButtons();
+
+        Calendar rightNow = new GregorianCalendar();
+        rightNow.setTimeInMillis((long) (messageOwner.date) * 1000);
+        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
+        int dateYear = rightNow.get(Calendar.YEAR);
+        int dateMonth = rightNow.get(Calendar.MONTH);
+        dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
+        monthKey = String.format("%d_%02d", dateYear, dateMonth);
+
+        if (messageOwner.message != null && messageOwner.id < 0 && messageOwner.message.length() > 6 && isVideo()) {
+            videoEditedInfo = new VideoEditedInfo();
+            videoEditedInfo.parseString(messageOwner.message);
+        }
+
+        generateCaption();
+        if (generateLayout) {
+            messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
+            generateLayout(fromUser);
+        }
+        layoutCreated = generateLayout;
+        generateThumbs(false);
+        checkMediaExistance();
+    }
+
+    public static TextPaint getTextPaint() {
+        if (textPaint == null) {
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(Theme.MSG_TEXT_COLOR);
+            textPaint.linkColor = Theme.MSG_LINK_TEXT_COLOR;
+            textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
+        }
+        return textPaint;
+    }
+
+    public void generatePinMessageText(TLRPC.User fromUser, TLRPC.Chat chat) {
+        if (fromUser == null && chat == null) {
+            if (messageOwner.from_id > 0) {
+                fromUser = MessagesController.getInstance().getUser(messageOwner.from_id);
+            }
+            if (fromUser == null) {
+                chat = MessagesController.getInstance().getChat(messageOwner.to_id.channel_id);
+            }
+        }
+        if (replyMessageObject == null) {
+            messageText = replaceWithLink(LocaleController.getString("ActionPinnedNoText", R.string.ActionPinnedNoText), "un1", fromUser != null ? fromUser : chat);
+        } else {
+            if (replyMessageObject.isMusic()) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedMusic", R.string.ActionPinnedMusic), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.isVideo()) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedVideo", R.string.ActionPinnedVideo), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.isGif()) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedGif", R.string.ActionPinnedGif), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.isVoice()) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedVoice", R.string.ActionPinnedVoice), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.isSticker()) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedSticker", R.string.ActionPinnedSticker), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedFile", R.string.ActionPinnedFile), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedGeo", R.string.ActionPinnedGeo), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedContact", R.string.ActionPinnedContact), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedPhoto", R.string.ActionPinnedPhoto), "un1", fromUser != null ? fromUser : chat);
+            } else if (replyMessageObject.messageText != null && replyMessageObject.messageText.length() > 0) {
+                CharSequence mess = replyMessageObject.messageText;
+                if (mess.length() > 20) {
+                    mess = mess.subSequence(0, 20) + "...";
+                }
+                mess = Emoji.replaceEmoji(mess, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
+                messageText = replaceWithLink(LocaleController.formatString("ActionPinnedText", R.string.ActionPinnedText, mess), "un1", fromUser != null ? fromUser : chat);
+            } else {
+                messageText = replaceWithLink(LocaleController.getString("ActionPinnedNoText", R.string.ActionPinnedNoText), "un1", fromUser != null ? fromUser : chat);
+            }
+        }
+    }
+
+    private void measureInlineBotButtons() {
+        wantedBotKeyboardWidth = 0;
+        if (!(messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
+            return;
+        }
+        if (botButtonPaint == null) {
+            botButtonPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            botButtonPaint.setTextSize(AndroidUtilities.dp(15));
+            botButtonPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        }
+        for (int a = 0; a < messageOwner.reply_markup.rows.size(); a++) {
+            TLRPC.TL_keyboardButtonRow row = messageOwner.reply_markup.rows.get(a);
+            int maxButtonSize = 0;
+            int size = row.buttons.size();
+            for (int b = 0; b < size; b++) {
+                CharSequence text = Emoji.replaceEmoji(row.buttons.get(b).text, botButtonPaint.getFontMetricsInt(), AndroidUtilities.dp(15), false);
+                StaticLayout staticLayout = new StaticLayout(text, botButtonPaint, AndroidUtilities.dp(2000), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                if (staticLayout.getLineCount() > 0) {
+                    maxButtonSize = Math.max(maxButtonSize, (int) Math.ceil(staticLayout.getLineWidth(0) - staticLayout.getLineLeft(0)) + AndroidUtilities.dp(4));
+                }
+            }
+            wantedBotKeyboardWidth = Math.max(wantedBotKeyboardWidth, (maxButtonSize + AndroidUtilities.dp(12)) * size + AndroidUtilities.dp(5) * (size - 1));
+        }
+    }
+
+    public void setType() {
+        if (messageOwner instanceof TLRPC.TL_message || messageOwner instanceof TLRPC.TL_messageForwarded_old2) {
             if (isMediaEmpty()) {
-                contentType = type = 0;
+                type = 0;
                 if (messageText == null || messageText.length() == 0) {
                     messageText = "Empty message";
                 }
-            } else if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                contentType = type = 1;
-            } else if (message.media instanceof TLRPC.TL_messageMediaGeo || message.media instanceof TLRPC.TL_messageMediaVenue) {
-                contentType = 1;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                type = 1;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
                 type = 4;
             } else if (isVideo()) {
-                contentType = 1;
                 type = 3;
             } else if (isVoice()) {
-                contentType = type = 2;
-            } else if (message.media instanceof TLRPC.TL_messageMediaContact) {
-                contentType = 3;
+                type = 2;
+            } else if (isMusic()) {
+                type = 14;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
                 type = 12;
-            } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
-                contentType = type = 0;
-            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                contentType = 1;
-                if (message.media.document.mime_type != null) {
-                    if (isGifDocument(message.media.document)) {
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaUnsupported) {
+                type = 0;
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                if (messageOwner.media.document.mime_type != null) {
+                    if (isGifDocument(messageOwner.media.document)) {
                         type = 8;
-                    } else if (message.media.document.mime_type.equals("image/webp") && isSticker()) {
+                    } else if (messageOwner.media.document.mime_type.equals("image/webp") && isSticker()) {
                         type = 13;
-                    } else if (isMusic()) {
-                        type = 14;
-                        contentType = 8;
                     } else {
                         type = 9;
                     }
@@ -438,50 +494,25 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                     type = 9;
                 }
             }
-        } else if (message instanceof TLRPC.TL_messageService) {
-            if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
-                contentType = type = 0;
-            } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto || message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                contentType = 4;
+        } else if (messageOwner instanceof TLRPC.TL_messageService) {
+            if (messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
+                type = 0;
+            } else if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                contentType = 1;
                 type = 11;
-            } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
-                if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
-                    contentType = 4;
+            } else if (messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
+                if (messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                    contentType = 1;
                     type = 10;
                 } else {
                     contentType = -1;
                     type = -1;
                 }
             } else {
-                contentType = 4;
+                contentType = 1;
                 type = 10;
             }
         }
-
-        Calendar rightNow = new GregorianCalendar();
-        rightNow.setTimeInMillis((long) (messageOwner.date) * 1000);
-        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
-        int dateYear = rightNow.get(Calendar.YEAR);
-        int dateMonth = rightNow.get(Calendar.MONTH);
-        dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
-        if (contentType == 1 || contentType == 2 || contentType == 0 || contentType == 8) {
-            monthKey = String.format("%d_%02d", dateYear, dateMonth);
-        } else if (contentType == 9) {
-            //dateKey = "0_0_0";
-        }
-
-        if (messageOwner.message != null && messageOwner.id < 0 && messageOwner.message.length() > 6 && isVideo()) {
-            videoEditedInfo = new VideoEditedInfo();
-            videoEditedInfo.parseString(messageOwner.message);
-        }
-
-        generateCaption();
-        if (generateLayout) {
-            messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
-            generateLayout(fromUser);
-        }
-        layoutCreated = generateLayout;
-        generateThumbs(false);
     }
 
     public void checkLayout() {
@@ -559,6 +590,8 @@ public void generateThumbs(boolean update) {
                     } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.document.thumb != null) {
                         TLRPC.PhotoSize photoObject = photoThumbs.get(0);
                         photoObject.location = messageOwner.media.document.thumb.location;
+                        photoObject.w = messageOwner.media.document.thumb.w;
+                        photoObject.h = messageOwner.media.document.thumb.h;
                     }
                 }
             } else if (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
@@ -580,6 +613,16 @@ public void generateThumbs(boolean update) {
                             }
                         }
                     }
+                } else if (messageOwner.media.webpage.document != null) {
+                    if (!(messageOwner.media.webpage.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
+                        if (!update) {
+                            photoThumbs = new ArrayList<>();
+                            photoThumbs.add(messageOwner.media.webpage.document.thumb);
+                        } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.webpage.document.thumb != null) {
+                            TLRPC.PhotoSize photoObject = photoThumbs.get(0);
+                            photoObject.location = messageOwner.media.webpage.document.thumb.location;
+                        }
+                    }
                 }
             }
         }
@@ -636,7 +679,7 @@ public CharSequence replaceWithLink(CharSequence source, String param, TLObject
 
     public String getExtension() {
         String fileName = getFileName();
-        int idx = fileName.lastIndexOf(".");
+        int idx = fileName.lastIndexOf('.');
         String ext = null;
         if (idx != -1) {
             ext = fileName.substring(idx + 1);
@@ -662,6 +705,8 @@ public String getFileName() {
                     return FileLoader.getAttachFileName(sizeFull);
                 }
             }
+        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
+            return FileLoader.getAttachFileName(messageOwner.media.webpage.document);
         }
         return "";
     }
@@ -950,7 +995,7 @@ private void generateLayout(TLRPC.User fromUser) {
                 block.textLayout = textLayout;
                 block.textYOffset = 0;
                 block.charactersOffset = 0;
-                blockHeight = textHeight;
+                block.height = textHeight;
             } else {
                 int startCharacter = textLayout.getLineStart(linesOffset);
                 int endCharacter = textLayout.getLineEnd(linesOffset + currentBlockLinesCount - 1);
@@ -963,16 +1008,10 @@ private void generateLayout(TLRPC.User fromUser) {
                     block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     block.textYOffset = textLayout.getLineTop(linesOffset);
                     if (a != 0) {
-                        blockHeight = Math.min(blockHeight, (int) (block.textYOffset - prevOffset));
+                        block.height = (int) (block.textYOffset - prevOffset);
                     }
+                    block.height = Math.max(block.height, block.textLayout.getLineBottom(block.textLayout.getLineCount() - 1));
                     prevOffset = block.textYOffset;
-                    /*if (a != blocksCount - 1) {
-                        int height = block.textLayout.getHeight();
-                        blockHeight = Math.min(blockHeight, block.textLayout.getHeight());
-                        prevOffset = block.textYOffset;
-                    } else {
-                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
-                    }*/
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                     continue;
@@ -1067,9 +1106,6 @@ private void generateLayout(TLRPC.User fromUser) {
 
             linesOffset += currentBlockLinesCount;
         }
-        if (blockHeight == 0) {
-            blockHeight = 1;
-        }
     }
 
     public boolean isOut() {
@@ -1253,6 +1289,18 @@ public static boolean isVoiceDocument(TLRPC.Document document) {
         return false;
     }
 
+    public static boolean isMusicDocument(TLRPC.Document document) {
+        if (document != null) {
+            for (int a = 0; a < document.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                    return !attribute.voice;
+                }
+            }
+        }
+        return false;
+    }
+
     public static boolean isVideoDocument(TLRPC.Document document) {
         if (document != null) {
             boolean isAnimated = false;
@@ -1270,29 +1318,36 @@ public static boolean isVideoDocument(TLRPC.Document document) {
         return false;
     }
 
+    public TLRPC.Document getDocument() {
+        if (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
+            return messageOwner.media.webpage.document;
+        }
+        return messageOwner.media != null ? messageOwner.media.document : null;
+    }
+
     public static boolean isStickerMessage(TLRPC.Message message) {
         return message.media != null && message.media.document != null && isStickerDocument(message.media.document);
     }
 
     public static boolean isMusicMessage(TLRPC.Message message) {
-        if (message.media != null && message.media.document != null) {
-            for (int a = 0; a < message.media.document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = message.media.document.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                    return !attribute.voice;
-                }
-            }
+        if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
+            return isMusicDocument(message.media.webpage.document);
         }
-        return false;
+        return message.media != null && message.media.document != null && isMusicDocument(message.media.document);
     }
 
     public static boolean isVoiceMessage(TLRPC.Message message) {
+        if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
+            return isVoiceDocument(message.media.webpage.document);
+        }
         return message.media != null && message.media.document != null && isVoiceDocument(message.media.document);
     }
 
     public static boolean isVideoMessage(TLRPC.Message message) {
+        if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
+            return isVideoDocument(message.media.webpage.document);
+        }
         return message.media != null && message.media.document != null && isVideoDocument(message.media.document);
-        /* && message.media.document.mime_type.equals("video/mp4")*/
     }
 
     public static TLRPC.InputStickerSet getInputStickerSet(TLRPC.Message message) {
@@ -1322,17 +1377,25 @@ public String getStrickerChar() {
 
     public int getApproximateHeight() {
         if (type == 0) {
-            return textHeight;
-        } else if (contentType == 2) {
-            return AndroidUtilities.dp(68);
-        } else if (contentType == 3) {
+            int height = textHeight + (messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageOwner.media.webpage instanceof TLRPC.TL_webPage ? AndroidUtilities.dp(100) : 0);
+            if (isReply()) {
+                height += AndroidUtilities.dp(42);
+            }
+            return height;
+        } else if (type == 2) {
+            return AndroidUtilities.dp(72);
+        } else if (type == 12) {
             return AndroidUtilities.dp(71);
         } else if (type == 9) {
             return AndroidUtilities.dp(100);
         } else if (type == 4) {
             return AndroidUtilities.dp(114);
         } else if (type == 14) {
-            return AndroidUtilities.dp(78);
+            return AndroidUtilities.dp(82);
+        } else if (type == 10) {
+            return AndroidUtilities.dp(30);
+        } else if (type == 11) {
+            return AndroidUtilities.dp(50);
         } else if (type == 13) {
             float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
             float maxWidth;
@@ -1405,6 +1468,9 @@ public int getApproximateHeight() {
     }
 
     public boolean isSticker() {
+        if (type != 1000) {
+            return type == 13;
+        }
         return isStickerMessage(messageOwner);
     }
 
@@ -1421,7 +1487,11 @@ public boolean isVideo() {
     }
 
     public boolean isGif() {
-        return isGifDocument(messageOwner.media.document);
+        return messageOwner.media instanceof TLRPC.TL_messageMediaDocument && isGifDocument(messageOwner.media.document);
+    }
+
+    public boolean isWebpageDocument() {
+        return messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageOwner.media.webpage.document != null && !isGifDocument(messageOwner.media.webpage.document);
     }
 
     public boolean isNewGif() {
@@ -1429,15 +1499,21 @@ public boolean isNewGif() {
     }
 
     public String getMusicTitle() {
-        for (int a = 0; a < messageOwner.media.document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = messageOwner.media.document.attributes.get(a);
+        TLRPC.Document document;
+        if (type == 0) {
+            document = messageOwner.media.webpage.document;
+        } else {
+            document = messageOwner.media.document;
+        }
+        for (int a = 0; a < document.attributes.size(); a++) {
+            TLRPC.DocumentAttribute attribute = document.attributes.get(a);
             if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
                 if (attribute.voice) {
                     return LocaleController.formatDateAudio(messageOwner.date);
                 }
                 String title = attribute.title;
                 if (title == null || title.length() == 0) {
-                    title = FileLoader.getDocumentFileName(messageOwner.media.document);
+                    title = FileLoader.getDocumentFileName(document);
                     if (title == null || title.length() == 0) {
                         title = LocaleController.getString("AudioUnknownTitle", R.string.AudioUnknownTitle);
                     }
@@ -1449,8 +1525,14 @@ public String getMusicTitle() {
     }
 
     public String getMusicAuthor() {
-        for (int a = 0; a < messageOwner.media.document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = messageOwner.media.document.attributes.get(a);
+        TLRPC.Document document;
+        if (type == 0) {
+            document = messageOwner.media.webpage.document;
+        } else {
+            document = messageOwner.media.document;
+        }
+        for (int a = 0; a < document.attributes.size(); a++) {
+            TLRPC.DocumentAttribute attribute = document.attributes.get(a);
             if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
                 if (attribute.voice) {
                     if (isOutOwner() || messageOwner.fwd_from != null && messageOwner.fwd_from.from_id == UserConfig.getClientUserId()) {
@@ -1512,16 +1594,23 @@ public boolean canEditMessage(TLRPC.Chat chat) {
     }
 
     public static boolean canEditMessage(TLRPC.Message message, TLRPC.Chat chat) {
-        if (message.action != null && !(message.action instanceof TLRPC.TL_messageActionEmpty) || isForwardedMessage(message) || message.via_bot_id != 0 || message.id < 0 || Math.abs(message.date - ConnectionsManager.getInstance().getCurrentTime()) > MessagesController.getInstance().maxEditTime) {
+        if (message == null || message.to_id == null || message.action != null && !(message.action instanceof TLRPC.TL_messageActionEmpty) || isForwardedMessage(message) || message.via_bot_id != 0 || message.id < 0 || Math.abs(message.date - ConnectionsManager.getInstance().getCurrentTime()) > MessagesController.getInstance().maxEditTime) {
             return false;
         }
+        if (message.to_id.channel_id == 0) {
+            return message.out && (message.media instanceof TLRPC.TL_messageMediaPhoto ||
+                    message.media instanceof TLRPC.TL_messageMediaDocument && (isVideoMessage(message) || isGifDocument(message.media.document)) ||
+                    message.media instanceof TLRPC.TL_messageMediaEmpty ||
+                    message.media instanceof TLRPC.TL_messageMediaWebPage ||
+                    message.media == null);
+        }
         if (chat == null && message.to_id.channel_id != 0) {
             chat = MessagesController.getInstance().getChat(message.to_id.channel_id);
+            if (chat == null) {
+                return false;
+            }
         }
-        if (ChatObject.isChannel(chat) && chat.megagroup) {
-            return message.out;
-        }
-        if (ChatObject.isChannel(chat) && !chat.megagroup && (chat.creator || chat.editor && isOut(message)) && isImportant(message)) {
+        if (chat.megagroup && message.out || !chat.megagroup && (chat.creator || chat.editor && isOut(message)) && isImportant(message)) {
             if (message.media instanceof TLRPC.TL_messageMediaPhoto ||
                     message.media instanceof TLRPC.TL_messageMediaDocument && (isVideoMessage(message) || isGifDocument(message.media.document)) ||
                     message.media instanceof TLRPC.TL_messageMediaEmpty ||
@@ -1581,4 +1670,35 @@ public String getForwardedName() {
         }
         return null;
     }
+
+    public void checkMediaExistance() {
+        File cacheFile = null;
+        if (type == 1) {
+            TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize());
+            if (currentPhotoObject != null) {
+                mediaExists = FileLoader.getPathToMessage(messageOwner).exists();
+            }
+        } else if (type == 8 || type == 3 || type == 9 || type == 2 || type == 14) {
+            if (messageOwner.attachPath != null && messageOwner.attachPath.length() > 0) {
+                File f = new File(messageOwner.attachPath);
+                attachPathExists = f.exists();
+            }
+            if (!attachPathExists) {
+                mediaExists = FileLoader.getPathToMessage(messageOwner).exists();
+            }
+        } else {
+            TLRPC.Document document = getDocument();
+            if (document != null) {
+                mediaExists = FileLoader.getPathToAttach(document).exists();
+            } else if (type == 0) {
+                TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize());
+                if (currentPhotoObject == null) {
+                    return;
+                }
+                if (currentPhotoObject != null) {
+                    mediaExists = FileLoader.getPathToAttach(currentPhotoObject, true).exists();
+                }
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index c8080cc57..4c01cc31a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -24,6 +24,7 @@
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.messenger.query.BotQuery;
+import org.telegram.messenger.query.MessagesQuery;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
@@ -70,7 +71,9 @@
     public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
     private int lastPrintingStringCount = 0;
 
-    private long lastCreatedDialogId;
+    private HashMap<Long, Boolean> loadingPeerSettings = new HashMap<>();
+
+    private ArrayList<Long> createdDialogIds = new ArrayList<>();
 
     private SparseIntArray shortPollChannels = new SparseIntArray();
     private SparseIntArray needShortPollChannels = new SparseIntArray();
@@ -93,6 +96,7 @@
     private long updatesStartWaitTimeSeq = 0;
     private long updatesStartWaitTimePts = 0;
     private long updatesStartWaitTimeQts = 0;
+    private HashMap<Integer, String> fullUsersAbout = new HashMap<>();
     private ArrayList<Integer> loadingFullUsers = new ArrayList<>();
     private ArrayList<Integer> loadedFullUsers = new ArrayList<>();
     private ArrayList<Integer> loadingFullChats = new ArrayList<>();
@@ -130,7 +134,7 @@
     public int fontSize = AndroidUtilities.dp(16);
     public int maxGroupCount = 200;
     public int maxBroadcastCount = 100;
-    public int maxMegagroupCount = 1000;
+    public int maxMegagroupCount = 5000;
     public int minGroupConvertSize = 200;
     public int maxEditTime = 172800;
     public int groupBigSize;
@@ -222,7 +226,7 @@ public MessagesController() {
     }
 
     public void updateConfig(final TLRPC.TL_config config) {
-        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
+        AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
                 //maxBroadcastCount = config.broadcast_size_max;
@@ -313,7 +317,7 @@ public void addSupportUser() {
     }
 
     public static TLRPC.InputUser getInputUser(int user_id) {
-        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        TLRPC.User user = getInstance().getUser(user_id);
         return getInputUser(user);
     }
 
@@ -470,6 +474,7 @@ public void cleanUp() {
         dialogs_dict.clear();
         dialogs_read_inbox_max.clear();
         exportedChats.clear();
+        fullUsersAbout.clear();
         dialogs.clear();
         joiningToChannels.clear();
         channelViewsToSend.clear();
@@ -486,6 +491,7 @@ public void cleanUp() {
         printingStrings.clear();
         printingStringsTypes.clear();
         onlinePrivacy.clear();
+        loadingPeerSettings.clear();
         lastPrintingStringCount = 0;
         nextDialogsCacheOffset = 0;
         Utilities.stageQueue.postRunnable(new Runnable() {
@@ -497,7 +503,7 @@ public void run() {
                 updatesStartWaitTimeSeq = 0;
                 updatesStartWaitTimePts = 0;
                 updatesStartWaitTimeQts = 0;
-                lastCreatedDialogId = 0;
+                createdDialogIds.clear();
                 gettingDifference = false;
             }
         });
@@ -596,9 +602,9 @@ public void setLastCreatedDialogId(final long dialog_id, final boolean set) {
             @Override
             public void run() {
                 if (set) {
-                    lastCreatedDialogId = dialog_id;
-                } else if (lastCreatedDialogId == dialog_id) {
-                    lastCreatedDialogId = 0;
+                    createdDialogIds.add(dialog_id);
+                } else {
+                    createdDialogIds.remove(dialog_id);
                 }
             }
         });
@@ -623,19 +629,12 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
         if (user.min) {
             if (oldUser != null) {
                 if (!fromCache) {
-                    if (user.first_name != null) {
-                        oldUser.first_name = user.first_name;
-                        oldUser.flags |= 2;
+                    if (user.username != null) {
+                        oldUser.username = user.username;
+                        oldUser.flags |= 8;
                     } else {
-                        oldUser.first_name = null;
-                        oldUser.flags = oldUser.flags &~ 2;
-                    }
-                    if (user.last_name != null) {
-                        oldUser.last_name = user.last_name;
-                        oldUser.flags |= 4;
-                    } else {
-                        oldUser.last_name = null;
-                        oldUser.flags = oldUser.flags &~ 4;
+                        oldUser.username = null;
+                        oldUser.flags = oldUser.flags &~ 8;
                     }
                     if (user.photo != null) {
                         oldUser.photo = user.photo;
@@ -660,6 +659,23 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
                 }
             } else if (oldUser == null) {
                 users.put(user.id, user);
+            } else if (oldUser.min) {
+                user.min = false;
+                if (oldUser.username != null) {
+                    user.username = oldUser.username;
+                    user.flags |= 8;
+                } else {
+                    user.username = null;
+                    user.flags = user.flags &~ 8;
+                }
+                if (oldUser.photo != null) {
+                    user.photo = oldUser.photo;
+                    user.flags |= 32;
+                } else {
+                    user.photo = null;
+                    user.flags = user.flags &~ 32;
+                }
+                users.put(user.id, user);
             }
         }
         return false;
@@ -692,13 +708,52 @@ public void putChat(TLRPC.Chat chat, boolean fromCache) {
             return;
         }
         TLRPC.Chat oldChat = chats.get(chat.id);
-        if (!fromCache) {
-            if (oldChat != null && chat.version != oldChat.version) {
-                loadedFullChats.remove((Integer) chat.id);
+
+        if (chat.min) {
+            if (oldChat != null) {
+                if (!fromCache) {
+                    oldChat.title = chat.title;
+                    oldChat.photo = chat.photo;
+                    oldChat.broadcast = chat.broadcast;
+                    oldChat.verified = chat.verified;
+                    oldChat.megagroup = chat.megagroup;
+                    oldChat.democracy = chat.democracy;
+                    if (chat.username != null) {
+                        oldChat.username = chat.username;
+                        oldChat.flags |= 64;
+                    } else {
+                        oldChat.username = null;
+                        oldChat.flags = oldChat.flags &~ 64;
+                    }
+                }
+            } else {
+                chats.put(chat.id, chat);
+            }
+        } else {
+            if (!fromCache) {
+                if (oldChat != null && chat.version != oldChat.version) {
+                    loadedFullChats.remove((Integer) chat.id);
+                }
+                chats.put(chat.id, chat);
+            } else if (oldChat == null) {
+                chats.put(chat.id, chat);
+            } else if (oldChat.min) {
+                chat.min = false;
+                chat.title = oldChat.title;
+                chat.photo = oldChat.photo;
+                chat.broadcast = oldChat.broadcast;
+                chat.verified = oldChat.verified;
+                chat.megagroup = oldChat.megagroup;
+                chat.democracy = oldChat.democracy;
+                if (oldChat.username != null) {
+                    chat.username = oldChat.username;
+                    chat.flags |= 64;
+                } else {
+                    chat.username = null;
+                    chat.flags = chat.flags &~ 64;
+                }
+                chats.put(chat.id, chat);
             }
-            chats.put(chat.id, chat);
-        } else if (oldChat == null) {
-            chats.put(chat.id, chat);
         }
     }
 
@@ -735,6 +790,10 @@ public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats, boo
         }
     }
 
+    public String getUserAbout(int uid) {
+        return fullUsersAbout.get(uid);
+    }
+
     public void cancelLoadFullUser(int uid) {
         loadingFullUsers.remove((Integer) uid);
     }
@@ -748,10 +807,6 @@ protected void clearFullUsers() {
         loadedFullChats.clear();
     }
 
-    public void loadFullChat(final int chat_id, final int classGuid) {
-        loadFullChat(chat_id, classGuid, false);
-    }
-
     public void loadFullChat(final int chat_id, final int classGuid, boolean force) {
         if (loadingFullChats.contains(chat_id) || !force && loadedFullChats.contains(chat_id)) {
             return;
@@ -796,16 +851,14 @@ public void run() {
 
                             putUsers(res.users, false);
                             putChats(res.chats, false);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, res.full_chat, classGuid, false);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, res.full_chat, classGuid, false, null);
                         }
                     });
                 } else {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            if (error.text.equals("CHANNEL_PRIVATE")) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoCantLoad, chat_id);
-                            }
+                            checkChannelError(error.text, chat_id);
                             loadingFullChats.remove((Integer) chat_id);
                         }
                     });
@@ -817,8 +870,8 @@ public void run() {
         }
     }
 
-    public void loadFullUser(final TLRPC.User user, final int classGuid) {
-        if (user == null || loadingFullUsers.contains(user.id) || loadedFullUsers.contains(user.id)) {
+    public void loadFullUser(final TLRPC.User user, final int classGuid, boolean force) {
+        if (user == null || loadingFullUsers.contains(user.id) || !force && loadedFullUsers.contains(user.id)) {
             return;
         }
         loadingFullUsers.add(user.id);
@@ -836,6 +889,11 @@ public void run() {
                             if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
                                 BotQuery.putBotInfo(userFull.bot_info);
                             }
+                            if (userFull.about != null && userFull.about.length() > 0) {
+                                fullUsersAbout.put(user.id, userFull.about);
+                            } else {
+                                fullUsersAbout.remove(user.id);
+                            }
                             loadingFullUsers.remove((Integer) user.id);
                             loadedFullUsers.add(user.id);
                             String names = user.first_name + user.last_name + user.username;
@@ -849,6 +907,7 @@ public void run() {
                             if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.botInfoDidLoaded, userFull.bot_info, classGuid);
                             }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.userInfoDidLoaded, user.id);
                         }
                     });
                 } else {
@@ -962,6 +1021,116 @@ public void run() {
         });
     }
 
+    public void hideReportSpam(final long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat) {
+        if (currentUser == null && currentChat == null) {
+            return;
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("spam3_" + dialogId, 1);
+        editor.commit();
+        TLRPC.TL_messages_hideReportSpam req = new TLRPC.TL_messages_hideReportSpam();
+        if (currentUser != null) {
+            req.peer = MessagesController.getInputPeer(currentUser.id);
+        } else if (currentChat != null) {
+            req.peer = MessagesController.getInputPeer(-currentChat.id);
+        }
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });
+    }
+
+    public void reportSpam(final long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat) {
+        if (currentUser == null && currentChat == null) {
+            return;
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putInt("spam3_" + dialogId, 1);
+        editor.commit();
+        TLRPC.TL_messages_reportSpam req = new TLRPC.TL_messages_reportSpam();
+        if (currentChat != null) {
+            req.peer = MessagesController.getInputPeer(-currentChat.id);
+        } else if (currentUser != null) {
+            req.peer = MessagesController.getInputPeer(currentUser.id);
+        }
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        }, ConnectionsManager.RequestFlagFailOnServerErrors);
+    }
+
+    public void loadPeerSettings(final long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat) {
+        if (loadingPeerSettings.containsKey(dialogId) || currentUser == null && currentChat == null) {
+            return;
+        }
+        loadingPeerSettings.put(dialogId, true);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        if (preferences.getInt("spam3_" + dialogId, 0) == 1) {
+            return;
+        }
+        boolean hidden = preferences.getBoolean("spam_" + dialogId, false);
+        if (hidden) {
+            TLRPC.TL_messages_hideReportSpam req = new TLRPC.TL_messages_hideReportSpam();
+            if (currentUser != null) {
+                req.peer = MessagesController.getInputPeer(currentUser.id);
+            } else if (currentChat != null) {
+                req.peer = MessagesController.getInputPeer(-currentChat.id);
+            }
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            loadingPeerSettings.remove(dialogId);
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = preferences.edit();
+                            editor.remove("spam_" + dialogId);
+                            editor.putInt("spam3_" + dialogId, 1);
+                            editor.commit();
+                        }
+                    });
+                }
+            });
+            return;
+        }
+        TLRPC.TL_messages_getPeerSettings req = new TLRPC.TL_messages_getPeerSettings();
+        if (currentUser != null) {
+            req.peer = MessagesController.getInputPeer(currentUser.id);
+        } else if (currentChat != null) {
+            req.peer = MessagesController.getInputPeer(-currentChat.id);
+        }
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        loadingPeerSettings.remove(dialogId);
+                        if (response != null) {
+                            TLRPC.TL_peerSettings res = (TLRPC.TL_peerSettings) response;
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = preferences.edit();
+                            if (!res.report_spam) {
+                                editor.putInt("spam3_" + dialogId, 1);
+                            } else {
+                                editor.putInt("spam3_" + dialogId, 2);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.peerSettingsDidLoaded, dialogId);
+                            }
+                            editor.commit();
+                        }
+                    }
+                });
+            }
+        });
+    }
+
     protected void processNewChannelDifferenceParams(int pts, int pts_count, int channelId) {
         FileLog.e("tmessages", "processNewChannelDifferenceParams pts = " + pts + " pts_count = " + pts_count + " channeldId = " + channelId);
         TLRPC.Dialog dialog = dialogs_dict.get((long) -channelId);
@@ -1168,13 +1337,13 @@ public void run(TLObject response, TLRPC.TL_error error) {
 
     public void blockUser(int user_id) {
         final TLRPC.User user = getUser(user_id);
-        if (user == null || MessagesController.getInstance().blockedUsers.contains(user_id)) {
+        if (user == null || blockedUsers.contains(user_id)) {
             return;
         }
         blockedUsers.add(user_id);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
         TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
-        req.id = MessagesController.getInputUser(user);
+        req.id = getInputUser(user);
         ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
@@ -1189,12 +1358,12 @@ public void run(TLObject response, TLRPC.TL_error error) {
 
     public void unblockUser(int user_id) {
         TLRPC.TL_contacts_unblock req = new TLRPC.TL_contacts_unblock();
-        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        final TLRPC.User user = getUser(user_id);
         if (user == null) {
             return;
         }
         blockedUsers.remove((Integer) user.id);
-        req.id = MessagesController.getInputUser(user);
+        req.id = getInputUser(user);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
         ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
@@ -1240,7 +1409,7 @@ public void processLoadedBlockedUsers(final ArrayList<Integer> ids, final ArrayL
             @Override
             public void run() {
                 if (users != null) {
-                    MessagesController.getInstance().putUsers(users, cache);
+                    putUsers(users, cache);
                 }
                 loadingBlockedUsers = false;
                 if (ids.isEmpty() && cache && !UserConfig.blockedUsersLoaded) {
@@ -1262,7 +1431,7 @@ public void deleteUserPhoto(TLRPC.InputPhoto photo) {
             req.id = new TLRPC.TL_inputPhotoEmpty();
             req.crop = new TLRPC.TL_inputPhotoCropAuto();
             UserConfig.getCurrentUser().photo = new TLRPC.TL_userProfilePhotoEmpty();
-            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+            TLRPC.User user = getUser(UserConfig.getClientUserId());
             if (user == null) {
                 user = UserConfig.getCurrentUser();
             }
@@ -1271,15 +1440,15 @@ public void deleteUserPhoto(TLRPC.InputPhoto photo) {
             }
             user.photo = UserConfig.getCurrentUser().photo;
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_ALL);
             ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
-                        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                        TLRPC.User user = getUser(UserConfig.getClientUserId());
                         if (user == null) {
                             user = UserConfig.getCurrentUser();
-                            MessagesController.getInstance().putUser(user, false);
+                            putUser(user, false);
                         } else {
                             UserConfig.setCurrentUser(user);
                         }
@@ -1295,7 +1464,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             @Override
                             public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_ALL);
                                 UserConfig.saveConfig(true);
                             }
                         });
@@ -1338,6 +1507,19 @@ public void uploadAndApplyUserAvatar(TLRPC.PhotoSize bigPhoto) {
         }
     }
 
+    public void markChannelDialogMessageAsDeleted(ArrayList<Integer> messages, final int channelId) {
+        MessageObject obj = dialogMessage.get((long) -channelId);
+        if (obj != null) {
+            for (int a = 0; a < messages.size(); a++) {
+                Integer id = messages.get(a);
+                if (obj.getId() == id) {
+                    obj.deleted = true;
+                    break;
+                }
+            }
+        }
+    }
+
     public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, final int channelId) {
         if (messages == null || messages.isEmpty()) {
             return;
@@ -1351,16 +1533,7 @@ public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms,
                 }
             }
         } else {
-            MessageObject obj = dialogMessage.get((long) -channelId);
-            if (obj != null) {
-                for (int a = 0; a < messages.size(); a++) {
-                    Integer id = messages.get(a);
-                    if (obj.getId() == id) {
-                        obj.deleted = true;
-                        break;
-                    }
-                }
-            }
+            markChannelDialogMessageAsDeleted(messages, channelId);
         }
         ArrayList<Integer> toSend = new ArrayList<>();
         for (int a = 0; a < messages.size(); a++) {
@@ -1403,10 +1576,47 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
+    public void pinChannelMessage(TLRPC.Chat chat, int id, boolean notify) {
+        TLRPC.TL_channels_updatePinnedMessage req = new TLRPC.TL_channels_updatePinnedMessage();
+        req.channel = getInputChannel(chat);
+        req.id = id;
+        req.silent = !notify;
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    TLRPC.Updates updates = (TLRPC.Updates) response;
+                    processUpdates(updates, false);
+                }
+            }
+        });
+    }
+
     public void deleteDialog(final long did, final int onlyHistory) {
         deleteDialog(did, true, onlyHistory, 0);
     }
 
+    public void deleteUserChannelHistory(final TLRPC.Chat chat, final TLRPC.User user, int offset) {
+        if (offset == 0) {
+            MessagesStorage.getInstance().deleteUserChannelHistory(chat.id, user.id);
+        }
+        TLRPC.TL_channels_deleteUserHistory req = new TLRPC.TL_channels_deleteUserHistory();
+        req.channel = getInputChannel(chat);
+        req.user_id = getInputUser(user);
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error == null) {
+                    TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
+                    if (res.offset > 0) {
+                        deleteUserChannelHistory(chat, user, res.offset);
+                    }
+                    processNewChannelDifferenceParams(res.pts, res.pts_count, chat.id);
+                }
+            }
+        });
+    }
+
     private void deleteDialog(final long did, final boolean first, final int onlyHistory, final int max_id) {
         int lower_part = (int) did;
         int high_id = (int) (did >> 32);
@@ -1502,6 +1712,30 @@ public void run(TLObject response, TLRPC.TL_error error) {
         }
     }
 
+    public MediaController.SearchImage saveGif(TLRPC.Document document) {
+        MediaController.SearchImage searchImage = new MediaController.SearchImage();
+        searchImage.type = 2;
+        searchImage.document = document;
+        searchImage.date = (int) (System.currentTimeMillis() / 1000);
+        searchImage.id = "" + searchImage.document.id;
+
+        ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
+        arrayList.add(searchImage);
+        MessagesStorage.getInstance().putWebRecent(arrayList);
+        TLRPC.TL_messages_saveGif req = new TLRPC.TL_messages_saveGif();
+        req.id = new TLRPC.TL_inputDocument();
+        req.id.id = searchImage.document.id;
+        req.id.access_hash = searchImage.document.access_hash;
+        req.unsave = false;
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });
+        return searchImage;
+    }
+
     public void loadChannelParticipants(final Integer chat_id) {
         if (loadingFullParticipants.contains(chat_id) || loadedFullParticipants.contains(chat_id)) {
             return;
@@ -1509,7 +1743,7 @@ public void loadChannelParticipants(final Integer chat_id) {
         loadingFullParticipants.add(chat_id);
 
         final TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
-        req.channel = MessagesController.getInputChannel(chat_id);
+        req.channel = getInputChannel(chat_id);
         req.filter = new TLRPC.TL_channelParticipantsRecent();
         req.offset = 0;
         req.limit = 32;
@@ -1537,7 +1771,7 @@ public void loadChatInfo(final int chat_id, Semaphore semaphore, boolean force)
         MessagesStorage.getInstance().loadChatInfo(chat_id, semaphore, force, false);
     }
 
-    public void processChatInfo(int chat_id, final TLRPC.ChatFull info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache, boolean force, final boolean byChannelUsers) {
+    public void processChatInfo(int chat_id, final TLRPC.ChatFull info, final ArrayList<TLRPC.User> usersArr, final boolean fromCache, boolean force, final boolean byChannelUsers, final MessageObject pinnedMessageObject) {
         if (fromCache && chat_id > 0 && !byChannelUsers) {
             loadFullChat(chat_id, 0, force);
         }
@@ -1546,7 +1780,7 @@ public void processChatInfo(int chat_id, final TLRPC.ChatFull info, final ArrayL
                 @Override
                 public void run() {
                     putUsers(usersArr, fromCache);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, byChannelUsers);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, byChannelUsers, pinnedMessageObject);
                 }
             });
         }
@@ -1767,13 +2001,20 @@ private void updatePrintingStrings() {
                 if (user == null) {
                     return;
                 }
-                if (pu.action instanceof TLRPC.TL_sendMessageUploadAudioAction || pu.action instanceof TLRPC.TL_sendMessageRecordAudioAction) {
+                if (pu.action instanceof TLRPC.TL_sendMessageRecordAudioAction) {
                     if (lower_id < 0) {
                         newPrintingStrings.put(key, LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user)));
                     } else {
                         newPrintingStrings.put(key, LocaleController.getString("RecordingAudio", R.string.RecordingAudio));
                     }
                     newPrintingStringsTypes.put(key, 1);
+                } else if (pu.action instanceof TLRPC.TL_sendMessageUploadAudioAction) {
+                    if (lower_id < 0) {
+                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingAudio", R.string.IsSendingAudio, getUserNameForTyping(user)));
+                    } else {
+                        newPrintingStrings.put(key, LocaleController.getString("SendingAudio", R.string.SendingAudio));
+                    }
+                    newPrintingStringsTypes.put(key, 2);
                 } else if (pu.action instanceof TLRPC.TL_sendMessageUploadVideoAction || pu.action instanceof TLRPC.TL_sendMessageRecordVideoAction) {
                     if (lower_id < 0) {
                         newPrintingStrings.put(key, LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user)));
@@ -1874,7 +2115,7 @@ public void sendTyping(final long dialog_id, final int action, int classGuid) {
             TLRPC.TL_messages_setTyping req = new TLRPC.TL_messages_setTyping();
             req.peer = getInputPeer(lower_part);
             if (req.peer instanceof TLRPC.TL_inputPeerChannel) {
-                TLRPC.Chat chat = MessagesController.getInstance().getChat(req.peer.channel_id);
+                TLRPC.Chat chat = getChat(req.peer.channel_id);
                 if (chat == null || !chat.megagroup) {
                     return;
                 }
@@ -1951,6 +2192,7 @@ public void loadMessages(final long dialog_id, final int count, final int max_id
     }
 
     public void loadMessages(final long dialog_id, final int count, final int max_id, boolean fromCache, int midDate, final int classGuid, final int load_type, final int last_message_id, final int important, final int loadIndex, final int first_unread, final int unread_count, final int last_date, final boolean queryFromServer) {
+        FileLog.e("tmessages", "load messages in chat " + dialog_id + " count " + count + " max_id " + max_id + " cache " + fromCache + " mindate = " + midDate + " guid " + classGuid + " load_type " + load_type + " last_message_id " + last_message_id + " imp " + important + " index " + loadIndex + " firstUnread " + first_unread + " underad count " + unread_count + " last_date " + last_date + " queryFromServer " + queryFromServer);
         int lower_part = (int) dialog_id;
         if (fromCache || lower_part == 0) {
             MessagesStorage.getInstance().getMessages(dialog_id, count, max_id, midDate, classGuid, load_type, important, loadIndex);
@@ -2007,9 +2249,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
     }
 
     public void reloadWebPages(final long dialog_id, HashMap<String, ArrayList<MessageObject>> webpagesToReload) {
-        //if (secretWebpagePreview != 1) {
-        //    return;
-        //}
         for (HashMap.Entry<String, ArrayList<MessageObject>> entry : webpagesToReload.entrySet()) {
             final String url = entry.getKey();
             final ArrayList<MessageObject> messages = entry.getValue();
@@ -2064,6 +2303,7 @@ public void run() {
 
     public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, final long dialog_id, final int count, final int max_id, final boolean isCache, final int classGuid,
                                       final int first_unread, final int last_message_id, final int unread_count, final int last_date, final int load_type, final int important, final boolean isEnd, final int loadIndex, final boolean queryFromServer) {
+        FileLog.e("tmessages", "processLoadedMessages size " + messagesRes.messages.size() + " in chat " + dialog_id + " count " + count + " max_id " + max_id + " cache " + isCache + " guid " + classGuid + " load_type " + load_type + " last_message_id " + last_message_id + " imp " + important + " index " + loadIndex + " firstUnread " + first_unread + " underad count " + unread_count + " last_date " + last_date + " queryFromServer " + queryFromServer);
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -2077,7 +2317,11 @@ public void run() {
                         if (channelPts == 0) {
                             channelsPts.put(channelId, messagesRes.pts);
                             createDialog = true;
-                            getChannelDifference(channelId);
+                            if (needShortPollChannels.indexOfKey(channelId) >= 0 && shortPollChannels.indexOfKey(channelId) < 0) {
+                                getChannelDifference(channelId, 2);
+                            } else {
+                                getChannelDifference(channelId);
+                            }
                         }
                     }
                     for (int a = 0; a < messagesRes.chats.size(); a++) {
@@ -2222,7 +2466,7 @@ public void loadDialogs(final int offset, final int count, boolean fromCache) {
                         } else {
                             id = message.messageOwner.to_id.user_id;
                         }
-                        req.offset_peer = MessagesController.getInputPeer(id);
+                        req.offset_peer = getInputPeer(id);
                         found = true;
                         break;
                     }
@@ -2387,7 +2631,7 @@ public void run() {
                                 }
                                 cursor.dispose();
 
-                                MessagesController.getInstance().processLoadedDialogs(dialogsRes, null, offsetId, 0, false, false, true);
+                                processLoadedDialogs(dialogsRes, null, offsetId, 0, false, false, true);
                             } catch (Exception e) {
                                 FileLog.e("tmessages", e);
                                 AndroidUtilities.runOnUIThread(new Runnable() {
@@ -2591,6 +2835,9 @@ public void run() {
                                     }
                                 }
                             } else {
+                                if (!isCache) {
+                                    currentDialog.notify_settings = value.notify_settings;
+                                }
                                 MessageObject oldMsg = dialogMessage.get(key);
                                 if (oldMsg != null && oldMsg.deleted || oldMsg == null || currentDialog.top_message > 0) {
                                     if (value.top_message >= currentDialog.top_message) {
@@ -2732,7 +2979,7 @@ private void applyDialogNotificationsSettings(long dialog_id, TLRPC.PeerNotifySe
             MessagesStorage.getInstance().setDialogFlags(dialog_id, ((long) until << 32) | 1);
             NotificationsController.getInstance().removeNotificationsForDialog(dialog_id);
         } else {
-            if (currentValue != 0) {
+            if (currentValue != 0 && currentValue != 1) {
                 updated = true;
                 if (dialog != null) {
                     dialog.notify_settings.mute_until = 0;
@@ -3250,7 +3497,11 @@ public void run(TLObject response, final TLRPC.TL_error error) {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                AlertsCreator.showAddUserAlert(error.text, fragment, false);
+                                if (error.text.startsWith("FLOOD_WAIT")) {
+                                    AlertsCreator.showFloodWaitAlert(error.text, fragment);
+                                } else {
+                                    AlertsCreator.showAddUserAlert(error.text, fragment, false);
+                                }
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidFailCreate);
                             }
                         });
@@ -3271,7 +3522,7 @@ public void run() {
                         }
                     });
                 }
-            });
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
         } else if (type == ChatObject.CHAT_TYPE_CHANNEL || type == ChatObject.CHAT_TYPE_MEGAGROUP) {
             TLRPC.TL_channels_createChannel req = new TLRPC.TL_channels_createChannel();
             req.title = title;
@@ -3283,11 +3534,14 @@ public void run() {
             }
             return ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
+                public void run(TLObject response, final TLRPC.TL_error error) {
                     if (error != null) {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
+                                if (error.text.startsWith("FLOOD_WAIT")) {
+                                    AlertsCreator.showFloodWaitAlert(error.text, fragment);
+                                }
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatDidFailCreate);
                             }
                         });
@@ -3308,7 +3562,7 @@ public void run() {
                         }
                     });
                 }
-            });
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
         }
         return 0;
     }
@@ -3475,7 +3729,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         public void run() {
                             info.about = about;
                             MessagesStorage.getInstance().updateChatInfo(info, false);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false, null);
                         }
                     });
                 }
@@ -3569,7 +3823,7 @@ public void addUserToChat(final int chat_id, final TLRPC.User user, final TLRPC.
             TLObject request;
 
             final boolean isChannel = ChatObject.isChannel(chat_id);
-            final boolean isMegagroup = isChannel && MessagesController.getInstance().getChat(chat_id).megagroup;
+            final boolean isMegagroup = isChannel && getChat(chat_id).megagroup;
             final TLRPC.InputUser inputUser = getInputUser(user);
             if (botHash == null || isChannel && !isMegagroup) {
                 if (isChannel) {
@@ -3585,7 +3839,7 @@ public void addUserToChat(final int chat_id, final TLRPC.User user, final TLRPC.
                         if (user.bot && !isMegagroup) {
                             TLRPC.TL_channels_editAdmin req = new TLRPC.TL_channels_editAdmin();
                             req.channel = getInputChannel(chat_id);
-                            req.user_id = MessagesController.getInputUser(user);
+                            req.user_id = getInputUser(user);
                             req.role = new TLRPC.TL_channelRoleEditor();
                             request = req;
                         } else {
@@ -3642,9 +3896,20 @@ public void run() {
                         });
                         return;
                     }
-                    processUpdates((TLRPC.Updates) response, false);
+                    boolean hasJoinMessage = false;
+                    TLRPC.Updates updates = (TLRPC.Updates) response;
+                    for (int a = 0; a < updates.updates.size(); a++) {
+                        TLRPC.Update update = updates.updates.get(a);
+                        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
+                            if (((TLRPC.TL_updateNewChannelMessage) update).message.action instanceof TLRPC.TL_messageActionChatAddUser) {
+                                hasJoinMessage = true;
+                                break;
+                            }
+                        }
+                    }
+                    processUpdates(updates, false);
                     if (isChannel) {
-                        if (inputUser instanceof TLRPC.TL_inputUserSelf) {
+                        if (!hasJoinMessage && inputUser instanceof TLRPC.TL_inputUserSelf) {
                             generateJoinMessage(chat_id, true);
                         }
                         AndroidUtilities.runOnUIThread(new Runnable() {
@@ -3679,7 +3944,7 @@ public void run() {
                 newPart.date = ConnectionsManager.getInstance().getCurrentTime();
                 info.participants.participants.add(0, newPart);
                 MessagesStorage.getInstance().updateChatInfo(info, true);
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false, null);
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
             }
         }
@@ -3725,7 +3990,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                MessagesController.getInstance().deleteDialog(-chat_id, 0);
+                                deleteDialog(-chat_id, 0);
                             }
                         });
                     }
@@ -3763,7 +4028,7 @@ public void run() {
                 }
                 if (changed) {
                     MessagesStorage.getInstance().updateChatInfo(info, true);
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, info, 0, false, null);
                 }
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_CHAT_MEMBERS);
             }
@@ -3888,7 +4153,7 @@ public void generateUpdateMessage() {
         TLRPC.TL_help_getAppChangelog req = new TLRPC.TL_help_getAppChangelog();
         req.app_version = BuildVars.BUILD_VERSION_STRING;
         try {
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
+            req.lang_code = LocaleController.getLocaleStringIso639();
             req.device_model = Build.MANUFACTURER + Build.MODEL;
             req.system_version = "SDK " + Build.VERSION.SDK_INT;
         } catch (Exception e) {
@@ -3937,7 +4202,7 @@ public void registerForPush(final String regid) {
         req.token = regid;
         req.app_sandbox = false;
         try {
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
+            req.lang_code = LocaleController.getLocaleStringIso639();
             if (req.lang_code.length() == 0) {
                 req.lang_code = "en";
             }
@@ -3966,25 +4231,23 @@ public void registerForPush(final String regid) {
             req.system_version = "SDK Unknown";
         }
 
-        if (req.app_version != null) {
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-                    if (response instanceof TLRPC.TL_boolTrue) {
-                        FileLog.e("tmessages", "registered for push");
-                        UserConfig.registeredForPush = true;
-                        UserConfig.pushString = regid;
-                        UserConfig.saveConfig(false);
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            registeringForPush = false;
-                        }
-                    });
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (response instanceof TLRPC.TL_boolTrue) {
+                    FileLog.e("tmessages", "registered for push");
+                    UserConfig.registeredForPush = true;
+                    UserConfig.pushString = regid;
+                    UserConfig.saveConfig(false);
                 }
-            });
-        }
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        registeringForPush = false;
+                    }
+                });
+            }
+        });
     }
 
     public void loadCurrentState() {
@@ -4252,8 +4515,7 @@ public void getChannelDifference(final int channelId, final int newDialogType) {
                     channelsPts.put(channelId, channelPts);
                 }
                 if (channelPts == 0 && newDialogType == 2) {
-                    channelPts = 1;
-                    limit = 1;
+                    return;
                 }
             }
             if (channelPts == 0) {
@@ -4269,7 +4531,7 @@ public void getChannelDifference(final int channelId, final int newDialogType) {
         FileLog.e("tmessages", "start getChannelDifference with pts = " + channelPts + " channelId = " + channelId);
         ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
-            public void run(TLObject response, TLRPC.TL_error error) {
+            public void run(TLObject response, final TLRPC.TL_error error) {
 
                 if (error == null) {
                     final TLRPC.updates_ChannelDifference res = (TLRPC.updates_ChannelDifference) response;
@@ -4301,6 +4563,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         }
                     }
 
+                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
@@ -4368,7 +4631,7 @@ public void run() {
                                                     value = MessagesStorage.getInstance().getChannelReadInboxMax(channelId);
                                                 }
 
-                                                MessageObject obj = new MessageObject(message, usersDict, dialog_id == lastCreatedDialogId);
+                                                MessageObject obj = new MessageObject(message, usersDict, createdDialogIds.contains(dialog_id));
                                                 if (channelFinal != null && channelFinal.left || value >= obj.getId()) {
                                                     obj.setIsRead();
                                                     obj.setContentIsRead();
@@ -4409,10 +4672,7 @@ public void run() {
                                                             }
                                                         });
                                                     }
-                                                    MessagesStorage.getInstance().startTransaction(false);
-                                                    MessagesStorage.getInstance().putMessages(res.new_messages, false, false, false, MediaController.getInstance().getAutodownloadMask());
-                                                    MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, false);
-                                                    MessagesStorage.getInstance().commitTransaction(false);
+                                                    MessagesStorage.getInstance().putMessages(res.new_messages, true, false, false, MediaController.getInstance().getAutodownloadMask());
                                                 }
                                             });
                                         }
@@ -4448,7 +4708,6 @@ public void run() {
                                                 message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
                                             }
                                         }
-                                        MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
                                         if (channelFinal != null && channelFinal.megagroup) {
                                             res.unread_important_count = Math.max(res.unread_count, res.unread_important_count);
                                             res.top_important_message = Math.max(res.top_important_message, res.top_message);
@@ -4471,20 +4730,32 @@ public void run() {
                         }
                     });
                 } else {
-                    if (error.text.equals("CHANNEL_PRIVATE")) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoCantLoad, channelId);
-                            }
-                        });
-                    }
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            checkChannelError(error.text, channelId);
+                        }
+                    });
                     gettingDifferenceChannels.remove(channelId);
                 }
             }
         });
     }
 
+    private void checkChannelError(String text, int channelId) {
+        switch (text) {
+            case "CHANNEL_PRIVATE":
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoCantLoad, channelId, 0);
+                break;
+            case "CHANNEL_PUBLIC_GROUP_NA":
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoCantLoad, channelId, 1);
+                break;
+            case "USER_BANNED_IN_CHANNEL":
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoCantLoad, channelId, 2);
+                break;
+        }
+    }
+
     public void getDifference() {
         getDifference(MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue, false);
     }
@@ -4556,6 +4827,7 @@ public void run() {
                     MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                         @Override
                         public void run() {
+                            MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, false);
                             if (!msgUpdates.isEmpty()) {
                                 final HashMap<Integer, long[]> corrected = new HashMap<>();
                                 for (TLRPC.TL_updateMessageID update : msgUpdates) {
@@ -4625,7 +4897,7 @@ public void run() {
                                                 }
                                             }
 
-                                            MessageObject obj = new MessageObject(message, usersDict, chatsDict, uid == lastCreatedDialogId);
+                                            MessageObject obj = new MessageObject(message, usersDict, chatsDict, createdDialogIds.contains(uid));
 
                                             if (!obj.isOut() && obj.isUnread()) {
                                                 pushMessages.add(obj);
@@ -4661,10 +4933,7 @@ public void run() {
                                                         }
                                                     });
                                                 }
-                                                MessagesStorage.getInstance().startTransaction(false);
-                                                MessagesStorage.getInstance().putMessages(res.new_messages, false, false, false, MediaController.getInstance().getAutodownloadMask());
-                                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, false);
-                                                MessagesStorage.getInstance().commitTransaction(false);
+                                                MessagesStorage.getInstance().putMessages(res.new_messages, true, false, false, MediaController.getInstance().getAutodownloadMask());
                                             }
                                         });
 
@@ -4699,8 +4968,7 @@ public void run() {
                                         }
                                     }
                                     MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-                                    FileLog.e("tmessages", "received difference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
-                                    FileLog.e("tmessages", "messages = " + res.new_messages.size() + " users = " + res.users.size() + " chats = " + res.chats.size() + " other updates = " + res.other_updates.size());
+                                    FileLog.e("tmessages", "received difference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue + " messages = " + res.new_messages.size() + " users = " + res.users.size() + " chats = " + res.chats.size() + " other updates = " + res.other_updates.size());
                                 }
                             });
                         }
@@ -4715,7 +4983,7 @@ public void run() {
 
     public void generateJoinMessage(final int chat_id, boolean ignoreLeft) {
         TLRPC.Chat chat = getChat(chat_id);
-        if (chat == null || !ChatObject.isChannel(chat_id) || chat.megagroup || (chat.left || chat.kicked) && !ignoreLeft) {
+        if (chat == null || !ChatObject.isChannel(chat_id) || (chat.left || chat.kicked) && !ignoreLeft) {
             return;
         }
 
@@ -4723,12 +4991,16 @@ public void generateJoinMessage(final int chat_id, boolean ignoreLeft) {
         message.flags = TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
         message.local_id = message.id = UserConfig.getNewMessageId();
         message.date = ConnectionsManager.getInstance().getCurrentTime();
-        message.from_id = -chat_id;
+        message.from_id = UserConfig.getClientUserId();
         message.to_id = new TLRPC.TL_peerChannel();
         message.to_id.channel_id = chat_id;
         message.dialog_id = -chat_id;
+        message.post = true;
         message.action = new TLRPC.TL_messageActionChatAddUser();
         message.action.users.add(UserConfig.getClientUserId());
+        if (chat.megagroup) {
+            message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
+        }
         UserConfig.saveConfig(false);
 
         final ArrayList<MessageObject> pushMessages = new ArrayList<>();
@@ -4795,19 +5067,15 @@ public void run() {
                             message.media_unread = true;
                             message.unread = true;
                             message.flags = TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
+                            message.post = true;
                             if (chat.megagroup) {
                                 message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
                             }
                             message.local_id = message.id = UserConfig.getNewMessageId();
                             message.date = res.participant.date;
                             message.action = new TLRPC.TL_messageActionChatAddUser();
-                            if (chat.megagroup) {
-                                message.from_id = res.participant.inviter_id;
-                                message.action.users.add(UserConfig.getClientUserId());
-                            } else {
-                                message.from_id = -chat_id;
-                                message.action.users.add(res.participant.inviter_id);
-                            }
+                            message.from_id = res.participant.inviter_id;
+                            message.action.users.add(UserConfig.getClientUserId());
                             message.to_id = new TLRPC.TL_peerChannel();
                             message.to_id.channel_id = chat_id;
                             message.dialog_id = -chat_id;
@@ -4855,7 +5123,8 @@ public void run() {
 
     private int getUpdateType(TLRPC.Update update) {
         if (update instanceof TLRPC.TL_updateNewMessage || update instanceof TLRPC.TL_updateReadMessagesContents || update instanceof TLRPC.TL_updateReadHistoryInbox ||
-                update instanceof TLRPC.TL_updateReadHistoryOutbox || update instanceof TLRPC.TL_updateDeleteMessages || update instanceof TLRPC.TL_updateWebPage) {
+                update instanceof TLRPC.TL_updateReadHistoryOutbox || update instanceof TLRPC.TL_updateDeleteMessages || update instanceof TLRPC.TL_updateWebPage ||
+                update instanceof TLRPC.TL_updateEditMessage) {
             return 0;
         } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
             return 1;
@@ -4882,8 +5151,11 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
             TLRPC.User user3 = null;
             TLRPC.Chat channel = null;
 
-            if (user == null) {
+            if (user == null || user.min) { //TODO
                 user = MessagesStorage.getInstance().getUserSync(user_id);
+                if (user != null && user.min) {
+                    user = null;
+                }
                 putUser(user, true);
             }
 
@@ -4968,7 +5240,7 @@ public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
                     message.reply_to_msg_id = updates.reply_to_msg_id;
                     message.media = new TLRPC.TL_messageMediaEmpty();
                     MessagesStorage.lastPtsValue = updates.pts;
-                    final MessageObject obj = new MessageObject(message, null, message.dialog_id == lastCreatedDialogId);
+                    final MessageObject obj = new MessageObject(message, null, createdDialogIds.contains(message.dialog_id));
                     final ArrayList<MessageObject> objArr = new ArrayList<>();
                     objArr.add(obj);
                     ArrayList<TLRPC.Message> arr = new ArrayList<>();
@@ -5034,198 +5306,233 @@ public void run() {
                 }
             }
         } else if (updates instanceof TLRPC.TL_updatesCombined || updates instanceof TLRPC.TL_updates) {
-            MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
-            Collections.sort(updates.updates, new Comparator<TLRPC.Update>() {
-                @Override
-                public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
-                    int ltype = getUpdateType(lhs);
-                    int rtype = getUpdateType(rhs);
-                    if (ltype != rtype) {
-                        return AndroidUtilities.compare(ltype, rtype);
-                    } else if (ltype == 0) {
-                        return AndroidUtilities.compare(lhs.pts, rhs.pts);
-                    } else if (ltype == 1) {
-                        return AndroidUtilities.compare(lhs.qts, rhs.qts);
-                    }
-                    return 0;
-                }
-            });
-            for (int a = 0; a < updates.updates.size(); a++) {
-                TLRPC.Update update = updates.updates.get(a);
-                if (getUpdateType(update) == 0) {
-                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
-                    updatesNew.updates.add(update);
-                    updatesNew.pts = update.pts;
-                    updatesNew.pts_count = update.pts_count;
-                    for (int b = a + 1; b < updates.updates.size(); b++) {
-                        TLRPC.Update update2 = updates.updates.get(b);
-                        if (getUpdateType(update2) == 0 && updatesNew.pts + update2.pts_count == update2.pts) {
-                            updatesNew.updates.add(update2);
-                            updatesNew.pts = update2.pts;
-                            updatesNew.pts_count += update2.pts_count;
-                            updates.updates.remove(b);
-                            b--;
-                        } else {
-                            break;
+            HashMap<Integer, TLRPC.Chat> minChannels = null;
+            for (int a = 0; a < updates.chats.size(); a++) {
+                TLRPC.Chat chat = updates.chats.get(a);
+                if (chat instanceof TLRPC.TL_channel && chat.min) {
+                    TLRPC.Chat existChat = getChat(chat.id);
+                    if (existChat == null || existChat.min) {
+                        TLRPC.Chat cacheChat = MessagesStorage.getInstance().getChatSync(updates.chat_id);
+                        if (existChat == null) {
+                            putChat(cacheChat, true);
                         }
+                        existChat = cacheChat;
                     }
-                    if (MessagesStorage.lastPtsValue + updatesNew.pts_count == updatesNew.pts) {
-                        if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
-                            FileLog.e("tmessages", "need get diff inner TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                            needGetDiff = true;
-                        } else {
-                            MessagesStorage.lastPtsValue = updatesNew.pts;
+                    if (existChat == null || existChat.min) {
+                        if (minChannels == null) {
+                            minChannels = new HashMap<>();
                         }
-                    } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
-                        FileLog.e("tmessages", update + " need get diff, pts: " + MessagesStorage.lastPtsValue + " " + updatesNew.pts + " count = " + updatesNew.pts_count);
-                        if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && Math.abs(System.currentTimeMillis() - updatesStartWaitTimePts) <= 1500) {
-                            if (updatesStartWaitTimePts == 0) {
-                                updatesStartWaitTimePts = System.currentTimeMillis();
-                            }
-                            FileLog.e("tmessages", "add to queue");
-                            updatesQueuePts.add(updatesNew);
-                        } else {
+                        minChannels.put(chat.id, chat);
+                    }
+                }
+            }
+            if (minChannels != null) {
+                for (int a = 0; a < updates.updates.size(); a++) {
+                    TLRPC.Update update = updates.updates.get(a);
+                    if (update instanceof TLRPC.TL_updateNewChannelMessage) {
+                        int channelId = ((TLRPC.TL_updateNewChannelMessage) update).message.to_id.channel_id;
+                        if (minChannels.containsKey(channelId)) {
+                            FileLog.e("tmessages", "need get diff because of min channel " + channelId);
                             needGetDiff = true;
+                            break;
                         }
                     }
-                } else if (getUpdateType(update) == 1) {
-                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
-                    updatesNew.updates.add(update);
-                    updatesNew.pts = update.qts;
-                    for (int b = a + 1; b < updates.updates.size(); b++) {
-                        TLRPC.Update update2 = updates.updates.get(b);
-                        if (getUpdateType(update2) == 1 && updatesNew.pts + 1 == update2.qts) {
-                            updatesNew.updates.add(update2);
-                            updatesNew.pts = update2.qts;
-                            updates.updates.remove(b);
-                            b--;
-                        } else {
-                            break;
+                }
+            }
+            if (!needGetDiff) {
+                MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
+                Collections.sort(updates.updates, new Comparator<TLRPC.Update>() {
+                    @Override
+                    public int compare(TLRPC.Update lhs, TLRPC.Update rhs) {
+                        int ltype = getUpdateType(lhs);
+                        int rtype = getUpdateType(rhs);
+                        if (ltype != rtype) {
+                            return AndroidUtilities.compare(ltype, rtype);
+                        } else if (ltype == 0 || ltype == 2) {
+                            return AndroidUtilities.compare(lhs.pts, rhs.pts);
+                        } else if (ltype == 1) {
+                            return AndroidUtilities.compare(lhs.qts, rhs.qts);
                         }
+                        return 0;
                     }
-                    if (MessagesStorage.lastQtsValue == 0 || MessagesStorage.lastQtsValue + updatesNew.updates.size() == updatesNew.pts) {
-                        processUpdateArray(updatesNew.updates, updates.users, updates.chats);
-                        MessagesStorage.lastQtsValue = updatesNew.pts;
-                        needReceivedQueue = true;
-                    } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
-                        FileLog.e("tmessages", update + " need get diff, qts: " + MessagesStorage.lastQtsValue + " " + updatesNew.pts);
-                        if (gettingDifference || updatesStartWaitTimeQts == 0 || updatesStartWaitTimeQts != 0 && Math.abs(System.currentTimeMillis() - updatesStartWaitTimeQts) <= 1500) {
-                            if (updatesStartWaitTimeQts == 0) {
-                                updatesStartWaitTimeQts = System.currentTimeMillis();
+                });
+                for (int a = 0; a < updates.updates.size(); a++) {
+                    TLRPC.Update update = updates.updates.get(a);
+                    if (getUpdateType(update) == 0) {
+                        TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
+                        updatesNew.updates.add(update);
+                        updatesNew.pts = update.pts;
+                        updatesNew.pts_count = update.pts_count;
+                        for (int b = a + 1; b < updates.updates.size(); b++) {
+                            TLRPC.Update update2 = updates.updates.get(b);
+                            if (getUpdateType(update2) == 0 && updatesNew.pts + update2.pts_count == update2.pts) {
+                                updatesNew.updates.add(update2);
+                                updatesNew.pts = update2.pts;
+                                updatesNew.pts_count += update2.pts_count;
+                                updates.updates.remove(b);
+                                b--;
+                            } else {
+                                break;
                             }
-                            FileLog.e("tmessages", "add to queue");
-                            updatesQueueQts.add(updatesNew);
-                        } else {
-                            needGetDiff = true;
                         }
-                    }
-                } else if (getUpdateType(update) == 2) {
-                    int channelId;
-                    if (update instanceof TLRPC.TL_updateNewChannelMessage) {
-                        channelId = ((TLRPC.TL_updateNewChannelMessage) update).message.to_id.channel_id;
-                    } else if (update instanceof TLRPC.TL_updateEditChannelMessage) {
-                        channelId = ((TLRPC.TL_updateEditChannelMessage) update).message.to_id.channel_id;
-                    } else {
-                        channelId = update.channel_id;
-                    }
-                    Integer channelPts = channelsPts.get(channelId);
-                    if (channelPts == null) {
-                        channelPts = MessagesStorage.getInstance().getChannelPtsSync(channelId);
-                        if (channelPts == 0) {
-                            channelPts = update.pts - update.pts_count;
-                        }
-                        channelsPts.put(channelId, channelPts);
-                    }
-                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
-                    updatesNew.updates.add(update);
-                    updatesNew.pts = update.pts;
-                    updatesNew.pts_count = update.pts_count;
-                    for (int b = a + 1; b < updates.updates.size(); b++) {
-                        TLRPC.Update update2 = updates.updates.get(b);
-                        if (getUpdateType(update2) == 2 && updatesNew.pts + update2.pts_count == update2.pts) {
-                            updatesNew.updates.add(update2);
-                            updatesNew.pts = update2.pts;
-                            updatesNew.pts_count += update2.pts_count;
-                            updates.updates.remove(b);
-                            b--;
-                        } else {
-                            break;
+                        if (MessagesStorage.lastPtsValue + updatesNew.pts_count == updatesNew.pts) {
+                            if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
+                                FileLog.e("tmessages", "need get diff inner TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
+                                needGetDiff = true;
+                            } else {
+                                MessagesStorage.lastPtsValue = updatesNew.pts;
+                            }
+                        } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
+                            FileLog.e("tmessages", update + " need get diff, pts: " + MessagesStorage.lastPtsValue + " " + updatesNew.pts + " count = " + updatesNew.pts_count);
+                            if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && Math.abs(System.currentTimeMillis() - updatesStartWaitTimePts) <= 1500) {
+                                if (updatesStartWaitTimePts == 0) {
+                                    updatesStartWaitTimePts = System.currentTimeMillis();
+                                }
+                                FileLog.e("tmessages", "add to queue");
+                                updatesQueuePts.add(updatesNew);
+                            } else {
+                                needGetDiff = true;
+                            }
                         }
-                    }
-                    if (channelPts + updatesNew.pts_count == updatesNew.pts) {
-                        if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
-                            FileLog.e("tmessages", "need get channel diff inner TL_updates, channel_id = " + channelId);
-                            if (needGetChannelsDiff == null) {
-                                needGetChannelsDiff = new ArrayList<>();
-                            } else if (!needGetChannelsDiff.contains(channelId)) {
-                                needGetChannelsDiff.add(channelId);
+                    } else if (getUpdateType(update) == 1) {
+                        TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
+                        updatesNew.updates.add(update);
+                        updatesNew.pts = update.qts;
+                        for (int b = a + 1; b < updates.updates.size(); b++) {
+                            TLRPC.Update update2 = updates.updates.get(b);
+                            if (getUpdateType(update2) == 1 && updatesNew.pts + 1 == update2.qts) {
+                                updatesNew.updates.add(update2);
+                                updatesNew.pts = update2.qts;
+                                updates.updates.remove(b);
+                                b--;
+                            } else {
+                                break;
+                            }
+                        }
+                        if (MessagesStorage.lastQtsValue == 0 || MessagesStorage.lastQtsValue + updatesNew.updates.size() == updatesNew.pts) {
+                            processUpdateArray(updatesNew.updates, updates.users, updates.chats);
+                            MessagesStorage.lastQtsValue = updatesNew.pts;
+                            needReceivedQueue = true;
+                        } else if (MessagesStorage.lastPtsValue != updatesNew.pts) {
+                            FileLog.e("tmessages", update + " need get diff, qts: " + MessagesStorage.lastQtsValue + " " + updatesNew.pts);
+                            if (gettingDifference || updatesStartWaitTimeQts == 0 || updatesStartWaitTimeQts != 0 && Math.abs(System.currentTimeMillis() - updatesStartWaitTimeQts) <= 1500) {
+                                if (updatesStartWaitTimeQts == 0) {
+                                    updatesStartWaitTimeQts = System.currentTimeMillis();
+                                }
+                                FileLog.e("tmessages", "add to queue");
+                                updatesQueueQts.add(updatesNew);
+                            } else {
+                                needGetDiff = true;
                             }
+                        }
+                    } else if (getUpdateType(update) == 2) {
+                        int channelId;
+                        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
+                            channelId = ((TLRPC.TL_updateNewChannelMessage) update).message.to_id.channel_id;
+                        } else if (update instanceof TLRPC.TL_updateEditChannelMessage) {
+                            channelId = ((TLRPC.TL_updateEditChannelMessage) update).message.to_id.channel_id;
                         } else {
-                            channelsPts.put(channelId, updatesNew.pts);
-                            MessagesStorage.getInstance().saveChannelPts(channelId, updatesNew.pts);
-                        }
-                    } else if (channelPts != updatesNew.pts) {
-                        FileLog.e("tmessages", update + " need get channel diff, pts: " + channelPts + " " + updatesNew.pts + " count = " + updatesNew.pts_count + " channelId = " + channelId);
-                        Long updatesStartWaitTime = updatesStartWaitTimeChannels.get(channelId);
-                        Boolean gettingDifferenceChannel = gettingDifferenceChannels.get(channelId);
-                        if (gettingDifferenceChannel == null) {
-                            gettingDifferenceChannel = false;
-                        }
-                        if (gettingDifferenceChannel || updatesStartWaitTime == null || Math.abs(System.currentTimeMillis() - updatesStartWaitTime) <= 1500) {
-                            if (updatesStartWaitTime == null) {
-                                updatesStartWaitTimeChannels.put(channelId, System.currentTimeMillis());
+                            channelId = update.channel_id;
+                        }
+                        Integer channelPts = channelsPts.get(channelId);
+                        if (channelPts == null) {
+                            channelPts = MessagesStorage.getInstance().getChannelPtsSync(channelId);
+                            if (channelPts == 0) {
+                                channelPts = update.pts - update.pts_count;
                             }
-                            FileLog.e("tmessages", "add to queue");
-                            ArrayList<TLRPC.Updates> arrayList = updatesQueueChannels.get(channelId);
-                            if (arrayList == null) {
-                                arrayList = new ArrayList<>();
-                                updatesQueueChannels.put(channelId, arrayList);
+                            channelsPts.put(channelId, channelPts);
+                        }
+                        TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
+                        updatesNew.updates.add(update);
+                        updatesNew.pts = update.pts;
+                        updatesNew.pts_count = update.pts_count;
+                        for (int b = a + 1; b < updates.updates.size(); b++) {
+                            TLRPC.Update update2 = updates.updates.get(b);
+                            if (getUpdateType(update2) == 2 && updatesNew.pts + update2.pts_count == update2.pts) {
+                                updatesNew.updates.add(update2);
+                                updatesNew.pts = update2.pts;
+                                updatesNew.pts_count += update2.pts_count;
+                                updates.updates.remove(b);
+                                b--;
+                            } else {
+                                break;
                             }
-                            arrayList.add(updatesNew);
-                        } else {
-                            if (needGetChannelsDiff == null) {
-                                needGetChannelsDiff = new ArrayList<>();
-                            } else if (!needGetChannelsDiff.contains(channelId)) {
-                                needGetChannelsDiff.add(channelId);
+                        }
+                        if (channelPts + updatesNew.pts_count == updatesNew.pts) {
+                            if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
+                                FileLog.e("tmessages", "need get channel diff inner TL_updates, channel_id = " + channelId);
+                                if (needGetChannelsDiff == null) {
+                                    needGetChannelsDiff = new ArrayList<>();
+                                } else if (!needGetChannelsDiff.contains(channelId)) {
+                                    needGetChannelsDiff.add(channelId);
+                                }
+                            } else {
+                                channelsPts.put(channelId, updatesNew.pts);
+                                MessagesStorage.getInstance().saveChannelPts(channelId, updatesNew.pts);
+                            }
+                        } else if (channelPts != updatesNew.pts) {
+                            FileLog.e("tmessages", update + " need get channel diff, pts: " + channelPts + " " + updatesNew.pts + " count = " + updatesNew.pts_count + " channelId = " + channelId);
+                            Long updatesStartWaitTime = updatesStartWaitTimeChannels.get(channelId);
+                            Boolean gettingDifferenceChannel = gettingDifferenceChannels.get(channelId);
+                            if (gettingDifferenceChannel == null) {
+                                gettingDifferenceChannel = false;
+                            }
+                            if (gettingDifferenceChannel || updatesStartWaitTime == null || Math.abs(System.currentTimeMillis() - updatesStartWaitTime) <= 1500) {
+                                if (updatesStartWaitTime == null) {
+                                    updatesStartWaitTimeChannels.put(channelId, System.currentTimeMillis());
+                                }
+                                FileLog.e("tmessages", "add to queue");
+                                ArrayList<TLRPC.Updates> arrayList = updatesQueueChannels.get(channelId);
+                                if (arrayList == null) {
+                                    arrayList = new ArrayList<>();
+                                    updatesQueueChannels.put(channelId, arrayList);
+                                }
+                                arrayList.add(updatesNew);
+                            } else {
+                                if (needGetChannelsDiff == null) {
+                                    needGetChannelsDiff = new ArrayList<>();
+                                } else if (!needGetChannelsDiff.contains(channelId)) {
+                                    needGetChannelsDiff.add(channelId);
+                                }
                             }
                         }
+                    } else {
+                        break;
                     }
-                } else {
-                    break;
+                    updates.updates.remove(a);
+                    a--;
                 }
-                updates.updates.remove(a);
-                a--;
-            }
 
-            boolean processUpdate;
-            if (updates instanceof TLRPC.TL_updatesCombined) {
-                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start;
-            } else {
-                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue;
-            }
-            if (processUpdate) {
-                processUpdateArray(updates.updates, updates.users, updates.chats);
-                if (updates.date != 0) {
-                    MessagesStorage.lastDateValue = updates.date;
-                }
-                if (updates.seq != 0) {
-                    MessagesStorage.lastSeqValue = updates.seq;
-                }
-            } else {
+                boolean processUpdate;
                 if (updates instanceof TLRPC.TL_updatesCombined) {
-                    FileLog.e("tmessages", "need get diff TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq_start);
+                    processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start;
                 } else {
-                    FileLog.e("tmessages", "need get diff TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
+                    processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue;
                 }
-
-                if (gettingDifference || updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - updatesStartWaitTimeSeq) <= 1500) {
-                    if (updatesStartWaitTimeSeq == 0) {
-                        updatesStartWaitTimeSeq = System.currentTimeMillis();
+                if (processUpdate) {
+                    processUpdateArray(updates.updates, updates.users, updates.chats);
+                    if (updates.date != 0) {
+                        MessagesStorage.lastDateValue = updates.date;
+                    }
+                    if (updates.seq != 0) {
+                        MessagesStorage.lastSeqValue = updates.seq;
                     }
-                    FileLog.e("tmessages", "add TL_updates/Combined to queue");
-                    updatesQueueSeq.add(updates);
                 } else {
-                    needGetDiff = true;
+                    if (updates instanceof TLRPC.TL_updatesCombined) {
+                        FileLog.e("tmessages", "need get diff TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq_start);
+                    } else {
+                        FileLog.e("tmessages", "need get diff TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
+                    }
+
+                    if (gettingDifference || updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - updatesStartWaitTimeSeq) <= 1500) {
+                        if (updatesStartWaitTimeSeq == 0) {
+                            updatesStartWaitTimeSeq = System.currentTimeMillis();
+                        }
+                        FileLog.e("tmessages", "add TL_updates/Combined to queue");
+                        updatesQueueSeq.add(updates);
+                    } else {
+                        needGetDiff = true;
+                    }
                 }
             }
         } else if (updates instanceof TLRPC.TL_updatesTooLong) {
@@ -5319,7 +5626,8 @@ public void run() {
         ConcurrentHashMap<Integer, TLRPC.Chat> chatsDict;
         if (usersArr != null) {
             usersDict = new ConcurrentHashMap<>();
-            for (TLRPC.User user : usersArr) {
+            for (int a = 0; a < usersArr.size(); a++) {
+                TLRPC.User user = usersArr.get(a);
                 usersDict.put(user.id, user);
             }
         } else {
@@ -5328,7 +5636,8 @@ public void run() {
         }
         if (chatsArr != null) {
             chatsDict = new ConcurrentHashMap<>();
-            for (TLRPC.Chat chat : chatsArr) {
+            for (int a = 0; a < chatsArr.size(); a++) {
+                TLRPC.Chat chat = chatsArr.get(a);
                 chatsDict.put(chat.id, chat);
             }
         } else {
@@ -5356,19 +5665,30 @@ public void run() {
                     message = ((TLRPC.TL_updateNewMessage) update).message;
                 } else {
                     message = ((TLRPC.TL_updateNewChannelMessage) update).message;
+                    if (!message.out && message.from_id == UserConfig.getClientUserId()) { //TODO remove later
+                        message.out = true;
+                    }
                 }
+                TLRPC.Chat chat = null;
                 if (checkForUsers) {
                     int chat_id = 0;
+                    int user_id = 0;
                     if (message.to_id.channel_id != 0) {
                         chat_id = message.to_id.channel_id;
                     } else if (message.to_id.chat_id != 0) {
                         chat_id = message.to_id.chat_id;
+                    } else if (message.to_id.user_id != 0) {
+                        user_id = message.to_id.user_id;
                     }
                     if (chat_id != 0) {
-                        TLRPC.Chat chat = chatsDict.get(chat_id);
+                        chat = chatsDict.get(chat_id);
                         if (chat == null) {
                             chat = getChat(chat_id);
                         }
+                        if (chat == null) {
+                            chat = MessagesStorage.getInstance().getChatSync(chat_id);
+                            putChat(chat, true);
+                        }
                         if (chat == null) {
                             return false;
                         }
@@ -5376,14 +5696,30 @@ public void run() {
                             message.flags |= TLRPC.MESSAGE_FLAG_MEGAGROUP;
                         }
                     }
-                    if (message.from_id > 0) {
-                        TLRPC.User user = getUser(message.from_id);
-                        if (usersDict.get(message.from_id) == null && user == null) {
-                            return false;
+
+                    for (int a = 0; a < 3; a++) {
+                        if (a != 0) {
+                            user_id = a == 1 ? message.from_id : (message.fwd_from != null ? message.fwd_from.from_id : 0);
                         }
-                        if (user != null && user.status != null && user.status.expires <= 0) {
-                            onlinePrivacy.put(message.from_id, ConnectionsManager.getInstance().getCurrentTime());
-                            interfaceUpdateMask |= UPDATE_MASK_STATUS;
+                        if (user_id > 0) {
+                            TLRPC.User user = usersDict.get(user_id);
+                            if (user == null || user.min) {
+                                user = getUser(user_id);
+                            }
+                            if (user == null || user.min) {
+                                user = MessagesStorage.getInstance().getUserSync(user_id);
+                                if (user != null && user.min) {
+                                    user = null;
+                                }
+                                putUser(user, true);
+                            }
+                            if (user == null) {
+                                return false;
+                            }
+                            if (a == 1 && user.status != null && user.status.expires <= 0) {
+                                onlinePrivacy.put(user_id, ConnectionsManager.getInstance().getCurrentTime());
+                                interfaceUpdateMask |= UPDATE_MASK_STATUS;
+                            }
                         }
                     }
                 }
@@ -5411,7 +5747,7 @@ public void run() {
                     if (value == null) {
                         value = MessagesStorage.getInstance().getChannelReadInboxMax(update.channel_id);
                     }
-                    if (value >= message.id) {
+                    if (value >= message.id || ChatObject.isNotInChat(chat)) {
                         message.unread = false;
                         message.media_unread = false;
                     }
@@ -5428,7 +5764,7 @@ public void run() {
                     }
                     message.dialog_id = message.to_id.user_id;
                 }
-                MessageObject obj = new MessageObject(message, usersDict, chatsDict, message.dialog_id == lastCreatedDialogId);
+                MessageObject obj = new MessageObject(message, usersDict, chatsDict, createdDialogIds.contains(message.dialog_id));
                 if (obj.type == 11) {
                     interfaceUpdateMask |= UPDATE_MASK_CHAT_AVATAR;
                 } else if (obj.type == 10) {
@@ -5549,7 +5885,7 @@ public void run() {
                     newMessage.dialog_id = update.user_id;
 
                     messagesArr.add(newMessage);
-                    MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, newMessage.dialog_id == lastCreatedDialogId);
+                    MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, createdDialogIds.contains(newMessage.dialog_id));
                     ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
                     if (arr == null) {
                         arr = new ArrayList<>();
@@ -5597,7 +5933,7 @@ public void run() {
                 newMessage.dialog_id = 777000;
 
                 messagesArr.add(newMessage);
-                MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, newMessage.dialog_id == lastCreatedDialogId);
+                MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, createdDialogIds.contains(newMessage.dialog_id));
                 ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
                 if (arr == null) {
                     arr = new ArrayList<>();
@@ -5621,7 +5957,7 @@ public void run() {
                         TLRPC.Message message = decryptedMessages.get(a);
                         ImageLoader.saveMessageThumbs(message);
                         messagesArr.add(message);
-                        MessageObject obj = new MessageObject(message, usersDict, chatsDict, uid == lastCreatedDialogId);
+                        MessageObject obj = new MessageObject(message, usersDict, chatsDict, createdDialogIds.contains(uid));
                         arr.add(obj);
                         pushMessages.add(obj);
                     }
@@ -5715,7 +6051,7 @@ public void run() {
                 newMessage.message = notification.message;
 
                 messagesArr.add(newMessage);
-                MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, newMessage.dialog_id == lastCreatedDialogId);
+                MessageObject obj = new MessageObject(newMessage, usersDict, chatsDict, createdDialogIds.contains(newMessage.dialog_id));
                 ArrayList<MessageObject> arr = messages.get(newMessage.dialog_id);
                 if (arr == null) {
                     arr = new ArrayList<>();
@@ -5728,7 +6064,21 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateWebPage) {
                 webPages.put(update.webpage.id, update.webpage);
             } else if (update instanceof TLRPC.TL_updateChannelTooLong) {
-                getChannelDifference(update.channel_id);
+                if ((update.flags & 1) != 0) {
+                    Integer channelPts = channelsPts.get(update.channel_id);
+                    if (channelPts == null) {
+                        channelPts = MessagesStorage.getInstance().getChannelPtsSync(update.channel_id);
+                        if (channelPts == 0) {
+                            channelPts = 1;
+                        }
+                        channelsPts.put(update.channel_id, channelPts);
+                    }
+                    if (update.pts > channelPts) {
+                        getChannelDifference(update.channel_id);
+                    }
+                } else {
+                    getChannelDifference(update.channel_id);
+                }
             } else if (update instanceof TLRPC.TL_updateChannelGroup) {
                 ArrayList<TLRPC.TL_messageGroup> arrayList = channelsGroups.get(update.channel_id);
                 if (arrayList == null) {
@@ -5757,12 +6107,13 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateChannel) {
                 updatesOnMainThread.add(update);
             } else if (update instanceof TLRPC.TL_updateChannelMessageViews) {
+                TLRPC.TL_updateChannelMessageViews updateChannelMessageViews = (TLRPC.TL_updateChannelMessageViews) update;
                 SparseIntArray array = channelViews.get(update.channel_id);
                 if (array == null) {
                     array = new SparseIntArray();
                     channelViews.put(update.channel_id, array);
                 }
-                array.put(update.id, update.views);
+                array.put(updateChannelMessageViews.id, update.views);
             } else if (update instanceof TLRPC.TL_updateChatParticipantAdmin) {
                 MessagesStorage.getInstance().updateChatInfo(update.chat_id, update.user_id, 2, update.is_admin ? 1 : 0, update.version);
             } else if (update instanceof TLRPC.TL_updateChatAdmins) {
@@ -5775,8 +6126,13 @@ public void run() {
                 updatesOnMainThread.add(update);
             } else if (update instanceof TLRPC.TL_updateSavedGifs) {
                 updatesOnMainThread.add(update);
-            } else if (update instanceof TLRPC.TL_updateEditChannelMessage) {
-                TLRPC.Message message = ((TLRPC.TL_updateEditChannelMessage) update).message;
+            } else if (update instanceof TLRPC.TL_updateEditChannelMessage || update instanceof TLRPC.TL_updateEditMessage) {
+                TLRPC.Message message;
+                if (update instanceof TLRPC.TL_updateEditChannelMessage) {
+                    message = ((TLRPC.TL_updateEditChannelMessage) update).message;
+                } else {
+                    message = ((TLRPC.TL_updateEditMessage) update).message;
+                }
                 if (message.to_id.channel_id != 0 && !message.out) {
                     message.unread = true;
                     if (message.post || (message.flags & TLRPC.MESSAGE_FLAG_MEGAGROUP) != 0) {
@@ -5784,14 +6140,16 @@ public void run() {
                     }
                 }
 
-                long dialog_id = -update.channel_id;
-                Integer value = dialogs_read_inbox_max.get(dialog_id);
-                if (value == null) {
-                    value = MessagesStorage.getInstance().getChannelReadInboxMax(update.channel_id);
-                }
-                if (value >= message.id) {
-                    message.unread = false;
-                    message.media_unread = false;
+                if (update instanceof TLRPC.TL_updateEditChannelMessage) {
+                    long dialog_id = -update.channel_id;
+                    Integer value = dialogs_read_inbox_max.get(dialog_id);
+                    if (value == null) {
+                        value = MessagesStorage.getInstance().getChannelReadInboxMax(update.channel_id);
+                    }
+                    if (value >= message.id) {
+                        message.unread = false;
+                        message.media_unread = false;
+                    } //TODO unread for updateEditMessage?
                 }
 
                 ImageLoader.saveMessageThumbs(message);
@@ -5806,7 +6164,7 @@ public void run() {
                     }
                     message.dialog_id = message.to_id.user_id;
                 }
-                MessageObject obj = new MessageObject(message, usersDict, chatsDict, message.dialog_id == lastCreatedDialogId);
+                MessageObject obj = new MessageObject(message, usersDict, chatsDict, createdDialogIds.contains(message.dialog_id));
 
                 ArrayList<MessageObject> arr = editingMessages.get(message.dialog_id);
                 if (arr == null) {
@@ -5814,6 +6172,9 @@ public void run() {
                     editingMessages.put(message.dialog_id, arr);
                 }
                 arr.add(obj);
+            } else if (update instanceof TLRPC.TL_updateChannelPinnedMessage) {
+                TLRPC.TL_updateChannelPinnedMessage updateChannelPinnedMessage = (TLRPC.TL_updateChannelPinnedMessage) update;
+                MessagesStorage.getInstance().updateChannelPinnedMessage(update.channel_id, updateChannelPinnedMessage.id);
             }
         }
         if (!messages.isEmpty()) {
@@ -5869,7 +6230,7 @@ public void run() {
             MessagesStorage.getInstance().putChannelViews(channelViews, true);
         }
         if (channelsGroups.size() != 0) {
-            //MessagesStorage.getInstance().applyNewChannelsGroups(channelsGroups); TODO
+            //MessagesStorage.getInstance().applyNewChannelsGroups(channelsGroups);
         }
 
         AndroidUtilities.runOnUIThread(new Runnable() {
@@ -6320,7 +6681,7 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
                 addNewGifToRecent(message.messageOwner.media.document, message.messageOwner.date);
             }
         }
-
+        MessagesQuery.loadReplyMessagesForMessages(messages, uid);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceivedNewMessages, uid, messages);
 
         if (lastMessage == null) {
@@ -6435,19 +6796,96 @@ public int compare(TLRPC.Dialog tl_dialog, TLRPC.Dialog tl_dialog2) {
         }
     }
 
-    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
-        if (username == null || fragment == null) {
+    private static String getRestrictionReason(String reason) {
+        if (reason == null || reason.length() == 0) {
+            return null;
+        }
+        int index = reason.indexOf(": ");
+        if (index > 0) {
+            String type = reason.substring(0, index);
+            if (type.contains("-all") || type.contains("-android")) {
+                return reason.substring(index + 2);
+            }
+        }
+        return null;
+    }
+
+    private static void showCantOpenAlert(BaseFragment fragment, String reason) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        builder.setMessage(reason);
+        fragment.showDialog(builder.create());
+    }
+
+    public static boolean checkCanOpenChat(Bundle bundle, BaseFragment fragment) {
+        if (bundle == null || fragment == null) {
+            return true;
+        }
+        TLRPC.User user = null;
+        TLRPC.Chat chat = null;
+        int user_id = bundle.getInt("user_id", 0);
+        int chat_id = bundle.getInt("chat_id", 0);
+        if (user_id != 0) {
+            user = MessagesController.getInstance().getUser(user_id);
+        } else if (chat_id != 0) {
+            chat = MessagesController.getInstance().getChat(chat_id);
+        }
+        if (user == null && chat == null) {
+            return true;
+        }
+        String reason = null;
+        if (chat != null) {
+            reason = getRestrictionReason(chat.restriction_reason);
+        } else if (user != null) {
+            reason = getRestrictionReason(user.restriction_reason);
+        }
+        if (reason != null) {
+            showCantOpenAlert(fragment, reason);
+            return false;
+        }
+        return true;
+    }
+
+    public static void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type) {
+        if (user == null && chat == null || fragment == null) {
             return;
         }
-        TLRPC.User user = MessagesController.getInstance().getUser(username);
-        if (user != null) {
+        String reason = null;
+        boolean closeLast = false;
+        if (chat != null) {
+            reason = getRestrictionReason(chat.restriction_reason);
+        } else if (user != null) {
+            reason = getRestrictionReason(user.restriction_reason);
+            if (user.bot) {
+                type = 1;
+                closeLast = true;
+            }
+        }
+        if (reason != null) {
+            showCantOpenAlert(fragment, reason);
+        } else {
             Bundle args = new Bundle();
-            args.putInt("user_id", user.id);
+            if (chat != null) {
+                args.putInt("chat_id", chat.id);
+            } else {
+                args.putInt("user_id", user.id);
+            }
             if (type == 0) {
                 fragment.presentFragment(new ProfileActivity(args));
             } else {
-                fragment.presentFragment(new ChatActivity(args));
+                fragment.presentFragment(new ChatActivity(args), closeLast);
             }
+        }
+    }
+
+    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
+        if (username == null || fragment == null) {
+            return;
+        }
+        TLRPC.User user = getInstance().getUser(username);
+        if (user != null) {
+            openChatOrProfileWith(user, null, fragment, type);
         } else {
             if (fragment.getParentActivity() == null) {
                 return;
@@ -6473,21 +6911,13 @@ public void run() {
                             fragment.setVisibleDialog(null);
                             if (error == null) {
                                 TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
+                                getInstance().putUsers(res.users, false);
+                                getInstance().putChats(res.chats, false);
                                 MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, true);
-                                Bundle args = new Bundle();
                                 if (!res.chats.isEmpty()) {
-                                    args.putInt("chat_id", res.chats.get(0).id);
-                                } else {
-                                    args.putInt("user_id", res.users.get(0).id);
-                                }
-                                if (fragment != null) {
-                                    if (type == 0 && res.chats.isEmpty()) {
-                                        fragment.presentFragment(new ProfileActivity(args));
-                                    } else {
-                                        fragment.presentFragment(new ChatActivity(args));
-                                    }
+                                    openChatOrProfileWith(null, res.chats.get(0), fragment, 1);
+                                } else if (!res.users.isEmpty()) {
+                                    openChatOrProfileWith(res.users.get(0), null, fragment, type);
                                 }
                             } else {
                                 if (fragment != null && fragment.getParentActivity() != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
index 15079dbb0..11ec02096 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesStorage.java
@@ -19,6 +19,7 @@
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
 import org.telegram.messenger.query.BotQuery;
+import org.telegram.messenger.query.MessagesQuery;
 import org.telegram.messenger.query.SharedMediaQuery;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
@@ -141,10 +142,16 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
                 database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
 
+                database.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
+                database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
+
+                database.executeFast("CREATE TABLE chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
+                database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
+
+                database.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
                 database.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB)").stepThis().dispose();
-                database.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                 database.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
                 database.executeFast("CREATE TABLE pending_read(uid INTEGER PRIMARY KEY, max_id INTEGER)").stepThis().dispose();
@@ -165,7 +172,7 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
 
                 //version
-                database.executeFast("PRAGMA user_version = 30").stepThis().dispose();
+                database.executeFast("PRAGMA user_version = 31").stepThis().dispose();
 
                 //database.executeFast("CREATE TABLE secret_holes(uid INTEGER, seq_in INTEGER, seq_out INTEGER, data BLOB, PRIMARY KEY (uid, seq_in, seq_out));").stepThis().dispose();
                 //database.executeFast("CREATE TABLE attach_data(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
@@ -199,7 +206,7 @@ public void openDatabase() {
                     }
                 }
                 int version = database.executeInt("PRAGMA user_version");
-                if (version < 30) {
+                if (version < 31) {
                     updateDbToLastVersion(version);
                 }
             }
@@ -416,7 +423,7 @@ public void run() {
                         while (cursor.next()) {
                             int chat_id = cursor.intValue(0);
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                            if (cursor.byteBufferValue(1, data) != 0) {
                                 TLRPC.ChatParticipants participants = TLRPC.ChatParticipants.TLdeserialize(data, data.readInt32(false), false);
                                 if (participants != null) {
                                     TLRPC.TL_chatFull chatFull = new TLRPC.TL_chatFull();
@@ -487,7 +494,16 @@ public void run() {
                         database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
                         database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
                         database.executeFast("PRAGMA user_version = 30").stepThis().dispose();
-                        //version = 30;
+                        version = 30;
+                    }
+                    if (version == 30) {
+                        database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
+                        database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
+                        database.executeFast("CREATE TABLE IF NOT EXISTS chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
+                        database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
+                        database.executeFast("CREATE TABLE IF NOT EXISTS users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 31").stepThis().dispose();
+                        //version = 31;
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -647,7 +663,7 @@ public void run() {
                         cursor = database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid FROM messages WHERE uid IN (" + ids.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50");
                         while (cursor.next()) {
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                            if (cursor.byteBufferValue(1, data) != 0) {
                                 TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                                 MessageObject.setUnreadFlags(message, cursor.intValue(0));
                                 message.id = cursor.intValue(3);
@@ -777,7 +793,7 @@ public void run() {
                         searchImage.date = cursor.intValue(7);
                         if (!cursor.isNull(8)) {
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(8));
-                            if (data != null && cursor.byteBufferValue(8, data) != 0) {
+                            if (cursor.byteBufferValue(8, data) != 0) {
                                 searchImage.document = TLRPC.Document.TLdeserialize(data, data.readInt32(false), false);
                             }
                             data.reuse();
@@ -921,7 +937,7 @@ public void run() {
                     final ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<>();
                     while (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             TLRPC.WallPaper wallPaper = TLRPC.WallPaper.TLdeserialize(data, data.readInt32(false), false);
                             wallPapers.add(wallPaper);
                         }
@@ -1012,22 +1028,22 @@ public void run() {
         });
     }
 
-    public void deleteDialog(final long did, final int messagesOnly) {
+    public void deleteUserChannelHistory(final int channelId, final int uid) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    if ((int) did == 0 || messagesOnly == 2) {
-                        SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
-                        ArrayList<File> filesToDelete = new ArrayList<>();
-                        try {
-                            while (cursor.next()) {
-                                NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                                if (data != null && cursor.byteBufferValue(0, data) != 0) {
-                                    TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                    if (message == null || message.media == null) {
-                                        continue;
-                                    }
+                    long did = -channelId;
+                    final ArrayList<Integer> mids = new ArrayList<>();
+                    SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
+                    ArrayList<File> filesToDelete = new ArrayList<>();
+                    try {
+                        while (cursor.next()) {
+                            NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                            if (cursor.byteBufferValue(0, data) != 0) {
+                                TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                                if (message != null && message.from_id == uid && message.id != 1) {
+                                    mids.add(message.id);
                                     if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
                                         for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
                                             File file = FileLoader.getPathToAttach(photoSize);
@@ -1046,6 +1062,70 @@ public void run() {
                                         }
                                     }
                                 }
+                            }
+                            data.reuse();
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    cursor.dispose();
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            MessagesController.getInstance().markChannelDialogMessageAsDeleted(mids, channelId);
+                        }
+                    });
+                    markMessagesAsDeletedInternal(mids, channelId);
+                    updateDialogsWithDeletedMessagesInternal(mids, channelId);
+                    FileLoader.getInstance().deleteFiles(filesToDelete, 0);
+                    if (!mids.isEmpty()) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, mids, channelId);
+                            }
+                        });
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    public void deleteDialog(final long did, final int messagesOnly) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    if ((int) did == 0 || messagesOnly == 2) {
+                        SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
+                        ArrayList<File> filesToDelete = new ArrayList<>();
+                        try {
+                            while (cursor.next()) {
+                                NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                                if (cursor.byteBufferValue(0, data) != 0) {
+                                    TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                                    if (message != null && message.media != null) {
+                                        if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                                            for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
+                                                File file = FileLoader.getPathToAttach(photoSize);
+                                                if (file != null && file.toString().length() > 0) {
+                                                    filesToDelete.add(file);
+                                                }
+                                            }
+                                        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                                            File file = FileLoader.getPathToAttach(message.media.document);
+                                            if (file != null && file.toString().length() > 0) {
+                                                filesToDelete.add(file);
+                                            }
+                                            file = FileLoader.getPathToAttach(message.media.document.thumb);
+                                            if (file != null && file.toString().length() > 0) {
+                                                filesToDelete.add(file);
+                                            }
+                                        }
+                                    }
+                                }
                                 data.reuse();
                             }
                         } catch (Exception e) {
@@ -1058,6 +1138,7 @@ public void run() {
                     if (messagesOnly == 0) {
                         database.executeFast("DELETE FROM dialogs WHERE did = " + did).stepThis().dispose();
                         database.executeFast("DELETE FROM chat_settings_v2 WHERE uid = " + did).stepThis().dispose();
+                        database.executeFast("DELETE FROM chat_pinned WHERE uid = " + did).stepThis().dispose();
                         database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + did).stepThis().dispose();
                         database.executeFast("DELETE FROM search_recent WHERE did = " + did).stepThis().dispose();
                         int lower_id = (int)did;
@@ -1082,12 +1163,11 @@ public void run() {
                             try {
                                 while (cursor2.next()) {
                                     NativeByteBuffer data = new NativeByteBuffer(cursor2.byteArrayLength(0));
-                                    if (data != null && cursor2.byteBufferValue(0, data) != 0) {
+                                    if (cursor2.byteBufferValue(0, data) != 0) {
                                         TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                        if (message == null) {
-                                            continue;
+                                        if (message != null) {
+                                            arrayList.add(message);
                                         }
-                                        arrayList.add(message);
                                     }
                                     data.reuse();
                                 }
@@ -1160,7 +1240,7 @@ public void run() {
 
                     while (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             TLRPC.Photo photo = TLRPC.Photo.TLdeserialize(data, data.readInt32(false), false);
                             res.photos.add(photo);
                         }
@@ -1429,13 +1509,14 @@ public void updateChatParticipants(final TLRPC.ChatParticipants participants) {
             @Override
             public void run() {
                 try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + participants.chat_id);
+                    SQLiteCursor cursor = database.queryFinalized("SELECT info, pinned FROM chat_settings_v2 WHERE uid = " + participants.chat_id);
                     TLRPC.ChatFull info = null;
                     ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
                     if (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             info = TLRPC.ChatFull.TLdeserialize(data, data.readInt32(false), false);
+                            info.pinned_msg_id = cursor.intValue(1);
                         }
                         data.reuse();
                     }
@@ -1446,15 +1527,16 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, 0, false);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, 0, false, null);
                             }
                         });
 
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                         NativeByteBuffer data = new NativeByteBuffer(info.getObjectSize());
                         info.serializeToStream(data);
                         state.bindInteger(1, info.id);
                         state.bindByteBuffer(2, data);
+                        state.bindInteger(3, info.pinned_msg_id);
                         state.step();
                         state.dispose();
                         data.reuse();
@@ -1516,11 +1598,12 @@ public void run() {
                             return;
                         }
                     }
-                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
+                    SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                     NativeByteBuffer data = new NativeByteBuffer(info.getObjectSize());
                     info.serializeToStream(data);
                     state.bindInteger(1, info.id);
                     state.bindByteBuffer(2, data);
+                    state.bindInteger(3, info.pinned_msg_id);
                     state.step();
                     state.dispose();
                     data.reuse();
@@ -1557,18 +1640,65 @@ public void run() {
         });
     }
 
+    public void updateChannelPinnedMessage(final int channelId, final int messageId) {
+        storageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    SQLiteCursor cursor = database.queryFinalized("SELECT info, pinned FROM chat_settings_v2 WHERE uid = " + channelId);
+                    TLRPC.ChatFull info = null;
+                    ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
+                    if (cursor.next()) {
+                        NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                        if (cursor.byteBufferValue(0, data) != 0) {
+                            info = TLRPC.ChatFull.TLdeserialize(data, data.readInt32(false), false);
+                            info.pinned_msg_id = cursor.intValue(1);
+                        }
+                        data.reuse();
+                    }
+                    cursor.dispose();
+                    if (info instanceof TLRPC.TL_channelFull) {
+                        info.pinned_msg_id = messageId;
+                        info.flags |= 32;
+
+                        final TLRPC.ChatFull finalInfo = info;
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, 0, false, null);
+                            }
+                        });
+
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
+                        NativeByteBuffer data = new NativeByteBuffer(info.getObjectSize());
+                        info.serializeToStream(data);
+                        state.bindInteger(1, channelId);
+                        state.bindByteBuffer(2, data);
+                        state.bindInteger(3, info.pinned_msg_id);
+                        state.step();
+                        state.dispose();
+                        data.reuse();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
     public void updateChatInfo(final int chat_id, final int user_id, final int what, final int invited_id, final int version) {
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + chat_id);
+                    SQLiteCursor cursor = database.queryFinalized("SELECT info, pinned FROM chat_settings_v2 WHERE uid = " + chat_id);
                     TLRPC.ChatFull info = null;
                     ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
                     if (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             info = TLRPC.ChatFull.TLdeserialize(data, data.readInt32(false), false);
+                            info.pinned_msg_id = cursor.intValue(1);
                         }
                         data.reuse();
                     }
@@ -1620,15 +1750,16 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, 0, false);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, 0, false, null);
                             }
                         });
 
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                         NativeByteBuffer data = new NativeByteBuffer(info.getObjectSize());
                         info.serializeToStream(data);
                         state.bindInteger(1, chat_id);
                         state.bindByteBuffer(2, data);
+                        state.bindInteger(3, info.pinned_msg_id);
                         state.step();
                         state.dispose();
                         data.reuse();
@@ -1652,7 +1783,7 @@ public void run() {
                     ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
                     if (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             info = TLRPC.ChatFull.TLdeserialize(data, data.readInt32(false), false);
                         }
                         data.reuse();
@@ -1683,14 +1814,16 @@ public void loadChatInfo(final int chat_id, final Semaphore semaphore, final boo
         storageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
+                MessageObject pinnedMessageObject = null;
+                TLRPC.ChatFull info = null;
+                ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
                 try {
-                    SQLiteCursor cursor = database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + chat_id);
-                    TLRPC.ChatFull info = null;
-                    ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
+                    SQLiteCursor cursor = database.queryFinalized("SELECT info, pinned FROM chat_settings_v2 WHERE uid = " + chat_id);
                     if (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             info = TLRPC.ChatFull.TLdeserialize(data, data.readInt32(false), false);
+                            info.pinned_msg_id = cursor.intValue(1);
                         }
                         data.reuse();
                     }
@@ -1715,7 +1848,7 @@ public void run() {
                             try {
                                 NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
                                 NativeByteBuffer data2 = new NativeByteBuffer(cursor.byteArrayLength(2));
-                                if (data != null && cursor.byteBufferValue(0, data) != 0 && data2 != null && cursor.byteBufferValue(2, data2) != 0) {
+                                if (cursor.byteBufferValue(0, data) != 0 && cursor.byteBufferValue(2, data2) != 0) {
                                     TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
                                     TLRPC.ChannelParticipant participant = TLRPC.ChannelParticipant.TLdeserialize(data2, data2.readInt32(false), false);
                                     if (user != null && participant != null) {
@@ -1754,10 +1887,13 @@ public void run() {
                     if (semaphore != null) {
                         semaphore.release();
                     }
-                    MessagesController.getInstance().processChatInfo(chat_id, info, loadedUsers, true, force, byChannelUsers);
+                    if (info instanceof TLRPC.TL_channelFull && info.pinned_msg_id != 0) {
+                        pinnedMessageObject = MessagesQuery.loadPinnedMessage(chat_id, info.pinned_msg_id, false);
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 } finally {
+                    MessagesController.getInstance().processChatInfo(chat_id, info, loadedUsers, true, force, byChannelUsers, pinnedMessageObject);
                     if (semaphore != null) {
                         semaphore.release();
                     }
@@ -2025,7 +2161,7 @@ public void run() {
                     SQLiteCursor cursor = database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.mid < 0 AND m.send_state = 1 ORDER BY m.mid DESC LIMIT " + count);
                     while (cursor.next()) {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                        if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                        if (cursor.byteBufferValue(1, data) != 0) {
                             TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                             if (!messageHashMap.containsKey(message.id)) {
                                 MessageObject.setUnreadFlags(message, cursor.intValue(0));
@@ -2169,6 +2305,7 @@ public void run() {
                     messageMaxId |= ((long) channelId) << 32;
                 }
                 boolean isEnd = false;
+                int num = dialog_id == 777000 ? 4 : 1;
                 try {
                     ArrayList<Integer> usersToLoad = new ArrayList<>();
                     ArrayList<Integer> chatsToLoad = new ArrayList<>();
@@ -2209,12 +2346,26 @@ public void run() {
                                         }
                                         cursor.dispose();
                                     }
+                                } else if (max_id_query == 0) {
+                                    int existingUnreadCount = 0;
+                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid > 0 " + imp + "AND out = 0 AND read_state IN(0,2)", dialog_id));
+                                    if (cursor.next()) {
+                                        existingUnreadCount = cursor.intValue(0);
+                                    }
+                                    cursor.dispose();
+                                    if (existingUnreadCount == count_unread) {
+                                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0" + imp, dialog_id));
+                                        if (cursor.next()) {
+                                            messageMaxId = max_id_query = min_unread_id = cursor.intValue(0);
+                                        }
+                                        cursor.dispose();
+                                    }
                                 }
                             }
 
-                            if (count_query > count_unread || count_unread < 4) {
+                            if (count_query > count_unread || count_unread < num) {
                                 count_query = Math.max(count_query, count_unread + 10);
-                                if (count_unread < 4) {
+                                if (count_unread < num) {
                                     count_unread = 0;
                                     min_unread_id = 0;
                                     messageMaxId = 0;
@@ -2256,12 +2407,14 @@ public void run() {
                             }
                             cursor.dispose();
 
-                            boolean containMessage = true;
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT start FROM " + holesTable + " WHERE uid = %d AND start < %d AND end > %d", dialog_id, max_id_query, max_id_query));
-                            if (cursor.next()) {
-                                containMessage = false;
+                            boolean containMessage = max_id_query != 0;
+                            if (containMessage) {
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT start FROM " + holesTable + " WHERE uid = %d AND start < %d AND end > %d", dialog_id, max_id_query, max_id_query));
+                                if (cursor.next()) {
+                                    containMessage = false;
+                                }
+                                cursor.dispose();
                             }
-                            cursor.dispose();
 
                             if (containMessage) {
                                 long holeMessageMaxId = 0;
@@ -2281,7 +2434,7 @@ public void run() {
                                         holeMessageMinId |= ((long) channelId) << 32;
                                     }
                                 }
-                                /*if (holeMessageMaxId == holeMessageMinId) { TODO ???
+                                /*if (holeMessageMaxId == holeMessageMinId) {
                                     holeMessageMaxId = 0;
                                     holeMessageMinId = 1;
                                 }*/
@@ -2293,11 +2446,11 @@ public void run() {
                                             holeMessageMaxId |= ((long) channelId) << 32;
                                         }
                                     }
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
-                                            "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, messageMaxId, holeMessageMinId, count_query / 2, dialog_id, messageMaxId, holeMessageMaxId, count_query / 2));
+                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
+                                            "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, messageMaxId, holeMessageMinId, count_query / 2, dialog_id, messageMaxId, holeMessageMaxId, count_query / 2));
                                 } else {
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
-                                            "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, messageMaxId, count_query / 2, dialog_id, messageMaxId, count_query / 2));
+                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
+                                            "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, messageMaxId, count_query / 2, dialog_id, messageMaxId, count_query / 2));
                                 }
                             } else {
                                 cursor = null;
@@ -2313,9 +2466,9 @@ public void run() {
                             }
                             cursor.dispose();
                             if (holeMessageId != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, messageMaxId, holeMessageId, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, messageMaxId, holeMessageId, count_query));
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, messageMaxId, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d " + imp + "ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, messageMaxId, count_query));
                             }
                         } else if (minDate != 0) {
                             if (messageMaxId != 0) {
@@ -2329,12 +2482,12 @@ public void run() {
                                 }
                                 cursor.dispose();
                                 if (holeMessageId != 0) {
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, messageMaxId, holeMessageId, count_query));
+                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, messageMaxId, holeMessageId, count_query));
                                 } else {
-                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, messageMaxId, count_query));
+                                    cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, messageMaxId, count_query));
                                 }
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
                             }
                         } else {
                             cursor = database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", dialog_id));
@@ -2353,20 +2506,20 @@ public void run() {
                             }
                             cursor.dispose();
                             if (holeMessageId != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, holeMessageId, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, holeMessageId, offset_query, count_query));
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d " + imp + "ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, offset_query, count_query));
                             }
                         }
                     } else {
                         isEnd = true;
                         if (load_type == 1) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", dialog_id, max_id, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", dialog_id, max_id, count_query));
                         } else if (minDate != 0) {
                             if (max_id != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", dialog_id, max_id, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", dialog_id, max_id, count_query));
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
                             }
                         } else {
                             if (load_type == 2) {
@@ -2391,9 +2544,9 @@ public void run() {
                                 }
                             }
 
-                            if (count_query > count_unread || count_unread < 4) {
+                            if (count_query > count_unread || count_unread < num) {
                                 count_query = Math.max(count_query, count_unread + 10);
-                                if (count_unread < 4) {
+                                if (count_unread < num) {
                                     count_unread = 0;
                                     min_unread_id = 0;
                                     last_message_id = 0;
@@ -2402,13 +2555,13 @@ public void run() {
                                 offset_query = count_unread - count_query;
                                 count_query += 10;
                             }
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
                         }
                     }
                     if (cursor != null) {
                         while (cursor.next()) {
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                            if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                            if (cursor.byteBufferValue(1, data) != 0) {
                                 TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                                 MessageObject.setUnreadFlags(message, cursor.intValue(0));
                                 message.id = cursor.intValue(3);
@@ -2417,24 +2570,23 @@ public void run() {
                                 if ((message.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                                     message.views = cursor.intValue(7);
                                 }
+                                message.ttl = cursor.intValue(8);
                                 res.messages.add(message);
 
                                 addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
 
                                 if (message.reply_to_msg_id != 0 || message.reply_to_random_id != 0) {
-                                    boolean ok = false;
                                     if (!cursor.isNull(6)) {
                                         NativeByteBuffer data2 = new NativeByteBuffer(cursor.byteArrayLength(6));
-                                        if (data2 != null && cursor.byteBufferValue(6, data2) != 0) {
+                                        if (cursor.byteBufferValue(6, data2) != 0) {
                                             message.replyMessage = TLRPC.Message.TLdeserialize(data2, data2.readInt32(false), false);
                                             if (message.replyMessage != null) {
                                                 addUsersAndChatsFromMessage(message.replyMessage, usersToLoad, chatsToLoad);
-                                                ok = true;
                                             }
                                         }
                                         data2.reuse();
                                     }
-                                    if (!ok) {
+                                    if (message.replyMessage == null) {
                                         if (message.reply_to_msg_id != 0) {
                                             long messageId = message.reply_to_msg_id;
                                             if (message.to_id.channel_id != 0) {
@@ -2550,7 +2702,7 @@ public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
                         }
                         while (cursor.next()) {
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                            if (cursor.byteBufferValue(0, data) != 0) {
                                 TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                                 message.id = cursor.intValue(1);
                                 message.date = cursor.intValue(2);
@@ -2665,7 +2817,7 @@ public void run() {
                         SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM sent_files_v2 WHERE uid = '%s' AND type = %d", id, type));
                         if (cursor.next()) {
                             NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                            if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                            if (cursor.byteBufferValue(0, data) != 0) {
                                 TLObject file = TLRPC.MessageMedia.TLdeserialize(data, data.readInt32(false), false);
                                 if (file instanceof TLRPC.TL_messageMediaDocument) {
                                     result.add(((TLRPC.TL_messageMediaDocument) file).document);
@@ -3035,22 +3187,15 @@ private void putUsersInternal(ArrayList<TLRPC.User> users) throws Exception {
                 if (cursor.next()) {
                     try {
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                        if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        if (cursor.byteBufferValue(0, data) != 0) {
                             TLRPC.User oldUser = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
-                            if (user != null) {
-                                if (user.first_name != null) {
-                                    oldUser.first_name = user.first_name;
-                                    oldUser.flags |= 2;
-                                } else {
-                                    oldUser.first_name = null;
-                                    oldUser.flags = oldUser.flags &~ 2;
-                                }
-                                if (user.last_name != null) {
-                                    oldUser.last_name = user.last_name;
-                                    oldUser.flags |= 4;
+                            if (oldUser != null) {
+                                if (user.username != null) {
+                                    oldUser.username = user.username;
+                                    oldUser.flags |= 8;
                                 } else {
-                                    oldUser.last_name = null;
-                                    oldUser.flags = oldUser.flags &~ 4;
+                                    oldUser.username = null;
+                                    oldUser.flags = oldUser.flags &~ 8;
                                 }
                                 if (user.photo != null) {
                                     oldUser.photo = user.photo;
@@ -3059,8 +3204,8 @@ private void putUsersInternal(ArrayList<TLRPC.User> users) throws Exception {
                                     oldUser.photo = null;
                                     oldUser.flags = oldUser.flags &~ 32;
                                 }
+                                user = oldUser;
                             }
-                            user = oldUser;
                         }
                         data.reuse();
                     } catch (Exception e) {
@@ -3099,6 +3244,36 @@ private void putChatsInternal(ArrayList<TLRPC.Chat> chats) throws Exception {
         SQLitePreparedStatement state = database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
         for (int a = 0; a < chats.size(); a++) {
             TLRPC.Chat chat = chats.get(a);
+            if (chat.min) {
+                SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", chat.id));
+                if (cursor.next()) {
+                    try {
+                        NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                        if (cursor.byteBufferValue(0, data) != 0) {
+                            TLRPC.Chat oldChat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
+                            if (oldChat != null) {
+                                oldChat.title = chat.title;
+                                oldChat.photo = chat.photo;
+                                oldChat.broadcast = chat.broadcast;
+                                oldChat.verified = chat.verified;
+                                oldChat.megagroup = chat.megagroup;
+                                oldChat.democracy = chat.democracy;
+                                if (chat.username != null) {
+                                    oldChat.username = chat.username;
+                                    oldChat.flags |= 64;
+                                } else {
+                                    oldChat.username = null;
+                                    oldChat.flags = oldChat.flags &~ 64;
+                                }
+                                chat = oldChat;
+                            }
+                        }
+                        data.reuse();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            }
             state.requery();
             NativeByteBuffer data = new NativeByteBuffer(chat.getObjectSize());
             chat.serializeToStream(data);
@@ -3124,7 +3299,7 @@ public void getUsersInternal(String usersToLoad, ArrayList<TLRPC.User> result) t
         while (cursor.next()) {
             try {
                 NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                if (cursor.byteBufferValue(0, data) != 0) {
                     TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
                     if (user != null) {
                         if (user.status != null) {
@@ -3149,7 +3324,7 @@ public void getChatsInternal(String chatsToLoad, ArrayList<TLRPC.Chat> result) t
         while (cursor.next()) {
             try {
                 NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                if (cursor.byteBufferValue(0, data) != 0) {
                     TLRPC.Chat chat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
                     if (chat != null) {
                         result.add(chat);
@@ -3171,7 +3346,7 @@ public void getEncryptedChatsInternal(String chatsToLoad, ArrayList<TLRPC.Encryp
         while (cursor.next()) {
             try {
                 NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
-                if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                if (cursor.byteBufferValue(0, data) != 0) {
                     TLRPC.EncryptedChat chat = TLRPC.EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
                     if (chat != null) {
                         chat.user_id = cursor.intValue(1);
@@ -3288,7 +3463,7 @@ public void run() {
                         downloadObject.type = cursor.intValue(1);
                         downloadObject.id = cursor.longValue(0);
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(2));
-                        if (data != null && cursor.byteBufferValue(2, data) != 0) {
+                        if (cursor.byteBufferValue(2, data) != 0) {
                             TLRPC.MessageMedia messageMedia = TLRPC.MessageMedia.TLdeserialize(data, data.readInt32(false), false);
                             if (messageMedia.document != null) {
                                 downloadObject.object = messageMedia.document;
@@ -3350,7 +3525,7 @@ public void run() {
                     while (cursor.next()) {
                         int mid = cursor.intValue(0);
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                        if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                        if (cursor.byteBufferValue(1, data) != 0) {
                             TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                             if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
                                 message.id = mid;
@@ -3507,6 +3682,10 @@ public void run() {
         });
     }
 
+    private boolean isValidKeyboardToSave(TLRPC.Message message) {
+        return message.reply_markup != null && !(message.reply_markup instanceof TLRPC.TL_replyInlineMarkup) && (!message.reply_markup.selective || message.mentioned);
+    }
+
     private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final boolean withTransaction, final boolean doNotUpdateDialogDate, final int downloadMask) {
         try {
             if (withTransaction) {
@@ -3587,7 +3766,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                     messagesMediaIdsMap.put(messageId, message.dialog_id);
                     mediaTypes.put(messageId, SharedMediaQuery.getMediaType(message));
                 }
-                if (message.reply_markup != null && (!message.reply_markup.selective || message.mentioned)) {
+                if (isValidKeyboardToSave(message)) {
                     TLRPC.Message oldMessage = botKeyboards.get(message.dialog_id);
                     if (oldMessage == null || oldMessage.id < message.id) {
                         botKeyboards.put(message.dialog_id, message);
@@ -4119,7 +4298,6 @@ public void run() {
                 } catch (Exception e2) {
                     FileLog.e("tmessages", e2);
                 }
-                FileLog.e("tmessages", e);
             } finally {
                 if (state != null) {
                     state.dispose();
@@ -4138,7 +4316,6 @@ public void run() {
                 } catch (Exception e2) {
                     FileLog.e("tmessages", e2);
                 }
-                FileLog.e("tmessages", e);
             } finally {
                 if (state != null) {
                     state.dispose();
@@ -4386,26 +4563,25 @@ private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages, in
                         continue;
                     }
                     NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(1));
-                    if (data != null && cursor.byteBufferValue(1, data) != 0) {
+                    if (cursor.byteBufferValue(1, data) != 0) {
                         TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                        if (message == null || message.media == null) {
-                            continue;
-                        }
-                        if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
-                                File file = FileLoader.getPathToAttach(photoSize);
+                        if (message != null && message.media != null) {
+                            if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                                for (TLRPC.PhotoSize photoSize : message.media.photo.sizes) {
+                                    File file = FileLoader.getPathToAttach(photoSize);
+                                    if (file != null && file.toString().length() > 0) {
+                                        filesToDelete.add(file);
+                                    }
+                                }
+                            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                                File file = FileLoader.getPathToAttach(message.media.document);
+                                if (file != null && file.toString().length() > 0) {
+                                    filesToDelete.add(file);
+                                }
+                                file = FileLoader.getPathToAttach(message.media.document.thumb);
                                 if (file != null && file.toString().length() > 0) {
                                     filesToDelete.add(file);
                                 }
-                            }
-                        } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-                            File file = FileLoader.getPathToAttach(message.media.document);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
-                            }
-                            file = FileLoader.getPathToAttach(message.media.document.thumb);
-                            if (file != null && file.toString().length() > 0) {
-                                filesToDelete.add(file);
                             }
                         }
                     }
@@ -4502,7 +4678,7 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
                 dialogs.dialogs.add(dialog);
 
                 NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(4));
-                if (data != null && cursor.byteBufferValue(4, data) != 0) {
+                if (cursor.byteBufferValue(4, data) != 0) {
                     TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                     MessageObject.setUnreadFlags(message, cursor.intValue(5));
                     message.id = cursor.intValue(6);
@@ -4927,7 +5103,7 @@ public void run() {
                             state3.bindInteger(5, message.id);
                             state3.bindInteger(6, 0);
                             state3.bindLong(7, messageId);
-                            state3.bindInteger(8, load_type < 0 ? message.ttl : 0);
+                            state3.bindInteger(8, message.ttl);
                             state3.bindInteger(9, messages.pts);
                             state3.bindInteger(10, message.date);
                             state3.step();
@@ -4988,7 +5164,7 @@ public void run() {
                         }
                         data.reuse();
 
-                        if (load_type == 0 && message.reply_markup != null && (!message.reply_markup.selective || message.mentioned)) {
+                        if (load_type == 0 && isValidKeyboardToSave(message)) {
                             if (botKeyboard == null || botKeyboard.id < message.id) {
                                 botKeyboard = message;
                             }
@@ -5136,7 +5312,9 @@ public void run() {
                     usersToLoad.add(UserConfig.getClientUserId());
                     ArrayList<Integer> chatsToLoad = new ArrayList<>();
                     ArrayList<Integer> encryptedToLoad = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.last_mid_i, d.unread_count_i, d.pts, d.inbox_max, d.date_i FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.date DESC LIMIT %d,%d", offset, count));
+                    ArrayList<Long> replyMessages = new ArrayList<>();
+                    HashMap<Long, TLRPC.Message> replyMessageOwners = new HashMap<>();
+                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.last_mid_i, d.unread_count_i, d.pts, d.inbox_max, d.date_i, m.replydata FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.date DESC LIMIT %d,%d", offset, count));
                     while (cursor.next()) {
                         TLRPC.Dialog dialog;
                         int pts = cursor.intValue(12);
@@ -5167,7 +5345,7 @@ public void run() {
                         dialogs.dialogs.add(dialog);
 
                         NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(4));
-                        if (data != null && cursor.byteBufferValue(4, data) != 0) {
+                        if (cursor.byteBufferValue(4, data) != 0) {
                             TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                             if (message != null) {
                                 MessageObject.setUnreadFlags(message, cursor.intValue(5));
@@ -5181,6 +5359,33 @@ public void run() {
                                 dialogs.messages.add(message);
 
                                 addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
+
+                                try {
+                                    if (message.reply_to_msg_id != 0 && message.action instanceof TLRPC.TL_messageActionPinMessage) {
+                                        if (!cursor.isNull(15)) {
+                                            NativeByteBuffer data2 = new NativeByteBuffer(cursor.byteArrayLength(15));
+                                            if (cursor.byteBufferValue(15, data2) != 0) {
+                                                message.replyMessage = TLRPC.Message.TLdeserialize(data2, data2.readInt32(false), false);
+                                                if (message.replyMessage != null) {
+                                                    addUsersAndChatsFromMessage(message.replyMessage, usersToLoad, chatsToLoad);
+                                                }
+                                            }
+                                            data2.reuse();
+                                        }
+                                        if (message.replyMessage == null) {
+                                            long messageId = message.reply_to_msg_id;
+                                            if (message.to_id.channel_id != 0) {
+                                                messageId |= ((long) message.to_id.channel_id) << 32;
+                                            }
+                                            if (!replyMessages.contains(messageId)) {
+                                                replyMessages.add(messageId);
+                                            }
+                                            replyMessageOwners.put(dialog.id, message);
+                                        }
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
                             }
                         }
                         data.reuse();
@@ -5211,6 +5416,29 @@ public void run() {
                     }
                     cursor.dispose();
 
+                    if (!replyMessages.isEmpty()) {
+                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)", TextUtils.join(",", replyMessages)));
+                        while (cursor.next()) {
+                            NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                            if (cursor.byteBufferValue(0, data) != 0) {
+                                TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                                message.id = cursor.intValue(1);
+                                message.date = cursor.intValue(2);
+                                message.dialog_id = cursor.longValue(3);
+
+                                addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
+
+                                TLRPC.Message owner = replyMessageOwners.get(message.dialog_id);
+                                if (owner != null) {
+                                    owner.replyMessage = message;
+                                    message.dialog_id = owner.dialog_id;
+                                }
+                            }
+                            data.reuse();
+                        }
+                        cursor.dispose();
+                    }
+
                     if (!encryptedToLoad.isEmpty()) {
                         getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
                     }
@@ -5373,7 +5601,7 @@ private void putDialogsInternal(final TLRPC.messages_Dialogs dialogs) {
                             }
                             isMegagroup = MessageObject.isMegagroup(message);
 
-                            if (message.reply_markup != null && (!message.reply_markup.selective || message.mentioned)) {
+                            if (isValidKeyboardToSave(message)) {
                                 BotQuery.putBotKeyboard(dialog.id, message);
                             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
index 46251dfbd..48baf9503 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NativeLoader.java
@@ -23,7 +23,7 @@
 
 public class NativeLoader {
 
-    private final static int LIB_VERSION = 19;
+    private final static int LIB_VERSION = 21;
     private final static String LIB_NAME = "tmessages." + LIB_VERSION;
     private final static String LIB_SO_NAME = "lib" + LIB_NAME + ".so";
     private final static String LOCALE_LIB_SO_NAME = "lib" + LIB_NAME + "loc.so";
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
index 6fd1db240..70c73aff6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationCenter.java
@@ -53,6 +53,7 @@
     public static final int didSetTwoStepPassword = totalEvents++;
     public static final int screenStateChanged = totalEvents++;
     public static final int didLoadedReplyMessages = totalEvents++;
+    public static final int didLoadedPinnedMessage = totalEvents++;
     public static final int newSessionReceived = totalEvents++;
     public static final int didReceivedWebpages = totalEvents++;
     public static final int didReceivedWebpagesInUpdates = totalEvents++;
@@ -60,6 +61,7 @@
     public static final int didReplacedPhotoInMemCache = totalEvents++;
     public static final int messagesReadContent = totalEvents++;
     public static final int botInfoDidLoaded = totalEvents++;
+    public static final int userInfoDidLoaded = totalEvents++;
     public static final int botKeyboardDidLoaded = totalEvents++;
     public static final int chatSearchResultsAvailable = totalEvents++;
     public static final int musicDidLoaded = totalEvents++;
@@ -67,6 +69,8 @@
     public static final int didUpdatedMessagesViews = totalEvents++;
     public static final int needReloadRecentDialogsSearch = totalEvents++;
     public static final int locationPermissionGranted = totalEvents++;
+    public static final int peerSettingsDidLoaded = totalEvents++;
+    public static final int wasUnableToFindCurrentLocation = totalEvents++;
 
     public static final int httpFileDidLoaded = totalEvents++;
     public static final int httpFileDidFailedLoad = totalEvents++;
@@ -112,6 +116,8 @@
     private int broadcasting = 0;
     private boolean animationInProgress;
 
+    private int[] allowedNotifications;
+
     public interface NotificationCenterDelegate {
         void didReceivedNotification(int id, Object... args);
     }
@@ -142,6 +148,10 @@ public static NotificationCenter getInstance() {
         return localInstance;
     }
 
+    public void setAllowedNotificationsDutingAnimation(int notifications[]) {
+        allowedNotifications = notifications;
+    }
+
     public void setAnimationInProgress(boolean value) {
         animationInProgress = value;
         if (!animationInProgress && !delayedPosts.isEmpty()) {
@@ -154,8 +164,13 @@ public void setAnimationInProgress(boolean value) {
 
     public void postNotificationName(int id, Object... args) {
         boolean allowDuringAnimation = false;
-        if (id == chatInfoDidLoaded || id == dialogsNeedReload || id == closeChats || id == messagesDidLoaded || id == mediaCountDidLoaded || id == mediaDidLoaded || id == botInfoDidLoaded || id == botKeyboardDidLoaded) {
-            allowDuringAnimation = true;
+        if (allowedNotifications != null) {
+            for (int a = 0; a < allowedNotifications.length; a++) {
+                if (allowedNotifications[a] == id) {
+                    allowDuringAnimation = true;
+                    break;
+                }
+            }
         }
         postNotificationNameInternal(id, allowDuringAnimation, args);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index 5276b742f..d911f513c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -61,7 +61,7 @@
     private int wearNotificationId = 10000;
     private int autoNotificationId = 20000;
     public ArrayList<MessageObject> popupMessages = new ArrayList<>();
-    private long openned_dialog_id = 0;
+    private long opened_dialog_id = 0;
     private int total_unread_count = 0;
     private int personal_count = 0;
     private boolean notifyCheck = false;
@@ -147,7 +147,7 @@ public void cleanup() {
         notificationsQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                openned_dialog_id = 0;
+                opened_dialog_id = 0;
                 total_unread_count = 0;
                 personal_count = 0;
                 pushMessages.clear();
@@ -178,11 +178,11 @@ public void setInChatSoundEnabled(boolean value) {
         inChatSoundEnabled = value;
     }
 
-    public void setOpennedDialogId(final long dialog_id) {
+    public void setOpenedDialogId(final long dialog_id) {
         notificationsQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                openned_dialog_id = dialog_id;
+                opened_dialog_id = dialog_id;
             }
         });
     }
@@ -380,6 +380,7 @@ public void run() {
                 int oldCount = popupArray.size();
                 HashMap<Long, Boolean> settingsCache = new HashMap<>();
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
+                boolean allowPinned = preferences.getBoolean("PinnedMessages", true);
                 int popup = 0;
 
                 for (int a = 0; a < messageObjects.size(); a++) {
@@ -393,11 +394,14 @@ public void run() {
                     }
                     long dialog_id = messageObject.getDialogId();
                     long original_dialog_id = dialog_id;
-                    if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
+                    if (dialog_id == opened_dialog_id && ApplicationLoader.isScreenOn) {
                         playInChatSound();
                         continue;
                     }
                     if (messageObject.messageOwner.mentioned) {
+                        if (!allowPinned && messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+                            continue;
+                        }
                         dialog_id = messageObject.messageOwner.from_id;
                     }
                     if (isPersonalMessage(messageObject)) {
@@ -406,7 +410,7 @@ public void run() {
                     added = true;
 
                     Boolean value = settingsCache.get(dialog_id);
-                    boolean isChat = (int)dialog_id < 0;
+                    boolean isChat = (int) dialog_id < 0;
                     popup = (int)dialog_id == 0 ? 0 : preferences.getInt(isChat ? "popupGroup" : "popupAll", 0);
                     if (value == null) {
                         int notifyOverride = getNotifyOverride(preferences, dialog_id);
@@ -582,7 +586,7 @@ public void run() {
                             value = !(notifyOverride == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notifyOverride == 0);
                             settingsCache.put(dialog_id, value);
                         }
-                        if (!value || dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
+                        if (!value || dialog_id == opened_dialog_id && ApplicationLoader.isScreenOn) {
                             continue;
                         }
                         pushMessagesDict.put(mid, messageObject);
@@ -683,7 +687,7 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
         int chat_id = messageObject.messageOwner.to_id.chat_id != 0 ? messageObject.messageOwner.to_id.chat_id : messageObject.messageOwner.to_id.channel_id;
         int from_id = messageObject.messageOwner.to_id.user_id;
         if (from_id == 0) {
-            if (messageObject.isFromUser()) {
+            if (messageObject.isFromUser() || messageObject.getId() < 0) {
                 from_id = messageObject.messageOwner.from_id;
             } else {
                 from_id = -chat_id;
@@ -725,7 +729,7 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
         }
 
         String msg = null;
-        if ((int)dialog_id == 0 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
+        if ((int) dialog_id == 0 || AndroidUtilities.needShowPasscode(false) || UserConfig.isWaitingForPasscodeEnter) {
             msg = LocaleController.getString("YouHaveNewMessage", R.string.YouHaveNewMessage);
         } else {
             if (chat_id == 0 && from_id != 0) {
@@ -757,6 +761,8 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, name);
                         } else if (messageObject.isVoice()) {
                             msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, name);
+                        } else if (messageObject.isMusic()) {
+                            msg = LocaleController.formatString("NotificationMessageMusic", R.string.NotificationMessageMusic, name);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
                             msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, name);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
@@ -785,12 +791,6 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             }
                             if (singleUserId != 0) {
                                 if (messageObject.messageOwner.to_id.channel_id != 0 && !messageObject.isMegagroup()) {
-                                    TLRPC.User user = MessagesController.getInstance().getUser(singleUserId);
-                                    if (user != null) {
-                                        name = UserObject.getUserName(user);
-                                    } else {
-                                        name = "";
-                                    }
                                     msg = LocaleController.formatString("ChannelAddedByNotification", R.string.ChannelAddedByNotification, name, chat.title);
                                 } else {
                                     if (singleUserId == UserConfig.getClientUserId()) {
@@ -801,7 +801,11 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                                             return null;
                                         }
                                         if (from_id == u2.id) {
-                                            msg = LocaleController.formatString("NotificationGroupAddSelf", R.string.NotificationGroupAddSelf, name, chat.title);
+                                            if (messageObject.isMegagroup()) {
+                                                msg = LocaleController.formatString("NotificationGroupAddSelfMega", R.string.NotificationGroupAddSelfMega, name, chat.title);
+                                            } else {
+                                                msg = LocaleController.formatString("NotificationGroupAddSelf", R.string.NotificationGroupAddSelf, name, chat.title);
+                                            }
                                         } else {
                                             msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, name, chat.title, UserObject.getUserName(u2));
                                         }
@@ -851,10 +855,91 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                             msg = LocaleController.formatString("ActionMigrateFromGroupNotify", R.string.ActionMigrateFromGroupNotify, chat.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
                             msg = LocaleController.formatString("ActionMigrateFromGroupNotify", R.string.ActionMigrateFromGroupNotify, messageObject.messageOwner.action.title);
+                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+                            if (messageObject.replyMessageObject == null) {
+                                if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                    msg = LocaleController.formatString("NotificationActionPinnedNoText", R.string.NotificationActionPinnedNoText, name, chat.title);
+                                } else {
+                                    msg = LocaleController.formatString("NotificationActionPinnedNoTextChannel", R.string.NotificationActionPinnedNoTextChannel, name, chat.title);
+                                }
+                            } else {
+                                MessageObject object = messageObject.replyMessageObject;
+                                if (object.isMusic()) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedMusic", R.string.NotificationActionPinnedMusic, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedMusicChannel", R.string.NotificationActionPinnedMusicChannel, chat.title);
+                                    }
+                                } else if (object.isVideo()) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedVideo", R.string.NotificationActionPinnedVideo, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedVideoChannel", R.string.NotificationActionPinnedVideoChannel, chat.title);
+                                    }
+                                } else if (object.isGif()) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedGif", R.string.NotificationActionPinnedGif, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedGifChannel", R.string.NotificationActionPinnedGifChannel, chat.title);
+                                    }
+                                } else if (object.isVoice()) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedVoice", R.string.NotificationActionPinnedVoice, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedVoiceChannel", R.string.NotificationActionPinnedVoiceChannel, chat.title);
+                                    }
+                                } else if (object.isSticker()) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedSticker", R.string.NotificationActionPinnedSticker, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedStickerChannel", R.string.NotificationActionPinnedStickerChannel, chat.title);
+                                    }
+                                } else if (object.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedFile", R.string.NotificationActionPinnedFile, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedFileChannel", R.string.NotificationActionPinnedFileChannel, chat.title);
+                                    }
+                                } else if (object.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedGeo", R.string.NotificationActionPinnedGeo, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedGeoChannel", R.string.NotificationActionPinnedGeoChannel, chat.title);
+                                    }
+                                } else if (object.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedContact", R.string.NotificationActionPinnedContact, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedContactChannel", R.string.NotificationActionPinnedContactChannel, chat.title);
+                                    }
+                                } else if (object.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedPhoto", R.string.NotificationActionPinnedPhoto, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedPhotoChannel", R.string.NotificationActionPinnedPhotoChannel, chat.title);
+                                    }
+                                } else if (object.messageText != null && object.messageText.length() > 0) {
+                                    CharSequence message = object.messageText;
+                                    if (message.length() > 20) {
+                                        message = message.subSequence(0, 20) + "...";
+                                    }
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedText", R.string.NotificationActionPinnedText, name, message, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedTextChannel", R.string.NotificationActionPinnedTextChannel, chat.title, message);
+                                    }
+                                } else {
+                                    if (!ChatObject.isChannel(chat) || chat.megagroup) {
+                                        msg = LocaleController.formatString("NotificationActionPinnedNoText", R.string.NotificationActionPinnedNoText, name, chat.title);
+                                    } else {
+                                        msg = LocaleController.formatString("NotificationActionPinnedNoTextChannel", R.string.NotificationActionPinnedNoTextChannel, chat.title);
+                                    }
+                                }
+                            }
                         }
                     } else {
                         if (ChatObject.isChannel(chat) && !chat.megagroup) {
-                            if (from_id < 0) {
+                            if (messageObject.isImportant()) {
                                 if (messageObject.isMediaEmpty()) {
                                     if (!shortMessage && messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
                                         msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, name, chat.title, messageObject.messageOwner.message);
@@ -867,6 +952,8 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                                     msg = LocaleController.formatString("ChannelMessageVideo", R.string.ChannelMessageVideo, name, chat.title);
                                 } else if (messageObject.isVoice()) {
                                     msg = LocaleController.formatString("ChannelMessageAudio", R.string.ChannelMessageAudio, name, chat.title);
+                                } else if (messageObject.isMusic()) {
+                                    msg = LocaleController.formatString("ChannelMessageMusic", R.string.ChannelMessageMusic, name, chat.title);
                                 } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
                                     msg = LocaleController.formatString("ChannelMessageContact", R.string.ChannelMessageContact, name, chat.title);
                                 } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
@@ -893,6 +980,8 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                                     msg = LocaleController.formatString("ChannelMessageGroupVideo", R.string.ChannelMessageGroupVideo, name, chat.title);
                                 } else if (messageObject.isVoice()) {
                                     msg = LocaleController.formatString("ChannelMessageGroupAudio", R.string.ChannelMessageGroupAudio, name, chat.title);
+                                } else if (messageObject.isMusic()) {
+                                    msg = LocaleController.formatString("ChannelMessageGroupMusic", R.string.ChannelMessageGroupMusic, name, chat.title);
                                 } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
                                     msg = LocaleController.formatString("ChannelMessageGroupContact", R.string.ChannelMessageGroupContact, name, chat.title);
                                 } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
@@ -920,6 +1009,8 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                                 msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, name, chat.title);
                             } else if (messageObject.isVoice()) {
                                 msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, name, chat.title);
+                            } else if (messageObject.isMusic()) {
+                                msg = LocaleController.formatString("NotificationMessageGroupMusic", R.string.NotificationMessageGroupMusic, name, chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
                                 msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, name, chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
@@ -1073,7 +1164,7 @@ private void playInChatSound() {
 
         try {
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-            int notifyOverride = getNotifyOverride(preferences, openned_dialog_id);
+            int notifyOverride = getNotifyOverride(preferences, opened_dialog_id);
             if (notifyOverride == 2) {
                 return;
             }
@@ -1405,12 +1496,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 }
             }
 
-            if (silent == 1) {
-                FileLog.e("tmessages", "don't notify " + lastMessage);
-            } else {
-                FileLog.e("tmessages", "notify" + lastMessage);
-            }
-
             if (!notifyAboutLast || silent == 1) {
                 mBuilder.setPriority(NotificationCompat.PRIORITY_LOW);
             } else {
@@ -1426,7 +1511,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             if (silent != 1 && !notifyDisabled) {
                 if (ApplicationLoader.mainInterfacePaused || inAppPreview) {
                     if (lastMessage.length() > 100) {
-                        lastMessage = lastMessage.substring(0, 100).replace("\n", " ").trim() + "...";
+                        lastMessage = lastMessage.substring(0, 100).replace('\n', ' ').trim() + "...";
                     }
                     mBuilder.setTicker(lastMessage);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
index 8878ebaaa..1420bf6aa 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
@@ -849,6 +849,36 @@ public void run() {
         });
     }
 
+    private void applyPeerLayer(final TLRPC.EncryptedChat chat, int newPeerLayer) {
+        int currentPeerLayer = AndroidUtilities.getPeerLayerVersion(chat.layer);
+        if (newPeerLayer <= currentPeerLayer) {
+            return;
+        }
+        if (chat.key_hash.length == 16 && currentPeerLayer >= 46) {
+            try {
+                byte[] sha256 = Utilities.computeSHA256(chat.auth_key, 0, chat.auth_key.length);
+                byte[] key_hash = new byte[36];
+                System.arraycopy(chat.key_hash, 0, key_hash, 0, 16);
+                System.arraycopy(sha256, 0, key_hash, 16, 20);
+                chat.key_hash = key_hash;
+                MessagesStorage.getInstance().updateEncryptedChat(chat);
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        chat.layer = AndroidUtilities.setPeerLayerVersion(chat.layer, newPeerLayer);
+        MessagesStorage.getInstance().updateEncryptedChatLayer(chat);
+        if (currentPeerLayer < CURRENT_SECRET_CHAT_LAYER) {
+            sendNotifyLayerMessage(chat, null);
+        }
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, chat);
+            }
+        });
+    }
+
     public TLRPC.Message processDecryptedObject(final TLRPC.EncryptedChat chat, final TLRPC.EncryptedFile file, int date, long random_id, TLObject object, boolean new_key_used) {
         if (object != null) {
             int from_id = chat.admin_id;
@@ -1156,30 +1186,7 @@ public void run() {
                         MessagesStorage.getInstance().createTaskForSecretChat(chat.id, time, time, 1, serviceMessage.action.random_ids);
                     }
                 } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionNotifyLayer) {
-                    int currentPeerLayer = AndroidUtilities.getPeerLayerVersion(chat.layer);
-                    if (chat.key_hash.length == 16 && currentPeerLayer >= 46) {
-                        try {
-                            byte[] sha256 = Utilities.computeSHA256(chat.auth_key, 0, chat.auth_key.length);
-                            byte[] key_hash = new byte[36];
-                            System.arraycopy(chat.key_hash, 0, key_hash, 0, 16);
-                            System.arraycopy(sha256, 0, key_hash, 16, 20);
-                            chat.key_hash = key_hash;
-                            MessagesStorage.getInstance().updateEncryptedChat(chat);
-                        } catch (Throwable e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-                    chat.layer = AndroidUtilities.setPeerLayerVersion(chat.layer, serviceMessage.action.layer);
-                    MessagesStorage.getInstance().updateEncryptedChatLayer(chat);
-                    if (currentPeerLayer < CURRENT_SECRET_CHAT_LAYER) {
-                        sendNotifyLayerMessage(chat, null);
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.encryptedChatUpdated, chat);
-                        }
-                    });
+                    applyPeerLayer(chat, serviceMessage.action.layer);
                 } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionRequestKey) {
                     if (chat.exchange_id != 0) {
                         if (chat.exchange_id > serviceMessage.action.exchange_id) {
@@ -1374,6 +1381,7 @@ public int compare(TL_decryptedMessageHolder lhs, TL_decryptedMessageHolder rhs)
         for (int a = 0; a < holes.size(); a++) {
             TL_decryptedMessageHolder holder = holes.get(a);
             if (holder.layer.out_seq_no == chat.seq_in || chat.seq_in == holder.layer.out_seq_no - 2) {
+                applyPeerLayer(chat, holder.layer.layer);
                 chat.seq_in = holder.layer.out_seq_no;
                 holes.remove(a);
                 a--;
@@ -1493,6 +1501,7 @@ public void run() {
                         arr.add(holder);
                         return null;
                     }
+                    applyPeerLayer(chat, layer.layer);
                     chat.seq_in = layer.out_seq_no;
                     MessagesStorage.getInstance().updateEncryptedChatSeq(chat);
                     object = layer.message;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
index 05c96ff7a..30f1b95e0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SendMessagesHelper.java
@@ -11,14 +11,19 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.DialogInterface;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
 import android.media.MediaMetadataRetriever;
 import android.media.MediaPlayer;
 import android.media.ThumbnailUtils;
 import android.net.Uri;
 import android.os.Build;
+import android.os.Bundle;
 import android.provider.MediaStore;
 import android.webkit.MimeTypeMap;
 import android.widget.Toast;
@@ -31,6 +36,7 @@
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ChatActivity;
 
 import java.io.File;
 import java.io.RandomAccessFile;
@@ -45,6 +51,148 @@
     private HashMap<String, ArrayList<DelayedMessage>> delayedMessages = new HashMap<>();
     private HashMap<Integer, MessageObject> unsentMessages = new HashMap<>();
     private HashMap<Integer, TLRPC.Message> sendingMessages = new HashMap<>();
+    private HashMap<String, MessageObject> waitingForLocation = new HashMap<>();
+    private HashMap<String, MessageObject> waitingForCallback = new HashMap<>();
+
+    private LocationProvider locationProvider = new LocationProvider(new LocationProvider.LocationProviderDelegate() {
+        @Override
+        public void onLocationAcquired(Location location) {
+            sendLocation(location);
+            waitingForLocation.clear();
+        }
+
+        @Override
+        public void onUnableLocationAcquire() {
+            HashMap<String, MessageObject> waitingForLocationCopy = new HashMap<>(waitingForLocation);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.wasUnableToFindCurrentLocation, waitingForLocationCopy);
+            waitingForLocation.clear();
+        }
+    });
+
+    public static class LocationProvider {
+
+        public interface LocationProviderDelegate {
+            void onLocationAcquired(Location location);
+            void onUnableLocationAcquire();
+        }
+
+        private LocationProviderDelegate delegate;
+        private LocationManager locationManager;
+        private GpsLocationListener gpsLocationListener = new GpsLocationListener();
+        private GpsLocationListener networkLocationListener = new GpsLocationListener();
+        private Runnable locationQueryCancelRunnable;
+        private Location lastKnownLocation;
+
+        private class GpsLocationListener implements LocationListener {
+
+            @Override
+            public void onLocationChanged(Location location) {
+                if (location == null || locationQueryCancelRunnable == null) {
+                    return;
+                }
+                FileLog.e("tmessages", "found location " + location);
+                lastKnownLocation = location;
+                if (location.getAccuracy() < 100) {
+                    if (delegate != null) {
+                        delegate.onLocationAcquired(location);
+                    }
+                    if (locationQueryCancelRunnable != null) {
+                        AndroidUtilities.cancelRunOnUIThread(locationQueryCancelRunnable);
+                    }
+                    cleanup();
+                }
+            }
+
+            @Override
+            public void onStatusChanged(String provider, int status, Bundle extras) {
+
+            }
+
+            @Override
+            public void onProviderEnabled(String provider) {
+
+            }
+
+            @Override
+            public void onProviderDisabled(String provider) {
+
+            }
+        }
+
+        public LocationProvider() {
+
+        }
+
+        public LocationProvider(LocationProviderDelegate locationProviderDelegate) {
+            delegate = locationProviderDelegate;
+        }
+
+        public void setDelegate(LocationProviderDelegate locationProviderDelegate) {
+            delegate = locationProviderDelegate;
+        }
+
+        private void cleanup() {
+            locationManager.removeUpdates(gpsLocationListener);
+            locationManager.removeUpdates(networkLocationListener);
+            lastKnownLocation = null;
+            locationQueryCancelRunnable = null;
+        }
+
+        public void start() {
+            if (locationManager == null) {
+                locationManager = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+            }
+            try {
+                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1, 0, gpsLocationListener);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            try {
+                locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 1, 0, networkLocationListener);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            try {
+                lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+                if (lastKnownLocation == null) {
+                    lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (locationQueryCancelRunnable != null) {
+                AndroidUtilities.cancelRunOnUIThread(locationQueryCancelRunnable);
+            }
+            locationQueryCancelRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (locationQueryCancelRunnable != this) {
+                        return;
+                    }
+                    if (delegate != null) {
+                        if (lastKnownLocation != null) {
+                            delegate.onLocationAcquired(lastKnownLocation);
+                        } else {
+                            delegate.onUnableLocationAcquire();
+                        }
+                    }
+                    cleanup();
+                }
+            };
+            AndroidUtilities.runOnUIThread(locationQueryCancelRunnable, 5000);
+        }
+
+        public void stop() {
+            if (locationManager == null) {
+                return;
+            }
+            if (locationQueryCancelRunnable != null) {
+                AndroidUtilities.cancelRunOnUIThread(locationQueryCancelRunnable);
+
+            }
+            cleanup();
+        }
+    }
 
     protected class DelayedMessage {
         public TLObject sendRequest;
@@ -90,7 +238,10 @@ public void cleanUp() {
         delayedMessages.clear();
         unsentMessages.clear();
         sendingMessages.clear();
+        waitingForLocation.clear();
+        waitingForCallback.clear();
         currentChatInfo = null;
+        locationProvider.stop();
     }
 
     public void setCurrentChatInfo(TLRPC.ChatFull info) {
@@ -259,7 +410,7 @@ public void didReceivedNotification(int id, final Object... args) {
                 for (int a = 0; a < arr.size(); a++) {
                     final DelayedMessage message = arr.get(a);
                     if (message.type == 0) {
-                        String md5 = Utilities.MD5(message.httpLocation) + ".jpg";
+                        String md5 = Utilities.MD5(message.httpLocation) + "." + ImageLoader.getHttpUrlExtension(message.httpLocation, "file");
                         final File cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), md5);
                         Utilities.globalQueue.postRunnable(new Runnable() {
                             @Override
@@ -455,18 +606,18 @@ public void processForwardFromMyName(MessageObject messageObject, long did, bool
         }
         if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage)) {
             if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
-                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did, messageObject.replyMessageObject, asAdmin, null);
+                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, did, messageObject.replyMessageObject, asAdmin, null, null);
             } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
-                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject, asAdmin, null);
+                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject, asAdmin, null, null);
             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                sendMessage(messageObject.messageOwner.media, did, messageObject.replyMessageObject, asAdmin);
+                sendMessage(messageObject.messageOwner.media, did, messageObject.replyMessageObject, asAdmin, null, null);
             } else if (messageObject.messageOwner.media.phone_number != null) {
                 TLRPC.User user = new TLRPC.TL_userContact_old2();
                 user.phone = messageObject.messageOwner.media.phone_number;
                 user.first_name = messageObject.messageOwner.media.first_name;
                 user.last_name = messageObject.messageOwner.media.last_name;
                 user.id = messageObject.messageOwner.media.user_id;
-                sendMessage(user, did, messageObject.replyMessageObject, asAdmin);
+                sendMessage(user, did, messageObject.replyMessageObject, asAdmin, null, null);
             } else {
                 ArrayList<MessageObject> arrayList = new ArrayList<>();
                 arrayList.add(messageObject);
@@ -477,7 +628,7 @@ public void processForwardFromMyName(MessageObject messageObject, long did, bool
             if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
                 webPage = messageObject.messageOwner.media.webpage;
             }
-            sendMessage(messageObject.messageOwner.message, did, messageObject.replyMessageObject, webPage, true, asAdmin, messageObject.messageOwner.entities, null);
+            sendMessage(messageObject.messageOwner.message, did, messageObject.replyMessageObject, webPage, true, asAdmin, messageObject.messageOwner.entities, null, null);
         } else {
             ArrayList<MessageObject> arrayList = new ArrayList<>();
             arrayList.add(messageObject);
@@ -528,34 +679,8 @@ public void sendSticker(TLRPC.Document document, long peer, MessageObject replyi
                     }
                 }
             }
-            for (int a = 0; a < document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = document.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                    if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) < 46) {
-                        document.attributes.remove(a);
-                        document.attributes.add(new TLRPC.TL_documentAttributeSticker_old());
-                    } else {
-                        if (attribute.stickerset != null) {
-                            String name = StickersQuery.getStickerSetName(attribute.stickerset.id);
-                            if (name != null && name.length() > 0) {
-                                attribute.stickerset = new TLRPC.TL_inputStickerSetShortName();
-                                attribute.stickerset.short_name = name;
-                            } else {
-                                attribute.stickerset = new TLRPC.TL_inputStickerSetEmpty();
-                            }
-                        } else {
-                            attribute.stickerset = new TLRPC.TL_inputStickerSetEmpty();
-                        }
-                    }
-                    break;
-                }
-            }
         }
-        SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject, asAdmin, null);
-    }
-
-    public void sendMessage(TLRPC.User user, long peer, MessageObject reply_to_msg, boolean asAdmin) {
-        sendMessage(null, null, null, null, user, null, peer, null, reply_to_msg, null, true, asAdmin, null, null, null);
+        SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject, asAdmin, null, null);
     }
 
     public void sendMessage(ArrayList<MessageObject> messages, final long peer, boolean asAdmin) {
@@ -680,6 +805,10 @@ public void sendMessage(ArrayList<MessageObject> messages, final long peer, bool
             putToSendingMessages(newMsg);
             boolean differentDialog = false;
 
+            if (BuildVars.DEBUG_VERSION) {
+                FileLog.e("tmessages", "forward message user_id = " + inputPeer.user_id + " chat_id = " + inputPeer.chat_id + " channel_id = " + inputPeer.channel_id + " access_hash = " + inputPeer.access_hash);
+            }
+
             if (arr.size() == 100 || a == messages.size() - 1 || a != messages.size() - 1 && messages.get(a + 1).getDialogId() != msgObj.getDialogId()) {
                 MessagesStorage.getInstance().putMessages(new ArrayList<>(arr), false, true, false, 0);
                 MessagesController.getInstance().updateInterfaceWithMessages(peer, objArr);
@@ -688,9 +817,16 @@ public void sendMessage(ArrayList<MessageObject> messages, final long peer, bool
 
                 TLRPC.TL_messages_forwardMessages req = new TLRPC.TL_messages_forwardMessages();
                 req.to_peer = inputPeer;
-                if (msgObj.messageOwner.to_id instanceof TLRPC.TL_peerChannel) {
-                    req.from_peer = MessagesController.getInputPeer(-msgObj.messageOwner.to_id.channel_id);
+                if (req.to_peer instanceof TLRPC.TL_inputPeerChannel) {
                     req.silent = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE).getBoolean("silent_" + peer, false);
+                }
+                if (msgObj.messageOwner.to_id instanceof TLRPC.TL_peerChannel) {
+                    TLRPC.Chat chat = MessagesController.getInstance().getChat(msgObj.messageOwner.to_id.channel_id);
+                    req.from_peer = new TLRPC.TL_inputPeerChannel();
+                    req.from_peer.channel_id = msgObj.messageOwner.to_id.channel_id;
+                    if (chat != null) {
+                        req.from_peer.access_hash = chat.access_hash;
+                    }
                 } else {
                     req.from_peer = new TLRPC.TL_inputPeerEmpty();
                 }
@@ -713,7 +849,8 @@ public void run(TLObject response, final TLRPC.TL_error error) {
                             for (int a = 0; a < updates.updates.size(); a++) {
                                 TLRPC.Update update = updates.updates.get(a);
                                 if (update instanceof TLRPC.TL_updateMessageID) {
-                                    newMessagesByIds.put(update.id, update.random_id);
+                                    TLRPC.TL_updateMessageID updateMessageID = (TLRPC.TL_updateMessageID) update;
+                                    newMessagesByIds.put(updateMessageID.id, updateMessageID.random_id);
                                     updates.updates.remove(a);
                                     a--;
                                 }
@@ -815,9 +952,10 @@ public void editMessage(MessageObject messageObject, String message, boolean sea
         progressDialog.setCanceledOnTouchOutside(false);
         progressDialog.setCancelable(false);
 
-        TLRPC.TL_channels_editMessage req = new TLRPC.TL_channels_editMessage();
-        req.channel = MessagesController.getInputChannel(messageObject.messageOwner.to_id.channel_id);
+        TLRPC.TL_messages_editMessage req = new TLRPC.TL_messages_editMessage();
+        req.peer = MessagesController.getInputPeer((int) messageObject.getDialogId());
         req.message = message;
+        req.flags |= 2048;
         req.id = messageObject.getId();
         req.no_webpage = !searchLinks;
         final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
@@ -871,31 +1009,104 @@ public void onClick(DialogInterface dialog, int which) {
         }
     }
 
+    private void sendLocation(Location location) {
+        TLRPC.TL_messageMediaGeo mediaGeo = new TLRPC.TL_messageMediaGeo();
+        mediaGeo.geo = new TLRPC.TL_geoPoint();
+        mediaGeo.geo.lat = location.getLatitude();
+        mediaGeo.geo._long = location.getLongitude();
+        for (HashMap.Entry<String, MessageObject> entry : waitingForLocation.entrySet()) {
+            MessageObject messageObject = entry.getValue();
+            SendMessagesHelper.getInstance().sendMessage(mediaGeo, messageObject.getDialogId(), messageObject, false, null, null);
+        }
+    }
+
+    public void sendCurrentLocation(final MessageObject messageObject, final TLRPC.KeyboardButton button) {
+        final String key = messageObject.getId() + "_" + Utilities.bytesToHex(button.data);
+        waitingForLocation.put(key, messageObject);
+        locationProvider.start();
+    }
+
+    public boolean isSendingCurrentLocation(MessageObject messageObject, TLRPC.KeyboardButton button) {
+        return !(messageObject == null || button == null) && waitingForLocation.containsKey(messageObject.getId() + "_" + Utilities.bytesToHex(button.data));
+    }
+
+    public void sendCallback(final MessageObject messageObject, final TLRPC.KeyboardButton button, final ChatActivity parentFragment) {
+        if (messageObject == null || button == null || parentFragment == null) {
+            return;
+        }
+        final String key = messageObject.getId() + "_" + Utilities.bytesToHex(button.data);
+        waitingForCallback.put(key, messageObject);
+        TLRPC.TL_messages_getBotCallbackAnswer req = new TLRPC.TL_messages_getBotCallbackAnswer();
+        req.peer = MessagesController.getInputPeer((int) messageObject.getDialogId());
+        req.msg_id = messageObject.getId();
+        req.data = button.data;
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (response != null) {
+                            TLRPC.TL_messages_botCallbackAnswer res = (TLRPC.TL_messages_botCallbackAnswer) response;
+                            if (res.message != null) {
+                                if (res.alert) {
+                                    if (parentFragment.getParentActivity() == null) {
+                                        return;
+                                    }
+                                    AlertDialog.Builder builder = new AlertDialog.Builder(parentFragment.getParentActivity());
+                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                    builder.setMessage(res.message);
+                                    parentFragment.showDialog(builder.create());
+                                } else {
+                                    int uid = messageObject.messageOwner.from_id;
+                                    if (messageObject.messageOwner.via_bot_id != 0) {
+                                        uid = messageObject.messageOwner.via_bot_id;
+                                    }
+                                    TLRPC.User user = MessagesController.getInstance().getUser(uid);
+                                    if (user == null) {
+                                        return;
+                                    }
+                                    parentFragment.showAlert(user, res.message);
+                                }
+                            }
+                        }
+                        waitingForCallback.remove(key);
+                    }
+                });
+            }
+        }, ConnectionsManager.RequestFlagFailOnServerErrors);
+    }
+
+    public boolean isSendingCallback(MessageObject messageObject, TLRPC.KeyboardButton button) {
+        return !(messageObject == null || button == null) && waitingForCallback.containsKey(messageObject.getId() + "_" + Utilities.bytesToHex(button.data));
+    }
+
     public void sendMessage(MessageObject retryMessageObject, boolean asAdmin) {
-        sendMessage(null, null, null, null, null, null, retryMessageObject.getDialogId(), retryMessageObject.messageOwner.attachPath, null, null, true, asAdmin, retryMessageObject, null, retryMessageObject.messageOwner.params);
+        sendMessage(null, null, null, null, null, null, retryMessageObject.getDialogId(), retryMessageObject.messageOwner.attachPath, null, null, true, asAdmin, retryMessageObject, null, retryMessageObject.messageOwner.reply_markup, retryMessageObject.messageOwner.params);
     }
 
-    public void sendMessage(TLRPC.TL_document document, VideoEditedInfo videoEditedInfo, String path, long peer, MessageObject reply_to_msg, boolean asAdmin, HashMap<String, String> params) {
-        sendMessage(null, null, null, videoEditedInfo, null, document, peer, path, reply_to_msg, null, true, asAdmin, null, null, params);
+    public void sendMessage(TLRPC.User user, long peer, MessageObject reply_to_msg, boolean asAdmin, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+        sendMessage(null, null, null, null, user, null, peer, null, reply_to_msg, null, true, asAdmin, null, null, replyMarkup, params);
     }
 
-    public void sendMessage(String message, long peer, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, boolean asAdmin, ArrayList<TLRPC.MessageEntity> entities, HashMap<String, String> params) {
-        sendMessage(message, null, null, null, null, null, peer, null, reply_to_msg, webPage, searchLinks, asAdmin, null, entities, params);
+    public void sendMessage(TLRPC.TL_document document, VideoEditedInfo videoEditedInfo, String path, long peer, MessageObject reply_to_msg, boolean asAdmin, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+        sendMessage(null, null, null, videoEditedInfo, null, document, peer, path, reply_to_msg, null, true, asAdmin, null, null, replyMarkup, params);
     }
 
-    public void sendMessage(TLRPC.MessageMedia location, long peer, MessageObject reply_to_msg, boolean asAdmin) {
-        sendMessage(null, location, null, null, null, null, peer, null, reply_to_msg, null, true, asAdmin, null, null, null);
+    public void sendMessage(String message, long peer, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, boolean asAdmin, ArrayList<TLRPC.MessageEntity> entities, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+        sendMessage(message, null, null, null, null, null, peer, null, reply_to_msg, webPage, searchLinks, asAdmin, null, entities, replyMarkup, params);
     }
 
-    public void sendMessage(TLRPC.TL_photo photo, String path, long peer, MessageObject reply_to_msg, boolean asAdmin, HashMap<String, String> params) {
-        sendMessage(null, null, photo, null, null, null, peer, path, reply_to_msg, null, true, asAdmin, null, null, params);
+    public void sendMessage(TLRPC.MessageMedia location, long peer, MessageObject reply_to_msg, boolean asAdmin, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+        sendMessage(null, location, null, null, null, null, peer, null, reply_to_msg, null, true, asAdmin, null, null, replyMarkup, params);
     }
 
-    /*public void sendMessage(TLRPC.TL_video video, VideoEditedInfo videoEditedInfo, String path, long peer, MessageObject reply_to_msg, boolean asAdmin, HashMap<String, String> params) {
-        sendMessage(null, null, null, video, videoEditedInfo, null, null, null, peer, path, reply_to_msg, null, true, asAdmin, null, null, params);
-    }*/
+    public void sendMessage(TLRPC.TL_photo photo, String path, long peer, MessageObject reply_to_msg, boolean asAdmin, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
+        sendMessage(null, null, photo, null, null, null, peer, path, reply_to_msg, null, true, asAdmin, null, null, replyMarkup, params);
+    }
 
-    private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_photo photo, VideoEditedInfo videoEditedInfo, TLRPC.User user, TLRPC.TL_document document, long peer, String path, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, boolean asAdmin, MessageObject retryMessageObject, ArrayList<TLRPC.MessageEntity> entities, HashMap<String, String> params) {
+    private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_photo photo, VideoEditedInfo videoEditedInfo, TLRPC.User user, TLRPC.TL_document document, long peer, String path, MessageObject reply_to_msg, TLRPC.WebPage webPage, boolean searchLinks, boolean asAdmin, MessageObject retryMessageObject, ArrayList<TLRPC.MessageEntity> entities, TLRPC.ReplyMarkup replyMarkup, HashMap<String, String> params) {
         if (peer == 0) {
             return;
         }
@@ -934,27 +1145,18 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
         try {
             if (retryMessageObject != null) {
                 newMsg = retryMessageObject.messageOwner;
-
                 if (retryMessageObject.isForwarded()) {
                     type = 4;
                 } else {
                     if (retryMessageObject.type == 0) {
                         message = newMsg.message;
-                        if (params != null && params.containsKey("query_id")) {
-                            type = 9;
-                        } else {
-                            type = 0;
-                        }
+                        type = 0;
                     } else if (retryMessageObject.type == 4) {
                         location = newMsg.media;
                         type = 1;
                     } else if (retryMessageObject.type == 1) {
                         photo = (TLRPC.TL_photo) newMsg.media.photo;
-                        if (params != null && params.containsKey("query_id")) {
-                            type = 9;
-                        } else {
-                            type = 2;
-                        }
+                        type = 2;
                     } else if (retryMessageObject.type == 3) {
                         type = 3;
                         document = (TLRPC.TL_document) newMsg.media.document;
@@ -965,17 +1167,16 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         user.last_name = newMsg.media.last_name;
                         user.id = newMsg.media.user_id;
                         type = 6;
-                    } else if (retryMessageObject.type == 8 || retryMessageObject.type == 9 || retryMessageObject.type == 13) {
+                    } else if (retryMessageObject.type == 8 || retryMessageObject.type == 9 || retryMessageObject.type == 13 || retryMessageObject.type == 14) {
                         document = (TLRPC.TL_document) newMsg.media.document;
-                        if (params != null && params.containsKey("query_id")) {
-                            type = 9;
-                        } else {
-                            type = 7;
-                        }
+                        type = 7;
                     } else if (retryMessageObject.type == 2) {
                         document = (TLRPC.TL_document) newMsg.media.document;
                         type = 8;
                     }
+                    if (params != null && params.containsKey("query_id")) {
+                        type = 9;
+                    }
                 }
             } else {
                 if (message != null) {
@@ -1016,7 +1217,11 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                     }
                     newMsg.media = location;
                     newMsg.message = "";
-                    type = 1;
+                    if (params != null && params.containsKey("query_id")) {
+                        type = 9;
+                    } else {
+                        type = 1;
+                    }
                 } else if (photo != null) {
                     if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
                         newMsg = new TLRPC.TL_message_secret();
@@ -1056,7 +1261,11 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         user.last_name = newMsg.media.last_name = "";
                     }
                     newMsg.message = "";
-                    type = 6;
+                    if (params != null && params.containsKey("query_id")) {
+                        type = 9;
+                    } else {
+                        type = 6;
+                    }
                 } else if (document != null) {
                     if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
                         newMsg = new TLRPC.TL_message_secret();
@@ -1066,12 +1275,12 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                     newMsg.media = new TLRPC.TL_messageMediaDocument();
                     newMsg.media.caption = document.caption != null ? document.caption : "";
                     newMsg.media.document = document;
-                    if (MessageObject.isVideoDocument(document)) {
+                    if (params != null && params.containsKey("query_id")) {
+                        type = 9;
+                    } else if (MessageObject.isVideoDocument(document)) {
                         type = 3;
                     } else if (MessageObject.isVoiceDocument(document)) {
                         type = 8;
-                    } else if (params != null && params.containsKey("query_id")) {
-                        type = 9;
                     } else {
                         type = 7;
                     }
@@ -1085,6 +1294,30 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                     } else {
                         newMsg.attachPath = path;
                     }
+                    if (encryptedChat != null && MessageObject.isStickerDocument(document)) {
+                        for (int a = 0; a < document.attributes.size(); a++) {
+                            TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                            if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
+                                if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) < 46) {
+                                    document.attributes.remove(a);
+                                    document.attributes.add(new TLRPC.TL_documentAttributeSticker_old());
+                                } else {
+                                    if (attribute.stickerset != null) {
+                                        String name = StickersQuery.getStickerSetName(attribute.stickerset.id);
+                                        if (name != null && name.length() > 0) {
+                                            attribute.stickerset = new TLRPC.TL_inputStickerSetShortName();
+                                            attribute.stickerset.short_name = name;
+                                        } else {
+                                            attribute.stickerset = new TLRPC.TL_inputStickerSetEmpty();
+                                        }
+                                    } else {
+                                        attribute.stickerset = new TLRPC.TL_inputStickerSetEmpty();
+                                    }
+                                }
+                                break;
+                            }
+                        }
+                    }
                 }
                 if (newMsg.attachPath == null) {
                     newMsg.attachPath = "";
@@ -1145,6 +1378,10 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                 }
                 newMsg.reply_to_msg_id = reply_to_msg.getId();
             }
+            if (replyMarkup != null && encryptedChat == null) {
+                newMsg.flags |= TLRPC.MESSAGE_FLAG_HAS_MARKUP;
+                newMsg.reply_markup = replyMarkup;
+            }
             if (lower_id != 0) {
                 if (high_id == 1) {
                     if (currentChatInfo == null) {
@@ -1224,6 +1461,12 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
             MessagesController.getInstance().updateInterfaceWithMessages(peer, objArr);
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
 
+            if (BuildVars.DEBUG_VERSION) {
+                if (sendToPeer != null) {
+                    FileLog.e("tmessages", "send message user_id = " + sendToPeer.user_id + " chat_id = " + sendToPeer.chat_id + " channel_id = " + sendToPeer.channel_id + " access_hash = " + sendToPeer.access_hash);
+                }
+            }
+
             if (type == 0 || type == 9 && message != null && encryptedChat != null) {
                 if (encryptedChat == null) {
                     if (sendToPeers != null) {
@@ -1523,6 +1766,7 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                     } else if (type == 2 || type == 9 && photo != null) {
                         TLRPC.PhotoSize small = photo.sizes.get(0);
                         TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
+                        ImageLoader.fillPhotoSizeWithBytes(small);
                         if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 46) {
                             reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
                             reqSend.media.caption = photo.caption != null ? photo.caption : "";
@@ -1539,7 +1783,6 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                                 ((TLRPC.TL_decryptedMessageMediaPhoto_layer8) reqSend.media).thumb = new byte[0];
                             }
                         }
-                        ImageLoader.fillPhotoSizeWithBytes(small);
                         reqSend.media.thumb_h = small.h;
                         reqSend.media.thumb_w = small.w;
                         reqSend.media.w = big.w;
@@ -1746,7 +1989,12 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                 TLRPC.TL_messages_forwardMessages reqSend = new TLRPC.TL_messages_forwardMessages();
                 reqSend.to_peer = sendToPeer;
                 if (retryMessageObject.messageOwner.ttl != 0) {
-                    reqSend.from_peer = MessagesController.getInputPeer(retryMessageObject.messageOwner.ttl);
+                    TLRPC.Chat chat = MessagesController.getInstance().getChat(-retryMessageObject.messageOwner.ttl);
+                    reqSend.from_peer = new TLRPC.TL_inputPeerChannel();
+                    reqSend.from_peer.channel_id = -retryMessageObject.messageOwner.ttl;
+                    if (chat != null) {
+                        reqSend.from_peer.access_hash = chat.access_hash;
+                    }
                 } else {
                     reqSend.from_peer = new TLRPC.TL_inputPeerEmpty();
                 }
@@ -1796,13 +2044,23 @@ private void performSendDelayedMessage(final DelayedMessage message) {
         if (message.type == 0) {
             if (message.httpLocation != null) {
                 putToDelayedMessages(message.httpLocation, message);
-                ImageLoader.getInstance().loadHttpFile(message.httpLocation, "jpg");
+                ImageLoader.getInstance().loadHttpFile(message.httpLocation, "file");
             } else {
-                String location = FileLoader.getPathToAttach(message.location, true).toString();
-                putToDelayedMessages(location, message);
                 if (message.sendRequest != null) {
+                    String location = FileLoader.getPathToAttach(message.location).toString();
+                    putToDelayedMessages(location, message);
                     FileLoader.getInstance().uploadFile(location, false, true);
                 } else {
+                    String location = FileLoader.getPathToAttach(message.location).toString();
+                    if (message.sendEncryptedRequest != null && message.location.dc_id != 0) {
+                        File file = new File(location);
+                        if (!file.exists()) {
+                            putToDelayedMessages(FileLoader.getAttachFileName(message.location), message);
+                            FileLoader.getInstance().loadFile(message.location, "jpg", 0, false);
+                            return;
+                        }
+                    }
+                    putToDelayedMessages(location, message);
                     FileLoader.getInstance().uploadFile(location, true, true);
                 }
             }
@@ -2002,6 +2260,7 @@ public void run() {
 
                             if (!isSentError) {
                                 newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, (isBroadcast ? oldId : newMsgObj.id), newMsgObj, newMsgObj.dialog_id); //TODO remove later?
                                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                                     @Override
                                     public void run() {
@@ -2137,8 +2396,10 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                     size2.location = size.location;
                     size2.size = size.size;
                 }
-            } else if (MessageObject.isStickerMessage(sentMessage) && size2 != null && size2.location != null) {
+            } else if (size2 != null && MessageObject.isStickerMessage(sentMessage) && size2.location != null) {
                 size.location = size2.location;
+            } else if (size2 != null && size2.location instanceof TLRPC.TL_fileLocationUnavailable) {
+                newMsg.media.document.thumb = sentMessage.media.document.thumb;
             }
 
             newMsg.media.document.dc_id = sentMessage.media.document.dc_id;
@@ -2274,7 +2535,7 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
             if (extension == null) {
                 extension = "txt";
             }
-            path = MediaController.copyDocumentToCache(uri, extension);
+            path = MediaController.copyFileToCache(uri, extension);
             if (path == null) {
                 return false;
             }
@@ -2289,7 +2550,7 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
 
         String name = f.getName();
         String ext = "";
-        int idx = path.lastIndexOf(".");
+        int idx = path.lastIndexOf('.');
         if (idx != -1) {
             ext = path.substring(idx + 1);
         }
@@ -2388,25 +2649,9 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
                     FileLog.e("tmessages", e);
                 }
                 if (bmOptions.outWidth != 0 && bmOptions.outHeight != 0 && bmOptions.outWidth <= 800 && bmOptions.outHeight <= 800) {
-                    TLRPC.TL_documentAttributeSticker attributeSticker;
-                    if (isEncrypted) {
-                        int high_id = (int) (dialog_id >> 32);
-                        TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
-                        if (encryptedChat == null) {
-                            return false;
-                        }
-                        if (AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 46) {
-                            attributeSticker = new TLRPC.TL_documentAttributeSticker();
-                            attributeSticker.alt = "";
-                            attributeSticker.stickerset = new TLRPC.TL_inputStickerSetEmpty();
-                        } else {
-                            attributeSticker = new TLRPC.TL_documentAttributeSticker_old();
-                        }
-                    } else {
-                        attributeSticker = new TLRPC.TL_documentAttributeSticker();
-                        attributeSticker.alt = "";
-                        attributeSticker.stickerset = new TLRPC.TL_inputStickerSetEmpty();
-                    }
+                    TLRPC.TL_documentAttributeSticker attributeSticker = new TLRPC.TL_documentAttributeSticker();
+                    attributeSticker.alt = "";
+                    attributeSticker.stickerset = new TLRPC.TL_inputStickerSetEmpty();
                     document.attributes.add(attributeSticker);
                     TLRPC.TL_documentAttributeImageSize attributeImageSize = new TLRPC.TL_documentAttributeImageSize();
                     attributeImageSize.w = bmOptions.outWidth;
@@ -2430,7 +2675,7 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
-                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, asAdmin, params);
+                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, asAdmin, null, params);
             }
         });
         return true;
@@ -2503,7 +2748,7 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            SendMessagesHelper.getInstance().sendMessage(documentFinal, null, messageObject.messageOwner.attachPath, dialog_id, reply_to_msg, asAdmin, params);
+                            SendMessagesHelper.getInstance().sendMessage(documentFinal, null, messageObject.messageOwner.attachPath, dialog_id, reply_to_msg, asAdmin, null, params);
                         }
                     });
                 }
@@ -2580,74 +2825,177 @@ public void run() {
                     String finalPath = null;
                     TLRPC.TL_document document = null;
                     TLRPC.TL_photo photo = null;
-                    if (result instanceof TLRPC.TL_botInlineMediaResultDocument) {
+                    if (result instanceof TLRPC.TL_botInlineMediaResult) {
                         if (result.document != null) {
                             if (result.document instanceof TLRPC.TL_document) {
                                 document = (TLRPC.TL_document) result.document;
                             }
-                        }
-                    } else if (result instanceof TLRPC.TL_botInlineMediaResultPhoto) {
-                        if (result.photo != null) {
+                        } else if (result.photo != null) {
                             if (result.photo instanceof TLRPC.TL_photo) {
                                 photo = (TLRPC.TL_photo) result.photo;
                             }
                         }
                     } else {
-
                         if (result.content_url != null) {
-                            finalPath = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(result.content_url) + "." + ImageLoader.getHttpUrlExtension(result.content_url, "jpg")).getAbsolutePath();
-                            if (result.type.equals("gif")){
-                                document = new TLRPC.TL_document();
-                                document.id = 0;
-                                document.date = ConnectionsManager.getInstance().getCurrentTime();
-                                TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
-                                fileName.file_name = "animation.gif";
-                                document.attributes.add(fileName);
-                                document.size = 0;
-                                document.dc_id = 0;
-                                if (finalPath.endsWith("mp4")) {
-                                    document.mime_type = "video/mp4";
-                                    document.attributes.add(new TLRPC.TL_documentAttributeAnimated());
-                                } else {
-                                    document.mime_type = "image/gif";
-                                }
-                                try {
-                                    Bitmap bitmap;
-                                    if (finalPath.endsWith("mp4")) {
-                                        bitmap = ThumbnailUtils.createVideoThumbnail(finalPath, MediaStore.Video.Thumbnails.MINI_KIND);
-                                    } else {
-                                        bitmap = ImageLoader.loadBitmap(finalPath, null, 90, 90, true);
+                            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(result.content_url) + "." + ImageLoader.getHttpUrlExtension(result.content_url, "file"));
+                            if (f.exists()) {
+                                finalPath = f.getAbsolutePath();
+                            } else {
+                                finalPath = result.content_url;
+                            }
+                            switch (result.type) {
+                                case "audio":
+                                case "voice":
+                                case "file":
+                                case "video":
+                                case "sticker":
+                                case "gif": {
+                                    document = new TLRPC.TL_document();
+                                    document.id = 0;
+                                    document.size = 0;
+                                    document.dc_id = 0;
+                                    document.mime_type = result.content_type;
+                                    document.date = ConnectionsManager.getInstance().getCurrentTime();
+                                    TLRPC.TL_documentAttributeFilename fileName = new TLRPC.TL_documentAttributeFilename();
+                                    document.attributes.add(fileName);
+
+                                    switch (result.type) {
+                                        case "gif": {
+                                            fileName.file_name = "animation.gif";
+                                            if (finalPath.endsWith("mp4")) {
+                                                document.mime_type = "video/mp4";
+                                                document.attributes.add(new TLRPC.TL_documentAttributeAnimated());
+                                            } else {
+                                                document.mime_type = "image/gif";
+                                            }
+                                            try {
+                                                Bitmap bitmap;
+                                                if (finalPath.endsWith("mp4")) {
+                                                    bitmap = ThumbnailUtils.createVideoThumbnail(finalPath, MediaStore.Video.Thumbnails.MINI_KIND);
+                                                } else {
+                                                    bitmap = ImageLoader.loadBitmap(finalPath, null, 90, 90, true);
+                                                }
+                                                if (bitmap != null) {
+                                                    document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, false);
+                                                    bitmap.recycle();
+                                                }
+                                            } catch (Throwable e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            break;
+                                        }
+                                        case "voice": {
+                                            TLRPC.TL_documentAttributeAudio audio = new TLRPC.TL_documentAttributeAudio();
+                                            audio.duration = result.duration;
+                                            audio.voice = true;
+                                            fileName.file_name = "audio.ogg";
+                                            document.attributes.add(audio);
+
+                                            document.thumb = new TLRPC.TL_photoSizeEmpty();
+                                            document.thumb.type = "s";
+
+                                            break;
+                                        }
+                                        case "audio": {
+                                            TLRPC.TL_documentAttributeAudio audio = new TLRPC.TL_documentAttributeAudio();
+                                            audio.duration = result.duration;
+                                            audio.title = result.title;
+                                            audio.flags |= 1;
+                                            if (result.description != null) {
+                                                audio.performer = result.description;
+                                                audio.flags |= 2;
+                                            }
+                                            fileName.file_name = "audio.mp3";
+                                            document.attributes.add(audio);
+
+                                            document.thumb = new TLRPC.TL_photoSizeEmpty();
+                                            document.thumb.type = "s";
+
+                                            break;
+                                        }
+                                        case "file": {
+                                            int idx = result.content_type.indexOf('/');
+                                            if (idx != -1) {
+                                                fileName.file_name = "file." + result.content_type.substring(idx + 1);
+                                            } else {
+                                                fileName.file_name = "file";
+                                            }
+                                            break;
+                                        }
+                                        case "video": {
+                                            fileName.file_name = "video.mp4";
+                                            TLRPC.TL_documentAttributeVideo attributeVideo = new TLRPC.TL_documentAttributeVideo();
+                                            attributeVideo.w = result.w;
+                                            attributeVideo.h = result.h;
+                                            attributeVideo.duration = result.duration;
+                                            document.attributes.add(attributeVideo);
+                                            try {
+                                                String thumbPath = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(result.thumb_url) + "." + ImageLoader.getHttpUrlExtension(result.thumb_url, "jpg")).getAbsolutePath();
+                                                Bitmap bitmap = ImageLoader.loadBitmap(thumbPath, null, 90, 90, true);
+                                                if (bitmap != null) {
+                                                    document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, false);
+                                                    bitmap.recycle();
+                                                }
+                                            } catch (Throwable e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            break;
+                                        }
+                                        case "sticker": {
+                                            TLRPC.TL_documentAttributeSticker attributeSticker = new TLRPC.TL_documentAttributeSticker();
+                                            attributeSticker.alt = "";
+                                            attributeSticker.stickerset = new TLRPC.TL_inputStickerSetEmpty();
+                                            document.attributes.add(attributeSticker);
+                                            TLRPC.TL_documentAttributeImageSize attributeImageSize = new TLRPC.TL_documentAttributeImageSize();
+                                            attributeImageSize.w = result.w;
+                                            attributeImageSize.h = result.h;
+                                            document.attributes.add(attributeImageSize);
+                                            fileName.file_name = "sticker.webp";
+                                            try {
+                                                String thumbPath = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), Utilities.MD5(result.thumb_url) + "." + ImageLoader.getHttpUrlExtension(result.thumb_url, "webp")).getAbsolutePath();
+                                                Bitmap bitmap = ImageLoader.loadBitmap(thumbPath, null, 90, 90, true); //TODO support on old androids
+                                                if (bitmap != null) {
+                                                    document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, false);
+                                                    bitmap.recycle();
+                                                }
+                                            } catch (Throwable e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            break;
+                                        }
                                     }
-                                    if (bitmap != null) {
-                                        document.thumb = ImageLoader.scaleAndSaveImage(bitmap, 90, 90, 55, false);
-                                        bitmap.recycle();
+                                    if (fileName.file_name == null) {
+                                        fileName.file_name = "file";
                                     }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                                if (document.thumb == null) {
-                                    document.thumb = new TLRPC.TL_photoSize();
-                                    document.thumb.w = result.w;
-                                    document.thumb.h = result.h;
-                                    document.thumb.size = 0;
-                                    document.thumb.location = new TLRPC.TL_fileLocationUnavailable();
-                                    document.thumb.type = "x";
-                                }
-                            } else if (result.type.equals("photo")) {
-                                File cacheFile = new File(finalPath);
-                                if (cacheFile.exists()) {
-                                    photo = SendMessagesHelper.getInstance().generatePhotoSizes(cacheFile.toString(), null);
+                                    if (document.mime_type == null) {
+                                        document.mime_type = "application/octet-stream";
+                                    }
+                                    if (document.thumb == null) {
+                                        document.thumb = new TLRPC.TL_photoSize();
+                                        document.thumb.w = result.w;
+                                        document.thumb.h = result.h;
+                                        document.thumb.size = 0;
+                                        document.thumb.location = new TLRPC.TL_fileLocationUnavailable();
+                                        document.thumb.type = "x";
+                                    }
+                                    break;
                                 }
-                                if (photo == null) {
-                                    photo = new TLRPC.TL_photo();
-                                    photo.date = ConnectionsManager.getInstance().getCurrentTime();
-                                    TLRPC.TL_photoSize photoSize = new TLRPC.TL_photoSize();
-                                    photoSize.w = result.w;
-                                    photoSize.h = result.h;
-                                    photoSize.size = 1;
-                                    photoSize.location = new TLRPC.TL_fileLocationUnavailable();
-                                    photoSize.type = "x";
-                                    photo.sizes.add(photoSize);
+                                case "photo": {
+                                    if (f.exists()) {
+                                        photo = SendMessagesHelper.getInstance().generatePhotoSizes(finalPath, null);
+                                    }
+                                    if (photo == null) {
+                                        photo = new TLRPC.TL_photo();
+                                        photo.date = ConnectionsManager.getInstance().getCurrentTime();
+                                        TLRPC.TL_photoSize photoSize = new TLRPC.TL_photoSize();
+                                        photoSize.w = result.w;
+                                        photoSize.h = result.h;
+                                        photoSize.size = 1;
+                                        photoSize.location = new TLRPC.TL_fileLocationUnavailable();
+                                        photoSize.type = "x";
+                                        photo.sizes.add(photoSize);
+                                    }
+                                    break;
                                 }
                             }
                         }
@@ -2663,17 +3011,35 @@ public void run() {
                         public void run() {
                             if (finalDocument != null) {
                                 finalDocument.caption = result.send_message.caption;
-                                SendMessagesHelper.getInstance().sendMessage(finalDocument, null, finalPathFinal, dialog_id, reply_to_msg, asAdmin, params);
+                                SendMessagesHelper.getInstance().sendMessage(finalDocument, null, finalPathFinal, dialog_id, reply_to_msg, asAdmin, result.send_message.reply_markup, params);
                             } else if (finalPhoto != null) {
                                 finalPhoto.caption = result.send_message.caption;
-                                SendMessagesHelper.getInstance().sendMessage(finalPhoto, result.content_url, dialog_id, reply_to_msg, asAdmin, params);
+                                SendMessagesHelper.getInstance().sendMessage(finalPhoto, result.content_url, dialog_id, reply_to_msg, asAdmin, result.send_message.reply_markup, params);
                             }
                         }
                     });
                 }
             }).run();
         } else if (result.send_message instanceof TLRPC.TL_botInlineMessageText) {
-            SendMessagesHelper.getInstance().sendMessage(result.send_message.message, dialog_id, reply_to_msg, null, !result.send_message.no_webpage, asAdmin, result.send_message.entities, params);
+            SendMessagesHelper.getInstance().sendMessage(result.send_message.message, dialog_id, reply_to_msg, null, !result.send_message.no_webpage, asAdmin, result.send_message.entities, result.send_message.reply_markup, params);
+        } else if (result.send_message instanceof TLRPC.TL_botInlineMessageMediaVenue) {
+            TLRPC.TL_messageMediaVenue venue = new TLRPC.TL_messageMediaVenue();
+            venue.geo = result.send_message.geo;
+            venue.address = result.send_message.address;
+            venue.title = result.send_message.title;
+            venue.provider = result.send_message.provider;
+            venue.venue_id = result.send_message.venue_id;
+            SendMessagesHelper.getInstance().sendMessage(venue, dialog_id, reply_to_msg, asAdmin, result.send_message.reply_markup, params);
+        } else if (result.send_message instanceof TLRPC.TL_botInlineMessageMediaGeo) {
+            TLRPC.TL_messageMediaGeo location = new TLRPC.TL_messageMediaGeo();
+            location.geo = result.send_message.geo;
+            SendMessagesHelper.getInstance().sendMessage(location, dialog_id, reply_to_msg, asAdmin, result.send_message.reply_markup, params);
+        } else if (result.send_message instanceof TLRPC.TL_botInlineMessageMediaContact) {
+            TLRPC.User user = new TLRPC.TL_user();
+            user.phone = result.send_message.phone_number;
+            user.first_name = result.send_message.first_name;
+            user.last_name = result.send_message.last_name;
+            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, reply_to_msg, asAdmin, result.send_message.reply_markup, params);
         }
     }
 
@@ -2773,7 +3139,7 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, asAdmin, params);
+                                SendMessagesHelper.getInstance().sendMessage(documentFinal, null, pathFinal, dialog_id, reply_to_msg, asAdmin, null, params);
                             }
                         });
                     } else {
@@ -2823,7 +3189,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg, asAdmin, params);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg, asAdmin, null, params);
                                 }
                             });
                         }
@@ -2862,7 +3228,7 @@ public void run() {
                                     int count = (int) Math.ceil(textFinal.length() / 4096.0f);
                                     for (int a = 0; a < count; a++) {
                                         String mess = textFinal.substring(a * 4096, Math.min((a + 1) * 4096, textFinal.length()));
-                                        SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, null, null, true, asAdmin, null, null);
+                                        SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, null, null, true, asAdmin, null, null, null);
                                     }
                                 }
                             }
@@ -2923,12 +3289,12 @@ public void run() {
                         if (MediaController.isGif(uri)) {
                             isDocument = true;
                             originalPath = uri.toString();
-                            tempPath = MediaController.copyDocumentToCache(uri, "gif");
+                            tempPath = MediaController.copyFileToCache(uri, "gif");
                             extension = "gif";
                         } else if (MediaController.isWebp(uri)) {
                             isDocument = true;
                             originalPath = uri.toString();
-                            tempPath = MediaController.copyDocumentToCache(uri, "webp");
+                            tempPath = MediaController.copyFileToCache(uri, "webp");
                             extension = "webp";
                         }
                     }
@@ -2971,7 +3337,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, null, dialog_id, reply_to_msg, asAdmin, params);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, null, dialog_id, reply_to_msg, asAdmin, null, params);
                                 }
                             });
                         }
@@ -3009,8 +3375,7 @@ public void run() {
                     }
                     TLRPC.TL_document document = null;
                     if (!isEncrypted) {
-                        TLObject object = MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
-                        document = (TLRPC.TL_document) object;
+                        //document = (TLRPC.TL_document) MessagesStorage.getInstance().getSentFile(originalPath, !isEncrypted ? 2 : 5);
                     }
                     if (document == null) {
                         Bitmap thumb = ThumbnailUtils.createVideoThumbnail(videoPath, MediaStore.Video.Thumbnails.MINI_KIND);
@@ -3102,7 +3467,7 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            SendMessagesHelper.getInstance().sendMessage(videoFinal, videoEditedInfo, finalPath, dialog_id, reply_to_msg, asAdmin, params);
+                            SendMessagesHelper.getInstance().sendMessage(videoFinal, videoEditedInfo, finalPath, dialog_id, reply_to_msg, asAdmin, null, params);
                         }
                     });
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java
new file mode 100644
index 000000000..ab6b11638
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ShareBroadcastReceiver.java
@@ -0,0 +1,29 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.messenger;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+
+public class ShareBroadcastReceiver extends BroadcastReceiver {
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        String url = intent.getDataString();
+        if (url != null) {
+            Intent shareIntent = new Intent(Intent.ACTION_SEND);
+            shareIntent.setType("text/plain");
+            shareIntent.putExtra(Intent.EXTRA_TEXT, url);
+            Intent chooserIntent = Intent.createChooser(shareIntent, LocaleController.getString("ShareLink", R.string.ShareLink));
+            chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            context.startActivity(chooserIntent);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java b/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
index 6f017e673..7f89fcb80 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TgChooserTargetService.java
@@ -9,8 +9,10 @@
 package org.telegram.messenger;
 
 import android.annotation.TargetApi;
+import android.app.Activity;
 import android.content.ComponentName;
 import android.content.IntentFilter;
+import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.BitmapShader;
@@ -48,6 +50,11 @@
         if (!UserConfig.isClientActivated()) {
             return targets;
         }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (!preferences.getBoolean("direct_share", true)) {
+            return targets;
+        }
+
         ImageLoader imageLoader = ImageLoader.getInstance();
         final Semaphore semaphore = new Semaphore(0);
         final ComponentName componentName = new ComponentName(getPackageName(), LaunchActivity.class.getCanonicalName());
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index 694180579..15bf1bb2d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -47,7 +47,7 @@
 
     public native static void loadBitmap(String path, Bitmap bitmap, int scale, int width, int height, int stride);
     public native static int pinBitmap(Bitmap bitmap);
-    public native static int unpinBitmap(Bitmap bitmap);
+    public native static void unpinBitmap(Bitmap bitmap);
     public native static void blurBitmap(Object bitmap, int radius, int unpin, int width, int height, int stride);
     public native static void calcCDT(ByteBuffer hsvBuffer, int width, int height, ByteBuffer buffer);
     public native static boolean loadWebpImage(Bitmap bitmap, ByteBuffer buffer, int len, BitmapFactory.Options options, boolean unpin);
@@ -255,8 +255,8 @@ public static String MD5(String md5) {
             java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
             byte[] array = md.digest(md5.getBytes());
             StringBuilder sb = new StringBuilder();
-            for (byte anArray : array) {
-                sb.append(Integer.toHexString((anArray & 0xFF) | 0x100).substring(1, 3));
+            for (int a = 0; a < array.length; a++) {
+                sb.append(Integer.toHexString((array[a] & 0xFF) | 0x100).substring(1, 3));
             }
             return sb.toString();
         } catch (java.security.NoSuchAlgorithmException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/WearReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/WearReplyReceiver.java
index 46371c2bf..911daf078 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/WearReplyReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/WearReplyReceiver.java
@@ -18,6 +18,7 @@
 
     @Override
     public void onReceive(Context context, Intent intent) {
+        ApplicationLoader.postInitApplication();
         Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
         if (remoteInput == null) {
             return;
@@ -31,7 +32,7 @@ public void onReceive(Context context, Intent intent) {
         if (dialog_id == 0 || max_id == 0) {
             return;
         }
-        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true, false, null, null);
+        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null, null, true, false, null, null, null);
         MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, true, false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
new file mode 100644
index 000000000..ae01ce9a2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/browser/Browser.java
@@ -0,0 +1,188 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.messenger.browser;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.BitmapFactory;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.TextUtils;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.ShareBroadcastReceiver;
+import org.telegram.messenger.support.customtabs.CustomTabsCallback;
+import org.telegram.messenger.support.customtabs.CustomTabsClient;
+import org.telegram.messenger.support.customtabs.CustomTabsIntent;
+import org.telegram.messenger.support.customtabs.CustomTabsServiceConnection;
+import org.telegram.messenger.support.customtabs.CustomTabsSession;
+import org.telegram.messenger.support.customtabsclient.shared.CustomTabsHelper;
+import org.telegram.messenger.support.customtabsclient.shared.ServiceConnection;
+import org.telegram.messenger.support.customtabsclient.shared.ServiceConnectionCallback;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.LaunchActivity;
+
+import java.lang.ref.WeakReference;
+
+public class Browser {
+
+    private static WeakReference<CustomTabsSession> customTabsCurrentSession;
+    private static CustomTabsSession customTabsSession;
+    private static CustomTabsClient customTabsClient;
+    private static CustomTabsServiceConnection customTabsServiceConnection;
+    private static String customTabsPackageToBind;
+    private static WeakReference<Activity> currentCustomTabsActivity;
+
+    private static CustomTabsSession getCurrentSession() {
+        return customTabsCurrentSession == null ? null : customTabsCurrentSession.get();
+    }
+
+    private static void setCurrentSession(CustomTabsSession session) {
+        customTabsCurrentSession = new WeakReference<>(session);
+    }
+
+    private static CustomTabsSession getSession() {
+        if (customTabsClient == null) {
+            customTabsSession = null;
+        } else if (customTabsSession == null) {
+            customTabsSession = customTabsClient.newSession(new NavigationCallback());
+            setCurrentSession(customTabsSession);
+        }
+        return customTabsSession;
+    }
+
+    public static void bindCustomTabsService(Activity activity) {
+        if (Build.VERSION.SDK_INT < 15) {
+            return;
+        }
+        Activity currentActivity = currentCustomTabsActivity == null ? null : currentCustomTabsActivity.get();
+        if (currentActivity != null && currentActivity != activity) {
+            unbindCustomTabsService(currentActivity);
+        }
+        if (customTabsClient != null) {
+            return;
+        }
+        currentCustomTabsActivity = new WeakReference<>(activity);
+        try {
+            if (TextUtils.isEmpty(customTabsPackageToBind)) {
+                customTabsPackageToBind = CustomTabsHelper.getPackageNameToUse(activity);
+                if (customTabsPackageToBind == null) {
+                    return;
+                }
+            }
+            customTabsServiceConnection = new ServiceConnection(new ServiceConnectionCallback() {
+                @Override
+                public void onServiceConnected(CustomTabsClient client) {
+                    customTabsClient = client;
+                    if (customTabsClient != null) {
+                        customTabsClient.warmup(0);
+                    }
+                }
+
+                @Override
+                public void onServiceDisconnected() {
+                    customTabsClient = null;
+                }
+            });
+            if (!CustomTabsClient.bindCustomTabsService(activity, customTabsPackageToBind, customTabsServiceConnection)) {
+                customTabsServiceConnection = null;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public static void unbindCustomTabsService(Activity activity) {
+        if (Build.VERSION.SDK_INT < 15 || customTabsServiceConnection == null) {
+            return;
+        }
+        Activity currentActivity = currentCustomTabsActivity == null ? null : currentCustomTabsActivity.get();
+        if (currentActivity == activity) {
+            currentCustomTabsActivity.clear();
+        }
+        try {
+            activity.unbindService(customTabsServiceConnection);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        customTabsClient = null;
+        customTabsSession = null;
+    }
+
+    private static class NavigationCallback extends CustomTabsCallback {
+        @Override
+        public void onNavigationEvent(int navigationEvent, Bundle extras) {
+            FileLog.e("tmessages", "code = " + navigationEvent + " extras " + extras);
+        }
+    }
+
+    public static void openUrl(Context context, String url) {
+        openUrl(context, Uri.parse(url), true);
+    }
+
+    public static void openUrl(Context context, Uri uri) {
+        openUrl(context, uri, true);
+    }
+
+    public static void openUrl(Context context, String url, boolean allowCustom) {
+        if (context == null || url == null) {
+            return;
+        }
+        openUrl(context, Uri.parse(url), allowCustom);
+    }
+
+    public static void openUrl(Context context, Uri uri, boolean allowCustom) {
+        if (context == null || uri == null) {
+            return;
+        }
+
+        try {
+            boolean internalUri = isInternalUri(uri);
+            if (Build.VERSION.SDK_INT >= 15 && allowCustom && MediaController.getInstance().canCustomTabs() && !internalUri) {
+                Intent share = new Intent(ApplicationLoader.applicationContext, ShareBroadcastReceiver.class);
+                share.setAction(Intent.ACTION_SEND);
+
+                CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(getSession());
+                builder.setToolbarColor(Theme.ACTION_BAR_COLOR);
+                builder.setShowTitle(true);
+                builder.setActionButton(BitmapFactory.decodeResource(context.getResources(), R.drawable.abc_ic_menu_share_mtrl_alpha), LocaleController.getString("ShareFile", R.string.ShareFile), PendingIntent.getBroadcast(ApplicationLoader.applicationContext, 0, share, 0), false);
+                CustomTabsIntent intent = builder.build();
+                intent.launchUrl((Activity) context, uri);
+            } else {
+                Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+                if (internalUri) {
+                    ComponentName componentName = new ComponentName(context.getPackageName(), LaunchActivity.class.getName());
+                    intent.setComponent(componentName);
+                }
+                intent.putExtra(android.provider.Browser.EXTRA_APPLICATION_ID, context.getPackageName());
+                context.startActivity(intent);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public static boolean isInternalUrl(String url) {
+        return isInternalUri(Uri.parse(url));
+    }
+
+    public static boolean isInternalUri(Uri uri) {
+        String host = uri.getHost();
+        host = host != null ? host.toLowerCase() : "";
+        return "tg".equals(uri.getScheme()) || "telegram.me".equals(host) || "telegram.dog".equals(host);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/BotQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/BotQuery.java
index ab3f8a9f8..03646523b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/BotQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/BotQuery.java
@@ -179,7 +179,7 @@ public void run() {
     }
 
     public static void putBotInfo(final TLRPC.BotInfo botInfo) {
-        if (botInfo == null || botInfo instanceof TLRPC.TL_botInfoEmpty) {
+        if (botInfo == null) {
             return;
         }
         botInfos.put(botInfo.user_id, botInfo);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/ReplyMessageQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/MessagesQuery.java
similarity index 65%
rename from TMessagesProj/src/main/java/org/telegram/messenger/query/ReplyMessageQuery.java
rename to TMessagesProj/src/main/java/org/telegram/messenger/query/MessagesQuery.java
index 4ef51007c..d7e767ab3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/ReplyMessageQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/MessagesQuery.java
@@ -29,10 +29,158 @@
 import java.util.HashMap;
 import java.util.Locale;
 
-public class ReplyMessageQuery {
+public class MessagesQuery {
 
-    public static void loadReplyMessagesForMessages(final ArrayList<MessageObject> messages, final long dialog_id) {
-        if ((int) dialog_id == 0) {
+    public static MessageObject loadPinnedMessage(final int channelId, final int mid, boolean useQueue) {
+        if (useQueue) {
+            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    loadPinnedMessageInternal(channelId, mid, false);
+                }
+            });
+        } else {
+            return loadPinnedMessageInternal(channelId, mid, true);
+        }
+        return null;
+    }
+
+    private static MessageObject loadPinnedMessageInternal(final int channelId, final int mid, boolean returnValue) {
+        try {
+            long messageId = ((long) mid) | ((long) channelId) << 32;
+
+            TLRPC.Message result = null;
+            final ArrayList<TLRPC.User> users = new ArrayList<>();
+            final ArrayList<TLRPC.Chat> chats = new ArrayList<>();
+            ArrayList<Integer> usersToLoad = new ArrayList<>();
+            ArrayList<Integer> chatsToLoad = new ArrayList<>();
+
+            SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid = %d", messageId));
+            if (cursor.next()) {
+                NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                    result = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                    result.id = cursor.intValue(1);
+                    result.date = cursor.intValue(2);
+                    result.dialog_id = -channelId;
+                    MessagesStorage.addUsersAndChatsFromMessage(result, usersToLoad, chatsToLoad);
+                }
+                data.reuse();
+            }
+            cursor.dispose();
+
+            if (result == null) {
+                cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data FROM chat_pinned WHERE uid = %d", channelId));
+                if (cursor.next()) {
+                    NativeByteBuffer data = new NativeByteBuffer(cursor.byteArrayLength(0));
+                    if (data != null && cursor.byteBufferValue(0, data) != 0) {
+                        result = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
+                        if (result.id != mid) {
+                            result = null;
+                        } else {
+                            result.dialog_id = -channelId;
+                            MessagesStorage.addUsersAndChatsFromMessage(result, usersToLoad, chatsToLoad);
+                        }
+                    }
+                    data.reuse();
+                }
+                cursor.dispose();
+            }
+
+            if (result == null) {
+                final TLRPC.TL_channels_getMessages req = new TLRPC.TL_channels_getMessages();
+                req.channel = MessagesController.getInputChannel(channelId);
+                req.id.add(mid);
+                ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                    @Override
+                    public void run(TLObject response, TLRPC.TL_error error) {
+                        boolean ok = false;
+                        if (error == null) {
+                            TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
+                            if (!messagesRes.messages.isEmpty()) {
+                                ImageLoader.saveMessagesThumbs(messagesRes.messages);
+                                broadcastPinnedMessage(messagesRes.messages.get(0), messagesRes.users, messagesRes.chats, false, false);
+                                MessagesStorage.getInstance().putUsersAndChats(messagesRes.users, messagesRes.chats, true, true);
+                                savePinnedMessage(messagesRes.messages.get(0));
+                                ok = true;
+                            }
+                        }
+                        if (!ok) {
+                            MessagesStorage.getInstance().updateChannelPinnedMessage(channelId, 0);
+                        }
+                    }
+                });
+            } else {
+                if (returnValue) {
+                    return broadcastPinnedMessage(result, users, chats, true, returnValue);
+                } else {
+                    if (!usersToLoad.isEmpty()) {
+                        MessagesStorage.getInstance().getUsersInternal(TextUtils.join(",", usersToLoad), users);
+                    }
+                    if (!chatsToLoad.isEmpty()) {
+                        MessagesStorage.getInstance().getChatsInternal(TextUtils.join(",", chatsToLoad), chats);
+                    }
+                    broadcastPinnedMessage(result, users, chats, true, false);
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+
+    private static void savePinnedMessage(final TLRPC.Message result) {
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    MessagesStorage.getInstance().getDatabase().beginTransaction();
+                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO chat_pinned VALUES(?, ?, ?)");
+                    NativeByteBuffer data = new NativeByteBuffer(result.getObjectSize());
+                    result.serializeToStream(data);
+                    state.requery();
+                    state.bindInteger(1, result.to_id.channel_id);
+                    state.bindInteger(2, result.id);
+                    state.bindByteBuffer(3, data);
+                    state.step();
+                    data.reuse();
+                    state.dispose();
+                    MessagesStorage.getInstance().getDatabase().commitTransaction();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    private static MessageObject broadcastPinnedMessage(final TLRPC.Message result, final ArrayList<TLRPC.User> users, final ArrayList<TLRPC.Chat> chats, final boolean isCache, boolean returnValue) {
+        final HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
+        for (int a = 0; a < users.size(); a++) {
+            TLRPC.User user = users.get(a);
+            usersDict.put(user.id, user);
+        }
+        final HashMap<Integer, TLRPC.Chat> chatsDict = new HashMap<>();
+        for (int a = 0; a < chats.size(); a++) {
+            TLRPC.Chat chat = chats.get(a);
+            chatsDict.put(chat.id, chat);
+        }
+        if (returnValue) {
+            return new MessageObject(result, usersDict, chatsDict, false);
+        } else {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    MessagesController.getInstance().putUsers(users, isCache);
+                    MessagesController.getInstance().putChats(chats, isCache);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didLoadedPinnedMessage, new MessageObject(result, usersDict, chatsDict, false));
+                }
+            });
+        }
+        return null;
+    }
+
+    public static void loadReplyMessagesForMessages(final ArrayList<MessageObject> messages, final long dialogId) {
+        if ((int) dialogId == 0) {
             final ArrayList<Long> replyMessages = new ArrayList<>();
             final HashMap<Long, ArrayList<MessageObject>> replyMessageRandomOwners = new HashMap<>();
             final StringBuilder stringBuilder = new StringBuilder();
@@ -70,7 +218,7 @@ public void run() {
                                 TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                                 message.id = cursor.intValue(1);
                                 message.date = cursor.intValue(2);
-                                message.dialog_id = dialog_id;
+                                message.dialog_id = dialogId;
 
 
                                 ArrayList<MessageObject> arrayList = replyMessageRandomOwners.remove(cursor.longValue(3));
@@ -97,7 +245,7 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.didLoadedReplyMessages, dialog_id);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.didLoadedReplyMessages, dialogId);
                             }
                         });
                     } catch (Exception e) {
@@ -105,7 +253,6 @@ public void run() {
                     }
                 }
             });
-
         } else {
             final ArrayList<Integer> replyMessages = new ArrayList<>();
             final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners = new HashMap<>();
@@ -157,7 +304,7 @@ public void run() {
                                 TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
                                 message.id = cursor.intValue(1);
                                 message.date = cursor.intValue(2);
-                                message.dialog_id = dialog_id;
+                                message.dialog_id = dialogId;
                                 MessagesStorage.addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
                                 result.add(message);
                                 replyMessages.remove((Integer) message.id);
@@ -172,7 +319,7 @@ public void run() {
                         if (!chatsToLoad.isEmpty()) {
                             MessagesStorage.getInstance().getChatsInternal(TextUtils.join(",", chatsToLoad), chats);
                         }
-                        broadcastReplyMessages(result, replyMessageOwners, users, chats, dialog_id, true);
+                        broadcastReplyMessages(result, replyMessageOwners, users, chats, dialogId, true);
 
                         if (!replyMessages.isEmpty()) {
                             if (channelIdFinal != 0) {
@@ -185,7 +332,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                         if (error == null) {
                                             TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
                                             ImageLoader.saveMessagesThumbs(messagesRes.messages);
-                                            broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, messagesRes.chats, dialog_id, false);
+                                            broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, messagesRes.chats, dialogId, false);
                                             MessagesStorage.getInstance().putUsersAndChats(messagesRes.users, messagesRes.chats, true, true);
                                             saveReplyMessages(replyMessageOwners, messagesRes.messages);
                                         }
@@ -200,7 +347,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                         if (error == null) {
                                             TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
                                             ImageLoader.saveMessagesThumbs(messagesRes.messages);
-                                            broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, messagesRes.chats, dialog_id, false);
+                                            broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, messagesRes.chats, dialogId, false);
                                             MessagesStorage.getInstance().putUsersAndChats(messagesRes.users, messagesRes.chats, true, true);
                                             saveReplyMessages(replyMessageOwners, messagesRes.messages);
                                         }
@@ -223,12 +370,14 @@ public void run() {
                 try {
                     MessagesStorage.getInstance().getDatabase().beginTransaction();
                     SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("UPDATE messages SET replydata = ? WHERE mid = ?");
-                    for (TLRPC.Message message : result) {
+                    for (int a = 0; a < result.size(); a++) {
+                        TLRPC.Message message = result.get(a);
                         ArrayList<MessageObject> messageObjects = replyMessageOwners.get(message.id);
                         if (messageObjects != null) {
                             NativeByteBuffer data = new NativeByteBuffer(message.getObjectSize());
                             message.serializeToStream(data);
-                            for (MessageObject messageObject : messageObjects) {
+                            for (int b = 0; b < messageObjects.size(); b++) {
+                                MessageObject messageObject = messageObjects.get(b);
                                 state.requery();
                                 long messageId = messageObject.getId();
                                 if (messageObject.messageOwner.to_id.channel_id != 0) {
@@ -275,6 +424,9 @@ public void run() {
                         for (int b = 0; b < arrayList.size(); b++) {
                             MessageObject m = arrayList.get(b);
                             m.replyMessageObject = messageObject;
+                            if (m.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+                                m.generatePinMessageText(null, null);
+                            }
                         }
                         changed = true;
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
index ee2a33f4c..2a1841784 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/SharedMediaQuery.java
@@ -144,12 +144,14 @@ public static int getMediaType(TLRPC.Message message) {
         if (message == null) {
             return -1;
         }
-        if (message.media instanceof TLRPC.TL_messageMediaPhoto || MessageObject.isVideoMessage(message)) {
+        if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
             return MEDIA_PHOTOVIDEO;
-        } else if (MessageObject.isVoiceMessage(message)) {
-            return MEDIA_AUDIO;
         } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
-            if (MessageObject.isStickerMessage(message)) {
+            if (MessageObject.isVoiceMessage(message)) {
+                return MEDIA_AUDIO;
+            } else if (MessageObject.isVideoMessage(message)) {
+                return MEDIA_PHOTOVIDEO;
+            } else if (MessageObject.isStickerMessage(message)) {
                 return -1;
             } else if (MessageObject.isMusicMessage(message)) {
                 return MEDIA_MUSIC;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
index c20586648..bbc794bb2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/query/StickersQuery.java
@@ -8,11 +8,7 @@
 
 package org.telegram.messenger.query;
 
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
 import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Message;
 import android.widget.Toast;
 
 import org.telegram.SQLite.SQLiteCursor;
@@ -29,8 +25,6 @@
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Components.StickersAlert;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -85,6 +79,14 @@ public static boolean isLoadingStickers() {
         return document;
     }
 
+    public static TLRPC.TL_messages_stickerSet getStickerSetByName(String name) {
+        return stickerSetsByName.get(name);
+    }
+
+    public static TLRPC.TL_messages_stickerSet getStickerSetById(Long id) {
+        return stickerSetsById.get(id);
+    }
+
     public static HashMap<String, ArrayList<TLRPC.Document>> getAllStickers() {
         return allStickers;
     }
@@ -441,100 +443,6 @@ public void run() {
         });
     }
 
-    public static void loadStickers(final BaseFragment fragment, final TLRPC.InputStickerSet stickerSet) {
-        if (fragment == null || stickerSet == null) {
-            return;
-        }
-
-        final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
-        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-        progressDialog.setCanceledOnTouchOutside(false);
-        progressDialog.setCancelable(false);
-
-        TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
-        req.stickerset = stickerSet;
-
-        final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            progressDialog.dismiss();
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        if (fragment.getParentActivity() != null && !fragment.getParentActivity().isFinishing()) {
-                            if (error == null) {
-                                final TLRPC.TL_messages_stickerSet res = (TLRPC.TL_messages_stickerSet) response;
-
-                                StickersAlert alert = new StickersAlert(fragment.getParentActivity(), res);
-                                if (res.set == null || !StickersQuery.isStickerPackInstalled(res.set.id)) {
-                                    alert.setButton(AlertDialog.BUTTON_POSITIVE, LocaleController.getString("AddStickers", R.string.AddStickers), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            TLRPC.TL_messages_installStickerSet req = new TLRPC.TL_messages_installStickerSet();
-                                            req.stickerset = stickerSet;
-                                            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                                                @Override
-                                                public void run(TLObject response, final TLRPC.TL_error error) {
-                                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                                        @Override
-                                                        public void run() {
-                                                            if (fragment.getParentActivity() != null) {
-                                                                if (error == null) {
-                                                                    Toast.makeText(fragment.getParentActivity(), LocaleController.getString("AddStickersInstalled", R.string.AddStickersInstalled), Toast.LENGTH_SHORT).show();
-                                                                } else {
-                                                                    if (error.text.equals("STICKERSETS_TOO_MUCH")) {
-                                                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("TooMuchStickersets", R.string.TooMuchStickersets), Toast.LENGTH_SHORT).show();
-                                                                    } else {
-                                                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
-                                                                    }
-                                                                }
-                                                            }
-                                                            loadStickers(false, true);
-                                                        }
-                                                    });
-                                                }
-                                            });
-                                        }
-                                    });
-                                } else {
-                                    alert.setButton(AlertDialog.BUTTON_NEUTRAL, LocaleController.getString("StickersRemove", R.string.StickersRemove), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            removeStickersSet(fragment.getParentActivity(), res.set, 0);
-                                        }
-                                    });
-                                }
-                                alert.setButton(AlertDialog.BUTTON_NEGATIVE, LocaleController.getString("Close", R.string.Close), (Message) null);
-                                fragment.setVisibleDialog(alert);
-                                alert.show();
-                            } else {
-                                Toast.makeText(fragment.getParentActivity(), LocaleController.getString("AddStickersNotFound", R.string.AddStickersNotFound), Toast.LENGTH_SHORT).show();
-                            }
-                        }
-                    }
-                });
-            }
-        });
-
-        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                ConnectionsManager.getInstance().cancelRequest(reqId, true);
-                try {
-                    dialog.dismiss();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-            }
-        });
-        fragment.setVisibleDialog(progressDialog);
-        progressDialog.show();
-    }
-
     public static void removeStickersSet(final Context context, TLRPC.StickerSet stickerSet, int hide) {
         TLRPC.TL_inputStickerSetID stickerSetID = new TLRPC.TL_inputStickerSetID();
         stickerSetID.access_hash = stickerSet.access_hash;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsCallback.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsCallback.java
new file mode 100755
index 000000000..f5cb4a320
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsCallback.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.os.Bundle;
+
+/**
+ * A callback class for custom tabs client to get messages regarding events in their custom tabs.
+ */
+public class CustomTabsCallback {
+    public static final int NAVIGATION_STARTED = 1;
+    public static final int NAVIGATION_FINISHED = 2;
+    public static final int NAVIGATION_FAILED = 3;
+    public static final int NAVIGATION_ABORTED = 4;
+    public static final int TAB_SHOWN = 5;
+    public static final int TAB_HIDDEN = 6;
+
+    public CustomTabsCallback() {
+    }
+
+    public void onNavigationEvent(int navigationEvent, Bundle extras) {
+    }
+
+    public void extraCallback(String callbackName, Bundle args) {
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsClient.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsClient.java
new file mode 100755
index 000000000..d80d30b54
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsClient.java
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.RemoteException;
+import android.text.TextUtils;
+
+public class CustomTabsClient {
+    private final ICustomTabsService mService;
+    private final ComponentName mServiceComponentName;
+
+    CustomTabsClient(ICustomTabsService service, ComponentName componentName) {
+        this.mService = service;
+        this.mServiceComponentName = componentName;
+    }
+
+    public static boolean bindCustomTabsService(Context context, String packageName, CustomTabsServiceConnection connection) {
+        Intent intent = new Intent("android.support.customtabs.action.CustomTabsService");
+        if (!TextUtils.isEmpty(packageName)) {
+            intent.setPackage(packageName);
+        }
+
+        return context.bindService(intent, connection, 33);
+    }
+
+    public boolean warmup(long flags) {
+        try {
+            return this.mService.warmup(flags);
+        } catch (RemoteException var4) {
+            return false;
+        }
+    }
+
+    public CustomTabsSession newSession(final CustomTabsCallback callback) {
+        ICustomTabsCallback.Stub wrapper = new ICustomTabsCallback.Stub() {
+            public void onNavigationEvent(int navigationEvent, Bundle extras) {
+                if (callback != null) {
+                    callback.onNavigationEvent(navigationEvent, extras);
+                }
+
+            }
+
+            public void extraCallback(String callbackName, Bundle args) throws RemoteException {
+                if (callback != null) {
+                    callback.extraCallback(callbackName, args);
+                }
+
+            }
+        };
+
+        try {
+            if (!this.mService.newSession(wrapper)) {
+                return null;
+            }
+        } catch (RemoteException var4) {
+            return null;
+        }
+
+        return new CustomTabsSession(this.mService, wrapper, this.mServiceComponentName);
+    }
+
+    public Bundle extraCommand(String commandName, Bundle args) {
+        try {
+            return this.mService.extraCommand(commandName, args);
+        } catch (RemoteException var4) {
+            return null;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsIntent.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsIntent.java
new file mode 100755
index 000000000..16bf9526f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsIntent.java
@@ -0,0 +1,206 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.app.Activity;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.AnimRes;
+import android.support.annotation.ColorInt;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.ActivityOptionsCompat;
+import android.support.v4.app.BundleCompat;
+
+import java.util.ArrayList;
+
+/**
+ * Class holding the {@link Intent} and start bundle for a Custom Tabs Activity.
+ *
+ * <p>
+ * <strong>Note:</strong> The constants below are public for the browser implementation's benefit.
+ * You are strongly encouraged to use {@link CustomTabsIntent.Builder}.</p>
+ */
+public final class CustomTabsIntent {
+    public static final String EXTRA_SESSION = "android.support.customtabs.extra.SESSION";
+    public static final String EXTRA_TOOLBAR_COLOR = "android.support.customtabs.extra.TOOLBAR_COLOR";
+    public static final String EXTRA_ENABLE_URLBAR_HIDING = "android.support.customtabs.extra.ENABLE_URLBAR_HIDING";
+    public static final String EXTRA_CLOSE_BUTTON_ICON = "android.support.customtabs.extra.CLOSE_BUTTON_ICON";
+    public static final String EXTRA_TITLE_VISIBILITY_STATE = "android.support.customtabs.extra.TITLE_VISIBILITY";
+    public static final int NO_TITLE = 0;
+    public static final int SHOW_PAGE_TITLE = 1;
+    public static final String EXTRA_ACTION_BUTTON_BUNDLE = "android.support.customtabs.extra.ACTION_BUTTON_BUNDLE";
+    public static final String EXTRA_TOOLBAR_ITEMS = "android.support.customtabs.extra.TOOLBAR_ITEMS";
+    public static final String EXTRA_SECONDARY_TOOLBAR_COLOR = "android.support.customtabs.extra.SECONDARY_TOOLBAR_COLOR";
+    public static final String KEY_ICON = "android.support.customtabs.customaction.ICON";
+    public static final String KEY_DESCRIPTION = "android.support.customtabs.customaction.DESCRIPTION";
+    public static final String KEY_PENDING_INTENT = "android.support.customtabs.customaction.PENDING_INTENT";
+    public static final String EXTRA_TINT_ACTION_BUTTON = "android.support.customtabs.extra.TINT_ACTION_BUTTON";
+    public static final String EXTRA_MENU_ITEMS = "android.support.customtabs.extra.MENU_ITEMS";
+    public static final String KEY_MENU_ITEM_TITLE = "android.support.customtabs.customaction.MENU_ITEM_TITLE";
+    public static final String EXTRA_EXIT_ANIMATION_BUNDLE = "android.support.customtabs.extra.EXIT_ANIMATION_BUNDLE";
+    public static final String EXTRA_DEFAULT_SHARE_MENU_ITEM = "android.support.customtabs.extra.SHARE_MENU_ITEM";
+    public static final String KEY_ID = "android.support.customtabs.customaction.ID";
+    public static final int TOOLBAR_ACTION_BUTTON_ID = 0;
+    private static final int MAX_TOOLBAR_ITEMS = 5;
+    @NonNull
+    public final Intent intent;
+    @Nullable
+    public final Bundle startAnimationBundle;
+
+    public void launchUrl(Activity context, Uri url) {
+        this.intent.setData(url);
+        ActivityCompat.startActivity(context, this.intent, this.startAnimationBundle);
+    }
+
+    private CustomTabsIntent(Intent intent, Bundle startAnimationBundle) {
+        this.intent = intent;
+        this.startAnimationBundle = startAnimationBundle;
+    }
+
+    public static int getMaxToolbarItems() {
+        return 5;
+    }
+
+    public static final class Builder {
+        private final Intent mIntent;
+        private ArrayList<Bundle> mMenuItems;
+        private Bundle mStartAnimationBundle;
+        private ArrayList<Bundle> mActionButtons;
+
+        public Builder() {
+            this(null);
+        }
+
+        public Builder(@Nullable CustomTabsSession session) {
+            this.mIntent = new Intent("android.intent.action.VIEW");
+            this.mMenuItems = null;
+            this.mStartAnimationBundle = null;
+            this.mActionButtons = null;
+            if (session != null) {
+                this.mIntent.setPackage(session.getComponentName().getPackageName());
+            }
+
+            Bundle bundle = new Bundle();
+            BundleCompat.putBinder(bundle, "android.support.customtabs.extra.SESSION", session == null ? null : session.getBinder());
+            this.mIntent.putExtras(bundle);
+        }
+
+        public CustomTabsIntent.Builder setToolbarColor(@ColorInt int color) {
+            this.mIntent.putExtra("android.support.customtabs.extra.TOOLBAR_COLOR", color);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder enableUrlBarHiding() {
+            this.mIntent.putExtra("android.support.customtabs.extra.ENABLE_URLBAR_HIDING", true);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setCloseButtonIcon(@NonNull Bitmap icon) {
+            this.mIntent.putExtra("android.support.customtabs.extra.CLOSE_BUTTON_ICON", icon);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setShowTitle(boolean showTitle) {
+            this.mIntent.putExtra("android.support.customtabs.extra.TITLE_VISIBILITY", showTitle ? 1 : 0);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder addMenuItem(@NonNull String label, @NonNull PendingIntent pendingIntent) {
+            if (this.mMenuItems == null) {
+                this.mMenuItems = new ArrayList();
+            }
+
+            Bundle bundle = new Bundle();
+            bundle.putString("android.support.customtabs.customaction.MENU_ITEM_TITLE", label);
+            bundle.putParcelable("android.support.customtabs.customaction.PENDING_INTENT", pendingIntent);
+            this.mMenuItems.add(bundle);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder addDefaultShareMenuItem() {
+            this.mIntent.putExtra("android.support.customtabs.extra.SHARE_MENU_ITEM", true);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setActionButton(@NonNull Bitmap icon, @NonNull String description, @NonNull PendingIntent pendingIntent, boolean shouldTint) {
+            Bundle bundle = new Bundle();
+            bundle.putInt("android.support.customtabs.customaction.ID", 0);
+            bundle.putParcelable("android.support.customtabs.customaction.ICON", icon);
+            bundle.putString("android.support.customtabs.customaction.DESCRIPTION", description);
+            bundle.putParcelable("android.support.customtabs.customaction.PENDING_INTENT", pendingIntent);
+            this.mIntent.putExtra("android.support.customtabs.extra.ACTION_BUTTON_BUNDLE", bundle);
+            this.mIntent.putExtra("android.support.customtabs.extra.TINT_ACTION_BUTTON", shouldTint);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setActionButton(@NonNull Bitmap icon, @NonNull String description, @NonNull PendingIntent pendingIntent) {
+            return this.setActionButton(icon, description, pendingIntent, false);
+        }
+
+        public CustomTabsIntent.Builder addToolbarItem(int id, @NonNull Bitmap icon, @NonNull String description, PendingIntent pendingIntent) throws IllegalStateException {
+            if (this.mActionButtons == null) {
+                this.mActionButtons = new ArrayList();
+            }
+
+            if (this.mActionButtons.size() >= 5) {
+                throw new IllegalStateException("Exceeded maximum toolbar item count of 5");
+            } else {
+                Bundle bundle = new Bundle();
+                bundle.putInt("android.support.customtabs.customaction.ID", id);
+                bundle.putParcelable("android.support.customtabs.customaction.ICON", icon);
+                bundle.putString("android.support.customtabs.customaction.DESCRIPTION", description);
+                bundle.putParcelable("android.support.customtabs.customaction.PENDING_INTENT", pendingIntent);
+                this.mActionButtons.add(bundle);
+                return this;
+            }
+        }
+
+        public CustomTabsIntent.Builder setSecondaryToolbarColor(@ColorInt int color) {
+            this.mIntent.putExtra("android.support.customtabs.extra.SECONDARY_TOOLBAR_COLOR", color);
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setStartAnimations(@NonNull Context context, @AnimRes int enterResId, @AnimRes int exitResId) {
+            this.mStartAnimationBundle = ActivityOptionsCompat.makeCustomAnimation(context, enterResId, exitResId).toBundle();
+            return this;
+        }
+
+        public CustomTabsIntent.Builder setExitAnimations(@NonNull Context context, @AnimRes int enterResId, @AnimRes int exitResId) {
+            Bundle bundle = ActivityOptionsCompat.makeCustomAnimation(context, enterResId, exitResId).toBundle();
+            this.mIntent.putExtra("android.support.customtabs.extra.EXIT_ANIMATION_BUNDLE", bundle);
+            return this;
+        }
+
+        public CustomTabsIntent build() {
+            if (this.mMenuItems != null) {
+                this.mIntent.putParcelableArrayListExtra("android.support.customtabs.extra.MENU_ITEMS", this.mMenuItems);
+            }
+
+            if (this.mActionButtons != null) {
+                this.mIntent.putParcelableArrayListExtra("android.support.customtabs.extra.TOOLBAR_ITEMS", this.mActionButtons);
+            }
+
+            return new CustomTabsIntent(this.mIntent, this.mStartAnimationBundle);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsService.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsService.java
new file mode 100755
index 000000000..aa60199f9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsService.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.app.Service;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.IBinder.DeathRecipient;
+import android.os.RemoteException;
+import android.support.v4.util.ArrayMap;
+
+import java.util.List;
+import java.util.Map;
+import java.util.NoSuchElementException;
+
+public abstract class CustomTabsService extends Service {
+    public static final String ACTION_CUSTOM_TABS_CONNECTION = "android.support.customtabs.action.CustomTabsService";
+    public static final String KEY_URL = "android.support.customtabs.otherurls.URL";
+    private final Map<IBinder, DeathRecipient> mDeathRecipientMap = new ArrayMap();
+    private ICustomTabsService.Stub mBinder = new ICustomTabsService.Stub() {
+        public boolean warmup(long flags) {
+            return CustomTabsService.this.warmup(flags);
+        }
+
+        public boolean newSession(ICustomTabsCallback callback) {
+            final CustomTabsSessionToken sessionToken = new CustomTabsSessionToken(callback);
+
+            try {
+                DeathRecipient e = new DeathRecipient() {
+                    public void binderDied() {
+                        CustomTabsService.this.cleanUpSession(sessionToken);
+                    }
+                };
+                synchronized (CustomTabsService.this.mDeathRecipientMap) {
+                    callback.asBinder().linkToDeath(e, 0);
+                    CustomTabsService.this.mDeathRecipientMap.put(callback.asBinder(), e);
+                }
+
+                return CustomTabsService.this.newSession(sessionToken);
+            } catch (RemoteException var7) {
+                return false;
+            }
+        }
+
+        public boolean mayLaunchUrl(ICustomTabsCallback callback, Uri url, Bundle extras, List<Bundle> otherLikelyBundles) {
+            return CustomTabsService.this.mayLaunchUrl(new CustomTabsSessionToken(callback), url, extras, otherLikelyBundles);
+        }
+
+        public Bundle extraCommand(String commandName, Bundle args) {
+            return CustomTabsService.this.extraCommand(commandName, args);
+        }
+
+        public boolean updateVisuals(ICustomTabsCallback callback, Bundle bundle) {
+            return CustomTabsService.this.updateVisuals(new CustomTabsSessionToken(callback), bundle);
+        }
+    };
+
+    public CustomTabsService() {
+    }
+
+    public IBinder onBind(Intent intent) {
+        return this.mBinder;
+    }
+
+    protected boolean cleanUpSession(CustomTabsSessionToken sessionToken) {
+        try {
+            Map e = this.mDeathRecipientMap;
+            synchronized (this.mDeathRecipientMap) {
+                IBinder binder = sessionToken.getCallbackBinder();
+                DeathRecipient deathRecipient = this.mDeathRecipientMap.get(binder);
+                binder.unlinkToDeath(deathRecipient, 0);
+                this.mDeathRecipientMap.remove(binder);
+                return true;
+            }
+        } catch (NoSuchElementException var7) {
+            return false;
+        }
+    }
+
+    protected abstract boolean warmup(long var1);
+
+    protected abstract boolean newSession(CustomTabsSessionToken var1);
+
+    protected abstract boolean mayLaunchUrl(CustomTabsSessionToken var1, Uri var2, Bundle var3, List<Bundle> var4);
+
+    protected abstract Bundle extraCommand(String var1, Bundle var2);
+
+    protected abstract boolean updateVisuals(CustomTabsSessionToken var1, Bundle var2);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsServiceConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsServiceConnection.java
new file mode 100755
index 000000000..7998b02dd
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsServiceConnection.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.content.ComponentName;
+import android.content.ServiceConnection;
+import android.os.IBinder;
+
+public abstract class CustomTabsServiceConnection implements ServiceConnection {
+    public CustomTabsServiceConnection() {
+    }
+
+    public final void onServiceConnected(final ComponentName name, IBinder service) {
+        this.onCustomTabsServiceConnected(name, new CustomTabsClient(ICustomTabsService.Stub.asInterface(service), name) {
+        });
+    }
+
+    public abstract void onCustomTabsServiceConnected(ComponentName var1, CustomTabsClient var2);
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSession.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSession.java
new file mode 100755
index 000000000..a84755a4f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSession.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.content.ComponentName;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.support.annotation.NonNull;
+
+import java.util.List;
+
+/**
+ * A class to be used for Custom Tabs related communication. Clients that want to launch Custom Tabs
+ * can use this class exclusively to handle all related communication.
+ */
+public final class CustomTabsSession {
+    private static final String TAG = "CustomTabsSession";
+    private final ICustomTabsService mService;
+    private final ICustomTabsCallback mCallback;
+    private final ComponentName mComponentName;
+
+    CustomTabsSession(ICustomTabsService service, ICustomTabsCallback callback, ComponentName componentName) {
+        this.mService = service;
+        this.mCallback = callback;
+        this.mComponentName = componentName;
+    }
+
+    public boolean mayLaunchUrl(Uri url, Bundle extras, List<Bundle> otherLikelyBundles) {
+        try {
+            return this.mService.mayLaunchUrl(this.mCallback, url, extras, otherLikelyBundles);
+        } catch (RemoteException var5) {
+            return false;
+        }
+    }
+
+    public boolean setActionButton(@NonNull Bitmap icon, @NonNull String description) {
+        return this.setToolbarItem(0, icon, description);
+    }
+
+    public boolean setToolbarItem(int id, @NonNull Bitmap icon, @NonNull String description) {
+        Bundle bundle = new Bundle();
+        bundle.putInt("android.support.customtabs.customaction.ID", id);
+        bundle.putParcelable("android.support.customtabs.customaction.ICON", icon);
+        bundle.putString("android.support.customtabs.customaction.DESCRIPTION", description);
+        Bundle metaBundle = new Bundle();
+        metaBundle.putBundle("android.support.customtabs.extra.ACTION_BUTTON_BUNDLE", bundle);
+
+        try {
+            return this.mService.updateVisuals(this.mCallback, metaBundle);
+        } catch (RemoteException var7) {
+            return false;
+        }
+    }
+
+    IBinder getBinder() {
+        return this.mCallback.asBinder();
+    }
+
+    ComponentName getComponentName() {
+        return this.mComponentName;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSessionToken.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSessionToken.java
new file mode 100755
index 000000000..007081773
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/CustomTabsSessionToken.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.support.v4.app.BundleCompat;
+import android.util.Log;
+
+/**
+ * Wrapper class that can be used as a unique identifier for a session. Also contains an accessor
+ * for the {@link CustomTabsCallback} for the session if there was any.
+ */
+public class CustomTabsSessionToken {
+    private static final String TAG = "CustomTabsSessionToken";
+    private final ICustomTabsCallback mCallbackBinder;
+    private final CustomTabsCallback mCallback;
+
+    public static CustomTabsSessionToken getSessionTokenFromIntent(Intent intent) {
+        Bundle b = intent.getExtras();
+        IBinder binder = BundleCompat.getBinder(b, "android.support.customtabs.extra.SESSION");
+        return binder == null ? null : new CustomTabsSessionToken(ICustomTabsCallback.Stub.asInterface(binder));
+    }
+
+    CustomTabsSessionToken(ICustomTabsCallback callbackBinder) {
+        this.mCallbackBinder = callbackBinder;
+        this.mCallback = new CustomTabsCallback() {
+            public void onNavigationEvent(int navigationEvent, Bundle extras) {
+                try {
+                    CustomTabsSessionToken.this.mCallbackBinder.onNavigationEvent(navigationEvent, extras);
+                } catch (RemoteException var4) {
+                    Log.e("CustomTabsSessionToken", "RemoteException during ICustomTabsCallback transaction");
+                }
+
+            }
+        };
+    }
+
+    IBinder getCallbackBinder() {
+        return this.mCallbackBinder.asBinder();
+    }
+
+    public int hashCode() {
+        return this.getCallbackBinder().hashCode();
+    }
+
+    public boolean equals(Object o) {
+        if (!(o instanceof CustomTabsSessionToken)) {
+            return false;
+        } else {
+            CustomTabsSessionToken token = (CustomTabsSessionToken) o;
+            return token.getCallbackBinder().equals(this.mCallbackBinder.asBinder());
+        }
+    }
+
+    public CustomTabsCallback getCallback() {
+        return this.mCallback;
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsCallback.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsCallback.java
new file mode 100755
index 000000000..2d311a4d5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsCallback.java
@@ -0,0 +1,142 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.os.Binder;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.IInterface;
+import android.os.Parcel;
+import android.os.RemoteException;
+
+public interface ICustomTabsCallback extends IInterface {
+    void onNavigationEvent(int var1, Bundle var2) throws RemoteException;
+
+    void extraCallback(String var1, Bundle var2) throws RemoteException;
+
+    abstract class Stub extends Binder implements ICustomTabsCallback {
+        private static final String DESCRIPTOR = "android.support.customtabs.ICustomTabsCallback";
+        static final int TRANSACTION_onNavigationEvent = 2;
+        static final int TRANSACTION_extraCallback = 3;
+
+        public Stub() {
+            this.attachInterface(this, "android.support.customtabs.ICustomTabsCallback");
+        }
+
+        public static ICustomTabsCallback asInterface(IBinder obj) {
+            if (obj == null) {
+                return null;
+            } else {
+                IInterface iin = obj.queryLocalInterface("android.support.customtabs.ICustomTabsCallback");
+                return (iin != null && iin instanceof ICustomTabsCallback ? (ICustomTabsCallback) iin : new ICustomTabsCallback.Stub.Proxy(obj));
+            }
+        }
+
+        public IBinder asBinder() {
+            return this;
+        }
+
+        public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
+            Bundle _arg1;
+            switch (code) {
+                case 2:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsCallback");
+                    int _arg01 = data.readInt();
+                    if (0 != data.readInt()) {
+                        _arg1 = Bundle.CREATOR.createFromParcel(data);
+                    } else {
+                        _arg1 = null;
+                    }
+
+                    this.onNavigationEvent(_arg01, _arg1);
+                    return true;
+                case 3:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsCallback");
+                    String _arg0 = data.readString();
+                    if (0 != data.readInt()) {
+                        _arg1 = Bundle.CREATOR.createFromParcel(data);
+                    } else {
+                        _arg1 = null;
+                    }
+
+                    this.extraCallback(_arg0, _arg1);
+                    return true;
+                case 1598968902:
+                    reply.writeString("android.support.customtabs.ICustomTabsCallback");
+                    return true;
+                default:
+                    return super.onTransact(code, data, reply, flags);
+            }
+        }
+
+        private static class Proxy implements ICustomTabsCallback {
+            private IBinder mRemote;
+
+            Proxy(IBinder remote) {
+                this.mRemote = remote;
+            }
+
+            public IBinder asBinder() {
+                return this.mRemote;
+            }
+
+            public String getInterfaceDescriptor() {
+                return "android.support.customtabs.ICustomTabsCallback";
+            }
+
+            public void onNavigationEvent(int navigationEvent, Bundle extras) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsCallback");
+                    _data.writeInt(navigationEvent);
+                    if (extras != null) {
+                        _data.writeInt(1);
+                        extras.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    this.mRemote.transact(2, _data, null, 1);
+                } finally {
+                    _data.recycle();
+                }
+
+            }
+
+            public void extraCallback(String callbackName, Bundle args) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsCallback");
+                    _data.writeString(callbackName);
+                    if (args != null) {
+                        _data.writeInt(1);
+                        args.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    this.mRemote.transact(3, _data, null, 1);
+                } finally {
+                    _data.recycle();
+                }
+
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsService.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsService.java
new file mode 100755
index 000000000..fefde3666
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabs/ICustomTabsService.java
@@ -0,0 +1,291 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.telegram.messenger.support.customtabs;
+
+import android.net.Uri;
+import android.os.Binder;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.IInterface;
+import android.os.Parcel;
+import android.os.RemoteException;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public interface ICustomTabsService extends IInterface {
+    boolean warmup(long var1) throws RemoteException;
+
+    boolean newSession(ICustomTabsCallback var1) throws RemoteException;
+
+    boolean mayLaunchUrl(ICustomTabsCallback var1, Uri var2, Bundle var3, List<Bundle> var4) throws RemoteException;
+
+    Bundle extraCommand(String var1, Bundle var2) throws RemoteException;
+
+    boolean updateVisuals(ICustomTabsCallback var1, Bundle var2) throws RemoteException;
+
+    abstract class Stub extends Binder implements ICustomTabsService {
+        private static final String DESCRIPTOR = "android.support.customtabs.ICustomTabsService";
+        static final int TRANSACTION_warmup = 2;
+        static final int TRANSACTION_newSession = 3;
+        static final int TRANSACTION_mayLaunchUrl = 4;
+        static final int TRANSACTION_extraCommand = 5;
+        static final int TRANSACTION_updateVisuals = 6;
+
+        public Stub() {
+            this.attachInterface(this, "android.support.customtabs.ICustomTabsService");
+        }
+
+        public static ICustomTabsService asInterface(IBinder obj) {
+            if (obj == null) {
+                return null;
+            } else {
+                IInterface iin = obj.queryLocalInterface("android.support.customtabs.ICustomTabsService");
+                return (iin != null && iin instanceof ICustomTabsService ? (ICustomTabsService) iin : new ICustomTabsService.Stub.Proxy(obj));
+            }
+        }
+
+        public IBinder asBinder() {
+            return this;
+        }
+
+        public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
+            ICustomTabsCallback _arg0;
+            Bundle _arg1;
+            boolean _result;
+            Bundle _result2;
+            switch (code) {
+                case 2:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsService");
+                    long _arg02 = data.readLong();
+                    _result = this.warmup(_arg02);
+                    reply.writeNoException();
+                    reply.writeInt(_result ? 1 : 0);
+                    return true;
+                case 3:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsService");
+                    _arg0 = ICustomTabsCallback.Stub.asInterface(data.readStrongBinder());
+                    boolean _arg12 = this.newSession(_arg0);
+                    reply.writeNoException();
+                    reply.writeInt(_arg12 ? 1 : 0);
+                    return true;
+                case 4:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsService");
+                    _arg0 = ICustomTabsCallback.Stub.asInterface(data.readStrongBinder());
+                    Uri _arg11;
+                    if (0 != data.readInt()) {
+                        _arg11 = Uri.CREATOR.createFromParcel(data);
+                    } else {
+                        _arg11 = null;
+                    }
+
+                    if (0 != data.readInt()) {
+                        _result2 = Bundle.CREATOR.createFromParcel(data);
+                    } else {
+                        _result2 = null;
+                    }
+
+                    ArrayList _arg3 = data.createTypedArrayList(Bundle.CREATOR);
+                    boolean _result1 = this.mayLaunchUrl(_arg0, _arg11, _result2, _arg3);
+                    reply.writeNoException();
+                    reply.writeInt(_result1 ? 1 : 0);
+                    return true;
+                case 5:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsService");
+                    String _arg01 = data.readString();
+                    if (0 != data.readInt()) {
+                        _arg1 = Bundle.CREATOR.createFromParcel(data);
+                    } else {
+                        _arg1 = null;
+                    }
+
+                    _result2 = this.extraCommand(_arg01, _arg1);
+                    reply.writeNoException();
+                    if (_result2 != null) {
+                        reply.writeInt(1);
+                        _result2.writeToParcel(reply, 1);
+                    } else {
+                        reply.writeInt(0);
+                    }
+
+                    return true;
+                case 6:
+                    data.enforceInterface("android.support.customtabs.ICustomTabsService");
+                    _arg0 = ICustomTabsCallback.Stub.asInterface(data.readStrongBinder());
+                    if (0 != data.readInt()) {
+                        _arg1 = Bundle.CREATOR.createFromParcel(data);
+                    } else {
+                        _arg1 = null;
+                    }
+
+                    _result = this.updateVisuals(_arg0, _arg1);
+                    reply.writeNoException();
+                    reply.writeInt(_result ? 1 : 0);
+                    return true;
+                case 1598968902:
+                    reply.writeString("android.support.customtabs.ICustomTabsService");
+                    return true;
+                default:
+                    return super.onTransact(code, data, reply, flags);
+            }
+        }
+
+        private static class Proxy implements ICustomTabsService {
+            private IBinder mRemote;
+
+            Proxy(IBinder remote) {
+                this.mRemote = remote;
+            }
+
+            public IBinder asBinder() {
+                return this.mRemote;
+            }
+
+            public String getInterfaceDescriptor() {
+                return "android.support.customtabs.ICustomTabsService";
+            }
+
+            public boolean warmup(long flags) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+
+                boolean _result;
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsService");
+                    _data.writeLong(flags);
+                    this.mRemote.transact(2, _data, _reply, 0);
+                    _reply.readException();
+                    _result = 0 != _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public boolean newSession(ICustomTabsCallback callback) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+
+                boolean _result;
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsService");
+                    _data.writeStrongBinder(callback != null ? callback.asBinder() : null);
+                    this.mRemote.transact(3, _data, _reply, 0);
+                    _reply.readException();
+                    _result = 0 != _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public boolean mayLaunchUrl(ICustomTabsCallback callback, Uri url, Bundle extras, List<Bundle> otherLikelyBundles) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+
+                boolean _result;
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsService");
+                    _data.writeStrongBinder(callback != null ? callback.asBinder() : null);
+                    if (url != null) {
+                        _data.writeInt(1);
+                        url.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    if (extras != null) {
+                        _data.writeInt(1);
+                        extras.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    _data.writeTypedList(otherLikelyBundles);
+                    this.mRemote.transact(4, _data, _reply, 0);
+                    _reply.readException();
+                    _result = 0 != _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public Bundle extraCommand(String commandName, Bundle args) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+
+                Bundle _result;
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsService");
+                    _data.writeString(commandName);
+                    if (args != null) {
+                        _data.writeInt(1);
+                        args.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    this.mRemote.transact(5, _data, _reply, 0);
+                    _reply.readException();
+                    if (0 != _reply.readInt()) {
+                        _result = Bundle.CREATOR.createFromParcel(_reply);
+                    } else {
+                        _result = null;
+                    }
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+
+            public boolean updateVisuals(ICustomTabsCallback callback, Bundle bundle) throws RemoteException {
+                Parcel _data = Parcel.obtain();
+                Parcel _reply = Parcel.obtain();
+
+                boolean _result;
+                try {
+                    _data.writeInterfaceToken("android.support.customtabs.ICustomTabsService");
+                    _data.writeStrongBinder(callback != null ? callback.asBinder() : null);
+                    if (bundle != null) {
+                        _data.writeInt(1);
+                        bundle.writeToParcel(_data, 0);
+                    } else {
+                        _data.writeInt(0);
+                    }
+
+                    this.mRemote.transact(6, _data, _reply, 0);
+                    _reply.readException();
+                    _result = 0 != _reply.readInt();
+                } finally {
+                    _reply.recycle();
+                    _data.recycle();
+                }
+
+                return _result;
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/CustomTabsHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/CustomTabsHelper.java
new file mode 100755
index 000000000..e40bcd4f0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/CustomTabsHelper.java
@@ -0,0 +1,142 @@
+// Copyright 2015 Google Inc. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package org.telegram.messenger.support.customtabsclient.shared;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Helper class for Custom Tabs.
+ */
+public class CustomTabsHelper {
+    private static final String TAG = "CustomTabsHelper";
+    static final String STABLE_PACKAGE = "com.android.chrome";
+    static final String BETA_PACKAGE = "com.chrome.beta";
+    static final String DEV_PACKAGE = "com.chrome.dev";
+    static final String LOCAL_PACKAGE = "com.google.android.apps.chrome";
+    private static final String EXTRA_CUSTOM_TABS_KEEP_ALIVE =
+            "android.support.customtabs.extra.KEEP_ALIVE";
+    private static final String ACTION_CUSTOM_TABS_CONNECTION =
+            "android.support.customtabs.action.CustomTabsService";
+
+    private static String sPackageNameToUse;
+
+    private CustomTabsHelper() {}
+
+    public static void addKeepAliveExtra(Context context, Intent intent) {
+        Intent keepAliveIntent = new Intent().setClassName(
+                context.getPackageName(), KeepAliveService.class.getCanonicalName());
+        intent.putExtra(EXTRA_CUSTOM_TABS_KEEP_ALIVE, keepAliveIntent);
+    }
+
+    /**
+     * Goes through all apps that handle VIEW intents and have a warmup service. Picks
+     * the one chosen by the user if there is one, otherwise makes a best effort to return a
+     * valid package name.
+     *
+     * This is <strong>not</strong> threadsafe.
+     *
+     * @param context {@link Context} to use for accessing {@link PackageManager}.
+     * @return The package name recommended to use for connecting to custom tabs related components.
+     */
+    public static String getPackageNameToUse(Context context) {
+        if (sPackageNameToUse != null) return sPackageNameToUse;
+
+        PackageManager pm = context.getPackageManager();
+        // Get default VIEW intent handler.
+        Intent activityIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.example.com"));
+        ResolveInfo defaultViewHandlerInfo = pm.resolveActivity(activityIntent, 0);
+        String defaultViewHandlerPackageName = null;
+        if (defaultViewHandlerInfo != null) {
+            defaultViewHandlerPackageName = defaultViewHandlerInfo.activityInfo.packageName;
+        }
+
+        // Get all apps that can handle VIEW intents.
+        List<ResolveInfo> resolvedActivityList = pm.queryIntentActivities(activityIntent, 0);
+        List<String> packagesSupportingCustomTabs = new ArrayList<>();
+        for (ResolveInfo info : resolvedActivityList) {
+            Intent serviceIntent = new Intent();
+            serviceIntent.setAction(ACTION_CUSTOM_TABS_CONNECTION);
+            serviceIntent.setPackage(info.activityInfo.packageName);
+            if (pm.resolveService(serviceIntent, 0) != null) {
+                packagesSupportingCustomTabs.add(info.activityInfo.packageName);
+            }
+        }
+
+        // Now packagesSupportingCustomTabs contains all apps that can handle both VIEW intents
+        // and service calls.
+        if (packagesSupportingCustomTabs.isEmpty()) {
+            sPackageNameToUse = null;
+        } else if (packagesSupportingCustomTabs.size() == 1) {
+            sPackageNameToUse = packagesSupportingCustomTabs.get(0);
+        } else if (!TextUtils.isEmpty(defaultViewHandlerPackageName)
+                && !hasSpecializedHandlerIntents(context, activityIntent)
+                && packagesSupportingCustomTabs.contains(defaultViewHandlerPackageName)) {
+            sPackageNameToUse = defaultViewHandlerPackageName;
+        } else if (packagesSupportingCustomTabs.contains(STABLE_PACKAGE)) {
+            sPackageNameToUse = STABLE_PACKAGE;
+        } else if (packagesSupportingCustomTabs.contains(BETA_PACKAGE)) {
+            sPackageNameToUse = BETA_PACKAGE;
+        } else if (packagesSupportingCustomTabs.contains(DEV_PACKAGE)) {
+            sPackageNameToUse = DEV_PACKAGE;
+        } else if (packagesSupportingCustomTabs.contains(LOCAL_PACKAGE)) {
+            sPackageNameToUse = LOCAL_PACKAGE;
+        }
+        return sPackageNameToUse;
+    }
+
+    /**
+     * Used to check whether there is a specialized handler for a given intent.
+     * @param intent The intent to check with.
+     * @return Whether there is a specialized handler for the given intent.
+     */
+    private static boolean hasSpecializedHandlerIntents(Context context, Intent intent) {
+        try {
+            PackageManager pm = context.getPackageManager();
+            List<ResolveInfo> handlers = pm.queryIntentActivities(
+                    intent,
+                    PackageManager.GET_RESOLVED_FILTER);
+            if (handlers == null || handlers.size() == 0) {
+                return false;
+            }
+            for (ResolveInfo resolveInfo : handlers) {
+                IntentFilter filter = resolveInfo.filter;
+                if (filter == null) continue;
+                if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0) continue;
+                if (resolveInfo.activityInfo == null) continue;
+                return true;
+            }
+        } catch (RuntimeException e) {
+            Log.e(TAG, "Runtime exception while getting specialized handlers");
+        }
+        return false;
+    }
+
+    /**
+     * @return All possible chrome package names that provide custom tabs feature.
+     */
+    public static String[] getPackages() {
+        return new String[]{"", STABLE_PACKAGE, BETA_PACKAGE, DEV_PACKAGE, LOCAL_PACKAGE};
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/KeepAliveService.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/KeepAliveService.java
new file mode 100755
index 000000000..0285190e6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/KeepAliveService.java
@@ -0,0 +1,29 @@
+// Copyright 2015 Google Inc. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package org.telegram.messenger.support.customtabsclient.shared;
+
+import android.app.Service;
+import android.content.Intent;
+import android.os.Binder;
+import android.os.IBinder;
+
+public class KeepAliveService extends Service {
+    private static final Binder sBinder = new Binder();
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return sBinder;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnection.java
new file mode 100755
index 000000000..86f1b8797
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnection.java
@@ -0,0 +1,42 @@
+// Copyright 2015 Google Inc. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package org.telegram.messenger.support.customtabsclient.shared;
+
+import android.content.ComponentName;
+
+import org.telegram.messenger.support.customtabs.CustomTabsClient;
+import org.telegram.messenger.support.customtabs.CustomTabsServiceConnection;
+
+import java.lang.ref.WeakReference;
+
+public class ServiceConnection extends CustomTabsServiceConnection {
+    private WeakReference<ServiceConnectionCallback> mConnectionCallback;
+
+    public ServiceConnection(ServiceConnectionCallback connectionCallback) {
+        mConnectionCallback = new WeakReference<>(connectionCallback);
+    }
+
+    @Override
+    public void onCustomTabsServiceConnected(ComponentName name, CustomTabsClient client) {
+        ServiceConnectionCallback connectionCallback = mConnectionCallback.get();
+        if (connectionCallback != null) connectionCallback.onServiceConnected(client);
+    }
+
+    @Override
+    public void onServiceDisconnected(ComponentName name) {
+        ServiceConnectionCallback connectionCallback = mConnectionCallback.get();
+        if (connectionCallback != null) connectionCallback.onServiceDisconnected();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnectionCallback.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnectionCallback.java
new file mode 100755
index 000000000..7f9ade6b3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/customtabsclient/shared/ServiceConnectionCallback.java
@@ -0,0 +1,33 @@
+// Copyright 2015 Google Inc. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package org.telegram.messenger.support.customtabsclient.shared;
+
+import org.telegram.messenger.support.customtabs.CustomTabsClient;
+
+/**
+ * Callback for events when connecting and disconnecting from Custom Tabs Service.
+ */
+public interface ServiceConnectionCallback {
+    /**
+     * Called when the service is connected.
+     * @param client a CustomTabsClient
+     */
+    void onServiceConnected(CustomTabsClient client);
+
+    /**
+     * Called when the service is disconnected.
+     */
+    void onServiceDisconnected();
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/AsyncListUtil.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/AsyncListUtil.java
index f16cad0c4..70e53dd4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/AsyncListUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/AsyncListUtil.java
@@ -22,9 +22,6 @@
 import android.util.SparseBooleanArray;
 import android.util.SparseIntArray;
 
-import org.telegram.messenger.support.util.ThreadUtil;
-import org.telegram.messenger.support.util.TileList;
-
 /**
  * A utility class that supports asynchronous content loading.
  * <p>
@@ -42,7 +39,7 @@
  * Note that this class uses a single thread to load the data, so it suitable to load data from
  * secondary storage such as disk, but not from network.
  * <p>
- * This class is designed to work with {@link org.telegram.messenger.support.widget.RecyclerView}, but it does
+ * This class is designed to work with {@link android.support.v7.widget.RecyclerView}, but it does
  * not depend on it and can be used with other list views.
  *
  */
@@ -113,7 +110,7 @@ private boolean isRefreshPending() {
      * <p>
      * Identifies the data items that have not been loaded yet and initiates loading them in the
      * background. Should be called from the view's scroll listener (such as
-     * {@link org.telegram.messenger.support.widget.RecyclerView.OnScrollListener#onScrolled}).
+     * {@link android.support.v7.widget.RecyclerView.OnScrollListener#onScrolled}).
      */
     public void onRangeChanged() {
         if (isRefreshPending()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/MessageThreadUtil.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/MessageThreadUtil.java
index a9d59b1fe..bf78e6aa9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/MessageThreadUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/MessageThreadUtil.java
@@ -18,10 +18,11 @@
 
 import android.os.Handler;
 import android.os.Looper;
+import android.support.v4.content.ParallelExecutorCompat;
 import android.util.Log;
 
 import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 class MessageThreadUtil<T> implements ThreadUtil<T> {
 
@@ -83,7 +84,8 @@ public void run() {
     public BackgroundCallback<T> getBackgroundProxy(final BackgroundCallback<T> callback) {
         return new BackgroundCallback<T>() {
             final private MessageQueue mQueue = new MessageQueue();
-            final private Executor mExecutor = Executors.newSingleThreadExecutor();
+            final private Executor mExecutor = ParallelExecutorCompat.getParallelExecutor();
+            AtomicBoolean mBackgroundRunning = new AtomicBoolean(false);
 
             private static final int REFRESH = 1;
             private static final int UPDATE_RANGE = 2;
@@ -114,42 +116,51 @@ public void recycleTile(TileList.Tile<T> tile) {
 
             private void sendMessage(SyncQueueItem msg) {
                 mQueue.sendMessage(msg);
-                mExecutor.execute(mBackgroundRunnable);
+                maybeExecuteBackgroundRunnable();
             }
 
             private void sendMessageAtFrontOfQueue(SyncQueueItem msg) {
                 mQueue.sendMessageAtFrontOfQueue(msg);
-                mExecutor.execute(mBackgroundRunnable);
+                maybeExecuteBackgroundRunnable();
+            }
+
+            private void maybeExecuteBackgroundRunnable() {
+                if (mBackgroundRunning.compareAndSet(false, true)) {
+                    mExecutor.execute(mBackgroundRunnable);
+                }
             }
 
             private Runnable mBackgroundRunnable = new Runnable() {
                 @Override
                 public void run() {
-                    SyncQueueItem msg = mQueue.next();
-                    if (msg == null) {
-                        return;
-                    }
-                    switch (msg.what) {
-                        case REFRESH:
-                            mQueue.removeMessages(REFRESH);
-                            callback.refresh(msg.arg1);
+                    while (true) {
+                        SyncQueueItem msg = mQueue.next();
+                        if (msg == null) {
                             break;
-                        case UPDATE_RANGE:
-                            mQueue.removeMessages(UPDATE_RANGE);
-                            mQueue.removeMessages(LOAD_TILE);
-                            callback.updateRange(
-                                    msg.arg1, msg.arg2, msg.arg3, msg.arg4, msg.arg5);
-                            break;
-                        case LOAD_TILE:
-                            callback.loadTile(msg.arg1, msg.arg2);
-                            break;
-                        case RECYCLE_TILE:
-                            //noinspection unchecked
-                            callback.recycleTile((TileList.Tile<T>) msg.data);
-                            break;
-                        default:
-                            Log.e("ThreadUtil", "Unsupported message, what=" + msg.what);
+                        }
+                        switch (msg.what) {
+                            case REFRESH:
+                                mQueue.removeMessages(REFRESH);
+                                callback.refresh(msg.arg1);
+                                break;
+                            case UPDATE_RANGE:
+                                mQueue.removeMessages(UPDATE_RANGE);
+                                mQueue.removeMessages(LOAD_TILE);
+                                callback.updateRange(
+                                        msg.arg1, msg.arg2, msg.arg3, msg.arg4, msg.arg5);
+                                break;
+                            case LOAD_TILE:
+                                callback.loadTile(msg.arg1, msg.arg2);
+                                break;
+                            case RECYCLE_TILE:
+                                //noinspection unchecked
+                                callback.recycleTile((TileList.Tile<T>) msg.data);
+                                break;
+                            default:
+                                Log.e("ThreadUtil", "Unsupported message, what=" + msg.what);
+                        }
                     }
+                    mBackgroundRunning.set(false);
                 }
             };
         };
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
index 319428f0b..82c555d09 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/SortedList.java
@@ -24,7 +24,7 @@
 /**
  * A Sorted list implementation that can keep items in order and also notify for changes in the
  * list
- * such that it can be bound to a {@link org.telegram.messenger.support.widget.RecyclerView.Adapter
+ * such that it can be bound to a {@link android.support.v7.widget.RecyclerView.Adapter
  * RecyclerView.Adapter}.
  * <p>
  * It keeps items ordered using the {@link Callback#compare(Object, Object)} method and uses
@@ -737,7 +737,7 @@ public void clear() {
          * so
          * that you can change its behavior depending on your UI.
          * <p>
-         * For example, if you are using SortedList with a {@link org.telegram.messenger.support.widget.RecyclerView.Adapter
+         * For example, if you are using SortedList with a {@link android.support.v7.widget.RecyclerView.Adapter
          * RecyclerView.Adapter}, you should
          * return whether the items' visual representations are the same or not.
          *
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/ThreadUtil.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/ThreadUtil.java
index c9a1583ff..cdb8689fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/util/ThreadUtil.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/util/ThreadUtil.java
@@ -16,8 +16,6 @@
 
 package org.telegram.messenger.support.util;
 
-import org.telegram.messenger.support.util.TileList;
-
 interface ThreadUtil<T> {
 
     interface MainThreadCallback<T> {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
index 8ea669731..1c40eafc7 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/AdapterHelper.java
@@ -19,9 +19,6 @@
 import android.support.v4.util.Pools;
 import android.util.Log;
 
-import org.telegram.messenger.support.widget.OpReorderer;
-import org.telegram.messenger.support.widget.RecyclerView;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -70,6 +67,8 @@
 
     final OpReorderer mOpReorderer;
 
+    private int mExistingUpdateTypes = 0;
+
     AdapterHelper(Callback callback) {
         this(callback, false);
     }
@@ -88,6 +87,7 @@ AdapterHelper addUpdateOp(UpdateOp... ops) {
     void reset() {
         recycleUpdateOpsAndClearList(mPendingUpdates);
         recycleUpdateOpsAndClearList(mPostponedList);
+        mExistingUpdateTypes = 0;
     }
 
     void preProcess() {
@@ -122,6 +122,7 @@ void consumePostponedUpdates() {
             mCallback.onDispatchSecondPass(mPostponedList.get(i));
         }
         recycleUpdateOpsAndClearList(mPostponedList);
+        mExistingUpdateTypes = 0;
     }
 
     private void applyMove(UpdateOp op) {
@@ -460,6 +461,10 @@ boolean hasPendingUpdates() {
         return mPendingUpdates.size() > 0;
     }
 
+    boolean hasAnyUpdateTypes(int updateTypes) {
+        return (mExistingUpdateTypes & updateTypes) != 0;
+    }
+
     int findPositionOffset(int position) {
         return findPositionOffset(position, 0);
     }
@@ -498,6 +503,7 @@ int findPositionOffset(int position, int firstPostponedItem) {
      */
     boolean onItemRangeChanged(int positionStart, int itemCount, Object payload) {
         mPendingUpdates.add(obtainUpdateOp(UpdateOp.UPDATE, positionStart, itemCount, payload));
+        mExistingUpdateTypes |= UpdateOp.UPDATE;
         return mPendingUpdates.size() == 1;
     }
 
@@ -506,6 +512,7 @@ boolean onItemRangeChanged(int positionStart, int itemCount, Object payload) {
      */
     boolean onItemRangeInserted(int positionStart, int itemCount) {
         mPendingUpdates.add(obtainUpdateOp(UpdateOp.ADD, positionStart, itemCount, null));
+        mExistingUpdateTypes |= UpdateOp.ADD;
         return mPendingUpdates.size() == 1;
     }
 
@@ -514,6 +521,7 @@ boolean onItemRangeInserted(int positionStart, int itemCount) {
      */
     boolean onItemRangeRemoved(int positionStart, int itemCount) {
         mPendingUpdates.add(obtainUpdateOp(UpdateOp.REMOVE, positionStart, itemCount, null));
+        mExistingUpdateTypes |= UpdateOp.REMOVE;
         return mPendingUpdates.size() == 1;
     }
 
@@ -522,12 +530,13 @@ boolean onItemRangeRemoved(int positionStart, int itemCount) {
      */
     boolean onItemRangeMoved(int from, int to, int itemCount) {
         if (from == to) {
-            return false;//no-op
+            return false; // no-op
         }
         if (itemCount != 1) {
             throw new IllegalArgumentException("Moving more than 1 item is not supported yet");
         }
         mPendingUpdates.add(obtainUpdateOp(UpdateOp.MOVE, from, to, null));
+        mExistingUpdateTypes |= UpdateOp.MOVE;
         return mPendingUpdates.size() == 1;
     }
 
@@ -564,6 +573,7 @@ void consumeUpdatesInOnePass() {
             }
         }
         recycleUpdateOpsAndClearList(mPendingUpdates);
+        mExistingUpdateTypes = 0;
     }
 
     public int applyPendingUpdatesToPosition(int position) {
@@ -602,18 +612,22 @@ public int applyPendingUpdatesToPosition(int position) {
         return position;
     }
 
+    boolean hasUpdates() {
+        return !mPostponedList.isEmpty() && !mPendingUpdates.isEmpty();
+    }
+
     /**
      * Queued operation to happen when child views are updated.
      */
     static class UpdateOp {
 
-        static final int ADD = 0;
+        static final int ADD = 1;
 
-        static final int REMOVE = 1;
+        static final int REMOVE = 1 << 1;
 
-        static final int UPDATE = 2;
+        static final int UPDATE = 1 << 2;
 
-        static final int MOVE = 3;
+        static final int MOVE = 1 << 3;
 
         static final int POOL_SIZE = 30;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
index e247875c3..582b8f245 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ChildHelper.java
@@ -208,8 +208,8 @@ View findHiddenNonRemovedView(int position, int type) {
         for (int i = 0; i < count; i++) {
             final View view = mHiddenViews.get(i);
             RecyclerView.ViewHolder holder = mCallback.getChildViewHolder(view);
-            if (holder.getLayoutPosition() == position && !holder.isInvalid() &&
-                    (type == RecyclerView.INVALID_TYPE || holder.getItemViewType() == type)) {
+            if (holder.getLayoutPosition() == position && !holder.isInvalid() && !holder.isRemoved()
+                    && (type == RecyclerView.INVALID_TYPE || holder.getItemViewType() == type)) {
                 return view;
             }
         }
@@ -339,6 +339,25 @@ void hide(View view) {
         }
     }
 
+    /**
+     * Moves a child view from hidden list to regular list.
+     * Calling this method should probably be followed by a detach, otherwise, it will suddenly
+     * show up in LayoutManager's children list.
+     *
+     * @param view The hidden View to unhide
+     */
+    void unhide(View view) {
+        final int offset = mCallback.indexOfChild(view);
+        if (offset < 0) {
+            throw new IllegalArgumentException("view is not a child, cannot hide " + view);
+        }
+        if (!mBucket.get(offset)) {
+            throw new RuntimeException("trying to unhide a view that was not hidden" + view);
+        }
+        mBucket.clear(offset);
+        unhideViewInternal(view);
+    }
+
     @Override
     public String toString() {
         return mBucket.toString() + ", hidden list:" + mHiddenViews.size();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/DefaultItemAnimator.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/DefaultItemAnimator.java
index ad58b3d6c..546f93f0a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/DefaultItemAnimator.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/DefaultItemAnimator.java
@@ -15,12 +15,11 @@
  */
 package org.telegram.messenger.support.widget;
 
+import android.support.annotation.NonNull;
 import android.support.v4.animation.AnimatorCompatHelper;
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.ViewPropertyAnimatorCompat;
 import android.support.v4.view.ViewPropertyAnimatorListener;
-
-import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
 import android.view.View;
 
@@ -34,23 +33,22 @@
  *
  * @see RecyclerView#setItemAnimator(RecyclerView.ItemAnimator)
  */
-public class DefaultItemAnimator extends RecyclerView.ItemAnimator {
+public class DefaultItemAnimator extends SimpleItemAnimator {
     private static final boolean DEBUG = false;
 
-    private ArrayList<ViewHolder> mPendingRemovals = new ArrayList<ViewHolder>();
-    private ArrayList<ViewHolder> mPendingAdditions = new ArrayList<ViewHolder>();
-    private ArrayList<MoveInfo> mPendingMoves = new ArrayList<MoveInfo>();
-    private ArrayList<ChangeInfo> mPendingChanges = new ArrayList<ChangeInfo>();
+    private ArrayList<ViewHolder> mPendingRemovals = new ArrayList<>();
+    private ArrayList<ViewHolder> mPendingAdditions = new ArrayList<>();
+    private ArrayList<MoveInfo> mPendingMoves = new ArrayList<>();
+    private ArrayList<ChangeInfo> mPendingChanges = new ArrayList<>();
 
-    private ArrayList<ArrayList<ViewHolder>> mAdditionsList =
-            new ArrayList<ArrayList<ViewHolder>>();
-    private ArrayList<ArrayList<MoveInfo>> mMovesList = new ArrayList<ArrayList<MoveInfo>>();
-    private ArrayList<ArrayList<ChangeInfo>> mChangesList = new ArrayList<ArrayList<ChangeInfo>>();
+    private ArrayList<ArrayList<ViewHolder>> mAdditionsList = new ArrayList<>();
+    private ArrayList<ArrayList<MoveInfo>> mMovesList = new ArrayList<>();
+    private ArrayList<ArrayList<ChangeInfo>> mChangesList = new ArrayList<>();
 
-    private ArrayList<ViewHolder> mAddAnimations = new ArrayList<ViewHolder>();
-    private ArrayList<ViewHolder> mMoveAnimations = new ArrayList<ViewHolder>();
-    private ArrayList<ViewHolder> mRemoveAnimations = new ArrayList<ViewHolder>();
-    private ArrayList<ViewHolder> mChangeAnimations = new ArrayList<ViewHolder>();
+    private ArrayList<ViewHolder> mAddAnimations = new ArrayList<>();
+    private ArrayList<ViewHolder> mMoveAnimations = new ArrayList<>();
+    private ArrayList<ViewHolder> mRemoveAnimations = new ArrayList<>();
+    private ArrayList<ViewHolder> mChangeAnimations = new ArrayList<>();
 
     private static class MoveInfo {
         public ViewHolder holder;
@@ -112,7 +110,7 @@ public void runPendingAnimations() {
         mPendingRemovals.clear();
         // Next, move stuff
         if (movesPending) {
-            final ArrayList<MoveInfo> moves = new ArrayList<MoveInfo>();
+            final ArrayList<MoveInfo> moves = new ArrayList<>();
             moves.addAll(mPendingMoves);
             mMovesList.add(moves);
             mPendingMoves.clear();
@@ -136,7 +134,7 @@ public void run() {
         }
         // Next, change stuff, to run in parallel with move animations
         if (changesPending) {
-            final ArrayList<ChangeInfo> changes = new ArrayList<ChangeInfo>();
+            final ArrayList<ChangeInfo> changes = new ArrayList<>();
             changes.addAll(mPendingChanges);
             mChangesList.add(changes);
             mPendingChanges.clear();
@@ -159,7 +157,7 @@ public void run() {
         }
         // Next, add stuff
         if (additionsPending) {
-            final ArrayList<ViewHolder> additions = new ArrayList<ViewHolder>();
+            final ArrayList<ViewHolder> additions = new ArrayList<>();
             additions.addAll(mPendingAdditions);
             mAdditionsList.add(additions);
             mPendingAdditions.clear();
@@ -312,6 +310,11 @@ public void onAnimationEnd(View view) {
     @Override
     public boolean animateChange(ViewHolder oldHolder, ViewHolder newHolder,
             int fromX, int fromY, int toX, int toY) {
+        if (oldHolder == newHolder) {
+            // Don't know how to run change animations when the same view holder is re-used.
+            // run a move animation to handle position changes.
+            return animateMove(oldHolder, fromX, fromY, toX, toY);
+        }
         final float prevTranslationX = ViewCompat.getTranslationX(oldHolder.itemView);
         final float prevTranslationY = ViewCompat.getTranslationY(oldHolder.itemView);
         final float prevAlpha = ViewCompat.getAlpha(oldHolder.itemView);
@@ -322,7 +325,7 @@ public boolean animateChange(ViewHolder oldHolder, ViewHolder newHolder,
         ViewCompat.setTranslationX(oldHolder.itemView, prevTranslationX);
         ViewCompat.setTranslationY(oldHolder.itemView, prevTranslationY);
         ViewCompat.setAlpha(oldHolder.itemView, prevAlpha);
-        if (newHolder != null && newHolder.itemView != null) {
+        if (newHolder != null) {
             // carry over translation values
             resetAnimation(newHolder);
             ViewCompat.setTranslationX(newHolder.itemView, -deltaX);
@@ -481,21 +484,25 @@ public void endAnimation(ViewHolder item) {
         }
 
         // animations should be ended by the cancel above.
+        //noinspection PointlessBooleanExpression,ConstantConditions
         if (mRemoveAnimations.remove(item) && DEBUG) {
             throw new IllegalStateException("after animation is cancelled, item should not be in "
                     + "mRemoveAnimations list");
         }
 
+        //noinspection PointlessBooleanExpression,ConstantConditions
         if (mAddAnimations.remove(item) && DEBUG) {
             throw new IllegalStateException("after animation is cancelled, item should not be in "
                     + "mAddAnimations list");
         }
 
+        //noinspection PointlessBooleanExpression,ConstantConditions
         if (mChangeAnimations.remove(item) && DEBUG) {
             throw new IllegalStateException("after animation is cancelled, item should not be in "
                     + "mChangeAnimations list");
         }
 
+        //noinspection PointlessBooleanExpression,ConstantConditions
         if (mMoveAnimations.remove(item) && DEBUG) {
             throw new IllegalStateException("after animation is cancelled, item should not be in "
                     + "mMoveAnimations list");
@@ -626,6 +633,28 @@ void cancelAll(List<ViewHolder> viewHolders) {
         }
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * If the payload list is not empty, DefaultItemAnimator returns <code>true</code>.
+     * When this is the case:
+     * <ul>
+     * <li>If you override {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}, both
+     * ViewHolder arguments will be the same instance.
+     * </li>
+     * <li>
+     * If you are not overriding {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)},
+     * then DefaultItemAnimator will call {@link #animateMove(ViewHolder, int, int, int, int)} and
+     * run a move animation instead.
+     * </li>
+     * </ul>
+     */
+    @Override
+    public boolean canReuseUpdatedViewHolder(@NonNull ViewHolder viewHolder,
+            @NonNull List<Object> payloads) {
+        return !payloads.isEmpty() || super.canReuseUpdatedViewHolder(viewHolder, payloads);
+    }
+
     private static class VpaListenerAdapter implements ViewPropertyAnimatorListener {
         @Override
         public void onAnimationStart(View view) {}
@@ -635,5 +664,5 @@ public void onAnimationEnd(View view) {}
 
         @Override
         public void onAnimationCancel(View view) {}
-    };
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
index f347ce3c0..84c3cb49c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/GridLayoutManager.java
@@ -37,11 +37,6 @@
     private static final boolean DEBUG = false;
     private static final String TAG = "GridLayoutManager";
     public static final int DEFAULT_SPAN_COUNT = -1;
-    /**
-     * The measure spec for the scroll direction.
-     */
-    static final int MAIN_DIR_SPEC =
-            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
     /**
      * Span size have been changed but we've not done a new layout calculation.
      */
@@ -63,6 +58,21 @@
     // re-used variable to acquire decor insets from RecyclerView
     final Rect mDecorInsets = new Rect();
 
+
+    /**
+     * Constructor used when layout manager is set in XML by RecyclerView attribute
+     * "layoutManager". If spanCount is not specified in the XML, it defaults to a
+     * single column.
+     *
+     * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_spanCount
+     */
+    public GridLayoutManager(Context context, AttributeSet attrs, int defStyleAttr,
+                             int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        Properties properties = getProperties(context, attrs, defStyleAttr, defStyleRes);
+        setSpanCount(properties.spanCount);
+    }
+
     /**
      * Creates a vertical GridLayoutManager
      *
@@ -110,7 +120,9 @@ public int getRowCountForAccessibility(RecyclerView.Recycler recycler,
         if (state.getItemCount() < 1) {
             return 0;
         }
-        return getSpanGroupIndex(recycler, state, state.getItemCount() - 1);
+
+        // Row count is one more than the last item's row index.
+        return getSpanGroupIndex(recycler, state, state.getItemCount() - 1) + 1;
     }
 
     @Override
@@ -122,7 +134,9 @@ public int getColumnCountForAccessibility(RecyclerView.Recycler recycler,
         if (state.getItemCount() < 1) {
             return 0;
         }
-        return getSpanGroupIndex(recycler, state, state.getItemCount() - 1);
+
+        // Column count is one more than the last item's column index.
+        return getSpanGroupIndex(recycler, state, state.getItemCount() - 1) + 1;
     }
 
     @Override
@@ -206,8 +220,13 @@ public void onItemsMoved(RecyclerView recyclerView, int from, int to, int itemCo
 
     @Override
     public RecyclerView.LayoutParams generateDefaultLayoutParams() {
-        return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
-                ViewGroup.LayoutParams.WRAP_CONTENT);
+        if (mOrientation == HORIZONTAL) {
+            return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
+                    ViewGroup.LayoutParams.FILL_PARENT);
+        } else {
+            return new LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
+                    ViewGroup.LayoutParams.WRAP_CONTENT);
+        }
     }
 
     @Override
@@ -258,47 +277,124 @@ private void updateMeasurements() {
         calculateItemBorders(totalSpace);
     }
 
+    @Override
+    public void setMeasuredDimension(Rect childrenBounds, int wSpec, int hSpec) {
+        if (mCachedBorders == null) {
+            super.setMeasuredDimension(childrenBounds, wSpec, hSpec);
+        }
+        final int width, height;
+        final int horizontalPadding = getPaddingLeft() + getPaddingRight();
+        final int verticalPadding = getPaddingTop() + getPaddingBottom();
+        if (mOrientation == VERTICAL) {
+            final int usedHeight = childrenBounds.height() + verticalPadding;
+            height = chooseSize(hSpec, usedHeight, getMinimumHeight());
+            width = chooseSize(wSpec, mCachedBorders[mCachedBorders.length - 1] + horizontalPadding,
+                    getMinimumWidth());
+        } else {
+            final int usedWidth = childrenBounds.width() + horizontalPadding;
+            width = chooseSize(wSpec, usedWidth, getMinimumWidth());
+            height = chooseSize(hSpec, mCachedBorders[mCachedBorders.length - 1] + verticalPadding,
+                    getMinimumHeight());
+        }
+        setMeasuredDimension(width, height);
+    }
+
+    /**
+     * @param totalSpace Total available space after padding is removed
+     */
     private void calculateItemBorders(int totalSpace) {
-        if (mCachedBorders == null || mCachedBorders.length != mSpanCount + 1
-                || mCachedBorders[mCachedBorders.length - 1] != totalSpace) {
-            mCachedBorders = new int[mSpanCount + 1];
+        mCachedBorders = calculateItemBorders(mCachedBorders, mSpanCount, totalSpace);
+    }
+
+    /**
+     * @param cachedBorders The out array
+     * @param spanCount number of spans
+     * @param totalSpace total available space after padding is removed
+     * @return The updated array. Might be the same instance as the provided array if its size
+     * has not changed.
+     */
+    static int[] calculateItemBorders(int[] cachedBorders, int spanCount, int totalSpace) {
+        if (cachedBorders == null || cachedBorders.length != spanCount + 1
+                || cachedBorders[cachedBorders.length - 1] != totalSpace) {
+            cachedBorders = new int[spanCount + 1];
         }
-        mCachedBorders[0] = 0;
-        int sizePerSpan = totalSpace / mSpanCount;
-        int sizePerSpanRemainder = totalSpace % mSpanCount;
+        cachedBorders[0] = 0;
+        int sizePerSpan = totalSpace / spanCount;
+        int sizePerSpanRemainder = totalSpace % spanCount;
         int consumedPixels = 0;
         int additionalSize = 0;
-        for (int i = 1; i <= mSpanCount; i++) {
+        for (int i = 1; i <= spanCount; i++) {
             int itemSize = sizePerSpan;
             additionalSize += sizePerSpanRemainder;
-            if (additionalSize > 0 && (mSpanCount - additionalSize) < sizePerSpanRemainder) {
+            if (additionalSize > 0 && (spanCount - additionalSize) < sizePerSpanRemainder) {
                 itemSize += 1;
-                additionalSize -= mSpanCount;
+                additionalSize -= spanCount;
             }
             consumedPixels += itemSize;
-            mCachedBorders[i] = consumedPixels;
+            cachedBorders[i] = consumedPixels;
         }
+        return cachedBorders;
     }
 
     @Override
     void onAnchorReady(RecyclerView.Recycler recycler, RecyclerView.State state,
-                       AnchorInfo anchorInfo) {
-        super.onAnchorReady(recycler, state, anchorInfo);
+                       AnchorInfo anchorInfo, int itemDirection) {
+        super.onAnchorReady(recycler, state, anchorInfo, itemDirection);
         updateMeasurements();
         if (state.getItemCount() > 0 && !state.isPreLayout()) {
-            ensureAnchorIsInFirstSpan(recycler, state, anchorInfo);
+            ensureAnchorIsInCorrectSpan(recycler, state, anchorInfo, itemDirection);
         }
+        ensureViewSet();
+    }
+
+    private void ensureViewSet() {
         if (mSet == null || mSet.length != mSpanCount) {
             mSet = new View[mSpanCount];
         }
     }
 
-    private void ensureAnchorIsInFirstSpan(RecyclerView.Recycler recycler, RecyclerView.State state,
-                                           AnchorInfo anchorInfo) {
+    @Override
+    public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler,
+            RecyclerView.State state) {
+        updateMeasurements();
+        ensureViewSet();
+        return super.scrollHorizontallyBy(dx, recycler, state);
+    }
+
+    @Override
+    public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler,
+            RecyclerView.State state) {
+        updateMeasurements();
+        ensureViewSet();
+        return super.scrollVerticallyBy(dy, recycler, state);
+    }
+
+    private void ensureAnchorIsInCorrectSpan(RecyclerView.Recycler recycler,
+            RecyclerView.State state, AnchorInfo anchorInfo, int itemDirection) {
+        final boolean layingOutInPrimaryDirection =
+                itemDirection == LayoutState.ITEM_DIRECTION_TAIL;
         int span = getSpanIndex(recycler, state, anchorInfo.mPosition);
-        while (span > 0 && anchorInfo.mPosition > 0) {
-            anchorInfo.mPosition--;
-            span = getSpanIndex(recycler, state, anchorInfo.mPosition);
+        if (layingOutInPrimaryDirection) {
+            // choose span 0
+            while (span > 0 && anchorInfo.mPosition > 0) {
+                anchorInfo.mPosition--;
+                span = getSpanIndex(recycler, state, anchorInfo.mPosition);
+            }
+        } else {
+            // choose the max span we can get. hopefully last one
+            final int indexLimit = state.getItemCount() - 1;
+            int pos = anchorInfo.mPosition;
+            int bestSpan = span;
+            while (pos < indexLimit) {
+                int next = getSpanIndex(recycler, state, pos + 1);
+                if (next > bestSpan) {
+                    pos += 1;
+                    bestSpan = next;
+                } else {
+                    break;
+                }
+            }
+            anchorInfo.mPosition = pos;
         }
     }
 
@@ -398,6 +494,15 @@ private int getSpanSize(RecyclerView.Recycler recycler, RecyclerView.State state
     @Override
     void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
             LayoutState layoutState, LayoutChunkResult result) {
+        final int otherDirSpecMode = mOrientationHelper.getModeInOther();
+        final boolean flexibleInOtherDir = otherDirSpecMode != View.MeasureSpec.EXACTLY;
+        final int currentOtherDirSize = getChildCount() > 0 ? mCachedBorders[mSpanCount] : 0;
+        // if grid layout's dimensions are not specified, let the new row change the measurements
+        // This is not perfect since we not covering all rows but still solves an important case
+        // where they may have a header row which should be laid out according to children.
+        if (flexibleInOtherDir) {
+            updateMeasurements(); //  reset measurements
+        }
         final boolean layingOutInPrimaryDirection =
                 layoutState.mItemDirection == LayoutState.ITEM_DIRECTION_TAIL;
         int count = 0;
@@ -435,6 +540,7 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
         }
 
         int maxSize = 0;
+        float maxSizeInOther = 0; // use a float to get size per span
 
         // we should assign spans before item decor offsets are calculated
         assignSpans(recycler, state, count, consumedSpanCount, layingOutInPrimaryDirection);
@@ -455,35 +561,73 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
             }
 
             final LayoutParams lp = (LayoutParams) view.getLayoutParams();
-            final int spec = View.MeasureSpec.makeMeasureSpec(
-                    mCachedBorders[lp.mSpanIndex + lp.mSpanSize] -
-                            mCachedBorders[lp.mSpanIndex],
-                    View.MeasureSpec.EXACTLY);
+            final int spec = getChildMeasureSpec(mCachedBorders[lp.mSpanIndex + lp.mSpanSize] -
+                    mCachedBorders[lp.mSpanIndex], otherDirSpecMode, 0,
+                    mOrientation == HORIZONTAL ? lp.height : lp.width,
+                    false);
+            final int mainSpec = getChildMeasureSpec(mOrientationHelper.getTotalSpace(),
+                    mOrientationHelper.getMode(), 0,
+                    mOrientation == VERTICAL ? lp.height : lp.width, true);
+            // Unless the child has MATCH_PARENT, measure it from its specs before adding insets.
             if (mOrientation == VERTICAL) {
-                measureChildWithDecorationsAndMargin(view, spec, getMainDirSpec(lp.height), false);
+                @SuppressWarnings("deprecation")
+                final boolean applyInsets = lp.height == ViewGroup.LayoutParams.FILL_PARENT;
+                measureChildWithDecorationsAndMargin(view, spec, mainSpec, applyInsets, false);
             } else {
-                measureChildWithDecorationsAndMargin(view, getMainDirSpec(lp.width), spec, false);
+                //noinspection deprecation
+                final boolean applyInsets = lp.width == ViewGroup.LayoutParams.FILL_PARENT;
+                measureChildWithDecorationsAndMargin(view, mainSpec, spec, applyInsets, false);
             }
             final int size = mOrientationHelper.getDecoratedMeasurement(view);
             if (size > maxSize) {
                 maxSize = size;
             }
+            final float otherSize = 1f * mOrientationHelper.getDecoratedMeasurementInOther(view) /
+                    lp.mSpanSize;
+            if (otherSize > maxSizeInOther) {
+                maxSizeInOther = otherSize;
+            }
         }
-
-        // views that did not measure the maxSize has to be re-measured
-        final int maxMeasureSpec = getMainDirSpec(maxSize);
+        if (flexibleInOtherDir) {
+            // re-distribute columns
+            guessMeasurement(maxSizeInOther, currentOtherDirSize);
+            // now we should re-measure any item that was match parent.
+            maxSize = 0;
+            for (int i = 0; i < count; i++) {
+                View view = mSet[i];
+                final LayoutParams lp = (LayoutParams) view.getLayoutParams();
+                final int spec = getChildMeasureSpec(mCachedBorders[lp.mSpanIndex + lp.mSpanSize] -
+                                mCachedBorders[lp.mSpanIndex], View.MeasureSpec.EXACTLY, 0,
+                        mOrientation == HORIZONTAL ? lp.height : lp.width, false);
+                final int mainSpec = getChildMeasureSpec(mOrientationHelper.getTotalSpace(),
+                        mOrientationHelper.getMode(), 0,
+                        mOrientation == VERTICAL ? lp.height : lp.width, true);
+                if (mOrientation == VERTICAL) {
+                    measureChildWithDecorationsAndMargin(view, spec, mainSpec, false, true);
+                } else {
+                    measureChildWithDecorationsAndMargin(view, mainSpec, spec, false, true);
+                }
+                final int size = mOrientationHelper.getDecoratedMeasurement(view);
+                if (size > maxSize) {
+                    maxSize = size;
+                }
+            }
+        }
+        // Views that did not measure the maxSize has to be re-measured
+        // We will stop doing this once we introduce Gravity in the GLM layout params
+        final int maxMeasureSpec = View.MeasureSpec.makeMeasureSpec(maxSize,
+                View.MeasureSpec.EXACTLY);
         for (int i = 0; i < count; i ++) {
             final View view = mSet[i];
             if (mOrientationHelper.getDecoratedMeasurement(view) != maxSize) {
                 final LayoutParams lp = (LayoutParams) view.getLayoutParams();
-                final int spec = View.MeasureSpec.makeMeasureSpec(
-                        mCachedBorders[lp.mSpanIndex + lp.mSpanSize] -
-                                mCachedBorders[lp.mSpanIndex],
-                        View.MeasureSpec.EXACTLY);
+                final int spec = getChildMeasureSpec(mCachedBorders[lp.mSpanIndex + lp.mSpanSize]
+                                - mCachedBorders[lp.mSpanIndex], View.MeasureSpec.EXACTLY, 0,
+                        mOrientation == HORIZONTAL ? lp.height : lp.width, false);
                 if (mOrientation == VERTICAL) {
-                    measureChildWithDecorationsAndMargin(view, spec, maxMeasureSpec, true);
+                    measureChildWithDecorationsAndMargin(view, spec, maxMeasureSpec, true, true);
                 } else {
-                    measureChildWithDecorationsAndMargin(view, maxMeasureSpec, spec, true);
+                    measureChildWithDecorationsAndMargin(view, maxMeasureSpec, spec, true, true);
                 }
             }
         }
@@ -512,8 +656,13 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
             View view = mSet[i];
             LayoutParams params = (LayoutParams) view.getLayoutParams();
             if (mOrientation == VERTICAL) {
-                left = getPaddingLeft() + mCachedBorders[params.mSpanIndex];
-                right = left + mOrientationHelper.getDecoratedMeasurementInOther(view);
+                if (isLayoutRTL()) {
+                    right = getPaddingLeft() + mCachedBorders[params.mSpanIndex + params.mSpanSize];
+                    left = right - mOrientationHelper.getDecoratedMeasurementInOther(view);
+                } else {
+                    left = getPaddingLeft() + mCachedBorders[params.mSpanIndex];
+                    right = left + mOrientationHelper.getDecoratedMeasurementInOther(view);
+                }
             } else {
                 top = getPaddingTop() + mCachedBorders[params.mSpanIndex];
                 bottom = top + mOrientationHelper.getDecoratedMeasurementInOther(view);
@@ -537,16 +686,24 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
         Arrays.fill(mSet, null);
     }
 
-    private int getMainDirSpec(int dim) {
-        if (dim < 0) {
-            return MAIN_DIR_SPEC;
-        } else {
-            return View.MeasureSpec.makeMeasureSpec(dim, View.MeasureSpec.EXACTLY);
-        }
+    /**
+     * This is called after laying out a row (if vertical) or a column (if horizontal) when the
+     * RecyclerView does not have exact measurement specs.
+     * <p>
+     * Here we try to assign a best guess width or height and re-do the layout to update other
+     * views that wanted to FILL_PARENT in the non-scroll orientation.
+     *
+     * @param maxSizeInOther The maximum size per span ratio from the measurement of the children.
+     * @param currentOtherDirSize The size before this layout chunk. There is no reason to go below.
+     */
+    private void guessMeasurement(float maxSizeInOther, int currentOtherDirSize) {
+        final int contentSize = Math.round(maxSizeInOther * mSpanCount);
+        // always re-calculate because borders were stretched during the fill
+        calculateItemBorders(Math.max(contentSize, currentOtherDirSize));
     }
 
     private void measureChildWithDecorationsAndMargin(View child, int widthSpec, int heightSpec,
-            boolean capBothSpecs) {
+            boolean capBothSpecs, boolean alreadyMeasured) {
         calculateItemDecorationsForChild(child, mDecorInsets);
         RecyclerView.LayoutParams lp = (RecyclerView.LayoutParams) child.getLayoutParams();
         if (capBothSpecs || mOrientation == VERTICAL) {
@@ -557,7 +714,16 @@ private void measureChildWithDecorationsAndMargin(View child, int widthSpec, int
             heightSpec = updateSpecWithExtra(heightSpec, lp.topMargin + mDecorInsets.top,
                     lp.bottomMargin + mDecorInsets.bottom);
         }
-        child.measure(widthSpec, heightSpec);
+        final boolean measure;
+        if (alreadyMeasured) {
+            measure = shouldReMeasureChild(child, widthSpec, heightSpec, lp);
+        } else {
+            measure = shouldMeasureChild(child, widthSpec, heightSpec, lp);
+        }
+        if (measure) {
+            child.measure(widthSpec, heightSpec);
+        }
+
     }
 
     private int updateSpecWithExtra(int spec, int startInset, int endInset) {
@@ -567,7 +733,7 @@ private int updateSpecWithExtra(int spec, int startInset, int endInset) {
         final int mode = View.MeasureSpec.getMode(spec);
         if (mode == View.MeasureSpec.AT_MOST || mode == View.MeasureSpec.EXACTLY) {
             return View.MeasureSpec.makeMeasureSpec(
-                    View.MeasureSpec.getSize(spec) - startInset - endInset, mode);
+                    Math.max(0, View.MeasureSpec.getSize(spec) - startInset - endInset), mode);
         }
         return spec;
     }
@@ -806,6 +972,78 @@ public int getSpanGroupIndex(int adapterPosition, int spanCount) {
         }
     }
 
+    @Override
+    public View onFocusSearchFailed(View focused, int focusDirection,
+            RecyclerView.Recycler recycler, RecyclerView.State state) {
+        View prevFocusedChild = findContainingItemView(focused);
+        if (prevFocusedChild == null) {
+            return null;
+        }
+        LayoutParams lp = (LayoutParams) prevFocusedChild.getLayoutParams();
+        final int prevSpanStart = lp.mSpanIndex;
+        final int prevSpanEnd = lp.mSpanIndex + lp.mSpanSize;
+        View view = super.onFocusSearchFailed(focused, focusDirection, recycler, state);
+        if (view == null) {
+            return null;
+        }
+        // LinearLayoutManager finds the last child. What we want is the child which has the same
+        // spanIndex.
+        final int layoutDir = convertFocusDirectionToLayoutDirection(focusDirection);
+        final boolean ascend = (layoutDir == LayoutState.LAYOUT_END) != mShouldReverseLayout;
+        final int start, inc, limit;
+        if (ascend) {
+            start = getChildCount() - 1;
+            inc = -1;
+            limit = -1;
+        } else {
+            start = 0;
+            inc = 1;
+            limit = getChildCount();
+        }
+        final boolean preferLastSpan = mOrientation == VERTICAL && isLayoutRTL();
+        View weakCandidate = null; // somewhat matches but not strong
+        int weakCandidateSpanIndex = -1;
+        int weakCandidateOverlap = 0; // how many spans overlap
+
+        for (int i = start; i != limit; i += inc) {
+            View candidate = getChildAt(i);
+            if (candidate == prevFocusedChild) {
+                break;
+            }
+            if (!candidate.isFocusable()) {
+                continue;
+            }
+            final LayoutParams candidateLp = (LayoutParams) candidate.getLayoutParams();
+            final int candidateStart = candidateLp.mSpanIndex;
+            final int candidateEnd = candidateLp.mSpanIndex + candidateLp.mSpanSize;
+            if (candidateStart == prevSpanStart && candidateEnd == prevSpanEnd) {
+                return candidate; // perfect match
+            }
+            boolean assignAsWeek = false;
+            if (weakCandidate == null) {
+                assignAsWeek = true;
+            } else {
+                int maxStart = Math.max(candidateStart, prevSpanStart);
+                int minEnd = Math.min(candidateEnd, prevSpanEnd);
+                int overlap = minEnd - maxStart;
+                if (overlap > weakCandidateOverlap) {
+                    assignAsWeek = true;
+                } else if (overlap == weakCandidateOverlap &&
+                        preferLastSpan == (candidateStart > weakCandidateSpanIndex)) {
+                    assignAsWeek = true;
+                }
+            }
+
+            if (assignAsWeek) {
+                weakCandidate = candidate;
+                weakCandidateSpanIndex = candidateLp.mSpanIndex;
+                weakCandidateOverlap = Math.min(candidateEnd, prevSpanEnd) -
+                        Math.max(candidateStart, prevSpanStart);
+            }
+        }
+        return weakCandidate;
+    }
+
     @Override
     public boolean supportsPredictiveItemAnimations() {
         return mPendingSavedState == null && !mPendingSpanCountChange;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LayoutState.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LayoutState.java
index e3a9c8b18..9ee6745ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LayoutState.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LayoutState.java
@@ -15,6 +15,7 @@
  */
 
 package org.telegram.messenger.support.widget;
+
 import android.view.View;
 
 /**
@@ -35,8 +36,11 @@
 
     final static int ITEM_DIRECTION_TAIL = 1;
 
-    final static int SCOLLING_OFFSET_NaN = Integer.MIN_VALUE;
-
+    /**
+     * We may not want to recycle children in some cases (e.g. layout)
+     */
+    boolean mRecycle = true;
+    
     /**
      * Number of pixels that we should fill, in the layout direction.
      */
@@ -69,6 +73,16 @@
      */
     int mEndLine = 0;
 
+    /**
+     * If true, layout should stop if a focusable view is added
+     */
+    boolean mStopInFocusable;
+
+    /**
+     * If the content is not wrapped with any value
+     */
+    boolean mInfinite;
+
     /**
      * @return true if there are more items in the data adapter
      */
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
index 44864b0ff..b12110689 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearLayoutManager.java
@@ -16,6 +16,8 @@
 
 package org.telegram.messenger.support.widget;
 
+import static org.telegram.messenger.support.widget.RecyclerView.NO_POSITION;
+
 import android.content.Context;
 import android.graphics.PointF;
 import android.os.Parcel;
@@ -23,20 +25,18 @@
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.accessibility.AccessibilityEventCompat;
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
-
+import org.telegram.messenger.support.widget.RecyclerView.LayoutParams;
 import org.telegram.messenger.support.widget.helper.ItemTouchHelper;
+import android.util.AttributeSet;
 import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
-import org.telegram.messenger.support.widget.RecyclerView.LayoutParams;
 
 import java.util.List;
 
-import static org.telegram.messenger.support.widget.RecyclerView.NO_POSITION;
-
 /**
- * A {@link RecyclerView.LayoutManager} implementation which provides
+ * A {@link android.support.v7.widget.RecyclerView.LayoutManager} implementation which provides
  * similar functionality to {@link android.widget.ListView}.
  */
 public class LinearLayoutManager extends RecyclerView.LayoutManager implements
@@ -58,7 +58,7 @@
      * than this factor times the total space of the list. If layout is vertical, total space is the
      * height minus padding, if layout is horizontal, total space is the width minus padding.
      */
-    private static final float MAX_SCROLL_FACTOR = 0.33f;
+    private static final float MAX_SCROLL_FACTOR = 1 / 3f;
 
 
     /**
@@ -154,6 +154,24 @@ public LinearLayoutManager(Context context) {
     public LinearLayoutManager(Context context, int orientation, boolean reverseLayout) {
         setOrientation(orientation);
         setReverseLayout(reverseLayout);
+        setAutoMeasureEnabled(true);
+    }
+
+    /**
+     * Constructor used when layout manager is set in XML by RecyclerView attribute
+     * "layoutManager". Defaults to vertical orientation.
+     *
+     * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation
+     * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_reverseLayout
+     * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_stackFromEnd
+     */
+    public LinearLayoutManager(Context context, AttributeSet attrs, int defStyleAttr,
+                               int defStyleRes) {
+        Properties properties = getProperties(context, attrs, defStyleAttr, defStyleRes);
+        setOrientation(properties.orientation);
+        setReverseLayout(properties.reverseLayout);
+        setStackFromEnd(properties.stackFromEnd);
+        setAutoMeasureEnabled(true);
     }
 
     /**
@@ -288,8 +306,7 @@ public boolean getStackFromEnd() {
     /**
      * Returns the current orientaion of the layout.
      *
-     * @return Current orientation.
-     * @see #mOrientation
+     * @return Current orientation,  either {@link #HORIZONTAL} or {@link #VERTICAL}
      * @see #setOrientation(int)
      */
     public int getOrientation() {
@@ -297,7 +314,7 @@ public int getOrientation() {
     }
 
     /**
-     * Sets the orientation of the layout. {@link org.telegram.messenger.support.widget.LinearLayoutManager}
+     * Sets the orientation of the layout. {@link android.support.v7.widget.LinearLayoutManager}
      * will do its best to keep scroll position.
      *
      * @param orientation {@link #HORIZONTAL} or {@link #VERTICAL}
@@ -333,7 +350,7 @@ private void resolveShouldLayoutReverse() {
      * Returns if views are laid out from the opposite direction of the layout.
      *
      * @return If layout is reversed or not.
-     * @see {@link #setReverseLayout(boolean)}
+     * @see #setReverseLayout(boolean)
      */
     public boolean getReverseLayout() {
         return mReverseLayout;
@@ -345,8 +362,8 @@ public boolean getReverseLayout() {
      * laid out at the end of the UI, second item is laid out before it etc.
      *
      * For horizontal layouts, it depends on the layout direction.
-     * When set to true, If {@link RecyclerView} is LTR, than it will
-     * layout from RTL, if {@link RecyclerView}} is RTL, it will layout
+     * When set to true, If {@link android.support.v7.widget.RecyclerView} is LTR, than it will
+     * layout from RTL, if {@link android.support.v7.widget.RecyclerView}} is RTL, it will layout
      * from LTR.
      *
      * If you are looking for the exact same behavior of
@@ -385,7 +402,7 @@ public View findViewByPosition(int position) {
 
     /**
      * <p>Returns the amount of extra space that should be laid out by LayoutManager.
-     * By default, {@link org.telegram.messenger.support.widget.LinearLayoutManager} lays out 1 extra page of
+     * By default, {@link android.support.v7.widget.LinearLayoutManager} lays out 1 extra page of
      * items while smooth scrolling and 0 otherwise. You can override this method to implement your
      * custom layout pre-cache logic.</p>
      * <p>Laying out invisible elements will eventually come with performance cost. On the other
@@ -512,8 +529,18 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
         }
         int startOffset;
         int endOffset;
-        onAnchorReady(recycler, state, mAnchorInfo);
+        final int firstLayoutDirection;
+        if (mAnchorInfo.mLayoutFromEnd) {
+            firstLayoutDirection = mShouldReverseLayout ? LayoutState.ITEM_DIRECTION_TAIL :
+                    LayoutState.ITEM_DIRECTION_HEAD;
+        } else {
+            firstLayoutDirection = mShouldReverseLayout ? LayoutState.ITEM_DIRECTION_HEAD :
+                    LayoutState.ITEM_DIRECTION_TAIL;
+        }
+
+        onAnchorReady(recycler, state, mAnchorInfo, firstLayoutDirection);
         detachAndScrapAttachedViews(recycler);
+        mLayoutState.mInfinite = resolveIsInfinite();
         mLayoutState.mIsPreLayout = state.isPreLayout();
         if (mAnchorInfo.mLayoutFromEnd) {
             // fill towards start
@@ -606,13 +633,14 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
     /**
      * Method called when Anchor position is decided. Extending class can setup accordingly or
      * even update anchor info if necessary.
-     *
-     * @param recycler
-     * @param state
-     * @param anchorInfo Simple data structure to keep anchor point information for the next layout
+     * @param recycler The recycler for the layout
+     * @param state The layout state
+     * @param anchorInfo The mutable POJO that keeps the position and offset.
+     * @param firstLayoutItemDirection The direction of the first layout filling in terms of adapter
+     *                                 indices.
      */
     void onAnchorReady(RecyclerView.Recycler recycler, RecyclerView.State state,
-                       AnchorInfo anchorInfo) {
+                       AnchorInfo anchorInfo, int firstLayoutItemDirection) {
     }
 
     /**
@@ -1100,9 +1128,11 @@ public boolean isSmoothScrollbarEnabled() {
 
     private void updateLayoutState(int layoutDirection, int requiredSpace,
             boolean canUseExistingSpace, RecyclerView.State state) {
+        // If parent provides a hint, don't measure unlimited.
+        mLayoutState.mInfinite = resolveIsInfinite();
         mLayoutState.mExtra = getExtraLayoutSpace(state);
         mLayoutState.mLayoutDirection = layoutDirection;
-        int fastScrollSpace;
+        int scrollingOffset;
         if (layoutDirection == LayoutState.LAYOUT_END) {
             mLayoutState.mExtra += mOrientationHelper.getEndPadding();
             // get the first child in the direction we are going
@@ -1113,7 +1143,7 @@ private void updateLayoutState(int layoutDirection, int requiredSpace,
             mLayoutState.mCurrentPosition = getPosition(child) + mLayoutState.mItemDirection;
             mLayoutState.mOffset = mOrientationHelper.getDecoratedEnd(child);
             // calculate how much we can scroll without adding new children (independent of layout)
-            fastScrollSpace = mOrientationHelper.getDecoratedEnd(child)
+            scrollingOffset = mOrientationHelper.getDecoratedEnd(child)
                     - mOrientationHelper.getEndAfterPadding();
 
         } else {
@@ -1123,14 +1153,19 @@ private void updateLayoutState(int layoutDirection, int requiredSpace,
                     : LayoutState.ITEM_DIRECTION_HEAD;
             mLayoutState.mCurrentPosition = getPosition(child) + mLayoutState.mItemDirection;
             mLayoutState.mOffset = mOrientationHelper.getDecoratedStart(child);
-            fastScrollSpace = -mOrientationHelper.getDecoratedStart(child)
+            scrollingOffset = -mOrientationHelper.getDecoratedStart(child)
                     + mOrientationHelper.getStartAfterPadding();
         }
         mLayoutState.mAvailable = requiredSpace;
         if (canUseExistingSpace) {
-            mLayoutState.mAvailable -= fastScrollSpace;
+            mLayoutState.mAvailable -= scrollingOffset;
         }
-        mLayoutState.mScrollingOffset = fastScrollSpace;
+        mLayoutState.mScrollingOffset = scrollingOffset;
+    }
+
+    boolean resolveIsInfinite() {
+        return mOrientationHelper.getMode() == View.MeasureSpec.UNSPECIFIED
+                && mOrientationHelper.getEnd() == 0;
     }
 
     int scrollBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
@@ -1142,8 +1177,8 @@ int scrollBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
         final int layoutDirection = dy > 0 ? LayoutState.LAYOUT_END : LayoutState.LAYOUT_START;
         final int absDy = Math.abs(dy);
         updateLayoutState(layoutDirection, absDy, true, state);
-        final int freeScroll = mLayoutState.mScrollingOffset;
-        final int consumed = freeScroll + fill(recycler, mLayoutState, state, false);
+        final int consumed = mLayoutState.mScrollingOffset
+                + fill(recycler, mLayoutState, state, false);
         if (consumed < 0) {
             if (DEBUG) {
                 Log.d(TAG, "Don't have any more elements to scroll");
@@ -1193,7 +1228,7 @@ private void recycleChildren(RecyclerView.Recycler recycler, int startIndex, int
     /**
      * Recycles views that went out of bounds after scrolling towards the end of the layout.
      *
-     * @param recycler Recycler instance of {@link RecyclerView}
+     * @param recycler Recycler instance of {@link android.support.v7.widget.RecyclerView}
      * @param dt       This can be used to add additional padding to the visible area. This is used
      *                 to detect children that will go out of bounds after scrolling, without
      *                 actually moving them.
@@ -1232,7 +1267,7 @@ private void recycleViewsFromStart(RecyclerView.Recycler recycler, int dt) {
     /**
      * Recycles views that went out of bounds after scrolling towards the start of the layout.
      *
-     * @param recycler Recycler instance of {@link RecyclerView}
+     * @param recycler Recycler instance of {@link android.support.v7.widget.RecyclerView}
      * @param dt       This can be used to add additional padding to the visible area. This is used
      *                 to detect children that will go out of bounds after scrolling, without
      *                 actually moving them.
@@ -1274,12 +1309,12 @@ private void recycleViewsFromEnd(RecyclerView.Recycler recycler, int dt) {
      * @param layoutState Current layout state. Right now, this object does not change but
      *                    we may consider moving it out of this view so passing around as a
      *                    parameter for now, rather than accessing {@link #mLayoutState}
-     * @see #recycleViewsFromStart(RecyclerView.Recycler, int)
-     * @see #recycleViewsFromEnd(RecyclerView.Recycler, int)
-     * @see org.telegram.messenger.support.widget.LinearLayoutManager.LayoutState#mLayoutDirection
+     * @see #recycleViewsFromStart(android.support.v7.widget.RecyclerView.Recycler, int)
+     * @see #recycleViewsFromEnd(android.support.v7.widget.RecyclerView.Recycler, int)
+     * @see android.support.v7.widget.LinearLayoutManager.LayoutState#mLayoutDirection
      */
     private void recycleByLayoutState(RecyclerView.Recycler recycler, LayoutState layoutState) {
-        if (!layoutState.mRecycle) {
+        if (!layoutState.mRecycle || layoutState.mInfinite) {
             return;
         }
         if (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) {
@@ -1291,7 +1326,7 @@ private void recycleByLayoutState(RecyclerView.Recycler recycler, LayoutState la
 
     /**
      * The magic functions :). Fills the given layout, defined by the layoutState. This is fairly
-     * independent from the rest of the {@link org.telegram.messenger.support.widget.LinearLayoutManager}
+     * independent from the rest of the {@link android.support.v7.widget.LinearLayoutManager}
      * and with little change, can be made publicly available as a helper class.
      *
      * @param recycler        Current recycler that is attached to RecyclerView
@@ -1313,7 +1348,7 @@ int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
         }
         int remainingSpace = layoutState.mAvailable + layoutState.mExtra;
         LayoutChunkResult layoutChunkResult = new LayoutChunkResult();
-        while (remainingSpace > 0 && layoutState.hasMore(state)) {
+        while ((layoutState.mInfinite || remainingSpace > 0) && layoutState.hasMore(state)) {
             layoutChunkResult.resetInternal();
             layoutChunk(recycler, state, layoutState, layoutChunkResult);
             if (layoutChunkResult.mFinished) {
@@ -1424,6 +1459,13 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
         result.mFocusable = view.isFocusable();
     }
 
+    @Override
+    boolean shouldMeasureTwice() {
+        return getHeightMode() != View.MeasureSpec.EXACTLY
+                && getWidthMode() != View.MeasureSpec.EXACTLY
+                && hasFlexibleChildInBothOrientations();
+    }
+
     /**
      * Converts a focusDirection to orientation.
      *
@@ -1434,7 +1476,7 @@ void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,
      * @return {@link LayoutState#LAYOUT_START} or {@link LayoutState#LAYOUT_END} if focus direction
      * is applicable to current state, {@link LayoutState#INVALID_LAYOUT} otherwise.
      */
-    private int convertFocusDirectionToLayoutDirection(int focusDirection) {
+    int convertFocusDirectionToLayoutDirection(int focusDirection) {
         switch (focusDirection) {
             case View.FOCUS_BACKWARD:
                 return LayoutState.LAYOUT_START;
@@ -1916,7 +1958,8 @@ public void prepareForDrop(View view, View target, int x, int y) {
         boolean mIsPreLayout = false;
 
         /**
-         * The most recent {@link #scrollBy(int, RecyclerView.Recycler, RecyclerView.State)} amount.
+         * The most recent {@link #scrollBy(int, RecyclerView.Recycler, RecyclerView.State)}
+         * amount.
          */
         int mLastScrollDelta;
 
@@ -1926,6 +1969,11 @@ public void prepareForDrop(View view, View target, int x, int y) {
          */
         List<RecyclerView.ViewHolder> mScrapList = null;
 
+        /**
+         * Used when there is no limit in how many views can be laid out.
+         */
+        boolean mInfinite;
+
         /**
          * @return true if there are more items in the data adapter
          */
@@ -2020,7 +2068,10 @@ void log() {
         }
     }
 
-    static class SavedState implements Parcelable {
+    /**
+     * @hide
+     */
+    public static class SavedState implements Parcelable {
 
         int mAnchorPosition;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
index dbb50209c..e5a611180 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/LinearSmoothScroller.java
@@ -24,8 +24,6 @@
 import android.view.animation.DecelerateInterpolator;
 import android.view.animation.LinearInterpolator;
 
-import org.telegram.messenger.support.widget.RecyclerView;
-
 /**
  * {@link RecyclerView.SmoothScroller} implementation which uses
  * {@link android.view.animation.LinearInterpolator} until the target position becames a child of
@@ -124,6 +122,7 @@ protected void onSeekTargetStep(int dx, int dy, RecyclerView.State state, Action
             stop();
             return;
         }
+        //noinspection PointlessBooleanExpression
         if (DEBUG && mTargetVector != null
                 && ((mTargetVector.x * dx < 0 || mTargetVector.y * dy < 0))) {
             throw new IllegalStateException("Scroll happened in the opposite direction"
@@ -293,13 +292,13 @@ public int calculateDtToFit(int viewStart, int viewEnd, int boxStart, int boxEnd
      * @param view           The view which we want to make fully visible
      * @param snapPreference The edge which the view should snap to when entering the visible
      *                       area. One of {@link #SNAP_TO_START}, {@link #SNAP_TO_END} or
-     *                       {@link #SNAP_TO_END}.
+     *                       {@link #SNAP_TO_ANY}.
      * @return The vertical scroll amount necessary to make the view visible with the given
      * snap preference.
      */
     public int calculateDyToMakeVisible(View view, int snapPreference) {
         final RecyclerView.LayoutManager layoutManager = getLayoutManager();
-        if (!layoutManager.canScrollVertically()) {
+        if (layoutManager == null || !layoutManager.canScrollVertically()) {
             return 0;
         }
         final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)
@@ -324,7 +323,7 @@ public int calculateDyToMakeVisible(View view, int snapPreference) {
      */
     public int calculateDxToMakeVisible(View view, int snapPreference) {
         final RecyclerView.LayoutManager layoutManager = getLayoutManager();
-        if (!layoutManager.canScrollHorizontally()) {
+        if (layoutManager == null || !layoutManager.canScrollHorizontally()) {
             return 0;
         }
         final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OrientationHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OrientationHelper.java
index 42a04f8b1..1c8aa4a9d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OrientationHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/OrientationHelper.java
@@ -19,8 +19,6 @@
 import android.view.View;
 import android.widget.LinearLayout;
 
-import org.telegram.messenger.support.widget.RecyclerView;
-
 /**
  * Helper class for LayoutManagers to abstract measurements depending on the View's orientation.
  * <p>
@@ -167,6 +165,28 @@ public int getTotalSpaceChange() {
      */
     public abstract int getEndPadding();
 
+    /**
+     * Returns the MeasureSpec mode for the current orientation from the LayoutManager.
+     *
+     * @return The current measure spec mode.
+     *
+     * @see View.MeasureSpec
+     * @see RecyclerView.LayoutManager#getWidthMode()
+     * @see RecyclerView.LayoutManager#getHeightMode()
+     */
+    public abstract int getMode();
+
+    /**
+     * Returns the MeasureSpec mode for the perpendicular orientation from the LayoutManager.
+     *
+     * @return The current measure spec mode.
+     *
+     * @see View.MeasureSpec
+     * @see RecyclerView.LayoutManager#getWidthMode()
+     * @see RecyclerView.LayoutManager#getHeightMode()
+     */
+    public abstract int getModeInOther();
+
     /**
      * Creates an OrientationHelper for the given LayoutManager and orientation.
      *
@@ -259,6 +279,16 @@ public void offsetChild(View view, int offset) {
             public int getEndPadding() {
                 return mLayoutManager.getPaddingRight();
             }
+
+            @Override
+            public int getMode() {
+                return mLayoutManager.getWidthMode();
+            }
+
+            @Override
+            public int getModeInOther() {
+                return mLayoutManager.getHeightMode();
+            }
         };
     }
 
@@ -335,6 +365,16 @@ public void offsetChild(View view, int offset) {
             public int getEndPadding() {
                 return mLayoutManager.getPaddingBottom();
             }
+
+            @Override
+            public int getMode() {
+                return mLayoutManager.getHeightMode();
+            }
+
+            @Override
+            public int getModeInOther() {
+                return mLayoutManager.getWidthMode();
+            }
         };
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
index 6f160865a..5db54056b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerView.java
@@ -18,6 +18,7 @@
 package org.telegram.messenger.support.widget;
 
 import android.content.Context;
+import android.content.res.TypedArray;
 import android.database.Observable;
 import android.graphics.Canvas;
 import android.graphics.PointF;
@@ -26,10 +27,13 @@
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.CallSuper;
 import android.os.SystemClock;
+import android.support.annotation.CallSuper;
+import android.support.annotation.IntDef;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.util.ArrayMap;
+import android.support.annotation.VisibleForTesting;
+import android.support.v4.os.TraceCompat;
 import android.support.v4.view.InputDeviceCompat;
 import android.support.v4.view.MotionEventCompat;
 import android.support.v4.view.NestedScrollingChild;
@@ -43,6 +47,9 @@
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
 import android.support.v4.widget.EdgeEffectCompat;
 import android.support.v4.widget.ScrollerCompat;
+
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.support.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.SparseArray;
@@ -52,17 +59,17 @@
 import android.view.MotionEvent;
 import android.view.VelocityTracker;
 import android.view.View;
+import android.view.View.MeasureSpec;
 import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.ViewParent;
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.Interpolator;
-import android.widget.AbsListView;
 import android.widget.EdgeEffect;
 
-import org.telegram.messenger.FileLog;
-
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -146,6 +153,9 @@
 
     private static final boolean DEBUG = false;
 
+    private static final int[]  NESTED_SCROLLING_ATTRS
+            = {16843830 /* android.R.attr.nestedScrollingEnabled */};
+
     /**
      * On Kitkat and JB MR2, there is a bug which prevents DisplayList from being invalidated if
      * a View is two levels deep(wrt to ViewHolder.itemView). DisplayList can be invalidated by
@@ -155,8 +165,14 @@
      */
     private static final boolean FORCE_INVALIDATE_DISPLAY_LIST = Build.VERSION.SDK_INT == 18
             || Build.VERSION.SDK_INT == 19 || Build.VERSION.SDK_INT == 20;
+    /**
+     * On M+, an unspecified measure spec may include a hint which we can use. On older platforms,
+     * this value might be garbage. To save LayoutManagers from it, RecyclerView sets the size to
+     * 0 when mode is unspecified.
+     */
+    static final boolean ALLOW_SIZE_IN_UNSPECIFIED_SPEC = Build.VERSION.SDK_INT >= 23;
 
-    private static final boolean DISPATCH_TEMP_DETACH = false;
+    static final boolean DISPATCH_TEMP_DETACH = false;
     public static final int HORIZONTAL = 0;
     public static final int VERTICAL = 1;
 
@@ -241,10 +257,21 @@
 
     private SavedState mPendingSavedState;
 
+    /**
+     * Handles adapter updates
+     */
     AdapterHelper mAdapterHelper;
 
+    /**
+     * Handles abstraction between LayoutManager children and RecyclerView children
+     */
     ChildHelper mChildHelper;
 
+    /**
+     * Keeps data about views to be used for animations
+     */
+    final ViewInfoStore mViewInfoStore = new ViewInfoStore();
+
     /**
      * Prior to L, there is no way to query this variable which is why we override the setter and
      * track it here.
@@ -259,36 +286,33 @@
      */
     private final Runnable mUpdateChildViewsRunnable = new Runnable() {
         public void run() {
-            if (!mFirstLayoutComplete) {
+            if (!mFirstLayoutComplete || isLayoutRequested()) {
                 // a layout request will happen, we should not do layout here.
                 return;
             }
-            if (mDataSetHasChangedAfterLayout) {
-                dispatchLayout();
-            } else if (mAdapterHelper.hasPendingUpdates()) {
-                eatRequestLayout();
-                mAdapterHelper.preProcess();
-                if (!mLayoutRequestEaten) {
-                    // We run this after pre-processing is complete so that ViewHolders have their
-                    // final adapter positions. No need to run it if a layout is already requested.
-                    rebindUpdatedViewHolders();
-                }
-                resumeRequestLayout(true);
+            if (mLayoutFrozen) {
+                mLayoutRequestEaten = true;
+                return; //we'll process updates when ice age ends.
             }
+            consumePendingUpdateOperations();
         }
     };
 
     private final Rect mTempRect = new Rect();
     private Adapter mAdapter;
-    private LayoutManager mLayout;
+    @VisibleForTesting LayoutManager mLayout;
     private RecyclerListener mRecyclerListener;
     private final ArrayList<ItemDecoration> mItemDecorations = new ArrayList<>();
-    private final ArrayList<OnItemTouchListener> mOnItemTouchListeners = new ArrayList<>();
+    private final ArrayList<OnItemTouchListener> mOnItemTouchListeners =
+            new ArrayList<>();
     private OnItemTouchListener mActiveOnItemTouchListener;
     private boolean mIsAttached;
     private boolean mHasFixedSize;
     private boolean mFirstLayoutComplete;
-    private boolean mEatRequestLayout;
+
+    // Counting lock to control whether we should ignore requestLayout calls from children or not.
+    private int mEatRequestLayout = 0;
+
     private boolean mLayoutRequestEaten;
     private boolean mLayoutFrozen;
     private boolean mIgnoreMotionEventTillDown;
@@ -378,7 +402,7 @@ public void run() {
     // preserved not to create a new one in each layout pass
     private final int[] mMinMaxLayoutPositions = new int[2];
 
-    private final NestedScrollingChildHelper mScrollingChildHelper;
+    private NestedScrollingChildHelper mScrollingChildHelper;
     private final int[] mScrollOffset = new int[2];
     private final int[] mScrollConsumed = new int[2];
     private final int[] mNestedOffsets = new int[2];
@@ -400,6 +424,44 @@ public float getInterpolation(float t) {
         }
     };
 
+    /**
+     * The callback to convert view info diffs into animations.
+     */
+    private final ViewInfoStore.ProcessCallback mViewInfoProcessCallback =
+            new ViewInfoStore.ProcessCallback() {
+        @Override
+        public void processDisappeared(ViewHolder viewHolder, @NonNull ItemHolderInfo info,
+                @Nullable ItemHolderInfo postInfo) {
+            mRecycler.unscrapView(viewHolder);
+            animateDisappearance(viewHolder, info, postInfo);
+        }
+        @Override
+        public void processAppeared(ViewHolder viewHolder,
+                ItemHolderInfo preInfo, ItemHolderInfo info) {
+            animateAppearance(viewHolder, preInfo, info);
+        }
+
+        @Override
+        public void processPersistent(ViewHolder viewHolder,
+                @NonNull ItemHolderInfo preInfo, @NonNull ItemHolderInfo postInfo) {
+            viewHolder.setIsRecyclable(false);
+            if (mDataSetHasChangedAfterLayout) {
+                // since it was rebound, use change instead as we'll be mapping them from
+                // stable ids. If stable ids were false, we would not be running any
+                // animations
+                if (mItemAnimator.animateChange(viewHolder, viewHolder, preInfo, postInfo)) {
+                    postAnimationRunner();
+                }
+            } else if (mItemAnimator.animatePersistence(viewHolder, preInfo, postInfo)) {
+                postAnimationRunner();
+            }
+        }
+        @Override
+        public void unused(ViewHolder viewHolder) {
+            mLayout.removeAndRecycleView(viewHolder.itemView, mRecycler);
+        }
+    };
+
     public RecyclerView(Context context) {
         this(context, null);
     }
@@ -433,8 +495,9 @@ public RecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle)
         mAccessibilityManager = (AccessibilityManager) getContext()
                 .getSystemService(Context.ACCESSIBILITY_SERVICE);
         setAccessibilityDelegateCompat(new RecyclerViewAccessibilityDelegate(this));
+        // Create the layoutManager if specified.
 
-        mScrollingChildHelper = new NestedScrollingChildHelper(this);
+        // Re-set whether nested scrolling is enabled so that it is set on all API levels
         setNestedScrollingEnabled(true);
     }
 
@@ -516,7 +579,7 @@ private String getFullClassName(Context context, String className) {
         if (className.charAt(0) == '.') {
             return context.getPackageName() + className;
         }
-        if (className.contains("")) {
+        if (className.indexOf('.') != -1) {
             return className;
         }
         return RecyclerView.class.getPackage().getName() + '.' + className;
@@ -704,9 +767,13 @@ public void offsetPositionsForMove(int from, int to) {
     }
 
     /**
-     * RecyclerView can perform several optimizations if it can know in advance that changes in
-     * adapter content cannot change the size of the RecyclerView itself.
-     * If your use of RecyclerView falls into this category, set this to true.
+     * RecyclerView can perform several optimizations if it can know in advance that RecyclerView's
+     * size is not affected by the adapter contents. RecyclerView can still change its size based
+     * on other factors (e.g. its parent's size) but this size calculation cannot depend on the
+     * size of its children or contents of its adapter (except the number of items in the adapter).
+     * <p>
+     * If your use of RecyclerView falls into this category, set this to {@code true}. It will allow
+     * RecyclerView to avoid invalidating the whole layout when its adapter contents change.
      *
      * @param hasFixedSize true if adapter changes cannot affect the size of the RecyclerView.
      */
@@ -897,7 +964,7 @@ public int getBaseline() {
      */
     public void addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener listener) {
         if (mOnChildAttachStateListeners == null) {
-            mOnChildAttachStateListeners = new ArrayList<OnChildAttachStateChangeListener>();
+            mOnChildAttachStateListeners = new ArrayList<>();
         }
         mOnChildAttachStateListeners.add(listener);
     }
@@ -940,6 +1007,7 @@ public void setLayoutManager(LayoutManager layout) {
         if (layout == mLayout) {
             return;
         }
+        stopScroll();
         // TODO We should do this switch a dispachLayout pass and animate children. There is a good
         // chance that LayoutManagers will re-use views.
         if (mLayout != null) {
@@ -980,6 +1048,11 @@ protected Parcelable onSaveInstanceState() {
 
     @Override
     protected void onRestoreInstanceState(Parcelable state) {
+        if (!(state instanceof SavedState)) {
+            super.onRestoreInstanceState(state);
+            return;
+        }
+
         mPendingSavedState = (SavedState) state;
         super.onRestoreInstanceState(mPendingSavedState.getSuperState());
         if (mLayout != null && mPendingSavedState.mLayoutState != null) {
@@ -1042,7 +1115,8 @@ private boolean removeAnimatingView(View view) {
                 Log.d(TAG, "after removing animated view: " + view + ", " + this);
             }
         }
-        resumeRequestLayout(false);
+        // only clear request eaten flag if we removed the view.
+        resumeRequestLayout(!removed);
         return removed;
     }
 
@@ -1148,7 +1222,7 @@ private void setScrollState(int state) {
     public void addItemDecoration(ItemDecoration decor, int index) {
         if (mLayout != null) {
             mLayout.assertNotInLayoutOrScroll("Cannot add item decoration during a scroll  or"
-                    + "layout");
+                    + " layout");
         }
         if (mItemDecorations.isEmpty()) {
             setWillNotDraw(false);
@@ -1190,7 +1264,7 @@ public void addItemDecoration(ItemDecoration decor) {
     public void removeItemDecoration(ItemDecoration decor) {
         if (mLayout != null) {
             mLayout.assertNotInLayoutOrScroll("Cannot remove item decoration during a scroll  or"
-                    + "layout");
+                    + " layout");
         }
         mItemDecorations.remove(decor);
         if (mItemDecorations.isEmpty()) {
@@ -1244,7 +1318,7 @@ public void setOnScrollListener(OnScrollListener listener) {
      */
     public void addOnScrollListener(OnScrollListener listener) {
         if (mScrollListeners == null) {
-            mScrollListeners = new ArrayList<OnScrollListener>();
+            mScrollListeners = new ArrayList<>();
         }
         mScrollListeners.add(listener);
     }
@@ -1273,9 +1347,9 @@ public void clearOnScrollListeners() {
      * Convenience method to scroll to a certain position.
      *
      * RecyclerView does not implement scrolling logic, rather forwards the call to
-     * {@link org.telegram.messenger.support.widget.RecyclerView.LayoutManager#scrollToPosition(int)}
+     * {@link android.support.v7.widget.RecyclerView.LayoutManager#scrollToPosition(int)}
      * @param position Scroll to this adapter position
-     * @see org.telegram.messenger.support.widget.RecyclerView.LayoutManager#scrollToPosition(int)
+     * @see android.support.v7.widget.RecyclerView.LayoutManager#scrollToPosition(int)
      */
     public void scrollToPosition(int position) {
         if (mLayoutFrozen) {
@@ -1328,8 +1402,8 @@ public void smoothScrollToPosition(int position) {
 
     @Override
     public void scrollTo(int x, int y) {
-        throw new UnsupportedOperationException(
-                "RecyclerView does not support scrolling to an absolute position.");
+        Log.w(TAG, "RecyclerView does not support scrolling to an absolute position. "
+                + "Use scrollToPosition instead");
     }
 
     @Override
@@ -1358,7 +1432,59 @@ public void scrollBy(int x, int y) {
      * This method consumes all deferred changes to avoid that case.
      */
     private void consumePendingUpdateOperations() {
-        mUpdateChildViewsRunnable.run();
+        if (!mFirstLayoutComplete) {
+            // a layout request will happen, we should not do layout here.
+            return;
+        }
+        if (mDataSetHasChangedAfterLayout) {
+            TraceCompat.beginSection(TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG);
+            dispatchLayout();
+            TraceCompat.endSection();
+            return;
+        }
+        if (!mAdapterHelper.hasPendingUpdates()) {
+            return;
+        }
+
+        // if it is only an item change (no add-remove-notifyDataSetChanged) we can check if any
+        // of the visible items is affected and if not, just ignore the change.
+        if (mAdapterHelper.hasAnyUpdateTypes(UpdateOp.UPDATE) && !mAdapterHelper
+                .hasAnyUpdateTypes(UpdateOp.ADD | UpdateOp.REMOVE | UpdateOp.MOVE)) {
+            TraceCompat.beginSection(TRACE_HANDLE_ADAPTER_UPDATES_TAG);
+            eatRequestLayout();
+            mAdapterHelper.preProcess();
+            if (!mLayoutRequestEaten) {
+                if (hasUpdatedView()) {
+                    dispatchLayout();
+                } else {
+                    // no need to layout, clean state
+                    mAdapterHelper.consumePostponedUpdates();
+                }
+            }
+            resumeRequestLayout(true);
+            TraceCompat.endSection();
+        } else if (mAdapterHelper.hasPendingUpdates()) {
+            TraceCompat.beginSection(TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG);
+            dispatchLayout();
+            TraceCompat.endSection();
+        }
+    }
+
+    /**
+     * @return True if an existing view holder needs to be updated
+     */
+    private boolean hasUpdatedView() {
+        final int childCount = mChildHelper.getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
+            if (holder == null || holder.shouldIgnore()) {
+                continue;
+            }
+            if (holder.isUpdated()) {
+                return true;
+            }
+        }
+        return false;
     }
 
     /**
@@ -1380,6 +1506,7 @@ boolean scrollByInternal(int x, int y, MotionEvent ev) {
         if (mAdapter != null) {
             eatRequestLayout();
             onEnterLayoutOrScroll();
+            TraceCompat.beginSection(TRACE_SCROLL_TAG);
             if (x != 0) {
                 consumedX = mLayout.scrollHorizontallyBy(x, mRecycler, mState);
                 unconsumedX = x - consumedX;
@@ -1388,27 +1515,8 @@ boolean scrollByInternal(int x, int y, MotionEvent ev) {
                 consumedY = mLayout.scrollVerticallyBy(y, mRecycler, mState);
                 unconsumedY = y - consumedY;
             }
-            if (supportsChangeAnimations()) {
-                // Fix up shadow views used by changing animations
-                int count = mChildHelper.getChildCount();
-                for (int i = 0; i < count; i++) {
-                    View view = mChildHelper.getChildAt(i);
-                    ViewHolder holder = getChildViewHolder(view);
-                    if (holder != null && holder.mShadowingHolder != null) {
-                        ViewHolder shadowingHolder = holder.mShadowingHolder;
-                        View shadowingView = shadowingHolder != null ? shadowingHolder.itemView : null;
-                        if (shadowingView != null) {
-                            int left = view.getLeft();
-                            int top = view.getTop();
-                            if (left != shadowingView.getLeft() || top != shadowingView.getTop()) {
-                                shadowingView.layout(left, top,
-                                        left + shadowingView.getWidth(),
-                                        top + shadowingView.getHeight());
-                            }
-                        }
-                    }
-                }
-            }
+            TraceCompat.endSection();
+            repositionShadowingViews();
             onExitLayoutOrScroll();
             resumeRequestLayout(false);
         }
@@ -1455,13 +1563,15 @@ boolean scrollByInternal(int x, int y, MotionEvent ev) {
      * LayoutManager. </p>
      *
      * @return The horizontal offset of the scrollbar's thumb
-     * @see org.telegram.messenger.support.widget.RecyclerView.LayoutManager#computeHorizontalScrollOffset
+     * @see android.support.v7.widget.RecyclerView.LayoutManager#computeHorizontalScrollOffset
      * (RecyclerView.Adapter)
      */
     @Override
     public int computeHorizontalScrollOffset() {
-        return mLayout.canScrollHorizontally() ? mLayout.computeHorizontalScrollOffset(mState)
-                : 0;
+        if (mLayout == null) {
+            return 0;
+        }
+        return mLayout.canScrollHorizontally() ? mLayout.computeHorizontalScrollOffset(mState) : 0;
     }
 
     /**
@@ -1483,6 +1593,9 @@ public int computeHorizontalScrollOffset() {
      */
     @Override
     public int computeHorizontalScrollExtent() {
+        if (mLayout == null) {
+            return 0;
+        }
         return mLayout.canScrollHorizontally() ? mLayout.computeHorizontalScrollExtent(mState) : 0;
     }
 
@@ -1503,6 +1616,9 @@ public int computeHorizontalScrollExtent() {
      */
     @Override
     public int computeHorizontalScrollRange() {
+        if (mLayout == null) {
+            return 0;
+        }
         return mLayout.canScrollHorizontally() ? mLayout.computeHorizontalScrollRange(mState) : 0;
     }
 
@@ -1520,11 +1636,14 @@ public int computeHorizontalScrollRange() {
      * LayoutManager.</p>
      *
      * @return The vertical offset of the scrollbar's thumb
-     * @see org.telegram.messenger.support.widget.RecyclerView.LayoutManager#computeVerticalScrollOffset
+     * @see android.support.v7.widget.RecyclerView.LayoutManager#computeVerticalScrollOffset
      * (RecyclerView.Adapter)
      */
     @Override
     public int computeVerticalScrollOffset() {
+        if (mLayout == null) {
+            return 0;
+        }
         return mLayout.canScrollVertically() ? mLayout.computeVerticalScrollOffset(mState) : 0;
     }
 
@@ -1546,6 +1665,9 @@ public int computeVerticalScrollOffset() {
      */
     @Override
     public int computeVerticalScrollExtent() {
+        if (mLayout == null) {
+            return 0;
+        }
         return mLayout.canScrollVertically() ? mLayout.computeVerticalScrollExtent(mState) : 0;
     }
 
@@ -1566,31 +1688,50 @@ public int computeVerticalScrollExtent() {
      */
     @Override
     public int computeVerticalScrollRange() {
+        if (mLayout == null) {
+            return 0;
+        }
         return mLayout.canScrollVertically() ? mLayout.computeVerticalScrollRange(mState) : 0;
     }
 
 
     void eatRequestLayout() {
-        if (!mEatRequestLayout) {
-            mEatRequestLayout = true;
-            if (!mLayoutFrozen) {
-                mLayoutRequestEaten = false;
-            }
+        mEatRequestLayout++;
+        if (mEatRequestLayout == 1 && !mLayoutFrozen) {
+            mLayoutRequestEaten = false;
         }
     }
 
     void resumeRequestLayout(boolean performLayoutChildren) {
-        if (mEatRequestLayout) {
+        if (mEatRequestLayout < 1) {
+            //noinspection PointlessBooleanExpression
+            if (DEBUG) {
+                throw new IllegalStateException("invalid eat request layout count");
+            }
+            mEatRequestLayout = 1;
+        }
+        if (!performLayoutChildren) {
+            // Reset the layout request eaten counter.
+            // This is necessary since eatRequest calls can be nested in which case the outher
+            // call will override the inner one.
+            // for instance:
+            // eat layout for process adapter updates
+            //   eat layout for dispatchLayout
+            //     a bunch of req layout calls arrive
+
+            mLayoutRequestEaten = false;
+        }
+        if (mEatRequestLayout == 1) {
             // when layout is frozen we should delay dispatchLayout()
             if (performLayoutChildren && mLayoutRequestEaten && !mLayoutFrozen &&
                     mLayout != null && mAdapter != null) {
                 dispatchLayout();
             }
-            mEatRequestLayout = false;
             if (!mLayoutFrozen) {
                 mLayoutRequestEaten = false;
             }
         }
+        mEatRequestLayout--;
     }
 
     /**
@@ -1619,7 +1760,7 @@ public void setLayoutFrozen(boolean frozen) {
         if (frozen != mLayoutFrozen) {
             assertNotInLayoutOrScroll("Do not setLayoutFrozen in layout or scroll");
             if (!frozen) {
-                mLayoutFrozen = frozen;
+                mLayoutFrozen = false;
                 if (mLayoutRequestEaten && mLayout != null && mAdapter != null) {
                     requestLayout();
                 }
@@ -1629,7 +1770,7 @@ public void setLayoutFrozen(boolean frozen) {
                 MotionEvent cancelEvent = MotionEvent.obtain(now, now,
                         MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);
                 onTouchEvent(cancelEvent);
-                mLayoutFrozen = frozen;
+                mLayoutFrozen = true;
                 mIgnoreMotionEventTillDown = true;
                 stopScroll();
             }
@@ -2007,6 +2148,7 @@ protected void onDetachedFromWindow() {
             mLayout.dispatchDetachedFromWindow(this, mRecycler);
         }
         removeCallbacks(mItemAnimatorRunner);
+        mViewInfoStore.onDetach();
     }
 
     /**
@@ -2170,6 +2312,9 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
                     setScrollState(SCROLL_STATE_DRAGGING);
                 }
 
+                // Clear the nested offsets
+                mNestedOffsets[0] = mNestedOffsets[1] = 0;
+
                 int nestedScrollAxis = ViewCompat.SCROLL_AXIS_NONE;
                 if (canScrollHorizontally) {
                     nestedScrollAxis |= ViewCompat.SCROLL_AXIS_HORIZONTAL;
@@ -2209,10 +2354,6 @@ public boolean onInterceptTouchEvent(MotionEvent e) {
                         startScroll = true;
                     }
                     if (startScroll) {
-                        final ViewParent parent = getParent();
-                        if (parent != null) {
-                            parent.requestDisallowInterceptTouchEvent(true);
-                        }
                         setScrollState(SCROLL_STATE_DRAGGING);
                     }
                 }
@@ -2338,10 +2479,6 @@ public boolean onTouchEvent(MotionEvent e) {
                         startScroll = true;
                     }
                     if (startScroll) {
-                        final ViewParent parent = getParent();
-                        if (parent != null) {
-                            parent.requestDisallowInterceptTouchEvent(true);
-                        }
                         setScrollState(SCROLL_STATE_DRAGGING);
                     }
                 }
@@ -2463,79 +2600,93 @@ private float getScrollFactor() {
             } else {
                 return 0; //listPreferredItemHeight is not defined, no generic scrolling
             }
-
         }
         return mScrollFactor;
     }
 
     @Override
     protected void onMeasure(int widthSpec, int heightSpec) {
-        if (mAdapterUpdateDuringMeasure) {
-            eatRequestLayout();
-            processAdapterUpdatesAndSetAnimationFlags();
-
-            if (mState.mRunPredictiveAnimations) {
-                // TODO: try to provide a better approach.
-                // When RV decides to run predictive animations, we need to measure in pre-layout
-                // state so that pre-layout pass results in correct layout.
-                // On the other hand, this will prevent the layout manager from resizing properly.
-                mState.mInPreLayout = true;
-            } else {
-                // consume remaining updates to provide a consistent state with the layout pass.
-                mAdapterHelper.consumeUpdatesInOnePass();
-                mState.mInPreLayout = false;
-            }
-            mAdapterUpdateDuringMeasure = false;
-            resumeRequestLayout(false);
-        }
-
-        if (mAdapter != null) {
-            mState.mItemCount = mAdapter.getItemCount();
-        } else {
-            mState.mItemCount = 0;
-        }
         if (mLayout == null) {
             defaultOnMeasure(widthSpec, heightSpec);
+            return;
+        }
+        if (mLayout.mAutoMeasure) {
+            final int widthMode = MeasureSpec.getMode(widthSpec);
+            final int heightMode = MeasureSpec.getMode(heightSpec);
+            final boolean skipMeasure = widthMode == MeasureSpec.EXACTLY
+                    && heightMode == MeasureSpec.EXACTLY;
+            mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);
+            if (skipMeasure || mAdapter == null) {
+                return;
+            }
+            if (mState.mLayoutStep == State.STEP_START) {
+                dispatchLayoutStep1();
+            }
+            // set dimensions in 2nd step. Pre-layout should happen with old dimensions for
+            // consistency
+            mLayout.setMeasureSpecs(widthSpec, heightSpec);
+            mState.mIsMeasuring = true;
+            dispatchLayoutStep2();
+
+            // now we can get the width and height from the children.
+            mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);
+
+            // if RecyclerView has non-exact width and height and if there is at least one child
+            // which also has non-exact width & height, we have to re-measure.
+            if (mLayout.shouldMeasureTwice()) {
+                mLayout.setMeasureSpecs(
+                        MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY),
+                        MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));
+                mState.mIsMeasuring = true;
+                dispatchLayoutStep2();
+                // now we can get the width and height from the children.
+                mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);
+            }
         } else {
+            if (mHasFixedSize) {
+                mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);
+                return;
+            }
+            // custom onMeasure
+            if (mAdapterUpdateDuringMeasure) {
+                eatRequestLayout();
+                processAdapterUpdatesAndSetAnimationFlags();
+
+                if (mState.mRunPredictiveAnimations) {
+                    mState.mInPreLayout = true;
+                } else {
+                    // consume remaining updates to provide a consistent state with the layout pass.
+                    mAdapterHelper.consumeUpdatesInOnePass();
+                    mState.mInPreLayout = false;
+                }
+                mAdapterUpdateDuringMeasure = false;
+                resumeRequestLayout(false);
+            }
+
+            if (mAdapter != null) {
+                mState.mItemCount = mAdapter.getItemCount();
+            } else {
+                mState.mItemCount = 0;
+            }
+            eatRequestLayout();
             mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);
+            resumeRequestLayout(false);
+            mState.mInPreLayout = false; // clear
         }
-
-        mState.mInPreLayout = false; // clear
     }
 
     /**
      * Used when onMeasure is called before layout manager is set
      */
-    private void defaultOnMeasure(int widthSpec, int heightSpec) {
-        final int widthMode = MeasureSpec.getMode(widthSpec);
-        final int heightMode = MeasureSpec.getMode(heightSpec);
-        final int widthSize = MeasureSpec.getSize(widthSpec);
-        final int heightSize = MeasureSpec.getSize(heightSpec);
-
-        int width = 0;
-        int height = 0;
-
-        switch (widthMode) {
-            case MeasureSpec.EXACTLY:
-            case MeasureSpec.AT_MOST:
-                width = widthSize;
-                break;
-            case MeasureSpec.UNSPECIFIED:
-            default:
-                width = ViewCompat.getMinimumWidth(this);
-                break;
-        }
-
-        switch (heightMode) {
-            case MeasureSpec.EXACTLY:
-            case MeasureSpec.AT_MOST:
-                height = heightSize;
-                break;
-            case MeasureSpec.UNSPECIFIED:
-            default:
-                height = ViewCompat.getMinimumHeight(this);
-                break;
-        }
+    void defaultOnMeasure(int widthSpec, int heightSpec) {
+        // calling LayoutManager here is not pretty but that API is already public and it is better
+        // than creating another method since this is internal.
+        final int width = LayoutManager.chooseSize(widthSpec,
+                getPaddingLeft() + getPaddingRight(),
+                ViewCompat.getMinimumWidth(this));
+        final int height = LayoutManager.chooseSize(heightSpec,
+                getPaddingTop() + getPaddingBottom(),
+                ViewCompat.getMinimumHeight(this));
 
         setMeasuredDimension(width, height);
     }
@@ -2545,6 +2696,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
         if (w != oldw || h != oldh) {
             invalidateGlows();
+            // layout's w/h are updated during measure/layout steps.
         }
     }
 
@@ -2668,10 +2820,6 @@ public ItemAnimator getItemAnimator() {
         return mItemAnimator;
     }
 
-    private boolean supportsChangeAnimations() {
-        return mItemAnimator != null && mItemAnimator.getSupportsChangeAnimations();
-    }
-
     /**
      * Post a runnable to the next frame to run pending item animations. Only the first such
      * request will be posted, governed by the mPostedAnimatorRunner flag.
@@ -2704,13 +2852,12 @@ private void processAdapterUpdatesAndSetAnimationFlags() {
         // simple animations are a subset of advanced animations (which will cause a
         // pre-layout step)
         // If layout supports predictive animations, pre-process to decide if we want to run them
-        if (mItemAnimator != null && mLayout.supportsPredictiveItemAnimations()) {
+        if (predictiveItemAnimationsEnabled()) {
             mAdapterHelper.preProcess();
         } else {
             mAdapterHelper.consumeUpdatesInOnePass();
         }
-        boolean animationTypeSupported = (mItemsAddedOrRemoved && !mItemsChanged) ||
-                (mItemsAddedOrRemoved || (mItemsChanged && supportsChangeAnimations()));
+        boolean animationTypeSupported = mItemsAddedOrRemoved || mItemsChanged;
         mState.mRunSimpleAnimations = mFirstLayoutComplete && mItemAnimator != null &&
                 (mDataSetHasChangedAfterLayout || animationTypeSupported ||
                         mLayout.mRequestedSimpleAnimations) &&
@@ -2736,48 +2883,90 @@ private void processAdapterUpdatesAndSetAnimationFlags() {
      * The overall approach figures out what items exist before/after layout and
      * infers one of the five above states for each of the items. Then the animations
      * are set up accordingly:
-     * PERSISTENT views are moved ({@link ItemAnimator#animateMove(ViewHolder, int, int, int, int)})
-     * REMOVED views are removed ({@link ItemAnimator#animateRemove(ViewHolder)})
-     * ADDED views are added ({@link ItemAnimator#animateAdd(ViewHolder)})
-     * DISAPPEARING views are moved off screen
-     * APPEARING views are moved on screen
+     * PERSISTENT views are animated via
+     * {@link ItemAnimator#animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
+     * DISAPPEARING views are animated via
+     * {@link ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
+     * APPEARING views are animated via
+     * {@link ItemAnimator#animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
+     * and changed views are animated via
+     * {@link ItemAnimator#animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)}.
      */
     void dispatchLayout() {
         if (mAdapter == null) {
             Log.e(TAG, "No adapter attached; skipping layout");
+            // leave the state in START
             return;
         }
         if (mLayout == null) {
             Log.e(TAG, "No layout manager attached; skipping layout");
+            // leave the state in START
             return;
         }
-        mState.mDisappearingViewsInLayoutPass.clear();
+        mState.mIsMeasuring = false;
+        if (mState.mLayoutStep == State.STEP_START) {
+            dispatchLayoutStep1();
+            mLayout.setExactMeasureSpecsFrom(this);
+            dispatchLayoutStep2();
+        } else if (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth() ||
+                mLayout.getHeight() != getHeight()) {
+            // First 2 steps are done in onMeasure but looks like we have to run again due to
+            // changed size.
+            mLayout.setExactMeasureSpecsFrom(this);
+            dispatchLayoutStep2();
+        } else {
+            // always make sure we sync them (to ensure mode is exact)
+            mLayout.setExactMeasureSpecsFrom(this);
+        }
+        dispatchLayoutStep3();
+    }
+
+    /**
+     * The first step of a layout where we;
+     * - process adapter updates
+     * - decide which animation should run
+     * - save information about current views
+     * - If necessary, run predictive layout and save its information
+     */
+    private void dispatchLayoutStep1() {
+        mState.assertLayoutStep(State.STEP_START);
+        mState.mIsMeasuring = false;
         eatRequestLayout();
+        mViewInfoStore.clear();
         onEnterLayoutOrScroll();
 
         processAdapterUpdatesAndSetAnimationFlags();
-
-        mState.mOldChangedHolders = mState.mRunSimpleAnimations && mItemsChanged
-                && supportsChangeAnimations() ? new ArrayMap<Long, ViewHolder>() : null;
+        mState.mTrackOldChangeHolders = mState.mRunSimpleAnimations && mItemsChanged;
         mItemsAddedOrRemoved = mItemsChanged = false;
-        ArrayMap<View, Rect> appearingViewInitialBounds = null;
         mState.mInPreLayout = mState.mRunPredictiveAnimations;
         mState.mItemCount = mAdapter.getItemCount();
         findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
 
         if (mState.mRunSimpleAnimations) {
             // Step 0: Find out where all non-removed items are, pre-layout
-            mState.mPreLayoutHolderMap.clear();
-            mState.mPostLayoutHolderMap.clear();
             int count = mChildHelper.getChildCount();
             for (int i = 0; i < count; ++i) {
                 final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
                 if (holder.shouldIgnore() || (holder.isInvalid() && !mAdapter.hasStableIds())) {
                     continue;
                 }
-                final View view = holder.itemView;
-                mState.mPreLayoutHolderMap.put(holder, new ItemHolderInfo(holder,
-                        view.getLeft(), view.getTop(), view.getRight(), view.getBottom()));
+                final ItemHolderInfo animationInfo = mItemAnimator
+                        .recordPreLayoutInformation(mState, holder,
+                                ItemAnimator.buildAdapterChangeFlagsForAnimations(holder),
+                                holder.getUnmodifiedPayloads());
+                mViewInfoStore.addToPreLayout(holder, animationInfo);
+                if (mState.mTrackOldChangeHolders && holder.isUpdated() && !holder.isRemoved()
+                        && !holder.shouldIgnore() && !holder.isInvalid()) {
+                    long key = getChangedHolderKey(holder);
+                    // This is NOT the only place where a ViewHolder is added to old change holders
+                    // list. There is another case where:
+                    //    * A VH is currently hidden but not deleted
+                    //    * The hidden item is changed in the adapter
+                    //    * Layout manager decides to layout the item in the pre-Layout pass (step1)
+                    // When this case is detected, RV will un-hide that view and add to the old
+                    // change holders list.
+                    mViewInfoStore.addToOldChangeHolders(key, holder);
+                }
             }
         }
         if (mState.mRunPredictiveAnimations) {
@@ -2788,63 +2977,53 @@ void dispatchLayout() {
 
             // Save old positions so that LayoutManager can run its mapping logic.
             saveOldPositions();
-            // processAdapterUpdatesAndSetAnimationFlags already run pre-layout animations.
-            if (mState.mOldChangedHolders != null) {
-                int count = mChildHelper.getChildCount();
-                for (int i = 0; i < count; ++i) {
-                    final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
-                    if (holder.isChanged() && !holder.isRemoved() && !holder.shouldIgnore()) {
-                        long key = getChangedHolderKey(holder);
-                        mState.mOldChangedHolders.put(key, holder);
-                        mState.mPreLayoutHolderMap.remove(holder);
-                    }
-                }
-            }
-
             final boolean didStructureChange = mState.mStructureChanged;
             mState.mStructureChanged = false;
             // temporarily disable flag because we are asking for previous layout
             mLayout.onLayoutChildren(mRecycler, mState);
             mState.mStructureChanged = didStructureChange;
 
-            appearingViewInitialBounds = new ArrayMap<View, Rect>();
             for (int i = 0; i < mChildHelper.getChildCount(); ++i) {
-                boolean found = false;
-                View child = mChildHelper.getChildAt(i);
-                if (getChildViewHolderInt(child).shouldIgnore()) {
+                final View child = mChildHelper.getChildAt(i);
+                final ViewHolder viewHolder = getChildViewHolderInt(child);
+                if (viewHolder.shouldIgnore()) {
                     continue;
                 }
-                for (int j = 0; j < mState.mPreLayoutHolderMap.size(); ++j) {
-                    ViewHolder holder = mState.mPreLayoutHolderMap.keyAt(j);
-                    if (holder.itemView == child) {
-                        found = true;
-                        break;
+                if (!mViewInfoStore.isInPreLayout(viewHolder)) {
+                    int flags = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewHolder);
+                    boolean wasHidden = viewHolder
+                            .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);
+                    if (!wasHidden) {
+                        flags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;
+                    }
+                    final ItemHolderInfo animationInfo = mItemAnimator.recordPreLayoutInformation(
+                            mState, viewHolder, flags, viewHolder.getUnmodifiedPayloads());
+                    if (wasHidden) {
+                        recordAnimationInfoIfBouncedHiddenView(viewHolder, animationInfo);
+                    } else {
+                        mViewInfoStore.addToAppearedInPreLayoutHolders(viewHolder, animationInfo);
                     }
-                }
-                if (!found) {
-                    appearingViewInitialBounds.put(child, new Rect(child.getLeft(), child.getTop(),
-                            child.getRight(), child.getBottom()));
                 }
             }
             // we don't process disappearing list because they may re-appear in post layout pass.
             clearOldPositions();
-            mAdapterHelper.consumePostponedUpdates();
         } else {
             clearOldPositions();
-            // in case pre layout did run but we decided not to run predictive animations.
-            mAdapterHelper.consumeUpdatesInOnePass();
-            if (mState.mOldChangedHolders != null) {
-                int count = mChildHelper.getChildCount();
-                for (int i = 0; i < count; ++i) {
-                    final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
-                    if (holder.isChanged() && !holder.isRemoved() && !holder.shouldIgnore()) {
-                        long key = getChangedHolderKey(holder);
-                        mState.mOldChangedHolders.put(key, holder);
-                        mState.mPreLayoutHolderMap.remove(holder);
-                    }
-                }
-            }
         }
+        onExitLayoutOrScroll();
+        resumeRequestLayout(false);
+        mState.mLayoutStep = State.STEP_LAYOUT;
+    }
+
+    /**
+     * The second layout step where we do the actual layout of the views for the final state.
+     * This step might be run multiple times if necessary (e.g. measure).
+     */
+    private void dispatchLayoutStep2() {
+        eatRequestLayout();
+        onEnterLayoutOrScroll();
+        mState.assertLayoutStep(State.STEP_LAYOUT | State.STEP_ANIMATIONS);
+        mAdapterHelper.consumeUpdatesInOnePass();
         mState.mItemCount = mAdapter.getItemCount();
         mState.mDeletedInvisibleItemCountSincePreviousLayout = 0;
 
@@ -2857,114 +3036,151 @@ void dispatchLayout() {
 
         // onLayoutChildren may have caused client code to disable item animations; re-check
         mState.mRunSimpleAnimations = mState.mRunSimpleAnimations && mItemAnimator != null;
+        mState.mLayoutStep = State.STEP_ANIMATIONS;
+        onExitLayoutOrScroll();
+        resumeRequestLayout(false);
+    }
 
+    /**
+     * The final step of the layout where we save the information about views for animations,
+     * trigger animations and do any necessary cleanup.
+     */
+    private void dispatchLayoutStep3() {
+        mState.assertLayoutStep(State.STEP_ANIMATIONS);
+        eatRequestLayout();
+        onEnterLayoutOrScroll();
+        mState.mLayoutStep = State.STEP_START;
         if (mState.mRunSimpleAnimations) {
-            // Step 3: Find out where things are now, post-layout
-            ArrayMap<Long, ViewHolder> newChangedHolders = mState.mOldChangedHolders != null ?
-                    new ArrayMap<Long, ViewHolder>() : null;
-            int count = mChildHelper.getChildCount();
-            for (int i = 0; i < count; ++i) {
+            // Step 3: Find out where things are now, and process change animations.
+            // traverse list in reverse because we may call animateChange in the loop which may
+            // remove the target view holder.
+            for (int i = mChildHelper.getChildCount() - 1; i >= 0; i--) {
                 ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
                 if (holder.shouldIgnore()) {
                     continue;
                 }
-                final View view = holder.itemView;
                 long key = getChangedHolderKey(holder);
-                if (newChangedHolders != null && mState.mOldChangedHolders.get(key) != null) {
-                    newChangedHolders.put(key, holder);
-                } else {
-                    mState.mPostLayoutHolderMap.put(holder, new ItemHolderInfo(holder,
-                            view.getLeft(), view.getTop(), view.getRight(), view.getBottom()));
-                }
-            }
-            processDisappearingList(appearingViewInitialBounds);
-            // Step 4: Animate DISAPPEARING and REMOVED items
-            int preLayoutCount = mState.mPreLayoutHolderMap.size();
-            for (int i = preLayoutCount - 1; i >= 0; i--) {
-                ViewHolder itemHolder = mState.mPreLayoutHolderMap.keyAt(i);
-                if (!mState.mPostLayoutHolderMap.containsKey(itemHolder)) {
-                    ItemHolderInfo disappearingItem = mState.mPreLayoutHolderMap.valueAt(i);
-                    mState.mPreLayoutHolderMap.removeAt(i);
-
-                    View disappearingItemView = disappearingItem.holder.itemView;
-                    mRecycler.unscrapView(disappearingItem.holder);
-                    animateDisappearance(disappearingItem);
-                }
-            }
-            // Step 5: Animate APPEARING and ADDED items
-            int postLayoutCount = mState.mPostLayoutHolderMap.size();
-            if (postLayoutCount > 0) {
-                for (int i = postLayoutCount - 1; i >= 0; i--) {
-                    ViewHolder itemHolder = mState.mPostLayoutHolderMap.keyAt(i);
-                    ItemHolderInfo info = mState.mPostLayoutHolderMap.valueAt(i);
-                    if ((mState.mPreLayoutHolderMap.isEmpty() ||
-                            !mState.mPreLayoutHolderMap.containsKey(itemHolder))) {
-                        mState.mPostLayoutHolderMap.removeAt(i);
-                        Rect initialBounds = (appearingViewInitialBounds != null) ?
-                                appearingViewInitialBounds.get(itemHolder.itemView) : null;
-                        animateAppearance(itemHolder, initialBounds,
-                                info.left, info.top);
-                    }
-                }
-            }
-            // Step 6: Animate PERSISTENT items
-            count = mState.mPostLayoutHolderMap.size();
-            for (int i = 0; i < count; ++i) {
-                ViewHolder postHolder = mState.mPostLayoutHolderMap.keyAt(i);
-                ItemHolderInfo postInfo = mState.mPostLayoutHolderMap.valueAt(i);
-                ItemHolderInfo preInfo = mState.mPreLayoutHolderMap.get(postHolder);
-                if (preInfo != null && postInfo != null) {
-                    if (preInfo.left != postInfo.left || preInfo.top != postInfo.top) {
-                        postHolder.setIsRecyclable(false);
-                        if (DEBUG) {
-                            Log.d(TAG, "PERSISTENT: " + postHolder +
-                                    " with view " + postHolder.itemView);
-                        }
-                        if (mItemAnimator.animateMove(postHolder,
-                                preInfo.left, preInfo.top, postInfo.left, postInfo.top)) {
-                            postAnimationRunner();
+                final ItemHolderInfo animationInfo = mItemAnimator
+                        .recordPostLayoutInformation(mState, holder);
+                ViewHolder oldChangeViewHolder = mViewInfoStore.getFromOldChangeHolders(key);
+                if (oldChangeViewHolder != null && !oldChangeViewHolder.shouldIgnore()) {
+                    // run a change animation
+
+                    // If an Item is CHANGED but the updated version is disappearing, it creates
+                    // a conflicting case.
+                    // Since a view that is marked as disappearing is likely to be going out of
+                    // bounds, we run a change animation. Both views will be cleaned automatically
+                    // once their animations finish.
+                    // On the other hand, if it is the same view holder instance, we run a
+                    // disappearing animation instead because we are not going to rebind the updated
+                    // VH unless it is enforced by the layout manager.
+                    final boolean oldDisappearing = mViewInfoStore.isDisappearing(
+                            oldChangeViewHolder);
+                    final boolean newDisappearing = mViewInfoStore.isDisappearing(holder);
+                    if (oldDisappearing && oldChangeViewHolder == holder) {
+                        // run disappear animation instead of change
+                        mViewInfoStore.addToPostLayout(holder, animationInfo);
+                    } else {
+                        final ItemHolderInfo preInfo = mViewInfoStore.popFromPreLayout(
+                                oldChangeViewHolder);
+                        // we add and remove so that any post info is merged.
+                        mViewInfoStore.addToPostLayout(holder, animationInfo);
+                        ItemHolderInfo postInfo = mViewInfoStore.popFromPostLayout(holder);
+                        if (preInfo == null) {
+                            handleMissingPreInfoForChangeError(key, holder, oldChangeViewHolder);
+                        } else {
+                            animateChange(oldChangeViewHolder, holder, preInfo, postInfo,
+                                    oldDisappearing, newDisappearing);
                         }
                     }
+                } else {
+                    mViewInfoStore.addToPostLayout(holder, animationInfo);
                 }
             }
-            // Step 7: Animate CHANGING items
-            count = mState.mOldChangedHolders != null ? mState.mOldChangedHolders.size() : 0;
-            // traverse reverse in case view gets recycled while we are traversing the list.
-            for (int i = count - 1; i >= 0; i--) {
-                long key = mState.mOldChangedHolders.keyAt(i);
-                ViewHolder oldHolder = mState.mOldChangedHolders.get(key);
-                View oldView = oldHolder.itemView;
-                if (oldHolder.shouldIgnore()) {
-                    continue;
-                }
-                // We probably don't need this check anymore since these views are removed from
-                // the list if they are recycled.
-                if (mRecycler.mChangedScrap != null &&
-                        mRecycler.mChangedScrap.contains(oldHolder)) {
-                    animateChange(oldHolder, newChangedHolders.get(key));
-                } else if (DEBUG) {
-                    Log.e(TAG, "cannot find old changed holder in changed scrap :/" + oldHolder);
-                }
-            }
+
+            // Step 4: Process view info lists and trigger animations
+            mViewInfoStore.process(mViewInfoProcessCallback);
         }
-        resumeRequestLayout(false);
+
         mLayout.removeAndRecycleScrapInt(mRecycler);
         mState.mPreviousLayoutItemCount = mState.mItemCount;
         mDataSetHasChangedAfterLayout = false;
         mState.mRunSimpleAnimations = false;
+
         mState.mRunPredictiveAnimations = false;
-        onExitLayoutOrScroll();
         mLayout.mRequestedSimpleAnimations = false;
         if (mRecycler.mChangedScrap != null) {
             mRecycler.mChangedScrap.clear();
         }
-        mState.mOldChangedHolders = null;
-
+        onExitLayoutOrScroll();
+        resumeRequestLayout(false);
+        mViewInfoStore.clear();
         if (didChildRangeChange(mMinMaxLayoutPositions[0], mMinMaxLayoutPositions[1])) {
             dispatchOnScrolled(0, 0);
         }
     }
 
+    /**
+     * This handles the case where there is an unexpected VH missing in the pre-layout map.
+     * <p>
+     * We might be able to detect the error in the application which will help the developer to
+     * resolve the issue.
+     * <p>
+     * If it is not an expected error, we at least print an error to notify the developer and ignore
+     * the animation.
+     *
+     * https://code.google.com/p/android/issues/detail?id=193958
+     *
+     * @param key The change key
+     * @param holder Current ViewHolder
+     * @param oldChangeViewHolder Changed ViewHolder
+     */
+    private void handleMissingPreInfoForChangeError(long key,
+            ViewHolder holder, ViewHolder oldChangeViewHolder) {
+        // check if two VH have the same key, if so, print that as an error
+        final int childCount = mChildHelper.getChildCount();
+        for (int i = 0; i < childCount; i++) {
+            View view = mChildHelper.getChildAt(i);
+            ViewHolder other = getChildViewHolderInt(view);
+            if (other == holder) {
+                continue;
+            }
+            final long otherKey = getChangedHolderKey(other);
+            if (otherKey == key) {
+                if (mAdapter != null && mAdapter.hasStableIds()) {
+                    throw new IllegalStateException("Two different ViewHolders have the same stable"
+                            + " ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT"
+                            + " change.\n ViewHolder 1:" + other + " \n View Holder 2:" + holder);
+                } else {
+                    throw new IllegalStateException("Two different ViewHolders have the same change"
+                            + " ID. This might happen due to inconsistent Adapter update events or"
+                            + " if the LayoutManager lays out the same View multiple times."
+                            + "\n ViewHolder 1:" + other + " \n View Holder 2:" + holder);
+                }
+            }
+        }
+        // Very unlikely to happen but if it does, notify the developer.
+        Log.e(TAG, "Problem while matching changed view holders with the new"
+                + "ones. The pre-layout information for the change holder " + oldChangeViewHolder
+                + " cannot be found but it is necessary for " + holder);
+    }
+
+    /**
+     * Records the animation information for a view holder that was bounced from hidden list. It
+     * also clears the bounce back flag.
+     */
+    private void recordAnimationInfoIfBouncedHiddenView(ViewHolder viewHolder,
+            ItemHolderInfo animationInfo) {
+        // looks like this view bounced back from hidden list!
+        viewHolder.setFlags(0, ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);
+        if (mState.mTrackOldChangeHolders && viewHolder.isUpdated()
+                && !viewHolder.isRemoved() && !viewHolder.shouldIgnore()) {
+            long key = getChangedHolderKey(viewHolder);
+            mViewInfoStore.addToOldChangeHolders(key, viewHolder);
+        }
+        mViewInfoStore.addToPreLayout(viewHolder, animationInfo);
+    }
+
     private void findMinMaxChildLayoutPositions(int[] into) {
         final int count = mChildHelper.getChildCount();
         if (count == 0) {
@@ -2996,17 +3212,10 @@ private boolean didChildRangeChange(int minPositionPreLayout, int maxPositionPre
         if (count == 0) {
             return minPositionPreLayout != 0 || maxPositionPreLayout != 0;
         }
-        for (int i = 0; i < count; ++i) {
-            final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
-            if (holder.shouldIgnore()) {
-                continue;
-            }
-            final int pos = holder.getLayoutPosition();
-            if (pos < minPositionPreLayout || pos > maxPositionPreLayout) {
-                return true;
-            }
-        }
-        return false;
+        // get the new min max
+        findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);
+        return mMinMaxLayoutPositions[0] != minPositionPreLayout ||
+                mMinMaxLayoutPositions[1] != maxPositionPreLayout;
     }
 
     @Override
@@ -3032,129 +3241,57 @@ long getChangedHolderKey(ViewHolder holder) {
         return mAdapter.hasStableIds() ? holder.getItemId() : holder.mPosition;
     }
 
-    /**
-     * A LayoutManager may want to layout a view just to animate disappearance.
-     * This method handles those views and triggers remove animation on them.
-     */
-    private void processDisappearingList(ArrayMap<View, Rect> appearingViews) {
-        final List<View> disappearingList = mState.mDisappearingViewsInLayoutPass;
-        for (int i = disappearingList.size() - 1; i >= 0; i --) {
-            View view = disappearingList.get(i);
-            ViewHolder vh = getChildViewHolderInt(view);
-            final ItemHolderInfo info = mState.mPreLayoutHolderMap.remove(vh);
-            if (!mState.isPreLayout()) {
-                mState.mPostLayoutHolderMap.remove(vh);
-            }
-            if (appearingViews.remove(view) != null) {
-                mLayout.removeAndRecycleView(view, mRecycler);
-                continue;
-            }
-            if (info != null) {
-                animateDisappearance(info);
-            } else {
-                // let it disappear from the position it becomes visible
-                animateDisappearance(new ItemHolderInfo(vh, view.getLeft(), view.getTop(),
-                        view.getRight(), view.getBottom()));
-            }
+    private void animateAppearance(@NonNull ViewHolder itemHolder,
+            @Nullable ItemHolderInfo preLayoutInfo, @NonNull ItemHolderInfo postLayoutInfo) {
+        itemHolder.setIsRecyclable(false);
+        if (mItemAnimator.animateAppearance(itemHolder, preLayoutInfo, postLayoutInfo)) {
+            postAnimationRunner();
         }
-        disappearingList.clear();
     }
 
-    private void animateAppearance(ViewHolder itemHolder, Rect beforeBounds, int afterLeft,
-            int afterTop) {
-        View newItemView = itemHolder.itemView;
-        if (beforeBounds != null &&
-                (beforeBounds.left != afterLeft || beforeBounds.top != afterTop)) {
-            // slide items in if before/after locations differ
-            itemHolder.setIsRecyclable(false);
-            if (DEBUG) {
-                Log.d(TAG, "APPEARING: " + itemHolder + " with view " + newItemView);
-            }
-            if (mItemAnimator.animateMove(itemHolder,
-                    beforeBounds.left, beforeBounds.top,
-                    afterLeft, afterTop)) {
-                postAnimationRunner();
-            }
-        } else {
-            if (DEBUG) {
-                Log.d(TAG, "ADDED: " + itemHolder + " with view " + newItemView);
-            }
-            itemHolder.setIsRecyclable(false);
-            if (mItemAnimator.animateAdd(itemHolder)) {
-                postAnimationRunner();
-            }
-        }
-    }
-
-    private void animateDisappearance(ItemHolderInfo disappearingItem) {
-        View disappearingItemView = disappearingItem.holder.itemView;
-        addAnimatingView(disappearingItem.holder);
-        int oldLeft = disappearingItem.left;
-        int oldTop = disappearingItem.top;
-        int newLeft = disappearingItemView.getLeft();
-        int newTop = disappearingItemView.getTop();
-        if (!disappearingItem.holder.isRemoved() && (oldLeft != newLeft || oldTop != newTop)) {
-            disappearingItem.holder.setIsRecyclable(false);
-            disappearingItemView.layout(newLeft, newTop,
-                    newLeft + disappearingItemView.getWidth(),
-                    newTop + disappearingItemView.getHeight());
-            if (DEBUG) {
-                Log.d(TAG, "DISAPPEARING: " + disappearingItem.holder +
-                        " with view " + disappearingItemView);
-            }
-            if (mItemAnimator.animateMove(disappearingItem.holder, oldLeft, oldTop,
-                    newLeft, newTop)) {
-                postAnimationRunner();
-            }
-        } else {
-            if (DEBUG) {
-                Log.d(TAG, "REMOVED: " + disappearingItem.holder +
-                        " with view " + disappearingItemView);
-            }
-            disappearingItem.holder.setIsRecyclable(false);
-            if (mItemAnimator.animateRemove(disappearingItem.holder)) {
-                postAnimationRunner();
-            }
+    private void animateDisappearance(@NonNull ViewHolder holder,
+            @NonNull ItemHolderInfo preLayoutInfo, @Nullable ItemHolderInfo postLayoutInfo) {
+        addAnimatingView(holder);
+        holder.setIsRecyclable(false);
+        if (mItemAnimator.animateDisappearance(holder, preLayoutInfo, postLayoutInfo)) {
+            postAnimationRunner();
         }
     }
 
-    private void animateChange(ViewHolder oldHolder, ViewHolder newHolder) {
+    private void animateChange(@NonNull ViewHolder oldHolder, @NonNull ViewHolder newHolder,
+            @NonNull ItemHolderInfo preInfo, @NonNull ItemHolderInfo postInfo,
+            boolean oldHolderDisappearing, boolean newHolderDisappearing) {
         oldHolder.setIsRecyclable(false);
-        addAnimatingView(oldHolder);
-        oldHolder.mShadowedHolder = newHolder;
-        mRecycler.unscrapView(oldHolder);
-        if (DEBUG) {
-            Log.d(TAG, "CHANGED: " + oldHolder + " with view " + oldHolder.itemView);
-        }
-        final int fromLeft = oldHolder.itemView.getLeft();
-        final int fromTop = oldHolder.itemView.getTop();
-        final int toLeft, toTop;
-        if (newHolder == null || newHolder.shouldIgnore()) {
-            toLeft = fromLeft;
-            toTop = fromTop;
-        } else {
-            toLeft = newHolder.itemView.getLeft();
-            toTop = newHolder.itemView.getTop();
+        if (oldHolderDisappearing) {
+            addAnimatingView(oldHolder);
+        }
+        if (oldHolder != newHolder) {
+            if (newHolderDisappearing) {
+                addAnimatingView(newHolder);
+            }
+            oldHolder.mShadowedHolder = newHolder;
+            // old holder should disappear after animation ends
+            addAnimatingView(oldHolder);
+            mRecycler.unscrapView(oldHolder);
             newHolder.setIsRecyclable(false);
             newHolder.mShadowingHolder = oldHolder;
         }
-        if(mItemAnimator.animateChange(oldHolder, newHolder,
-                fromLeft, fromTop, toLeft, toTop)) {
+        if (mItemAnimator.animateChange(oldHolder, newHolder, preInfo, postInfo)) {
             postAnimationRunner();
         }
     }
 
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        eatRequestLayout();
+        TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);
         dispatchLayout();
-        resumeRequestLayout(false);
+        TraceCompat.endSection();
         mFirstLayoutComplete = true;
     }
 
     @Override
     public void requestLayout() {
-        if (!mEatRequestLayout && !mLayoutFrozen) {
+        if (mEatRequestLayout == 0 && !mLayoutFrozen) {
             super.requestLayout();
         } else {
             mLayoutRequestEaten = true;
@@ -3418,9 +3555,6 @@ void viewRangeUpdate(int positionStart, int itemCount, Object payload) {
                 // ViewHolders have their final positions assigned.
                 holder.addFlags(ViewHolder.FLAG_UPDATE);
                 holder.addChangePayload(payload);
-                if (supportsChangeAnimations()) {
-                    holder.addFlags(ViewHolder.FLAG_CHANGED);
-                }
                 // lp cannot be null since we get ViewHolder from it.
                 ((LayoutParams) child.getLayoutParams()).mInsetsDirty = true;
             }
@@ -3428,36 +3562,9 @@ void viewRangeUpdate(int positionStart, int itemCount, Object payload) {
         mRecycler.viewRangeUpdate(positionStart, itemCount);
     }
 
-    void rebindUpdatedViewHolders() {
-        final int childCount = mChildHelper.getChildCount();
-        for (int i = 0; i < childCount; i++) {
-            final ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));
-            // validate type is correct
-            if (holder == null || holder.shouldIgnore()) {
-                continue;
-            }
-            if (holder.isRemoved() || holder.isInvalid()) {
-                requestLayout();
-            } else if (holder.needsUpdate()) {
-                final int type = mAdapter.getItemViewType(holder.mPosition);
-                if (holder.getItemViewType() == type) {
-                    // Binding an attached view will request a layout if needed.
-                    if (!holder.isChanged() || !supportsChangeAnimations()) {
-                        mAdapter.bindViewHolder(holder, holder.mPosition);
-                    } else {
-                        // Don't rebind changed holders if change animations are enabled.
-                        // We want the old contents for the animation and will get a new
-                        // holder for the new contents.
-                        requestLayout();
-                    }
-                } else {
-                    // binding to a new view will need re-layout anyways. We can as well trigger
-                    // it here so that it happens during layout
-                    requestLayout();
-                    break;
-                }
-            }
-        }
+    private boolean canReuseUpdatedViewHolder(ViewHolder viewHolder) {
+        return mItemAnimator == null || mItemAnimator.canReuseUpdatedViewHolder(viewHolder,
+                viewHolder.getUnmodifiedPayloads());
     }
 
     private void setDataSetChangedAfterLayout() {
@@ -3522,6 +3629,44 @@ public ViewHolder getChildViewHolder(View child) {
         return getChildViewHolderInt(child);
     }
 
+    /**
+     * Traverses the ancestors of the given view and returns the item view that contains it and
+     * also a direct child of the RecyclerView. This returned view can be used to get the
+     * ViewHolder by calling {@link #getChildViewHolder(View)}.
+     *
+     * @param view The view that is a descendant of the RecyclerView.
+     *
+     * @return The direct child of the RecyclerView which contains the given view or null if the
+     * provided view is not a descendant of this RecyclerView.
+     *
+     * @see #getChildViewHolder(View)
+     * @see #findContainingViewHolder(View)
+     */
+    @Nullable
+    public View findContainingItemView(View view) {
+        ViewParent parent = view.getParent();
+        while (parent != null && parent != this && parent instanceof View) {
+            view = (View) parent;
+            parent = view.getParent();
+        }
+        return parent == this ? view : null;
+    }
+
+    /**
+     * Returns the ViewHolder that contains the given view.
+     *
+     * @param view The view that is a descendant of the RecyclerView.
+     *
+     * @return The ViewHolder that contains the given view or null if the provided view is not a
+     * descendant of this RecyclerView.
+     */
+    @Nullable
+    public ViewHolder findContainingViewHolder(View view) {
+        View itemView = findContainingItemView(view);
+        return itemView == null ? null : getChildViewHolder(itemView);
+    }
+
+
     static ViewHolder getChildViewHolderInt(View child) {
         if (child == null) {
             return null;
@@ -3897,6 +4042,10 @@ public ViewFlinger() {
 
         @Override
         public void run() {
+            if (mLayout == null) {
+                stop();
+                return; // no layout, cannot scroll.
+            }
             disableRunOnAnimationRequests();
             consumePendingUpdateOperations();
             // keep a local reference so that if it is changed during onAnimation method, it won't
@@ -3916,6 +4065,7 @@ public void run() {
                 if (mAdapter != null) {
                     eatRequestLayout();
                     onEnterLayoutOrScroll();
+                    TraceCompat.beginSection(TRACE_SCROLL_TAG);
                     if (dx != 0) {
                         hresult = mLayout.scrollHorizontallyBy(dx, mRecycler, mState);
                         overscrollX = dx - hresult;
@@ -3924,25 +4074,9 @@ public void run() {
                         vresult = mLayout.scrollVerticallyBy(dy, mRecycler, mState);
                         overscrollY = dy - vresult;
                     }
-                    if (supportsChangeAnimations()) {
-                        // Fix up shadow views used by changing animations
-                        int count = mChildHelper.getChildCount();
-                        for (int i = 0; i < count; i++) {
-                            View view = mChildHelper.getChildAt(i);
-                            ViewHolder holder = getChildViewHolder(view);
-                            if (holder != null && holder.mShadowingHolder != null) {
-                                View shadowingView = holder.mShadowingHolder.itemView;
-                                int left = view.getLeft();
-                                int top = view.getTop();
-                                if (left != shadowingView.getLeft() ||
-                                        top != shadowingView.getTop()) {
-                                    shadowingView.layout(left, top,
-                                            left + shadowingView.getWidth(),
-                                            top + shadowingView.getHeight());
-                                }
-                            }
-                        }
-                    }
+                    TraceCompat.endSection();
+                    repositionShadowingViews();
+
                     onExitLayoutOrScroll();
                     resumeRequestLayout(false);
 
@@ -4108,6 +4242,26 @@ public void stop() {
 
     }
 
+    private void repositionShadowingViews() {
+        // Fix up shadow views used by change animations
+        int count = mChildHelper.getChildCount();
+        for (int i = 0; i < count; i++) {
+            View view = mChildHelper.getChildAt(i);
+            ViewHolder holder = getChildViewHolder(view);
+            if (holder != null && holder.mShadowingHolder != null) {
+                View shadowingView = holder.mShadowingHolder.itemView;
+                int left = view.getLeft();
+                int top = view.getTop();
+                if (left != shadowingView.getLeft() ||
+                        top != shadowingView.getTop()) {
+                    shadowingView.layout(left, top,
+                            left + shadowingView.getWidth(),
+                            top + shadowingView.getHeight());
+                }
+            }
+        }
+    }
+
     private class RecyclerViewDataObserver extends AdapterDataObserver {
         @Override
         public void onChanged() {
@@ -4184,7 +4338,7 @@ void triggerUpdateProcessor() {
         private SparseIntArray mMaxScrap = new SparseIntArray();
         private int mAttachCount = 0;
 
-        private static final int DEFAULT_MAX_SCRAP = 10;
+        private static final int DEFAULT_MAX_SCRAP = 5;
 
         public void clear() {
             mScrap.clear();
@@ -4271,7 +4425,7 @@ void onAdapterChanged(Adapter oldAdapter, Adapter newAdapter,
         private ArrayList<ViewHolder> getScrapHeapForType(int viewType) {
             ArrayList<ViewHolder> scrap = mScrap.get(viewType);
             if (scrap == null) {
-                scrap = new ArrayList<ViewHolder>();
+                scrap = new ArrayList<>();
                 mScrap.put(viewType, scrap);
                 if (mMaxScrap.indexOfKey(viewType) < 0) {
                     mMaxScrap.put(viewType, DEFAULT_MAX_SCRAP);
@@ -4295,7 +4449,7 @@ void onAdapterChanged(Adapter oldAdapter, Adapter newAdapter,
      * may be repositioned by a LayoutManager without remeasurement.</p>
      */
     public final class Recycler {
-        final ArrayList<ViewHolder> mAttachedScrap = new ArrayList<ViewHolder>();
+        final ArrayList<ViewHolder> mAttachedScrap = new ArrayList<>();
         private ArrayList<ViewHolder> mChangedScrap = null;
 
         final ArrayList<ViewHolder> mCachedViews = new ArrayList<ViewHolder>();
@@ -4354,7 +4508,11 @@ boolean validateViewHolderForOffsetPosition(ViewHolder holder) {
             // if it is a removed holder, nothing to verify since we cannot ask adapter anymore
             // if it is not removed, verify the type and id.
             if (holder.isRemoved()) {
-                return true;
+                if (DEBUG && !mState.isPreLayout()) {
+                    throw new IllegalStateException("should not receive a removed view unelss it"
+                            + " is pre layout");
+                }
+                return mState.isPreLayout();
             }
             if (holder.mPosition < 0 || holder.mPosition >= mAdapter.getItemCount()) {
                 throw new IndexOutOfBoundsException("Inconsistency detected. Invalid view holder "
@@ -4565,6 +4723,23 @@ View getViewForPosition(int position, boolean dryRun) {
                     }
                 }
             }
+
+            // This is very ugly but the only place we can grab this information
+            // before the View is rebound and returned to the LayoutManager for post layout ops.
+            // We don't need this in pre-layout since the VH is not updated by the LM.
+            if (fromScrap && !mState.isPreLayout() && holder
+                    .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST)) {
+                holder.setFlags(0, ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);
+                if (mState.mRunSimpleAnimations) {
+                    int changeFlags = ItemAnimator
+                            .buildAdapterChangeFlagsForAnimations(holder);
+                    changeFlags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;
+                    final ItemHolderInfo info = mItemAnimator.recordPreLayoutInformation(mState,
+                            holder, changeFlags, holder.getUnmodifiedPayloads());
+                    recordAnimationInfoIfBouncedHiddenView(holder, info);
+                }
+            }
+
             boolean bound = false;
             if (mState.isPreLayout() && holder.isBound()) {
                 // do not update unless we absolutely have to.
@@ -4741,8 +4916,8 @@ void recycleViewHolderInternal(ViewHolder holder) {
                         holder);
             }
             if (forceRecycle || holder.isRecyclable()) {
-                if (!holder.hasAnyOfTheFlags(ViewHolder.FLAG_INVALID | ViewHolder.FLAG_REMOVED |
-                        ViewHolder.FLAG_CHANGED | ViewHolder.FLAG_UPDATE)) {
+                if (!holder.hasAnyOfTheFlags(ViewHolder.FLAG_INVALID | ViewHolder.FLAG_REMOVED
+                        | ViewHolder.FLAG_UPDATE)) {
                     // Retire oldest cached view
                     final int cachedViewSize = mCachedViews.size();
                     if (cachedViewSize == mViewCacheMax && cachedViewSize > 0) {
@@ -4763,7 +4938,7 @@ void recycleViewHolderInternal(ViewHolder holder) {
             }
             // even if the holder is not removed, we still call this method so that it is removed
             // from view holder lists.
-            mState.onViewRecycled(holder);
+            mViewInfoStore.removeViewHolder(holder);
             if (!cached && !recycled && transientStatePreventsRecycling) {
                 holder.mOwnerRecyclerView = null;
             }
@@ -4784,6 +4959,7 @@ void addViewHolderToRecycledViewPool(ViewHolder holder) {
         void quickRecycleScrapView(View view) {
             final ViewHolder holder = getChildViewHolderInt(view);
             holder.mScrapContainer = null;
+            holder.mInChangeScrap = false;
             holder.clearReturnedFromScrapFlag();
             recycleViewHolderInternal(holder);
         }
@@ -4799,18 +4975,20 @@ void quickRecycleScrapView(View view) {
          */
         void scrapView(View view) {
             final ViewHolder holder = getChildViewHolderInt(view);
-            holder.setScrapContainer(this);
-            if (!holder.isChanged() || !supportsChangeAnimations()) {
+            if (holder.hasAnyOfTheFlags(ViewHolder.FLAG_REMOVED | ViewHolder.FLAG_INVALID)
+                    || !holder.isUpdated() || canReuseUpdatedViewHolder(holder)) {
                 if (holder.isInvalid() && !holder.isRemoved() && !mAdapter.hasStableIds()) {
                     throw new IllegalArgumentException("Called scrap view with an invalid view."
                             + " Invalid views cannot be reused from scrap, they should rebound from"
                             + " recycler pool.");
                 }
+                holder.setScrapContainer(this, false);
                 mAttachedScrap.add(holder);
             } else {
                 if (mChangedScrap == null) {
                     mChangedScrap = new ArrayList<ViewHolder>();
                 }
+                holder.setScrapContainer(this, true);
                 mChangedScrap.add(holder);
             }
         }
@@ -4822,12 +5000,13 @@ void scrapView(View view) {
          * until it is explicitly removed and recycled.</p>
          */
         void unscrapView(ViewHolder holder) {
-            if (!holder.isChanged() || !supportsChangeAnimations() || mChangedScrap == null) {
-                mAttachedScrap.remove(holder);
-            } else {
+            if (holder.mInChangeScrap) {
                 mChangedScrap.remove(holder);
+            } else {
+                mAttachedScrap.remove(holder);
             }
             holder.mScrapContainer = null;
+            holder.mInChangeScrap = false;
             holder.clearReturnedFromScrapFlag();
         }
 
@@ -4841,6 +5020,9 @@ View getScrapViewAt(int index) {
 
         void clearScrap() {
             mAttachedScrap.clear();
+            if (mChangedScrap != null) {
+                mChangedScrap.clear();
+            }
         }
 
         ViewHolder getChangedScrapViewForPosition(int position) {
@@ -4905,8 +5087,20 @@ ViewHolder getScrapViewForPosition(int position, int type, boolean dryRun) {
             if (!dryRun) {
                 View view = mChildHelper.findHiddenNonRemovedView(position, type);
                 if (view != null) {
-                    // ending the animation should cause it to get recycled before we reuse it
-                    mItemAnimator.endAnimation(getChildViewHolder(view));
+                    // This View is good to be used. We just need to unhide, detach and move to the
+                    // scrap list.
+                    final ViewHolder vh = getChildViewHolderInt(view);
+                    mChildHelper.unhide(view);
+                    int layoutIndex = mChildHelper.indexOfChild(view);
+                    if (layoutIndex == RecyclerView.NO_POSITION) {
+                        throw new IllegalStateException("layout index should not be -1 after "
+                                + "unhiding a view:" + vh);
+                    }
+                    mChildHelper.detachViewFromParent(layoutIndex);
+                    scrapView(view);
+                    vh.addFlags(ViewHolder.FLAG_RETURNED_FROM_SCRAP
+                            | ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);
+                    return vh;
                 }
             }
 
@@ -4954,6 +5148,8 @@ ViewHolder getScrapViewForId(long id, int type, boolean dryRun) {
                         }
                         return holder;
                     } else if (!dryRun) {
+                        // if we are running animations, it is actually better to keep it in scrap
+                        // but this would force layout manager to lay it out which would be bad.
                         // Recycle this scrap. Type mismatch.
                         mAttachedScrap.remove(i);
                         removeDetachedView(holder.itemView, false);
@@ -4988,7 +5184,7 @@ void dispatchViewRecycled(ViewHolder holder) {
                 mAdapter.onViewRecycled(holder);
             }
             if (mState != null) {
-                mState.onViewRecycled(holder);
+                mViewInfoStore.removeViewHolder(holder);
             }
             if (DEBUG) Log.d(TAG, "dispatchViewRecycled: " + holder);
         }
@@ -5032,7 +5228,7 @@ void offsetPositionRecordsForInsert(int insertedAt, int count) {
             final int cachedCount = mCachedViews.size();
             for (int i = 0; i < cachedCount; i++) {
                 final ViewHolder holder = mCachedViews.get(i);
-                if (holder != null && holder.getLayoutPosition() >= insertedAt) {
+                if (holder != null && holder.mPosition >= insertedAt) {
                     if (DEBUG) {
                         Log.d(TAG, "offsetPositionRecordsForInsert cached " + i + " holder " +
                                 holder + " now at position " + (holder.mPosition + count));
@@ -5054,14 +5250,14 @@ void offsetPositionRecordsForRemove(int removedFrom, int count, boolean applyToP
             for (int i = cachedCount - 1; i >= 0; i--) {
                 final ViewHolder holder = mCachedViews.get(i);
                 if (holder != null) {
-                    if (holder.getLayoutPosition() >= removedEnd) {
+                    if (holder.mPosition >= removedEnd) {
                         if (DEBUG) {
                             Log.d(TAG, "offsetPositionRecordsForRemove cached " + i +
                                     " holder " + holder + " now at position " +
                                     (holder.mPosition - count));
                         }
                         holder.offsetPosition(-count, applyToPreLayout);
-                    } else if (holder.getLayoutPosition() >= removedFrom) {
+                    } else if (holder.mPosition >= removedFrom) {
                         // Item for this view was removed. Dump it from the cache.
                         holder.addFlags(ViewHolder.FLAG_REMOVED);
                         recycleCachedViewAt(i);
@@ -5295,8 +5491,10 @@ public void onBindViewHolder(VH holder, int position, List<Object> payloads) {
          * @see #onCreateViewHolder(ViewGroup, int)
          */
         public final VH createViewHolder(ViewGroup parent, int viewType) {
+            TraceCompat.beginSection(TRACE_CREATE_VIEW_TAG);
             final VH holder = onCreateViewHolder(parent, viewType);
             holder.mItemViewType = viewType;
+            TraceCompat.endSection();
             return holder;
         }
 
@@ -5315,8 +5513,10 @@ public final void bindViewHolder(VH holder, int position) {
             holder.setFlags(ViewHolder.FLAG_BOUND,
                     ViewHolder.FLAG_BOUND | ViewHolder.FLAG_UPDATE | ViewHolder.FLAG_INVALID
                             | ViewHolder.FLAG_ADAPTER_POSITION_UNKNOWN);
+            TraceCompat.beginSection(TRACE_BIND_VIEW_TAG);
             onBindViewHolder(holder, position, holder.getUnmodifiedPayloads());
             holder.clearPayload();
+            TraceCompat.endSection();
         }
 
         /**
@@ -5478,7 +5678,7 @@ public final boolean hasObservers() {
          *
          * <p>The adapter may publish a variety of events describing specific changes.
          * Not all adapters may support all change types and some may fall back to a generic
-         * {@link org.telegram.messenger.support.widget.RecyclerView.AdapterDataObserver#onChanged()
+         * {@link android.support.v7.widget.RecyclerView.AdapterDataObserver#onChanged()
          * "something changed"} event if more specific data is not available.</p>
          *
          * <p>Components registering observers with an adapter are responsible for
@@ -5764,7 +5964,6 @@ private void dispatchChildAttached(View child) {
                 mOnChildAttachStateListeners.get(i).onChildViewAttachedToWindow(child);
             }
         }
-
     }
 
     /**
@@ -5792,17 +5991,134 @@ private void dispatchChildAttached(View child) {
 
         private boolean mRequestedSimpleAnimations = false;
 
-        private boolean mIsAttachedToWindow = false;
+        boolean mIsAttachedToWindow = false;
+
+        private boolean mAutoMeasure = false;
+
+        /**
+         * LayoutManager has its own more strict measurement cache to avoid re-measuring a child
+         * if the space that will be given to it is already larger than what it has measured before.
+         */
+        private boolean mMeasurementCacheEnabled = true;
+
+
+        /**
+         * These measure specs might be the measure specs that were passed into RecyclerView's
+         * onMeasure method OR fake measure specs created by the RecyclerView.
+         * For example, when a layout is run, RecyclerView always sets these specs to be
+         * EXACTLY because a LayoutManager cannot resize RecyclerView during a layout pass.
+         * <p>
+         * Also, to be able to use the hint in unspecified measure specs, RecyclerView checks the
+         * API level and sets the size to 0 pre-M to avoid any issue that might be caused by
+         * corrupt values. Older platforms have no responsibility to provide a size if they set
+         * mode to unspecified.
+         */
+        private int mWidthMode, mHeightMode;
+        private int mWidth, mHeight;
 
         void setRecyclerView(RecyclerView recyclerView) {
             if (recyclerView == null) {
                 mRecyclerView = null;
                 mChildHelper = null;
+                mWidth = 0;
+                mHeight = 0;
             } else {
                 mRecyclerView = recyclerView;
                 mChildHelper = recyclerView.mChildHelper;
+                mWidth = recyclerView.getWidth();
+                mHeight = recyclerView.getHeight();
             }
+            mWidthMode = MeasureSpec.EXACTLY;
+            mHeightMode = MeasureSpec.EXACTLY;
+        }
+
+        void setMeasureSpecs(int wSpec, int hSpec) {
+            mWidth = MeasureSpec.getSize(wSpec);
+            mWidthMode = MeasureSpec.getMode(wSpec);
+            if (mWidthMode == MeasureSpec.UNSPECIFIED && !ALLOW_SIZE_IN_UNSPECIFIED_SPEC) {
+                mWidth = 0;
+            }
+
+            mHeight = MeasureSpec.getSize(hSpec);
+            mHeightMode = MeasureSpec.getMode(hSpec);
+            if (mHeightMode == MeasureSpec.UNSPECIFIED && !ALLOW_SIZE_IN_UNSPECIFIED_SPEC) {
+                mHeight = 0;
+            }
+        }
+
+        /**
+         * Called after a layout is calculated during a measure pass when using auto-measure.
+         * <p>
+         * It simply traverses all children to calculate a bounding box then calls
+         * {@link #setMeasuredDimension(Rect, int, int)}. LayoutManagers can override that method
+         * if they need to handle the bounding box differently.
+         * <p>
+         * For example, GridLayoutManager override that method to ensure that even if a column is
+         * empty, the GridLayoutManager still measures wide enough to include it.
+         *
+         * @param widthSpec The widthSpec that was passing into RecyclerView's onMeasure
+         * @param heightSpec The heightSpec that was passing into RecyclerView's onMeasure
+         */
+        void setMeasuredDimensionFromChildren(int widthSpec, int heightSpec) {
+            final int count = getChildCount();
+            if (count == 0) {
+                mRecyclerView.defaultOnMeasure(widthSpec, heightSpec);
+                return;
+            }
+            int minX = Integer.MAX_VALUE;
+            int minY = Integer.MAX_VALUE;
+            int maxX = Integer.MIN_VALUE;
+            int maxY = Integer.MIN_VALUE;
+
+            for (int i = 0; i < count; i++) {
+                View child = getChildAt(i);
+                LayoutParams lp = (LayoutParams) child.getLayoutParams();
+                int left = getDecoratedLeft(child) - lp.leftMargin;
+                int right = getDecoratedRight(child) + lp.rightMargin;
+                int top = getDecoratedTop(child) - lp.topMargin;
+                int bottom = getDecoratedBottom(child) + lp.bottomMargin;
+                if (left < minX) {
+                    minX = left;
+                }
+                if (right > maxX) {
+                    maxX = right;
+                }
+                if (top < minY) {
+                    minY = top;
+                }
+                if (bottom > maxY) {
+                    maxY = bottom;
+                }
+            }
+            mRecyclerView.mTempRect.set(minX, minY, maxX, maxY);
+            setMeasuredDimension(mRecyclerView.mTempRect, widthSpec, heightSpec);
+        }
 
+        /**
+         * Sets the measured dimensions from the given bounding box of the children and the
+         * measurement specs that were passed into {@link RecyclerView#onMeasure(int, int)}. It is
+         * called after the RecyclerView calls
+         * {@link LayoutManager#onLayoutChildren(Recycler, State)} during a measurement pass.
+         * <p>
+         * This method should call {@link #setMeasuredDimension(int, int)}.
+         * <p>
+         * The default implementation adds the RecyclerView's padding to the given bounding box
+         * then caps the value to be within the given measurement specs.
+         * <p>
+         * This method is only called if the LayoutManager opted into the auto measurement API.
+         *
+         * @param childrenBounds The bounding box of all children
+         * @param wSpec The widthMeasureSpec that was passed into the RecyclerView.
+         * @param hSpec The heightMeasureSpec that was passed into the RecyclerView.
+         *
+         * @see #setAutoMeasureEnabled(boolean)
+         */
+        public void setMeasuredDimension(Rect childrenBounds, int wSpec, int hSpec) {
+            int usedWidth = childrenBounds.width() + getPaddingLeft() + getPaddingRight();
+            int usedHeight = childrenBounds.height() + getPaddingTop() + getPaddingBottom();
+            int width = chooseSize(wSpec, usedWidth, getMinimumWidth());
+            int height = chooseSize(hSpec, usedHeight, getMinimumHeight());
+            setMeasuredDimension(width, height);
         }
 
         /**
@@ -5827,6 +6143,30 @@ public void assertInLayoutOrScroll(String message) {
             }
         }
 
+        /**
+         * Chooses a size from the given specs and parameters that is closest to the desired size
+         * and also complies with the spec.
+         *
+         * @param spec The measureSpec
+         * @param desired The preferred measurement
+         * @param min The minimum value
+         *
+         * @return A size that fits to the given specs
+         */
+        public static int chooseSize(int spec, int desired, int min) {
+            final int mode = View.MeasureSpec.getMode(spec);
+            final int size = View.MeasureSpec.getSize(spec);
+            switch (mode) {
+                case View.MeasureSpec.EXACTLY:
+                    return size;
+                case View.MeasureSpec.AT_MOST:
+                    return Math.min(size, Math.max(desired, min));
+                case View.MeasureSpec.UNSPECIFIED:
+                default:
+                    return Math.max(desired, min);
+            }
+        }
+
         /**
          * Checks if RecyclerView is in the middle of a layout or scroll and throws an
          * {@link IllegalStateException} if it <b>is</b>.
@@ -5840,6 +6180,86 @@ public void assertNotInLayoutOrScroll(String message) {
             }
         }
 
+        /**
+         * Defines whether the layout should be measured by the RecyclerView or the LayoutManager
+         * wants to handle the layout measurements itself.
+         * <p>
+         * This method is usually called by the LayoutManager with value {@code true} if it wants
+         * to support WRAP_CONTENT. If you are using a public LayoutManager but want to customize
+         * the measurement logic, you can call this method with {@code false} and override
+         * {@link LayoutManager#onMeasure(int, int)} to implement your custom measurement logic.
+         * <p>
+         * AutoMeasure is a convenience mechanism for LayoutManagers to easily wrap their content or
+         * handle various specs provided by the RecyclerView's parent.
+         * It works by calling {@link LayoutManager#onLayoutChildren(Recycler, State)} during an
+         * {@link RecyclerView#onMeasure(int, int)} call, then calculating desired dimensions based
+         * on children's positions. It does this while supporting all existing animation
+         * capabilities of the RecyclerView.
+         * <p>
+         * AutoMeasure works as follows:
+         * <ol>
+         * <li>LayoutManager should call {@code setAutoMeasureEnabled(true)} to enable it. All of
+         * the framework LayoutManagers use {@code auto-measure}.</li>
+         * <li>When {@link RecyclerView#onMeasure(int, int)} is called, if the provided specs are
+         * exact, RecyclerView will only call LayoutManager's {@code onMeasure} and return without
+         * doing any layout calculation.</li>
+         * <li>If one of the layout specs is not {@code EXACT}, the RecyclerView will start the
+         * layout process in {@code onMeasure} call. It will process all pending Adapter updates and
+         * decide whether to run a predictive layout or not. If it decides to do so, it will first
+         * call {@link #onLayoutChildren(Recycler, State)} with {@link State#isPreLayout()} set to
+         * {@code true}. At this stage, {@link #getWidth()} and {@link #getHeight()} will still
+         * return the width and height of the RecyclerView as of the last layout calculation.
+         * <p>
+         * After handling the predictive case, RecyclerView will call
+         * {@link #onLayoutChildren(Recycler, State)} with {@link State#isMeasuring()} set to
+         * {@code true} and {@link State#isPreLayout()} set to {@code false}. The LayoutManager can
+         * access the measurement specs via {@link #getHeight()}, {@link #getHeightMode()},
+         * {@link #getWidth()} and {@link #getWidthMode()}.</li>
+         * <li>After the layout calculation, RecyclerView sets the measured width & height by
+         * calculating the bounding box for the children (+ RecyclerView's padding). The
+         * LayoutManagers can override {@link #setMeasuredDimension(Rect, int, int)} to choose
+         * different values. For instance, GridLayoutManager overrides this value to handle the case
+         * where if it is vertical and has 3 columns but only 2 items, it should still measure its
+         * width to fit 3 items, not 2.</li>
+         * <li>Any following on measure call to the RecyclerView will run
+         * {@link #onLayoutChildren(Recycler, State)} with {@link State#isMeasuring()} set to
+         * {@code true} and {@link State#isPreLayout()} set to {@code false}. RecyclerView will
+         * take care of which views are actually added / removed / moved / changed for animations so
+         * that the LayoutManager should not worry about them and handle each
+         * {@link #onLayoutChildren(Recycler, State)} call as if it is the last one.
+         * </li>
+         * <li>When measure is complete and RecyclerView's
+         * {@link #onLayout(boolean, int, int, int, int)} method is called, RecyclerView checks
+         * whether it already did layout calculations during the measure pass and if so, it re-uses
+         * that information. It may still decide to call {@link #onLayoutChildren(Recycler, State)}
+         * if the last measure spec was different from the final dimensions or adapter contents
+         * have changed between the measure call and the layout call.</li>
+         * <li>Finally, animations are calculated and run as usual.</li>
+         * </ol>
+         *
+         * @param enabled <code>True</code> if the Layout should be measured by the
+         *                             RecyclerView, <code>false</code> if the LayoutManager wants
+         *                             to measure itself.
+         *
+         * @see #setMeasuredDimension(Rect, int, int)
+         * @see #isAutoMeasureEnabled()
+         */
+        public void setAutoMeasureEnabled(boolean enabled) {
+            mAutoMeasure = enabled;
+        }
+
+        /**
+         * Returns whether the LayoutManager uses the automatic measurement API or not.
+         *
+         * @return <code>True</code> if the LayoutManager is measured by the RecyclerView or
+         * <code>false</code> if it measures itself.
+         *
+         * @see #setAutoMeasureEnabled(boolean)
+         */
+        public boolean isAutoMeasureEnabled() {
+            return mAutoMeasure;
+        }
+
         /**
          * Returns whether this LayoutManager supports automatic item animations.
          * A LayoutManager wishing to support item animations should obey certain
@@ -6283,14 +6703,14 @@ private void addViewInt(View child, int index, boolean disappearing) {
             final ViewHolder holder = getChildViewHolderInt(child);
             if (disappearing || holder.isRemoved()) {
                 // these views will be hidden at the end of the layout pass.
-                mRecyclerView.mState.addToDisappearingList(child);
+                mRecyclerView.mViewInfoStore.addToDisappearedInLayout(holder);
             } else {
                 // This may look like unnecessary but may happen if layout manager supports
                 // predictive layouts and adapter removed then re-added the same item.
                 // In this case, added version will be visible in the post layout (because add is
                 // deferred) but RV will still bind it to the same View.
                 // So if a View re-appears in post layout pass, remove it from disappearing list.
-                mRecyclerView.mState.removeFromDisappearingList(child);
+                mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(holder);
             }
             final LayoutParams lp = (LayoutParams) child.getLayoutParams();
             if (holder.wasReturnedFromScrap() || holder.isScrap()) {
@@ -6403,6 +6823,36 @@ public int getItemViewType(View view) {
             return getChildViewHolderInt(view).getItemViewType();
         }
 
+        /**
+         * Traverses the ancestors of the given view and returns the item view that contains it
+         * and also a direct child of the LayoutManager.
+         * <p>
+         * Note that this method may return null if the view is a child of the RecyclerView but
+         * not a child of the LayoutManager (e.g. running a disappear animation).
+         *
+         * @param view The view that is a descendant of the LayoutManager.
+         *
+         * @return The direct child of the LayoutManager which contains the given view or null if
+         * the provided view is not a descendant of this LayoutManager.
+         *
+         * @see RecyclerView#getChildViewHolder(View)
+         * @see RecyclerView#findContainingViewHolder(View)
+         */
+        @Nullable
+        public View findContainingItemView(View view) {
+            if (mRecyclerView == null) {
+                return null;
+            }
+            View found = mRecyclerView.findContainingItemView(view);
+            if (found == null) {
+                return null;
+            }
+            if (mChildHelper.isHidden(found)) {
+                return null;
+            }
+            return found;
+        }
+
         /**
          * Finds the view which represents the given adapter position.
          * <p>
@@ -6492,9 +6942,9 @@ private void detachViewInternal(int index, View view) {
         public void attachView(View child, int index, LayoutParams lp) {
             ViewHolder vh = getChildViewHolderInt(child);
             if (vh.isRemoved()) {
-                mRecyclerView.mState.addToDisappearingList(child);
+                mRecyclerView.mViewInfoStore.addToDisappearedInLayout(vh);
             } else {
-                mRecyclerView.mState.removeFromDisappearingList(child);
+                mRecyclerView.mViewInfoStore.removeFromDisappearedInLayout(vh);
             }
             mChildHelper.attachViewToParent(child, index, lp, vh.isRemoved());
             if (DISPATCH_TEMP_DETACH)  {
@@ -6621,13 +7071,49 @@ public View getChildAt(int index) {
             return mChildHelper != null ? mChildHelper.getChildAt(index) : null;
         }
 
+        /**
+         * Return the width measurement spec mode of the RecyclerView.
+         * <p>
+         * This value is set only if the LayoutManager opts into the auto measure api via
+         * {@link #setAutoMeasureEnabled(boolean)}.
+         * <p>
+         * When RecyclerView is running a layout, this value is always set to
+         * {@link MeasureSpec#EXACTLY} even if it was measured with a different spec mode.
+         *
+         * @return Width measure spec mode.
+         *
+         * @see MeasureSpec#getMode(int)
+         * @see View#onMeasure(int, int)
+         */
+        public int getWidthMode() {
+            return mWidthMode;
+        }
+
+        /**
+         * Return the height measurement spec mode of the RecyclerView.
+         * <p>
+         * This value is set only if the LayoutManager opts into the auto measure api via
+         * {@link #setAutoMeasureEnabled(boolean)}.
+         * <p>
+         * When RecyclerView is running a layout, this value is always set to
+         * {@link MeasureSpec#EXACTLY} even if it was measured with a different spec mode.
+         *
+         * @return Height measure spec mode.
+         *
+         * @see MeasureSpec#getMode(int)
+         * @see View#onMeasure(int, int)
+         */
+        public int getHeightMode() {
+            return mHeightMode;
+        }
+
         /**
          * Return the width of the parent RecyclerView
          *
          * @return Width in pixels
          */
         public int getWidth() {
-            return mRecyclerView != null ? mRecyclerView.getWidth() : 0;
+            return mWidth;
         }
 
         /**
@@ -6636,7 +7122,7 @@ public int getWidth() {
          * @return Height in pixels
          */
         public int getHeight() {
-            return mRecyclerView != null ? mRecyclerView.getHeight() : 0;
+            return mHeight;
         }
 
         /**
@@ -6792,7 +7278,7 @@ public void ignoreView(View view) {
             }
             final ViewHolder vh = getChildViewHolderInt(view);
             vh.addFlags(ViewHolder.FLAG_IGNORE);
-            mRecyclerView.mState.onViewIgnored(vh);
+            mRecyclerView.mViewInfoStore.removeViewHolder(vh);
         }
 
         /**
@@ -6834,13 +7320,14 @@ private void scrapOrRecycleView(Recycler recycler, int index, View view) {
                 }
                 return;
             }
-            if (viewHolder.isInvalid() && !viewHolder.isRemoved() && !viewHolder.isChanged() &&
+            if (viewHolder.isInvalid() && !viewHolder.isRemoved() &&
                     !mRecyclerView.mAdapter.hasStableIds()) {
                 removeViewAt(index);
                 recycler.recycleViewHolderInternal(viewHolder);
             } else {
                 detachViewAt(index);
                 recycler.scrapView(view);
+                mRecyclerView.mViewInfoStore.onViewDetached(viewHolder);
             }
         }
 
@@ -6901,14 +7388,85 @@ public void measureChild(View child, int widthUsed, int heightUsed) {
             final Rect insets = mRecyclerView.getItemDecorInsetsForChild(child);
             widthUsed += insets.left + insets.right;
             heightUsed += insets.top + insets.bottom;
-
-            final int widthSpec = getChildMeasureSpec(getWidth(),
+            final int widthSpec = getChildMeasureSpec(getWidth(), getWidthMode(),
                     getPaddingLeft() + getPaddingRight() + widthUsed, lp.width,
                     canScrollHorizontally());
-            final int heightSpec = getChildMeasureSpec(getHeight(),
+            final int heightSpec = getChildMeasureSpec(getHeight(), getHeightMode(),
                     getPaddingTop() + getPaddingBottom() + heightUsed, lp.height,
                     canScrollVertically());
-            child.measure(widthSpec, heightSpec);
+            if (shouldMeasureChild(child, widthSpec, heightSpec, lp)) {
+                child.measure(widthSpec, heightSpec);
+            }
+        }
+
+        /**
+         * RecyclerView internally does its own View measurement caching which should help with
+         * WRAP_CONTENT.
+         * <p>
+         * Use this method if the View is already measured once in this layout pass.
+         */
+        boolean shouldReMeasureChild(View child, int widthSpec, int heightSpec, LayoutParams lp) {
+            return !mMeasurementCacheEnabled
+                    || !isMeasurementUpToDate(child.getMeasuredWidth(), widthSpec, lp.width)
+                    || !isMeasurementUpToDate(child.getMeasuredHeight(), heightSpec, lp.height);
+        }
+
+        // we may consider making this public
+        /**
+         * RecyclerView internally does its own View measurement caching which should help with
+         * WRAP_CONTENT.
+         * <p>
+         * Use this method if the View is not yet measured and you need to decide whether to
+         * measure this View or not.
+         */
+        boolean shouldMeasureChild(View child, int widthSpec, int heightSpec, LayoutParams lp) {
+            return child.isLayoutRequested()
+                    || !mMeasurementCacheEnabled
+                    || !isMeasurementUpToDate(child.getWidth(), widthSpec, lp.width)
+                    || !isMeasurementUpToDate(child.getHeight(), heightSpec, lp.height);
+        }
+
+        /**
+         * In addition to the View Framework's measurement cache, RecyclerView uses its own
+         * additional measurement cache for its children to avoid re-measuring them when not
+         * necessary. It is on by default but it can be turned off via
+         * {@link #setMeasurementCacheEnabled(boolean)}.
+         *
+         * @return True if measurement cache is enabled, false otherwise.
+         *
+         * @see #setMeasurementCacheEnabled(boolean)
+         */
+        public boolean isMeasurementCacheEnabled() {
+            return mMeasurementCacheEnabled;
+        }
+
+        /**
+         * Sets whether RecyclerView should use its own measurement cache for the children. This is
+         * a more aggressive cache than the framework uses.
+         *
+         * @param measurementCacheEnabled True to enable the measurement cache, false otherwise.
+         *
+         * @see #isMeasurementCacheEnabled()
+         */
+        public void setMeasurementCacheEnabled(boolean measurementCacheEnabled) {
+            mMeasurementCacheEnabled = measurementCacheEnabled;
+        }
+
+        private static boolean isMeasurementUpToDate(int childSize, int spec, int dimension) {
+            final int specMode = MeasureSpec.getMode(spec);
+            final int specSize = MeasureSpec.getSize(spec);
+            if (dimension > 0 && childSize != dimension) {
+                return false;
+            }
+            switch (specMode) {
+                case MeasureSpec.UNSPECIFIED:
+                    return true;
+                case MeasureSpec.AT_MOST:
+                    return specSize >= childSize;
+                case MeasureSpec.EXACTLY:
+                    return  specSize == childSize;
+            }
+            return false;
         }
 
         /**
@@ -6930,40 +7488,43 @@ public void measureChildWithMargins(View child, int widthUsed, int heightUsed) {
             widthUsed += insets.left + insets.right;
             heightUsed += insets.top + insets.bottom;
 
-            final int widthSpec = getChildMeasureSpec(getWidth(),
+            final int widthSpec = getChildMeasureSpec(getWidth(), getWidthMode(),
                     getPaddingLeft() + getPaddingRight() +
                             lp.leftMargin + lp.rightMargin + widthUsed, lp.width,
                     canScrollHorizontally());
-            final int heightSpec = getChildMeasureSpec(getHeight(),
+            final int heightSpec = getChildMeasureSpec(getHeight(), getHeightMode(),
                     getPaddingTop() + getPaddingBottom() +
                             lp.topMargin + lp.bottomMargin + heightUsed, lp.height,
                     canScrollVertically());
-            child.measure(widthSpec, heightSpec);
+            if (shouldMeasureChild(child, widthSpec, heightSpec, lp)) {
+                child.measure(widthSpec, heightSpec);
+            }
         }
 
         /**
          * Calculate a MeasureSpec value for measuring a child view in one dimension.
          *
          * @param parentSize Size of the parent view where the child will be placed
-         * @param padding Total space currently consumed by other elements of parent
-         * @param childDimension Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.
+         * @param padding Total space currently consumed by other elements of the parent
+         * @param childDimension Desired size of the child view, or FILL_PARENT/WRAP_CONTENT.
          *                       Generally obtained from the child view's LayoutParams
          * @param canScroll true if the parent RecyclerView can scroll in this dimension
          *
          * @return a MeasureSpec value for the child view
+         * @deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}
          */
+        @Deprecated
         public static int getChildMeasureSpec(int parentSize, int padding, int childDimension,
                 boolean canScroll) {
             int size = Math.max(0, parentSize - padding);
             int resultSize = 0;
             int resultMode = 0;
-
             if (canScroll) {
                 if (childDimension >= 0) {
                     resultSize = childDimension;
                     resultMode = MeasureSpec.EXACTLY;
                 } else {
-                    // MATCH_PARENT can't be applied since we can scroll in this dimension, wrap
+                    // FILL_PARENT can't be applied since we can scroll in this dimension, wrap
                     // instead using UNSPECIFIED.
                     resultSize = 0;
                     resultMode = MeasureSpec.UNSPECIFIED;
@@ -6974,6 +7535,7 @@ public static int getChildMeasureSpec(int parentSize, int padding, int childDime
                     resultMode = MeasureSpec.EXACTLY;
                 } else if (childDimension == LayoutParams.FILL_PARENT) {
                     resultSize = size;
+                    // TODO this should be my spec.
                     resultMode = MeasureSpec.EXACTLY;
                 } else if (childDimension == LayoutParams.WRAP_CONTENT) {
                     resultSize = size;
@@ -6983,6 +7545,64 @@ public static int getChildMeasureSpec(int parentSize, int padding, int childDime
             return MeasureSpec.makeMeasureSpec(resultSize, resultMode);
         }
 
+        /**
+         * Calculate a MeasureSpec value for measuring a child view in one dimension.
+         *
+         * @param parentSize Size of the parent view where the child will be placed
+         * @param parentMode The measurement spec mode of the parent
+         * @param padding Total space currently consumed by other elements of parent
+         * @param childDimension Desired size of the child view, or FILL_PARENT/WRAP_CONTENT.
+         *                       Generally obtained from the child view's LayoutParams
+         * @param canScroll true if the parent RecyclerView can scroll in this dimension
+         *
+         * @return a MeasureSpec value for the child view
+         */
+        public static int getChildMeasureSpec(int parentSize, int parentMode, int padding,
+                int childDimension, boolean canScroll) {
+            int size = Math.max(0, parentSize - padding);
+            int resultSize = 0;
+            int resultMode = 0;
+            if (canScroll) {
+                if (childDimension >= 0) {
+                    resultSize = childDimension;
+                    resultMode = MeasureSpec.EXACTLY;
+                } else if (childDimension == LayoutParams.FILL_PARENT){
+                    switch (parentMode) {
+                        case MeasureSpec.AT_MOST:
+                        case MeasureSpec.EXACTLY:
+                            resultSize = size;
+                            resultMode = parentMode;
+                            break;
+                        case MeasureSpec.UNSPECIFIED:
+                            resultSize = 0;
+                            resultMode = MeasureSpec.UNSPECIFIED;
+                            break;
+                    }
+                } else if (childDimension == LayoutParams.WRAP_CONTENT) {
+                    resultSize = 0;
+                    resultMode = MeasureSpec.UNSPECIFIED;
+                }
+            } else {
+                if (childDimension >= 0) {
+                    resultSize = childDimension;
+                    resultMode = MeasureSpec.EXACTLY;
+                } else if (childDimension == LayoutParams.FILL_PARENT) {
+                    resultSize = size;
+                    resultMode = parentMode;
+                } else if (childDimension == LayoutParams.WRAP_CONTENT) {
+                    resultSize = size;
+                    if (parentMode == MeasureSpec.AT_MOST || parentMode == MeasureSpec.EXACTLY) {
+                        resultMode = MeasureSpec.AT_MOST;
+                    } else {
+                        resultMode = MeasureSpec.UNSPECIFIED;
+                    }
+
+                }
+            }
+            //noinspection WrongConstant
+            return MeasureSpec.makeMeasureSpec(resultSize, resultMode);
+        }
+
         /**
          * Returns the measured width of the given child, plus the additional size of
          * any insets applied by {@link ItemDecoration ItemDecorations}.
@@ -7242,8 +7862,8 @@ public boolean requestChildRectangleOnScreen(RecyclerView parent, View child, Re
             final int parentTop = getPaddingTop();
             final int parentRight = getWidth() - getPaddingRight();
             final int parentBottom = getHeight() - getPaddingBottom();
-            final int childLeft = child.getLeft() + rect.left;
-            final int childTop = child.getTop() + rect.top;
+            final int childLeft = child.getLeft() + rect.left - child.getScrollX();
+            final int childTop = child.getTop() + rect.top - child.getScrollY();
             final int childRight = childLeft + rect.width();
             final int childBottom = childTop + rect.height();
 
@@ -7898,7 +8518,60 @@ public boolean performAccessibilityActionForItem(Recycler recycler, State state,
         }
 
         /**
-         * Some general properties that a LayoutManager may want to use.
+         * Parse the xml attributes to get the most common properties used by layout managers.
+         *
+         * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation
+         * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_spanCount
+         * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_reverseLayout
+         * @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_stackFromEnd
+         *
+         * @return an object containing the properties as specified in the attrs.
+         */
+        public static Properties getProperties(Context context, AttributeSet attrs,
+                int defStyleAttr, int defStyleRes) {
+            Properties properties = new Properties();
+            properties.orientation = VERTICAL;
+            properties.spanCount = 1;
+            properties.reverseLayout = false;
+            properties.stackFromEnd = false;
+            return properties;
+        }
+
+        void setExactMeasureSpecsFrom(RecyclerView recyclerView) {
+            setMeasureSpecs(
+                    MeasureSpec.makeMeasureSpec(recyclerView.getWidth(), MeasureSpec.EXACTLY),
+                    MeasureSpec.makeMeasureSpec(recyclerView.getHeight(), MeasureSpec.EXACTLY)
+            );
+        }
+
+        /**
+         * Internal API to allow LayoutManagers to be measured twice.
+         * <p>
+         * This is not public because LayoutManagers should be able to handle their layouts in one
+         * pass but it is very convenient to make existing LayoutManagers support wrapping content
+         * when both orientations are undefined.
+         * <p>
+         * This API will be removed after default LayoutManagers properly implement wrap content in
+         * non-scroll orientation.
+         */
+        boolean shouldMeasureTwice() {
+            return false;
+        }
+
+        boolean hasFlexibleChildInBothOrientations() {
+            final int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                final View child = getChildAt(i);
+                final ViewGroup.LayoutParams lp = child.getLayoutParams();
+                if (lp.width < 0 && lp.height < 0) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        /**
+         * Some general properties that a LayoutManager may want to use.
          */
         public static class Properties {
             /** @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation */
@@ -8077,16 +8750,12 @@ public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
 
 
     /**
-     * An OnScrollListener can be set on a RecyclerView to receive messages
-     * when a scrolling event has occurred on that RecyclerView.
-     *
-     * @see RecyclerView#setOnScrollListener(OnScrollListener) and
-     * RecyclerView#addOnScrollListener(OnScrollListener)
+     * An OnScrollListener can be added to a RecyclerView to receive messages when a scrolling event
+     * has occurred on that RecyclerView.
+     * <p>
+     * @see RecyclerView#addOnScrollListener(OnScrollListener)
+     * @see RecyclerView#clearOnChildAttachStateChangeListeners()
      *
-     * If you are planning to have several listeners at the same time, use
-     * RecyclerView#addOnScrollListener. If there will be only one listener at the time and you
-     * want your components to be able to easily replace the listener use
-     * RecyclerView#setOnScrollListener.
      */
     public abstract static class OnScrollListener {
         /**
@@ -8219,12 +8888,6 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
          */
         static final int FLAG_RETURNED_FROM_SCRAP = 1 << 5;
 
-        /**
-         * This ViewHolder's contents have changed. This flag is used as an indication that
-         * change animations may be used, if supported by the ItemAnimator.
-         */
-        static final int FLAG_CHANGED = 1 << 6;
-
         /**
          * This ViewHolder is fully managed by the LayoutManager. We do not scrap, recycle or remove
          * it unless LayoutManager is replaced.
@@ -8252,6 +8915,31 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
          */
         static final int FLAG_ADAPTER_FULLUPDATE = 1 << 10;
 
+        /**
+         * Used by ItemAnimator when a ViewHolder's position changes
+         */
+        static final int FLAG_MOVED = 1 << 11;
+
+        /**
+         * Used by ItemAnimator when a ViewHolder appears in pre-layout
+         */
+        static final int FLAG_APPEARED_IN_PRE_LAYOUT = 1 << 12;
+
+        /**
+         * Used when a ViewHolder starts the layout pass as a hidden ViewHolder but is re-used from
+         * hidden list (as if it was scrap) without being recycled in between.
+         *
+         * When a ViewHolder is hidden, there are 2 paths it can be re-used:
+         *   a) Animation ends, view is recycled and used from the recycle pool.
+         *   b) LayoutManager asks for the View for that position while the ViewHolder is hidden.
+         *
+         * This flag is used to represent "case b" where the ViewHolder is reused without being
+         * recycled (thus "bounced" from the hidden list). This state requires special handling
+         * because the ViewHolder must be added to pre layout maps for animations as if it was
+         * already there.
+         */
+        static final int FLAG_BOUNCED_FROM_HIDDEN_LIST = 1 << 13;
+
         private int mFlags;
 
         private static final List<Object> FULLUPDATE_PAYLOADS = Collections.EMPTY_LIST;
@@ -8264,6 +8952,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy){}
         // If non-null, view is currently considered scrap and may be reused for other data by the
         // scrap container.
         private Recycler mScrapContainer = null;
+        // Keeps whether this ViewHolder lives in Change scrap or Attached scrap
+        private boolean mInChangeScrap = false;
 
         // Saves isImportantForAccessibility value for the view item while it's in hidden state and
         // marked as unimportant for accessibility.
@@ -8444,8 +9134,9 @@ void stopIgnoring() {
             mFlags = mFlags & ~FLAG_IGNORE;
         }
 
-        void setScrapContainer(Recycler recycler) {
+        void setScrapContainer(Recycler recycler, boolean isChangeScrap) {
             mScrapContainer = recycler;
+            mInChangeScrap = isChangeScrap;
         }
 
         boolean isInvalid() {
@@ -8456,10 +9147,6 @@ boolean needsUpdate() {
             return (mFlags & FLAG_UPDATE) != 0;
         }
 
-        boolean isChanged() {
-            return (mFlags & FLAG_CHANGED) != 0;
-        }
-
         boolean isBound() {
             return (mFlags & FLAG_BOUND) != 0;
         }
@@ -8563,16 +9250,18 @@ public String toString() {
             final StringBuilder sb = new StringBuilder("ViewHolder{" +
                     Integer.toHexString(hashCode()) + " position=" + mPosition + " id=" + mItemId +
                     ", oldPos=" + mOldPosition + ", pLpos:" + mPreLayoutPosition);
-            if (isScrap()) sb.append(" scrap");
+            if (isScrap()) {
+                sb.append(" scrap ")
+                        .append(mInChangeScrap ? "[changeScrap]" : "[attachedScrap]");
+            }
             if (isInvalid()) sb.append(" invalid");
             if (!isBound()) sb.append(" unbound");
             if (needsUpdate()) sb.append(" update");
             if (isRemoved()) sb.append(" removed");
             if (shouldIgnore()) sb.append(" ignored");
-            if (isChanged()) sb.append(" changed");
             if (isTmpDetached()) sb.append(" tmpDetached");
             if (!isRecyclable()) sb.append(" not recyclable(" + mIsRecyclableCount + ")");
-            if (isAdapterPositionUnknown()) sb.append("undefined adapter position");
+            if (isAdapterPositionUnknown()) sb.append(" undefined adapter position");
 
             if (itemView.getParent() == null) sb.append(" no parent");
             sb.append("}");
@@ -8635,6 +9324,10 @@ private boolean shouldBeKeptAsChild() {
         private boolean doesTransientStatePreventRecycling() {
             return (mFlags & FLAG_NOT_RECYCLABLE) == 0 && ViewCompat.hasTransientState(itemView);
         }
+
+        boolean isUpdated() {
+            return (mFlags & FLAG_UPDATE) != 0;
+        }
     }
 
     private int getAdapterPositionFor(ViewHolder viewHolder) {
@@ -8650,49 +9343,49 @@ private int getAdapterPositionFor(ViewHolder viewHolder) {
 
     @Override
     public void setNestedScrollingEnabled(boolean enabled) {
-        mScrollingChildHelper.setNestedScrollingEnabled(enabled);
+        getScrollingChildHelper().setNestedScrollingEnabled(enabled);
     }
 
     @Override
     public boolean isNestedScrollingEnabled() {
-        return mScrollingChildHelper.isNestedScrollingEnabled();
+        return getScrollingChildHelper().isNestedScrollingEnabled();
     }
 
     @Override
     public boolean startNestedScroll(int axes) {
-        return mScrollingChildHelper.startNestedScroll(axes);
+        return getScrollingChildHelper().startNestedScroll(axes);
     }
 
     @Override
     public void stopNestedScroll() {
-        mScrollingChildHelper.stopNestedScroll();
+        getScrollingChildHelper().stopNestedScroll();
     }
 
     @Override
     public boolean hasNestedScrollingParent() {
-        return mScrollingChildHelper.hasNestedScrollingParent();
+        return getScrollingChildHelper().hasNestedScrollingParent();
     }
 
     @Override
     public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
             int dyUnconsumed, int[] offsetInWindow) {
-        return mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,
+        return getScrollingChildHelper().dispatchNestedScroll(dxConsumed, dyConsumed,
                 dxUnconsumed, dyUnconsumed, offsetInWindow);
     }
 
     @Override
     public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
-        return mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
+        return getScrollingChildHelper().dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
     }
 
     @Override
     public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) {
-        return mScrollingChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);
+        return getScrollingChildHelper().dispatchNestedFling(velocityX, velocityY, consumed);
     }
 
     @Override
     public boolean dispatchNestedPreFling(float velocityX, float velocityY) {
-        return mScrollingChildHelper.dispatchNestedPreFling(velocityX, velocityY);
+        return getScrollingChildHelper().dispatchNestedPreFling(velocityX, velocityY);
     }
 
     /**
@@ -8769,7 +9462,7 @@ public boolean isItemRemoved() {
          * @return true if the item the view corresponds to was changed in the data set
          */
         public boolean isItemChanged() {
-            return mViewHolder.isChanged();
+            return mViewHolder.isUpdated();
         }
 
         /**
@@ -9304,7 +9997,11 @@ public void notifyItemMoved(int fromPosition, int toPosition) {
         }
     }
 
-    static class SavedState extends android.view.View.BaseSavedState {
+    /**
+     * This is public so that the CREATOR can be access on cold launch.
+     * @hide
+     */
+    public static class SavedState extends android.view.View.BaseSavedState {
 
         Parcelable mLayoutState;
 
@@ -9357,17 +10054,28 @@ public SavedState createFromParcel(Parcel in) {
      * data between your components without needing to manage their lifecycles.</p>
      */
     public static class State {
+        static final int STEP_START = 1;
+        static final int STEP_LAYOUT = 1 << 1;
+        static final int STEP_ANIMATIONS = 1 << 2;
+
+        void assertLayoutStep(int accepted) {
+            if ((accepted & mLayoutStep) == 0) {
+                throw new IllegalStateException("Layout state should be one of "
+                        + Integer.toBinaryString(accepted) + " but it is "
+                        + Integer.toBinaryString(mLayoutStep));
+            }
+        }
+
+        @IntDef(flag = true, value = {
+                STEP_START, STEP_LAYOUT, STEP_ANIMATIONS
+        })
+        @Retention(RetentionPolicy.SOURCE)
+        @interface LayoutState {}
 
         private int mTargetPosition = RecyclerView.NO_POSITION;
-        ArrayMap<ViewHolder, ItemHolderInfo> mPreLayoutHolderMap =
-                new ArrayMap<ViewHolder, ItemHolderInfo>();
-        ArrayMap<ViewHolder, ItemHolderInfo> mPostLayoutHolderMap =
-                new ArrayMap<ViewHolder, ItemHolderInfo>();
-        // nullable
-        ArrayMap<Long, ViewHolder> mOldChangedHolders = new ArrayMap<Long, ViewHolder>();
 
-        // we use this like a set
-        final List<View> mDisappearingViewsInLayoutPass = new ArrayList<View>();
+        @LayoutState
+        private int mLayoutStep = STEP_START;
 
         private SparseArray<Object> mData;
 
@@ -9395,6 +10103,10 @@ public SavedState createFromParcel(Parcel in) {
 
         private boolean mRunPredictiveAnimations = false;
 
+        private boolean mTrackOldChangeHolders = false;
+
+        private boolean mIsMeasuring = false;
+
         State reset() {
             mTargetPosition = RecyclerView.NO_POSITION;
             if (mData != null) {
@@ -9402,9 +10114,32 @@ State reset() {
             }
             mItemCount = 0;
             mStructureChanged = false;
+            mIsMeasuring = false;
             return this;
         }
 
+        /**
+         * Returns true if the RecyclerView is currently measuring the layout. This value is
+         * {@code true} only if the LayoutManager opted into the auto measure API and RecyclerView
+         * has non-exact measurement specs.
+         * <p>
+         * Note that if the LayoutManager supports predictive animations and it is calculating the
+         * pre-layout step, this value will be {@code false} even if the RecyclerView is in
+         * {@code onMeasure} call. This is because pre-layout means the previous state of the
+         * RecyclerView and measurements made for that state cannot change the RecyclerView's size.
+         * LayoutManager is always guaranteed to receive another call to
+         * {@link LayoutManager#onLayoutChildren(Recycler, State)} when this happens.
+         *
+         * @return True if the RecyclerView is currently calculating its bounds, false otherwise.
+         */
+        public boolean isMeasuring() {
+            return mIsMeasuring;
+        }
+
+        /**
+         * Returns true if
+         * @return
+         */
         public boolean isPreLayout() {
             return mInPreLayout;
         }
@@ -9531,45 +10266,10 @@ public int getItemCount() {
                     mItemCount;
         }
 
-        void onViewRecycled(ViewHolder holder) {
-            mPreLayoutHolderMap.remove(holder);
-            mPostLayoutHolderMap.remove(holder);
-            if (mOldChangedHolders != null) {
-                removeFrom(mOldChangedHolders, holder);
-            }
-            mDisappearingViewsInLayoutPass.remove(holder.itemView);
-            // holder cannot be in new list.
-        }
-
-        public void onViewIgnored(ViewHolder holder) {
-            onViewRecycled(holder);
-        }
-
-        private void removeFrom(ArrayMap<Long, ViewHolder> holderMap, ViewHolder holder) {
-            for (int i = holderMap.size() - 1; i >= 0; i --) {
-                if (holder == holderMap.valueAt(i)) {
-                    holderMap.removeAt(i);
-                    return;
-                }
-            }
-        }
-
-        void removeFromDisappearingList(View child) {
-            mDisappearingViewsInLayoutPass.remove(child);
-        }
-
-        void addToDisappearingList(View child) {
-            if (!mDisappearingViewsInLayoutPass.contains(child)) {
-                mDisappearingViewsInLayoutPass.add(child);
-            }
-        }
-
         @Override
         public String toString() {
             return "State{" +
                     "mTargetPosition=" + mTargetPosition +
-                    ", mPreLayoutHolderMap=" + mPreLayoutHolderMap +
-                    ", mPostLayoutHolderMap=" + mPostLayoutHolderMap +
                     ", mData=" + mData +
                     ", mItemCount=" + mItemCount +
                     ", mPreviousLayoutItemCount=" + mPreviousLayoutItemCount +
@@ -9592,71 +10292,21 @@ public String toString() {
     private class ItemAnimatorRestoreListener implements ItemAnimator.ItemAnimatorListener {
 
         @Override
-        public void onRemoveFinished(ViewHolder item) {
-            item.setIsRecyclable(true);
-            if (!removeAnimatingView(item.itemView) && item.isTmpDetached()) {
-                removeDetachedView(item.itemView, false);
-            }
-        }
-
-        @Override
-        public void onAddFinished(ViewHolder item) {
+        public void onAnimationFinished(ViewHolder item) {
             item.setIsRecyclable(true);
-            if (!item.shouldBeKeptAsChild()) {
-                removeAnimatingView(item.itemView);
-            }
-        }
-
-        @Override
-        public void onMoveFinished(ViewHolder item) {
-            item.setIsRecyclable(true);
-            if (!item.shouldBeKeptAsChild()) {
-                removeAnimatingView(item.itemView);
-            }
-        }
-
-        @Override
-        public void onChangeFinished(ViewHolder item) {
-            item.setIsRecyclable(true);
-            /**
-             * We check both shadowed and shadowing because a ViewHolder may get both roles at the
-             * same time.
-             *
-             * Assume this flow:
-             * item X is represented by VH_1. Then itemX changes, so we create VH_2 .
-             * RV sets the following and calls item animator:
-             * VH_1.shadowed = VH_2;
-             * VH_1.mChanged = true;
-             * VH_2.shadowing =VH_1;
-             *
-             * Then, before the first change finishes, item changes again so we create VH_3.
-             * RV sets the following and calls item animator:
-             * VH_2.shadowed = VH_3
-             * VH_2.mChanged = true
-             * VH_3.shadowing = VH_2
-             *
-             * Because VH_2 already has an animation, it will be cancelled. At this point VH_2 has
-             * both shadowing and shadowed fields set. Shadowing information is obsolete now
-             * because the first animation where VH_2 is newViewHolder is not valid anymore.
-             * We ended up in this case because VH_2 played both roles. On the other hand,
-             * we DO NOT want to clear its changed flag.
-             *
-             * If second change was simply reverting first change, we would find VH_1 in
-             * {@link Recycler#getScrapViewForPosition(int, int, boolean)} and recycle it before
-             * re-using
-             */
             if (item.mShadowedHolder != null && item.mShadowingHolder == null) { // old vh
                 item.mShadowedHolder = null;
-                item.setFlags(~ViewHolder.FLAG_CHANGED, item.mFlags);
             }
             // always null this because an OldViewHolder can never become NewViewHolder w/o being
             // recycled.
             item.mShadowingHolder = null;
             if (!item.shouldBeKeptAsChild()) {
-                removeAnimatingView(item.itemView);
+                if (!removeAnimatingView(item.itemView) && item.isTmpDetached()) {
+                    removeDetachedView(item.itemView, false);
+                }
             }
         }
-    };
+    }
 
     /**
      * This class defines the animations that take place on items as changes are made
@@ -9664,22 +10314,78 @@ public void onChangeFinished(ViewHolder item) {
      *
      * Subclasses of ItemAnimator can be used to implement custom animations for actions on
      * ViewHolder items. The RecyclerView will manage retaining these items while they
-     * are being animated, but implementors must call the appropriate "Starting"
-     * ({@link #dispatchRemoveStarting(ViewHolder)}, {@link #dispatchMoveStarting(ViewHolder)},
-     * {@link #dispatchChangeStarting(ViewHolder, boolean)}, or
-     * {@link #dispatchAddStarting(ViewHolder)})
-     * and "Finished" ({@link #dispatchRemoveFinished(ViewHolder)},
-     * {@link #dispatchMoveFinished(ViewHolder)},
-     * {@link #dispatchChangeFinished(ViewHolder, boolean)},
-     * or {@link #dispatchAddFinished(ViewHolder)}) methods when each item animation is
-     * being started and ended.
-     *
-     * <p>By default, RecyclerView uses {@link DefaultItemAnimator}</p>
+     * are being animated, but implementors must call {@link #dispatchAnimationFinished(ViewHolder)}
+     * when a ViewHolder's animation is finished. In other words, there must be a matching
+     * {@link #dispatchAnimationFinished(ViewHolder)} call for each
+     * {@link #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo) animateAppearance()},
+     * {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+     * animateChange()}
+     * {@link #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo) animatePersistence()},
+     * and
+     * {@link #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+     * animateDisappearance()} call.
+     *
+     * <p>By default, RecyclerView uses {@link DefaultItemAnimator}.</p>
      *
      * @see #setItemAnimator(ItemAnimator)
      */
+    @SuppressWarnings("UnusedParameters")
     public static abstract class ItemAnimator {
 
+        /**
+         * The Item represented by this ViewHolder is updated.
+         * <p>
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         */
+        public static final int FLAG_CHANGED = ViewHolder.FLAG_UPDATE;
+
+        /**
+         * The Item represented by this ViewHolder is removed from the adapter.
+         * <p>
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         */
+        public static final int FLAG_REMOVED = ViewHolder.FLAG_REMOVED;
+
+        /**
+         * Adapter {@link Adapter#notifyDataSetChanged()} has been called and the content
+         * represented by this ViewHolder is invalid.
+         * <p>
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         */
+        public static final int FLAG_INVALIDATED = ViewHolder.FLAG_INVALID;
+
+        /**
+         * The position of the Item represented by this ViewHolder has been changed. This flag is
+         * not bound to {@link Adapter#notifyItemMoved(int, int)}. It might be set in response to
+         * any adapter change that may have a side effect on this item. (e.g. The item before this
+         * one has been removed from the Adapter).
+         * <p>
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         */
+        public static final int FLAG_MOVED = ViewHolder.FLAG_MOVED;
+
+        /**
+         * This ViewHolder was not laid out but has been added to the layout in pre-layout state
+         * by the {@link LayoutManager}. This means that the item was already in the Adapter but
+         * invisible and it may become visible in the post layout phase. LayoutManagers may prefer
+         * to add new items in pre-layout to specify their virtual location when they are invisible
+         * (e.g. to specify the item should <i>animate in</i> from below the visible area).
+         * <p>
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         */
+        public static final int FLAG_APPEARED_IN_PRE_LAYOUT
+                = ViewHolder.FLAG_APPEARED_IN_PRE_LAYOUT;
+
+        /**
+         * The set of flags that might be passed to
+         * {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         */
+        @IntDef(flag=true, value={
+                FLAG_CHANGED, FLAG_REMOVED, FLAG_MOVED, FLAG_INVALIDATED,
+                FLAG_APPEARED_IN_PRE_LAYOUT
+        })
+        @Retention(RetentionPolicy.SOURCE)
+        public @interface AdapterChanges {}
         private ItemAnimatorListener mListener = null;
         private ArrayList<ItemAnimatorFinishedListener> mFinishedListeners =
                 new ArrayList<ItemAnimatorFinishedListener>();
@@ -9689,8 +10395,6 @@ public void onChangeFinished(ViewHolder item) {
         private long mMoveDuration = 250;
         private long mChangeDuration = 250;
 
-        private boolean mSupportsChangeAnimations = true;
-
         /**
          * Gets the current duration for which all move animations will run.
          *
@@ -9763,35 +10467,6 @@ public void setChangeDuration(long changeDuration) {
             mChangeDuration = changeDuration;
         }
 
-        /**
-         * Returns whether this ItemAnimator supports animations of change events.
-         *
-         * @return true if change animations are supported, false otherwise
-         */
-        public boolean getSupportsChangeAnimations() {
-            return mSupportsChangeAnimations;
-        }
-
-        /**
-         * Sets whether this ItemAnimator supports animations of item change events.
-         * If you set this property to false, actions on the data set which change the
-         * contents of items will not be animated. What those animations are is left
-         * up to the discretion of the ItemAnimator subclass, in its
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} implementation.
-         * The value of this property is true by default.
-         *
-         * @see Adapter#notifyItemChanged(int)
-         * @see Adapter#notifyItemRangeChanged(int, int)
-         *
-         * @param supportsChangeAnimations true if change animations are supported by
-         * this ItemAnimator, false otherwise. If the property is false, the ItemAnimator
-         * will not receive a call to
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} when changes occur.
-         */
-        public void setSupportsChangeAnimations(boolean supportsChangeAnimations) {
-            mSupportsChangeAnimations = supportsChangeAnimations;
-        }
-
         /**
          * Internal only:
          * Sets the listener that must be called when the animator is finished
@@ -9805,244 +10480,379 @@ void setListener(ItemAnimatorListener listener) {
         }
 
         /**
-         * Called when there are pending animations waiting to be started. This state
-         * is governed by the return values from {@link #animateAdd(ViewHolder) animateAdd()},
-         * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()}, and
-         * {@link #animateRemove(ViewHolder) animateRemove()}, which inform the
-         * RecyclerView that the ItemAnimator wants to be called later to start the
-         * associated animations. runPendingAnimations() will be scheduled to be run
-         * on the next frame.
+         * Called by the RecyclerView before the layout begins. Item animator should record
+         * necessary information about the View before it is potentially rebound, moved or removed.
+         * <p>
+         * The data returned from this method will be passed to the related <code>animate**</code>
+         * methods.
+         * <p>
+         * Note that this method may be called after pre-layout phase if LayoutManager adds new
+         * Views to the layout in pre-layout pass.
+         * <p>
+         * The default implementation returns an {@link ItemHolderInfo} which holds the bounds of
+         * the View and the adapter change flags.
+         *
+         * @param state       The current State of RecyclerView which includes some useful data
+         *                    about the layout that will be calculated.
+         * @param viewHolder  The ViewHolder whose information should be recorded.
+         * @param changeFlags Additional information about what changes happened in the Adapter
+         *                    about the Item represented by this ViewHolder. For instance, if
+         *                    item is deleted from the adapter, {@link #FLAG_REMOVED} will be set.
+         * @param payloads    The payload list that was previously passed to
+         *                    {@link Adapter#notifyItemChanged(int, Object)} or
+         *                    {@link Adapter#notifyItemRangeChanged(int, int, Object)}.
+         *
+         * @return An ItemHolderInfo instance that preserves necessary information about the
+         * ViewHolder. This object will be passed back to related <code>animate**</code> methods
+         * after layout is complete.
+         *
+         * @see #recordPostLayoutInformation(State, ViewHolder)
+         * @see #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         */
+        public @NonNull ItemHolderInfo recordPreLayoutInformation(@NonNull State state,
+                @NonNull ViewHolder viewHolder, @AdapterChanges int changeFlags,
+                @NonNull List<Object> payloads) {
+            return obtainHolderInfo().setFrom(viewHolder);
+        }
+
+        /**
+         * Called by the RecyclerView after the layout is complete. Item animator should record
+         * necessary information about the View's final state.
+         * <p>
+         * The data returned from this method will be passed to the related <code>animate**</code>
+         * methods.
+         * <p>
+         * The default implementation returns an {@link ItemHolderInfo} which holds the bounds of
+         * the View.
+         *
+         * @param state      The current State of RecyclerView which includes some useful data about
+         *                   the layout that will be calculated.
+         * @param viewHolder The ViewHolder whose information should be recorded.
+         *
+         * @return An ItemHolderInfo that preserves necessary information about the ViewHolder.
+         * This object will be passed back to related <code>animate**</code> methods when
+         * RecyclerView decides how items should be animated.
+         *
+         * @see #recordPreLayoutInformation(State, ViewHolder, int, List)
+         * @see #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * @see #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
          */
-        abstract public void runPendingAnimations();
+        public @NonNull ItemHolderInfo recordPostLayoutInformation(@NonNull State state,
+                @NonNull ViewHolder viewHolder) {
+            return obtainHolderInfo().setFrom(viewHolder);
+        }
 
         /**
-         * Called when an item is removed from the RecyclerView. Implementors can choose
-         * whether and how to animate that change, but must always call
-         * {@link #dispatchRemoveFinished(ViewHolder)} when done, either
-         * immediately (if no animation will occur) or after the animation actually finishes.
-         * The return value indicates whether an animation has been set up and whether the
-         * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
-         * next opportunity. This mechanism allows ItemAnimator to set up individual animations
-         * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
-         * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
-         * {@link #animateRemove(ViewHolder) animateRemove()}, and
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
-         * then start the animations together in the later call to {@link #runPendingAnimations()}.
-         *
-         * <p>This method may also be called for disappearing items which continue to exist in the
-         * RecyclerView, but for which the system does not have enough information to animate
-         * them out of view. In that case, the default animation for removing items is run
-         * on those items as well.</p>
-         *
-         * @param holder The item that is being removed.
+         * Called by the RecyclerView when a ViewHolder has disappeared from the layout.
+         * <p>
+         * This means that the View was a child of the LayoutManager when layout started but has
+         * been removed by the LayoutManager. It might have been removed from the adapter or simply
+         * become invisible due to other factors. You can distinguish these two cases by checking
+         * the change flags that were passed to
+         * {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         * <p>
+         * Note that when a ViewHolder both changes and disappears in the same layout pass, the
+         * animation callback method which will be called by the RecyclerView depends on the
+         * ItemAnimator's decision whether to re-use the same ViewHolder or not, and also the
+         * LayoutManager's decision whether to layout the changed version of a disappearing
+         * ViewHolder or not. RecyclerView will call
+         * {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateChange} instead of {@code animateDisappearance} if and only if the ItemAnimator
+         * returns {@code false} from
+         * {@link #canReuseUpdatedViewHolder(ViewHolder) canReuseUpdatedViewHolder} and the
+         * LayoutManager lays out a new disappearing view that holds the updated information.
+         * Built-in LayoutManagers try to avoid laying out updated versions of disappearing views.
+         * <p>
+         * If LayoutManager supports predictive animations, it might provide a target disappear
+         * location for the View by laying it out in that location. When that happens,
+         * RecyclerView will call {@link #recordPostLayoutInformation(State, ViewHolder)} and the
+         * response of that call will be passed to this method as the <code>postLayoutInfo</code>.
+         * <p>
+         * ItemAnimator must call {@link #dispatchAnimationFinished(ViewHolder)} when the animation
+         * is complete (or instantly call {@link #dispatchAnimationFinished(ViewHolder)} if it
+         * decides not to animate the view).
+         *
+         * @param viewHolder    The ViewHolder which should be animated
+         * @param preLayoutInfo The information that was returned from
+         *                      {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         * @param postLayoutInfo The information that was returned from
+         *                       {@link #recordPostLayoutInformation(State, ViewHolder)}. Might be
+         *                       null if the LayoutManager did not layout the item.
+         *
          * @return true if a later call to {@link #runPendingAnimations()} is requested,
          * false otherwise.
          */
-        abstract public boolean animateRemove(ViewHolder holder);
+        public abstract boolean animateDisappearance(@NonNull ViewHolder viewHolder,
+                @NonNull ItemHolderInfo preLayoutInfo, @Nullable ItemHolderInfo postLayoutInfo);
 
         /**
-         * Called when an item is added to the RecyclerView. Implementors can choose
-         * whether and how to animate that change, but must always call
-         * {@link #dispatchAddFinished(ViewHolder)} when done, either
-         * immediately (if no animation will occur) or after the animation actually finishes.
-         * The return value indicates whether an animation has been set up and whether the
-         * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
-         * next opportunity. This mechanism allows ItemAnimator to set up individual animations
-         * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
-         * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
-         * {@link #animateRemove(ViewHolder) animateRemove()}, and
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
-         * then start the animations together in the later call to {@link #runPendingAnimations()}.
-         *
-         * <p>This method may also be called for appearing items which were already in the
-         * RecyclerView, but for which the system does not have enough information to animate
-         * them into view. In that case, the default animation for adding items is run
-         * on those items as well.</p>
+         * Called by the RecyclerView when a ViewHolder is added to the layout.
+         * <p>
+         * In detail, this means that the ViewHolder was <b>not</b> a child when the layout started
+         * but has  been added by the LayoutManager. It might be newly added to the adapter or
+         * simply become visible due to other factors.
+         * <p>
+         * ItemAnimator must call {@link #dispatchAnimationFinished(ViewHolder)} when the animation
+         * is complete (or instantly call {@link #dispatchAnimationFinished(ViewHolder)} if it
+         * decides not to animate the view).
+         *
+         * @param viewHolder     The ViewHolder which should be animated
+         * @param preLayoutInfo  The information that was returned from
+         *                       {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         *                       Might be null if Item was just added to the adapter or
+         *                       LayoutManager does not support predictive animations or it could
+         *                       not predict that this ViewHolder will become visible.
+         * @param postLayoutInfo The information that was returned from {@link
+         *                       #recordPreLayoutInformation(State, ViewHolder, int, List)}.
          *
-         * @param holder The item that is being added.
          * @return true if a later call to {@link #runPendingAnimations()} is requested,
          * false otherwise.
          */
-        abstract public boolean animateAdd(ViewHolder holder);
+        public abstract boolean animateAppearance(@NonNull ViewHolder viewHolder,
+                @Nullable ItemHolderInfo preLayoutInfo, @NonNull ItemHolderInfo postLayoutInfo);
 
         /**
-         * Called when an item is moved in the RecyclerView. Implementors can choose
-         * whether and how to animate that change, but must always call
-         * {@link #dispatchMoveFinished(ViewHolder)} when done, either
-         * immediately (if no animation will occur) or after the animation actually finishes.
-         * The return value indicates whether an animation has been set up and whether the
-         * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
-         * next opportunity. This mechanism allows ItemAnimator to set up individual animations
-         * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
-         * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
-         * {@link #animateRemove(ViewHolder) animateRemove()}, and
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
-         * then start the animations together in the later call to {@link #runPendingAnimations()}.
+         * Called by the RecyclerView when a ViewHolder is present in both before and after the
+         * layout and RecyclerView has not received a {@link Adapter#notifyItemChanged(int)} call
+         * for it or a {@link Adapter#notifyDataSetChanged()} call.
+         * <p>
+         * This ViewHolder still represents the same data that it was representing when the layout
+         * started but its position / size may be changed by the LayoutManager.
+         * <p>
+         * If the Item's layout position didn't change, RecyclerView still calls this method because
+         * it does not track this information (or does not necessarily know that an animation is
+         * not required). Your ItemAnimator should handle this case and if there is nothing to
+         * animate, it should call {@link #dispatchAnimationFinished(ViewHolder)} and return
+         * <code>false</code>.
+         * <p>
+         * ItemAnimator must call {@link #dispatchAnimationFinished(ViewHolder)} when the animation
+         * is complete (or instantly call {@link #dispatchAnimationFinished(ViewHolder)} if it
+         * decides not to animate the view).
+         *
+         * @param viewHolder     The ViewHolder which should be animated
+         * @param preLayoutInfo  The information that was returned from
+         *                       {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         * @param postLayoutInfo The information that was returned from {@link
+         *                       #recordPreLayoutInformation(State, ViewHolder, int, List)}.
          *
-         * @param holder The item that is being moved.
          * @return true if a later call to {@link #runPendingAnimations()} is requested,
          * false otherwise.
          */
-        abstract public boolean animateMove(ViewHolder holder, int fromX, int fromY,
-                int toX, int toY);
+        public abstract boolean animatePersistence(@NonNull ViewHolder viewHolder,
+                @NonNull ItemHolderInfo preLayoutInfo, @NonNull ItemHolderInfo postLayoutInfo);
 
         /**
-         * Called when an item is changed in the RecyclerView, as indicated by a call to
-         * {@link Adapter#notifyItemChanged(int)} or
-         * {@link Adapter#notifyItemRangeChanged(int, int)}.
+         * Called by the RecyclerView when an adapter item is present both before and after the
+         * layout and RecyclerView has received a {@link Adapter#notifyItemChanged(int)} call
+         * for it. This method may also be called when
+         * {@link Adapter#notifyDataSetChanged()} is called and adapter has stable ids so that
+         * RecyclerView could still rebind views to the same ViewHolders. If viewType changes when
+         * {@link Adapter#notifyDataSetChanged()} is called, this method <b>will not</b> be called,
+         * instead, {@link #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)} will be
+         * called for the new ViewHolder and the old one will be recycled.
          * <p>
-         * Implementers can choose whether and how to animate changes, but must always call
-         * {@link #dispatchChangeFinished(ViewHolder, boolean)} for each non-null ViewHolder,
-         * either immediately (if no animation will occur) or after the animation actually finishes.
-         * The return value indicates whether an animation has been set up and whether the
-         * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
-         * next opportunity. This mechanism allows ItemAnimator to set up individual animations
-         * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
-         * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
-         * {@link #animateRemove(ViewHolder) animateRemove()}, and
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
-         * then start the animations together in the later call to {@link #runPendingAnimations()}.
-         *
-         * @param oldHolder The original item that changed.
-         * @param newHolder The new item that was created with the changed content. Might be null
-         * @param fromLeft  Left of the old view holder
-         * @param fromTop   Top of the old view holder
-         * @param toLeft    Left of the new view holder
-         * @param toTop     Top of the new view holder
+         * If this method is called due to a {@link Adapter#notifyDataSetChanged()} call, there is
+         * a good possibility that item contents didn't really change but it is rebound from the
+         * adapter. {@link DefaultItemAnimator} will skip animating the View if its location on the
+         * screen didn't change and your animator should handle this case as well and avoid creating
+         * unnecessary animations.
+         * <p>
+         * When an item is updated, ItemAnimator has a chance to ask RecyclerView to keep the
+         * previous presentation of the item as-is and supply a new ViewHolder for the updated
+         * presentation (see: {@link #canReuseUpdatedViewHolder(ViewHolder, List)}.
+         * This is useful if you don't know the contents of the Item and would like
+         * to cross-fade the old and the new one ({@link DefaultItemAnimator} uses this technique).
+         * <p>
+         * When you are writing a custom item animator for your layout, it might be more performant
+         * and elegant to re-use the same ViewHolder and animate the content changes manually.
+         * <p>
+         * When {@link Adapter#notifyItemChanged(int)} is called, the Item's view type may change.
+         * If the Item's view type has changed or ItemAnimator returned <code>false</code> for
+         * this ViewHolder when {@link #canReuseUpdatedViewHolder(ViewHolder, List)} was called, the
+         * <code>oldHolder</code> and <code>newHolder</code> will be different ViewHolder instances
+         * which represent the same Item. In that case, only the new ViewHolder is visible
+         * to the LayoutManager but RecyclerView keeps old ViewHolder attached for animations.
+         * <p>
+         * ItemAnimator must call {@link #dispatchAnimationFinished(ViewHolder)} for each distinct
+         * ViewHolder when their animation is complete
+         * (or instantly call {@link #dispatchAnimationFinished(ViewHolder)} if it decides not to
+         * animate the view).
+         * <p>
+         *  If oldHolder and newHolder are the same instance, you should call
+         * {@link #dispatchAnimationFinished(ViewHolder)} <b>only once</b>.
+         * <p>
+         * Note that when a ViewHolder both changes and disappears in the same layout pass, the
+         * animation callback method which will be called by the RecyclerView depends on the
+         * ItemAnimator's decision whether to re-use the same ViewHolder or not, and also the
+         * LayoutManager's decision whether to layout the changed version of a disappearing
+         * ViewHolder or not. RecyclerView will call
+         * {@code animateChange} instead of
+         * {@link #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateDisappearance} if and only if the ItemAnimator returns {@code false} from
+         * {@link #canReuseUpdatedViewHolder(ViewHolder) canReuseUpdatedViewHolder} and the
+         * LayoutManager lays out a new disappearing view that holds the updated information.
+         * Built-in LayoutManagers try to avoid laying out updated versions of disappearing views.
+         *
+         * @param oldHolder     The ViewHolder before the layout is started, might be the same
+         *                      instance with newHolder.
+         * @param newHolder     The ViewHolder after the layout is finished, might be the same
+         *                      instance with oldHolder.
+         * @param preLayoutInfo  The information that was returned from
+         *                       {@link #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         * @param postLayoutInfo The information that was returned from {@link
+         *                       #recordPreLayoutInformation(State, ViewHolder, int, List)}.
+         *
          * @return true if a later call to {@link #runPendingAnimations()} is requested,
          * false otherwise.
          */
-        abstract public boolean animateChange(ViewHolder oldHolder,
-                ViewHolder newHolder, int fromLeft, int fromTop, int toLeft, int toTop);
-
+        public abstract boolean animateChange(@NonNull ViewHolder oldHolder,
+                @NonNull ViewHolder newHolder,
+                @NonNull ItemHolderInfo preLayoutInfo, @NonNull ItemHolderInfo postLayoutInfo);
 
-        /**
-         * Method to be called by subclasses when a remove animation is done.
-         *
-         * @param item The item which has been removed
-         */
-        public final void dispatchRemoveFinished(ViewHolder item) {
-            onRemoveFinished(item);
-            if (mListener != null) {
-                mListener.onRemoveFinished(item);
+        @AdapterChanges static int buildAdapterChangeFlagsForAnimations(ViewHolder viewHolder) {
+            int flags = viewHolder.mFlags & (FLAG_INVALIDATED | FLAG_REMOVED | FLAG_CHANGED);
+            if (viewHolder.isInvalid()) {
+                return FLAG_INVALIDATED;
             }
+            if ((flags & FLAG_INVALIDATED) == 0) {
+                final int oldPos = viewHolder.getOldPosition();
+                final int pos = viewHolder.getAdapterPosition();
+                if (oldPos != NO_POSITION && pos != NO_POSITION && oldPos != pos){
+                    flags |= FLAG_MOVED;
+                }
+            }
+            return flags;
         }
 
         /**
-         * Method to be called by subclasses when a move animation is done.
-         *
-         * @param item The item which has been moved
+         * Called when there are pending animations waiting to be started. This state
+         * is governed by the return values from
+         * {@link #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateAppearance()},
+         * {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateChange()}
+         * {@link #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animatePersistence()}, and
+         * {@link #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateDisappearance()}, which inform the RecyclerView that the ItemAnimator wants to be
+         * called later to start the associated animations. runPendingAnimations() will be scheduled
+         * to be run on the next frame.
          */
-        public final void dispatchMoveFinished(ViewHolder item) {
-            onMoveFinished(item);
-            if (mListener != null) {
-                mListener.onMoveFinished(item);
-            }
-        }
+        abstract public void runPendingAnimations();
 
         /**
-         * Method to be called by subclasses when an add animation is done.
+         * Method called when an animation on a view should be ended immediately.
+         * This could happen when other events, like scrolling, occur, so that
+         * animating views can be quickly put into their proper end locations.
+         * Implementations should ensure that any animations running on the item
+         * are canceled and affected properties are set to their end values.
+         * Also, {@link #dispatchAnimationFinished(ViewHolder)} should be called for each finished
+         * animation since the animations are effectively done when this method is called.
          *
-         * @param item The item which has been added
+         * @param item The item for which an animation should be stopped.
          */
-        public final void dispatchAddFinished(ViewHolder item) {
-            onAddFinished(item);
-            if (mListener != null) {
-                mListener.onAddFinished(item);
-            }
-        }
+        abstract public void endAnimation(ViewHolder item);
 
         /**
-         * Method to be called by subclasses when a change animation is done.
-         *
-         * @see #animateChange(ViewHolder, ViewHolder, int, int, int, int)
-         * @param item The item which has been changed (this method must be called for
-         * each non-null ViewHolder passed into
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
-         * @param oldItem true if this is the old item that was changed, false if
-         * it is the new item that replaced the old item.
+         * Method called when all item animations should be ended immediately.
+         * This could happen when other events, like scrolling, occur, so that
+         * animating views can be quickly put into their proper end locations.
+         * Implementations should ensure that any animations running on any items
+         * are canceled and affected properties are set to their end values.
+         * Also, {@link #dispatchAnimationFinished(ViewHolder)} should be called for each finished
+         * animation since the animations are effectively done when this method is called.
          */
-        public final void dispatchChangeFinished(ViewHolder item, boolean oldItem) {
-            onChangeFinished(item, oldItem);
-            if (mListener != null) {
-                mListener.onChangeFinished(item);
-            }
-        }
+        abstract public void endAnimations();
 
         /**
-         * Method to be called by subclasses when a remove animation is being started.
+         * Method which returns whether there are any item animations currently running.
+         * This method can be used to determine whether to delay other actions until
+         * animations end.
          *
-         * @param item The item being removed
+         * @return true if there are any item animations currently running, false otherwise.
          */
-        public final void dispatchRemoveStarting(ViewHolder item) {
-            onRemoveStarting(item);
-        }
+        abstract public boolean isRunning();
 
         /**
-         * Method to be called by subclasses when a move animation is being started.
+         * Method to be called by subclasses when an animation is finished.
+         * <p>
+         * For each call RecyclerView makes to
+         * {@link #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateAppearance()},
+         * {@link #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animatePersistence()}, or
+         * {@link #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateDisappearance()}, there
+         * should
+         * be a matching {@link #dispatchAnimationFinished(ViewHolder)} call by the subclass.
+         * <p>
+         * For {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateChange()}, sublcass should call this method for both the <code>oldHolder</code>
+         * and <code>newHolder</code>  (if they are not the same instance).
          *
-         * @param item The item being moved
+         * @param viewHolder The ViewHolder whose animation is finished.
+         * @see #onAnimationFinished(ViewHolder)
          */
-        public final void dispatchMoveStarting(ViewHolder item) {
-            onMoveStarting(item);
+        public final void dispatchAnimationFinished(ViewHolder viewHolder) {
+            onAnimationFinished(viewHolder);
+            if (mListener != null) {
+                mListener.onAnimationFinished(viewHolder);
+            }
         }
 
         /**
-         * Method to be called by subclasses when an add animation is being started.
+         * Called after {@link #dispatchAnimationFinished(ViewHolder)} is called by the
+         * ItemAniamtor.
          *
-         * @param item The item being added
+         * @param viewHolder The ViewHolder whose animation is finished. There might still be other
+         *                   animations running on this ViewHolder.
+         * @see #dispatchAnimationFinished(ViewHolder)
          */
-        public final void dispatchAddStarting(ViewHolder item) {
-            onAddStarting(item);
+        public void onAnimationFinished(ViewHolder viewHolder) {
         }
 
         /**
-         * Method to be called by subclasses when a change animation is being started.
+         * Method to be called by subclasses when an animation is started.
+         * <p>
+         * For each call RecyclerView makes to
+         * {@link #animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateAppearance()},
+         * {@link #animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animatePersistence()}, or
+         * {@link #animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateDisappearance()}, there should be a matching
+         * {@link #dispatchAnimationStarted(ViewHolder)} call by the subclass.
+         * <p>
+         * For {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)
+         * animateChange()}, sublcass should call this method for both the <code>oldHolder</code>
+         * and <code>newHolder</code> (if they are not the same instance).
+         * <p>
+         * If your ItemAnimator decides not to animate a ViewHolder, it should call
+         * {@link #dispatchAnimationFinished(ViewHolder)} <b>without</b> calling
+         * {@link #dispatchAnimationStarted(ViewHolder)}.
          *
-         * @param item The item which has been changed (this method must be called for
-         * each non-null ViewHolder passed into
-         * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
-         * @param oldItem true if this is the old item that was changed, false if
-         * it is the new item that replaced the old item.
+         * @param viewHolder The ViewHolder whose animation is starting.
+         * @see #onAnimationStarted(ViewHolder)
          */
-        public final void dispatchChangeStarting(ViewHolder item, boolean oldItem) {
-            onChangeStarting(item, oldItem);
+        public final void dispatchAnimationStarted(ViewHolder viewHolder) {
+            onAnimationStarted(viewHolder);
         }
 
         /**
-         * Method called when an animation on a view should be ended immediately.
-         * This could happen when other events, like scrolling, occur, so that
-         * animating views can be quickly put into their proper end locations.
-         * Implementations should ensure that any animations running on the item
-         * are canceled and affected properties are set to their end values.
-         * Also, appropriate dispatch methods (e.g., {@link #dispatchAddFinished(ViewHolder)}
-         * should be called since the animations are effectively done when this
-         * method is called.
+         * Called when a new animation is started on the given ViewHolder.
          *
-         * @param item The item for which an animation should be stopped.
-         */
-        abstract public void endAnimation(ViewHolder item);
-
-        /**
-         * Method called when all item animations should be ended immediately.
-         * This could happen when other events, like scrolling, occur, so that
-         * animating views can be quickly put into their proper end locations.
-         * Implementations should ensure that any animations running on any items
-         * are canceled and affected properties are set to their end values.
-         * Also, appropriate dispatch methods (e.g., {@link #dispatchAddFinished(ViewHolder)}
-         * should be called since the animations are effectively done when this
-         * method is called.
+         * @param viewHolder The ViewHolder which started animating. Note that the ViewHolder
+         *                   might already be animating and this might be another animation.
+         * @see #dispatchAnimationStarted(ViewHolder)
          */
-        abstract public void endAnimations();
+        public void onAnimationStarted(ViewHolder viewHolder) {
 
-        /**
-         * Method which returns whether there are any item animations currently running.
-         * This method can be used to determine whether to delay other actions until
-         * animations end.
-         *
-         * @return true if there are any item animations currently running, false otherwise.
-         */
-        abstract public boolean isRunning();
+        }
 
         /**
          * Like {@link #isRunning()}, this method returns whether there are any item
@@ -10073,15 +10883,58 @@ public final boolean isRunning(ItemAnimatorFinishedListener listener) {
         }
 
         /**
-         * The interface to be implemented by listeners to animation events from this
-         * ItemAnimator. This is used internally and is not intended for developers to
-         * create directly.
+         * When an item is changed, ItemAnimator can decide whether it wants to re-use
+         * the same ViewHolder for animations or RecyclerView should create a copy of the
+         * item and ItemAnimator will use both to run the animation (e.g. cross-fade).
+         * <p>
+         * Note that this method will only be called if the {@link ViewHolder} still has the same
+         * type ({@link Adapter#getItemViewType(int)}). Otherwise, ItemAnimator will always receive
+         * both {@link ViewHolder}s in the
+         * {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)} method.
+         * <p>
+         * If your application is using change payloads, you can override
+         * {@link #canReuseUpdatedViewHolder(ViewHolder, List)} to decide based on payloads.
+         *
+         * @param viewHolder The ViewHolder which represents the changed item's old content.
+         *
+         * @return True if RecyclerView should just rebind to the same ViewHolder or false if
+         *         RecyclerView should create a new ViewHolder and pass this ViewHolder to the
+         *         ItemAnimator to animate. Default implementation returns <code>true</code>.
+         *
+         * @see #canReuseUpdatedViewHolder(ViewHolder, List)
          */
-        interface ItemAnimatorListener {
-            void onRemoveFinished(ViewHolder item);
-            void onAddFinished(ViewHolder item);
-            void onMoveFinished(ViewHolder item);
-            void onChangeFinished(ViewHolder item);
+        public boolean canReuseUpdatedViewHolder(@NonNull ViewHolder viewHolder) {
+            return true;
+        }
+
+        /**
+         * When an item is changed, ItemAnimator can decide whether it wants to re-use
+         * the same ViewHolder for animations or RecyclerView should create a copy of the
+         * item and ItemAnimator will use both to run the animation (e.g. cross-fade).
+         * <p>
+         * Note that this method will only be called if the {@link ViewHolder} still has the same
+         * type ({@link Adapter#getItemViewType(int)}). Otherwise, ItemAnimator will always receive
+         * both {@link ViewHolder}s in the
+         * {@link #animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)} method.
+         *
+         * @param viewHolder The ViewHolder which represents the changed item's old content.
+         * @param payloads A non-null list of merged payloads that were sent with change
+         *                 notifications. Can be empty if the adapter is invalidated via
+         *                 {@link RecyclerView.Adapter#notifyDataSetChanged()}. The same list of
+         *                 payloads will be passed into
+         *                 {@link RecyclerView.Adapter#onBindViewHolder(ViewHolder, int, List)}
+         *                 method <b>if</b> this method returns <code>true</code>.
+         *
+         * @return True if RecyclerView should just rebind to the same ViewHolder or false if
+         *         RecyclerView should create a new ViewHolder and pass this ViewHolder to the
+         *         ItemAnimator to animate. Default implementation calls
+         *         {@link #canReuseUpdatedViewHolder(ViewHolder)}.
+         *
+         * @see #canReuseUpdatedViewHolder(ViewHolder)
+         */
+        public boolean canReuseUpdatedViewHolder(@NonNull ViewHolder viewHolder,
+                @NonNull List<Object> payloads) {
+            return canReuseUpdatedViewHolder(viewHolder);
         }
 
         /**
@@ -10097,116 +10950,112 @@ public final void dispatchAnimationsFinished() {
         }
 
         /**
-         * This interface is used to inform listeners when all pending or running animations
-         * in an ItemAnimator are finished. This can be used, for example, to delay an action
-         * in a data set until currently-running animations are complete.
+         * Returns a new {@link ItemHolderInfo} which will be used to store information about the
+         * ViewHolder. This information will later be passed into <code>animate**</code> methods.
+         * <p>
+         * You can override this method if you want to extend {@link ItemHolderInfo} and provide
+         * your own instances.
          *
-         * @see #isRunning(ItemAnimatorFinishedListener)
+         * @return A new {@link ItemHolderInfo}.
          */
-        public interface ItemAnimatorFinishedListener {
-            void onAnimationsFinished();
+        public ItemHolderInfo obtainHolderInfo() {
+            return new ItemHolderInfo();
         }
 
         /**
-         * Called when a remove animation is being started on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
+         * The interface to be implemented by listeners to animation events from this
+         * ItemAnimator. This is used internally and is not intended for developers to
+         * create directly.
          */
-        public void onRemoveStarting(ViewHolder item) {}
+        interface ItemAnimatorListener {
+            void onAnimationFinished(ViewHolder item);
+        }
 
         /**
-         * Called when a remove animation has ended on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
+         * This interface is used to inform listeners when all pending or running animations
+         * in an ItemAnimator are finished. This can be used, for example, to delay an action
+         * in a data set until currently-running animations are complete.
          *
-         * @param item The ViewHolder being animated.
+         * @see #isRunning(ItemAnimatorFinishedListener)
          */
-        public void onRemoveFinished(ViewHolder item) {}
+        public interface ItemAnimatorFinishedListener {
+            void onAnimationsFinished();
+        }
 
         /**
-         * Called when an add animation is being started on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
+         * A simple data structure that holds information about an item's bounds.
+         * This information is used in calculating item animations. Default implementation of
+         * {@link #recordPreLayoutInformation(RecyclerView.State, ViewHolder, int, List)} and
+         * {@link #recordPostLayoutInformation(RecyclerView.State, ViewHolder)} returns this data
+         * structure. You can extend this class if you would like to keep more information about
+         * the Views.
+         * <p>
+         * If you want to provide your own implementation butstill use `super` methods to record
+         * basic information, you can override {@link #obtainHolderInfo()} to provide your own
+         * instances.
          */
-        public void onAddStarting(ViewHolder item) {}
+        public static class ItemHolderInfo {
 
-        /**
-         * Called when an add animation has ended on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
-         */
-        public void onAddFinished(ViewHolder item) {}
+            /**
+             * The left edge of the View (excluding decorations)
+             */
+            public int left;
 
-        /**
-         * Called when a move animation is being started on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
-         */
-        public void onMoveStarting(ViewHolder item) {}
+            /**
+             * The top edge of the View (excluding decorations)
+             */
+            public int top;
 
-        /**
-         * Called when a move animation has ended on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
-         */
-        public void onMoveFinished(ViewHolder item) {}
+            /**
+             * The right edge of the View (excluding decorations)
+             */
+            public int right;
 
-        /**
-         * Called when a change animation is being started on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
-         * @param oldItem true if this is the old item that was changed, false if
-         * it is the new item that replaced the old item.
-         */
-        public void onChangeStarting(ViewHolder item, boolean oldItem) {}
+            /**
+             * The bottom edge of the View (excluding decorations)
+             */
+            public int bottom;
 
-        /**
-         * Called when a change animation has ended on the given ViewHolder.
-         * The default implementation does nothing. Subclasses may wish to override
-         * this method to handle any ViewHolder-specific operations linked to animation
-         * lifecycles.
-         *
-         * @param item The ViewHolder being animated.
-         * @param oldItem true if this is the old item that was changed, false if
-         * it is the new item that replaced the old item.
-         */
-        public void onChangeFinished(ViewHolder item, boolean oldItem) {}
+            /**
+             * The change flags that were passed to
+             * {@link #recordPreLayoutInformation(RecyclerView.State, ViewHolder, int, List)}.
+             */
+            @AdapterChanges
+            public int changeFlags;
 
-    }
+            public ItemHolderInfo() {
+            }
 
-    /**
-     * Internal data structure that holds information about an item's bounds.
-     * This information is used in calculating item animations.
-     */
-    private static class ItemHolderInfo {
-        ViewHolder holder;
-        int left, top, right, bottom;
+            /**
+             * Sets the {@link #left}, {@link #top}, {@link #right} and {@link #bottom} values from
+             * the given ViewHolder. Clears all {@link #changeFlags}.
+             *
+             * @param holder The ViewHolder whose bounds should be copied.
+             * @return This {@link ItemHolderInfo}
+             */
+            public ItemHolderInfo setFrom(RecyclerView.ViewHolder holder) {
+                return setFrom(holder, 0);
+            }
 
-        ItemHolderInfo(ViewHolder holder, int left, int top, int right, int bottom) {
-            this.holder = holder;
-            this.left = left;
-            this.top = top;
-            this.right = right;
-            this.bottom = bottom;
+            /**
+             * Sets the {@link #left}, {@link #top}, {@link #right} and {@link #bottom} values from
+             * the given ViewHolder and sets the {@link #changeFlags} to the given flags parameter.
+             *
+             * @param holder The ViewHolder whose bounds should be copied.
+             * @param flags  The adapter change flags that were passed into
+             *               {@link #recordPreLayoutInformation(RecyclerView.State, ViewHolder, int,
+             *               List)}.
+             * @return This {@link ItemHolderInfo}
+             */
+            public ItemHolderInfo setFrom(RecyclerView.ViewHolder holder,
+                    @AdapterChanges int flags) {
+                final View view = holder.itemView;
+                this.left = view.getLeft();
+                this.top = view.getTop();
+                this.right = view.getRight();
+                this.bottom = view.getBottom();
+                return this;
+            }
         }
     }
 
@@ -10227,7 +11076,7 @@ protected int getChildDrawingOrder(int childCount, int i) {
      * order of two views will not have any effect if their elevation values are different since
      * elevation overrides the result of this callback.
      */
-    public static interface ChildDrawingOrderCallback {
+    public interface ChildDrawingOrderCallback {
         /**
          * Returns the index of the child to draw for this iteration. Override this
          * if you want to change the drawing order of children. By default, it
@@ -10238,6 +11087,13 @@ protected int getChildDrawingOrder(int childCount, int i) {
          *
          * @see RecyclerView#setChildDrawingOrderCallback(RecyclerView.ChildDrawingOrderCallback)
          */
-        public int onGetChildDrawingOrder(int childCount, int i);
+        int onGetChildDrawingOrder(int childCount, int i);
+    }
+
+    private NestedScrollingChildHelper getScrollingChildHelper() {
+        if (mScrollingChildHelper == null) {
+            mScrollingChildHelper = new NestedScrollingChildHelper(this);
+        }
+        return mScrollingChildHelper;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerViewAccessibilityDelegate.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerViewAccessibilityDelegate.java
index 9ffd89f22..dc3b90194 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerViewAccessibilityDelegate.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/RecyclerViewAccessibilityDelegate.java
@@ -22,8 +22,6 @@
 import android.view.View;
 import android.view.accessibility.AccessibilityEvent;
 
-import org.telegram.messenger.support.widget.RecyclerView;
-
 /**
  * The AccessibilityDelegate used by RecyclerView.
  * <p>
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ScrollbarHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ScrollbarHelper.java
index 998252584..4dd6308db 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ScrollbarHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ScrollbarHelper.java
@@ -17,8 +17,6 @@
 
 import android.view.View;
 
-import org.telegram.messenger.support.widget.RecyclerView;
-
 /**
  * A helper class to do scroll offset calculations.
  */
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/SimpleItemAnimator.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/SimpleItemAnimator.java
new file mode 100644
index 000000000..2eb4cce5d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/SimpleItemAnimator.java
@@ -0,0 +1,442 @@
+package org.telegram.messenger.support.widget;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import org.telegram.messenger.support.widget.RecyclerView.Adapter;
+import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
+import org.telegram.messenger.support.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
+import android.util.Log;
+import android.view.View;
+
+import java.util.List;
+
+/**
+ * A wrapper class for ItemAnimator that records View bounds and decides whether it should run
+ * move, change, add or remove animations. This class also replicates the original ItemAnimator
+ * API.
+ * <p>
+ * It uses {@link ItemHolderInfo} to track the bounds information of the Views. If you would like
+ * to
+ * extend this class, you can override {@link #obtainHolderInfo()} method to provide your own info
+ * class that extends {@link ItemHolderInfo}.
+ */
+abstract public class SimpleItemAnimator extends RecyclerView.ItemAnimator {
+
+    private static final boolean DEBUG = false;
+
+    private static final String TAG = "SimpleItemAnimator";
+
+    boolean mSupportsChangeAnimations = true;
+
+    /**
+     * Returns whether this ItemAnimator supports animations of change events.
+     *
+     * @return true if change animations are supported, false otherwise
+     */
+    @SuppressWarnings("unused")
+    public boolean getSupportsChangeAnimations() {
+        return mSupportsChangeAnimations;
+    }
+
+    /**
+     * Sets whether this ItemAnimator supports animations of item change events.
+     * If you set this property to false, actions on the data set which change the
+     * contents of items will not be animated. What those animations do is left
+     * up to the discretion of the ItemAnimator subclass, in its
+     * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} implementation.
+     * The value of this property is true by default.
+     *
+     * @param supportsChangeAnimations true if change animations are supported by
+     *                                 this ItemAnimator, false otherwise. If the property is false,
+     *                                 the ItemAnimator
+     *                                 will not receive a call to
+     *                                 {@link #animateChange(ViewHolder, ViewHolder, int, int, int,
+     *                                 int)} when changes occur.
+     * @see Adapter#notifyItemChanged(int)
+     * @see Adapter#notifyItemRangeChanged(int, int)
+     */
+    public void setSupportsChangeAnimations(boolean supportsChangeAnimations) {
+        mSupportsChangeAnimations = supportsChangeAnimations;
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @return True if change animations are not supported or the ViewHolder is invalid,
+     * false otherwise.
+     *
+     * @see #setSupportsChangeAnimations(boolean)
+     */
+    @Override
+    public boolean canReuseUpdatedViewHolder(@NonNull RecyclerView.ViewHolder viewHolder) {
+        return !mSupportsChangeAnimations || viewHolder.isInvalid();
+    }
+
+    @Override
+    public boolean animateDisappearance(@NonNull ViewHolder viewHolder,
+            @NonNull ItemHolderInfo preLayoutInfo, @Nullable ItemHolderInfo postLayoutInfo) {
+        int oldLeft = preLayoutInfo.left;
+        int oldTop = preLayoutInfo.top;
+        View disappearingItemView = viewHolder.itemView;
+        int newLeft = postLayoutInfo == null ? disappearingItemView.getLeft() : postLayoutInfo.left;
+        int newTop = postLayoutInfo == null ? disappearingItemView.getTop() : postLayoutInfo.top;
+        if (!viewHolder.isRemoved() && (oldLeft != newLeft || oldTop != newTop)) {
+            disappearingItemView.layout(newLeft, newTop,
+                    newLeft + disappearingItemView.getWidth(),
+                    newTop + disappearingItemView.getHeight());
+            if (DEBUG) {
+                Log.d(TAG, "DISAPPEARING: " + viewHolder + " with view " + disappearingItemView);
+            }
+            return animateMove(viewHolder, oldLeft, oldTop, newLeft, newTop);
+        } else {
+            if (DEBUG) {
+                Log.d(TAG, "REMOVED: " + viewHolder + " with view " + disappearingItemView);
+            }
+            return animateRemove(viewHolder);
+        }
+    }
+
+    @Override
+    public boolean animateAppearance(@NonNull ViewHolder viewHolder,
+            @Nullable ItemHolderInfo preLayoutInfo, @NonNull ItemHolderInfo postLayoutInfo) {
+        if (preLayoutInfo != null && (preLayoutInfo.left != postLayoutInfo.left
+                || preLayoutInfo.top != postLayoutInfo.top)) {
+            // slide items in if before/after locations differ
+            if (DEBUG) {
+                Log.d(TAG, "APPEARING: " + viewHolder + " with view " + viewHolder);
+            }
+            return animateMove(viewHolder, preLayoutInfo.left, preLayoutInfo.top,
+                    postLayoutInfo.left, postLayoutInfo.top);
+        } else {
+            if (DEBUG) {
+                Log.d(TAG, "ADDED: " + viewHolder + " with view " + viewHolder);
+            }
+            return animateAdd(viewHolder);
+        }
+    }
+
+    @Override
+    public boolean animatePersistence(@NonNull ViewHolder viewHolder,
+            @NonNull ItemHolderInfo preInfo, @NonNull ItemHolderInfo postInfo) {
+        if (preInfo.left != postInfo.left || preInfo.top != postInfo.top) {
+            if (DEBUG) {
+                Log.d(TAG, "PERSISTENT: " + viewHolder +
+                        " with view " + viewHolder.itemView);
+            }
+            return animateMove(viewHolder,
+                    preInfo.left, preInfo.top, postInfo.left, postInfo.top);
+        }
+        dispatchMoveFinished(viewHolder);
+        return false;
+    }
+
+    @Override
+    public boolean animateChange(@NonNull ViewHolder oldHolder, @NonNull ViewHolder newHolder,
+            @NonNull ItemHolderInfo preInfo, @NonNull ItemHolderInfo postInfo) {
+        if (DEBUG) {
+            Log.d(TAG, "CHANGED: " + oldHolder + " with view " + oldHolder.itemView);
+        }
+        final int fromLeft = preInfo.left;
+        final int fromTop = preInfo.top;
+        final int toLeft, toTop;
+        if (newHolder.shouldIgnore()) {
+            toLeft = preInfo.left;
+            toTop = preInfo.top;
+        } else {
+            toLeft = postInfo.left;
+            toTop = postInfo.top;
+        }
+        return animateChange(oldHolder, newHolder, fromLeft, fromTop, toLeft, toTop);
+    }
+
+    /**
+     * Called when an item is removed from the RecyclerView. Implementors can choose
+     * whether and how to animate that change, but must always call
+     * {@link #dispatchRemoveFinished(ViewHolder)} when done, either
+     * immediately (if no animation will occur) or after the animation actually finishes.
+     * The return value indicates whether an animation has been set up and whether the
+     * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
+     * next opportunity. This mechanism allows ItemAnimator to set up individual animations
+     * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
+     * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
+     * {@link #animateRemove(ViewHolder) animateRemove()}, and
+     * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
+     * then start the animations together in the later call to {@link #runPendingAnimations()}.
+     *
+     * <p>This method may also be called for disappearing items which continue to exist in the
+     * RecyclerView, but for which the system does not have enough information to animate
+     * them out of view. In that case, the default animation for removing items is run
+     * on those items as well.</p>
+     *
+     * @param holder The item that is being removed.
+     * @return true if a later call to {@link #runPendingAnimations()} is requested,
+     * false otherwise.
+     */
+    abstract public boolean animateRemove(ViewHolder holder);
+
+    /**
+     * Called when an item is added to the RecyclerView. Implementors can choose
+     * whether and how to animate that change, but must always call
+     * {@link #dispatchAddFinished(ViewHolder)} when done, either
+     * immediately (if no animation will occur) or after the animation actually finishes.
+     * The return value indicates whether an animation has been set up and whether the
+     * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
+     * next opportunity. This mechanism allows ItemAnimator to set up individual animations
+     * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
+     * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
+     * {@link #animateRemove(ViewHolder) animateRemove()}, and
+     * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
+     * then start the animations together in the later call to {@link #runPendingAnimations()}.
+     *
+     * <p>This method may also be called for appearing items which were already in the
+     * RecyclerView, but for which the system does not have enough information to animate
+     * them into view. In that case, the default animation for adding items is run
+     * on those items as well.</p>
+     *
+     * @param holder The item that is being added.
+     * @return true if a later call to {@link #runPendingAnimations()} is requested,
+     * false otherwise.
+     */
+    abstract public boolean animateAdd(ViewHolder holder);
+
+    /**
+     * Called when an item is moved in the RecyclerView. Implementors can choose
+     * whether and how to animate that change, but must always call
+     * {@link #dispatchMoveFinished(ViewHolder)} when done, either
+     * immediately (if no animation will occur) or after the animation actually finishes.
+     * The return value indicates whether an animation has been set up and whether the
+     * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
+     * next opportunity. This mechanism allows ItemAnimator to set up individual animations
+     * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
+     * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
+     * {@link #animateRemove(ViewHolder) animateRemove()}, and
+     * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
+     * then start the animations together in the later call to {@link #runPendingAnimations()}.
+     *
+     * @param holder The item that is being moved.
+     * @return true if a later call to {@link #runPendingAnimations()} is requested,
+     * false otherwise.
+     */
+    abstract public boolean animateMove(ViewHolder holder, int fromX, int fromY,
+            int toX, int toY);
+
+    /**
+     * Called when an item is changed in the RecyclerView, as indicated by a call to
+     * {@link Adapter#notifyItemChanged(int)} or
+     * {@link Adapter#notifyItemRangeChanged(int, int)}.
+     * <p>
+     * Implementers can choose whether and how to animate changes, but must always call
+     * {@link #dispatchChangeFinished(ViewHolder, boolean)} for each non-null distinct ViewHolder,
+     * either immediately (if no animation will occur) or after the animation actually finishes.
+     * If the {@code oldHolder} is the same ViewHolder as the {@code newHolder}, you must call
+     * {@link #dispatchChangeFinished(ViewHolder, boolean)} once and only once. In that case, the
+     * second parameter of {@code dispatchChangeFinished} is ignored.
+     * <p>
+     * The return value indicates whether an animation has been set up and whether the
+     * ItemAnimator's {@link #runPendingAnimations()} method should be called at the
+     * next opportunity. This mechanism allows ItemAnimator to set up individual animations
+     * as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
+     * {@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
+     * {@link #animateRemove(ViewHolder) animateRemove()}, and
+     * {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
+     * then start the animations together in the later call to {@link #runPendingAnimations()}.
+     *
+     * @param oldHolder The original item that changed.
+     * @param newHolder The new item that was created with the changed content. Might be null
+     * @param fromLeft  Left of the old view holder
+     * @param fromTop   Top of the old view holder
+     * @param toLeft    Left of the new view holder
+     * @param toTop     Top of the new view holder
+     * @return true if a later call to {@link #runPendingAnimations()} is requested,
+     * false otherwise.
+     */
+    abstract public boolean animateChange(ViewHolder oldHolder,
+            ViewHolder newHolder, int fromLeft, int fromTop, int toLeft, int toTop);
+
+    /**
+     * Method to be called by subclasses when a remove animation is done.
+     *
+     * @param item The item which has been removed
+     * @see RecyclerView.ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo,
+     * ItemHolderInfo)
+     */
+    public final void dispatchRemoveFinished(ViewHolder item) {
+        onRemoveFinished(item);
+        dispatchAnimationFinished(item);
+    }
+
+    /**
+     * Method to be called by subclasses when a move animation is done.
+     *
+     * @param item The item which has been moved
+     * @see RecyclerView.ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo,
+     * ItemHolderInfo)
+     * @see RecyclerView.ItemAnimator#animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+     * @see RecyclerView.ItemAnimator#animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)
+     */
+    public final void dispatchMoveFinished(ViewHolder item) {
+        onMoveFinished(item);
+        dispatchAnimationFinished(item);
+    }
+
+    /**
+     * Method to be called by subclasses when an add animation is done.
+     *
+     * @param item The item which has been added
+     */
+    public final void dispatchAddFinished(ViewHolder item) {
+        onAddFinished(item);
+        dispatchAnimationFinished(item);
+    }
+
+    /**
+     * Method to be called by subclasses when a change animation is done.
+     *
+     * @param item    The item which has been changed (this method must be called for
+     *                each non-null ViewHolder passed into
+     *                {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
+     * @param oldItem true if this is the old item that was changed, false if
+     *                it is the new item that replaced the old item.
+     * @see #animateChange(ViewHolder, ViewHolder, int, int, int, int)
+     */
+    public final void dispatchChangeFinished(ViewHolder item, boolean oldItem) {
+        onChangeFinished(item, oldItem);
+        dispatchAnimationFinished(item);
+    }
+
+    /**
+     * Method to be called by subclasses when a remove animation is being started.
+     *
+     * @param item The item being removed
+     */
+    public final void dispatchRemoveStarting(ViewHolder item) {
+        onRemoveStarting(item);
+    }
+
+    /**
+     * Method to be called by subclasses when a move animation is being started.
+     *
+     * @param item The item being moved
+     */
+    public final void dispatchMoveStarting(ViewHolder item) {
+        onMoveStarting(item);
+    }
+
+    /**
+     * Method to be called by subclasses when an add animation is being started.
+     *
+     * @param item The item being added
+     */
+    public final void dispatchAddStarting(ViewHolder item) {
+        onAddStarting(item);
+    }
+
+    /**
+     * Method to be called by subclasses when a change animation is being started.
+     *
+     * @param item    The item which has been changed (this method must be called for
+     *                each non-null ViewHolder passed into
+     *                {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
+     * @param oldItem true if this is the old item that was changed, false if
+     *                it is the new item that replaced the old item.
+     */
+    public final void dispatchChangeStarting(ViewHolder item, boolean oldItem) {
+        onChangeStarting(item, oldItem);
+    }
+
+    /**
+     * Called when a remove animation is being started on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    @SuppressWarnings("UnusedParameters")
+    public void onRemoveStarting(ViewHolder item) {
+    }
+
+    /**
+     * Called when a remove animation has ended on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    public void onRemoveFinished(ViewHolder item) {
+    }
+
+    /**
+     * Called when an add animation is being started on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    @SuppressWarnings("UnusedParameters")
+    public void onAddStarting(ViewHolder item) {
+    }
+
+    /**
+     * Called when an add animation has ended on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    public void onAddFinished(ViewHolder item) {
+    }
+
+    /**
+     * Called when a move animation is being started on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    @SuppressWarnings("UnusedParameters")
+    public void onMoveStarting(ViewHolder item) {
+    }
+
+    /**
+     * Called when a move animation has ended on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item The ViewHolder being animated.
+     */
+    public void onMoveFinished(ViewHolder item) {
+    }
+
+    /**
+     * Called when a change animation is being started on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item    The ViewHolder being animated.
+     * @param oldItem true if this is the old item that was changed, false if
+     *                it is the new item that replaced the old item.
+     */
+    @SuppressWarnings("UnusedParameters")
+    public void onChangeStarting(ViewHolder item, boolean oldItem) {
+    }
+
+    /**
+     * Called when a change animation has ended on the given ViewHolder.
+     * The default implementation does nothing. Subclasses may wish to override
+     * this method to handle any ViewHolder-specific operations linked to animation
+     * lifecycles.
+     *
+     * @param item    The ViewHolder being animated.
+     * @param oldItem true if this is the old item that was changed, false if
+     *                it is the new item that replaced the old item.
+     */
+    public void onChangeFinished(ViewHolder item, boolean oldItem) {
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
index 59e7f59f5..f93af4fd8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/StaggeredGridLayoutManager.java
@@ -16,11 +16,19 @@
 
 package org.telegram.messenger.support.widget;
 
+import static org.telegram.messenger.support.widget.LayoutState.ITEM_DIRECTION_HEAD;
+import static org.telegram.messenger.support.widget.LayoutState.ITEM_DIRECTION_TAIL;
+import static org.telegram.messenger.support.widget.LayoutState.LAYOUT_END;
+import static org.telegram.messenger.support.widget.LayoutState.LAYOUT_START;
+import static org.telegram.messenger.support.widget.RecyclerView.NO_POSITION;
+
 import android.content.Context;
 import android.graphics.PointF;
 import android.graphics.Rect;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.accessibility.AccessibilityEventCompat;
 import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
@@ -31,24 +39,11 @@
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
 
-import org.telegram.messenger.support.widget.AdapterHelper;
-import org.telegram.messenger.support.widget.LayoutState;
-import org.telegram.messenger.support.widget.LinearSmoothScroller;
-import org.telegram.messenger.support.widget.OrientationHelper;
-import org.telegram.messenger.support.widget.RecyclerView;
-import org.telegram.messenger.support.widget.ScrollbarHelper;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
 import java.util.List;
 
-import static org.telegram.messenger.support.widget.LayoutState.LAYOUT_START;
-import static org.telegram.messenger.support.widget.LayoutState.LAYOUT_END;
-import static org.telegram.messenger.support.widget.LayoutState.ITEM_DIRECTION_HEAD;
-import static org.telegram.messenger.support.widget.LayoutState.ITEM_DIRECTION_TAIL;
-import static org.telegram.messenger.support.widget.RecyclerView.NO_POSITION;
-
 /**
  * A LayoutManager that lays out children in a staggered grid formation.
  * It supports horizontal & vertical layout as well as an ability to layout children in reverse.
@@ -72,6 +67,7 @@
      */
     public static final int GAP_HANDLING_NONE = 0;
 
+    @SuppressWarnings("unused")
     @Deprecated
     public static final int GAP_HANDLING_LAZY = 1;
 
@@ -97,6 +93,12 @@
     public static final int GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS = 2;
 
     private static final int INVALID_OFFSET = Integer.MIN_VALUE;
+    /**
+     * While trying to find next view to focus, LayoutManager will not try to scroll more
+     * than this factor times the total space of the list. If layout is vertical, total space is the
+     * height minus padding, if layout is horizontal, total space is the width minus padding.
+     */
+    private static final float MAX_SCROLL_FACTOR = 1 / 3f;
 
     /**
      * Number of spans
@@ -109,7 +111,9 @@
      * Primary orientation is the layout's orientation, secondary orientation is the orientation
      * for spans. Having both makes code much cleaner for calculations.
      */
+    @NonNull
     OrientationHelper mPrimaryOrientation;
+    @NonNull
     OrientationHelper mSecondaryOrientation;
 
     private int mOrientation;
@@ -119,7 +123,8 @@
      */
     private int mSizePerSpan;
 
-    private LayoutState mLayoutState;
+    @NonNull
+    private final LayoutState mLayoutState;
 
     private boolean mReverseLayout = false;
 
@@ -175,7 +180,7 @@
     /**
      * Re-used measurement specs. updated by onLayout.
      */
-    private int mFullSizeSpec, mWidthSpec, mHeightSpec;
+    private int mFullSizeSpec;
 
     /**
      * Re-used rectangle to get child decor offsets.
@@ -208,6 +213,22 @@ public void run() {
         }
     };
 
+    /**
+     * Constructor used when layout manager is set in XML by RecyclerView attribute
+     * "layoutManager". Defaults to single column and vertical.
+     */
+    @SuppressWarnings("unused")
+    public StaggeredGridLayoutManager(Context context, AttributeSet attrs, int defStyleAttr,
+            int defStyleRes) {
+        Properties properties = getProperties(context, attrs, defStyleAttr, defStyleRes);
+        setOrientation(properties.orientation);
+        setSpanCount(properties.spanCount);
+        setReverseLayout(properties.reverseLayout);
+        setAutoMeasureEnabled(mGapStrategy != GAP_HANDLING_NONE);
+        mLayoutState = new LayoutState();
+        createOrientationHelpers();
+    }
+
     /**
      * Creates a StaggeredGridLayoutManager with given parameters.
      *
@@ -218,6 +239,15 @@ public void run() {
     public StaggeredGridLayoutManager(int spanCount, int orientation) {
         mOrientation = orientation;
         setSpanCount(spanCount);
+        setAutoMeasureEnabled(mGapStrategy != GAP_HANDLING_NONE);
+        mLayoutState = new LayoutState();
+        createOrientationHelpers();
+    }
+
+    private void createOrientationHelpers() {
+        mPrimaryOrientation = OrientationHelper.createOrientationHelper(this, mOrientation);
+        mSecondaryOrientation = OrientationHelper
+                .createOrientationHelper(this, 1 - mOrientation);
     }
 
     /**
@@ -358,10 +388,16 @@ View hasGapsToFix() {
     private boolean checkSpanForGap(Span span) {
         if (mShouldReverseLayout) {
             if (span.getEndLine() < mPrimaryOrientation.getEndAfterPadding()) {
-                return true;
+                // if it is full span, it is OK
+                final View endView = span.mViews.get(span.mViews.size() - 1);
+                final LayoutParams lp = span.getLayoutParams(endView);
+                return !lp.mFullSpan;
             }
         } else if (span.getStartLine() > mPrimaryOrientation.getStartAfterPadding()) {
-            return true;
+            // if it is full span, it is OK
+            final View startView = span.mViews.get(0);
+            final LayoutParams lp = span.getLayoutParams(startView);
+            return !lp.mFullSpan;
         }
         return false;
     }
@@ -404,12 +440,9 @@ public void setOrientation(int orientation) {
             return;
         }
         mOrientation = orientation;
-        if (mPrimaryOrientation != null && mSecondaryOrientation != null) {
-            // swap
-            OrientationHelper tmp = mPrimaryOrientation;
-            mPrimaryOrientation = mSecondaryOrientation;
-            mSecondaryOrientation = tmp;
-        }
+        OrientationHelper tmp = mPrimaryOrientation;
+        mPrimaryOrientation = mSecondaryOrientation;
+        mSecondaryOrientation = tmp;
         requestLayout();
     }
 
@@ -473,6 +506,7 @@ public void setGapStrategy(int gapStrategy) {
                     + "or GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS");
         }
         mGapStrategy = gapStrategy;
+        setAutoMeasureEnabled(mGapStrategy != GAP_HANDLING_NONE);
         requestLayout();
     }
 
@@ -503,15 +537,6 @@ public void invalidateSpanAssignments() {
         requestLayout();
     }
 
-    private void ensureOrientationHelper() {
-        if (mPrimaryOrientation == null) {
-            mPrimaryOrientation = OrientationHelper.createOrientationHelper(this, mOrientation);
-            mSecondaryOrientation = OrientationHelper
-                    .createOrientationHelper(this, 1 - mOrientation);
-            mLayoutState = new LayoutState();
-        }
-    }
-
     /**
      * Calculates the views' layout order. (e.g. from end to start or start to end)
      * RTL layout support is applied automatically. So if layout is RTL and
@@ -541,9 +566,35 @@ boolean isLayoutRTL() {
     public boolean getReverseLayout() {
         return mReverseLayout;
     }
+
+    @Override
+    public void setMeasuredDimension(Rect childrenBounds, int wSpec, int hSpec) {
+        // we don't like it to wrap content in our non-scroll direction.
+        final int width, height;
+        final int horizontalPadding = getPaddingLeft() + getPaddingRight();
+        final int verticalPadding = getPaddingTop() + getPaddingBottom();
+        if (mOrientation == VERTICAL) {
+            final int usedHeight = childrenBounds.height() + verticalPadding;
+            height = chooseSize(hSpec, usedHeight, getMinimumHeight());
+            width = chooseSize(wSpec, mSizePerSpan * mSpanCount + horizontalPadding,
+                    getMinimumWidth());
+        } else {
+            final int usedWidth = childrenBounds.width() + horizontalPadding;
+            width = chooseSize(wSpec, usedWidth, getMinimumWidth());
+            height = chooseSize(hSpec, mSizePerSpan * mSpanCount + verticalPadding,
+                    getMinimumHeight());
+        }
+        setMeasuredDimension(width, height);
+    }
+
     @Override
     public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
-        ensureOrientationHelper();
+        onLayoutChildren(recycler, state, true);
+    }
+
+
+    private void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state,
+            boolean shouldCheckForGaps) {
         final AnchorInfo anchorInfo = mAnchorInfo;
         anchorInfo.reset();
 
@@ -588,8 +639,9 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
             }
         }
         detachAndScrapAttachedViews(recycler);
+        mLayoutState.mRecycle = false;
         mLaidOutInvalidFullSpan = false;
-        updateMeasureSpecs();
+        updateMeasureSpecs(mSecondaryOrientation.getTotalSpace());
         updateLayoutState(anchorInfo.mPosition, state);
         if (anchorInfo.mLayoutFromEnd) {
             // Layout start.
@@ -609,6 +661,8 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
             fill(recycler, mLayoutState, state);
         }
 
+        repositionToWrapContentIfNecessary();
+
         if (getChildCount() > 0) {
             if (mShouldReverseLayout) {
                 fixEndGap(recycler, state, true);
@@ -618,14 +672,16 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
                 fixEndGap(recycler, state, false);
             }
         }
-
-        if (!state.isPreLayout()) {
+        boolean hasGaps = false;
+        if (shouldCheckForGaps && !state.isPreLayout()) {
             final boolean needToCheckForGaps = mGapStrategy != GAP_HANDLING_NONE
                     && getChildCount() > 0
                     && (mLaidOutInvalidFullSpan || hasGapsToFix() != null);
             if (needToCheckForGaps) {
                 removeCallbacks(mCheckForGapsRunnable);
-                postOnAnimation(mCheckForGapsRunnable);
+                if (checkForGaps()) {
+                    hasGaps = true;
+                }
             }
             mPendingScrollPosition = NO_POSITION;
             mPendingScrollPositionOffset = INVALID_OFFSET;
@@ -633,6 +689,58 @@ public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State
         mLastLayoutFromEnd = anchorInfo.mLayoutFromEnd;
         mLastLayoutRTL = isLayoutRTL();
         mPendingSavedState = null; // we don't need this anymore
+        if (hasGaps) {
+            onLayoutChildren(recycler, state, false);
+        }
+    }
+
+    private void repositionToWrapContentIfNecessary() {
+        if (mSecondaryOrientation.getMode() == View.MeasureSpec.EXACTLY) {
+            return; // nothing to do
+        }
+        float maxSize = 0;
+        final int childCount = getChildCount();
+        for (int i = 0; i < childCount; i ++) {
+            View child = getChildAt(i);
+            float size = mSecondaryOrientation.getDecoratedMeasurement(child);
+            if (size < maxSize) {
+                continue;
+            }
+            LayoutParams layoutParams = (LayoutParams) child.getLayoutParams();
+            if (layoutParams.isFullSpan()) {
+                size = 1f * size / mSpanCount;
+            }
+            maxSize = Math.max(maxSize, size);
+        }
+        int before = mSizePerSpan;
+        int desired = Math.round(maxSize * mSpanCount);
+        if (mSecondaryOrientation.getMode() == View.MeasureSpec.AT_MOST) {
+            desired = Math.min(desired, mSecondaryOrientation.getTotalSpace());
+        }
+        updateMeasureSpecs(desired);
+        if (mSizePerSpan == before) {
+            return; // nothing has changed
+        }
+        for (int i = 0; i < childCount; i ++) {
+            View child = getChildAt(i);
+            final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+            if (lp.mFullSpan) {
+                continue;
+            }
+            if (isLayoutRTL() && mOrientation == VERTICAL) {
+                int newOffset = -(mSpanCount - 1 - lp.mSpan.mIndex) * mSizePerSpan;
+                int prevOffset = -(mSpanCount - 1 - lp.mSpan.mIndex) * before;
+                child.offsetLeftAndRight(newOffset - prevOffset);
+            } else {
+                int newOffset = lp.mSpan.mIndex * mSizePerSpan;
+                int prevOffset = lp.mSpan.mIndex * before;
+                if (mOrientation == VERTICAL) {
+                    child.offsetLeftAndRight(newOffset - prevOffset);
+                } else {
+                    child.offsetTopAndBottom(newOffset - prevOffset);
+                }
+            }
+        }
     }
 
     private void applyPendingSavedState(AnchorInfo anchorInfo) {
@@ -780,17 +888,11 @@ boolean updateAnchorFromPendingData(RecyclerView.State state, AnchorInfo anchorI
         return true;
     }
 
-    void updateMeasureSpecs() {
-        mSizePerSpan = mSecondaryOrientation.getTotalSpace() / mSpanCount;
+    void updateMeasureSpecs(int totalSpace) {
+        mSizePerSpan = totalSpace / mSpanCount;
+        //noinspection ResourceType
         mFullSizeSpec = View.MeasureSpec.makeMeasureSpec(
-                mSecondaryOrientation.getTotalSpace(), View.MeasureSpec.EXACTLY);
-        if (mOrientation == VERTICAL) {
-            mWidthSpec = View.MeasureSpec.makeMeasureSpec(mSizePerSpan, View.MeasureSpec.EXACTLY);
-            mHeightSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
-        } else {
-            mHeightSpec = View.MeasureSpec.makeMeasureSpec(mSizePerSpan, View.MeasureSpec.EXACTLY);
-            mWidthSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
-        }
+                totalSpace, mSecondaryOrientation.getMode());
     }
 
     @Override
@@ -935,7 +1037,6 @@ private int computeScrollOffset(RecyclerView.State state) {
         if (getChildCount() == 0) {
             return 0;
         }
-        ensureOrientationHelper();
         return ScrollbarHelper.computeScrollOffset(state, mPrimaryOrientation,
                 findFirstVisibleItemClosestToStart(!mSmoothScrollbarEnabled, true)
                 , findFirstVisibleItemClosestToEnd(!mSmoothScrollbarEnabled, true),
@@ -956,7 +1057,6 @@ private int computeScrollExtent(RecyclerView.State state) {
         if (getChildCount() == 0) {
             return 0;
         }
-        ensureOrientationHelper();
         return ScrollbarHelper.computeScrollExtent(state, mPrimaryOrientation,
                 findFirstVisibleItemClosestToStart(!mSmoothScrollbarEnabled, true)
                 , findFirstVisibleItemClosestToEnd(!mSmoothScrollbarEnabled, true),
@@ -977,7 +1077,6 @@ private int computeScrollRange(RecyclerView.State state) {
         if (getChildCount() == 0) {
             return 0;
         }
-        ensureOrientationHelper();
         return ScrollbarHelper.computeScrollRange(state, mPrimaryOrientation,
                 findFirstVisibleItemClosestToStart(!mSmoothScrollbarEnabled, true)
                 , findFirstVisibleItemClosestToEnd(!mSmoothScrollbarEnabled, true),
@@ -989,43 +1088,48 @@ public int computeVerticalScrollRange(RecyclerView.State state) {
         return computeScrollRange(state);
     }
 
-    private void measureChildWithDecorationsAndMargin(View child, LayoutParams lp) {
+    private void measureChildWithDecorationsAndMargin(View child, LayoutParams lp,
+            boolean alreadyMeasured) {
         if (lp.mFullSpan) {
             if (mOrientation == VERTICAL) {
                 measureChildWithDecorationsAndMargin(child, mFullSizeSpec,
-                        getSpecForDimension(lp.height, mHeightSpec));
+                        getChildMeasureSpec(getHeight(), getHeightMode(), 0, lp.height, true),
+                        alreadyMeasured);
             } else {
                 measureChildWithDecorationsAndMargin(child,
-                        getSpecForDimension(lp.width, mWidthSpec), mFullSizeSpec);
+                        getChildMeasureSpec(getWidth(), getWidthMode(), 0, lp.width, true),
+                        mFullSizeSpec, alreadyMeasured);
             }
         } else {
             if (mOrientation == VERTICAL) {
-                measureChildWithDecorationsAndMargin(child, mWidthSpec,
-                        getSpecForDimension(lp.height, mHeightSpec));
+                measureChildWithDecorationsAndMargin(child,
+                        getChildMeasureSpec(mSizePerSpan, getWidthMode(), 0, lp.width, false),
+                        getChildMeasureSpec(getHeight(), getHeightMode(), 0, lp.height, true),
+                        alreadyMeasured);
             } else {
                 measureChildWithDecorationsAndMargin(child,
-                        getSpecForDimension(lp.width, mWidthSpec), mHeightSpec);
+                        getChildMeasureSpec(getWidth(), getWidthMode(), 0, lp.width, true),
+                        getChildMeasureSpec(mSizePerSpan, getHeightMode(), 0, lp.height, false),
+                        alreadyMeasured);
             }
         }
     }
 
-    private int getSpecForDimension(int dim, int defaultSpec) {
-        if (dim < 0) {
-            return defaultSpec;
-        } else {
-            return View.MeasureSpec.makeMeasureSpec(dim, View.MeasureSpec.EXACTLY);
-        }
-    }
-
     private void measureChildWithDecorationsAndMargin(View child, int widthSpec,
-            int heightSpec) {
+            int heightSpec, boolean alreadyMeasured) {
         calculateItemDecorationsForChild(child, mTmpRect);
         LayoutParams lp = (LayoutParams) child.getLayoutParams();
         widthSpec = updateSpecWithExtra(widthSpec, lp.leftMargin + mTmpRect.left,
                 lp.rightMargin + mTmpRect.right);
         heightSpec = updateSpecWithExtra(heightSpec, lp.topMargin + mTmpRect.top,
                 lp.bottomMargin + mTmpRect.bottom);
-        child.measure(widthSpec, heightSpec);
+        final boolean measure = alreadyMeasured
+                ? shouldReMeasureChild(child, widthSpec, heightSpec, lp)
+                : shouldMeasureChild(child, widthSpec, heightSpec, lp);
+        if (measure) {
+            child.measure(widthSpec, heightSpec);
+        }
+
     }
 
     private int updateSpecWithExtra(int spec, int startInset, int endInset) {
@@ -1035,7 +1139,7 @@ private int updateSpecWithExtra(int spec, int startInset, int endInset) {
         final int mode = View.MeasureSpec.getMode(spec);
         if (mode == View.MeasureSpec.AT_MOST || mode == View.MeasureSpec.EXACTLY) {
             return View.MeasureSpec.makeMeasureSpec(
-                    View.MeasureSpec.getSize(spec) - startInset - endInset, mode);
+                    Math.max(0, View.MeasureSpec.getSize(spec) - startInset - endInset), mode);
         }
         return spec;
     }
@@ -1069,7 +1173,6 @@ public Parcelable onSaveInstanceState() {
         }
 
         if (getChildCount() > 0) {
-            ensureOrientationHelper();
             state.mAnchorPosition = mLastLayoutFromEnd ? getLastChildPosition()
                     : getFirstChildPosition();
             state.mVisibleAnchorPosition = findFirstVisibleItemPositionInt();
@@ -1182,7 +1285,6 @@ public int getColumnCountForAccessibility(RecyclerView.Recycler recycler,
      * children order.
      */
     View findFirstVisibleItemClosestToStart(boolean fullyVisible, boolean acceptPartiallyVisible) {
-        ensureOrientationHelper();
         final int boundsStart = mPrimaryOrientation.getStartAfterPadding();
         final int boundsEnd = mPrimaryOrientation.getEndAfterPadding();
         final int limit = getChildCount();
@@ -1213,7 +1315,6 @@ View findFirstVisibleItemClosestToStart(boolean fullyVisible, boolean acceptPart
      * children order.
      */
     View findFirstVisibleItemClosestToEnd(boolean fullyVisible, boolean acceptPartiallyVisible) {
-        ensureOrientationHelper();
         final int boundsStart = mPrimaryOrientation.getStartAfterPadding();
         final int boundsEnd = mPrimaryOrientation.getEndAfterPadding();
         View partiallyVisible = null;
@@ -1238,7 +1339,10 @@ View findFirstVisibleItemClosestToEnd(boolean fullyVisible, boolean acceptPartia
 
     private void fixEndGap(RecyclerView.Recycler recycler, RecyclerView.State state,
             boolean canOffsetChildren) {
-        final int maxEndLine = getMaxEnd(mPrimaryOrientation.getEndAfterPadding());
+        final int maxEndLine = getMaxEnd(Integer.MIN_VALUE);
+        if (maxEndLine == Integer.MIN_VALUE) {
+            return;
+        }
         int gap = mPrimaryOrientation.getEndAfterPadding() - maxEndLine;
         int fixOffset;
         if (gap > 0) {
@@ -1254,7 +1358,10 @@ private void fixEndGap(RecyclerView.Recycler recycler, RecyclerView.State state,
 
     private void fixStartGap(RecyclerView.Recycler recycler, RecyclerView.State state,
             boolean canOffsetChildren) {
-        final int minStartLine = getMinStart(mPrimaryOrientation.getStartAfterPadding());
+        final int minStartLine = getMinStart(Integer.MAX_VALUE);
+        if (minStartLine == Integer.MAX_VALUE) {
+            return;
+        }
         int gap = minStartLine - mPrimaryOrientation.getStartAfterPadding();
         int fixOffset;
         if (gap > 0) {
@@ -1293,6 +1400,10 @@ private void updateLayoutState(int anchorPosition, RecyclerView.State state) {
             mLayoutState.mEndLine = mPrimaryOrientation.getEnd() + endExtra;
             mLayoutState.mStartLine = -startExtra;
         }
+        mLayoutState.mStopInFocusable = false;
+        mLayoutState.mRecycle = true;
+        mLayoutState.mInfinite = mPrimaryOrientation.getMode() == View.MeasureSpec.UNSPECIFIED &&
+                mPrimaryOrientation.getEnd() == 0;
     }
 
     private void setLayoutStateDirection(int direction) {
@@ -1397,10 +1508,18 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
         final int targetLine;
 
         // Line of the furthest row.
-        if (layoutState.mLayoutDirection == LAYOUT_END) {
-            targetLine = layoutState.mEndLine + layoutState.mAvailable;
-        } else { // LAYOUT_START
-            targetLine = layoutState.mStartLine - layoutState.mAvailable;
+        if (mLayoutState.mInfinite) {
+            if (layoutState.mLayoutDirection == LAYOUT_END) {
+                targetLine = Integer.MAX_VALUE;
+            } else { // LAYOUT_START
+                targetLine = Integer.MIN_VALUE;
+            }
+        } else {
+            if (layoutState.mLayoutDirection == LAYOUT_END) {
+                targetLine = layoutState.mEndLine + layoutState.mAvailable;
+            } else { // LAYOUT_START
+                targetLine = layoutState.mStartLine - layoutState.mAvailable;
+            }
         }
 
         updateAllRemainingSpans(layoutState.mLayoutDirection, targetLine);
@@ -1414,7 +1533,8 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
                 ? mPrimaryOrientation.getEndAfterPadding()
                 : mPrimaryOrientation.getStartAfterPadding();
         boolean added = false;
-        while (layoutState.hasMore(state) && !mRemainingSpans.isEmpty()) {
+        while (layoutState.hasMore(state)
+                && (mLayoutState.mInfinite || !mRemainingSpans.isEmpty())) {
             View view = layoutState.next(recycler);
             LayoutParams lp = ((LayoutParams) view.getLayoutParams());
             final int position = lp.getViewLayoutPosition();
@@ -1440,7 +1560,7 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
             } else {
                 addView(view, 0);
             }
-            measureChildWithDecorationsAndMargin(view, lp);
+            measureChildWithDecorationsAndMargin(view, lp, false);
 
             final int start;
             final int end;
@@ -1488,13 +1608,22 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
                         mLaidOutInvalidFullSpan = true;
                     }
                 }
-
             }
             attachViewToSpans(view, lp, layoutState);
-            final int otherStart = lp.mFullSpan ? mSecondaryOrientation.getStartAfterPadding()
-                    : currentSpan.mIndex * mSizePerSpan +
-                            mSecondaryOrientation.getStartAfterPadding();
-            final int otherEnd = otherStart + mSecondaryOrientation.getDecoratedMeasurement(view);
+            final int otherStart;
+            final int otherEnd;
+            if (isLayoutRTL() && mOrientation == VERTICAL) {
+                otherEnd = lp.mFullSpan ? mSecondaryOrientation.getEndAfterPadding() :
+                        mSecondaryOrientation.getEndAfterPadding()
+                                - (mSpanCount - 1 - currentSpan.mIndex) * mSizePerSpan;
+                otherStart = otherEnd - mSecondaryOrientation.getDecoratedMeasurement(view);
+            } else {
+                otherStart = lp.mFullSpan ? mSecondaryOrientation.getStartAfterPadding()
+                        : currentSpan.mIndex * mSizePerSpan +
+                                mSecondaryOrientation.getStartAfterPadding();
+                otherEnd = otherStart + mSecondaryOrientation.getDecoratedMeasurement(view);
+            }
+
             if (mOrientation == VERTICAL) {
                 layoutDecoratedWithMargins(view, otherStart, start, otherEnd, end);
             } else {
@@ -1507,6 +1636,13 @@ private int fill(RecyclerView.Recycler recycler, LayoutState layoutState,
                 updateRemainingSpans(currentSpan, mLayoutState.mLayoutDirection, targetLine);
             }
             recycle(recycler, mLayoutState);
+            if (mLayoutState.mStopInFocusable && view.isFocusable()) {
+                if (lp.mFullSpan) {
+                    mRemainingSpans.clear();
+                } else {
+                    mRemainingSpans.set(currentSpan.mIndex, false);
+                }
+            }
             added = true;
         }
         if (!added) {
@@ -1558,6 +1694,9 @@ private void attachViewToSpans(View view, LayoutParams lp, LayoutState layoutSta
     }
 
     private void recycle(RecyclerView.Recycler recycler, LayoutState layoutState) {
+        if (!layoutState.mRecycle || layoutState.mInfinite) {
+            return;
+        }
         if (layoutState.mAvailable == 0) {
             // easy, recycle line is still valid
             if (layoutState.mLayoutDirection == LAYOUT_START) {
@@ -1903,7 +2042,6 @@ public void scrollToPositionWithOffset(int position, int offset) {
     }
 
     int scrollBy(int dt, RecyclerView.Recycler recycler, RecyclerView.State state) {
-        ensureOrientationHelper();
         final int referenceChildPosition;
         final int layoutDir;
         if (dt > 0) { // layout towards end
@@ -1913,6 +2051,7 @@ int scrollBy(int dt, RecyclerView.Recycler recycler, RecyclerView.State state) {
             layoutDir = LAYOUT_START;
             referenceChildPosition = getFirstChildPosition();
         }
+        mLayoutState.mRecycle = true;
         updateLayoutState(referenceChildPosition, state);
         setLayoutStateDirection(layoutDir);
         mLayoutState.mCurrentPosition = referenceChildPosition + mLayoutState.mItemDirection;
@@ -1980,10 +2119,16 @@ private int findLastReferenceChildPosition(int itemCount) {
         return 0;
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public RecyclerView.LayoutParams generateDefaultLayoutParams() {
-        return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
-                ViewGroup.LayoutParams.WRAP_CONTENT);
+        if (mOrientation == HORIZONTAL) {
+            return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
+                    ViewGroup.LayoutParams.FILL_PARENT);
+        } else {
+            return new LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
+                    ViewGroup.LayoutParams.WRAP_CONTENT);
+        }
     }
 
     @Override
@@ -2009,6 +2154,104 @@ public int getOrientation() {
         return mOrientation;
     }
 
+    @Nullable
+    @Override
+    public View onFocusSearchFailed(View focused, int direction, RecyclerView.Recycler recycler,
+            RecyclerView.State state) {
+        if (getChildCount() == 0) {
+            return null;
+        }
+
+        final View directChild = findContainingItemView(focused);
+        if (directChild == null) {
+            return null;
+        }
+
+        resolveShouldLayoutReverse();
+        final int layoutDir = convertFocusDirectionToLayoutDirection(direction);
+        if (layoutDir == LayoutState.INVALID_LAYOUT) {
+            return null;
+        }
+        LayoutParams prevFocusLayoutParams = (LayoutParams) directChild.getLayoutParams();
+        boolean prevFocusFullSpan = prevFocusLayoutParams.mFullSpan;
+        final Span prevFocusSpan = prevFocusLayoutParams.mSpan;
+        final int referenceChildPosition;
+        if (layoutDir == LAYOUT_END) { // layout towards end
+            referenceChildPosition = getLastChildPosition();
+        } else {
+            referenceChildPosition = getFirstChildPosition();
+        }
+        updateLayoutState(referenceChildPosition, state);
+        setLayoutStateDirection(layoutDir);
+
+        mLayoutState.mCurrentPosition = referenceChildPosition + mLayoutState.mItemDirection;
+        mLayoutState.mAvailable = (int) (MAX_SCROLL_FACTOR * mPrimaryOrientation.getTotalSpace());
+        mLayoutState.mStopInFocusable = true;
+        mLayoutState.mRecycle = false;
+        fill(recycler, mLayoutState, state);
+        mLastLayoutFromEnd = mShouldReverseLayout;
+        if (!prevFocusFullSpan) {
+            View view = prevFocusSpan.getFocusableViewAfter(referenceChildPosition, layoutDir);
+            if (view != null && view != directChild) {
+                return view;
+            }
+        }
+        // either could not find from the desired span or prev view is full span.
+        // traverse all spans
+        if (preferLastSpan(layoutDir)) {
+            for (int i = mSpanCount - 1; i >= 0; i --) {
+                View view = mSpans[i].getFocusableViewAfter(referenceChildPosition, layoutDir);
+                if (view != null && view != directChild) {
+                    return view;
+                }
+            }
+        } else {
+            for (int i = 0; i < mSpanCount; i ++) {
+                View view = mSpans[i].getFocusableViewAfter(referenceChildPosition, layoutDir);
+                if (view != null && view != directChild) {
+                    return view;
+                }
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Converts a focusDirection to orientation.
+     *
+     * @param focusDirection One of {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},
+     *                       {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT},
+     *                       {@link View#FOCUS_BACKWARD}, {@link View#FOCUS_FORWARD}
+     *                       or 0 for not applicable
+     * @return {@link LayoutState#LAYOUT_START} or {@link LayoutState#LAYOUT_END} if focus direction
+     * is applicable to current state, {@link LayoutState#INVALID_LAYOUT} otherwise.
+     */
+    private int convertFocusDirectionToLayoutDirection(int focusDirection) {
+        switch (focusDirection) {
+            case View.FOCUS_BACKWARD:
+                return LayoutState.LAYOUT_START;
+            case View.FOCUS_FORWARD:
+                return LayoutState.LAYOUT_END;
+            case View.FOCUS_UP:
+                return mOrientation == VERTICAL ? LayoutState.LAYOUT_START
+                        : LayoutState.INVALID_LAYOUT;
+            case View.FOCUS_DOWN:
+                return mOrientation == VERTICAL ? LayoutState.LAYOUT_END
+                        : LayoutState.INVALID_LAYOUT;
+            case View.FOCUS_LEFT:
+                return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_START
+                        : LayoutState.INVALID_LAYOUT;
+            case View.FOCUS_RIGHT:
+                return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_END
+                        : LayoutState.INVALID_LAYOUT;
+            default:
+                if (DEBUG) {
+                    Log.d(TAG, "Unknown focus request:" + focusDirection);
+                }
+                return LayoutState.INVALID_LAYOUT;
+        }
+
+    }
 
     /**
      * LayoutParams used by StaggeredGridLayoutManager.
@@ -2089,7 +2332,7 @@ public final int getSpanIndex() {
     class Span {
 
         static final int INVALID_LINE = Integer.MIN_VALUE;
-        private ArrayList<View> mViews = new ArrayList<View>();
+        private ArrayList<View> mViews = new ArrayList<>();
         int mCachedStart = INVALID_LINE;
         int mCachedEnd = INVALID_LINE;
         int mDeletedSize = 0;
@@ -2273,45 +2516,6 @@ void onOffset(int dt) {
             }
         }
 
-        // normalized offset is how much this span can scroll
-        int getNormalizedOffset(int dt, int targetStart, int targetEnd) {
-            if (mViews.size() == 0) {
-                return 0;
-            }
-            if (dt < 0) {
-                final int endSpace = getEndLine() - targetEnd;
-                if (endSpace <= 0) {
-                    return 0;
-                }
-                return -dt > endSpace ? -endSpace : dt;
-            } else {
-                final int startSpace = targetStart - getStartLine();
-                if (startSpace <= 0) {
-                    return 0;
-                }
-                return startSpace < dt ? startSpace : dt;
-            }
-        }
-
-        /**
-         * Returns if there is no child between start-end lines
-         *
-         * @param start The start line
-         * @param end   The end line
-         * @return true if a new child can be added between start and end
-         */
-        boolean isEmpty(int start, int end) {
-            final int count = mViews.size();
-            for (int i = 0; i < count; i++) {
-                final View view = mViews.get(i);
-                if (mPrimaryOrientation.getDecoratedStart(view) < end &&
-                        mPrimaryOrientation.getDecoratedEnd(view) > start) {
-                    return false;
-                }
-            }
-            return true;
-        }
-
         public int findFirstVisibleItemPosition() {
             return mReverseLayout
                     ? findOneVisibleChild(mViews.size() - 1, -1, false)
@@ -2356,6 +2560,36 @@ int findOneVisibleChild(int fromIndex, int toIndex, boolean completelyVisible) {
             }
             return NO_POSITION;
         }
+
+        /**
+         * Depending on the layout direction, returns the View that is after the given position.
+         */
+        public View getFocusableViewAfter(int referenceChildPosition, int layoutDir) {
+            View candidate = null;
+            if (layoutDir == LAYOUT_START) {
+                final int limit = mViews.size();
+                for (int i = 0; i < limit; i++) {
+                    final View view = mViews.get(i);
+                    if (view.isFocusable() &&
+                            (getPosition(view) > referenceChildPosition == mReverseLayout) ) {
+                        candidate = view;
+                    } else {
+                        break;
+                    }
+                }
+            } else {
+                for (int i = mViews.size() - 1; i >= 0; i--) {
+                    final View view = mViews.get(i);
+                    if (view.isFocusable() &&
+                            (getPosition(view) > referenceChildPosition == !mReverseLayout)) {
+                        candidate = view;
+                    } else {
+                        break;
+                    }
+                }
+            }
+            return candidate;
+        }
     }
 
     /**
@@ -2532,7 +2766,7 @@ private int invalidateFullSpansAfter(int position) {
 
         public void addFullSpanItem(FullSpanItem fullSpanItem) {
             if (mFullSpanItems == null) {
-                mFullSpanItems = new ArrayList<FullSpanItem>();
+                mFullSpanItems = new ArrayList<>();
             }
             final int size = mFullSpanItems.size();
             for (int i = 0; i < size; i++) {
@@ -2624,10 +2858,6 @@ int getGapForSpan(int spanIndex) {
                 return mGapPerSpan == null ? 0 : mGapPerSpan[spanIndex];
             }
 
-            public void invalidateSpanGaps() {
-                mGapPerSpan = null;
-            }
-
             @Override
             public int describeContents() {
                 return 0;
@@ -2671,7 +2901,10 @@ public FullSpanItem createFromParcel(Parcel in) {
         }
     }
 
-    static class SavedState implements Parcelable {
+    /**
+     * @hide
+     */
+    public static class SavedState implements Parcelable {
 
         int mAnchorPosition;
         int mVisibleAnchorPosition; // Replacement for span info when spans are invalidated
@@ -2704,6 +2937,7 @@ public SavedState() {
             mReverseLayout = in.readInt() == 1;
             mAnchorLayoutFromEnd = in.readInt() == 1;
             mLastLayoutRTL = in.readInt() == 1;
+            //noinspection unchecked
             mFullSpanItems = in.readArrayList(
                     LazySpanLookup.FullSpanItem.class.getClassLoader());
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ViewInfoStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ViewInfoStore.java
new file mode 100644
index 000000000..938fe42f3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/ViewInfoStore.java
@@ -0,0 +1,330 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.telegram.messenger.support.widget;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
+import android.support.v4.util.ArrayMap;
+import android.support.v4.util.LongSparseArray;
+import android.support.v4.util.Pools;
+
+import static org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
+import static org.telegram.messenger.support.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
+
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_APPEAR_PRE_AND_POST;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_APPEAR_AND_DISAPPEAR;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_PRE_AND_POST;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_DISAPPEARED;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_APPEAR;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_PRE;
+import static org.telegram.messenger.support.widget.ViewInfoStore.InfoRecord.FLAG_POST;
+/**
+ * This class abstracts all tracking for Views to run animations
+ *
+ * @hide
+ */
+class ViewInfoStore {
+
+    private static final boolean DEBUG = false;
+
+    /**
+     * View data records for pre-layout
+     */
+    @VisibleForTesting
+    final ArrayMap<ViewHolder, InfoRecord> mLayoutHolderMap = new ArrayMap<>();
+
+    @VisibleForTesting
+    final LongSparseArray<ViewHolder> mOldChangedHolders = new LongSparseArray<>();
+
+    /**
+     * Clears the state and all existing tracking data
+     */
+    void clear() {
+        mLayoutHolderMap.clear();
+        mOldChangedHolders.clear();
+    }
+
+    /**
+     * Adds the item information to the prelayout tracking
+     * @param holder The ViewHolder whose information is being saved
+     * @param info The information to save
+     */
+    void addToPreLayout(ViewHolder holder, ItemHolderInfo info) {
+        InfoRecord record = mLayoutHolderMap.get(holder);
+        if (record == null) {
+            record = InfoRecord.obtain();
+            mLayoutHolderMap.put(holder, record);
+        }
+        record.preInfo = info;
+        record.flags |= FLAG_PRE;
+    }
+
+    boolean isDisappearing(ViewHolder holder) {
+        final InfoRecord record = mLayoutHolderMap.get(holder);
+        return record != null && ((record.flags & FLAG_DISAPPEARED) != 0);
+    }
+
+    /**
+     * Finds the ItemHolderInfo for the given ViewHolder in preLayout list and removes it.
+     *
+     * @param vh The ViewHolder whose information is being queried
+     * @return The ItemHolderInfo for the given ViewHolder or null if it does not exist
+     */
+    @Nullable
+    ItemHolderInfo popFromPreLayout(ViewHolder vh) {
+        return popFromLayoutStep(vh, FLAG_PRE);
+    }
+
+    /**
+     * Finds the ItemHolderInfo for the given ViewHolder in postLayout list and removes it.
+     *
+     * @param vh The ViewHolder whose information is being queried
+     * @return The ItemHolderInfo for the given ViewHolder or null if it does not exist
+     */
+    @Nullable
+    ItemHolderInfo popFromPostLayout(ViewHolder vh) {
+        return popFromLayoutStep(vh, FLAG_POST);
+    }
+
+    private ItemHolderInfo popFromLayoutStep(ViewHolder vh, int flag) {
+        int index = mLayoutHolderMap.indexOfKey(vh);
+        if (index < 0) {
+            return null;
+        }
+        final InfoRecord record = mLayoutHolderMap.valueAt(index);
+        if (record != null && (record.flags & flag) != 0) {
+            record.flags &= ~flag;
+            final ItemHolderInfo info;
+            if (flag == FLAG_PRE) {
+                info = record.preInfo;
+            } else if (flag == FLAG_POST) {
+                info = record.postInfo;
+            } else {
+                throw new IllegalArgumentException("Must provide flag PRE or POST");
+            }
+            // if not pre-post flag is left, clear.
+            if ((record.flags & (FLAG_PRE | FLAG_POST)) == 0) {
+                mLayoutHolderMap.removeAt(index);
+                InfoRecord.recycle(record);
+            }
+            return info;
+        }
+        return null;
+    }
+
+    /**
+     * Adds the given ViewHolder to the oldChangeHolders list
+     * @param key The key to identify the ViewHolder.
+     * @param holder The ViewHolder to store
+     */
+    void addToOldChangeHolders(long key, ViewHolder holder) {
+        mOldChangedHolders.put(key, holder);
+    }
+
+    /**
+     * Adds the given ViewHolder to the appeared in pre layout list. These are Views added by the
+     * LayoutManager during a pre-layout pass. We distinguish them from other views that were
+     * already in the pre-layout so that ItemAnimator can choose to run a different animation for
+     * them.
+     *
+     * @param holder The ViewHolder to store
+     * @param info The information to save
+     */
+    void addToAppearedInPreLayoutHolders(ViewHolder holder, ItemHolderInfo info) {
+        InfoRecord record = mLayoutHolderMap.get(holder);
+        if (record == null) {
+            record = InfoRecord.obtain();
+            mLayoutHolderMap.put(holder, record);
+        }
+        record.flags |= FLAG_APPEAR;
+        record.preInfo = info;
+    }
+
+    /**
+     * Checks whether the given ViewHolder is in preLayout list
+     * @param viewHolder The ViewHolder to query
+     *
+     * @return True if the ViewHolder is present in preLayout, false otherwise
+     */
+    boolean isInPreLayout(ViewHolder viewHolder) {
+        final InfoRecord record = mLayoutHolderMap.get(viewHolder);
+        return record != null && (record.flags & FLAG_PRE) != 0;
+    }
+
+    /**
+     * Queries the oldChangeHolder list for the given key. If they are not tracked, simply returns
+     * null.
+     * @param key The key to be used to find the ViewHolder.
+     *
+     * @return A ViewHolder if exists or null if it does not exist.
+     */
+    ViewHolder getFromOldChangeHolders(long key) {
+        return mOldChangedHolders.get(key);
+    }
+
+    /**
+     * Adds the item information to the post layout list
+     * @param holder The ViewHolder whose information is being saved
+     * @param info The information to save
+     */
+    void addToPostLayout(ViewHolder holder, ItemHolderInfo info) {
+        InfoRecord record = mLayoutHolderMap.get(holder);
+        if (record == null) {
+            record = InfoRecord.obtain();
+            mLayoutHolderMap.put(holder, record);
+        }
+        record.postInfo = info;
+        record.flags |= FLAG_POST;
+    }
+
+    /**
+     * A ViewHolder might be added by the LayoutManager just to animate its disappearance.
+     * This list holds such items so that we can animate / recycle these ViewHolders properly.
+     *
+     * @param holder The ViewHolder which disappeared during a layout.
+     */
+    void addToDisappearedInLayout(ViewHolder holder) {
+        InfoRecord record = mLayoutHolderMap.get(holder);
+        if (record == null) {
+            record = InfoRecord.obtain();
+            mLayoutHolderMap.put(holder, record);
+        }
+        record.flags |= FLAG_DISAPPEARED;
+    }
+
+    /**
+     * Removes a ViewHolder from disappearing list.
+     * @param holder The ViewHolder to be removed from the disappearing list.
+     */
+    void removeFromDisappearedInLayout(ViewHolder holder) {
+        InfoRecord record = mLayoutHolderMap.get(holder);
+        if (record == null) {
+            return;
+        }
+        record.flags &= ~FLAG_DISAPPEARED;
+    }
+
+    void process(ProcessCallback callback) {
+        for (int index = mLayoutHolderMap.size() - 1; index >= 0; index --) {
+            final ViewHolder viewHolder = mLayoutHolderMap.keyAt(index);
+            final InfoRecord record = mLayoutHolderMap.removeAt(index);
+            if ((record.flags & FLAG_APPEAR_AND_DISAPPEAR) == FLAG_APPEAR_AND_DISAPPEAR) {
+                // Appeared then disappeared. Not useful for animations.
+                callback.unused(viewHolder);
+            } else if ((record.flags & FLAG_DISAPPEARED) != 0) {
+                // Set as "disappeared" by the LayoutManager (addDisappearingView)
+                if (record.preInfo == null) {
+                    // similar to appear disappear but happened between different layout passes.
+                    // this can happen when the layout manager is using auto-measure
+                    callback.unused(viewHolder);
+                } else {
+                    callback.processDisappeared(viewHolder, record.preInfo, record.postInfo);
+                }
+            } else if ((record.flags & FLAG_APPEAR_PRE_AND_POST) == FLAG_APPEAR_PRE_AND_POST) {
+                // Appeared in the layout but not in the adapter (e.g. entered the viewport)
+                callback.processAppeared(viewHolder, record.preInfo, record.postInfo);
+            } else if ((record.flags & FLAG_PRE_AND_POST) == FLAG_PRE_AND_POST) {
+                // Persistent in both passes. Animate persistence
+                callback.processPersistent(viewHolder, record.preInfo, record.postInfo);
+            } else if ((record.flags & FLAG_PRE) != 0) {
+                // Was in pre-layout, never been added to post layout
+                callback.processDisappeared(viewHolder, record.preInfo, null);
+            } else if ((record.flags & FLAG_POST) != 0) {
+                // Was not in pre-layout, been added to post layout
+                callback.processAppeared(viewHolder, record.preInfo, record.postInfo);
+            } else if ((record.flags & FLAG_APPEAR) != 0) {
+                // Scrap view. RecyclerView will handle removing/recycling this.
+            } else if (DEBUG) {
+                throw new IllegalStateException("record without any reasonable flag combination:/");
+            }
+            InfoRecord.recycle(record);
+        }
+    }
+
+    /**
+     * Removes the ViewHolder from all list
+     * @param holder The ViewHolder which we should stop tracking
+     */
+    void removeViewHolder(ViewHolder holder) {
+        for (int i = mOldChangedHolders.size() - 1; i >= 0; i--) {
+            if (holder == mOldChangedHolders.valueAt(i)) {
+                mOldChangedHolders.removeAt(i);
+                break;
+            }
+        }
+        final InfoRecord info = mLayoutHolderMap.remove(holder);
+        if (info != null) {
+            InfoRecord.recycle(info);
+        }
+    }
+
+    void onDetach() {
+        InfoRecord.drainCache();
+    }
+
+    public void onViewDetached(ViewHolder viewHolder) {
+        removeFromDisappearedInLayout(viewHolder);
+    }
+
+    interface ProcessCallback {
+        void processDisappeared(ViewHolder viewHolder, @NonNull ItemHolderInfo preInfo,
+                @Nullable ItemHolderInfo postInfo);
+        void processAppeared(ViewHolder viewHolder, @Nullable ItemHolderInfo preInfo,
+                ItemHolderInfo postInfo);
+        void processPersistent(ViewHolder viewHolder, @NonNull ItemHolderInfo preInfo,
+                @NonNull ItemHolderInfo postInfo);
+        void unused(ViewHolder holder);
+    }
+
+    static class InfoRecord {
+        // disappearing list
+        static final int FLAG_DISAPPEARED = 1;
+        // appear in pre layout list
+        static final int FLAG_APPEAR = 1 << 1;
+        // pre layout, this is necessary to distinguish null item info
+        static final int FLAG_PRE = 1 << 2;
+        // post layout, this is necessary to distinguish null item info
+        static final int FLAG_POST = 1 << 3;
+        static final int FLAG_APPEAR_AND_DISAPPEAR = FLAG_APPEAR | FLAG_DISAPPEARED;
+        static final int FLAG_PRE_AND_POST = FLAG_PRE | FLAG_POST;
+        static final int FLAG_APPEAR_PRE_AND_POST = FLAG_APPEAR | FLAG_PRE | FLAG_POST;
+        int flags;
+        @Nullable ItemHolderInfo preInfo;
+        @Nullable ItemHolderInfo postInfo;
+        static Pools.Pool<InfoRecord> sPool = new Pools.SimplePool<>(20);
+
+        private InfoRecord() {
+        }
+
+        static InfoRecord obtain() {
+            InfoRecord record = sPool.acquire();
+            return record == null ? new InfoRecord() : record;
+        }
+
+        static void recycle(InfoRecord record) {
+            record.flags = 0;
+            record.preInfo = null;
+            record.postInfo = null;
+            sPool.release(record);
+        }
+
+        static void drainCache() {
+            //noinspection StatementWithEmptyBody
+            while (sPool.acquire() != null);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
index 3aece7ccb..46b6f9d2a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchHelper.java
@@ -16,13 +16,15 @@
 
 package org.telegram.messenger.support.widget.helper;
 
+import android.content.res.Resources;
 import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.os.Build;
-import android.support.v4.animation.ValueAnimatorCompat;
+import android.support.annotation.Nullable;
 import android.support.v4.animation.AnimatorCompatHelper;
 import android.support.v4.animation.AnimatorListenerCompat;
 import android.support.v4.animation.AnimatorUpdateListenerCompat;
+import android.support.v4.animation.ValueAnimatorCompat;
 import android.support.v4.view.GestureDetectorCompat;
 import android.support.v4.view.MotionEventCompat;
 import android.support.v4.view.VelocityTrackerCompat;
@@ -31,6 +33,8 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.messenger.support.widget.RecyclerView.OnItemTouchListener;
+import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
 import android.util.Log;
 import android.view.GestureDetector;
 import android.view.HapticFeedbackConstants;
@@ -39,14 +43,11 @@
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.ViewParent;
+import android.view.animation.Interpolator;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import org.telegram.messenger.support.widget.RecyclerView.OnItemTouchListener;
-import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
-import android.view.animation.Interpolator;
-
 /**
  * This is a utility class to add swipe to dismiss and drag & drop support to RecyclerView.
  * <p>
@@ -156,6 +157,11 @@
 
     private static final int ACTION_MODE_DRAG_MASK = ACTION_MODE_SWIPE_MASK << DIRECTION_FLAG_COUNT;
 
+    /**
+     * The unit we are using to track velocity
+     */
+    private static final int PIXELS_PER_SECOND = 1000;
+
     /**
      * Views, whose state should be cleared after they are detached from RecyclerView.
      * This is necessary after swipe dismissing an item. We wait until animator finishes its job
@@ -181,6 +187,16 @@
 
     float mInitialTouchY;
 
+    /**
+     * Set when ItemTouchHelper is assigned to a RecyclerView.
+     */
+    float mSwipeEscapeVelocity;
+
+    /**
+     * Set when ItemTouchHelper is assigned to a RecyclerView.
+     */
+    float mMaxSwipeVelocity;
+
     /**
      * The diff between the last event and initial touch.
      */
@@ -367,11 +383,11 @@ public void onTouchEvent(RecyclerView recyclerView, MotionEvent event) {
                     break;
                 }
                 case MotionEvent.ACTION_CANCEL:
-                case MotionEvent.ACTION_UP:
                     if (mVelocityTracker != null) {
-                        mVelocityTracker
-                                .computeCurrentVelocity(1000, mRecyclerView.getMaxFlingVelocity());
+                        mVelocityTracker.clear();
                     }
+                    // fall through
+                case MotionEvent.ACTION_UP:
                     select(null, ACTION_STATE_IDLE);
                     mActivePointerId = ACTIVE_POINTER_ID_NONE;
                     break;
@@ -379,11 +395,6 @@ public void onTouchEvent(RecyclerView recyclerView, MotionEvent event) {
                     final int pointerIndex = MotionEventCompat.getActionIndex(event);
                     final int pointerId = MotionEventCompat.getPointerId(event, pointerIndex);
                     if (pointerId == mActivePointerId) {
-                        if (mVelocityTracker != null) {
-                            mVelocityTracker
-                                    .computeCurrentVelocity(1000,
-                                            mRecyclerView.getMaxFlingVelocity());
-                        }
                         // This was our active pointer going up. Choose a new
                         // active pointer and adjust accordingly.
                         final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
@@ -436,12 +447,14 @@ private static boolean hitTest(View child, float x, float y, float left, float t
 
     /**
      * Attaches the ItemTouchHelper to the provided RecyclerView. If TouchHelper is already
-     * attached
-     * to a RecyclerView, it will first detach from the previous one.
+     * attached to a RecyclerView, it will first detach from the previous one. You can call this
+     * method with {@code null} to detach it from the current RecyclerView.
      *
-     * @param recyclerView The RecyclerView instance to which you want to add this helper.
+     * @param recyclerView The RecyclerView instance to which you want to add this helper or
+     *                     {@code null} if you want to remove ItemTouchHelper from the current
+     *                     RecyclerView.
      */
-    public void attachToRecyclerView(RecyclerView recyclerView) {
+    public void attachToRecyclerView(@Nullable RecyclerView recyclerView) {
         if (mRecyclerView == recyclerView) {
             return; // nothing to do
         }
@@ -450,6 +463,9 @@ public void attachToRecyclerView(RecyclerView recyclerView) {
         }
         mRecyclerView = recyclerView;
         if (mRecyclerView != null) {
+            final Resources resources = recyclerView.getResources();
+            mSwipeEscapeVelocity = AndroidUtilities.dp(120);
+            mMaxSwipeVelocity = AndroidUtilities.dp(800);
             setupCallbacks();
         }
     }
@@ -874,7 +890,6 @@ private int endRecoverAnimation(ViewHolder viewHolder, boolean override) {
                     anim.cancel();
                 }
                 mRecoverAnimations.remove(i);
-                anim.mViewHolder.setIsRecyclable(true);
                 return anim.mAnimationType;
             }
         }
@@ -1010,7 +1025,7 @@ private View findChildView(MotionEvent event) {
 
     /**
      * Starts dragging the provided ViewHolder. By default, ItemTouchHelper starts a drag when a
-     * View is long pressed. You can disable that behavior via
+     * View is long pressed. You can disable that behavior by overriding
      * {@link ItemTouchHelper.Callback#isLongPressDragEnabled()}.
      * <p>
      * For this method to work:
@@ -1189,11 +1204,17 @@ private int checkHorizontalSwipe(ViewHolder viewHolder, int flags) {
         if ((flags & (LEFT | RIGHT)) != 0) {
             final int dirFlag = mDx > 0 ? RIGHT : LEFT;
             if (mVelocityTracker != null && mActivePointerId > -1) {
+                mVelocityTracker.computeCurrentVelocity(PIXELS_PER_SECOND,
+                        mCallback.getSwipeVelocityThreshold(mMaxSwipeVelocity));
                 final float xVelocity = VelocityTrackerCompat
                         .getXVelocity(mVelocityTracker, mActivePointerId);
+                final float yVelocity = VelocityTrackerCompat
+                        .getYVelocity(mVelocityTracker, mActivePointerId);
                 final int velDirFlag = xVelocity > 0f ? RIGHT : LEFT;
+                final float absXVelocity = Math.abs(xVelocity);
                 if ((velDirFlag & flags) != 0 && dirFlag == velDirFlag &&
-                        Math.abs(xVelocity) >= mRecyclerView.getMinFlingVelocity()) {
+                        absXVelocity >= mCallback.getSwipeEscapeVelocity(mSwipeEscapeVelocity) &&
+                        absXVelocity > Math.abs(yVelocity)) {
                     return velDirFlag;
                 }
             }
@@ -1212,11 +1233,17 @@ private int checkVerticalSwipe(ViewHolder viewHolder, int flags) {
         if ((flags & (UP | DOWN)) != 0) {
             final int dirFlag = mDy > 0 ? DOWN : UP;
             if (mVelocityTracker != null && mActivePointerId > -1) {
+                mVelocityTracker.computeCurrentVelocity(PIXELS_PER_SECOND,
+                        mCallback.getSwipeVelocityThreshold(mMaxSwipeVelocity));
+                final float xVelocity = VelocityTrackerCompat
+                        .getXVelocity(mVelocityTracker, mActivePointerId);
                 final float yVelocity = VelocityTrackerCompat
                         .getYVelocity(mVelocityTracker, mActivePointerId);
                 final int velDirFlag = yVelocity > 0f ? DOWN : UP;
+                final float absYVelocity = Math.abs(yVelocity);
                 if ((velDirFlag & flags) != 0 && velDirFlag == dirFlag &&
-                        Math.abs(yVelocity) >= mRecyclerView.getMinFlingVelocity()) {
+                        absYVelocity >= mCallback.getSwipeEscapeVelocity(mSwipeEscapeVelocity) &&
+                        absYVelocity > Math.abs(xVelocity)) {
                     return velDirFlag;
                 }
             }
@@ -1372,7 +1399,8 @@ public float getInterpolation(float t) {
         }
 
         /**
-         * Returns the {@link ItemTouchUIUtil} that is used by the {@link Callback} class for visual
+         * Returns the {@link ItemTouchUIUtil} that is used by the {@link Callback} class for
+         * visual
          * changes on Views in response to user interactions. {@link ItemTouchUIUtil} has different
          * implementations for different platform versions.
          * <p>
@@ -1661,6 +1689,54 @@ public float getMoveThreshold(ViewHolder viewHolder) {
             return .5f;
         }
 
+        /**
+         * Defines the minimum velocity which will be considered as a swipe action by the user.
+         * <p>
+         * You can increase this value to make it harder to swipe or decrease it to make it easier.
+         * Keep in mind that ItemTouchHelper also checks the perpendicular velocity and makes sure
+         * current direction velocity is larger then the perpendicular one. Otherwise, user's
+         * movement is ambiguous. You can change the threshold by overriding
+         * {@link #getSwipeVelocityThreshold(float)}.
+         * <p>
+         * The velocity is calculated in pixels per second.
+         * <p>
+         * The default framework value is passed as a parameter so that you can modify it with a
+         * multiplier.
+         *
+         * @param defaultValue The default value (in pixels per second) used by the
+         *                     ItemTouchHelper.
+         * @return The minimum swipe velocity. The default implementation returns the
+         * <code>defaultValue</code> parameter.
+         * @see #getSwipeVelocityThreshold(float)
+         * @see #getSwipeThreshold(ViewHolder)
+         */
+        public float getSwipeEscapeVelocity(float defaultValue) {
+            return defaultValue;
+        }
+
+        /**
+         * Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements.
+         * <p>
+         * To consider a movement as swipe, ItemTouchHelper requires it to be larger than the
+         * perpendicular movement. If both directions reach to the max threshold, none of them will
+         * be considered as a swipe because it is usually an indication that user rather tried to
+         * scroll then swipe.
+         * <p>
+         * The velocity is calculated in pixels per second.
+         * <p>
+         * You can customize this behavior by changing this method. If you increase the value, it
+         * will be easier for the user to swipe diagonally and if you decrease the value, user will
+         * need to make a rather straight finger movement to trigger a swipe.
+         *
+         * @param defaultValue The default value(in pixels per second) used by the ItemTouchHelper.
+         * @return The velocity cap for pointer movements. The default implementation returns the
+         * <code>defaultValue</code> parameter.
+         * @see #getSwipeEscapeVelocity(float)
+         */
+        public float getSwipeVelocityThreshold(float defaultValue) {
+            return defaultValue;
+        }
+
         /**
          * Called by ItemTouchHelper to select a drop target from the list of ViewHolders that
          * are under the dragged View.
@@ -1779,7 +1855,6 @@ public ViewHolder chooseDropTarget(ViewHolder selected,
          * @param actionState One of {@link ItemTouchHelper#ACTION_STATE_IDLE},
          *                    {@link ItemTouchHelper#ACTION_STATE_SWIPE} or
          *                    {@link ItemTouchHelper#ACTION_STATE_DRAG}.
-         *
          * @see #clearView(RecyclerView, RecyclerView.ViewHolder)
          */
         public void onSelectedChanged(ViewHolder viewHolder, int actionState) {
@@ -1902,7 +1977,6 @@ private void onDrawOver(Canvas c, RecyclerView parent, ViewHolder selected,
                 final RecoverAnimation anim = recoverAnimationList.get(i);
                 if (anim.mEnded && !anim.mIsPendingCleanup) {
                     recoverAnimationList.remove(i);
-                    anim.mViewHolder.setIsRecyclable(true);
                 } else if (!anim.mEnded) {
                     hasRunningAnimation = true;
                 }
@@ -2038,15 +2112,14 @@ public long getAnimationDuration(RecyclerView recyclerView, int animationType,
          * the faster the list will scroll. Similarly, the larger portion of the View is out of
          * bounds, the faster the RecyclerView will scroll.
          *
-         * @param recyclerView        The RecyclerView instance to which ItemTouchHelper is attached
-         *                            to.
+         * @param recyclerView        The RecyclerView instance to which ItemTouchHelper is
+         *                            attached to.
          * @param viewSize            The total size of the View in scroll direction, excluding
          *                            item decorations.
          * @param viewSizeOutOfBounds The total size of the View that is out of bounds. This value
          *                            is negative if the View is dragged towards left or top edge.
          * @param totalSize           The total size of RecyclerView in the scroll direction.
          * @param msSinceStartScroll  The time passed since View is kept out of bounds.
-         *
          * @return The amount that RecyclerView should scroll. Keep in mind that this value will
          * be passed to {@link RecyclerView#scrollBy(int, int)} method.
          */
@@ -2314,6 +2387,9 @@ public void onAnimationStart(ValueAnimatorCompat animation) {
 
         @Override
         public void onAnimationEnd(ValueAnimatorCompat animation) {
+            if (!mEnded) {
+                mViewHolder.setIsRecyclable(true);
+            }
             mEnded = true;
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchUIUtilImpl.java b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchUIUtilImpl.java
index f0d631f5d..c0e891598 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchUIUtilImpl.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/support/widget/helper/ItemTouchUIUtilImpl.java
@@ -21,16 +21,16 @@
 import org.telegram.messenger.support.widget.RecyclerView;
 import android.view.View;
 
+
 /**
  * Package private class to keep implementations. Putting them inside ItemTouchUIUtil makes them
  * public API, which is not desired in this case.
  */
 class ItemTouchUIUtilImpl {
-
     static class Lollipop extends Honeycomb {
         @Override
         public void onDraw(Canvas c, RecyclerView recyclerView, View view,
-                           float dX, float dY, int actionState, boolean isCurrentlyActive) {
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
             if (isCurrentlyActive) {
                 Object originalElevation = view.getTag();
                 if (originalElevation == null) {
@@ -85,14 +85,14 @@ public void onSelected(View view) {
 
         @Override
         public void onDraw(Canvas c, RecyclerView recyclerView, View view,
-                           float dX, float dY, int actionState, boolean isCurrentlyActive) {
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
             ViewCompat.setTranslationX(view, dX);
             ViewCompat.setTranslationY(view, dY);
         }
 
         @Override
         public void onDrawOver(Canvas c, RecyclerView recyclerView,
-                               View view, float dX, float dY, int actionState, boolean isCurrentlyActive) {
+                View view, float dX, float dY, int actionState, boolean isCurrentlyActive) {
 
         }
     }
@@ -100,7 +100,7 @@ public void onDrawOver(Canvas c, RecyclerView recyclerView,
     static class Gingerbread implements ItemTouchUIUtil {
 
         private void draw(Canvas c, RecyclerView parent, View view,
-                          float dX, float dY) {
+                float dX, float dY) {
             c.save();
             c.translate(dX, dY);
             parent.drawChild(c, view, 0);
@@ -119,7 +119,7 @@ public void onSelected(View view) {
 
         @Override
         public void onDraw(Canvas c, RecyclerView recyclerView, View view,
-                           float dX, float dY, int actionState, boolean isCurrentlyActive) {
+                float dX, float dY, int actionState, boolean isCurrentlyActive) {
             if (actionState != ItemTouchHelper.ACTION_STATE_DRAG) {
                 draw(c, recyclerView, view, dX, dY);
             }
@@ -127,8 +127,8 @@ public void onDraw(Canvas c, RecyclerView recyclerView, View view,
 
         @Override
         public void onDrawOver(Canvas c, RecyclerView recyclerView,
-                               View view, float dX, float dY,
-                               int actionState, boolean isCurrentlyActive) {
+                View view, float dX, float dY,
+                int actionState, boolean isCurrentlyActive) {
             if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {
                 draw(c, recyclerView, view, dX, dY);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java b/TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java
index a9614e1b4..22762d7d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/video/Track.java
@@ -67,8 +67,9 @@
         samplingFrequencyIndexMap.put(8000, 0xb);
     }
 
-    public Track(int id, MediaFormat format, boolean isAudio) throws Exception {
+    public Track(int id, MediaFormat format, boolean audio) throws Exception {
         trackId = id;
+        isAudio = audio;
         if (!isAudio) {
             sampleDurations.add((long) 3015);
             duration = 3015;
@@ -136,7 +137,6 @@ public Track(int id, MediaFormat format, boolean isAudio) throws Exception {
         } else {
             sampleDurations.add((long) 1024);
             duration = 1024;
-            isAudio = true;
             volume = 1;
             timeScale = format.getInteger(MediaFormat.KEY_SAMPLE_RATE);
             handler = "soun";
@@ -184,15 +184,18 @@ public long getTrackId() {
     }
 
     public void addSample(long offset, MediaCodec.BufferInfo bufferInfo) {
+        long delta = bufferInfo.presentationTimeUs - lastPresentationTimeUs;
+        if (delta < 0) {
+            return;
+        }
         boolean isSyncFrame = !isAudio && (bufferInfo.flags & MediaCodec.BUFFER_FLAG_SYNC_FRAME) != 0;
         samples.add(new Sample(offset, bufferInfo.size));
         if (syncSamples != null && isSyncFrame) {
             syncSamples.add(samples.size());
         }
 
-        long delta = bufferInfo.presentationTimeUs - lastPresentationTimeUs;
-        lastPresentationTimeUs = bufferInfo.presentationTimeUs;
         delta = (delta * timeScale + 500000L) / 1000000L;
+        lastPresentationTimeUs = bufferInfo.presentationTimeUs;
         if (!first) {
             sampleDurations.add(sampleDurations.size() - 1, delta);
             duration += delta;
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
index 8b6cf27d6..e6a5f08b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
@@ -201,8 +201,12 @@ private void checkConnection() {
         native_setNetworkAvailable(isNetworkOnline());
     }
 
-    public void init(int version, int layer, int apiId, String deviceModel, String systemVersion, String appVersion, String langCode, String configPath, String logPath, int userId) {
-        native_init(version, layer, apiId, deviceModel, systemVersion, appVersion, langCode, configPath, logPath, userId);
+    public void setPushConnectionEnabled(boolean value) {
+        native_setPushConnectionEnabled(value);
+    }
+
+    public void init(int version, int layer, int apiId, String deviceModel, String systemVersion, String appVersion, String langCode, String configPath, String logPath, int userId, boolean enablePushConnection) {
+        native_init(version, layer, apiId, deviceModel, systemVersion, appVersion, langCode, configPath, logPath, userId, enablePushConnection);
         checkConnection();
         BroadcastReceiver networkStateReceiver = new BroadcastReceiver() {
             @Override
@@ -342,8 +346,10 @@ public static void onInternalPushReceived() {
             @Override
             public void run() {
                 try {
-                    getInstance().wakeLock.acquire(20000);
-                    FileLog.d("tmessages", "acquire wakelock");
+                    if (!getInstance().wakeLock.isHeld()) {
+                        getInstance().wakeLock.acquire(10000);
+                        FileLog.d("tmessages", "acquire wakelock");
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -368,8 +374,9 @@ public void run() {
     public static native void native_applyDatacenterAddress(int datacenterId, String ipAddress, int port);
     public static native int native_getConnectionState();
     public static native void native_setUserId(int id);
-    public static native void native_init(int version, int layer, int apiId, String deviceModel, String systemVersion, String appVersion, String langCode, String configPath, String logPath, int userId);
+    public static native void native_init(int version, int layer, int apiId, String deviceModel, String systemVersion, String appVersion, String langCode, String configPath, String logPath, int userId, boolean enablePushConnection);
     public static native void native_setJava(boolean useJavaByteBuffers);
+    public static native void native_setPushConnectionEnabled(boolean value);
 
     public int generateClassGuid() {
         return lastClassGuid++;
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
index ee31d06b5..4418191aa 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/TLRPC.java
@@ -56,7 +56,7 @@
 	public static final int MESSAGE_FLAG_HAS_BOT_ID         = 0x00000800;
 	public static final int MESSAGE_FLAG_MEGAGROUP          = 0x80000000;
 
-    public static final int LAYER = 48;
+    public static final int LAYER = 51;
 
     public static class ChatPhoto extends TLObject {
 		public FileLocation photo_small;
@@ -642,6 +642,44 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messages_botCallbackAnswer extends TLObject {
+		public static int constructor = 0x1264f1c6;
+
+		public int flags;
+		public boolean alert;
+		public String message;
+
+		public static TL_messages_botCallbackAnswer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_messages_botCallbackAnswer.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", constructor));
+				} else {
+					return null;
+				}
+			}
+			TL_messages_botCallbackAnswer result = new TL_messages_botCallbackAnswer();
+			result.readParams(stream, exception);
+			return result;
+		}
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			alert = (flags & 2) != 0;
+			if ((flags & 1) != 0) {
+				message = stream.readString(exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = alert ? (flags | 2) : (flags &~ 2);
+			stream.writeInt32(flags);
+			if ((flags & 1) != 0) {
+				stream.writeString(message);
+			}
+		}
+	}
+
 	public static class TL_contactStatus extends TLObject {
 		public static int constructor = 0xd3680c61;
 
@@ -2129,6 +2167,123 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class auth_SentCodeType extends TLObject {
+		public int length;
+		public String pattern;
+
+		public static auth_SentCodeType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			auth_SentCodeType result = null;
+			switch(constructor) {
+				case 0x3dbb5986:
+					result = new TL_auth_sentCodeTypeApp();
+					break;
+				case 0x5353e5a7:
+					result = new TL_auth_sentCodeTypeCall();
+					break;
+				case 0xab03c6d9:
+					result = new TL_auth_sentCodeTypeFlashCall();
+					break;
+				case 0xc000bba2:
+					result = new TL_auth_sentCodeTypeSms();
+					break;
+			}
+			if (result == null && exception) {
+				throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", constructor));
+			}
+			if (result != null) {
+				result.readParams(stream, exception);
+			}
+			return result;
+		}
+	}
+
+	public static class TL_auth_sentCodeTypeApp extends auth_SentCodeType {
+		public static int constructor = 0x3dbb5986;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			length = stream.readInt32(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(length);
+		}
+	}
+
+	public static class TL_auth_sentCodeTypeCall extends auth_SentCodeType {
+		public static int constructor = 0x5353e5a7;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			length = stream.readInt32(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(length);
+		}
+	}
+
+	public static class TL_auth_sentCodeTypeFlashCall extends auth_SentCodeType {
+		public static int constructor = 0xab03c6d9;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			pattern = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(pattern);
+		}
+	}
+
+	public static class TL_auth_sentCodeTypeSms extends auth_SentCodeType {
+		public static int constructor = 0xc000bba2;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			length = stream.readInt32(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(length);
+		}
+	}
+
+	public static class TL_peerSettings extends TLObject {
+		public static int constructor = 0x818426cd;
+
+		public int flags;
+		public boolean report_spam;
+
+		public static TL_peerSettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_peerSettings.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", constructor));
+				} else {
+					return null;
+				}
+			}
+			TL_peerSettings result = new TL_peerSettings();
+			result.readParams(stream, exception);
+			return result;
+		}
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			report_spam = (flags & 1) != 0;
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = report_spam ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
+		}
+	}
+
 	public static class FoundGif extends TLObject {
 		public String url;
 		public Photo photo;
@@ -2573,79 +2728,61 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class auth_SentCode extends TLObject {
+	public static class TL_auth_sentCode extends TLObject {
+		public static int constructor = 0x5e002502;
+
+		public int flags;
 		public boolean phone_registered;
+		public auth_SentCodeType type;
 		public String phone_code_hash;
-		public int send_call_timeout;
-		public boolean is_password;
+		public auth_CodeType next_type;
+		public int timeout;
 
-		public static auth_SentCode TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			auth_SentCode result = null;
-			switch(constructor) {
-				case 0xe325edcf:
-					result = new TL_auth_sentAppCode();
-					break;
-				case 0xefed51d9:
-					result = new TL_auth_sentCode();
-					break;
-			}
-			if (result == null && exception) {
-				throw new RuntimeException(String.format("can't parse magic %x in auth_SentCode", constructor));
-			}
-			if (result != null) {
-				result.readParams(stream, exception);
+		public static TL_auth_sentCode TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_auth_sentCode.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", constructor));
+				} else {
+					return null;
+				}
 			}
+			TL_auth_sentCode result = new TL_auth_sentCode();
+			result.readParams(stream, exception);
 			return result;
 		}
-	}
-
-	public static class TL_auth_sentAppCode extends auth_SentCode {
-		public static int constructor = 0xe325edcf;
-
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			phone_registered = stream.readBool(exception);
-			phone_code_hash = stream.readString(exception);
-			send_call_timeout = stream.readInt32(exception);
-			is_password = stream.readBool(exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeBool(phone_registered);
-			stream.writeString(phone_code_hash);
-			stream.writeInt32(send_call_timeout);
-			stream.writeBool(is_password);
-		}
-	}
-
-	public static class TL_auth_sentCode extends auth_SentCode {
-		public static int constructor = 0xefed51d9;
-
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
-			phone_registered = stream.readBool(exception);
+			flags = stream.readInt32(exception);
+			phone_registered = (flags & 1) != 0;
+			type = auth_SentCodeType.TLdeserialize(stream, stream.readInt32(exception), exception);
 			phone_code_hash = stream.readString(exception);
-			send_call_timeout = stream.readInt32(exception);
-			is_password = stream.readBool(exception);
+			if ((flags & 2) != 0) {
+				next_type = auth_CodeType.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+			if ((flags & 4) != 0) {
+				timeout = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			stream.writeBool(phone_registered);
+			stream.writeInt32(flags);
+			flags = phone_registered ? (flags | 1) : (flags &~ 1);
+			type.serializeToStream(stream);
 			stream.writeString(phone_code_hash);
-			stream.writeInt32(send_call_timeout);
-			stream.writeBool(is_password);
+			if ((flags & 2) != 0) {
+				next_type.serializeToStream(stream);
+			}
+			if ((flags & 4) != 0) {
+				stream.writeInt32(timeout);
+			}
 		}
 	}
 
 	public static class BotInlineResult extends TLObject {
+		public int flags;
 		public String id;
 		public String type;
-		public Photo photo;
-		public BotInlineMessage send_message;
-		public Document document;
-		public int flags;
 		public String title;
 		public String description;
 		public String url;
@@ -2655,20 +2792,20 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public int w;
 		public int h;
 		public int duration;
+		public BotInlineMessage send_message;
+		public Photo photo;
+		public Document document;
 		public long query_id;
 
 		public static BotInlineResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			BotInlineResult result = null;
 			switch(constructor) {
-				case 0xc5528587:
-					result = new TL_botInlineMediaResultPhoto();
-					break;
-				case 0xf897d33e:
-					result = new TL_botInlineMediaResultDocument();
-					break;
 				case 0x9bebaeb9:
 					result = new TL_botInlineResult();
 					break;
+				case 0x17db940b:
+					result = new TL_botInlineMediaResult();
+					break;
 			}
 			if (result == null && exception) {
 				throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", constructor));
@@ -2680,46 +2817,6 @@ public static BotInlineResult TLdeserialize(AbstractSerializedData stream, int c
 		}
 	}
 
-	public static class TL_botInlineMediaResultPhoto extends BotInlineResult {
-		public static int constructor = 0xc5528587;
-
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			id = stream.readString(exception);
-			type = stream.readString(exception);
-			photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
-			send_message = BotInlineMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeString(id);
-			stream.writeString(type);
-			photo.serializeToStream(stream);
-			send_message.serializeToStream(stream);
-		}
-	}
-
-	public static class TL_botInlineMediaResultDocument extends BotInlineResult {
-		public static int constructor = 0xf897d33e;
-
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			id = stream.readString(exception);
-			type = stream.readString(exception);
-			document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
-			send_message = BotInlineMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeString(id);
-			stream.writeString(type);
-			document.serializeToStream(stream);
-			send_message.serializeToStream(stream);
-		}
-	}
-
 	public static class TL_botInlineResult extends BotInlineResult {
 		public static int constructor = 0x9bebaeb9;
 
@@ -2794,6 +2891,50 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_botInlineMediaResult extends BotInlineResult {
+		public static int constructor = 0x17db940b;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			id = stream.readString(exception);
+			type = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+			if ((flags & 2) != 0) {
+				document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+			if ((flags & 4) != 0) {
+				title = stream.readString(exception);
+			}
+			if ((flags & 8) != 0) {
+				description = stream.readString(exception);
+			}
+			send_message = BotInlineMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
+			stream.writeString(id);
+			stream.writeString(type);
+			if ((flags & 1) != 0) {
+				photo.serializeToStream(stream);
+			}
+			if ((flags & 2) != 0) {
+				document.serializeToStream(stream);
+			}
+			if ((flags & 4) != 0) {
+				stream.writeString(title);
+			}
+			if ((flags & 8) != 0) {
+				stream.writeString(description);
+			}
+			send_message.serializeToStream(stream);
+		}
+	}
+
 	public static class PeerNotifySettings extends TLObject {
 		public int flags;
 		public boolean silent;
@@ -3388,20 +3529,22 @@ public void serializeToStream(AbstractSerializedData stream) {
 
 	public static class BotInfo extends TLObject {
 		public int user_id;
-		public int version;
-		public String share_text;
 		public String description;
 		public ArrayList<TL_botCommand> commands = new ArrayList<>();
+		public int version;
 
 		public static BotInfo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			BotInfo result = null;
 			switch(constructor) {
 				case 0xbb2e37ce:
-					result = new TL_botInfoEmpty();
+					result = new TL_botInfoEmpty_layer48();
 					break;
-				case 0x9cf585d:
+				case 0x98e81d3a:
 					result = new TL_botInfo();
 					break;
+				case 0x9cf585d:
+					result = new TL_botInfo_layer48();
+					break;
 			}
 			if (result == null && exception) {
 				throw new RuntimeException(String.format("can't parse magic %x in BotInfo", constructor));
@@ -3413,7 +3556,7 @@ public static BotInfo TLdeserialize(AbstractSerializedData stream, int construct
 		}
 	}
 
-	public static class TL_botInfoEmpty extends BotInfo {
+	public static class TL_botInfoEmpty_layer48 extends TL_botInfo {
 		public static int constructor = 0xbb2e37ce;
 
 
@@ -3423,13 +3566,11 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_botInfo extends BotInfo {
-		public static int constructor = 0x9cf585d;
+		public static int constructor = 0x98e81d3a;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			user_id = stream.readInt32(exception);
-			version = stream.readInt32(exception);
-			share_text = stream.readString(exception);
 			description = stream.readString(exception);
 			int magic = stream.readInt32(exception);
 			if (magic != 0x1cb5c415) {
@@ -3451,8 +3592,6 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
 			stream.writeInt32(user_id);
-			stream.writeInt32(version);
-			stream.writeString(share_text);
 			stream.writeString(description);
 			stream.writeInt32(0x1cb5c415);
 			int count = commands.size();
@@ -3463,25 +3602,69 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class ReplyMarkup extends TLObject {
-		public int flags;
-		public boolean selective;
-		public boolean resize;
-		public boolean single_use;
+	public static class TL_botInfo_layer48 extends TL_botInfo {
+		public static int constructor = 0x9cf585d;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			user_id = stream.readInt32(exception);
+			version = stream.readInt32(exception);
+			stream.readString(exception);
+			description = stream.readString(exception);
+			int magic = stream.readInt32(exception);
+			if (magic != 0x1cb5c415) {
+				if (exception) {
+					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+				}
+				return;
+			}
+			int count = stream.readInt32(exception);
+			for (int a = 0; a < count; a++) {
+				TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
+				if (object == null) {
+					return;
+				}
+				commands.add(object);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(user_id);
+			stream.writeInt32(version);
+			stream.writeString("");
+			stream.writeString(description);
+			stream.writeInt32(0x1cb5c415);
+			int count = commands.size();
+			stream.writeInt32(count);
+			for (int a = 0; a < count; a++) {
+				commands.get(a).serializeToStream(stream);
+			}
+		}
+	}
+
+	public static class ReplyMarkup extends TLObject {
 		public ArrayList<TL_keyboardButtonRow> rows = new ArrayList<>();
+		public int flags;
+		public boolean selective;
+		public boolean single_use;
+		public boolean resize;
 
 		public static ReplyMarkup TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			ReplyMarkup result = null;
 			switch(constructor) {
+				case 0x48a30254:
+					result = new TL_replyInlineMarkup();
+					break;
 				case 0xa03e5b85:
 					result = new TL_replyKeyboardHide();
 					break;
-				case 0x3502758c:
-					result = new TL_replyKeyboardMarkup();
-					break;
 				case 0xf4108aa0:
 					result = new TL_replyKeyboardForceReply();
 					break;
+				case 0x3502758c:
+					result = new TL_replyKeyboardMarkup();
+					break;
 			}
 			if (result == null && exception) {
 				throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", constructor));
@@ -3493,6 +3676,39 @@ public static ReplyMarkup TLdeserialize(AbstractSerializedData stream, int const
 		}
 	}
 
+	public static class TL_replyInlineMarkup extends ReplyMarkup {
+		public static int constructor = 0x48a30254;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			int magic = stream.readInt32(exception);
+			if (magic != 0x1cb5c415) {
+				if (exception) {
+					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+				}
+				return;
+			}
+			int count = stream.readInt32(exception);
+			for (int a = 0; a < count; a++) {
+				TL_keyboardButtonRow object = TL_keyboardButtonRow.TLdeserialize(stream, stream.readInt32(exception), exception);
+				if (object == null) {
+					return;
+				}
+				rows.add(object);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(0x1cb5c415);
+			int count = rows.size();
+			stream.writeInt32(count);
+			for (int a = 0; a < count; a++) {
+				rows.get(a).serializeToStream(stream);
+			}
+		}
+	}
+
 	public static class TL_replyKeyboardHide extends ReplyMarkup {
 		public static int constructor = 0xa03e5b85;
 
@@ -3509,6 +3725,24 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_replyKeyboardForceReply extends ReplyMarkup {
+		public static int constructor = 0xf4108aa0;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			single_use = (flags & 2) != 0;
+			selective = (flags & 4) != 0;
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = single_use ? (flags | 2) : (flags &~ 2);
+			flags = selective ? (flags | 4) : (flags &~ 4);
+			stream.writeInt32(flags);
+		}
+	}
+
 	public static class TL_replyKeyboardMarkup extends ReplyMarkup {
 		public static int constructor = 0x3502758c;
 
@@ -3550,24 +3784,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_replyKeyboardForceReply extends ReplyMarkup {
-		public static int constructor = 0xf4108aa0;
-
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			flags = stream.readInt32(exception);
-			single_use = (flags & 2) != 0;
-			selective = (flags & 4) != 0;
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			flags = single_use ? (flags | 2) : (flags &~ 2);
-			flags = selective ? (flags | 4) : (flags &~ 4);
-			stream.writeInt32(flags);
-		}
-	}
-
 	public static class contacts_Contacts extends TLObject {
 		public ArrayList<TL_contact> contacts = new ArrayList<>();
 		public ArrayList<User> users = new ArrayList<>();
@@ -3833,6 +4049,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 	public static class ChatFull extends TLObject {
 		public int flags;
 		public boolean can_view_participants;
+		public boolean can_set_username;
 		public int id;
 		public String about;
 		public int participants_count;
@@ -3844,22 +4061,26 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public Photo chat_photo;
 		public PeerNotifySettings notify_settings;
 		public ExportedChatInvite exported_invite;
-		public ChatParticipants participants;
 		public ArrayList<BotInfo> bot_info = new ArrayList<>();
 		public int migrated_from_chat_id;
 		public int migrated_from_max_id;
+		public int pinned_msg_id;
+		public ChatParticipants participants;
 
 		public static ChatFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			ChatFull result = null;
 			switch(constructor) {
-				case 0xfab31aa3:
-					result = new TL_channelFull_old();
+				case 0x97bee562:
+					result = new TL_channelFull();
 					break;
 				case 0x2e02a614:
 					result = new TL_chatFull();
 					break;
 				case 0x9e341ddf:
-					result = new TL_channelFull();
+					result = new TL_channelFull_layer48();
+					break;
+				case 0xfab31aa3:
+					result = new TL_channelFull_old();
 					break;
 			}
 			if (result == null && exception) {
@@ -3872,13 +4093,14 @@ public static ChatFull TLdeserialize(AbstractSerializedData stream, int construc
 		}
 	}
 
-	public static class TL_channelFull_old extends TL_channelFull {
-		public static int constructor = 0xfab31aa3;
+	public static class TL_channelFull extends ChatFull {
+		public static int constructor = 0x97bee562;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			flags = stream.readInt32(exception);
 			can_view_participants = (flags & 8) != 0;
+			can_set_username = (flags & 64) != 0;
 			id = stream.readInt32(exception);
 			about = stream.readString(exception);
 			if ((flags & 1) != 0) {
@@ -3896,11 +4118,36 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
 			notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
 			exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
+			int magic = stream.readInt32(exception);
+			if (magic != 0x1cb5c415) {
+				if (exception) {
+					throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+				}
+				return;
+			}
+			int count = stream.readInt32(exception);
+			for (int a = 0; a < count; a++) {
+				BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+				if (object == null) {
+					return;
+				}
+				bot_info.add(object);
+			}
+			if ((flags & 16) != 0) {
+				migrated_from_chat_id = stream.readInt32(exception);
+			}
+			if ((flags & 16) != 0) {
+				migrated_from_max_id = stream.readInt32(exception);
+			}
+			if ((flags & 32) != 0) {
+				pinned_msg_id = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
 			flags = can_view_participants ? (flags | 8) : (flags &~ 8);
+			flags = can_set_username ? (flags | 64) : (flags &~ 64);
 			stream.writeInt32(flags);
 			stream.writeInt32(id);
 			stream.writeString(about);
@@ -3919,6 +4166,21 @@ public void serializeToStream(AbstractSerializedData stream) {
 			chat_photo.serializeToStream(stream);
 			notify_settings.serializeToStream(stream);
 			exported_invite.serializeToStream(stream);
+			stream.writeInt32(0x1cb5c415);
+			int count = bot_info.size();
+			stream.writeInt32(count);
+			for (int a = 0; a < count; a++) {
+				bot_info.get(a).serializeToStream(stream);
+			}
+			if ((flags & 16) != 0) {
+				stream.writeInt32(migrated_from_chat_id);
+			}
+			if ((flags & 16) != 0) {
+				stream.writeInt32(migrated_from_max_id);
+			}
+			if ((flags & 32) != 0) {
+				stream.writeInt32(pinned_msg_id);
+			}
 		}
 	}
 
@@ -3965,7 +4227,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_channelFull extends ChatFull {
+	public static class TL_channelFull_layer48 extends TL_channelFull {
 		public static int constructor = 0x9e341ddf;
 
 
@@ -4014,7 +4276,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			flags = can_view_participants ? (flags | 8) : (flags &~8);
+			flags = can_view_participants ? (flags | 8) : (flags &~ 8);
 			stream.writeInt32(flags);
 			stream.writeInt32(id);
 			stream.writeString(about);
@@ -4048,6 +4310,56 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_channelFull_old extends TL_channelFull {
+		public static int constructor = 0xfab31aa3;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			can_view_participants = (flags & 8) != 0;
+			id = stream.readInt32(exception);
+			about = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				participants_count = stream.readInt32(exception);
+			}
+			if ((flags & 2) != 0) {
+				admins_count = stream.readInt32(exception);
+			}
+			if ((flags & 4) != 0) {
+				kicked_count = stream.readInt32(exception);
+			}
+			read_inbox_max_id = stream.readInt32(exception);
+			unread_count = stream.readInt32(exception);
+			unread_important_count = stream.readInt32(exception);
+			chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
+			exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = can_view_participants ? (flags | 8) : (flags &~ 8);
+			stream.writeInt32(flags);
+			stream.writeInt32(id);
+			stream.writeString(about);
+			if ((flags & 1) != 0) {
+				stream.writeInt32(participants_count);
+			}
+			if ((flags & 2) != 0) {
+				stream.writeInt32(admins_count);
+			}
+			if ((flags & 4) != 0) {
+				stream.writeInt32(kicked_count);
+			}
+			stream.writeInt32(read_inbox_max_id);
+			stream.writeInt32(unread_count);
+			stream.writeInt32(unread_important_count);
+			chat_photo.serializeToStream(stream);
+			notify_settings.serializeToStream(stream);
+			exported_invite.serializeToStream(stream);
+		}
+	}
+
 	public static class TL_inputPeerNotifySettings extends TLObject {
 		public static int constructor = 0x38935eb2;
 
@@ -4171,23 +4483,123 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_keyboardButton extends TLObject {
-		public static int constructor = 0xa2fa4880;
-
+	public static class KeyboardButton extends TLObject {
 		public String text;
+		public String query;
+		public byte[] data;
+		public String url;
 
-		public static TL_keyboardButton TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			if (TL_keyboardButton.constructor != constructor) {
-				if (exception) {
-					throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButton", constructor));
-				} else {
-					return null;
-				}
+		public static KeyboardButton TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			KeyboardButton result = null;
+			switch(constructor) {
+				case 0xa2fa4880:
+					result = new TL_keyboardButton();
+					break;
+				case 0xea1b7a14:
+					result = new TL_keyboardButtonSwitchInline();
+					break;
+				case 0xb16a6c29:
+					result = new TL_keyboardButtonRequestPhone();
+					break;
+				case 0x683a5e46:
+					result = new TL_keyboardButtonCallback();
+					break;
+				case 0x258aff05:
+					result = new TL_keyboardButtonUrl();
+					break;
+				case 0xfc796b3f:
+					result = new TL_keyboardButtonRequestGeoLocation();
+					break;
+			}
+			if (result == null && exception) {
+				throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", constructor));
+			}
+			if (result != null) {
+				result.readParams(stream, exception);
 			}
-			TL_keyboardButton result = new TL_keyboardButton();
-			result.readParams(stream, exception);
 			return result;
-        }
+		}
+	}
+
+	public static class TL_keyboardButton extends KeyboardButton {
+		public static int constructor = 0xa2fa4880;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+		}
+	}
+
+	public static class TL_keyboardButtonSwitchInline extends KeyboardButton {
+		public static int constructor = 0xea1b7a14;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+			query = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+			stream.writeString(query);
+		}
+	}
+
+	public static class TL_keyboardButtonRequestPhone extends KeyboardButton {
+		public static int constructor = 0xb16a6c29;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+		}
+	}
+
+	public static class TL_keyboardButtonCallback extends KeyboardButton {
+		public static int constructor = 0x683a5e46;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+			data = stream.readByteArray(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+			stream.writeByteArray(data);
+		}
+	}
+
+	public static class TL_keyboardButtonUrl extends KeyboardButton {
+		public static int constructor = 0x258aff05;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+			url = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+			stream.writeString(url);
+		}
+	}
+
+	public static class TL_keyboardButtonRequestGeoLocation extends KeyboardButton {
+		public static int constructor = 0xfc796b3f;
+
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			text = stream.readString(exception);
@@ -4200,21 +4612,39 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class BotInlineMessage extends TLObject {
-		public String caption;
 		public int flags;
+		public GeoPoint geo;
+		public ReplyMarkup reply_markup;
+		public String caption;
 		public boolean no_webpage;
 		public String message;
 		public ArrayList<MessageEntity> entities = new ArrayList<>();
+		public String phone_number;
+		public String first_name;
+		public String last_name;
+		public String title;
+		public String address;
+		public String provider;
+		public String venue_id;
 
 		public static BotInlineMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			BotInlineMessage result = null;
 			switch(constructor) {
-				case 0xfc56e87d:
+				case 0x3a8fd8b8:
+					result = new TL_botInlineMessageMediaGeo();
+					break;
+				case 0xa74b15b:
 					result = new TL_botInlineMessageMediaAuto();
 					break;
-				case 0xa56197a9:
+				case 0x8c7f65e2:
 					result = new TL_botInlineMessageText();
 					break;
+				case 0x35edb4d4:
+					result = new TL_botInlineMessageMediaContact();
+					break;
+				case 0x4366232e:
+					result = new TL_botInlineMessageMediaVenue();
+					break;
 			}
 			if (result == null && exception) {
 				throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", constructor));
@@ -4226,59 +4656,151 @@ public static BotInlineMessage TLdeserialize(AbstractSerializedData stream, int
 		}
 	}
 
+	public static class TL_botInlineMessageMediaGeo extends BotInlineMessage {
+		public static int constructor = 0x3a8fd8b8;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 4) != 0) {
+				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
+			geo.serializeToStream(stream);
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
+		}
+	}
+
 	public static class TL_botInlineMessageMediaAuto extends BotInlineMessage {
-		public static int constructor = 0xfc56e87d;
+		public static int constructor = 0xa74b15b;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
 			caption = stream.readString(exception);
+			if ((flags & 4) != 0) {
+				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
 			stream.writeString(caption);
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
+		}
+	}
+
+	public static class TL_botInlineMessageText extends BotInlineMessage {
+		public static int constructor = 0x8c7f65e2;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			no_webpage = (flags & 1) != 0;
+			message = stream.readString(exception);
+			if ((flags & 2) != 0) {
+				int magic = stream.readInt32(exception);
+				if (magic != 0x1cb5c415) {
+					if (exception) {
+						throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+					}
+					return;
+				}
+				int count = stream.readInt32(exception);
+				for (int a = 0; a < count; a++) {
+					MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
+					if (object == null) {
+						return;
+					}
+					entities.add(object);
+				}
+			}
+			if ((flags & 4) != 0) {
+				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = no_webpage ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
+			stream.writeString(message);
+			if ((flags & 2) != 0) {
+				stream.writeInt32(0x1cb5c415);
+				int count = entities.size();
+				stream.writeInt32(count);
+				for (int a = 0; a < count; a++) {
+					entities.get(a).serializeToStream(stream);
+				}
+			}
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
+		}
+	}
+
+	public static class TL_botInlineMessageMediaContact extends BotInlineMessage {
+		public static int constructor = 0x35edb4d4;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			phone_number = stream.readString(exception);
+			first_name = stream.readString(exception);
+			last_name = stream.readString(exception);
+			if ((flags & 4) != 0) {
+				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
+			stream.writeString(phone_number);
+			stream.writeString(first_name);
+			stream.writeString(last_name);
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
 		}
 	}
 
-	public static class TL_botInlineMessageText extends BotInlineMessage {
-		public static int constructor = 0xa56197a9;
+	public static class TL_botInlineMessageMediaVenue extends BotInlineMessage {
+		public static int constructor = 0x4366232e;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			flags = stream.readInt32(exception);
-			no_webpage = (flags & 1) != 0;
-			message = stream.readString(exception);
-			if ((flags & 2) != 0) {
-				int magic = stream.readInt32(exception);
-				if (magic != 0x1cb5c415) {
-					if (exception) {
-						throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
-					}
-					return;
-				}
-				int count = stream.readInt32(exception);
-				for (int a = 0; a < count; a++) {
-					MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
-					if (object == null) {
-						return;
-					}
-					entities.add(object);
-				}
+			geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
+			title = stream.readString(exception);
+			address = stream.readString(exception);
+			provider = stream.readString(exception);
+			venue_id = stream.readString(exception);
+			if ((flags & 4) != 0) {
+				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
 			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			flags = no_webpage ? (flags | 1) : (flags &~ 1);
 			stream.writeInt32(flags);
-			stream.writeString(message);
-			if ((flags & 2) != 0) {
-				stream.writeInt32(0x1cb5c415);
-				int count = entities.size();
-				stream.writeInt32(count);
-				for (int a = 0; a < count; a++) {
-					entities.get(a).serializeToStream(stream);
-				}
+			geo.serializeToStream(stream);
+			stream.writeString(title);
+			stream.writeString(address);
+			stream.writeString(provider);
+			stream.writeString(venue_id);
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
 			}
 		}
 	}
@@ -4286,7 +4808,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 	public static class TL_keyboardButtonRow extends TLObject {
 		public static int constructor = 0x77608b83;
 
-		public ArrayList<TL_keyboardButton> buttons = new ArrayList<>();
+		public ArrayList<KeyboardButton> buttons = new ArrayList<>();
 
 		public static TL_keyboardButtonRow TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
 			if (TL_keyboardButtonRow.constructor != constructor) {
@@ -4311,7 +4833,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			}
 			int count = stream.readInt32(exception);
 			for (int a = 0; a < count; a++) {
-				TL_keyboardButton object = TL_keyboardButton.TLdeserialize(stream, stream.readInt32(exception), exception);
+				KeyboardButton object = KeyboardButton.TLdeserialize(stream, stream.readInt32(exception), exception);
 				if (object == null) {
 					return;
 				}
@@ -4971,6 +5493,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public int bot_info_version;
 		public boolean restricted;
 		public boolean min;
+		public boolean bot_inline_geo;
 		public String restriction_reason;
 		public String bot_inline_placeholder;
 
@@ -5418,6 +5941,7 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			verified = (flags & 131072) != 0;
 			restricted = (flags & 262144) != 0;
 			min = (flags & 1048576) != 0;
+			bot_inline_geo = (flags & 2097152) != 0;
 			id = stream.readInt32(exception);
 			if ((flags & 1) != 0) {
 				access_hash = stream.readInt64(exception);
@@ -5463,6 +5987,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 			flags = verified ? (flags | 131072) : (flags &~ 131072);
 			flags = restricted ? (flags | 262144) : (flags &~ 262144);
 			flags = min ? (flags | 1048576) : (flags &~ 1048576);
+			flags = bot_inline_geo ? (flags | 2097152) : (flags &~ 2097152);
 			stream.writeInt32(flags);
 			stream.writeInt32(id);
 			if ((flags & 1) != 0) {
@@ -5772,6 +6297,9 @@ public static MessageAction TLdeserialize(AbstractSerializedData stream, int con
 				case 0x95d2ac92:
 					result = new TL_messageActionChannelCreate();
 					break;
+				case 0x94bd38ed:
+					result = new TL_messageActionPinMessage();
+					break;
 				case 0x95e3fbef:
 					result = new TL_messageActionChatDeletePhoto();
 					break;
@@ -6040,6 +6568,15 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messageActionPinMessage extends MessageAction {
+		public static int constructor = 0x94bd38ed;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
 	public static class TL_messageActionChatDeletePhoto extends MessageAction {
 		public static int constructor = 0x95e3fbef;
 
@@ -7972,6 +8509,37 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messages_messageEditData extends TLObject {
+		public static int constructor = 0x26b5dde6;
+
+		public int flags;
+		public boolean caption;
+
+		public static TL_messages_messageEditData TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_messages_messageEditData.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", constructor));
+				} else {
+					return null;
+				}
+			}
+			TL_messages_messageEditData result = new TL_messages_messageEditData();
+			result.readParams(stream, exception);
+			return result;
+		}
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			caption = (flags & 1) != 0;
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = caption ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
+		}
+	}
+
 	public static class TL_contacts_importedContacts extends TLObject {
 		public static int constructor = 0xad524315;
 
@@ -8090,12 +8658,51 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_inlineBotSwitchPM extends TLObject {
+		public static int constructor = 0x3c20629f;
+
+		public String text;
+		public String start_param;
+
+		public static TL_inlineBotSwitchPM TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_inlineBotSwitchPM.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", constructor));
+				} else {
+					return null;
+				}
+			}
+			TL_inlineBotSwitchPM result = new TL_inlineBotSwitchPM();
+			result.readParams(stream, exception);
+			return result;
+		}
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			text = stream.readString(exception);
+			start_param = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(text);
+			stream.writeString(start_param);
+		}
+	}
+
 	public static class Update extends TLObject {
 		public int chat_id;
 		public int user_id;
 		public int inviter_id;
 		public int date;
 		public int version;
+		public int pts;
+		public int pts_count;
+		public long query_id;
+		public byte[] data;
+		public int flags;
+		public String query;
+		public GeoPoint geo;
+		public String offset;
 		public PeerNotifySettings notify_settings;
 		public int channel_id;
 		public SendMessageAction action;
@@ -8106,9 +8713,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public int max_id;
 		public int qts;
 		public boolean enabled;
-		public int pts;
-		public int pts_count;
-		public int id;
 		public long random_id;
 		public ArrayList<TL_dcOption> dc_options = new ArrayList<>();
 		public ChatParticipants participants;
@@ -8130,8 +8734,8 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public ArrayList<Integer> messages = new ArrayList<>();
 		public String phone;
 		public WebPage webpage;
-		public ArrayList<Long> order = new ArrayList<>();
 		public EncryptedChat chat;
+		public ArrayList<Long> order = new ArrayList<>();
 		public int max_date;
 		public UserProfilePhoto photo;
 		public boolean previous;
@@ -8148,6 +8752,12 @@ public static Update TLdeserialize(AbstractSerializedData stream, int constructo
 				case 0x1b3f4df7:
 					result = new TL_updateEditChannelMessage();
 					break;
+				case 0xa68c688c:
+					result = new TL_updateBotCallbackQuery();
+					break;
+				case 0x54826690:
+					result = new TL_updateBotInlineQuery();
+					break;
 				case 0xbec268ef:
 					result = new TL_updateNotifySettings();
 					break;
@@ -8196,6 +8806,9 @@ public static Update TLdeserialize(AbstractSerializedData stream, int constructo
 				case 0xee3b272a:
 					result = new TL_updatePrivacy();
 					break;
+				case 0x2cbd95af:
+					result = new TL_updateInlineBotCallbackQuery();
+					break;
 				case 0x1710f156:
 					result = new TL_updateEncryptedChatTyping();
 					break;
@@ -8208,7 +8821,7 @@ public static Update TLdeserialize(AbstractSerializedData stream, int constructo
 				case 0x98a12b4b:
 					result = new TL_updateChannelMessageViews();
 					break;
-				case 0x60946422:
+				case 0xeb0467fb:
 					result = new TL_updateChannelTooLong();
 					break;
 				case 0x382dd3e4:
@@ -8232,6 +8845,15 @@ public static Update TLdeserialize(AbstractSerializedData stream, int constructo
 				case 0xa7332b73:
 					result = new TL_updateUserName();
 					break;
+				case 0xe48f964:
+					result = new TL_updateBotInlineSend();
+					break;
+				case 0xe40370a3:
+					result = new TL_updateEditMessage();
+					break;
+				case 0x98592475:
+					result = new TL_updateChannelPinnedMessage();
+					break;
 				case 0xc37521c9:
 					result = new TL_updateDeleteChannelMessages();
 					break;
@@ -8329,6 +8951,58 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_updateBotCallbackQuery extends Update {
+		public static int constructor = 0xa68c688c;
+
+		public Peer peer;
+		public int msg_id;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			query_id = stream.readInt64(exception);
+			user_id = stream.readInt32(exception);
+			peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+			msg_id = stream.readInt32(exception);
+			data = stream.readByteArray(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt64(query_id);
+			stream.writeInt32(user_id);
+			peer.serializeToStream(stream);
+			stream.writeInt32(msg_id);
+			stream.writeByteArray(data);
+		}
+	}
+
+	public static class TL_updateBotInlineQuery extends Update {
+		public static int constructor = 0x54826690;
+
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			query_id = stream.readInt64(exception);
+			user_id = stream.readInt32(exception);
+			query = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+			offset = stream.readString(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
+			stream.writeInt64(query_id);
+			stream.writeInt32(user_id);
+			stream.writeString(query);
+			if ((flags & 1) != 0) {
+				geo.serializeToStream(stream);
+			}
+			stream.writeString(offset);
+		}
+	}
+
 	public static class TL_updateNotifySettings extends Update {
 		public static int constructor = 0xbec268ef;
 
@@ -8479,15 +9153,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_updateSavedGifs extends Update {
-		public static int constructor = 0x9375341e;
-
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-		}
-	}
-
 	public static class TL_updateChatAdmins extends Update {
 		public static int constructor = 0x6e947941;
 
@@ -8506,6 +9171,15 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_updateSavedGifs extends Update {
+		public static int constructor = 0x9375341e;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
 	public static class TL_updateNewChannelMessage extends Update {
 		public static int constructor = 0x62ba04d9;
 
@@ -8528,6 +9202,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 	public static class TL_updateMessageID extends Update {
 		public static int constructor = 0x4e90bfd6;
 
+		public int id;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			id = stream.readInt32(exception);
@@ -8623,6 +9298,27 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_updateInlineBotCallbackQuery extends Update {
+		public static int constructor = 0x2cbd95af;
+
+		public TL_inputBotInlineMessageID msg_id;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			query_id = stream.readInt64(exception);
+			user_id = stream.readInt32(exception);
+			msg_id = TL_inputBotInlineMessageID.TLdeserialize(stream, stream.readInt32(exception), exception);
+			data = stream.readByteArray(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt64(query_id);
+			stream.writeInt32(user_id);
+			msg_id.serializeToStream(stream);
+			stream.writeByteArray(data);
+		}
+	}
+
 	public static class TL_updateEncryptedChatTyping extends Update {
 		public static int constructor = 0x1710f156;
 
@@ -8671,6 +9367,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 	public static class TL_updateChannelMessageViews extends Update {
 		public static int constructor = 0x98a12b4b;
 
+		public int id;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
 			channel_id = stream.readInt32(exception);
@@ -8687,16 +9384,24 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_updateChannelTooLong extends Update {
-		public static int constructor = 0x60946422;
+		public static int constructor = 0xeb0467fb;
 
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
 			channel_id = stream.readInt32(exception);
+			if ((flags & 1) != 0) {
+				pts = stream.readInt32(exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
 			stream.writeInt32(channel_id);
+			if ((flags & 1) != 0) {
+				stream.writeInt32(pts);
+			}
 		}
 	}
 
@@ -8830,6 +9535,76 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_updateBotInlineSend extends Update {
+		public static int constructor = 0xe48f964;
+
+		public String id;
+		public TL_inputBotInlineMessageID msg_id;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			user_id = stream.readInt32(exception);
+			query = stream.readString(exception);
+			if ((flags & 1) != 0) {
+				geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+			id = stream.readString(exception);
+			if ((flags & 2) != 0) {
+				msg_id = TL_inputBotInlineMessageID.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
+			stream.writeInt32(user_id);
+			stream.writeString(query);
+			if ((flags & 1) != 0) {
+				geo.serializeToStream(stream);
+			}
+			stream.writeString(id);
+			if ((flags & 2) != 0) {
+				msg_id.serializeToStream(stream);
+			}
+		}
+	}
+
+	public static class TL_updateEditMessage extends Update {
+		public static int constructor = 0xe40370a3;
+
+		public Message message;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
+			pts = stream.readInt32(exception);
+			pts_count = stream.readInt32(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			message.serializeToStream(stream);
+			stream.writeInt32(pts);
+			stream.writeInt32(pts_count);
+		}
+	}
+
+	public static class TL_updateChannelPinnedMessage extends Update {
+		public static int constructor = 0x98592475;
+
+		public int id;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			channel_id = stream.readInt32(exception);
+			id = stream.readInt32(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(channel_id);
+			stream.writeInt32(id);
+		}
+	}
+
 	public static class TL_updateDeleteChannelMessages extends Update {
 		public static int constructor = 0xc37521c9;
 
@@ -10720,12 +11495,13 @@ public void serializeToStream(AbstractSerializedData stream) {
     }
 
 	public static class TL_messages_botResults extends TLObject {
-		public static int constructor = 0x1170b0a3;
+		public static int constructor = 0x256709a6;
 
 		public int flags;
 		public boolean gallery;
 		public long query_id;
 		public String next_offset;
+		public TL_inlineBotSwitchPM switch_pm;
 		public ArrayList<BotInlineResult> results = new ArrayList<>();
 
 		public static TL_messages_botResults TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
@@ -10748,6 +11524,9 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			if ((flags & 2) != 0) {
 				next_offset = stream.readString(exception);
 			}
+			if ((flags & 4) != 0) {
+				switch_pm = TL_inlineBotSwitchPM.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
 			int magic = stream.readInt32(exception);
 			if (magic != 0x1cb5c415) {
 				if (exception) {
@@ -10773,6 +11552,9 @@ public void serializeToStream(AbstractSerializedData stream) {
 			if ((flags & 2) != 0) {
 				stream.writeString(next_offset);
 			}
+			if ((flags & 4) != 0) {
+				switch_pm.serializeToStream(stream);
+			}
 			stream.writeInt32(0x1cb5c415);
 			int count = results.size();
 			stream.writeInt32(count);
@@ -10782,6 +11564,40 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_inputBotInlineMessageID extends TLObject {
+		public static int constructor = 0x890c3d89;
+
+		public int dc_id;
+		public long id;
+		public long access_hash;
+
+		public static TL_inputBotInlineMessageID TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			if (TL_inputBotInlineMessageID.constructor != constructor) {
+				if (exception) {
+					throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", constructor));
+				} else {
+					return null;
+				}
+			}
+			TL_inputBotInlineMessageID result = new TL_inputBotInlineMessageID();
+			result.readParams(stream, exception);
+			return result;
+		}
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			dc_id = stream.readInt32(exception);
+			id = stream.readInt64(exception);
+			access_hash = stream.readInt64(exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeInt32(dc_id);
+			stream.writeInt64(id);
+			stream.writeInt64(access_hash);
+		}
+	}
+
 	public static class TL_messages_foundGifs extends TLObject {
 		public static int constructor = 0x450a1c0a;
 
@@ -12310,6 +13126,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		public boolean democracy;
 		public boolean signatures;
 		public String restriction_reason;
+		public boolean min;
 		public InputChannel migrated_to;
 		public String address;
 		public String venue;
@@ -12338,7 +13155,7 @@ public static Chat TLdeserialize(AbstractSerializedData stream, int constructor,
 					result = new TL_chatEmpty();
 					break;
 				case 0x4b1b7506:
-					result = new TL_channel();
+					result = new TL_channel_layer48();
 					break;
 				case 0x75eaea5a:
 					result = new TL_geoChat();
@@ -12346,6 +13163,9 @@ public static Chat TLdeserialize(AbstractSerializedData stream, int constructor,
 				case 0x2d85832c:
 					result = new TL_channelForbidden();
 					break;
+				case 0xa14dca52:
+					result = new TL_channel();
+					break;
 				case 0x6e9c9bc7:
 					result = new TL_chat_old();
 					break;
@@ -12413,6 +13233,71 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_channel extends Chat {
+		public static int constructor = 0xa14dca52;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			creator = (flags & 1) != 0;
+			kicked = (flags & 2) != 0;
+			left = (flags & 4) != 0;
+			editor = (flags & 8) != 0;
+			moderator = (flags & 16) != 0;
+			broadcast = (flags & 32) != 0;
+			verified = (flags & 128) != 0;
+			megagroup = (flags & 256) != 0;
+			restricted = (flags & 512) != 0;
+			democracy = (flags & 1024) != 0;
+			signatures = (flags & 2048) != 0;
+			min = (flags & 4096) != 0;
+			id = stream.readInt32(exception);
+			if ((flags & 8192) != 0) {
+				access_hash = stream.readInt64(exception);
+			}
+			title = stream.readString(exception);
+			if ((flags & 64) != 0) {
+				username = stream.readString(exception);
+			}
+			photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
+			date = stream.readInt32(exception);
+			version = stream.readInt32(exception);
+			if ((flags & 512) != 0) {
+				restriction_reason = stream.readString(exception);
+			}
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = creator ? (flags | 1) : (flags &~ 1);
+			flags = kicked ? (flags | 2) : (flags &~ 2);
+			flags = left ? (flags | 4) : (flags &~ 4);
+			flags = editor ? (flags | 8) : (flags &~ 8);
+			flags = moderator ? (flags | 16) : (flags &~ 16);
+			flags = broadcast ? (flags | 32) : (flags &~ 32);
+			flags = verified ? (flags | 128) : (flags &~ 128);
+			flags = megagroup ? (flags | 256) : (flags &~ 256);
+			flags = restricted ? (flags | 512) : (flags &~ 512);
+			flags = democracy ? (flags | 1024) : (flags &~ 1024);
+			flags = signatures ? (flags | 2048) : (flags &~ 2048);
+			flags = min ? (flags | 4096) : (flags &~ 4096);
+			stream.writeInt32(flags);
+			stream.writeInt32(id);
+			if ((flags & 8192) != 0) {
+				stream.writeInt64(access_hash);
+			}
+			stream.writeString(title);
+			if ((flags & 64) != 0) {
+				stream.writeString(username);
+			}
+			photo.serializeToStream(stream);
+			stream.writeInt32(date);
+			stream.writeInt32(version);
+			if ((flags & 512) != 0) {
+				stream.writeString(restriction_reason);
+			}
+		}
+	}
+
 	public static class TL_channel_old extends TL_channel {
 		public static int constructor = 0x678e9587;
 
@@ -12600,7 +13485,7 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_channel extends Chat {
+	public static class TL_channel_layer48 extends TL_channel {
 		public static int constructor = 0x4b1b7506;
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
@@ -12879,6 +13764,58 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class auth_CodeType extends TLObject {
+
+		public static auth_CodeType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
+			auth_CodeType result = null;
+			switch(constructor) {
+				case 0x72a3158c:
+					result = new TL_auth_codeTypeSms();
+					break;
+				case 0x741cd3e3:
+					result = new TL_auth_codeTypeCall();
+					break;
+				case 0x226ccefb:
+					result = new TL_auth_codeTypeFlashCall();
+					break;
+			}
+			if (result == null && exception) {
+				throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", constructor));
+			}
+			if (result != null) {
+				result.readParams(stream, exception);
+			}
+			return result;
+		}
+	}
+
+	public static class TL_auth_codeTypeSms extends auth_CodeType {
+		public static int constructor = 0x72a3158c;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
+	public static class TL_auth_codeTypeCall extends auth_CodeType {
+		public static int constructor = 0x741cd3e3;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
+	public static class TL_auth_codeTypeFlashCall extends auth_CodeType {
+		public static int constructor = 0x226ccefb;
+
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+		}
+	}
+
 	public static class MessagesFilter extends TLObject {
 
 		public static MessagesFilter TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
@@ -13326,37 +14263,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_account_sentChangePhoneCode extends TLObject {
-		public static int constructor = 0xa4f58c4c;
-
-		public String phone_code_hash;
-		public int send_call_timeout;
-
-		public static TL_account_sentChangePhoneCode TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-            if (TL_account_sentChangePhoneCode.constructor != constructor) {
-				if (exception) {
-					throw new RuntimeException(String.format("can't parse magic %x in TL_account_sentChangePhoneCode", constructor));
-				} else {
-					return null;
-				}
-			}
-			TL_account_sentChangePhoneCode result = new TL_account_sentChangePhoneCode();
-			result.readParams(stream, exception);
-			return result;
-		}
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-            phone_code_hash = stream.readString(exception);
-			send_call_timeout = stream.readInt32(exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeString(phone_code_hash);
-			stream.writeInt32(send_call_timeout);
-		}
-	}
-
 	public static class messages_SavedGifs extends TLObject {
 		public int hash;
 		public ArrayList<Document> gifs = new ArrayList<>();
@@ -13707,13 +14613,15 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_userFull extends TLObject {
-		public static int constructor = 0x5a89ac5b;
+		public static int constructor = 0x5932fc03;
 
+		public int flags;
+		public boolean blocked;
 		public User user;
+		public String about;
 		public TL_contacts_link link;
 		public Photo profile_photo;
 		public PeerNotifySettings notify_settings;
-		public boolean blocked;
 		public BotInfo bot_info;
 
 		public static TL_userFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
@@ -13730,22 +14638,38 @@ public static TL_userFull TLdeserialize(AbstractSerializedData stream, int const
 		}
 
 		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			blocked = (flags & 1) != 0;
 			user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
-            link = TL_contacts_link.TLdeserialize(stream, stream.readInt32(exception), exception);
-			profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 2) != 0) {
+				about = stream.readString(exception);
+			}
+			link = TL_contacts_link.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 4) != 0) {
+				profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
 			notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
-            blocked = stream.readBool(exception);
-			bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 8) != 0) {
+				bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+			}
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-            user.serializeToStream(stream);
+			flags = blocked ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
+			user.serializeToStream(stream);
+			if ((flags & 2) != 0) {
+				stream.writeString(about);
+			}
 			link.serializeToStream(stream);
-            profile_photo.serializeToStream(stream);
+			if ((flags & 4) != 0) {
+				profile_photo.serializeToStream(stream);
+			}
 			notify_settings.serializeToStream(stream);
-			stream.writeBool(blocked);
-			bot_info.serializeToStream(stream);
+			if ((flags & 8) != 0) {
+				bot_info.serializeToStream(stream);
+			}
 		}
 	}
 
@@ -14196,37 +15120,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_channels_messageEditData extends TLObject {
-		public static int constructor = 0x67e1255f;
-
-		public int flags;
-		public boolean caption;
-
-		public static TL_channels_messageEditData TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
-			if (TL_channels_messageEditData.constructor != constructor) {
-				if (exception) {
-					throw new RuntimeException(String.format("can't parse magic %x in TL_channels_messageEditData", constructor));
-				} else {
-					return null;
-				}
-			}
-			TL_channels_messageEditData result = new TL_channels_messageEditData();
-			result.readParams(stream, exception);
-			return result;
-		}
-
-		public void readParams(AbstractSerializedData stream, boolean exception) {
-			flags = stream.readInt32(exception);
-			caption = (flags & 1) != 0;
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			flags = caption ? (flags | 1) : (flags &~ 1);
-			stream.writeInt32(flags);
-		}
-	}
-
 	public static class TL_inputEncryptedChat extends TLObject {
 		public static int constructor = 0xf141b5e1;
 
@@ -15114,45 +16007,34 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_auth_sendCode extends TLObject {
-		public static int constructor = 0x768d5f4d;
+		public static int constructor = 0xccfd70cf;
 
+		public int flags;
+		public boolean allow_flashcall;
 		public String phone_number;
-		public int sms_type;
+		public boolean current_number;
 		public int api_id;
 		public String api_hash;
 		public String lang_code;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return auth_SentCode.TLdeserialize(stream, constructor, exception);
+			return TL_auth_sentCode.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			flags = allow_flashcall ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
 			stream.writeString(phone_number);
-            stream.writeInt32(sms_type);
+			if ((flags & 1) != 0) {
+				stream.writeBool(current_number);
+			}
 			stream.writeInt32(api_id);
 			stream.writeString(api_hash);
 			stream.writeString(lang_code);
 		}
 	}
 
-	public static class TL_auth_sendCall extends TLObject {
-		public static int constructor = 0x3c51564;
-
-		public String phone_number;
-		public String phone_code_hash;
-
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeString(phone_number);
-			stream.writeString(phone_code_hash);
-		}
-	}
-
 	public static class TL_auth_signUp extends TLObject {
 		public static int constructor = 0x1b067634;
 
@@ -15386,19 +16268,29 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_account_updateProfile extends TLObject {
-		public static int constructor = 0xf0888d68;
+		public static int constructor = 0x78515775;
 
+		public int flags;
 		public String first_name;
 		public String last_name;
+		public String about;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-            return User.TLdeserialize(stream, constructor, exception);
+			return User.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			stream.writeString(first_name);
-			stream.writeString(last_name);
+			stream.writeInt32(flags);
+			if ((flags & 1) != 0) {
+				stream.writeString(first_name);
+			}
+			if ((flags & 2) != 0) {
+				stream.writeString(last_name);
+			}
+			if ((flags & 4) != 0) {
+				stream.writeString(about);
+			}
 		}
 	}
 
@@ -16069,13 +16961,43 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_messages_reportSpam extends TLObject {
-		public static int constructor = 0xcf1592db;
+	public static class TL_messages_reportSpam extends TLObject {
+		public static int constructor = 0xcf1592db;
+
+		public InputPeer peer;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Bool.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			peer.serializeToStream(stream);
+		}
+	}
+
+	public static class TL_messages_hideReportSpam extends TLObject {
+		public static int constructor = 0xa8f1709b;
+
+		public InputPeer peer;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Bool.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			peer.serializeToStream(stream);
+		}
+	}
+
+	public static class TL_messages_getPeerSettings extends TLObject {
+		public static int constructor = 0x3672e09c;
 
 		public InputPeer peer;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
+			return TL_peerSettings.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
@@ -16864,23 +17786,6 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_auth_sendSms extends TLObject {
-		public static int constructor = 0xda9f3e8;
-
-		public String phone_number;
-		public String phone_code_hash;
-
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return Bool.TLdeserialize(stream, constructor, exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			stream.writeString(phone_number);
-			stream.writeString(phone_code_hash);
-		}
-	}
-
 	public static class TL_messages_readMessageContents extends TLObject {
 		public static int constructor = 0x36a73f77;
 
@@ -17044,17 +17949,25 @@ public void serializeToStream(AbstractSerializedData stream) {
     }
 
 	public static class TL_account_sendChangePhoneCode extends TLObject {
-        public static int constructor = 0xa407a8f4;
+		public static int constructor = 0x8e57deb;
 
+		public int flags;
+		public boolean allow_flashcall;
 		public String phone_number;
+		public boolean current_number;
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return TL_account_sentChangePhoneCode.TLdeserialize(stream, constructor, exception);
+			return TL_auth_sentCode.TLdeserialize(stream, constructor, exception);
 		}
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			flags = allow_flashcall ? (flags | 1) : (flags &~ 1);
+			stream.writeInt32(flags);
 			stream.writeString(phone_number);
+			if ((flags & 1) != 0) {
+				stream.writeBool(current_number);
+			}
 		}
 	}
 
@@ -17255,6 +18168,40 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_auth_resendCode extends TLObject {
+		public static int constructor = 0x3ef1a9bf;
+
+		public String phone_number;
+		public String phone_code_hash;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return TL_auth_sentCode.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(phone_number);
+			stream.writeString(phone_code_hash);
+		}
+	}
+
+	public static class TL_auth_cancelCode extends TLObject {
+		public static int constructor = 0x1f040578;
+
+		public String phone_number;
+		public String phone_code_hash;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Bool.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			stream.writeString(phone_number);
+			stream.writeString(phone_code_hash);
+		}
+	}
+
     public static class TL_messages_exportChatInvite extends TLObject {
         public static int constructor = 0x7d885289;
 
@@ -17447,9 +18394,12 @@ public void serializeToStream(AbstractSerializedData stream) {
 	}
 
 	public static class TL_messages_getInlineBotResults extends TLObject {
-		public static int constructor = 0x9324600d;
+		public static int constructor = 0x514e999d;
 
+		public int flags;
 		public InputUser bot;
+		public InputPeer peer;
+		public InputGeoPoint geo_point;
 		public String query;
 		public String offset;
 
@@ -17459,7 +18409,12 @@ public TLObject deserializeResponse(AbstractSerializedData stream, int construct
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
+			stream.writeInt32(flags);
 			bot.serializeToStream(stream);
+			peer.serializeToStream(stream);
+			if ((flags & 1) != 0) {
+				geo_point.serializeToStream(stream);
+			}
 			stream.writeString(query);
 			stream.writeString(offset);
 		}
@@ -17484,10 +18439,10 @@ public TLObject deserializeResponse(AbstractSerializedData stream, int construct
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			stream.writeInt32(flags);
 			flags = broadcast ? (flags | 16) : (flags &~ 16);
 			flags = silent ? (flags | 32) : (flags &~ 32);
 			flags = background ? (flags | 64) : (flags &~ 64);
+			stream.writeInt32(flags);
 			peer.serializeToStream(stream);
 			if ((flags & 1) != 0) {
 				stream.writeInt32(reply_to_msg_id);
@@ -17498,6 +18453,139 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
+	public static class TL_messages_getMessageEditData extends TLObject {
+		public static int constructor = 0xfda68d36;
+
+		public InputPeer peer;
+		public int id;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return TL_messages_messageEditData.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			peer.serializeToStream(stream);
+			stream.writeInt32(id);
+		}
+	}
+
+	public static class TL_messages_editMessage extends TLObject {
+		public static int constructor = 0xce91e4ca;
+
+		public int flags;
+		public boolean no_webpage;
+		public InputPeer peer;
+		public int id;
+		public String message;
+		public ReplyMarkup reply_markup;
+		public ArrayList<MessageEntity> entities = new ArrayList<>();
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Updates.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = no_webpage ? (flags | 2) : (flags &~ 2);
+			stream.writeInt32(flags);
+			peer.serializeToStream(stream);
+			stream.writeInt32(id);
+			if ((flags & 2048) != 0) {
+				stream.writeString(message);
+			}
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
+			if ((flags & 8) != 0) {
+				stream.writeInt32(0x1cb5c415);
+				int count = entities.size();
+				stream.writeInt32(count);
+				for (int a = 0; a < count; a++) {
+					entities.get(a).serializeToStream(stream);
+				}
+			}
+		}
+	}
+
+	public static class TL_messages_getBotCallbackAnswer extends TLObject {
+		public static int constructor = 0xa6e94f04;
+
+		public InputPeer peer;
+		public int msg_id;
+		public byte[] data;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return TL_messages_botCallbackAnswer.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			peer.serializeToStream(stream);
+			stream.writeInt32(msg_id);
+			stream.writeByteArray(data);
+		}
+	}
+
+	public static class TL_messages_setBotCallbackAnswer extends TLObject {
+		public static int constructor = 0x481c591a;
+
+		public int flags;
+		public boolean alert;
+		public long query_id;
+		public String message;
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Bool.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = alert ? (flags | 2) : (flags &~ 2);
+			stream.writeInt32(flags);
+			stream.writeInt64(query_id);
+			if ((flags & 1) != 0) {
+				stream.writeString(message);
+			}
+		}
+	}
+
+	public static class TL_messages_editInlineBotMessage extends TLObject {
+		public static int constructor = 0x130c2c85;
+
+		public int flags;
+		public boolean no_webpage;
+		public TL_inputBotInlineMessageID id;
+		public String message;
+		public ReplyMarkup reply_markup;
+		public ArrayList<MessageEntity> entities = new ArrayList<>();
+
+		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
+			return Bool.TLdeserialize(stream, constructor, exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = no_webpage ? (flags | 2) : (flags &~ 2);
+			stream.writeInt32(flags);
+			id.serializeToStream(stream);
+			if ((flags & 2048) != 0) {
+				stream.writeString(message);
+			}
+			if ((flags & 4) != 0) {
+				reply_markup.serializeToStream(stream);
+			}
+			if ((flags & 8) != 0) {
+				stream.writeInt32(0x1cb5c415);
+				int count = entities.size();
+				stream.writeInt32(count);
+				for (int a = 0; a < count; a++) {
+					entities.get(a).serializeToStream(stream);
+				}
+			}
+		}
+	}
+
     public static class TL_help_getAppChangelog extends TLObject {
 		public static int constructor = 0x5bab7fb2;
 
@@ -18088,32 +19176,13 @@ public void serializeToStream(AbstractSerializedData stream) {
 		}
 	}
 
-	public static class TL_channels_getMessageEditData extends TLObject {
-		public static int constructor = 0x27ea3a28;
-
-		public InputChannel channel;
-		public int id;
-
-		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
-			return TL_channels_messageEditData.TLdeserialize(stream, constructor, exception);
-		}
-
-		public void serializeToStream(AbstractSerializedData stream) {
-			stream.writeInt32(constructor);
-			channel.serializeToStream(stream);
-			stream.writeInt32(id);
-		}
-	}
-
-	public static class TL_channels_editMessage extends TLObject {
-		public static int constructor = 0xdcda80ed;
+	public static class TL_channels_updatePinnedMessage extends TLObject {
+		public static int constructor = 0xa72ded52;
 
 		public int flags;
-		public boolean no_webpage;
+		public boolean silent;
 		public InputChannel channel;
 		public int id;
-		public String message;
-		public ArrayList<MessageEntity> entities = new ArrayList<>();
 
 		public TLObject deserializeResponse(AbstractSerializedData stream, int constructor, boolean exception) {
 			return Updates.TLdeserialize(stream, constructor, exception);
@@ -18121,19 +19190,10 @@ public TLObject deserializeResponse(AbstractSerializedData stream, int construct
 
 		public void serializeToStream(AbstractSerializedData stream) {
 			stream.writeInt32(constructor);
-			flags = no_webpage ? (flags | 2) : (flags &~ 2);
+			flags = silent ? (flags | 1) : (flags &~ 1);
 			stream.writeInt32(flags);
 			channel.serializeToStream(stream);
 			stream.writeInt32(id);
-			stream.writeString(message);
-			if ((flags & 8) != 0) {
-				stream.writeInt32(0x1cb5c415);
-				int count = entities.size();
-				stream.writeInt32(count);
-				for (int a = 0; a < count; a++) {
-					entities.get(a).serializeToStream(stream);
-				}
-			}
 		}
 	}
 
@@ -18345,8 +19405,6 @@ public static EncryptedChat TLdeserialize(AbstractSerializedData stream, int con
         public Peer to_id;
         public int date;
         public MessageAction action;
-		//public Peer fwd_from_id;
-        //public int fwd_date;
         public int reply_to_msg_id;
 		public long reply_to_random_id;
         public String message;
@@ -18404,7 +19462,7 @@ public static Message TLdeserialize(AbstractSerializedData stream, int construct
 					result = new TL_message_old7();
 					break;
                 case 0xc06b9607:
-					result = new TL_messageService();
+					result = new TL_messageService_layer48();
 					break;
                 case 0x83e5de54:
                     result = new TL_messageEmpty();
@@ -18430,6 +19488,9 @@ public static Message TLdeserialize(AbstractSerializedData stream, int construct
                 case 0x555555F8:
                     result = new TL_message_secret_old(); //custom
                     break;
+				case 0x9e19a1f6:
+					result = new TL_messageService();
+					break;
 				case 0xf07814c8:
 					result = new TL_message_old5(); //custom
 					break;
@@ -18528,6 +19589,8 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			message = stream.readString(exception);
 			if ((flags & 512) != 0) {
 				media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
+			} else {
+				media = new TL_messageMediaEmpty();
 			}
 			if ((flags & 64) != 0) {
 				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
@@ -18678,6 +19741,8 @@ public void readParams(AbstractSerializedData stream, boolean exception) {
 			message = stream.readString(exception);
 			if ((flags & 512) != 0) {
 				media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
+			} else {
+				media = new TL_messageMediaEmpty();
 			}
 			if ((flags & 64) != 0) {
 				reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
@@ -19152,7 +20217,7 @@ public void serializeToStream(AbstractSerializedData stream) {
         }
     }
 
-	public static class TL_messageService extends Message {
+	public static class TL_messageService_layer48 extends TL_messageService {
 		public static int constructor = 0xc06b9607;
 
 
@@ -19576,6 +20641,51 @@ public void serializeToStream(AbstractSerializedData stream) {
             stream.writeString(attachPath);
         }
     }
+
+	public static class TL_messageService extends Message {
+		public static int constructor = 0x9e19a1f6;
+
+		public void readParams(AbstractSerializedData stream, boolean exception) {
+			flags = stream.readInt32(exception);
+			unread = (flags & 1) != 0;
+			out = (flags & 2) != 0;
+			mentioned = (flags & 16) != 0;
+			media_unread = (flags & 32) != 0;
+			silent = (flags & 8192) != 0;
+			post = (flags & 16384) != 0;
+			id = stream.readInt32(exception);
+			if ((flags & 256) != 0) {
+				from_id = stream.readInt32(exception);
+			}
+			to_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+			if ((flags & 8) != 0) {
+				reply_to_msg_id = stream.readInt32(exception);
+			}
+			date = stream.readInt32(exception);
+			action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
+		}
+
+		public void serializeToStream(AbstractSerializedData stream) {
+			stream.writeInt32(constructor);
+			flags = unread ? (flags | 1) : (flags &~ 1);
+			flags = out ? (flags | 2) : (flags &~ 2);
+			flags = mentioned ? (flags | 16) : (flags &~ 16);
+			flags = media_unread ? (flags | 32) : (flags &~ 32);
+			flags = silent ? (flags | 8192) : (flags &~ 8192);
+			flags = post ? (flags | 16384) : (flags &~ 16384);
+			stream.writeInt32(flags);
+			stream.writeInt32(id);
+			if ((flags & 256) != 0) {
+				stream.writeInt32(from_id);
+			}
+			to_id.serializeToStream(stream);
+			if ((flags & 8) != 0) {
+				stream.writeInt32(reply_to_msg_id);
+			}
+			stream.writeInt32(date);
+			action.serializeToStream(stream);
+		}
+	}
     //Message end
 
     //TL_dialog start
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 1c76bc86d..692259feb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -12,21 +12,17 @@
 import android.content.res.Configuration;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
-import android.text.TextUtils;
-import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.util.ArrayList;
@@ -44,21 +40,23 @@ public boolean canOpenMenu() {
     }
 
     private ImageView backButtonImageView;
-    private TextView titleTextView;
-    private TextView subTitleTextView;
+    private SimpleTextView titleTextView;
+    private SimpleTextView subtitleTextView;
     private View actionModeTop;
     private ActionBarMenu menu;
     private ActionBarMenu actionMode;
     private boolean occupyStatusBar = Build.VERSION.SDK_INT >= 21;
     private boolean actionModeVisible;
     private boolean addToContainer = true;
+    private boolean interceptTouches = true;
+    private int extraHeight;
 
     private boolean allowOverlayTitle;
     private CharSequence lastTitle;
     private boolean castShadows = true;
 
     protected boolean isSearchFieldVisible;
-    protected int itemsBackgroundResourceId;
+    protected int itemsBackgroundColor;
     private boolean isBackOverlayVisible;
     protected BaseFragment parentFragment;
     public ActionBarMenuOnItemClick actionBarMenuOnItemClick;
@@ -73,7 +71,7 @@ private void createBackButtonImage() {
         }
         backButtonImageView = new ImageView(getContext());
         backButtonImageView.setScaleType(ImageView.ScaleType.CENTER);
-        backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+        backButtonImageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(itemsBackgroundColor));
         backButtonImageView.setPadding(AndroidUtilities.dp(1), 0, 0, 0);
         addView(backButtonImageView, LayoutHelper.createFrame(54, 54, Gravity.LEFT | Gravity.TOP));
 
@@ -110,18 +108,14 @@ public void setBackButtonImage(int resource) {
         backButtonImageView.setImageResource(resource);
     }
 
-    private void createSubtitleTextView() {
-        if (subTitleTextView != null) {
+    private void createsubtitleTextView() {
+        if (subtitleTextView != null) {
             return;
         }
-        subTitleTextView = new TextView(getContext());
-        subTitleTextView.setGravity(Gravity.LEFT);
-        subTitleTextView.setTextColor(0xffd7e8f7);
-        subTitleTextView.setSingleLine(true);
-        subTitleTextView.setLines(1);
-        subTitleTextView.setMaxLines(1);
-        subTitleTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(subTitleTextView, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
+        subtitleTextView = new SimpleTextView(getContext());
+        subtitleTextView.setGravity(Gravity.LEFT);
+        subtitleTextView.setTextColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
+        addView(subtitleTextView, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
     }
 
     public void setAddToContainer(boolean value) {
@@ -133,12 +127,12 @@ public boolean getAddToContainer() {
     }
 
     public void setSubtitle(CharSequence value) {
-        if (value != null && subTitleTextView == null) {
-            createSubtitleTextView();
+        if (value != null && subtitleTextView == null) {
+            createsubtitleTextView();
         }
-        if (subTitleTextView != null) {
-            subTitleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : INVISIBLE);
-            subTitleTextView.setText(value);
+        if (subtitleTextView != null) {
+            subtitleTextView.setVisibility(value != null && !isSearchFieldVisible ? VISIBLE : INVISIBLE);
+            subtitleTextView.setText(value);
         }
     }
 
@@ -146,12 +140,8 @@ private void createTitleTextView() {
         if (titleTextView != null) {
             return;
         }
-        titleTextView = new TextView(getContext());
+        titleTextView = new SimpleTextView(getContext());
         titleTextView.setGravity(Gravity.LEFT);
-        titleTextView.setLines(1);
-        titleTextView.setMaxLines(1);
-        titleTextView.setSingleLine(true);
-        titleTextView.setEllipsize(TextUtils.TruncateAt.END);
         titleTextView.setTextColor(0xffffffff);
         titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         addView(titleTextView, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
@@ -168,18 +158,14 @@ public void setTitle(CharSequence value) {
         }
     }
 
-    public TextView getSubTitleTextView() {
-        return subTitleTextView;
+    public SimpleTextView getSubtitleTextView() {
+        return subtitleTextView;
     }
 
-    public TextView getTitleTextView() {
+    public SimpleTextView getTitleTextView() {
         return titleTextView;
     }
 
-    public Drawable getSubTitleIcon() {
-        return subTitleTextView.getCompoundDrawables()[0];
-    }
-
     public String getTitle() {
         if (titleTextView == null) {
             return null;
@@ -258,8 +244,8 @@ public void onAnimationEnd(Object animation) {
                     if (titleTextView != null) {
                         titleTextView.setVisibility(INVISIBLE);
                     }
-                    if (subTitleTextView != null) {
-                        subTitleTextView.setVisibility(INVISIBLE);
+                    if (subtitleTextView != null) {
+                        subtitleTextView.setVisibility(INVISIBLE);
                     }
                     if (menu != null) {
                         menu.setVisibility(INVISIBLE);
@@ -275,8 +261,8 @@ public void onAnimationEnd(Object animation) {
             if (titleTextView != null) {
                 titleTextView.setVisibility(INVISIBLE);
             }
-            if (subTitleTextView != null) {
-                subTitleTextView.setVisibility(INVISIBLE);
+            if (subtitleTextView != null) {
+                subtitleTextView.setVisibility(INVISIBLE);
             }
             if (menu != null) {
                 menu.setVisibility(INVISIBLE);
@@ -287,7 +273,7 @@ public void onAnimationEnd(Object animation) {
             if (drawable instanceof BackDrawable) {
                 ((BackDrawable) drawable).setRotation(1, true);
             }
-            backButtonImageView.setBackgroundResource(R.drawable.bar_selector_mode);
+            backButtonImageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(itemsBackgroundColor));
         }
     }
 
@@ -324,8 +310,8 @@ public void onAnimationEnd(Object animation) {
         if (titleTextView != null) {
             titleTextView.setVisibility(VISIBLE);
         }
-        if (subTitleTextView != null) {
-            subTitleTextView.setVisibility(VISIBLE);
+        if (subtitleTextView != null) {
+            subtitleTextView.setVisibility(VISIBLE);
         }
         if (menu != null) {
             menu.setVisibility(VISIBLE);
@@ -335,7 +321,7 @@ public void onAnimationEnd(Object animation) {
             if (drawable instanceof BackDrawable) {
                 ((BackDrawable) drawable).setRotation(0, true);
             }
-            backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+            backButtonImageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(itemsBackgroundColor));
         }
     }
 
@@ -361,8 +347,8 @@ protected void onSearchFieldVisibilityChanged(boolean visible) {
         if (titleTextView != null) {
             titleTextView.setVisibility(visible ? INVISIBLE : VISIBLE);
         }
-        if (subTitleTextView != null) {
-            subTitleTextView.setVisibility(visible ? INVISIBLE : VISIBLE);
+        if (subtitleTextView != null) {
+            subtitleTextView.setVisibility(visible ? INVISIBLE : VISIBLE);
         }
         Drawable drawable = backButtonImageView.getDrawable();
         if (drawable != null && drawable instanceof MenuDrawable) {
@@ -370,6 +356,14 @@ protected void onSearchFieldVisibilityChanged(boolean visible) {
         }
     }
 
+    public void setInterceptTouches(boolean value) {
+        interceptTouches = value;
+    }
+
+    public void setExtraHeight(int value) {
+        extraHeight = value;
+    }
+
     public void closeSearchField() {
         if (!isSearchFieldVisible || menu == null) {
             return;
@@ -391,7 +385,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int actionBarHeight = getCurrentActionBarHeight();
         int actionBarHeightSpec = MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.EXACTLY);
 
-        setMeasuredDimension(width, actionBarHeight + (occupyStatusBar ? AndroidUtilities.statusBarHeight : 0));
+        setMeasuredDimension(width, actionBarHeight + (occupyStatusBar ? AndroidUtilities.statusBarHeight : 0) + extraHeight);
 
         int textLeft;
         if (backButtonImageView != null && backButtonImageView.getVisibility() != GONE) {
@@ -411,24 +405,24 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             menu.measure(menuWidth, actionBarHeightSpec);
         }
 
-        if (titleTextView != null && titleTextView.getVisibility() != GONE || subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
+        if (titleTextView != null && titleTextView.getVisibility() != GONE || subtitleTextView != null && subtitleTextView.getVisibility() != GONE) {
             int availableWidth = width - (menu != null ? menu.getMeasuredWidth() : 0) - AndroidUtilities.dp(16) - textLeft;
 
             if (titleTextView != null && titleTextView.getVisibility() != GONE) {
-                titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, !AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 18 : 20);
-                titleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.AT_MOST));
+                titleTextView.setTextSize(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 18 : 20);
+                titleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24), MeasureSpec.AT_MOST));
 
             }
-            if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
-                subTitleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, !AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 14 : 16);
-                subTitleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(actionBarHeight, MeasureSpec.AT_MOST));
+            if (subtitleTextView != null && subtitleTextView.getVisibility() != GONE) {
+                subtitleTextView.setTextSize(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 14 : 16);
+                subtitleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20), MeasureSpec.AT_MOST));
             }
         }
 
         int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             View child = getChildAt(i);
-            if (child.getVisibility() == GONE || child == titleTextView || child == subTitleTextView || child == menu || child == backButtonImageView) {
+            if (child.getVisibility() == GONE || child == titleTextView || child == subtitleTextView || child == menu || child == backButtonImageView) {
                 continue;
             }
             measureChildWithMargins(child, widthMeasureSpec, 0, MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY), 0);
@@ -452,25 +446,24 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
             menu.layout(menuLeft, additionalTop, menuLeft + menu.getMeasuredWidth(), additionalTop + menu.getMeasuredHeight());
         }
 
-        int offset = AndroidUtilities.dp(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 1 : 2);
         if (titleTextView != null && titleTextView.getVisibility() != GONE) {
             int textTop;
-            if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
-                textTop = (getCurrentActionBarHeight() / 2 - titleTextView.getMeasuredHeight()) / 2 + offset;
+            if (subtitleTextView != null && subtitleTextView.getVisibility() != GONE) {
+                textTop = (getCurrentActionBarHeight() / 2 - titleTextView.getTextHeight()) / 2 + AndroidUtilities.dp(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 2 : 3);
             } else {
-                textTop = (getCurrentActionBarHeight() - titleTextView.getMeasuredHeight()) / 2 - AndroidUtilities.dp(1);
+                textTop = (getCurrentActionBarHeight() - titleTextView.getTextHeight()) / 2;
             }
-            titleTextView.layout(textLeft, additionalTop + textTop, textLeft + titleTextView.getMeasuredWidth(), additionalTop + textTop + titleTextView.getMeasuredHeight());
+            titleTextView.layout(textLeft, additionalTop + textTop, textLeft + titleTextView.getMeasuredWidth(), additionalTop + textTop + titleTextView.getTextHeight());
         }
-        if (subTitleTextView != null && subTitleTextView.getVisibility() != GONE) {
-            int textTop = getCurrentActionBarHeight() / 2 + (getCurrentActionBarHeight() / 2 - subTitleTextView.getMeasuredHeight()) / 2 - offset;
-            subTitleTextView.layout(textLeft, additionalTop + textTop, textLeft + subTitleTextView.getMeasuredWidth(), additionalTop + textTop + subTitleTextView.getMeasuredHeight());
+        if (subtitleTextView != null && subtitleTextView.getVisibility() != GONE) {
+            int textTop = getCurrentActionBarHeight() / 2 + (getCurrentActionBarHeight() / 2 - subtitleTextView.getTextHeight()) / 2 - AndroidUtilities.dp(!AndroidUtilities.isTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE ? 1 : 1);
+            subtitleTextView.layout(textLeft, additionalTop + textTop, textLeft + subtitleTextView.getMeasuredWidth(), additionalTop + textTop + subtitleTextView.getTextHeight());
         }
 
         int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             View child = getChildAt(i);
-            if (child.getVisibility() == GONE || child == titleTextView || child == subTitleTextView || child == menu || child == backButtonImageView) {
+            if (child.getVisibility() == GONE || child == titleTextView || child == subtitleTextView || child == menu || child == backButtonImageView) {
                 continue;
             }
 
@@ -563,10 +556,10 @@ public boolean getOccupyStatusBar() {
         return occupyStatusBar;
     }
 
-    public void setItemsBackground(int resourceId) {
-        itemsBackgroundResourceId = resourceId;
+    public void setItemsBackgroundColor(int color) {
+        itemsBackgroundColor = color;
         if (backButtonImageView != null) {
-            backButtonImageView.setBackgroundResource(itemsBackgroundResourceId);
+            backButtonImageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(itemsBackgroundColor));
         }
     }
 
@@ -580,8 +573,7 @@ public boolean getCastShadows() {
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
-        super.onTouchEvent(event);
-        return true;
+        return super.onTouchEvent(event) || interceptTouches;
     }
 
     public static int getCurrentActionBarHeight() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index a3aa8f879..2eab94314 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -28,6 +28,7 @@
 import android.widget.LinearLayout;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -248,7 +249,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         }
 
         final int restoreCount = canvas.save();
-        if (!transitionAnimationInProgress && clipLeft != 0 && clipRight != 0) {
+        if (!transitionAnimationInProgress) {
             canvas.clipRect(clipLeft, 0, clipRight, getHeight());
         }
         final boolean result = super.drawChild(canvas, child, drawingTime);
@@ -427,7 +428,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                             distToMove = containerView.getMeasuredWidth() - x;
                             animatorSet.playTogether(
                                     ObjectAnimatorProxy.ofFloat(containerView, "translationX", containerView.getMeasuredWidth()),
-                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float)containerView.getMeasuredWidth())
+                                    ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float) containerView.getMeasuredWidth())
                             );
                         } else {
                             distToMove = x;
@@ -443,11 +444,6 @@ public boolean onTouchEvent(MotionEvent ev) {
                             public void onAnimationEnd(Object animator) {
                                 onSlideAnimationEnd(backAnimation);
                             }
-
-                            @Override
-                            public void onAnimationCancel(Object animator) {
-                                onSlideAnimationEnd(backAnimation);
-                            }
                         });
                         animatorSet.start();
                         animationInProgress = true;
@@ -693,11 +689,6 @@ public void run() {
                     public void onAnimationEnd(Object animation) {
                         onAnimationEndCheck(false);
                     }
-
-                    @Override
-                    public void onAnimationCancel(Object animation) {
-                        onAnimationEndCheck(false);
-                    }
                 });
                 currentAnimation.start();
             } else {
@@ -716,6 +707,7 @@ public void run() {
                         ViewProxy.setTranslationX(containerView, 0);
                     }
                 };
+                FileLog.e("tmessages", "onOpenAnimationsStart");
                 fragment.onTransitionAnimationStart(true, false);
                 AnimatorSetProxy animation = fragment.onCustomTransitionAnimation(true, new Runnable() {
                     @Override
@@ -838,6 +830,7 @@ public void closeLastFragment(boolean animated) {
             layoutParams.width = LayoutHelper.MATCH_PARENT;
             layoutParams.height = LayoutHelper.MATCH_PARENT;
             fragmentView.setLayoutParams(layoutParams);
+            FileLog.e("tmessages", "onCloseAnimationStart");
             previousFragment.onTransitionAnimationStart(true, true);
             currentFragment.onTransitionAnimationStart(false, false);
             previousFragment.onResume();
@@ -927,12 +920,8 @@ public void onAnimationStart(Object animation) {
                     public void onAnimationEnd(Object animation) {
                         onAnimationEndCheck(false);
                     }
-
-                    @Override
-                    public void onAnimationCancel(Object animation) {
-                        onAnimationEndCheck(false);
-                    }
                 });
+                FileLog.e("tmessages", "onCloseAnimationsStart");
                 currentAnimation.start();
             } else {
                 removeFragmentFromStackInternal(currentFragment);
@@ -1058,11 +1047,13 @@ private void onCloseAnimationEnd(boolean post) {
             if (post) {
                 new Handler().post(new Runnable() {
                     public void run() {
+                        FileLog.e("tmessages", "onCloseAnimationEnd");
                         onCloseAnimationEndRunnable.run();
                         onCloseAnimationEndRunnable = null;
                     }
                 });
             } else {
+                FileLog.e("tmessages", "onCloseAnimationEnd");
                 onCloseAnimationEndRunnable.run();
                 onCloseAnimationEndRunnable = null;
             }
@@ -1076,11 +1067,13 @@ private void onOpenAnimationEnd(boolean post) {
             if (post) {
                 new Handler().post(new Runnable() {
                     public void run() {
+                        FileLog.e("tmessages", "onOpenAnimationEnd");
                         onOpenAnimationEndRunnable.run();
                         onOpenAnimationEndRunnable = null;
                     }
                 });
             } else {
+                FileLog.e("tmessages", "onOpenAnimationEnd");
                 onOpenAnimationEndRunnable.run();
                 onOpenAnimationEndRunnable = null;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index 374c1ee3a..bc9516e4d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -38,7 +38,7 @@ public View addItemResource(int id, int resourceId) {
         addView(view);
         LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) view.getLayoutParams();
         layoutParams.height = LayoutHelper.MATCH_PARENT;
-        view.setBackgroundResource(parentActionBar.itemsBackgroundResourceId);
+        view.setBackgroundDrawable(Theme.createBarSelectorDrawable(parentActionBar.itemsBackgroundColor));
         view.setLayoutParams(layoutParams);
         view.setOnClickListener(new OnClickListener() {
             @Override
@@ -50,23 +50,23 @@ public void onClick(View view) {
     }
 
     public ActionBarMenuItem addItem(int id, Drawable drawable) {
-        return addItem(id, 0, parentActionBar.itemsBackgroundResourceId, drawable, AndroidUtilities.dp(48));
+        return addItem(id, 0, parentActionBar.itemsBackgroundColor, drawable, AndroidUtilities.dp(48));
     }
 
     public ActionBarMenuItem addItem(int id, int icon) {
-        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId);
+        return addItem(id, icon, parentActionBar.itemsBackgroundColor);
     }
 
-    public ActionBarMenuItem addItem(int id, int icon, int backgroundResource) {
-        return addItem(id, icon, backgroundResource, null, AndroidUtilities.dp(48));
+    public ActionBarMenuItem addItem(int id, int icon, int backgroundColor) {
+        return addItem(id, icon, backgroundColor, null, AndroidUtilities.dp(48));
     }
 
     public ActionBarMenuItem addItemWithWidth(int id, int icon, int width) {
-        return addItem(id, icon, parentActionBar.itemsBackgroundResourceId, null, width);
+        return addItem(id, icon, parentActionBar.itemsBackgroundColor, null, width);
     }
 
-    public ActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawable drawable, int width) {
-        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, backgroundResource);
+    public ActionBarMenuItem addItem(int id, int icon, int backgroundColor, Drawable drawable, int width) {
+        ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, backgroundColor);
         menuItem.setTag(id);
         if (drawable != null) {
             menuItem.iconView.setImageDrawable(drawable);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index 40618db78..350d9a89e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -85,9 +85,11 @@ public void onSearchPressed(EditText editText) {
     protected boolean overrideMenuClick;
     private boolean processedPopupClick;
 
-    public ActionBarMenuItem(Context context, ActionBarMenu menu, int background) {
+    public ActionBarMenuItem(Context context, ActionBarMenu menu, int backgroundColor) {
         super(context);
-        setBackgroundResource(background);
+        if (backgroundColor != 0) {
+            setBackgroundDrawable(Theme.createBarSelectorDrawable(backgroundColor));
+        }
         parentMenu = menu;
 
         iconView = new ImageView(context);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 46631c952..126612e3d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -19,7 +19,6 @@
 
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
 import org.telegram.tgnet.ConnectionsManager;
 
 public class BaseFragment {
@@ -116,14 +115,19 @@ protected void setParentLayout(ActionBarLayout layout) {
                 }
             }
             if (parentLayout != null && actionBar == null) {
-                actionBar = new ActionBar(parentLayout.getContext());
+                actionBar = createActionBar(parentLayout.getContext());
                 actionBar.parentFragment = this;
-                actionBar.setBackgroundColor(0xff54759e);
-                actionBar.setItemsBackground(R.drawable.bar_selector);
             }
         }
     }
 
+    protected ActionBar createActionBar(Context context) {
+        ActionBar actionBar = new ActionBar(context);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_SELECTOR_COLOR);
+        return actionBar;
+    }
+
     public void finishFragment() {
         finishFragment(true);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
index 270add2ec..7f9b294e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BottomSheet.java
@@ -56,11 +56,13 @@
 
     private LinearLayout containerView;
     private FrameLayout container;
-    private Object lastInsets;
+    private WindowInsets lastInsets;
 
     private boolean dismissed;
     private int tag;
 
+    private boolean disableBackground;
+
     private DialogInterface.OnClickListener onClickListener;
 
     private CharSequence[] items;
@@ -70,20 +72,21 @@
     private boolean fullWidth;
     private boolean isGrid;
     private ColorDrawable backgroundDrawable = new ColorDrawable(0xff000000);
-    private static Drawable shadowDrawable;
 
     private boolean focusable;
 
     private Paint ciclePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
 
-    private static int backgroundPaddingTop;
-    private static int backgroundPaddingLeft;
+    private Drawable shadowDrawable;
+    protected static int backgroundPaddingTop;
+    protected static int backgroundPaddingLeft;
 
     private boolean useRevealAnimation;
     private float revealRadius;
     private int revealX;
     private int revealY;
-    private boolean applyTopPaddings = true;
+    private boolean applyTopPadding = true;
+    private boolean applyBottomPadding = true;
 
     private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
     private AccelerateInterpolator accelerateInterpolator = new AccelerateInterpolator();
@@ -212,7 +215,17 @@ public void setTextAndIcon(CharSequence text, int icon) {
     }
 
     public BottomSheet(Context context, boolean needFocus) {
-        super(context);
+        super(context, R.style.TransparentDialog);
+
+        if (Build.VERSION.SDK_INT >= 21 && !"N".equals(Build.VERSION.CODENAME)) {
+            getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
+        }
+
+        Rect padding = new Rect();
+        shadowDrawable = context.getResources().getDrawable(R.drawable.sheet_shadow);
+        shadowDrawable.getPadding(padding);
+        backgroundPaddingLeft = padding.left;
+        backgroundPaddingTop = padding.top;
 
         container = new FrameLayout(getContext()) {
 
@@ -227,12 +240,17 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 if (containerView != null) {
                     int left = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingLeft;
                     if (!fullWidth) {
+                        int widthSpec;
                         if (AndroidUtilities.isTablet()) {
-                            int side = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.8f);
-                            containerView.measure(MeasureSpec.makeMeasureSpec(side + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+                            widthSpec = MeasureSpec.makeMeasureSpec((int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.8f) + left * 2, MeasureSpec.EXACTLY);
+                        } else {
+                            widthSpec = MeasureSpec.makeMeasureSpec(isPortrait ? width + left * 2 : (int) Math.max(width * 0.8f, Math.min(AndroidUtilities.dp(480), width)) + left * 2, MeasureSpec.EXACTLY);
+                        }
+                        if (lastInsets != null && Build.VERSION.SDK_INT >= 21 && focusable) {
+                            containerView.getLayoutParams();
+                            containerView.measure(widthSpec, MeasureSpec.makeMeasureSpec(height - lastInsets.getSystemWindowInsetBottom(), MeasureSpec.AT_MOST));
                         } else {
-                            int maxWidth = Math.min(AndroidUtilities.dp(480), width);
-                            containerView.measure(isPortrait ? MeasureSpec.makeMeasureSpec(width + left * 2, MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec((int) Math.max(width * 0.8f, maxWidth) + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+                            containerView.measure(widthSpec, MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
                         }
                     } else {
                         containerView.measure(MeasureSpec.makeMeasureSpec(width + left * 2, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
@@ -245,9 +263,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                         continue;
                     }
                     if (lastInsets != null && Build.VERSION.SDK_INT >= 21) {
-                        WindowInsets wi = (WindowInsets) lastInsets;
-                        wi = wi.replaceSystemWindowInsets(wi.getSystemWindowInsetLeft(), wi.getSystemWindowInsetTop(), 0, wi.getSystemWindowInsetBottom());
-                        child.dispatchApplyWindowInsets(wi);
+                        child.dispatchApplyWindowInsets(lastInsets);
                     }
                     measureChildWithMargins(child, MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY), 0, MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY), 0);
                 }
@@ -258,6 +274,13 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
                 if (containerView != null) {
                     int l = ((right - left) - containerView.getMeasuredWidth()) / 2;
                     int t = (bottom - top) - containerView.getMeasuredHeight();
+                    if (lastInsets != null && Build.VERSION.SDK_INT >= 21) {
+                        l += lastInsets.getSystemWindowInsetLeft() / 2;
+                        l -= lastInsets.getSystemWindowInsetRight() / 2;
+                        if (focusable) {
+                            t -= lastInsets.getSystemWindowInsetBottom();
+                        }
+                    }
                     containerView.layout(l, t, l + containerView.getMeasuredWidth(), t + getMeasuredHeight());
                 }
 
@@ -321,14 +344,14 @@ public boolean onTouch(View v, MotionEvent event) {
         });
         container.setBackgroundDrawable(backgroundDrawable);
         focusable = needFocus;
-        if (Build.VERSION.SDK_INT >= 21 && !focusable) {
+        if (Build.VERSION.SDK_INT >= 21 && !"N".equals(Build.VERSION.CODENAME)) {
             container.setFitsSystemWindows(true);
             container.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() {
                 @SuppressLint("NewApi")
                 @Override
                 public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
                     lastInsets = insets;
-                    container.requestLayout();
+                    v.requestLayout();
                     return insets.consumeSystemWindowInsets();
                 }
             });
@@ -341,18 +364,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         Window window = getWindow();
-        window.setBackgroundDrawableResource(R.drawable.transparent);
-        window.requestFeature(Window.FEATURE_NO_TITLE);
         window.setWindowAnimations(R.style.DialogNoAnimation);
-
-        if (shadowDrawable == null) {
-            Rect padding = new Rect();
-            shadowDrawable = getContext().getResources().getDrawable(R.drawable.sheet_shadow);
-            shadowDrawable.getPadding(padding);
-            backgroundPaddingLeft = padding.left;
-            backgroundPaddingTop = padding.top;
-        }
-
         setContentView(container, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
 
         ciclePaint.setColor(0xffffffff);
@@ -363,8 +375,6 @@ protected void onCreate(Bundle savedInstanceState) {
             protected void onDraw(Canvas canvas) {
                 if (useRevealAnimation && Build.VERSION.SDK_INT <= 19) {
                     canvas.drawCircle(revealX, revealY, revealRadius, ciclePaint);
-                    //shadowDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                    //shadowDrawable.draw(canvas);
                 }
             }
 
@@ -373,6 +383,11 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 return super.drawChild(canvas, child, drawingTime);
             }
         };
+        if (Build.VERSION.SDK_INT >= 21) {
+            containerView.setFitsSystemWindows(true);
+        }
+        containerView.setVisibility(View.INVISIBLE);
+        backgroundDrawable.setAlpha(0);
         containerView.setWillNotDraw(false);
         containerView.setOrientation(LinearLayout.VERTICAL);
         container.addView(containerView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM));
@@ -456,20 +471,18 @@ public void onClick(View v) {
             }
         }
 
-        WindowManager.LayoutParams params = getWindow().getAttributes();
+        WindowManager.LayoutParams params = window.getAttributes();
         params.width = ViewGroup.LayoutParams.MATCH_PARENT;
         params.gravity = Gravity.TOP | Gravity.LEFT;
+        params.dimAmount = 0;
+        params.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;
         if (!focusable) {
             params.flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
-            params.dimAmount = 0;
-            params.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;
-        } else {
-            params.dimAmount = 0.2f;
         }
         if (Build.VERSION.SDK_INT < 21) {
             params.height = ViewGroup.LayoutParams.MATCH_PARENT;
         }
-        getWindow().setAttributes(params);
+        window.setAttributes(params);
     }
 
     @Override
@@ -479,14 +492,14 @@ public void show() {
             getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
         }
         dismissed = false;
-        if (Build.VERSION.SDK_INT >= 21 || !useRevealAnimation) {
+        if ((Build.VERSION.SDK_INT >= 21 || !useRevealAnimation) && !disableBackground) {
             containerView.setBackgroundDrawable(shadowDrawable);
         } else {
             containerView.setBackgroundDrawable(null);
         }
-        int left = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingLeft;
-        int top = useRevealAnimation && Build.VERSION.SDK_INT <= 19 ? 0 : backgroundPaddingTop;
-        containerView.setPadding(left, (applyTopPaddings ? AndroidUtilities.dp(8) : 0) + top, left, (applyTopPaddings ? AndroidUtilities.dp(isGrid ? 16 : 8) : 0));
+        int left = useRevealAnimation && Build.VERSION.SDK_INT <= 19 || disableBackground ? 0 : backgroundPaddingLeft;
+        int top = useRevealAnimation && Build.VERSION.SDK_INT <= 19 || disableBackground ? 0 : backgroundPaddingTop;
+        containerView.setPadding(left, (applyTopPadding ? AndroidUtilities.dp(8) : 0) + top, left, (applyBottomPadding ? AndroidUtilities.dp(isGrid ? 16 : 8) : 0));
         if (Build.VERSION.SDK_INT >= 21) {
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
@@ -499,6 +512,26 @@ public void run() {
         }
     }
 
+    public void setCustomView(View view) {
+        customView = view;
+    }
+
+    public void setTitle(CharSequence value) {
+        title = value;
+    }
+
+    public void setApplyTopPadding(boolean value) {
+        applyTopPadding = value;
+    }
+
+    public void setApplyBottomPadding(boolean value) {
+        applyBottomPadding = value;
+    }
+
+    public void setDisableBackground(boolean value) {
+        disableBackground = value;
+    }
+
     protected void setRevealRadius(float radius) {
         revealRadius = radius;
         delegate.onRevealAnimationProgress(!dismissed, radius, revealX, revealY);
@@ -513,12 +546,6 @@ protected float getRevealRadius() {
 
     @SuppressLint("NewApi")
     private void startRevealAnimation(final boolean open) {
-        if (open) {
-            backgroundDrawable.setAlpha(0);
-            containerView.setVisibility(View.VISIBLE);
-        } else {
-            backgroundDrawable.setAlpha(51);
-        }
         ViewProxy.setTranslationY(containerView, 0);
 
         AnimatorSet animatorSet = new AnimatorSet();
@@ -610,11 +637,6 @@ public void onAnimationEnd(Animator animation) {
                     }
                 }
             }
-
-            @Override
-            public void onAnimationCancel(Animator animation) {
-                onAnimationEnd(animation);
-            }
         });
         animatorSet.start();
     }
@@ -626,6 +648,8 @@ private void startOpenAnimation() {
         if (containerView.getMeasuredHeight() == 0) {
             containerView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.AT_MOST), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.y, View.MeasureSpec.AT_MOST));
         }
+        backgroundDrawable.setAlpha(0);
+        containerView.setVisibility(View.VISIBLE);
         if (useRevealAnimation) {
             startRevealAnimation(true);
         } else {
@@ -634,7 +658,7 @@ private void startOpenAnimation() {
             AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
             animatorSetProxy.playTogether(
                     ObjectAnimatorProxy.ofFloat(containerView, "translationY", 0),
-                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", focusable ? 0 : 51));
+                    ObjectAnimatorProxy.ofInt(backgroundDrawable, "alpha", 51));
             animatorSetProxy.setDuration(200);
             animatorSetProxy.setStartDelay(20);
             animatorSetProxy.setInterpolator(new DecelerateInterpolator());
@@ -706,11 +730,6 @@ public void run() {
                     }
                 });
             }
-
-            @Override
-            public void onAnimationCancel(Object animation) {
-                onAnimationEnd(animation);
-            }
         });
         animatorSetProxy.start();
     }
@@ -722,6 +741,7 @@ public void dismiss() {
         }
         dismissed = true;
         if (useRevealAnimation) {
+            backgroundDrawable.setAlpha(51);
             startRevealAnimation(false);
         } else {
             AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
@@ -745,11 +765,6 @@ public void run() {
                         }
                     });
                 }
-
-                @Override
-                public void onAnimationCancel(Object animation) {
-                    onAnimationEnd(animation);
-                }
             });
             animatorSetProxy.start();
         }
@@ -821,8 +836,13 @@ public Builder setIsGrid(boolean value) {
             return this;
         }
 
-        public Builder setApplyTopPaddings(boolean value) {
-            bottomSheet.applyTopPaddings = value;
+        public Builder setApplyTopPadding(boolean value) {
+            bottomSheet.applyTopPadding = value;
+            return this;
+        }
+
+        public Builder setApplyBottomPadding(boolean value) {
+            bottomSheet.applyBottomPadding = value;
             return this;
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index 55dcbc3e0..f70a67e1a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -70,23 +70,23 @@ public DrawerLayoutContainer(Context context) {
 
         if (Build.VERSION.SDK_INT >= 21) {
             setFitsSystemWindows(true);
-            setOnApplyWindowInsetsListener(new InsetsListener());
+            setOnApplyWindowInsetsListener(new OnApplyWindowInsetsListener() {
+                @SuppressLint("NewApi")
+                @Override
+                public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
+                    final DrawerLayoutContainer drawerLayout = (DrawerLayoutContainer) v;
+                    lastInsets = insets;
+                    drawerLayout.setWillNotDraw(insets.getSystemWindowInsetTop() <= 0 && getBackground() == null);
+                    drawerLayout.requestLayout();
+                    return insets.consumeSystemWindowInsets();
+                }
+            });
             setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
         }
 
         shadowLeft = getResources().getDrawable(R.drawable.menu_shadow);
     }
 
-    @SuppressLint("NewApi")
-    private class InsetsListener implements View.OnApplyWindowInsetsListener {
-        @Override
-        public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {
-            final DrawerLayoutContainer drawerLayout = (DrawerLayoutContainer) v;
-            drawerLayout.setChildInsets(insets, insets.getSystemWindowInsetTop() > 0);
-            return insets.consumeSystemWindowInsets();
-        }
-    }
-
     @SuppressLint("NewApi")
     private void dispatchChildInsets(View child, Object insets, int drawerGravity) {
         WindowInsets wi = (WindowInsets) insets;
@@ -119,12 +119,6 @@ private int getTopInset(Object insets) {
         return 0;
     }
 
-    private void setChildInsets(Object insets, boolean draw) {
-        lastInsets = insets;
-        setWillNotDraw(!draw && getBackground() == null);
-        requestLayout();
-    }
-
     public void setDrawerLayout(ViewGroup layout) {
         drawerLayout = layout;
         addView(drawerLayout);
@@ -187,11 +181,6 @@ public void openDrawer(boolean fast) {
             public void onAnimationEnd(Object animator) {
                 onDrawerAnimationEnd(true);
             }
-
-            @Override
-            public void onAnimationCancel(Object animator) {
-                onDrawerAnimationEnd(true);
-            }
         });
         animatorSet.start();
         currentAnimation = animatorSet;
@@ -214,11 +203,6 @@ public void closeDrawer(boolean fast) {
             public void onAnimationEnd(Object animator) {
                 onDrawerAnimationEnd(false);
             }
-
-            @Override
-            public void onAnimationCancel(Object animator) {
-                onDrawerAnimationEnd(false);
-            }
         });
         animatorSet.start();
     }
@@ -381,6 +365,7 @@ public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
         inLayout = true;
+        FileLog.w("tmessages", "onLayout");
         final int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             final View child = getChildAt(i);
@@ -407,6 +392,10 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
     @Override
     public void requestLayout() {
         if (!inLayout) {
+            /*StackTraceElement[] elements = Thread.currentThread().getStackTrace();
+            for (int a = 0; a < elements.length; a++) {
+                FileLog.d("tmessages", "on " + elements[a]);
+            }*/
             super.requestLayout();
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/SimpleTextView.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/SimpleTextView.java
new file mode 100644
index 000000000..cdda2c80c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/SimpleTextView.java
@@ -0,0 +1,281 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.ActionBar;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.SpannableStringBuilder;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.Gravity;
+import android.view.View;
+
+import org.telegram.messenger.AndroidUtilities;
+
+public class SimpleTextView extends View implements Drawable.Callback {
+
+    private Layout layout;
+    private TextPaint textPaint;
+    private int gravity = Gravity.LEFT | Gravity.TOP;
+    private CharSequence text;
+    private SpannableStringBuilder spannableStringBuilder;
+    private Drawable leftDrawable;
+    private Drawable rightDrawable;
+    private int drawablePadding = AndroidUtilities.dp(4);
+    private int leftDrawableTopPadding;
+    private int rightDrawableTopPadding;
+
+    private int offsetX;
+    private int textWidth;
+    private int textHeight;
+    private boolean wasLayout;
+
+    public enum Alignment {
+        ALIGN_NORMAL,
+        ALIGN_OPPOSITE,
+        ALIGN_CENTER,
+        ALIGN_LEFT,
+        ALIGN_RIGHT
+    }
+
+    public SimpleTextView(Context context) {
+        super(context);
+        textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+    }
+
+    public void setTextColor(int color) {
+        textPaint.setColor(color);
+        invalidate();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        wasLayout = false;
+    }
+
+    public void setTextSize(int size) {
+        int newSize = AndroidUtilities.dp(size);
+        if (newSize == textPaint.getTextSize()) {
+            return;
+        }
+        textPaint.setTextSize(newSize);
+        recreateLayoutMaybe();
+    }
+
+    public void setGravity(int value) {
+        gravity = value;
+    }
+
+    public void setTypeface(Typeface typeface) {
+        textPaint.setTypeface(typeface);
+    }
+
+    public int getSideDrawablesSize() {
+        int size = 0;
+        if (leftDrawable != null) {
+            size += leftDrawable.getIntrinsicWidth() + drawablePadding;
+        }
+        if (rightDrawable != null) {
+            size += rightDrawable.getIntrinsicWidth() + drawablePadding;
+        }
+        return size;
+    }
+
+    public Paint getPaint() {
+        return textPaint;
+    }
+
+    private void createLayout(int width) {
+        if (text != null) {
+            try {
+                if (leftDrawable != null) {
+                    width -= leftDrawable.getIntrinsicWidth();
+                    width -= drawablePadding;
+                }
+                if (rightDrawable != null) {
+                    width -= rightDrawable.getIntrinsicWidth();
+                    width -= drawablePadding;
+                }
+                width -= getPaddingLeft() + getPaddingRight();
+                CharSequence string = TextUtils.ellipsize(text, textPaint, width, TextUtils.TruncateAt.END);
+                if (layout != null && TextUtils.equals(layout.getText(), string)) {
+                    return;
+                }
+                layout = new StaticLayout(string, 0, string.length(), textPaint, width + AndroidUtilities.dp(8), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+                if (layout.getLineCount() > 0) {
+                    textWidth = (int) Math.ceil(layout.getLineWidth(0));
+                    textHeight = layout.getLineBottom(0);
+                    if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.LEFT) {
+                        offsetX = -(int) layout.getLineLeft(0);
+                    } else if (layout.getLineLeft(0) == 0) {
+                        offsetX = width - textWidth;
+                    } else {
+                        offsetX = 0;
+                    }
+                }
+            } catch (Exception e) {
+                //ignore
+            }
+        } else {
+            layout = null;
+            textWidth = 0;
+            textHeight = 0;
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int height = MeasureSpec.getSize(heightMeasureSpec);
+        createLayout(width - getPaddingLeft() - getPaddingRight());
+
+        int finalHeight;
+        if (MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.EXACTLY) {
+            finalHeight = height;
+        } else {
+            finalHeight = textHeight;
+        }
+        setMeasuredDimension(width, finalHeight);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (changed) {
+            wasLayout = true;
+        }
+    }
+
+    public int getTextWidth() {
+        return textWidth;
+    }
+
+    public int getTextHeight() {
+        return textHeight;
+    }
+
+    public void setLeftDrawableTopPadding(int value) {
+        leftDrawableTopPadding = value;
+    }
+
+    public void setRightDrawableTopPadding(int value) {
+        rightDrawableTopPadding = value;
+    }
+
+    public void setLeftDrawable(int resId) {
+        setLeftDrawable(resId == 0 ? null : getContext().getResources().getDrawable(resId));
+    }
+
+    public void setRightDrawable(int resId) {
+        setRightDrawable(resId == 0 ? null : getContext().getResources().getDrawable(resId));
+    }
+
+    public void setLeftDrawable(Drawable drawable) {
+        if (leftDrawable == drawable) {
+            return;
+        }
+        if (leftDrawable != null) {
+            leftDrawable.setCallback(null);
+        }
+        leftDrawable = drawable;
+        if (drawable != null) {
+            drawable.setCallback(this);
+        }
+        recreateLayoutMaybe();
+    }
+
+    public void setRightDrawable(Drawable drawable) {
+        if (rightDrawable == drawable) {
+            return;
+        }
+        if (rightDrawable != null) {
+            rightDrawable.setCallback(null);
+        }
+        rightDrawable = drawable;
+        if (drawable != null) {
+            drawable.setCallback(this);
+        }
+        recreateLayoutMaybe();
+    }
+
+    public void setText(CharSequence value) {
+        if (text == null && value == null || text != null && value != null && text.equals(value)) {
+            return;
+        }
+        text = value;
+        recreateLayoutMaybe();
+    }
+
+    public void setDrawablePadding(int value) {
+        if (drawablePadding == value) {
+            return;
+        }
+        drawablePadding = value;
+        recreateLayoutMaybe();
+    }
+
+    private void recreateLayoutMaybe() {
+        if (wasLayout) {
+            createLayout(getMeasuredWidth());
+            invalidate();
+        } else {
+            requestLayout();
+        }
+    }
+
+    public CharSequence getText() {
+        if (text == null) {
+            return "";
+        }
+        return text;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        int textOffsetX = 0;
+        if (leftDrawable != null) {
+            int y = (textHeight - leftDrawable.getIntrinsicHeight()) / 2 + leftDrawableTopPadding;
+            leftDrawable.setBounds(0, y, leftDrawable.getIntrinsicWidth(), y + leftDrawable.getIntrinsicHeight());
+            leftDrawable.draw(canvas);
+            if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.LEFT) {
+                textOffsetX += drawablePadding + leftDrawable.getIntrinsicWidth();
+            }
+        }
+        if (rightDrawable != null) {
+            int x = textOffsetX + textWidth + drawablePadding;
+            if (leftDrawable != null) {
+                x += drawablePadding + leftDrawable.getIntrinsicWidth();
+            }
+            int y = (textHeight - rightDrawable.getIntrinsicHeight()) / 2 + rightDrawableTopPadding;
+            rightDrawable.setBounds(x, y, x + rightDrawable.getIntrinsicWidth(), y + rightDrawable.getIntrinsicHeight());
+            rightDrawable.draw(canvas);
+        }
+        if (layout != null) {
+            if (offsetX + textOffsetX != 0) {
+                canvas.save();
+                canvas.translate(offsetX + textOffsetX, 0);
+            }
+            layout.draw(canvas);
+            if (offsetX + textOffsetX != 0) {
+                canvas.restore();
+            }
+        }
+    }
+
+    @Override
+    public void invalidateDrawable(Drawable who) {
+        invalidate();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
new file mode 100644
index 000000000..c529c9e16
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/Theme.java
@@ -0,0 +1,419 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.ActionBar;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.RippleDrawable;
+import android.graphics.drawable.StateListDrawable;
+import android.os.Build;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.R;
+
+public class Theme {
+
+    public static final int ACTION_BAR_COLOR = 0xff527da3;
+    public static final int ACTION_BAR_PHOTO_VIEWER_COLOR = 0x7f000000;
+    public static final int ACTION_BAR_MEDIA_PICKER_COLOR = 0xff333333;
+    public static final int ACTION_BAR_CHANNEL_INTRO_COLOR = 0xffffffff;
+    public static final int ACTION_BAR_PLAYER_COLOR = 0xffffffff;
+    public static final int ACTION_BAR_TITLE_COLOR = 0xffffffff;
+    public static final int ACTION_BAR_SUBTITLE_COLOR = 0xffd5e8f7;
+    public static final int ACTION_BAR_PROFILE_COLOR = 0xff598fba;
+    public static final int ACTION_BAR_PROFILE_SUBTITLE_COLOR = 0xffd7eafa;
+    public static final int ACTION_BAR_MAIN_AVATAR_COLOR = 0xff5085b1;
+    public static final int ACTION_BAR_ACTION_MODE_TEXT_COLOR = 0xff737373;
+    public static final int ACTION_BAR_SELECTOR_COLOR = 0xff406d94;
+
+    public static final int INPUT_FIELD_SELECTOR_COLOR = 0xffd6d6d6;
+    public static final int ACTION_BAR_PICKER_SELECTOR_COLOR = 0xff3d3d3d;
+    public static final int ACTION_BAR_WHITE_SELECTOR_COLOR = 0x40ffffff;
+    public static final int ACTION_BAR_AUDIO_SELECTOR_COLOR = 0x2f000000;
+    public static final int ACTION_BAR_CHANNEL_INTRO_SELECTOR_COLOR = 0x2f000000;
+    public static final int ACTION_BAR_MODE_SELECTOR_COLOR = 0xfff0f0f0;
+    public static final int ACTION_BAR_BLUE_SELECTOR_COLOR = 0xff4981ad;
+    public static final int ACTION_BAR_CYAN_SELECTOR_COLOR = 0xff39849d;
+    public static final int ACTION_BAR_GREEN_SELECTOR_COLOR = 0xff48953d;
+    public static final int ACTION_BAR_ORANGE_SELECTOR_COLOR = 0xffe67429;
+    public static final int ACTION_BAR_PINK_SELECTOR_COLOR = 0xffd44e7b;
+    public static final int ACTION_BAR_RED_SELECTOR_COLOR = 0xffbc4b41;
+    public static final int ACTION_BAR_VIOLET_SELECTOR_COLOR = 0xff735fbe;
+    public static final int ACTION_BAR_YELLOW_SELECTOR_COLOR = 0xffef9f09;
+
+
+
+    public static final int CHAT_UNREAD_TEXT_COLOR = 0xff5695cc;
+    public static final int CHAT_ADD_CONTACT_TEXT_COLOR = 0xff4a82b5;
+    public static final int CHAT_REPORT_SPAM_TEXT_COLOR = 0xffcf5957;
+    public static final int CHAT_BOTTOM_OVERLAY_TEXT_COLOR = 0xff7f7f7f;
+    public static final int CHAT_BOTTOM_CHAT_OVERLAY_TEXT_COLOR = 0xff3a8ccf;
+    public static final int CHAT_GIF_HINT_TEXT_COLOR = 0xffffffff;
+    public static final int CHAT_EMPTY_VIEW_TEXT_COLOR = 0xffffffff;
+
+    public static final int INAPP_PLAYER_PERFORMER_TEXT_COLOR = 0xff2f3438;
+    public static final int INAPP_PLAYER_TITLE_TEXT_COLOR = 0xff2f3438;
+    public static final int INAPP_PLAYER_BACKGROUND_COLOR = 0xffffffff;
+
+    public static final int REPLY_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int REPLY_PANEL_MESSAGE_TEXT_COLOR = 0xff222222;
+
+    public static final int ALERT_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int ALERT_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
+
+    public static final int AUTODOWNLOAD_SHEET_SAVE_TEXT_COLOR = 0xff3a8ccf;
+
+    public static final int SHARE_SHEET_COPY_TEXT_COLOR = 0xff3a8ccf;
+    public static final int SHARE_SHEET_SEND_TEXT_COLOR = 0xff3ec1f9;
+    public static final int SHARE_SHEET_SEND_DISABLED_TEXT_COLOR = 0xffb3b3b3;
+    public static final int SHARE_SHEET_EDIT_TEXT_COLOR = 0xff212121;
+    public static final int SHARE_SHEET_EDIT_PLACEHOLDER_TEXT_COLOR = 0xff979797;
+    public static final int SHARE_SHEET_BADGE_TEXT_COLOR = 0xffffffff;
+
+    public static final int STICKERS_SHEET_TITLE_TEXT_COLOR = 0xff212121;
+    public static final int STICKERS_SHEET_SEND_TEXT_COLOR = 0xff3a8ccf;
+    public static final int STICKERS_SHEET_ADD_TEXT_COLOR = 0xff3a8ccf;
+    public static final int STICKERS_SHEET_CLOSE_TEXT_COLOR = 0xff3a8ccf;
+    public static final int STICKERS_SHEET_REMOVE_TEXT_COLOR = 0xffcd5a5a;
+
+    public static final int PINNED_PANEL_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int PINNED_PANEL_MESSAGE_TEXT_COLOR = 0xff999999;
+
+    public static final int SECRET_CHAT_INFO_TEXT_COLOR = 0xffffffff;
+
+    public static final int MSG_WEB_PREVIEW_DURATION_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_SECRET_TIME_TEXT_COLOR = 0xffe4e2e0;
+    public static final int MSG_STICKER_NAME_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_BOT_BUTTON_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_BOT_PROGRESS_COLOR = 0xffffffff;
+    public static final int MSG_IN_FORDWARDED_NAME_TEXT_COLOR = 0xff3886c7;
+    public static final int MSG_OUT_FORDWARDED_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_VIA_BOT_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int MSG_OUT_VIA_BOT_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_STICKER_VIA_BOT_NAME_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_IN_REPLY_LINE_COLOR = 0xff70b4e8;
+    public static final int MSG_OUT_REPLY_LINE_COLOR = 0xff88c97b;
+    public static final int MSG_STICKER_REPLY_LINE_COLOR = 0xffffffff;
+    public static final int MSG_IN_REPLY_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int MSG_OUT_REPLY_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_STICKER_REPLY_NAME_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_IN_REPLY_MESSAGE_TEXT_COLOR = 0xff000000;
+    public static final int MSG_OUT_REPLY_MESSAGE_TEXT_COLOR = 0xff000000;
+    public static final int MSG_IN_REPLY_MEDIA_MESSAGE_TEXT_COLOR = 0xffa1aab3;
+    public static final int MSG_OUT_REPLY_MEDIA_MESSAGE_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_REPLY_MEDIA_MESSAGE_SELETED_TEXT_COLOR = 0xff89b4c1;
+    public static final int MSG_OUT_REPLY_MEDIA_MESSAGE_SELETED_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_STICKER_REPLY_MESSAGE_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_IN_WEB_PREVIEW_LINE_COLOR = 0xff70b4e8;
+    public static final int MSG_OUT_WEB_PREVIEW_LINE_COLOR = 0xff88c97b;
+    public static final int MSG_IN_SITE_NAME_TEXT_COLOR = 0xff3a8ccf;
+    public static final int MSG_OUT_SITE_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_CONTACT_NAME_TEXT_COLOR = 0xff4e9ad4;
+    public static final int MSG_OUT_CONTACT_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_CONTACT_PHONE_TEXT_COLOR = 0xff2f3438;
+    public static final int MSG_OUT_CONTACT_PHONE_TEXT_COLOR = 0xff354234;
+    public static final int MSG_MEDIA_PROGRESS_COLOR = 0xffffffff;
+    public static final int MSG_IN_AUDIO_PROGRESS_COLOR = 0xffffffff;
+    public static final int MSG_OUT_AUDIO_PROGRESS_COLOR = 0xffefffde;
+    public static final int MSG_IN_AUDIO_SELECTED_PROGRESS_COLOR = 0xffe2f8ff;
+    public static final int MSG_OUT_AUDIO_SELECTED_PROGRESS_COLOR = 0xffd4f5bc;
+    public static final int MSG_MEDIA_TIME_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_IN_TIME_TEXT_COLOR = 0xffa1aab3;
+    public static final int MSG_OUT_TIME_TEXT_COLOR = 0xff70b15c;
+    public static final int MSG_IN_TIME_SELECTED_TEXT_COLOR = 0xff89b4c1;
+    public static final int MSG_OUT_TIME_SELECTED_TEXT_COLOR = 0xff70b15c;
+    public static final int MSG_IN_AUDIO_PERFORMER_TEXT_COLOR = 0xff2f3438;
+    public static final int MSG_OUT_AUDIO_PERFORMER_TEXT_COLOR = 0xff354234;
+    public static final int MSG_IN_AUDIO_TITLE_TEXT_COLOR = 0xff4e9ad4;
+    public static final int MSG_OUT_AUDIO_TITLE_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_AUDIO_DURATION_TEXT_COLOR = 0xffa1aab3;
+    public static final int MSG_OUT_AUDIO_DURATION_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_AUDIO_DURATION_SELECTED_TEXT_COLOR = 0xff89b4c1;
+    public static final int MSG_OUT_AUDIO_DURATION_SELECTED_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_AUDIO_SEEKBAR_COLOR = 0xffe4eaf0;
+    public static final int MSG_OUT_AUDIO_SEEKBAR_COLOR = 0xffbbe3ac;
+    public static final int MSG_IN_AUDIO_SEEKBAR_SELECTED_COLOR = 0xffbcdee8;
+    public static final int MSG_OUT_AUDIO_SEEKBAR_SELECTED_COLOR = 0xffa9dd96;
+    public static final int MSG_IN_AUDIO_SEEKBAR_FILL_COLOR = 0xff72b5e8;
+    public static final int MSG_OUT_AUDIO_SEEKBAR_FILL_COLOR = 0xff78c272;
+    public static final int MSG_IN_VOICE_SEEKBAR_COLOR = 0xffdee5eb;
+    public static final int MSG_OUT_VOICE_SEEKBAR_COLOR = 0xffbbe3ac;
+    public static final int MSG_IN_VOICE_SEEKBAR_SELECTED_COLOR = 0xffbcdee8;
+    public static final int MSG_OUT_VOICE_SEEKBAR_SELECTED_COLOR = 0xffa9dd96;
+    public static final int MSG_IN_VOICE_SEEKBAR_FILL_COLOR = 0xff72b5e8;
+    public static final int MSG_OUT_VOICE_SEEKBAR_FILL_COLOR = 0xff78c272;
+    public static final int MSG_IN_FILE_PROGRESS_COLOR = 0xffebf0f5;
+    public static final int MSG_OUT_FILE_PROGRESS_COLOR = 0xffdaf5c3;
+    public static final int MSG_IN_FILE_PROGRESS_SELECTED_COLOR = 0xffcbeaf6;
+    public static final int MSG_OUT_FILE_PROGRESS_SELECTED_COLOR = 0xffc5eca7;
+    public static final int MSG_IN_FILE_NAME_TEXT_COLOR = 0xff4e9ad4;
+    public static final int MSG_OUT_FILE_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_FILE_INFO_TEXT_COLOR = 0xffa1aab3;
+    public static final int MSG_OUT_FILE_INFO_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_FILE_INFO_SELECTED_TEXT_COLOR = 0xff89b4c1;
+    public static final int MSG_OUT_FILE_INFO_SELECTED_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_FILE_BACKGROUND_COLOR = 0xffebf0f5;
+    public static final int MSG_OUT_FILE_BACKGROUND_COLOR = 0xffdaf5c3;
+    public static final int MSG_IN_FILE_BACKGROUND_SELECTED_COLOR = 0xffcbeaf6;
+    public static final int MSG_OUT_FILE_BACKGROUND_SELECTED_COLOR = 0xffc5eca7;
+    public static final int MSG_IN_VENUE_NAME_TEXT_COLOR = 0xff4e9ad4;
+    public static final int MSG_OUT_VENUE_NAME_TEXT_COLOR = 0xff55ab4f;
+    public static final int MSG_IN_VENUE_INFO_TEXT_COLOR = 0xffa1aab3;
+    public static final int MSG_OUT_VENUE_INFO_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_IN_VENUE_INFO_SELECTED_TEXT_COLOR = 0xff89b4c1;
+    public static final int MSG_OUT_VENUE_INFO_SELECTED_TEXT_COLOR = 0xff65b05b;
+    public static final int MSG_MEDIA_INFO_TEXT_COLOR = 0xffffffff;
+    public static final int MSG_TEXT_COLOR = 0xff000000;
+    public static final int MSG_LINK_TEXT_COLOR = 0xff2678b6;
+    public static final int MSG_LINK_SELECT_BACKGROUND_COLOR = 0x3362a9e3;
+
+
+    public static Drawable backgroundDrawableIn;
+    public static Drawable backgroundDrawableInSelected;
+    public static Drawable backgroundDrawableOut;
+    public static Drawable backgroundDrawableOutSelected;
+    public static Drawable backgroundMediaDrawableIn;
+    public static Drawable backgroundMediaDrawableInSelected;
+    public static Drawable backgroundMediaDrawableOut;
+    public static Drawable backgroundMediaDrawableOutSelected;
+    public static Drawable checkDrawable;
+    public static Drawable halfCheckDrawable;
+    public static Drawable clockDrawable;
+    public static Drawable broadcastDrawable;
+    public static Drawable checkMediaDrawable;
+    public static Drawable halfCheckMediaDrawable;
+    public static Drawable clockMediaDrawable;
+    public static Drawable broadcastMediaDrawable;
+    public static Drawable errorDrawable;
+    public static Drawable systemDrawable;
+    public static Drawable backgroundBluePressed;
+    public static Drawable timeBackgroundDrawable;
+    public static Drawable timeStickerBackgroundDrawable;
+    public static Drawable botLink;
+    public static Drawable botInline;
+    public static Drawable[] clockChannelDrawable = new Drawable[2];
+
+    public static Drawable[] cornerOuter = new Drawable[4];
+    public static Drawable[] cornerInner = new Drawable[4];
+
+    public static Drawable shareDrawable;
+    public static Drawable shareIconDrawable;
+
+    public static Drawable[] viewsCountDrawable = new Drawable[2];
+    public static Drawable viewsOutCountDrawable;
+    public static Drawable viewsMediaCountDrawable;
+
+    public static Drawable geoInDrawable;
+    public static Drawable geoOutDrawable;
+
+    public static Drawable inlineDocDrawable;
+    public static Drawable inlineAudioDrawable;
+    public static Drawable inlineLocationDrawable;
+
+    public static Drawable[] contactDrawable = new Drawable[2];
+    public static Drawable[][] fileStatesDrawable = new Drawable[10][2];
+    public static Drawable[][] photoStatesDrawables = new Drawable[13][2];
+    public static Drawable[] docMenuDrawable = new Drawable[4];
+
+    public static PorterDuffColorFilter colorFilter;
+    public static PorterDuffColorFilter colorPressedFilter;
+    private static int currentColor;
+
+    private static Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+
+    public static void loadRecources(Context context) {
+        if (backgroundDrawableIn == null) {
+            backgroundDrawableIn = context.getResources().getDrawable(R.drawable.msg_in);
+            backgroundDrawableInSelected = context.getResources().getDrawable(R.drawable.msg_in_selected);
+            backgroundDrawableOut = context.getResources().getDrawable(R.drawable.msg_out);
+            backgroundDrawableOutSelected = context.getResources().getDrawable(R.drawable.msg_out_selected);
+            backgroundMediaDrawableIn = context.getResources().getDrawable(R.drawable.msg_in_photo);
+            backgroundMediaDrawableInSelected = context.getResources().getDrawable(R.drawable.msg_in_photo_selected);
+            backgroundMediaDrawableOut = context.getResources().getDrawable(R.drawable.msg_out_photo);
+            backgroundMediaDrawableOutSelected = context.getResources().getDrawable(R.drawable.msg_out_photo_selected);
+            checkDrawable = context.getResources().getDrawable(R.drawable.msg_check);
+            halfCheckDrawable = context.getResources().getDrawable(R.drawable.msg_halfcheck);
+            clockDrawable = context.getResources().getDrawable(R.drawable.msg_clock);
+            checkMediaDrawable = context.getResources().getDrawable(R.drawable.msg_check_w);
+            halfCheckMediaDrawable = context.getResources().getDrawable(R.drawable.msg_halfcheck_w);
+            clockMediaDrawable = context.getResources().getDrawable(R.drawable.msg_clock_photo);
+            clockChannelDrawable[0] = context.getResources().getDrawable(R.drawable.msg_clock2);
+            clockChannelDrawable[1] = context.getResources().getDrawable(R.drawable.msg_clock2_s);
+            errorDrawable = context.getResources().getDrawable(R.drawable.msg_warning);
+            timeBackgroundDrawable = context.getResources().getDrawable(R.drawable.phototime2_b);
+            timeStickerBackgroundDrawable = context.getResources().getDrawable(R.drawable.phototime2);
+            broadcastDrawable = context.getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = context.getResources().getDrawable(R.drawable.broadcast4);
+            systemDrawable = context.getResources().getDrawable(R.drawable.system);
+            botLink = context.getResources().getDrawable(R.drawable.bot_link);
+            botInline = context.getResources().getDrawable(R.drawable.bot_lines);
+
+            viewsCountDrawable[0] = context.getResources().getDrawable(R.drawable.post_views);
+            viewsCountDrawable[1] = context.getResources().getDrawable(R.drawable.post_views_s);
+            viewsOutCountDrawable = context.getResources().getDrawable(R.drawable.post_viewsg);
+            viewsMediaCountDrawable = context.getResources().getDrawable(R.drawable.post_views_w);
+
+            fileStatesDrawable[0][0] = context.getResources().getDrawable(R.drawable.play_g);
+            fileStatesDrawable[0][1] = context.getResources().getDrawable(R.drawable.play_g_s);
+            fileStatesDrawable[1][0] = context.getResources().getDrawable(R.drawable.pause_g);
+            fileStatesDrawable[1][1] = context.getResources().getDrawable(R.drawable.pause_g_s);
+            fileStatesDrawable[2][0] = context.getResources().getDrawable(R.drawable.file_g_load);
+            fileStatesDrawable[2][1] = context.getResources().getDrawable(R.drawable.file_g_load_s);
+            fileStatesDrawable[3][0] = context.getResources().getDrawable(R.drawable.file_g);
+            fileStatesDrawable[3][1] = context.getResources().getDrawable(R.drawable.file_g_s);
+            fileStatesDrawable[4][0] = context.getResources().getDrawable(R.drawable.file_g_cancel);
+            fileStatesDrawable[4][1] = context.getResources().getDrawable(R.drawable.file_g_cancel_s);
+            fileStatesDrawable[5][0] = context.getResources().getDrawable(R.drawable.play_b);
+            fileStatesDrawable[5][1] = context.getResources().getDrawable(R.drawable.play_b_s);
+            fileStatesDrawable[6][0] = context.getResources().getDrawable(R.drawable.pause_b);
+            fileStatesDrawable[6][1] = context.getResources().getDrawable(R.drawable.pause_b_s);
+            fileStatesDrawable[7][0] = context.getResources().getDrawable(R.drawable.file_b_load);
+            fileStatesDrawable[7][1] = context.getResources().getDrawable(R.drawable.file_b_load_s);
+            fileStatesDrawable[8][0] = context.getResources().getDrawable(R.drawable.file_b);
+            fileStatesDrawable[8][1] = context.getResources().getDrawable(R.drawable.file_b_s);
+            fileStatesDrawable[9][0] = context.getResources().getDrawable(R.drawable.file_b_cancel);
+            fileStatesDrawable[9][1] = context.getResources().getDrawable(R.drawable.file_b_cancel_s);
+
+            photoStatesDrawables[0][0] = context.getResources().getDrawable(R.drawable.photoload);
+            photoStatesDrawables[0][1] = context.getResources().getDrawable(R.drawable.photoload_pressed);
+            photoStatesDrawables[1][0] = context.getResources().getDrawable(R.drawable.photocancel);
+            photoStatesDrawables[1][1] = context.getResources().getDrawable(R.drawable.photocancel_pressed);
+            photoStatesDrawables[2][0] = context.getResources().getDrawable(R.drawable.photogif);
+            photoStatesDrawables[2][1] = context.getResources().getDrawable(R.drawable.photogif_pressed);
+            photoStatesDrawables[3][0] = context.getResources().getDrawable(R.drawable.playvideo);
+            photoStatesDrawables[3][1] = context.getResources().getDrawable(R.drawable.playvideo_pressed);
+            //photoStatesDrawables[4] = context.getResources().getDrawable(R.drawable.photopause);
+            photoStatesDrawables[4][0] = photoStatesDrawables[4][1] = context.getResources().getDrawable(R.drawable.burn);
+            photoStatesDrawables[5][0] = photoStatesDrawables[5][1] = context.getResources().getDrawable(R.drawable.circle);
+            photoStatesDrawables[6][0] = photoStatesDrawables[6][1] = context.getResources().getDrawable(R.drawable.photocheck);
+
+            photoStatesDrawables[7][0] = context.getResources().getDrawable(R.drawable.photoload_g);
+            photoStatesDrawables[7][1] = context.getResources().getDrawable(R.drawable.photoload_g_s);
+            photoStatesDrawables[8][0] = context.getResources().getDrawable(R.drawable.photocancel_g);
+            photoStatesDrawables[8][1] = context.getResources().getDrawable(R.drawable.photocancel_g_s);
+            photoStatesDrawables[9][0] = context.getResources().getDrawable(R.drawable.doc_green);
+            photoStatesDrawables[9][1] = context.getResources().getDrawable(R.drawable.doc_green);
+
+            photoStatesDrawables[10][0] = context.getResources().getDrawable(R.drawable.photoload_b);
+            photoStatesDrawables[10][1] = context.getResources().getDrawable(R.drawable.photoload_b_s);
+            photoStatesDrawables[11][0] = context.getResources().getDrawable(R.drawable.photocancel_b);
+            photoStatesDrawables[11][1] = context.getResources().getDrawable(R.drawable.photocancel_b_s);
+            photoStatesDrawables[12][0] = context.getResources().getDrawable(R.drawable.doc_blue);
+            photoStatesDrawables[12][1] = context.getResources().getDrawable(R.drawable.doc_blue_s);
+
+            docMenuDrawable[0] = context.getResources().getDrawable(R.drawable.doc_actions_b);
+            docMenuDrawable[1] = context.getResources().getDrawable(R.drawable.doc_actions_g);
+            docMenuDrawable[2] = context.getResources().getDrawable(R.drawable.doc_actions_b_s);
+            docMenuDrawable[3] = context.getResources().getDrawable(R.drawable.video_actions);
+
+            contactDrawable[0] = context.getResources().getDrawable(R.drawable.contact_blue);
+            contactDrawable[1] = context.getResources().getDrawable(R.drawable.contact_green);
+
+            shareDrawable = context.getResources().getDrawable(R.drawable.share_round);
+            shareIconDrawable = context.getResources().getDrawable(R.drawable.share_arrow);
+
+            geoInDrawable = context.getResources().getDrawable(R.drawable.location_b);
+            geoOutDrawable = context.getResources().getDrawable(R.drawable.location_g);
+
+            context.getResources().getDrawable(R.drawable.attach_camera_states);
+            context.getResources().getDrawable(R.drawable.attach_gallery_states);
+            context.getResources().getDrawable(R.drawable.attach_video_states);
+            context.getResources().getDrawable(R.drawable.attach_audio_states);
+            context.getResources().getDrawable(R.drawable.attach_file_states);
+            context.getResources().getDrawable(R.drawable.attach_contact_states);
+            context.getResources().getDrawable(R.drawable.attach_location_states);
+            context.getResources().getDrawable(R.drawable.attach_hide_states);
+
+            cornerOuter[0] = context.getResources().getDrawable(R.drawable.corner_out_tl);
+            cornerOuter[1] = context.getResources().getDrawable(R.drawable.corner_out_tr);
+            cornerOuter[2] = context.getResources().getDrawable(R.drawable.corner_out_br);
+            cornerOuter[3] = context.getResources().getDrawable(R.drawable.corner_out_bl);
+
+            cornerInner[0] = context.getResources().getDrawable(R.drawable.corner_in_tr);
+            cornerInner[1] = context.getResources().getDrawable(R.drawable.corner_in_tl);
+            cornerInner[2] = context.getResources().getDrawable(R.drawable.corner_in_br);
+            cornerInner[3] = context.getResources().getDrawable(R.drawable.corner_in_bl);
+
+            inlineDocDrawable = context.getResources().getDrawable(R.drawable.bot_file);
+            inlineAudioDrawable = context.getResources().getDrawable(R.drawable.bot_music);
+            inlineLocationDrawable = context.getResources().getDrawable(R.drawable.bot_location);
+        }
+
+        int color = ApplicationLoader.getServiceMessageColor();
+        if (currentColor != color) {
+            colorFilter = new PorterDuffColorFilter(color, PorterDuff.Mode.MULTIPLY);
+            colorPressedFilter = new PorterDuffColorFilter(ApplicationLoader.getServiceSelectedMessageColor(), PorterDuff.Mode.MULTIPLY);
+            currentColor = color;
+            for (int a = 0; a < 4; a++) {
+                cornerOuter[a].setColorFilter(colorFilter);
+                cornerInner[a].setColorFilter(colorFilter);
+            }
+            timeStickerBackgroundDrawable.setColorFilter(colorFilter);
+        }
+    }
+
+    public static Drawable createBarSelectorDrawable(int color) {
+        return createBarSelectorDrawable(color, true);
+    }
+
+    public static Drawable createBarSelectorDrawable(int color, boolean masked) {
+        Drawable drawable;
+        if (Build.VERSION.SDK_INT >= 21) {
+            Drawable maskDrawable = null;
+            if (masked) {
+                maskPaint.setColor(0xffffffff);
+                maskDrawable = new Drawable() {
+                    @Override
+                    public void draw(Canvas canvas) {
+                        android.graphics.Rect bounds = getBounds();
+                        canvas.drawCircle(bounds.centerX(), bounds.centerY(), AndroidUtilities.dp(18), maskPaint);
+                    }
+
+                    @Override
+                    public void setAlpha(int alpha) {
+
+                    }
+
+                    @Override
+                    public void setColorFilter(ColorFilter colorFilter) {
+
+                    }
+
+                    @Override
+                    public int getOpacity() {
+                        return 0;
+                    }
+                };
+            }
+            ColorStateList colorStateList = new ColorStateList(
+                    new int[][]{new int[]{}},
+                    new int[]{color}
+            );
+            return new RippleDrawable(colorStateList, null, maskDrawable);
+        } else {
+            StateListDrawable stateListDrawable = new StateListDrawable();
+            stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, new ColorDrawable(color));
+            stateListDrawable.addState(new int[]{android.R.attr.state_focused}, new ColorDrawable(color));
+            stateListDrawable.addState(new int[]{android.R.attr.state_selected}, new ColorDrawable(color));
+            if (Build.VERSION.SDK_INT >= 11) {
+                stateListDrawable.addState(new int[]{android.R.attr.state_activated}, new ColorDrawable(color));
+            }
+            stateListDrawable.addState(new int[]{}, new ColorDrawable(0x00000000));
+            return stateListDrawable;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java
index 183076a74..f01a9184e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ChatActivityAdapter.java
@@ -202,7 +202,7 @@ public void didClickedImage(ChatMediaCell cell) {
                                         Intent intent = new Intent(Intent.ACTION_VIEW);
                                         if (message.type == 8 || message.type == 9) {
                                             MimeTypeMap myMime = MimeTypeMap.getSingleton();
-                                            int idx = fileName.lastIndexOf(".");
+                                            int idx = fileName.lastIndexOf('.');
                                             if (idx != -1) {
                                                 String ext = fileName.substring(idx + 1);
                                                 realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
index bcee796f0..13f79f1ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/ContactsAdapter.java
@@ -238,7 +238,7 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             }
         } else if (type == 0) {
             if (convertView == null) {
-                convertView = new UserCell(mContext, 58, 1);
+                convertView = new UserCell(mContext, 58, 1, false);
                 ((UserCell) convertView).setStatusColors(0xffa8a8a8, 0xff3b84c0);
             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 257dcc8f1..11a1ccec8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -81,6 +81,13 @@ public int getItemCount() {
         return arrayList.get(i);
     }
 
+    @Override
+    public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
+        if (holder.itemView instanceof DialogCell) {
+            ((DialogCell) holder.itemView).checkCurrentDialogIndex();
+        }
+    }
+
     @Override
     public long getItemId(int i) {
         return i;
@@ -94,6 +101,7 @@ public long getItemId(int i) {
         } else if (viewType == 1) {
             view = new LoadingCell(mContext);
         }
+        view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
         return new Holder(view);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 9bb8a0642..5f738ff28 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -331,7 +331,7 @@ public void putRecentSearch(final long did, TLObject object) {
         recentSearchObjects.add(0, recentSearchObject);
         recentSearchObject.did = did;
         recentSearchObject.object = object;
-        recentSearchObject.date = (int) System.currentTimeMillis() / 1000;
+        recentSearchObject.date = (int) (System.currentTimeMillis() / 1000);
         notifyDataSetChanged();
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
@@ -340,7 +340,7 @@ public void run() {
                     SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO search_recent VALUES(?, ?)");
                     state.requery();
                     state.bindLong(1, did);
-                    state.bindInteger(2, (int) System.currentTimeMillis() / 1000);
+                    state.bindInteger(2, (int) (System.currentTimeMillis() / 1000));
                     state.step();
                     state.dispose();
                 } catch (Exception e) {
@@ -885,6 +885,7 @@ public long getItemId(int i) {
                 view = new HashtagSearchCell(mContext);
                 break;
         }
+        view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
         return new Holder(view);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index b4d8dffe4..dc0e10b6b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -8,17 +8,29 @@
 
 package org.telegram.ui.Adapters;
 
+import android.Manifest;
+import android.app.Activity;
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.os.Build;
 import android.view.View;
 import android.view.ViewGroup;
 
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLitePreparedStatement;
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
@@ -26,6 +38,8 @@
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.BotSwitchCell;
 import org.telegram.ui.Cells.ContextLinkCell;
 import org.telegram.ui.Cells.MentionCell;
 
@@ -42,7 +56,7 @@
         void onContextClick(TLRPC.BotInlineResult result);
     }
 
-    private class Holder extends RecyclerView.ViewHolder {
+    public class Holder extends RecyclerView.ViewHolder {
 
         public Holder(View itemView) {
             super(itemView);
@@ -50,6 +64,7 @@ public Holder(View itemView) {
     }
 
     private Context mContext;
+    private long dialog_id;
     private TLRPC.ChatFull info;
     private ArrayList<TLRPC.User> botRecent;
     private ArrayList<TLRPC.User> searchResultUsernames;
@@ -58,6 +73,7 @@ public Holder(View itemView) {
     private ArrayList<String> searchResultCommandsHelp;
     private ArrayList<TLRPC.User> searchResultCommandsUsers;
     private ArrayList<TLRPC.BotInlineResult> searchResultBotContext;
+    private TLRPC.TL_inlineBotSwitchPM searchResultBotContextSwitch;
     private HashMap<String, TLRPC.BotInlineResult> searchResultBotContextById;
     private MentionsAdapterDelegate delegate;
     private HashMap<Integer, TLRPC.BotInfo> botInfo;
@@ -82,11 +98,62 @@ public Holder(View itemView) {
     private TLRPC.User foundContextBot;
     private boolean contextMedia;
     private Runnable contextQueryRunnable;
+    private Location lastKnownLocation;
 
-    public MentionsAdapter(Context context, boolean isDarkTheme, MentionsAdapterDelegate delegate) {
+    private BaseFragment parentFragment;
+
+    private SendMessagesHelper.LocationProvider locationProvider = new SendMessagesHelper.LocationProvider(new SendMessagesHelper.LocationProvider.LocationProviderDelegate() {
+        @Override
+        public void onLocationAcquired(Location location) {
+            if (foundContextBot != null && foundContextBot.bot_inline_geo) {
+                lastKnownLocation = location;
+                searchForContextBotResults(foundContextBot, searchingContextQuery, "");
+            }
+        }
+
+        @Override
+        public void onUnableLocationAcquire() {
+            onLocationUnavailable();
+        }
+    }) {
+        @Override
+        public void stop() {
+            super.stop();
+            lastKnownLocation = null;
+        }
+    };
+
+    public MentionsAdapter(Context context, boolean isDarkTheme, long did, MentionsAdapterDelegate delegate) {
         mContext = context;
         this.delegate = delegate;
         this.isDarkTheme = isDarkTheme;
+        dialog_id = did;
+    }
+
+    public void onDestroy() {
+        if (locationProvider != null) {
+            locationProvider.stop();
+        }
+        if (contextQueryRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(contextQueryRunnable);
+            contextQueryRunnable = null;
+        }
+        if (contextUsernameReqid != 0) {
+            ConnectionsManager.getInstance().cancelRequest(contextUsernameReqid, true);
+            contextUsernameReqid = 0;
+        }
+        if (contextQueryReqid != 0) {
+            ConnectionsManager.getInstance().cancelRequest(contextQueryReqid, true);
+            contextQueryReqid = 0;
+        }
+        foundContextBot = null;
+        searchingContextUsername = null;
+        searchingContextQuery = null;
+        noUserName = false;
+    }
+
+    public void setParentFragment(BaseFragment fragment) {
+        parentFragment = fragment;
     }
 
     public void setChatInfo(TLRPC.ChatFull chatParticipants) {
@@ -115,7 +182,21 @@ public void run() {
                     }
                     cursor.dispose();
                     if (uids != null) {
+                        final ArrayList<Integer> uidsFinal = uids;
                         final ArrayList<TLRPC.User> users = MessagesStorage.getInstance().getUsers(uids);
+                        Collections.sort(users, new Comparator<TLRPC.User>() {
+                            @Override
+                            public int compare(TLRPC.User lhs, TLRPC.User rhs) {
+                                int idx1 = uidsFinal.indexOf(lhs.id);
+                                int idx2 = uidsFinal.indexOf(rhs.id);
+                                if (idx1 > idx2) {
+                                    return 1;
+                                } else if (idx1 < idx2) {
+                                    return -1;
+                                }
+                                return 0;
+                            }
+                        });
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
@@ -240,10 +321,18 @@ protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, H
         }
     }
 
+    public TLRPC.TL_inlineBotSwitchPM getBotContextSwitch() {
+        return searchResultBotContextSwitch;
+    }
+
     public int getContextBotId() {
         return foundContextBot != null ? foundContextBot.id : 0;
     }
 
+    public TLRPC.User getContextBotUser() {
+        return foundContextBot != null ? foundContextBot : null;
+    }
+
     public String getContextBotName() {
         return foundContextBot != null ? foundContextBot.username : "";
     }
@@ -251,6 +340,7 @@ public String getContextBotName() {
     private void searchForContextBot(final String username, final String query) {
         searchResultBotContext = null;
         searchResultBotContextById = null;
+        searchResultBotContextSwitch = null;
         notifyDataSetChanged();
         if (foundContextBot != null) {
             delegate.needChangePanelVisibility(false);
@@ -271,6 +361,7 @@ private void searchForContextBot(final String username, final String query) {
             foundContextBot = null;
             searchingContextUsername = null;
             searchingContextQuery = null;
+            locationProvider.stop();
             noUserName = false;
             if (delegate != null) {
                 delegate.onContextSearch(false);
@@ -325,6 +416,7 @@ public void run() {
                                     }
                                     contextUsernameReqid = 0;
                                     foundContextBot = null;
+                                    locationProvider.stop();
                                     if (error == null) {
                                         TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
                                         if (!res.users.isEmpty()) {
@@ -333,6 +425,35 @@ public void run() {
                                                 MessagesController.getInstance().putUser(user, false);
                                                 MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
                                                 foundContextBot = user;
+                                                if (foundContextBot.bot_inline_geo) {
+                                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                                    boolean allowGeo = preferences.getBoolean("inlinegeo_" + foundContextBot.id, false);
+                                                    if (!allowGeo && parentFragment != null && parentFragment.getParentActivity() != null) {
+                                                        final TLRPC.User foundContextBotFinal = foundContextBot;
+                                                        AlertDialog.Builder builder = new AlertDialog.Builder(parentFragment.getParentActivity());
+                                                        builder.setTitle(LocaleController.getString("ShareYouLocationTitle", R.string.ShareYouLocationTitle));
+                                                        builder.setMessage(LocaleController.getString("ShareYouLocationInline", R.string.ShareYouLocationInline));
+                                                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                                            @Override
+                                                            public void onClick(DialogInterface dialogInterface, int i) {
+                                                                if (foundContextBotFinal != null) {
+                                                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                                                    preferences.edit().putBoolean("inlinegeo_" + foundContextBotFinal.id, true).commit();
+                                                                    checkLocationPermissionsOrStart();
+                                                                }
+                                                            }
+                                                        });
+                                                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                                                            @Override
+                                                            public void onClick(DialogInterface dialog, int which) {
+                                                                onLocationUnavailable();
+                                                            }
+                                                        });
+                                                        parentFragment.showDialog(builder.create());
+                                                    } else {
+                                                        checkLocationPermissionsOrStart();
+                                                    }
+                                                }
                                             }
                                         }
                                     }
@@ -355,6 +476,28 @@ public void run() {
         AndroidUtilities.runOnUIThread(contextQueryRunnable, 400);
     }
 
+    private void onLocationUnavailable() {
+        if (foundContextBot != null && foundContextBot.bot_inline_geo) {
+            lastKnownLocation = new Location("network");
+            lastKnownLocation.setLatitude(-1000);
+            lastKnownLocation.setLongitude(-1000);
+            searchForContextBotResults(foundContextBot, searchingContextQuery, "");
+        }
+    }
+
+    private void checkLocationPermissionsOrStart() {
+        if (parentFragment == null || parentFragment.getParentActivity() == null) {
+            return;
+        }
+        if (Build.VERSION.SDK_INT >= 23 && parentFragment.getParentActivity().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+            parentFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, 2);
+            return;
+        }
+        if (foundContextBot != null && foundContextBot.bot_inline_geo) {
+            locationProvider.start();
+        }
+    }
+
     public int getOrientation() {
         return searchResultBotContext != null && !searchResultBotContext.isEmpty() && contextMedia ? LinearLayoutManager.HORIZONTAL : LinearLayoutManager.VERTICAL;
     }
@@ -384,10 +527,26 @@ private void searchForContextBotResults(TLRPC.User user, final String query, fin
             searchingContextQuery = null;
             return;
         }
+        if (user.bot_inline_geo && lastKnownLocation == null) {
+            return;
+        }
         TLRPC.TL_messages_getInlineBotResults req = new TLRPC.TL_messages_getInlineBotResults();
         req.bot = MessagesController.getInputUser(user);
         req.query = query;
         req.offset = offset;
+        if (user.bot_inline_geo && lastKnownLocation != null && lastKnownLocation.getLatitude() != -1000) {
+            req.flags |= 1;
+            req.geo_point = new TLRPC.TL_inputGeoPoint();
+            req.geo_point.lat = lastKnownLocation.getLatitude();
+            req.geo_point._long = lastKnownLocation.getLongitude();
+        }
+        int lower_id = (int) dialog_id;
+        int high_id = (int) (dialog_id >> 32);
+        if (lower_id != 0) {
+            req.peer = MessagesController.getInputPeer(lower_id);
+        } else {
+            req.peer = new TLRPC.TL_inputPeerEmpty();
+        }
         contextQueryReqid = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
             public void run(final TLObject response, final TLRPC.TL_error error) {
@@ -406,6 +565,7 @@ public void run() {
                             nextQueryOffset = res.next_offset;
                             if (searchResultBotContextById == null) {
                                 searchResultBotContextById = new HashMap<>();
+                                searchResultBotContextSwitch = res.switch_pm;
                             }
                             for (int a = 0; a < res.results.size(); a++) {
                                 TLRPC.BotInlineResult result = res.results.get(a);
@@ -419,6 +579,7 @@ public void run() {
                             boolean added = false;
                             if (searchResultBotContext == null || offset.length() == 0) {
                                 searchResultBotContext = res.results;
+                                contextMedia = res.gallery;
                             } else {
                                 added = true;
                                 searchResultBotContext.addAll(res.results);
@@ -426,18 +587,19 @@ public void run() {
                                     nextQueryOffset = "";
                                 }
                             }
-                            contextMedia = res.gallery;
                             searchResultHashtags = null;
                             searchResultUsernames = null;
                             searchResultCommands = null;
                             searchResultCommandsHelp = null;
                             searchResultCommandsUsers = null;
                             if (added) {
-                                notifyItemRangeInserted(searchResultBotContext.size() - res.results.size(), res.results.size());
+                                boolean hasTop = getOrientation() == LinearLayoutManager.VERTICAL && searchResultBotContextSwitch != null;
+                                notifyItemChanged(searchResultBotContext.size() - res.results.size() + (hasTop ? 1 : 0) - 1);
+                                notifyItemRangeInserted(searchResultBotContext.size() - res.results.size() + (hasTop ? 1 : 0), res.results.size());
                             } else {
                                 notifyDataSetChanged();
                             }
-                            delegate.needChangePanelVisibility(!searchResultBotContext.isEmpty());
+                            delegate.needChangePanelVisibility(!searchResultBotContext.isEmpty() || searchResultBotContextSwitch != null);
                         }
                     }
                 });
@@ -666,7 +828,7 @@ public int getResultLength() {
     @Override
     public int getItemCount() {
         if (searchResultBotContext != null) {
-            return searchResultBotContext.size();
+            return searchResultBotContext.size() + (getOrientation() == LinearLayoutManager.VERTICAL && searchResultBotContextSwitch != null ? 1 : 0);
         } else if (searchResultUsernames != null) {
             return searchResultUsernames.size();
         } else if (searchResultHashtags != null) {
@@ -680,6 +842,9 @@ public int getItemCount() {
     @Override
     public int getItemViewType(int position) {
         if (searchResultBotContext != null) {
+            if (position == 0 && getOrientation() == LinearLayoutManager.VERTICAL && searchResultBotContextSwitch != null) {
+                return 2;
+            }
             return 1;
         } else {
             return 0;
@@ -688,6 +853,14 @@ public int getItemViewType(int position) {
 
     public Object getItem(int i) {
         if (searchResultBotContext != null) {
+            boolean hasTop = getOrientation() == LinearLayoutManager.VERTICAL && searchResultBotContextSwitch != null;
+            if (hasTop) {
+                if (i == 0) {
+                    return searchResultBotContextSwitch;
+                } else {
+                    i--;
+                }
+            }
             if (i < 0 || i >= searchResultBotContext.size()) {
                 return null;
             }
@@ -741,6 +914,8 @@ public void didPressedImage(ContextLinkCell cell) {
                     delegate.onContextClick(cell.getResult());
                 }
             });
+        } else if (viewType == 2) {
+            view = new BotSwitchCell(mContext);
         } else {
             view = new MentionCell(mContext);
             ((MentionCell) view).setIsDarkTheme(isDarkTheme);
@@ -751,7 +926,17 @@ public void didPressedImage(ContextLinkCell cell) {
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         if (searchResultBotContext != null) {
-            ((ContextLinkCell) holder.itemView).setLink(searchResultBotContext.get(position), contextMedia, position != searchResultBotContext.size() - 1);
+            boolean hasTop = getOrientation() == LinearLayoutManager.VERTICAL && searchResultBotContextSwitch != null;
+            if (holder.getItemViewType() == 2) {
+                if (hasTop) {
+                    ((BotSwitchCell) holder.itemView).setText(searchResultBotContextSwitch.text);
+                }
+            } else {
+                if (hasTop) {
+                    position--;
+                }
+                ((ContextLinkCell) holder.itemView).setLink(searchResultBotContext.get(position), contextMedia, position != searchResultBotContext.size() - 1, hasTop && position == 0);
+            }
         } else {
             if (searchResultUsernames != null) {
                 ((MentionCell) holder.itemView).setUser(searchResultUsernames.get(position));
@@ -762,4 +947,16 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             }
         }
     }
+
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == 2) {
+            if (foundContextBot != null && foundContextBot.bot_inline_geo) {
+                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    locationProvider.start();
+                } else {
+                    onLocationUnavailable();
+                }
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java
deleted file mode 100644
index 5eb63d8ad..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PhotoAttachAdapter.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Adapters;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.support.widget.RecyclerView;
-import org.telegram.ui.Cells.PhotoAttachPhotoCell;
-
-import java.util.HashMap;
-
-public class PhotoAttachAdapter extends RecyclerView.Adapter {
-
-    private Context mContext;
-    private PhotoAttachAdapterDelegate delegate;
-    private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = new HashMap<>();
-
-    public interface PhotoAttachAdapterDelegate {
-        void selectedPhotosChanged();
-    }
-
-    private class Holder extends RecyclerView.ViewHolder {
-
-        public Holder(View itemView) {
-            super(itemView);
-        }
-    }
-
-    public PhotoAttachAdapter(Context context) {
-        mContext = context;
-    }
-
-    public void clearSelectedPhotos() {
-        if (!selectedPhotos.isEmpty()) {
-            for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
-                MediaController.PhotoEntry photoEntry = entry.getValue();
-                photoEntry.imagePath = null;
-                photoEntry.thumbPath = null;
-                photoEntry.caption = null;
-            }
-            selectedPhotos.clear();
-            delegate.selectedPhotosChanged();
-            notifyDataSetChanged();
-        }
-    }
-
-    public HashMap<Integer, MediaController.PhotoEntry> getSelectedPhotos() {
-        return selectedPhotos;
-    }
-
-    public void setDelegate(PhotoAttachAdapterDelegate photoAttachAdapterDelegate) {
-        delegate = photoAttachAdapterDelegate;
-    }
-
-    @Override
-    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
-        PhotoAttachPhotoCell cell = (PhotoAttachPhotoCell) holder.itemView;
-        MediaController.PhotoEntry photoEntry = MediaController.allPhotosAlbumEntry.photos.get(position);
-        cell.setPhotoEntry(photoEntry, position == MediaController.allPhotosAlbumEntry.photos.size() - 1);
-        cell.setChecked(selectedPhotos.containsKey(photoEntry.imageId), false);
-        cell.getImageView().setTag(position);
-        cell.setTag(position);
-    }
-
-    @Override
-    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-        PhotoAttachPhotoCell cell = new PhotoAttachPhotoCell(mContext);
-        cell.setDelegate(new PhotoAttachPhotoCell.PhotoAttachPhotoCellDelegate() {
-            @Override
-            public void onCheckClick(PhotoAttachPhotoCell v) {
-                MediaController.PhotoEntry photoEntry = v.getPhotoEntry();
-                if (selectedPhotos.containsKey(photoEntry.imageId)) {
-                    selectedPhotos.remove(photoEntry.imageId);
-                    v.setChecked(false, true);
-                    photoEntry.imagePath = null;
-                    photoEntry.thumbPath = null;
-                    v.setPhotoEntry(photoEntry, (Integer) v.getTag() == MediaController.allPhotosAlbumEntry.photos.size() - 1);
-                } else {
-                    selectedPhotos.put(photoEntry.imageId, photoEntry);
-                    v.setChecked(true, true);
-                }
-                delegate.selectedPhotosChanged();
-            }
-        });
-        return new Holder(cell);
-    }
-
-    @Override
-    public int getItemCount() {
-        return (MediaController.allPhotosAlbumEntry != null ? MediaController.allPhotosAlbumEntry.photos.size() : 0);
-    }
-
-    @Override
-    public int getItemViewType(int position) {
-        return 0;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
index 08ae3a64d..11a5651b2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
@@ -238,7 +238,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         } else {
             if (view == null) {
                 if (useUserCell) {
-                    view = new UserCell(mContext, 1, 1);
+                    view = new UserCell(mContext, 1, 1, false);
                     if (checkedMap != null) {
                         ((UserCell) view).setChecked(false, false);
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
index 416743649..7be4b309f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/AudioPlayerActivity.java
@@ -30,6 +30,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LineProgressView;
 
@@ -179,9 +180,9 @@ public boolean onTouch(View v, MotionEvent event) {
         });
         fragmentView = frameLayout;
 
-        actionBar.setBackgroundColor(0xffffffff);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_PLAYER_COLOR);
         actionBar.setBackButtonImage(R.drawable.pl_back);
-        actionBar.setItemsBackground(R.drawable.bar_selector_audio);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR);
         if (!AndroidUtilities.isTablet()) {
             actionBar.showActionModeTop();
         }
@@ -436,7 +437,7 @@ private void updateTitle(boolean shutdown) {
                 actionBar.setTitle(messageObject.getMusicTitle());
                 actionBar.getTitleTextView().setTextColor(0xff212121);
                 actionBar.setSubtitle(messageObject.getMusicAuthor());
-                actionBar.getSubTitleTextView().setTextColor(0xff8a8a8a);
+                actionBar.getSubtitleTextView().setTextColor(0xff8a8a8a);
             }
             AudioInfo audioInfo = MediaController.getInstance().getAudioInfo();
             if (audioInfo != null && audioInfo.getCover() != null) {
@@ -451,10 +452,14 @@ private void updateTitle(boolean shutdown) {
 
             if (durationTextView != null) {
                 int duration = 0;
-                for (TLRPC.DocumentAttribute attribute : messageObject.messageOwner.media.document.attributes) {
-                    if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                        duration = attribute.duration;
-                        break;
+                TLRPC.Document document = messageObject.getDocument();
+                if (document != null) {
+                    for (int a = 0; a < document.attributes.size(); a++) {
+                        TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                        if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                            duration = attribute.duration;
+                            break;
+                        }
                     }
                 }
                 durationTextView.setText(duration != 0 ? String.format("%d:%02d", duration / 60, duration % 60) : "-:--");
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index 33d2252dc..efde21e42 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -263,11 +263,19 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 0);
+                    view = new UserCell(mContext, 1, 0, false);
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
                 if (user != null) {
-                    ((UserCell) view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
+                    String number;
+                    if (user.bot) {
+                        number = LocaleController.getString("Bot", R.string.Bot).substring(0, 1).toUpperCase() + LocaleController.getString("Bot", R.string.Bot).substring(1);
+                    } else if (user.phone != null && user.phone.length() != 0) {
+                        number = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        number = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
+                    }
+                    ((UserCell) view).setData(user, null, number, 0);
                 }
             } else if (type == 1) {
                 if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
index 4339be241..ccd898b41 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CacheControlActivity.java
@@ -413,10 +413,9 @@ public void run() {
                                                         NativeByteBuffer data = new NativeByteBuffer(cursor2.byteArrayLength(0));
                                                         if (data != null && cursor2.byteBufferValue(0, data) != 0) {
                                                             TLRPC.Message message = TLRPC.Message.TLdeserialize(data, data.readInt32(false), false);
-                                                            if (message == null) {
-                                                                continue;
+                                                            if (message != null) {
+                                                                arrayList.add(message);
                                                             }
-                                                            arrayList.add(message);
                                                         }
                                                         data.reuse();
                                                     }
@@ -473,7 +472,8 @@ public void run() {
                         return;
                     }
                     BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-                    builder.setApplyTopPaddings(false);
+                    builder.setApplyTopPadding(false);
+                    builder.setApplyBottomPadding(false);
                     LinearLayout linearLayout = new LinearLayout(getParentActivity());
                     linearLayout.setOrientation(LinearLayout.VERTICAL);
                     for (int a = 0; a < 6; a++) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
index 9e75d81f2..160f91b83 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AboutLinkCell.java
@@ -12,6 +12,7 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.os.Build;
 import android.text.Layout;
 import android.text.Spannable;
 import android.text.SpannableStringBuilder;
@@ -29,8 +30,10 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LinkPath;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 
 public class AboutLinkCell extends FrameLayout {
@@ -60,10 +63,10 @@ public AboutLinkCell(Context context) {
         textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
         textPaint.setTextSize(AndroidUtilities.dp(16));
         textPaint.setColor(0xff000000);
-        textPaint.linkColor = 0xff316f9f;
+        textPaint.linkColor = Theme.MSG_LINK_TEXT_COLOR;
 
         urlPaint = new Paint();
-        urlPaint.setColor(0x33316f9f);
+        urlPaint.setColor(Theme.MSG_LINK_SELECT_BACKGROUND_COLOR);
 
         imageView = new ImageView(context);
         imageView.setScaleType(ImageView.ScaleType.CENTER);
@@ -107,6 +110,12 @@ public boolean onTouchEvent(MotionEvent event) {
         float x = event.getX();
         float y = event.getY();
 
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(x, y);
+            }
+        }
+
         boolean result = false;
         if (textLayout != null) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || pressedLink != null && event.getAction() == MotionEvent.ACTION_UP) {
@@ -128,7 +137,7 @@ public boolean onTouchEvent(MotionEvent event) {
                                 result = true;
                                 try {
                                     int start = buffer.getSpanStart(pressedLink);
-                                    urlPath.setCurrentLayout(textLayout, start);
+                                    urlPath.setCurrentLayout(textLayout, start, 0);
                                     textLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
                                 } catch (Exception e) {
                                     FileLog.e("tmessages", e);
@@ -154,7 +163,7 @@ public boolean onTouchEvent(MotionEvent event) {
                             }
                         } else {
                             if (pressedLink instanceof URLSpan) {
-                                AndroidUtilities.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
+                                Browser.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
                             } else {
                                 pressedLink.onClick(this);
                             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
index ea8c3d3a6..71d87bdbe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
@@ -55,6 +55,10 @@ protected void setDrawableBounds(Drawable drawable, int x, int y) {
         setDrawableBounds(drawable, x, y, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
     }
 
+    protected void setDrawableBounds(Drawable drawable, float x, float y) {
+        setDrawableBounds(drawable, (int) x, (int) y, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
+    }
+
     protected void setDrawableBounds(Drawable drawable, int x, int y, int w, int h) {
         if (drawable != null) {
             drawable.setBounds(x, y, x + w, y + h);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
index 799fa319f..e2f0292fc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotHelpCell.java
@@ -28,8 +28,9 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.ui.Components.LinkPath;
-import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TypefaceSpan;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 
@@ -60,10 +61,10 @@ public BotHelpCell(Context context) {
         textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
         textPaint.setTextSize(AndroidUtilities.dp(16));
         textPaint.setColor(0xff000000);
-        textPaint.linkColor = 0xff316f9f;
+        textPaint.linkColor = Theme.MSG_LINK_TEXT_COLOR;
 
         urlPaint = new Paint();
-        urlPaint.setColor(0x33316f9f);
+        urlPaint.setColor(Theme.MSG_LINK_SELECT_BACKGROUND_COLOR);
     }
 
     public void setDelegate(BotHelpCellDelegate botHelpCellDelegate) {
@@ -100,12 +101,16 @@ public void setText(String text) {
         MessageObject.addLinks(stringBuilder);
         stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, help.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
         Emoji.replaceEmoji(stringBuilder, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
-        textLayout = new StaticLayout(stringBuilder, textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        width = 0;
-        height = textLayout.getHeight() + AndroidUtilities.dp(4 + 18);
-        int count = textLayout.getLineCount();
-        for (int a = 0; a < count; a++) {
-            width = (int) Math.ceil(Math.max(width, textLayout.getLineWidth(a) + textLayout.getLineLeft(a)));
+        try {
+            textLayout = new StaticLayout(stringBuilder, textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            width = 0;
+            height = textLayout.getHeight() + AndroidUtilities.dp(4 + 18);
+            int count = textLayout.getLineCount();
+            for (int a = 0; a < count; a++) {
+                width = (int) Math.ceil(Math.max(width, textLayout.getLineWidth(a) + textLayout.getLineLeft(a)));
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessage", e);
         }
         width += AndroidUtilities.dp(4 + 18);
     }
@@ -136,7 +141,7 @@ public boolean onTouchEvent(MotionEvent event) {
                                 result = true;
                                 try {
                                     int start = buffer.getSpanStart(pressedLink);
-                                    urlPath.setCurrentLayout(textLayout, start);
+                                    urlPath.setCurrentLayout(textLayout, start, 0);
                                     textLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
                                 } catch (Exception e) {
                                     FileLog.e("tmessages", e);
@@ -162,7 +167,7 @@ public boolean onTouchEvent(MotionEvent event) {
                             }
                         } else {
                             if (pressedLink instanceof URLSpan) {
-                                AndroidUtilities.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
+                                Browser.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
                             } else {
                                 pressedLink.onClick(this);
                             }
@@ -189,14 +194,16 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     protected void onDraw(Canvas canvas) {
         int x = (canvas.getWidth() - width) / 2;
         int y = AndroidUtilities.dp(4);
-        ResourceLoader.backgroundMediaDrawableIn.setBounds(x, y, width + x, height + y);
-        ResourceLoader.backgroundMediaDrawableIn.draw(canvas);
+        Theme.backgroundMediaDrawableIn.setBounds(x, y, width + x, height + y);
+        Theme.backgroundMediaDrawableIn.draw(canvas);
         canvas.save();
         canvas.translate(textX = AndroidUtilities.dp(2 + 9) + x, textY = AndroidUtilities.dp(2 + 9) + y);
         if (pressedLink != null) {
             canvas.drawPath(urlPath, urlPaint);
         }
-        textLayout.draw(canvas);
+        if (textLayout != null) {
+            textLayout.draw(canvas);
+        }
         canvas.restore();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotSwitchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotSwitchCell.java
new file mode 100644
index 000000000..dbe52d888
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BotSwitchCell.java
@@ -0,0 +1,62 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class BotSwitchCell extends FrameLayout {
+
+    private TextView textView;
+
+    public BotSwitchCell(Context context) {
+        super(context);
+        setBackgroundResource(R.drawable.list_selector);
+
+        textView = new TextView(context);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        textView.setTextColor(0xff4391cc);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        textView.setSingleLine(true);
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        textView.setMaxLines(1);
+        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), 14, 0, 14, 0));
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(event.getX(), event.getY());
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
+    }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index 56228aec3..5e6f04df9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -12,7 +12,7 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
+import android.graphics.RectF;
 import android.text.Layout;
 import android.text.Spannable;
 import android.text.StaticLayout;
@@ -22,15 +22,15 @@
 import android.view.SoundEffectConstants;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.PhotoViewer;
 import org.telegram.ui.Components.AvatarDrawable;
 
@@ -43,6 +43,8 @@
     }
 
     private static TextPaint textPaint;
+    private static Paint backPaint;
+    private static RectF rect;
 
     private URLSpan pressedLink;
 
@@ -57,6 +59,8 @@
     private int previousWidth = 0;
     private boolean imagePressed = false;
 
+    private boolean hasReplyMessage;
+
     private MessageObject currentMessageObject;
 
     private ChatActionCellDelegate delegate;
@@ -67,11 +71,17 @@ public ChatActionCell(Context context) {
             textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             textPaint.setColor(0xffffffff);
             textPaint.linkColor = 0xffffffff;
+            textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            backPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            rect = new RectF();
         }
+        backPaint.setColor(ApplicationLoader.getServiceMessageColor());
+
         imageReceiver = new ImageReceiver(this);
         imageReceiver.setRoundRadius(AndroidUtilities.dp(32));
         avatarDrawable = new AvatarDrawable();
-        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
+        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize - 2));
     }
 
     public void setDelegate(ChatActionCellDelegate delegate) {
@@ -79,10 +89,11 @@ public void setDelegate(ChatActionCellDelegate delegate) {
     }
 
     public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject == messageObject) {
+        if (currentMessageObject == messageObject && (hasReplyMessage || messageObject.replyMessageObject == null)) {
             return;
         }
         currentMessageObject = messageObject;
+        hasReplyMessage = messageObject.replyMessageObject != null;
         previousWidth = 0;
         if (currentMessageObject.type == 11) {
             int id = 0;
@@ -220,8 +231,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int width = Math.max(AndroidUtilities.dp(30), MeasureSpec.getSize(widthMeasureSpec));
         if (width != previousWidth) {
             previousWidth = width;
-
-            textLayout = new StaticLayout(currentMessageObject.messageText, textPaint, width - AndroidUtilities.dp(30), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+            int maxWidth = width - AndroidUtilities.dp(30);
+            textLayout = new StaticLayout(currentMessageObject.messageText, textPaint, maxWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
             textHeight = 0;
             textWidth = 0;
             try {
@@ -230,6 +241,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     float lineWidth;
                     try {
                         lineWidth = textLayout.getLineWidth(a);
+                        if (lineWidth > maxWidth) {
+                            lineWidth = maxWidth;
+                        }
                         textHeight = (int)Math.max(textHeight, Math.ceil(textLayout.getLineBottom(a)));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
@@ -252,26 +266,148 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         setMeasuredDimension(width, textHeight + AndroidUtilities.dp(14 + (currentMessageObject.type == 11 ? 70 : 0)));
     }
 
+    private int findMaxWidthAroundLine(int line) {
+        int width = (int) Math.ceil(textLayout.getLineWidth(line));
+        int count = textLayout.getLineCount();
+        for (int a = line + 1; a < count; a++) {
+            int w = (int) Math.ceil(textLayout.getLineWidth(a));
+            if (Math.abs(w - width) < AndroidUtilities.dp(12)) {
+                width = Math.max(w, width);
+            } else {
+                break;
+            }
+        }
+        for (int a = line - 1; a >= 0; a--) {
+            int w = (int) Math.ceil(textLayout.getLineWidth(a));
+            if (Math.abs(w - width) < AndroidUtilities.dp(12)) {
+                width = Math.max(w, width);
+            } else {
+                break;
+            }
+        }
+        return width;
+    }
+
     @Override
     protected void onDraw(Canvas canvas) {
         if (currentMessageObject == null) {
             return;
         }
 
-        Drawable backgroundDrawable;
-        if (ApplicationLoader.isCustomTheme()) {
-            backgroundDrawable = ResourceLoader.backgroundBlack;
-        } else {
-            backgroundDrawable = ResourceLoader.backgroundBlue;
-        }
-        backgroundDrawable.setBounds(textX - AndroidUtilities.dp(5), AndroidUtilities.dp(5), textX + textWidth + AndroidUtilities.dp(5), AndroidUtilities.dp(9) + textHeight);
-        backgroundDrawable.draw(canvas);
-
         if (currentMessageObject.type == 11) {
             imageReceiver.draw(canvas);
         }
 
         if (textLayout != null) {
+            final int count = textLayout.getLineCount();
+            final int corner = AndroidUtilities.dp(6);
+            int y = AndroidUtilities.dp(7);
+            int previousLineBottom = 0;
+            int dx;
+            int dy;
+            for (int a = 0; a < count; a++) {
+                int width = findMaxWidthAroundLine(a);
+                int x = (getMeasuredWidth() - width) / 2 - AndroidUtilities.dp(3);
+                width += AndroidUtilities.dp(6);
+                int lineBottom = textLayout.getLineBottom(a);
+                int height = lineBottom - previousLineBottom;
+                int additionalHeight = 0;
+                previousLineBottom = lineBottom;
+
+                boolean drawBottomCorners = a == count - 1;
+                boolean drawTopCorners = a == 0;
+
+                if (drawTopCorners) {
+                    y -= AndroidUtilities.dp(3);
+                    height += AndroidUtilities.dp(3);
+                }
+                if (drawBottomCorners) {
+                    height += AndroidUtilities.dp(3);
+                }
+                canvas.drawRect(x, y, x + width, y + height, backPaint);
+
+                if (!drawBottomCorners && a + 1 < count) {
+                    int nextLineWidth = findMaxWidthAroundLine(a + 1) + AndroidUtilities.dp(6);
+                    if (nextLineWidth + corner * 2 < width) {
+                        int nextX = (getMeasuredWidth() - nextLineWidth) / 2;
+                        drawBottomCorners = true;
+                        additionalHeight = AndroidUtilities.dp(3);
+
+                        canvas.drawRect(x, y + height, nextX, y + height + AndroidUtilities.dp(3), backPaint);
+                        canvas.drawRect(nextX + nextLineWidth, y + height, x + width, y + height + AndroidUtilities.dp(3), backPaint);
+                    } else if (width + corner * 2 < nextLineWidth) {
+                        additionalHeight = AndroidUtilities.dp(3);
+
+                        dy = y + height - AndroidUtilities.dp(9);
+
+                        dx = x - corner * 2;
+                        Theme.cornerInner[2].setBounds(dx, dy, dx + corner, dy + corner);
+                        Theme.cornerInner[2].draw(canvas);
+
+                        dx = x + width + corner;
+                        Theme.cornerInner[3].setBounds(dx, dy, dx + corner, dy + corner);
+                        Theme.cornerInner[3].draw(canvas);
+                    } else {
+                        additionalHeight = AndroidUtilities.dp(6);
+                    }
+                }
+                if (!drawTopCorners && a > 0) {
+                    int prevLineWidth = findMaxWidthAroundLine(a - 1) + AndroidUtilities.dp(6);
+                    if (prevLineWidth + corner * 2 < width) {
+                        int prevX = (getMeasuredWidth() - prevLineWidth) / 2;
+                        drawTopCorners = true;
+                        y -= AndroidUtilities.dp(3);
+                        height += AndroidUtilities.dp(3);
+
+                        canvas.drawRect(x, y, prevX, y + AndroidUtilities.dp(3), backPaint);
+                        canvas.drawRect(prevX + prevLineWidth, y, x + width, y + AndroidUtilities.dp(3), backPaint);
+                    } else if (width + corner * 2 < prevLineWidth) {
+                        y -= AndroidUtilities.dp(3);
+                        height += AndroidUtilities.dp(3);
+
+                        dy = y + corner;
+
+                        dx = x - corner * 2;
+                        Theme.cornerInner[0].setBounds(dx, dy, dx + corner, dy + corner);
+                        Theme.cornerInner[0].draw(canvas);
+
+                        dx = x + width + corner;
+                        Theme.cornerInner[1].setBounds(dx, dy, dx + corner, dy + corner);
+                        Theme.cornerInner[1].draw(canvas);
+                    } else {
+                        y -= AndroidUtilities.dp(6);
+                        height += AndroidUtilities.dp(6);
+                    }
+                }
+
+                canvas.drawRect(x - corner, y + corner, x, y + height + additionalHeight - corner, backPaint);
+                canvas.drawRect(x + width, y + corner, x + width + corner, y + height + additionalHeight - corner, backPaint);
+
+                if (drawTopCorners) {
+                    dx = x - corner;
+                    Theme.cornerOuter[0].setBounds(dx, y, dx + corner, y + corner);
+                    Theme.cornerOuter[0].draw(canvas);
+
+                    dx = x + width;
+                    Theme.cornerOuter[1].setBounds(dx, y, dx + corner, y + corner);
+                    Theme.cornerOuter[1].draw(canvas);
+                }
+
+                if (drawBottomCorners) {
+                    dy = y + height + additionalHeight - corner;
+
+                    dx = x + width;
+                    Theme.cornerOuter[2].setBounds(dx, dy, dx + corner, dy + corner);
+                    Theme.cornerOuter[2].draw(canvas);
+
+                    dx = x - corner;
+                    Theme.cornerOuter[3].setBounds(dx, dy, dx + corner, dy + corner);
+                    Theme.cornerOuter[3].draw(canvas);
+                }
+
+                y += height;
+            }
+
             canvas.save();
             canvas.translate(textXLeft, textY);
             textLayout.draw(canvas);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
deleted file mode 100644
index 0e1040b9a..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ /dev/null
@@ -1,498 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ImageLoader;
-import org.telegram.messenger.SendMessagesHelper;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.MessageObject;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.SeekBar;
-import org.telegram.ui.Components.SeekBarWaveform;
-
-import java.io.File;
-
-public class ChatAudioCell extends ChatBaseCell implements SeekBar.SeekBarDelegate {
-
-    public interface ChatAudioCellDelegate {
-        boolean needPlayAudio(MessageObject messageObject);
-    }
-
-    private static TextPaint timePaint;
-    private static Paint circlePaint;
-
-    private boolean hasWaveform;
-    private SeekBar seekBar;
-    private SeekBarWaveform seekBarWaveform;
-    private int seekBarX;
-    private int seekBarY;
-
-    private RadialProgress radialProgress;
-    private int buttonState = 0;
-    private int buttonX;
-    private int buttonY;
-    private boolean buttonPressed = false;
-
-    private StaticLayout timeLayout;
-    private int timeX;
-    private int timeWidth2;
-    private String lastTimeString = null;
-
-    private ChatAudioCellDelegate audioDelegate;
-
-    public ChatAudioCell(Context context) {
-        super(context);
-
-        seekBar = new SeekBar(context);
-        seekBar.setDelegate(this);
-
-        seekBarWaveform = new SeekBarWaveform(context);
-        seekBarWaveform.setDelegate(this);
-        seekBarWaveform.setParentView(this);
-
-        radialProgress = new RadialProgress(this);
-        drawForwardedName = true;
-
-        if (timePaint == null) {
-            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(12));
-
-            circlePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-        }
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        updateButtonState(false);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-        boolean result = false;
-        if (delegate.canPerformActions()) {
-            if (hasWaveform) {
-                result = seekBarWaveform.onTouch(event.getAction(), event.getX() - seekBarX - AndroidUtilities.dp(13), event.getY() - seekBarY);
-            } else {
-                result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
-            }
-            if (result) {
-                if (!hasWaveform && event.getAction() == MotionEvent.ACTION_DOWN) {
-                    getParent().requestDisallowInterceptTouchEvent(true);
-                } else if (hasWaveform && !seekBarWaveform.isStartDraging() && event.getAction() == MotionEvent.ACTION_UP) {
-                    didPressedButton();
-                }
-                invalidate();
-            } else {
-                int side = AndroidUtilities.dp(36);
-                boolean area;
-                if (buttonState == 0 || buttonState == 1) {
-                    area = x >= buttonX - AndroidUtilities.dp(12) && x <= buttonX - AndroidUtilities.dp(12) + backgroundWidth && y >= namesOffset && y <= getMeasuredHeight();
-                } else {
-                    area = x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side;
-                }
-                if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                    if (area) {
-                        buttonPressed = true;
-                        invalidate();
-                        result = true;
-                        radialProgress.swapBackground(getDrawableForCurrentState());
-                    }
-                } else if (buttonPressed) {
-                    if (event.getAction() == MotionEvent.ACTION_UP) {
-                        buttonPressed = false;
-                        playSoundEffect(SoundEffectConstants.CLICK);
-                        didPressedButton();
-                        invalidate();
-                    } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                        buttonPressed = false;
-                        invalidate();
-                    } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                        if (!area) {
-                            buttonPressed = false;
-                            invalidate();
-                        }
-                    }
-                    radialProgress.swapBackground(getDrawableForCurrentState());
-                }
-                if (result && event.getAction() == MotionEvent.ACTION_DOWN) {
-                    startCheckLongPress();
-                }
-                if (event.getAction() != MotionEvent.ACTION_DOWN && event.getAction() != MotionEvent.ACTION_MOVE) {
-                    cancelCheckLongPress();
-                }
-                if (!result) {
-                    result = super.onTouchEvent(event);
-                }
-            }
-        }
-
-        return result;
-    }
-
-    @Override
-    protected void onLongPress() {
-        super.onLongPress();
-        if (buttonPressed) {
-            buttonPressed = false;
-            invalidate();
-        }
-    }
-
-    public void setAudioDelegate(ChatAudioCellDelegate delegate) {
-        audioDelegate = delegate;
-    }
-
-    private void didPressedButton() {
-        if (buttonState == 0) {
-            if (audioDelegate.needPlayAudio(currentMessageObject)) {
-                buttonState = 1;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                invalidate();
-            }
-        } else if (buttonState == 1) {
-            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
-            if (result) {
-                buttonState = 0;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            radialProgress.setProgress(0, false);
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-            buttonState = 3;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, false);
-            invalidate();
-        } else if (buttonState == 3) {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
-            buttonState = 2;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-            invalidate();
-        } else if (buttonState == 4) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
-                    delegate.didPressedCancelSendButton(this);
-                }
-            }
-        }
-    }
-
-    public void updateProgress() {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (hasWaveform) {
-            if (!seekBarWaveform.isDragging()) {
-                seekBarWaveform.setProgress(currentMessageObject.audioProgress);
-            }
-        } else {
-            if (!seekBar.isDragging()) {
-                seekBar.setProgress(currentMessageObject.audioProgress);
-            }
-        }
-
-        int duration = 0;
-        if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            for (int a = 0; a < currentMessageObject.messageOwner.media.document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = currentMessageObject.messageOwner.media.document.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                    duration = attribute.duration;
-                    break;
-                }
-            }
-        } else {
-            duration = currentMessageObject.audioProgressSec;
-        }
-        String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
-        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            lastTimeString = timeString;
-            timeWidth2 = (int)Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        }
-        invalidate();
-    }
-
-    public void downloadAudioIfNeed() {
-        if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-            buttonState = 3;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-        }
-    }
-
-    public void updateButtonState(boolean animated) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-            MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
-            buttonState = 4;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-            Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-            if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
-                progress = 1.0f;
-            }
-            radialProgress.setProgress(progress != null ? progress : 0, false);
-        } else {
-            File cacheFile = null;
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
-                cacheFile = new File(currentMessageObject.messageOwner.attachPath);
-                if(!cacheFile.exists()) {
-                    cacheFile = null;
-                }
-            }
-            if (cacheFile == null) {
-                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            }
-            if (cacheFile.exists()) {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-                boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
-                if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
-                    buttonState = 0;
-                } else {
-                    buttonState = 1;
-                }
-                radialProgress.setProgress(0, animated);
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-            } else {
-                String fileName = currentMessageObject.getFileName();
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    buttonState = 2;
-                    radialProgress.setProgress(0, animated);
-                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                } else {
-                    buttonState = 3;
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    if (progress != null) {
-                        radialProgress.setProgress(progress, animated);
-                    } else {
-                        radialProgress.setProgress(0, animated);
-                    }
-                    radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-                }
-            }
-        }
-        updateProgress();
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState(true);
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        updateButtonState(true);
-        updateWaveform();
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        radialProgress.setProgress(progress, true);
-        if (buttonState != 3) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-        radialProgress.setProgress(progress, true);
-    }
-
-    @Override
-    public void onSeekBarDrag(float progress) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        currentMessageObject.audioProgress = progress;
-        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(66) + namesOffset);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject.isOutOwner()) {
-            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(55);
-            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(13);
-            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(66);
-        } else {
-            if (isChat && currentMessageObject.isFromUser()) {
-                seekBarX = AndroidUtilities.dp(116);
-                buttonX = AndroidUtilities.dp(74);
-                timeX = AndroidUtilities.dp(127);
-            } else {
-                seekBarX = AndroidUtilities.dp(64);
-                buttonX = AndroidUtilities.dp(22);
-                timeX = AndroidUtilities.dp(75);
-            }
-        }
-        seekBarWaveform.width = seekBar.width = backgroundWidth - AndroidUtilities.dp(70);
-        seekBarWaveform.height = seekBar.height = AndroidUtilities.dp(30);
-        seekBarWaveform.width -= AndroidUtilities.dp(20);
-        seekBarY = AndroidUtilities.dp(11) + namesOffset;
-        buttonY = AndroidUtilities.dp(13) + namesOffset;
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(40), buttonY + AndroidUtilities.dp(40));
-
-        updateProgress();
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        boolean dataChanged = currentMessageObject == messageObject && isUserDataChanged();
-        if (currentMessageObject != messageObject || dataChanged) {
-            if (AndroidUtilities.isTablet()) {
-                backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(300));
-            } else {
-                backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(300));
-            }
-
-            int duration = 0;
-            for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                    duration = attribute.duration;
-                    break;
-                }
-            }
-
-            availableTimeWidth = backgroundWidth - AndroidUtilities.dp(75 + 14) - (int) Math.ceil(timePaint.measureText("00:00"));
-            measureTime(messageObject);
-            int minSize = AndroidUtilities.dp(40 + 14 + 20 + 90 + 10) + timeWidth;
-            backgroundWidth = Math.min(backgroundWidth, minSize + duration * AndroidUtilities.dp(10));
-
-            hasWaveform = false;
-            if (messageObject.isOutOwner()) {
-                seekBarWaveform.setColors(0xffc3e3ab, 0xff87bf78, 0xffa9d389);
-            } else {
-                seekBarWaveform.setColors(0xffdee5eb, 0xff4195e5, 0xffaed5e2);
-            }
-            seekBar.type = messageObject.isOutOwner() ? 0 : 1;
-
-            super.setMessageObject(messageObject);
-        }
-        updateWaveform();
-        updateButtonState(dataChanged);
-    }
-
-    @Override
-    protected int getMaxNameWidth() {
-        return backgroundWidth - AndroidUtilities.dp(24);
-    }
-
-    @Override
-    public void setCheckPressed(boolean value, boolean pressed) {
-        super.setCheckPressed(value, pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-        seekBarWaveform.setSelected(isDrawSelectedBackground());
-    }
-
-    @Override
-    public void setHighlighted(boolean value) {
-        super.setHighlighted(value);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-        seekBarWaveform.setSelected(isDrawSelectedBackground());
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        super.setPressed(pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-        seekBarWaveform.setSelected(isDrawSelectedBackground());
-    }
-
-    private Drawable getDrawableForCurrentState() {
-        return ResourceLoader.audioStatesDrawable[currentMessageObject.isOutOwner() ? buttonState : buttonState + 5][isDrawSelectedBackground() ? 2 : (buttonPressed ? 1 : 0)];
-    }
-
-    private void updateWaveform() {
-        File path = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-        for (int a = 0; a < currentMessageObject.messageOwner.media.document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = currentMessageObject.messageOwner.media.document.attributes.get(a);
-            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                if (attribute.waveform == null || attribute.waveform.length == 0) {
-                    MediaController.getInstance().generateWaveform(currentMessageObject);
-                }
-                hasWaveform = attribute.waveform != null;
-                seekBarWaveform.setWaveform(attribute.waveform);
-                seekBarWaveform.setMessageObject(currentMessageObject);
-                break;
-            }
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        super.onDraw(canvas);
-
-        canvas.save();
-        if (hasWaveform) {
-            canvas.translate(seekBarX + AndroidUtilities.dp(13), seekBarY);
-            seekBarWaveform.draw(canvas);
-        } else {
-            canvas.translate(seekBarX, seekBarY);
-            seekBar.draw(canvas);
-        }
-        canvas.restore();
-
-        radialProgress.setProgressColor(currentMessageObject.isOutOwner() ? 0xff87bf78 : (isDrawSelectedBackground() ? 0xff83b2c2 : 0xffa2b5c7));
-        timePaint.setColor(currentMessageObject.isOutOwner() ? 0xff70b15c : (isDrawSelectedBackground() ? 0xff89b4c1 : 0xffa1aab3));
-        circlePaint.setColor(currentMessageObject.isOutOwner() ? 0xff87bf78 : 0xff4195e5);
-        radialProgress.draw(canvas);
-
-        canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(42) + namesOffset);
-        timeLayout.draw(canvas);
-        canvas.restore();
-
-        if (currentMessageObject.messageOwner.to_id.channel_id == 0 && currentMessageObject.isContentUnread()) {
-            canvas.drawCircle(timeX + timeWidth2 + AndroidUtilities.dp(8), AndroidUtilities.dp(49.5f) + namesOffset, AndroidUtilities.dp(3), circlePaint);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index ed1b12906..a3cf79580 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -1,5 +1,5 @@
 /*
- * This is the source code of Telegram for Android v. 1.3.x.
+ * This is the source code of Telegram for Android v. 3.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
@@ -10,9 +10,9 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.res.Configuration;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
 import android.text.SpannableStringBuilder;
@@ -30,7 +30,6 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.UserObject;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.tgnet.TLRPC;
@@ -39,9 +38,7 @@
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.LinkPath;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.StaticLayoutEx;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TypefaceSpan;
 
 public class ChatBaseCell extends BaseCell implements MediaController.FileDownloadProgressListener {
@@ -52,36 +49,37 @@
         void didPressedChannelAvatar(ChatBaseCell cell, TLRPC.Chat chat, int postId);
         void didPressedCancelSendButton(ChatBaseCell cell);
         void didLongPressed(ChatBaseCell cell);
-        void didPressReplyMessage(ChatBaseCell cell, int id);
-        void didPressUrl(MessageObject messageObject, ClickableSpan url, boolean longPress);
-        void needOpenWebView(String url, String title, String originalUrl, int w, int h);
-        void didClickedImage(ChatBaseCell cell);
-        void didPressShare(ChatBaseCell cell);
+        void didPressedReplyMessage(ChatBaseCell cell, int id);
+        void didPressedUrl(MessageObject messageObject, ClickableSpan url, boolean longPress);
+        void needOpenWebView(String url, String title, String description, String originalUrl, int w, int h);
+        void didPressedImage(ChatBaseCell cell);
+        void didPressedShare(ChatBaseCell cell);
+        void didPressedOther(ChatBaseCell cell);
+        void didPressedBotButton(ChatBaseCell cell, TLRPC.KeyboardButton button);
+        boolean needPlayAudio(MessageObject messageObject);
         boolean canPerformActions();
     }
 
-    protected ClickableSpan pressedLink;
-    protected boolean linkPreviewPressed;
-    protected LinkPath urlPath = new LinkPath();
-    protected static Paint urlPaint;
     private int TAG;
 
     public boolean isChat;
     protected boolean isPressed;
     protected boolean forwardName;
     protected boolean isHighlighted;
-    protected boolean media;
+    protected boolean mediaBackground;
     protected boolean isCheckPressed = true;
     private boolean wasLayout;
     protected boolean isAvatarVisible;
     protected boolean drawBackground = true;
+    protected int substractBackgroundHeight;
     protected boolean allowAssistant;
+    protected Drawable currentBackgroundDrawable;
     protected MessageObject currentMessageObject;
     private int viaWidth;
     private int viaNameWidth;
     protected int availableTimeWidth;
 
-    private static TextPaint timePaint;
+    protected static TextPaint timePaint;
     private static TextPaint namePaint;
     private static TextPaint forwardNamePaint;
     protected static TextPaint replyNamePaint;
@@ -121,14 +119,16 @@
     protected int nameWidth;
     private float nameOffsetX;
     private float nameX;
+    private float nameY;
     protected boolean drawName;
+    protected boolean drawNameLayout;
 
-    private StaticLayout forwardedNameLayout;
+    private StaticLayout[] forwardedNameLayout = new StaticLayout[2];
     protected int forwardedNameWidth;
     protected boolean drawForwardedName;
     private int forwardNameX;
     private int forwardNameY;
-    private float forwardNameOffsetX;
+    private float forwardNameOffsetX[] = new float[2];
 
     private StaticLayout timeLayout;
     protected int timeWidth;
@@ -166,7 +166,8 @@ public ChatBaseCell(Context context) {
             timePaint.setTextSize(AndroidUtilities.dp(12));
 
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            namePaint.setTextSize(AndroidUtilities.dp(14));
 
             forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
@@ -177,12 +178,9 @@ public ChatBaseCell(Context context) {
 
             replyTextPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             replyTextPaint.setTextSize(AndroidUtilities.dp(14));
-            replyTextPaint.linkColor = 0xff316f9f;
+            replyTextPaint.linkColor = Theme.MSG_LINK_TEXT_COLOR;
 
             replyLinePaint = new Paint();
-
-            urlPaint = new Paint();
-            urlPaint.setColor(0x33316f9f);
         }
         avatarImage = new ImageReceiver(this);
         avatarImage.setRoundRadius(AndroidUtilities.dp(21));
@@ -211,14 +209,6 @@ public void setPressed(boolean pressed) {
         invalidate();
     }
 
-    protected void resetPressedLink() {
-        if (pressedLink != null) {
-            pressedLink = null;
-        }
-        linkPreviewPressed = false;
-        invalidate();
-    }
-
     public void setDelegate(ChatBaseCellDelegate delegate) {
         this.delegate = delegate;
     }
@@ -330,11 +320,11 @@ protected void measureTime(MessageObject messageObject) {
         if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
             currentViewsString = String.format("%s", LocaleController.formatShortNumber(Math.max(1, messageObject.messageOwner.views), null));
             viewsTextWidth = (int) Math.ceil(timePaint.measureText(currentViewsString));
-            timeWidth += viewsTextWidth + ResourceLoader.viewsCountDrawable[0].getIntrinsicWidth() + AndroidUtilities.dp(10);
+            timeWidth += viewsTextWidth + Theme.viewsCountDrawable[0].getIntrinsicWidth() + AndroidUtilities.dp(10);
         }
         if (hasSign) {
             if (availableTimeWidth == 0) {
-                availableTimeWidth = AndroidUtilities.dp(100);
+                availableTimeWidth = AndroidUtilities.dp(1000);
             }
             CharSequence name = ContactsController.formatName(signUser.first_name, signUser.last_name).replace('\n', ' ');
             int widthForSign = availableTimeWidth - timeWidth;
@@ -357,7 +347,7 @@ protected boolean checkNeedDrawShareButton(MessageObject messageObject) {
                 return true;
             }
         } else if (messageObject.messageOwner.from_id < 0 || messageObject.messageOwner.post) {
-            if (messageObject.messageOwner.to_id.channel_id != 0 && (messageObject.messageOwner.reply_to_msg_id == 0 || messageObject.type != 13)) {
+            if (messageObject.messageOwner.to_id.channel_id != 0 && (messageObject.messageOwner.via_bot_id == 0 && messageObject.messageOwner.reply_to_msg_id == 0 || messageObject.type != 13)) {
                 return true;
             }
         }
@@ -384,6 +374,7 @@ public void setMessageObject(MessageObject messageObject) {
         currentUser = null;
         currentChat = null;
         currentViaBotUser = null;
+        drawNameLayout = false;
 
         if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
             if (currentMessageObject.isContentUnread() && !currentMessageObject.isOut()) {
@@ -432,25 +423,25 @@ public void setMessageObject(MessageObject messageObject) {
         namesOffset = 0;
 
         String viaUsername = null;
-        String viaString = null;
+        CharSequence viaString = null;
         if (messageObject.messageOwner.via_bot_id != 0) {
             TLRPC.User botUser = MessagesController.getInstance().getUser(messageObject.messageOwner.via_bot_id);
             if (botUser != null && botUser.username != null && botUser.username.length() > 0) {
                 viaUsername = "@" + botUser.username;
-                viaString = " via " + viaUsername;
-                viaWidth = (int) Math.ceil(forwardNamePaint.measureText(viaString));
+                viaString = AndroidUtilities.replaceTags(String.format(" via <b>%s</b>", viaUsername));
+                viaWidth = (int) Math.ceil(replyNamePaint.measureText(viaString, 0, viaString.length()));
                 currentViaBotUser = botUser;
             }
         } else if (messageObject.messageOwner.via_bot_name != null && messageObject.messageOwner.via_bot_name.length() > 0) {
             viaUsername = "@" + messageObject.messageOwner.via_bot_name;
-            viaString = " via " + messageObject.messageOwner.via_bot_name;
-            viaWidth = (int) Math.ceil(forwardNamePaint.measureText(viaString));
+            viaString = AndroidUtilities.replaceTags(String.format(" via <b>%s</b>", viaUsername));
+            viaWidth = (int) Math.ceil(replyNamePaint.measureText(viaString, 0, viaString.length()));
         }
 
         boolean authorName = drawName && isChat && !currentMessageObject.isOutOwner();
-        boolean viaBot = messageObject.messageOwner.fwd_from == null && viaUsername != null;
+        boolean viaBot = (messageObject.messageOwner.fwd_from == null || messageObject.type == 14) && viaUsername != null;
         if (authorName || viaBot) {
-            drawName = true;
+            drawNameLayout = true;
             nameWidth = getMaxNameWidth();
             if (nameWidth < 0) {
                 nameWidth = AndroidUtilities.dp(100);
@@ -467,30 +458,38 @@ public void setMessageObject(MessageObject messageObject) {
             } else {
                 currentNameString = "";
             }
-
-            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12) - (viaBot ? viaWidth : 0), TextUtils.TruncateAt.END);
+            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace('\n', ' '), namePaint, nameWidth - (viaBot ? viaWidth : 0), TextUtils.TruncateAt.END);
             if (viaBot) {
                 viaNameWidth = (int) Math.ceil(namePaint.measureText(nameStringFinal, 0, nameStringFinal.length()));
                 if (viaNameWidth != 0) {
                     viaNameWidth += AndroidUtilities.dp(4);
                 }
+                int color;
+                if (currentMessageObject.type == 13) {
+                    color = Theme.MSG_STICKER_VIA_BOT_NAME_TEXT_COLOR;
+                } else {
+                    color = currentMessageObject.isOutOwner() ? Theme.MSG_OUT_VIA_BOT_NAME_TEXT_COLOR : Theme.MSG_IN_VIA_BOT_NAME_TEXT_COLOR;
+                }
                 if (currentNameString.length() > 0) {
                     SpannableStringBuilder stringBuilder = new SpannableStringBuilder(String.format("%s via %s", nameStringFinal, viaUsername));
-                    stringBuilder.setSpan(new TypefaceSpan(null, 0, currentMessageObject.isOutOwner() ? 0xff4a923c : 0xff006fc8), nameStringFinal.length() + 1, nameStringFinal.length() + 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                    stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"), 0, currentMessageObject.isOutOwner() ? 0xff4a923c : 0xff006fc8), nameStringFinal.length() + 5, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    stringBuilder.setSpan(new TypefaceSpan(Typeface.DEFAULT, 0, color), nameStringFinal.length() + 1, nameStringFinal.length() + 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"), 0, color), nameStringFinal.length() + 5, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                     nameStringFinal = stringBuilder;
                 } else {
                     SpannableStringBuilder stringBuilder = new SpannableStringBuilder(String.format("via %s", viaUsername));
-                    stringBuilder.setSpan(new TypefaceSpan(null, 0, currentMessageObject.isOutOwner() ? 0xff4a923c : 0xff006fc8), 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                    stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"), 0, currentMessageObject.isOutOwner() ? 0xff4a923c : 0xff006fc8), 4, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    stringBuilder.setSpan(new TypefaceSpan(Typeface.DEFAULT, 0, color), 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                    stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"), 0, color), 4, stringBuilder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                     nameStringFinal = stringBuilder;
                 }
+                nameStringFinal = TextUtils.ellipsize(nameStringFinal, namePaint, nameWidth, TextUtils.TruncateAt.END);
             }
             try {
-                nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                    nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-                    namesOffset += AndroidUtilities.dp(19);
+                    nameWidth = (int) Math.ceil(nameLayout.getLineWidth(0));
+                    if (messageObject.type != 13) {
+                        namesOffset += AndroidUtilities.dp(19);
+                    }
                     nameOffsetX = nameLayout.getLineLeft(0);
                 } else {
                     nameWidth = 0;
@@ -498,14 +497,21 @@ public void setMessageObject(MessageObject messageObject) {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
+            if (currentNameString.length() == 0) {
+                currentNameString = null;
+            }
         } else {
             currentNameString = null;
             nameLayout = null;
             nameWidth = 0;
         }
 
+        currentForwardUser = null;
+        currentForwardNameString = null;
+        forwardedNameLayout[0] = null;
+        forwardedNameLayout[1] = null;
+        forwardedNameWidth = 0;
         if (drawForwardedName && messageObject.isForwarded()) {
-            currentForwardUser = null;
             currentForwardChannel = null;
             if (messageObject.messageOwner.fwd_from.channel_id != 0) {
                 currentForwardChannel = MessagesController.getInstance().getChat(messageObject.messageOwner.fwd_from.channel_id);
@@ -526,38 +532,33 @@ public void setMessageObject(MessageObject messageObject) {
                 }
 
                 forwardedNameWidth = getMaxNameWidth();
-
-                CharSequence str = TextUtils.ellipsize(currentForwardNameString.replace("\n", " "), forwardNamePaint, forwardedNameWidth - AndroidUtilities.dp(40) - viaWidth, TextUtils.TruncateAt.END);
+                int fromWidth = (int) Math.ceil(forwardNamePaint.measureText(LocaleController.getString("From", R.string.From) + " "));
+                CharSequence name = TextUtils.ellipsize(currentForwardNameString.replace('\n', ' '), replyNamePaint, forwardedNameWidth - fromWidth - viaWidth, TextUtils.TruncateAt.END);
+                CharSequence lastLine;
                 if (viaString != null) {
-                    viaNameWidth = (int) Math.ceil(forwardNamePaint.measureText(LocaleController.getString("From", R.string.From) + " " + str));
-                    str = AndroidUtilities.replaceTags(String.format("%s\n%s <b>%s</b> via <b>%s</b>", LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage), LocaleController.getString("From", R.string.From), str, viaUsername));
+                    viaNameWidth = (int) Math.ceil(forwardNamePaint.measureText(LocaleController.getString("From", R.string.From) + " " + name));
+                    lastLine = AndroidUtilities.replaceTags(String.format("%s <b>%s</b> via <b>%s</b>", LocaleController.getString("From", R.string.From), name, viaUsername));
                 } else {
-                    str = AndroidUtilities.replaceTags(String.format("%s\n%s <b>%s</b>", LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage), LocaleController.getString("From", R.string.From), str));
+                    lastLine = AndroidUtilities.replaceTags(String.format("%s <b>%s</b>", LocaleController.getString("From", R.string.From), name));
                 }
-                forwardedNameLayout = StaticLayoutEx.createStaticLayout(str, forwardNamePaint, forwardedNameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, forwardedNameWidth, 2);
-                if (forwardedNameLayout.getLineCount() > 1) {
-                    forwardedNameWidth = Math.max((int) Math.ceil(forwardedNameLayout.getLineWidth(0)), (int) Math.ceil(forwardedNameLayout.getLineWidth(1)));
+                lastLine = TextUtils.ellipsize(lastLine, forwardNamePaint, forwardedNameWidth, TextUtils.TruncateAt.END);
+                try {
+                    forwardedNameLayout[1] = new StaticLayout(lastLine, forwardNamePaint, forwardedNameWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    lastLine = TextUtils.ellipsize(AndroidUtilities.replaceTags(LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage)), forwardNamePaint, forwardedNameWidth, TextUtils.TruncateAt.END);
+                    forwardedNameLayout[0] = new StaticLayout(lastLine, forwardNamePaint, forwardedNameWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    forwardedNameWidth = Math.max((int) Math.ceil(forwardedNameLayout[0].getLineWidth(0)), (int) Math.ceil(forwardedNameLayout[1].getLineWidth(0)));
+                    forwardNameOffsetX[0] = forwardedNameLayout[0].getLineLeft(0);
+                    forwardNameOffsetX[1] = forwardedNameLayout[1].getLineLeft(0);
                     namesOffset += AndroidUtilities.dp(36);
-                    forwardNameOffsetX = Math.min(forwardedNameLayout.getLineLeft(0), forwardedNameLayout.getLineLeft(1));
-                } else {
-                    forwardedNameWidth = 0;
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            } else {
-                currentForwardNameString = null;
-                forwardedNameLayout = null;
-                forwardedNameWidth = 0;
             }
-        } else {
-            currentForwardNameString = null;
-            forwardedNameLayout = null;
-            forwardedNameWidth = 0;
         }
 
         if (messageObject.isReply()) {
             namesOffset += AndroidUtilities.dp(42);
-            if (messageObject.contentType == 2 || messageObject.contentType == 3) {
-                namesOffset += AndroidUtilities.dp(4);
-            } else if (messageObject.contentType == 1) {
+            if (messageObject.type != 0) {
                 if (messageObject.type == 13) {
                     namesOffset -= AndroidUtilities.dp(42);
                 } else {
@@ -565,33 +566,9 @@ public void setMessageObject(MessageObject messageObject) {
                 }
             }
 
-            int maxWidth;
-            if (messageObject.type == 13) {
-                int width;
-                if (AndroidUtilities.isTablet()) {
-                    if (AndroidUtilities.isSmallTablet() && getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                        width = AndroidUtilities.displaySize.x;
-                    } else {
-                        int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
-                        if (leftWidth < AndroidUtilities.dp(320)) {
-                            leftWidth = AndroidUtilities.dp(320);
-                        }
-                        width = AndroidUtilities.displaySize.x - leftWidth;
-                    }
-                } else {
-                    width = AndroidUtilities.displaySize.x;
-                }
-
-                if (messageObject.isOutOwner()) {
-                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(60);
-                } else {
-                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(56 + (isChat && messageObject.isFromUser() ? 61 : 0));
-                }
-            } else {
-                maxWidth = getMaxNameWidth() - AndroidUtilities.dp(22);
-            }
-            if (!media && messageObject.contentType != 0) {
-                maxWidth -= AndroidUtilities.dp(8);
+            int maxWidth = getMaxNameWidth();
+            if (messageObject.type != 13) {
+                maxWidth -= AndroidUtilities.dp(10);
             }
 
             CharSequence stringFinalName = null;
@@ -627,23 +604,23 @@ public void setMessageObject(MessageObject messageObject) {
                 }
 
                 if (name != null) {
-                    stringFinalName = TextUtils.ellipsize(name.replace("\n", " "), replyNamePaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
+                    stringFinalName = TextUtils.ellipsize(name.replace('\n', ' '), replyNamePaint, maxWidth, TextUtils.TruncateAt.END);
                 }
                 if (messageObject.replyMessageObject.messageText != null && messageObject.replyMessageObject.messageText.length() > 0) {
                     String mess = messageObject.replyMessageObject.messageText.toString();
                     if (mess.length() > 150) {
                         mess = mess.substring(0, 150);
                     }
-                    mess = mess.replace("\n", " ");
+                    mess = mess.replace('\n', ' ');
                     stringFinalText = Emoji.replaceEmoji(mess, replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14), false);
-                    stringFinalText = TextUtils.ellipsize(stringFinalText, replyTextPaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
+                    stringFinalText = TextUtils.ellipsize(stringFinalText, replyTextPaint, maxWidth, TextUtils.TruncateAt.END);
                 }
             }
             if (stringFinalName == null) {
                 stringFinalName = LocaleController.getString("Loading", R.string.Loading);
             }
             try {
-                replyNameLayout = new StaticLayout(stringFinalName, replyNamePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                replyNameLayout = new StaticLayout(stringFinalName, replyNamePaint, maxWidth + AndroidUtilities.dp(6), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 if (replyNameLayout.getLineCount() > 0) {
                     replyNameWidth = (int)Math.ceil(replyNameLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
                     replyNameOffset = replyNameLayout.getLineLeft(0);
@@ -653,7 +630,7 @@ public void setMessageObject(MessageObject messageObject) {
             }
             try {
                 if (stringFinalText != null) {
-                    replyTextLayout = new StaticLayout(stringFinalText, replyTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    replyTextLayout = new StaticLayout(stringFinalText, replyTextPaint, maxWidth + AndroidUtilities.dp(6), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     if (replyTextLayout.getLineCount() > 0) {
                         replyTextWidth = (int) Math.ceil(replyTextLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
                         replyTextOffset = replyTextLayout.getLineLeft(0);
@@ -672,7 +649,7 @@ public final MessageObject getMessageObject() {
     }
 
     protected int getMaxNameWidth() {
-        return backgroundWidth - AndroidUtilities.dp(8);
+        return backgroundWidth - AndroidUtilities.dp(mediaBackground ? 22 : 31);
     }
 
     @Override
@@ -685,14 +662,14 @@ public boolean onTouchEvent(MotionEvent event) {
                 if (isAvatarVisible && avatarImage.isInsideImage(x, y)) {
                     avatarPressed = true;
                     result = true;
-                } else if (drawForwardedName && forwardedNameLayout != null && x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32)) {
+                } else if (drawForwardedName && forwardedNameLayout[0] != null && x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32)) {
                     if (viaWidth != 0 && x >= forwardNameX + viaNameWidth + AndroidUtilities.dp(4)) {
                         forwardBotPressed = true;
                     } else {
                         forwardNamePressed = true;
                     }
                     result = true;
-                } else if (drawName && nameLayout != null && viaWidth != 0 && x >= nameX + viaNameWidth && x <= nameX + viaNameWidth + viaWidth && y >= AndroidUtilities.dp(6) && y <= AndroidUtilities.dp(30)) {
+                } else if (drawNameLayout && nameLayout != null && viaWidth != 0 && x >= nameX + viaNameWidth && x <= nameX + viaNameWidth + viaWidth && y >= nameY - AndroidUtilities.dp(4) && y <= nameY + AndroidUtilities.dp(20)) {
                     forwardBotPressed = true;
                     result = true;
                 } else if (currentMessageObject.isReply() && x >= replyStartX && x <= replyStartX + Math.max(replyNameWidth, replyTextWidth) && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35)) {
@@ -757,12 +734,12 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     forwardBotPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (drawForwardedName && forwardedNameLayout != null) {
+                    if (drawForwardedName && forwardedNameLayout[0] != null) {
                         if (!(x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32))) {
                             forwardBotPressed = false;
                         }
                     } else {
-                        if (!(x >= nameX + viaNameWidth && x <= nameX + viaNameWidth + viaWidth && y >= AndroidUtilities.dp(6) && y <= AndroidUtilities.dp(30))) {
+                        if (!(x >= nameX + viaNameWidth && x <= nameX + viaNameWidth + viaWidth && y >= nameY - AndroidUtilities.dp(4) && y <= nameY + AndroidUtilities.dp(20))) {
                             forwardBotPressed = false;
                         }
                     }
@@ -772,7 +749,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     replyPressed = false;
                     playSoundEffect(SoundEffectConstants.CLICK);
                     if (delegate != null) {
-                        delegate.didPressReplyMessage(this, currentMessageObject.messageOwner.reply_to_msg_id);
+                        delegate.didPressedReplyMessage(this, currentMessageObject.messageOwner.reply_to_msg_id);
                     }
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     replyPressed = false;
@@ -786,7 +763,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     sharePressed = false;
                     playSoundEffect(SoundEffectConstants.CLICK);
                     if (delegate != null) {
-                        delegate.didPressShare(this);
+                        delegate.didPressedShare(this);
                     }
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     sharePressed = false;
@@ -811,18 +788,20 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (changed || !wasLayout) {
             layoutWidth = getMeasuredWidth();
-            layoutHeight = getMeasuredHeight();
-
-            timeLayout = new StaticLayout(currentTimeString, timePaint, timeTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (!media) {
+            layoutHeight = getMeasuredHeight() - substractBackgroundHeight;
+            if (timeTextWidth < 0) {
+                timeTextWidth = AndroidUtilities.dp(10);
+            }
+            timeLayout = new StaticLayout(currentTimeString, timePaint, timeTextWidth + AndroidUtilities.dp(6), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (!mediaBackground) {
                 if (!currentMessageObject.isOutOwner()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(52) : 0);
+                    timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(48) : 0);
                 } else {
                     timeX = layoutWidth - timeWidth - AndroidUtilities.dp(38.5f);
                 }
             } else {
                 if (!currentMessageObject.isOutOwner()) {
-                    timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(52) : 0);
+                    timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(48) : 0);
                 } else {
                     timeX = layoutWidth - timeWidth - AndroidUtilities.dp(42.0f);
                 }
@@ -835,14 +814,14 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
             }
 
             if (isAvatarVisible) {
-                avatarImage.setImageCoords(AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(45), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+                avatarImage.setImageCoords(AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(44), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
             }
 
             wasLayout = true;
         }
     }
 
-    protected void onAfterBackgroundDraw(Canvas canvas) {
+    protected void drawContent(Canvas canvas) {
 
     }
 
@@ -876,161 +855,171 @@ protected void onDraw(Canvas canvas) {
             avatarImage.draw(canvas);
         }
 
-        if (media) {
-            timePaint.setColor(0xffffffff);
+        if (mediaBackground) {
+            timePaint.setColor(Theme.MSG_MEDIA_TIME_TEXT_COLOR);
         } else {
             if (currentMessageObject.isOutOwner()) {
-                timePaint.setColor(0xff70b15c);
+                timePaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_TIME_SELECTED_TEXT_COLOR : Theme.MSG_OUT_TIME_TEXT_COLOR);
             } else {
-                timePaint.setColor(isDrawSelectedBackground() ? 0xff89b4c1 : 0xffa1aab3);
+                timePaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_TIME_SELECTED_TEXT_COLOR : Theme.MSG_IN_TIME_TEXT_COLOR);
             }
         }
 
-        Drawable currentBackgroundDrawable;
         if (currentMessageObject.isOutOwner()) {
             if (isDrawSelectedBackground()) {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOutSelected;
+                if (!mediaBackground) {
+                    currentBackgroundDrawable = Theme.backgroundDrawableOutSelected;
                 } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOutSelected;
+                    currentBackgroundDrawable = Theme.backgroundMediaDrawableOutSelected;
                 }
             } else {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOut;
+                if (!mediaBackground) {
+                    currentBackgroundDrawable = Theme.backgroundDrawableOut;
                 } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOut;
+                    currentBackgroundDrawable = Theme.backgroundMediaDrawableOut;
                 }
             }
-            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!mediaBackground ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth - (mediaBackground ? 0 : AndroidUtilities.dp(3)), layoutHeight - AndroidUtilities.dp(2));
         } else {
             if (isDrawSelectedBackground()) {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableInSelected;
+                if (!mediaBackground) {
+                    currentBackgroundDrawable = Theme.backgroundDrawableInSelected;
                 } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableInSelected;
+                    currentBackgroundDrawable = Theme.backgroundMediaDrawableInSelected;
                 }
             } else {
-                if (!media) {
-                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableIn;
+                if (!mediaBackground) {
+                    currentBackgroundDrawable = Theme.backgroundDrawableIn;
                 } else {
-                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableIn;
+                    currentBackgroundDrawable = Theme.backgroundMediaDrawableIn;
                 }
             }
             if (isChat && currentMessageObject.isFromUser()) {
-                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(52 + (!media ? 0 : 9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(48 + (!mediaBackground ? 3 : 9)), AndroidUtilities.dp(1), backgroundWidth - (mediaBackground ? 0 : AndroidUtilities.dp(3)), layoutHeight - AndroidUtilities.dp(2));
             } else {
-                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+                setDrawableBounds(currentBackgroundDrawable, (!mediaBackground ? AndroidUtilities.dp(3) : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth - (mediaBackground ? 0 : AndroidUtilities.dp(3)), layoutHeight - AndroidUtilities.dp(2));
             }
         }
         if (drawBackground && currentBackgroundDrawable != null) {
             currentBackgroundDrawable.draw(canvas);
         }
 
-        onAfterBackgroundDraw(canvas);
+        drawContent(canvas);
 
         if (drawShareButton) {
-            ResourceLoader.shareDrawable[ApplicationLoader.isCustomTheme() ? 1 : 0][sharePressed ? 1 : 0].setBounds(shareStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(8), shareStartY = layoutHeight - AndroidUtilities.dp(41), currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(40), layoutHeight - AndroidUtilities.dp(9));
-            ResourceLoader.shareDrawable[ApplicationLoader.isCustomTheme() ? 1 : 0][sharePressed ? 1 : 0].draw(canvas);
+            Theme.shareDrawable.setColorFilter(sharePressed ? Theme.colorPressedFilter : Theme.colorFilter);
+            setDrawableBounds(Theme.shareDrawable, shareStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(8), shareStartY = layoutHeight - AndroidUtilities.dp(41));
+            Theme.shareDrawable.draw(canvas);
+            setDrawableBounds(Theme.shareIconDrawable, shareStartX + AndroidUtilities.dp(9), shareStartY + AndroidUtilities.dp(9));
+            Theme.shareIconDrawable.draw(canvas);
         }
 
-        if (drawName && nameLayout != null) {
+        if (drawNameLayout && nameLayout != null) {
             canvas.save();
-            if (media || currentMessageObject.isOutOwner()) {
-                canvas.translate(nameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10) - nameOffsetX, AndroidUtilities.dp(10));
-            } else {
-                canvas.translate(nameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
-            }
-            if (currentUser != null) {
-                namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
-            } else if (currentChat != null) {
-                namePaint.setColor(AvatarDrawable.getNameColorForId(currentChat.id));
+
+            if (currentMessageObject.type == 13) {
+                namePaint.setColor(Theme.MSG_STICKER_NAME_TEXT_COLOR);
+                int backWidth;
+                if (currentMessageObject.isOutOwner()) {
+                    nameX = AndroidUtilities.dp(28);
+                } else {
+                    nameX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(22);
+                }
+                nameY = layoutHeight - AndroidUtilities.dp(38);
+                Theme.systemDrawable.setColorFilter(Theme.colorFilter);
+                Theme.systemDrawable.setBounds((int) nameX - AndroidUtilities.dp(12), (int) nameY - AndroidUtilities.dp(5), (int) nameX + AndroidUtilities.dp(12) + nameWidth, (int) nameY + AndroidUtilities.dp(22));
+                Theme.systemDrawable.draw(canvas);
             } else {
-                namePaint.setColor(AvatarDrawable.getNameColorForId(0));
+                if (mediaBackground || currentMessageObject.isOutOwner()) {
+                    nameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11) - nameOffsetX;
+                } else {
+                    nameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(17) - nameOffsetX;
+                }
+                if (currentUser != null) {
+                    namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
+                } else if (currentChat != null) {
+                    namePaint.setColor(AvatarDrawable.getNameColorForId(currentChat.id));
+                } else {
+                    namePaint.setColor(AvatarDrawable.getNameColorForId(0));
+                }
+                nameY = AndroidUtilities.dp(10);
             }
+            canvas.translate(nameX, nameY);
             nameLayout.draw(canvas);
             canvas.restore();
-
-            /*if (forwardedNameLayout == null && viaWidth != 0) {
-                canvas.drawRect(nameX + viaNameWidth, AndroidUtilities.dp(6), nameX + viaNameWidth + viaWidth, AndroidUtilities.dp(30), namePaint);
-            }*/
         }
 
-        if (drawForwardedName && forwardedNameLayout != null) {
-            forwardNameY = AndroidUtilities.dp(10 + (drawName ? 19 : 0));
+        if (drawForwardedName && forwardedNameLayout[0] != null && forwardedNameLayout[1] != null) {
+            forwardNameY = AndroidUtilities.dp(10 + (drawNameLayout ? 19 : 0));
             if (currentMessageObject.isOutOwner()) {
-                forwardNamePaint.setColor(0xff4a923c);
-                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
+                forwardNamePaint.setColor(Theme.MSG_OUT_FORDWARDED_NAME_TEXT_COLOR);
+                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
             } else {
-                forwardNamePaint.setColor(0xff006fc8);
-                if (media) {
-                    forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
+                forwardNamePaint.setColor(Theme.MSG_IN_FORDWARDED_NAME_TEXT_COLOR);
+                if (mediaBackground) {
+                    forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
                 } else {
-                    forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
+                    forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(17);
                 }
             }
-            canvas.save();
-            canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
-            forwardedNameLayout.draw(canvas);
-            canvas.restore();
-
-            /*if (viaWidth != 0) {
-                canvas.drawRect(forwardNameX + viaNameWidth, forwardNameY, forwardNameX + viaNameWidth + viaWidth, forwardNameY + AndroidUtilities.dp(32), namePaint);
-            }*/
+            for (int a = 0; a < 2; a++) {
+                canvas.save();
+                canvas.translate(forwardNameX - forwardNameOffsetX[a], forwardNameY + AndroidUtilities.dp(16) * a);
+                forwardedNameLayout[a].draw(canvas);
+                canvas.restore();
+            }
         }
 
         if (currentMessageObject.isReply()) {
             if (currentMessageObject.type == 13) {
-                replyLinePaint.setColor(0xffffffff);
-                replyNamePaint.setColor(0xffffffff);
-                replyTextPaint.setColor(0xffffffff);
-                int backWidth;
+                replyLinePaint.setColor(Theme.MSG_STICKER_REPLY_LINE_COLOR);
+                replyNamePaint.setColor(Theme.MSG_STICKER_REPLY_NAME_TEXT_COLOR);
+                replyTextPaint.setColor(Theme.MSG_STICKER_REPLY_MESSAGE_TEXT_COLOR);
                 if (currentMessageObject.isOutOwner()) {
-                    backWidth = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(32);
-                    replyStartX = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(9) - backWidth;
-                } else {
-                    backWidth = getWidth() - currentBackgroundDrawable.getBounds().right - AndroidUtilities.dp(32);
-                    replyStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(23);
-                }
-                Drawable back;
-                if (ApplicationLoader.isCustomTheme()) {
-                    back = ResourceLoader.backgroundBlack;
+                    replyStartX = AndroidUtilities.dp(23);
                 } else {
-                    back = ResourceLoader.backgroundBlue;
+                    replyStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(17);
                 }
                 replyStartY = layoutHeight - AndroidUtilities.dp(58);
-                back.setBounds(replyStartX - AndroidUtilities.dp(7), replyStartY - AndroidUtilities.dp(6), replyStartX - AndroidUtilities.dp(7) + backWidth, replyStartY + AndroidUtilities.dp(41));
-                back.draw(canvas);
+                if (nameLayout != null) {
+                    replyStartY -= AndroidUtilities.dp(25 + 6);
+                }
+                int backWidth = Math.max(replyNameWidth, replyTextWidth) + AndroidUtilities.dp(14 + (needReplyImage ? 44 : 0));
+                Theme.systemDrawable.setColorFilter(Theme.colorFilter);
+                Theme.systemDrawable.setBounds(replyStartX - AndroidUtilities.dp(7), replyStartY - AndroidUtilities.dp(6), replyStartX - AndroidUtilities.dp(7) + backWidth, replyStartY + AndroidUtilities.dp(41));
+                Theme.systemDrawable.draw(canvas);
             } else {
                 if (currentMessageObject.isOutOwner()) {
-                    replyLinePaint.setColor(0xff8dc97a);
-                    replyNamePaint.setColor(0xff61a349);
+                    replyLinePaint.setColor(Theme.MSG_OUT_REPLY_LINE_COLOR);
+                    replyNamePaint.setColor(Theme.MSG_OUT_REPLY_NAME_TEXT_COLOR);
                     if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
-                        replyTextPaint.setColor(0xff000000);
+                        replyTextPaint.setColor(Theme.MSG_OUT_REPLY_MESSAGE_TEXT_COLOR);
                     } else {
-                        replyTextPaint.setColor(0xff70b15c);
+                        replyTextPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_REPLY_MEDIA_MESSAGE_SELETED_TEXT_COLOR : Theme.MSG_OUT_REPLY_MEDIA_MESSAGE_TEXT_COLOR);
                     }
-                    replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+                    replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(12);
                 } else {
-                    replyLinePaint.setColor(0xff6c9fd2);
-                    replyNamePaint.setColor(0xff377aae);
+                    replyLinePaint.setColor(Theme.MSG_IN_REPLY_LINE_COLOR);
+                    replyNamePaint.setColor(Theme.MSG_IN_REPLY_NAME_TEXT_COLOR);
                     if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
-                        replyTextPaint.setColor(0xff000000);
+                        replyTextPaint.setColor(Theme.MSG_IN_REPLY_MESSAGE_TEXT_COLOR);
                     } else {
-                        replyTextPaint.setColor(0xff999999);
+                        replyTextPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_REPLY_MEDIA_MESSAGE_SELETED_TEXT_COLOR : Theme.MSG_IN_REPLY_MEDIA_MESSAGE_TEXT_COLOR);
                     }
-                    if (currentMessageObject.contentType == 1 && media) {
-                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+                    if (mediaBackground) {
+                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(12);
                     } else {
-                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(20);
+                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(18);
                     }
                 }
-                replyStartY = AndroidUtilities.dp(12 + (drawForwardedName && forwardedNameLayout != null ? 36 : 0) + (drawName && nameLayout != null ? 20 : 0));
+                replyStartY = AndroidUtilities.dp(12 + (drawForwardedName && forwardedNameLayout[0] != null ? 36 : 0) + (drawNameLayout && nameLayout != null ? 20 : 0));
             }
             canvas.drawRect(replyStartX, replyStartY, replyStartX + AndroidUtilities.dp(2), replyStartY + AndroidUtilities.dp(35), replyLinePaint);
             if (needReplyImage) {
                 replyImageReceiver.setImageCoords(replyStartX + AndroidUtilities.dp(10), replyStartY, AndroidUtilities.dp(35), AndroidUtilities.dp(35));
                 replyImageReceiver.draw(canvas);
             }
+
             if (replyNameLayout != null) {
                 canvas.save();
                 canvas.translate(replyStartX - replyNameOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY);
@@ -1045,10 +1034,16 @@ protected void onDraw(Canvas canvas) {
             }
         }
 
-        if (drawTime || !media) {
-            if (media) {
-                setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOutOwner() ? 20 : 0)), AndroidUtilities.dp(16.5f));
-                ResourceLoader.mediaBackgroundDrawable.draw(canvas);
+        if (drawTime || !mediaBackground) {
+            if (mediaBackground) {
+                Drawable drawable;
+                if (currentMessageObject.type == 13) {
+                    drawable = Theme.timeStickerBackgroundDrawable;
+                } else {
+                    drawable = Theme.timeBackgroundDrawable;
+                }
+                setDrawableBounds(drawable, timeX - AndroidUtilities.dp(4), layoutHeight - AndroidUtilities.dp(27), timeWidth + AndroidUtilities.dp(8 + (currentMessageObject.isOutOwner() ? 20 : 0)), AndroidUtilities.dp(17));
+                drawable.draw(canvas);
 
                 int additionalX = 0;
                 if ((currentMessageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
@@ -1056,22 +1051,22 @@ protected void onDraw(Canvas canvas) {
 
                     if (currentMessageObject.isSending()) {
                         if (!currentMessageObject.isOutOwner()) {
-                            setDrawableBounds(ResourceLoader.clockMediaDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicHeight());
-                            ResourceLoader.clockMediaDrawable.draw(canvas);
+                            setDrawableBounds(Theme.clockMediaDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(13.0f) - Theme.clockMediaDrawable.getIntrinsicHeight());
+                            Theme.clockMediaDrawable.draw(canvas);
                         }
                     } else if (currentMessageObject.isSendError()) {
                         if (!currentMessageObject.isOutOwner()) {
-                            setDrawableBounds(ResourceLoader.errorDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(12.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                            ResourceLoader.errorDrawable.draw(canvas);
+                            setDrawableBounds(Theme.errorDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(12.5f) - Theme.errorDrawable.getIntrinsicHeight());
+                            Theme.errorDrawable.draw(canvas);
                         }
                     } else {
-                        Drawable countDrawable = ResourceLoader.viewsMediaCountDrawable;
-                        setDrawableBounds(countDrawable, timeX, layoutHeight - AndroidUtilities.dp(10) - timeLayout.getHeight());
+                        Drawable countDrawable = Theme.viewsMediaCountDrawable;
+                        setDrawableBounds(countDrawable, timeX, layoutHeight - AndroidUtilities.dp(9.5f) - timeLayout.getHeight());
                         countDrawable.draw(canvas);
 
                         if (viewsLayout != null) {
                             canvas.save();
-                            canvas.translate(timeX + countDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
+                            canvas.translate(timeX + countDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(11.3f) - timeLayout.getHeight());
                             viewsLayout.draw(canvas);
                             canvas.restore();
                         }
@@ -1079,7 +1074,7 @@ protected void onDraw(Canvas canvas) {
                 }
 
                 canvas.save();
-                canvas.translate(timeX + additionalX, layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
+                canvas.translate(timeX + additionalX, layoutHeight - AndroidUtilities.dp(11.3f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
             } else {
@@ -1089,27 +1084,27 @@ protected void onDraw(Canvas canvas) {
 
                     if (currentMessageObject.isSending()) {
                         if (!currentMessageObject.isOutOwner()) {
-                            Drawable clockDrawable = ResourceLoader.clockChannelDrawable[isDrawSelectedBackground() ? 1 : 0];
+                            Drawable clockDrawable = Theme.clockChannelDrawable[isDrawSelectedBackground() ? 1 : 0];
                             setDrawableBounds(clockDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(8.5f) - clockDrawable.getIntrinsicHeight());
                             clockDrawable.draw(canvas);
                         }
                     } else if (currentMessageObject.isSendError()) {
                         if (!currentMessageObject.isOutOwner()) {
-                            setDrawableBounds(ResourceLoader.errorDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(6.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                            ResourceLoader.errorDrawable.draw(canvas);
+                            setDrawableBounds(Theme.errorDrawable, timeX + AndroidUtilities.dp(11), layoutHeight - AndroidUtilities.dp(6.5f) - Theme.errorDrawable.getIntrinsicHeight());
+                            Theme.errorDrawable.draw(canvas);
                         }
                     } else {
                         if (!currentMessageObject.isOutOwner()) {
-                            setDrawableBounds(ResourceLoader.viewsCountDrawable[isDrawSelectedBackground() ? 1 : 0], timeX, layoutHeight - AndroidUtilities.dp(4.5f) - timeLayout.getHeight());
-                            ResourceLoader.viewsCountDrawable[isDrawSelectedBackground() ? 1 : 0].draw(canvas);
+                            setDrawableBounds(Theme.viewsCountDrawable[isDrawSelectedBackground() ? 1 : 0], timeX, layoutHeight - AndroidUtilities.dp(4.5f) - timeLayout.getHeight());
+                            Theme.viewsCountDrawable[isDrawSelectedBackground() ? 1 : 0].draw(canvas);
                         } else {
-                            setDrawableBounds(ResourceLoader.viewsOutCountDrawable, timeX, layoutHeight - AndroidUtilities.dp(4.5f) - timeLayout.getHeight());
-                            ResourceLoader.viewsOutCountDrawable.draw(canvas);
+                            setDrawableBounds(Theme.viewsOutCountDrawable, timeX, layoutHeight - AndroidUtilities.dp(4.5f) - timeLayout.getHeight());
+                            Theme.viewsOutCountDrawable.draw(canvas);
                         }
 
                         if (viewsLayout != null) {
                             canvas.save();
-                            canvas.translate(timeX + ResourceLoader.viewsOutCountDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
+                            canvas.translate(timeX + Theme.viewsOutCountDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
                             viewsLayout.draw(canvas);
                             canvas.restore();
                         }
@@ -1120,6 +1115,7 @@ protected void onDraw(Canvas canvas) {
                 canvas.translate(timeX + additionalX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
                 timeLayout.draw(canvas);
                 canvas.restore();
+                //canvas.drawRect(timeX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight(), timeX + availableTimeWidth, layoutHeight - AndroidUtilities.dp(4.5f) - timeLayout.getHeight(), timePaint);
             }
 
             if (currentMessageObject.isOutOwner()) {
@@ -1152,59 +1148,59 @@ protected void onDraw(Canvas canvas) {
                 }
 
                 if (drawClock) {
-                    if (!media) {
-                        setDrawableBounds(ResourceLoader.clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - ResourceLoader.clockDrawable.getIntrinsicHeight());
-                        ResourceLoader.clockDrawable.draw(canvas);
+                    if (!mediaBackground) {
+                        setDrawableBounds(Theme.clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - Theme.clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - Theme.clockDrawable.getIntrinsicHeight());
+                        Theme.clockDrawable.draw(canvas);
                     } else {
-                        setDrawableBounds(ResourceLoader.clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicHeight());
-                        ResourceLoader.clockMediaDrawable.draw(canvas);
+                        setDrawableBounds(Theme.clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - Theme.clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - Theme.clockMediaDrawable.getIntrinsicHeight());
+                        Theme.clockMediaDrawable.draw(canvas);
                     }
                 }
                 if (isBroadcast) {
                     if (drawCheck1 || drawCheck2) {
-                        if (!media) {
-                            setDrawableBounds(ResourceLoader.broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.broadcastDrawable.getIntrinsicHeight());
-                            ResourceLoader.broadcastDrawable.draw(canvas);
+                        if (!mediaBackground) {
+                            setDrawableBounds(Theme.broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - Theme.broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - Theme.broadcastDrawable.getIntrinsicHeight());
+                            Theme.broadcastDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(ResourceLoader.broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicHeight());
-                            ResourceLoader.broadcastMediaDrawable.draw(canvas);
+                            setDrawableBounds(Theme.broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - Theme.broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - Theme.broadcastMediaDrawable.getIntrinsicHeight());
+                            Theme.broadcastMediaDrawable.draw(canvas);
                         }
                     }
                 } else {
                     if (drawCheck2) {
-                        if (!media) {
+                        if (!mediaBackground) {
                             if (drawCheck1) {
-                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(Theme.checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - Theme.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - Theme.checkDrawable.getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
+                                setDrawableBounds(Theme.checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - Theme.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - Theme.checkDrawable.getIntrinsicHeight());
                             }
-                            ResourceLoader.checkDrawable.draw(canvas);
+                            Theme.checkDrawable.draw(canvas);
                         } else {
                             if (drawCheck1) {
-                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(Theme.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.3f) - Theme.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - Theme.checkMediaDrawable.getIntrinsicHeight());
                             } else {
-                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
+                                setDrawableBounds(Theme.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(21.5f) - Theme.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - Theme.checkMediaDrawable.getIntrinsicHeight());
                             }
-                            ResourceLoader.checkMediaDrawable.draw(canvas);
+                            Theme.checkMediaDrawable.draw(canvas);
                         }
                     }
                     if (drawCheck1) {
-                        if (!media) {
-                            setDrawableBounds(ResourceLoader.halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.halfCheckDrawable.getIntrinsicHeight());
-                            ResourceLoader.halfCheckDrawable.draw(canvas);
+                        if (!mediaBackground) {
+                            setDrawableBounds(Theme.halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - Theme.halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - Theme.halfCheckDrawable.getIntrinsicHeight());
+                            Theme.halfCheckDrawable.draw(canvas);
                         } else {
-                            setDrawableBounds(ResourceLoader.halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicHeight());
-                            ResourceLoader.halfCheckMediaDrawable.draw(canvas);
+                            setDrawableBounds(Theme.halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(21.5f) - Theme.halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - Theme.halfCheckMediaDrawable.getIntrinsicHeight());
+                            Theme.halfCheckMediaDrawable.draw(canvas);
                         }
                     }
                 }
                 if (drawError) {
-                    if (!media) {
-                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(6.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                        ResourceLoader.errorDrawable.draw(canvas);
+                    if (!mediaBackground) {
+                        setDrawableBounds(Theme.errorDrawable, layoutWidth - AndroidUtilities.dp(18) - Theme.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(7) - Theme.errorDrawable.getIntrinsicHeight());
+                        Theme.errorDrawable.draw(canvas);
                     } else {
-                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
-                        ResourceLoader.errorDrawable.draw(canvas);
+                        setDrawableBounds(Theme.errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - Theme.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(11.5f) - Theme.errorDrawable.getIntrinsicHeight());
+                        Theme.errorDrawable.draw(canvas);
                     }
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
deleted file mode 100644
index f204795d3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ /dev/null
@@ -1,306 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.ImageReceiver;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Components.AvatarDrawable;
-
-public class ChatContactCell extends ChatBaseCell {
-
-    public interface ChatContactCellDelegate {
-        void didClickAddButton(ChatContactCell cell, TLRPC.User user);
-        void didClickPhone(ChatContactCell cell);
-    }
-
-    private static TextPaint namePaint;
-    private static TextPaint phonePaint;
-    private static Drawable addContactDrawableIn;
-    private static Drawable addContactDrawableOut;
-
-    private ImageReceiver avatarImage;
-    private AvatarDrawable avatarDrawable;
-
-    private StaticLayout nameLayout;
-    private StaticLayout phoneLayout;
-
-    private TLRPC.User contactUser;
-    private TLRPC.FileLocation currentPhoto;
-
-    private boolean avatarPressed = false;
-    private boolean buttonPressed = false;
-    private boolean drawAddButton = false;
-    private int namesWidth = 0;
-
-    private ChatContactCellDelegate contactDelegate = null;
-
-    public ChatContactCell(Context context) {
-        super(context);
-        if (namePaint == null) {
-            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            namePaint.setTextSize(AndroidUtilities.dp(15));
-
-            phonePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            phonePaint.setTextSize(AndroidUtilities.dp(15));
-            phonePaint.setColor(0xff212121);
-
-            addContactDrawableIn = getResources().getDrawable(R.drawable.addcontact_blue);
-            addContactDrawableOut = getResources().getDrawable(R.drawable.addcontact_green);
-        }
-        avatarImage = new ImageReceiver(this);
-        avatarImage.setRoundRadius(AndroidUtilities.dp(21));
-        avatarDrawable = new AvatarDrawable();
-    }
-
-    public void setContactDelegate(ChatContactCellDelegate delegate) {
-        this.contactDelegate = delegate;
-    }
-
-    @Override
-    protected boolean isUserDataChanged() {
-        if (currentMessageObject == null) {
-            return false;
-        }
-
-        int uid = currentMessageObject.messageOwner.media.user_id;
-        boolean newDrawAdd = contactUser != null && uid != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(uid) == null;
-        if (newDrawAdd != drawAddButton) {
-            return true;
-        }
-
-        contactUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.user_id);
-
-        TLRPC.FileLocation newPhoto = null;
-        if (contactUser != null && contactUser.photo != null) {
-            newPhoto = contactUser.photo.photo_small;
-        }
-
-        return currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id) || super.isUserDataChanged();
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
-                avatarPressed = true;
-                result = true;
-            } else if (drawAddButton && x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset) {
-                buttonPressed = true;
-                result = true;
-            }
-            if (result) {
-                startCheckLongPress();
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (avatarPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    avatarPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (contactUser != null) {
-                        if (delegate != null) {
-                            delegate.didPressedUserAvatar(this, contactUser);
-                        }
-                    } else {
-                        if (contactDelegate != null) {
-                            contactDelegate.didClickPhone(this);
-                        }
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    avatarPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight())) {
-                        avatarPressed = false;
-                    }
-                }
-            } else if (buttonPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (contactUser != null && contactDelegate != null) {
-                        contactDelegate.didClickAddButton(this, contactUser);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset)) {
-                        buttonPressed = false;
-                    }
-                }
-            }
-        }
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        if (currentMessageObject != messageObject || isUserDataChanged()) {
-
-            int uid = messageObject.messageOwner.media.user_id;
-            contactUser = MessagesController.getInstance().getUser(uid);
-
-            drawAddButton = contactUser != null && uid != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(uid) == null;
-
-            int maxWidth;
-            if (AndroidUtilities.isTablet()) {
-                maxWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-            } else {
-                maxWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
-            }
-            maxWidth -= AndroidUtilities.dp(58 + (drawAddButton ? 42 : 0));
-
-            if (contactUser != null) {
-                if (contactUser.photo != null) {
-                    currentPhoto = contactUser.photo.photo_small;
-                } else {
-                    currentPhoto = null;
-                }
-                avatarDrawable.setInfo(contactUser);
-            } else {
-                currentPhoto = null;
-                avatarDrawable.setInfo(uid, null, null, false);
-            }
-            avatarImage.setImage(currentPhoto, "50_50", avatarDrawable, null, false);
-
-            String phone = messageObject.messageOwner.media.phone_number;
-            if (phone != null && phone.length() != 0) {
-                if (!phone.startsWith("+")) {
-                    phone = "+" + phone;
-                }
-                phone = PhoneFormat.getInstance().format(phone);
-            } else {
-                phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
-            }
-
-            String currentNameString = ContactsController.formatName(messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
-            if (currentNameString.length() == 0) {
-                currentNameString = phone;
-            }
-            int nameWidth = Math.min((int) Math.ceil(namePaint.measureText(currentNameString)), maxWidth);
-            if (maxWidth < 0) {
-                maxWidth = AndroidUtilities.dp(100);
-            }
-
-            CharSequence stringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth, TextUtils.TruncateAt.END);
-            nameLayout = new StaticLayout(stringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (nameLayout.getLineCount() > 0) {
-                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-            } else {
-                nameWidth = 0;
-            }
-
-
-            int phoneWidth = Math.min((int) Math.ceil(phonePaint.measureText(phone)), maxWidth);
-            stringFinal = TextUtils.ellipsize(phone.replace("\n", " "), phonePaint, phoneWidth, TextUtils.TruncateAt.END);
-            phoneLayout = new StaticLayout(stringFinal, phonePaint, phoneWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (phoneLayout.getLineCount() > 0) {
-                phoneWidth = (int)Math.ceil(phoneLayout.getLineWidth(0));
-            } else {
-                phoneWidth = 0;
-            }
-
-            namesWidth = Math.max(nameWidth, phoneWidth);
-            backgroundWidth = AndroidUtilities.dp(77 + (drawAddButton ? 42 : 0)) + namesWidth;
-            availableTimeWidth = backgroundWidth - AndroidUtilities.dp(29);
-
-            super.setMessageObject(messageObject);
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(75) + namesOffset);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        int x;
-
-        if (currentMessageObject.isOutOwner()) {
-            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
-        } else {
-            if (isChat && currentMessageObject.isFromUser()) {
-                x = AndroidUtilities.dp(69);
-            } else {
-                x = AndroidUtilities.dp(16);
-            }
-        }
-        avatarImage.setImageCoords(x, AndroidUtilities.dp(9) + namesOffset, AndroidUtilities.dp(42), AndroidUtilities.dp(42));
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        avatarImage.draw(canvas);
-
-        if (nameLayout != null) {
-            canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10) + namesOffset);
-            namePaint.setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
-            nameLayout.draw(canvas);
-            canvas.restore();
-        }
-        if (phoneLayout != null) {
-            canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31) + namesOffset);
-            phoneLayout.draw(canvas);
-            canvas.restore();
-        }
-
-        if (drawAddButton) {
-            Drawable addContactDrawable;
-            if (currentMessageObject.isOutOwner()) {
-                addContactDrawable = addContactDrawableOut;
-            } else {
-                addContactDrawable = addContactDrawableIn;
-            }
-            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13) + namesOffset);
-            addContactDrawable.draw(canvas);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
index 021f74f06..a0f48780e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatLoadingCell.java
@@ -14,9 +14,9 @@
 import android.widget.ProgressBar;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 
 public class ChatLoadingCell extends FrameLayout {
 
@@ -26,7 +26,8 @@ public ChatLoadingCell(Context context) {
         super(context);
 
         frameLayout = new FrameLayout(context);
-        frameLayout.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+        frameLayout.setBackgroundResource(R.drawable.system_loader);
+        frameLayout.getBackground().setColorFilter(Theme.colorFilter);
         addView(frameLayout, LayoutHelper.createFrame(36, 36, Gravity.CENTER));
 
         ProgressBar progressBar = new ProgressBar(context);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
deleted file mode 100644
index 8f4e8a54c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ /dev/null
@@ -1,1309 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.Spannable;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.text.style.ClickableSpan;
-import android.text.style.URLSpan;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ImageLoader;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.SendMessagesHelper;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.tgnet.ConnectionsManager;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.MessageObject;
-import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.StaticLayoutEx;
-import org.telegram.ui.Components.URLSpanBotCommand;
-import org.telegram.ui.Components.URLSpanNoUnderline;
-import org.telegram.ui.PhotoViewer;
-import org.telegram.messenger.ImageReceiver;
-
-import java.io.File;
-import java.util.HashMap;
-import java.util.Locale;
-
-public class ChatMediaCell extends ChatBaseCell {
-
-    public interface ChatMediaCellDelegate {
-        void didPressedOther(ChatMediaCell cell);
-    }
-
-    private static TextPaint infoPaint;
-    private static TextPaint namePaint;
-    private static Paint docBackPaint;
-    private static Paint deleteProgressPaint;
-    private static TextPaint locationTitlePaint;
-    private static TextPaint locationAddressPaint;
-
-    private RadialProgress radialProgress;
-
-    private int photoWidth;
-    private int photoHeight;
-    private TLRPC.PhotoSize currentPhotoObject;
-    private TLRPC.PhotoSize currentPhotoObjectThumb;
-    private String currentUrl;
-    private String currentPhotoFilter;
-    private ImageReceiver photoImage;
-    private boolean photoNotSet = false;
-    private boolean cancelLoading = false;
-    private int additionHeight;
-
-    private boolean allowedToSetPhoto = true;
-
-    private int buttonState = 0;
-    private int buttonPressed = 0;
-    private boolean imagePressed = false;
-    private boolean otherPressed = false;
-    private int buttonX;
-    private int buttonY;
-
-    private StaticLayout infoLayout;
-    private int infoWidth;
-    private int infoOffset = 0;
-    private String currentInfoString;
-
-    private StaticLayout nameLayout;
-    private int nameWidth = 0;
-    private int nameOffsetX = 0;
-    private String currentNameString;
-
-    private ChatMediaCellDelegate mediaDelegate = null;
-    private RectF deleteProgressRect = new RectF();
-
-    private int captionX;
-    private int captionY;
-    private int captionHeight;
-
-    public ChatMediaCell(Context context) {
-        super(context);
-
-        if (infoPaint == null) {
-            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            infoPaint.setTextSize(AndroidUtilities.dp(12));
-
-            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            namePaint.setColor(0xff212121);
-            namePaint.setTextSize(AndroidUtilities.dp(16));
-
-            docBackPaint = new Paint();
-
-            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
-            deleteProgressPaint.setColor(0xffe4e2e0);
-
-            locationTitlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            locationTitlePaint.setTextSize(AndroidUtilities.dp(14));
-            locationTitlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            locationAddressPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            locationAddressPaint.setTextSize(AndroidUtilities.dp(14));
-        }
-
-        photoImage = new ImageReceiver(this);
-        radialProgress = new RadialProgress(this);
-    }
-
-    public void setMediaDelegate(ChatMediaCellDelegate delegate) {
-        this.mediaDelegate = delegate;
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        photoImage.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        if (photoImage.onAttachedToWindow()) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-
-        boolean result = false;
-        int side = AndroidUtilities.dp(48);
-        if (currentMessageObject.caption instanceof Spannable && delegate.canPerformActions()) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
-                if (nameLayout != null && x >= captionX && x <= captionX + backgroundWidth && y >= captionY && y <= captionY + captionHeight) {
-                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                        resetPressedLink();
-                        try {
-                            int x2 = (int) (x - captionX);
-                            int y2 = (int) (y - captionY);
-                            final int line = nameLayout.getLineForVertical(y2);
-                            final int off = nameLayout.getOffsetForHorizontal(line, x2);
-
-                            final float left = nameLayout.getLineLeft(line);
-                            if (left <= x2 && left + nameLayout.getLineWidth(line) >= x2) {
-                                Spannable buffer = (Spannable) currentMessageObject.caption;
-                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                boolean ignore = false;
-                                if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
-                                    ignore = true;
-                                }
-                                if (!ignore) {
-                                    resetPressedLink();
-                                    pressedLink = link[0];
-                                    linkPreviewPressed = true;
-                                    result = true;
-                                    try {
-                                        int start = buffer.getSpanStart(pressedLink);
-                                        urlPath.setCurrentLayout(nameLayout, start);
-                                        nameLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                } else {
-                                    resetPressedLink();
-                                }
-                            } else {
-                                resetPressedLink();
-                            }
-                        } catch (Exception e) {
-                            resetPressedLink();
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (linkPreviewPressed) {
-                        try {
-                            delegate.didPressUrl(currentMessageObject, pressedLink, false);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                        resetPressedLink();
-                        result = true;
-                    }
-                } else {
-                    resetPressedLink();
-                }
-            } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                resetPressedLink();
-            }
-
-            if (result && event.getAction() == MotionEvent.ACTION_DOWN) {
-                startCheckLongPress();
-            }
-            if (event.getAction() != MotionEvent.ACTION_DOWN && event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (result) {
-                return true;
-            }
-        }
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (delegate == null || delegate.canPerformActions()) {
-                if (buttonState != -1 && x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
-                    buttonPressed = 1;
-                    invalidate();
-                    result = true;
-                } else {
-                    if (currentMessageObject.type == 9) {
-                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            imagePressed = true;
-                            result = true;
-                        } else if (x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            otherPressed = true;
-                            result = true;
-                        }
-                    } else if (currentMessageObject.type != 13) {
-                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
-                            imagePressed = true;
-                            result = true;
-                        }
-                    }
-                }
-                if (imagePressed && currentMessageObject.isSecretPhoto()) {
-                    imagePressed = false;
-                } else if (imagePressed && currentMessageObject.isSendError()) {
-                    imagePressed = false;
-                    result = false;
-                } else if (imagePressed && currentMessageObject.type == 8 && buttonState == -1 && MediaController.getInstance().canAutoplayGifs()) {
-                    imagePressed = false;
-                    result = false;
-                } else if (result) {
-                    startCheckLongPress();
-                }
-            }
-        } else {
-            if (event.getAction() != MotionEvent.ACTION_MOVE) {
-                cancelCheckLongPress();
-            }
-            if (buttonPressed == 1) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = 0;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    didPressedButton(false);
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = 0;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
-                        buttonPressed = 0;
-                        invalidate();
-                    }
-                }
-            } else if (imagePressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    imagePressed = false;
-                    if (buttonState == -1 || buttonState == 2 || buttonState == 3) {
-                        playSoundEffect(SoundEffectConstants.CLICK);
-                        didClickedImage();
-                    }
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    imagePressed = false;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
-                            imagePressed = false;
-                            invalidate();
-                        }
-                    } else {
-                        if (!photoImage.isInsideImage(x, y)) {
-                            imagePressed = false;
-                            invalidate();
-                        }
-                    }
-                }
-            } else if (otherPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    otherPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    if (mediaDelegate != null) {
-                        mediaDelegate.didPressedOther(this);
-                    }
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    otherPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (currentMessageObject.type == 9) {
-                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
-                            otherPressed = false;
-                        }
-                    }
-                }
-            }
-        }
-        if (!result) {
-            result = super.onTouchEvent(event);
-        }
-
-        return result;
-    }
-
-    private void didClickedImage() {
-        if (currentMessageObject.type == 1) {
-            if (buttonState == -1) {
-                if (delegate != null) {
-                    delegate.didClickedImage(this);
-                }
-            } else if (buttonState == 0) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 8) {
-            if (buttonState == -1) {
-                buttonState = 2;
-                currentMessageObject.audioProgress = 1;
-                photoImage.setAllowStartAnimation(false);
-                photoImage.stopAnimation();
-                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                invalidate();
-            } else if (buttonState == 2 || buttonState == 0) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 3) {
-            if (buttonState == 0 || buttonState == 3) {
-                didPressedButton(false);
-            }
-        } else if (currentMessageObject.type == 4) {
-            if (delegate != null) {
-                delegate.didClickedImage(this);
-            }
-        } else if (currentMessageObject.type == 9) {
-            if (buttonState == -1) {
-                if (delegate != null) {
-                    delegate.didClickedImage(this);
-                }
-            }
-        }
-    }
-
-    @Override
-    public void setCheckPressed(boolean value, boolean pressed) {
-        super.setCheckPressed(value, pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    @Override
-    public void setHighlighted(boolean value) {
-        super.setHighlighted(value);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        super.setPressed(pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    private Drawable getDrawableForCurrentState() {
-        if (buttonState >= 0 && buttonState < 4) {
-            if (currentMessageObject.type == 9) {
-                if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return ResourceLoader.buttonStatesDrawablesDoc[2][currentMessageObject.isOutOwner() ? 1 : (isDrawSelectedBackground() ? 2 : 0)];
-                } else {
-                    return ResourceLoader.buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOutOwner() ? 1 : (isDrawSelectedBackground() ? 2 : 0)];
-                }
-            } else {
-                if (buttonState == 1 && !currentMessageObject.isSending()) {
-                    return ResourceLoader.buttonStatesDrawables[4];
-                } else {
-                    return ResourceLoader.buttonStatesDrawables[buttonState];
-                }
-            }
-        } else if (buttonState == -1) {
-            if (currentMessageObject.type == 9) {
-                return ResourceLoader.placeholderDocDrawable[currentMessageObject.isOutOwner() ? 1 : (isDrawSelectedBackground() ? 2 : 0)];
-            }
-        }
-        return null;
-    }
-
-    private void didPressedButton(boolean animated) {
-        if (buttonState == 0) {
-            cancelLoading = false;
-            radialProgress.setProgress(0, false);
-            if (currentMessageObject.type == 1) {
-                photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, currentPhotoObject.size, null, false);
-            } else if (currentMessageObject.type == 8) {
-                currentMessageObject.audioProgress = 2;
-                photoImage.setImage(currentMessageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, currentMessageObject.messageOwner.media.document.size, null, false);
-            } else if (currentMessageObject.type == 9) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, false, false);
-            } else if (currentMessageObject.type == 3) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-            }
-            buttonState = 1;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-            invalidate();
-        } else if (buttonState == 1) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
-                    delegate.didPressedCancelSendButton(this);
-                }
-            } else {
-                cancelLoading = true;
-                if (currentMessageObject.type == 1 || currentMessageObject.type == 8) {
-                    photoImage.cancelLoadImage();
-                } else if (currentMessageObject.type == 9 || currentMessageObject.type == 3) {
-                    FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
-                }
-                buttonState = 0;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            photoImage.setAllowStartAnimation(true);
-            photoImage.startAnimation();
-            currentMessageObject.audioProgress = 0;
-            buttonState = -1;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-        } else if (buttonState == 3) {
-            if (delegate != null) {
-                delegate.didClickedImage(this);
-            }
-        }
-    }
-
-    private boolean isPhotoDataChanged(MessageObject object) {
-        if (object.type == 4) {
-            if (currentUrl == null) {
-                return true;
-            }
-            double lat = object.messageOwner.media.geo.lat;
-            double lon = object.messageOwner.media.geo._long;
-            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-            if (!url.equals(currentUrl)) {
-                return true;
-            }
-        } else if (currentPhotoObject == null || currentPhotoObject.location instanceof TLRPC.TL_fileLocationUnavailable) {
-            return true;
-        } else if (currentMessageObject != null && photoNotSet) {
-            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            if (cacheFile.exists()) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    @Override
-    protected void onLongPress() {
-        if (pressedLink instanceof URLSpanNoUnderline) {
-
-        } else if (pressedLink instanceof URLSpan) {
-            delegate.didPressUrl(currentMessageObject, pressedLink, true);
-            return;
-        }
-        super.onLongPress();
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        boolean messageChanged = currentMessageObject != messageObject;
-        boolean dataChanged = currentMessageObject == messageObject && (isUserDataChanged() || photoNotSet);
-        if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || dataChanged) {
-            drawForwardedName = messageObject.messageOwner.fwd_from != null && messageObject.type != 13;
-            media = messageObject.type != 9;
-            cancelLoading = false;
-            additionHeight = 0;
-            resetPressedLink();
-            if (messageObject.audioProgress != 2 && !MediaController.getInstance().canAutoplayGifs() && messageObject.type == 8) {
-                messageObject.audioProgress = 1;
-            }
-
-            buttonState = -1;
-            currentPhotoObject = null;
-            currentPhotoObjectThumb = null;
-            currentUrl = null;
-            photoNotSet = false;
-            drawBackground = true;
-            drawName = false;
-            photoImage.setAllowStartAnimation(messageObject.audioProgress == 0);
-
-            photoImage.setForcePreview(messageObject.isSecretPhoto());
-            if (messageObject.type == 9) {
-                String name = messageObject.getDocumentName();
-                if (name == null || name.length() == 0) {
-                    name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
-                }
-                int maxWidth;
-                if (AndroidUtilities.isTablet()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
-                } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
-                }
-                if (checkNeedDrawShareButton(messageObject)) {
-                    maxWidth -= AndroidUtilities.dp(20);
-                }
-                if (currentNameString == null || !currentNameString.equals(name)) {
-                    currentNameString = name;
-                    nameLayout = StaticLayoutEx.createStaticLayout(currentNameString, namePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, maxWidth, 3);
-                    nameOffsetX = Integer.MIN_VALUE;
-                    if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                        int maxLineWidth = 0;
-                        int maxLeft = 0;
-                        for (int a = 0; a < nameLayout.getLineCount(); a++) {
-                            maxLineWidth = Math.max(maxLineWidth, (int) Math.ceil(nameLayout.getLineWidth(a)));
-                            nameOffsetX = Math.max(maxLeft, (int) Math.ceil(-nameLayout.getLineLeft(a)));
-                        }
-                        nameWidth = Math.min(maxWidth, maxLineWidth);
-                    } else {
-                        nameWidth = maxWidth;
-                        nameOffsetX = 0;
-                    }
-                }
-
-                String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size) + " " + messageObject.getExtension();
-
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = 0;
-                    infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(currentInfoString)));
-                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-                    try {
-                        if (infoWidth < 0) {
-                            infoWidth = AndroidUtilities.dp(10);
-                        }
-                        infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            } else if (messageObject.type == 8) {
-                String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size);
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = 0;
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                }
-                nameLayout = null;
-                currentNameString = null;
-            } else if (messageObject.type == 3) {
-                int duration = 0;
-                for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                    TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
-                    if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
-                        duration = attribute.duration;
-                        break;
-                    }
-                }
-                int minutes = duration / 60;
-                int seconds = duration - minutes * 60;
-                String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size));
-                if (currentInfoString == null || !currentInfoString.equals(str)) {
-                    currentInfoString = str;
-                    infoOffset = ResourceLoader.videoIconDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4);
-                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                }
-                nameLayout = null;
-                currentNameString = null;
-            } else {
-                currentInfoString = null;
-                currentNameString = null;
-                infoLayout = null;
-                nameLayout = null;
-                updateSecretTimeText(messageObject);
-            }
-            if (messageObject.type == 9) {
-                photoWidth = AndroidUtilities.dp(86);
-                photoHeight = AndroidUtilities.dp(86);
-                availableTimeWidth = Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(37);
-                backgroundWidth = photoWidth + availableTimeWidth + AndroidUtilities.dp(31);
-                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-                photoImage.setNeedsQualityThumb(true);
-                photoImage.setShouldGenerateQualityThumb(true);
-                photoImage.setParentMessageObject(messageObject);
-                if (currentPhotoObject != null) {
-                    currentPhotoFilter = String.format(Locale.US, "%d_%d_b", photoWidth, photoHeight);
-                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, true);
-                } else {
-                    photoImage.setImageBitmap((BitmapDrawable) null);
-                }
-            } else if (messageObject.type == 4) { //geo
-                double lat = messageObject.messageOwner.media.geo.lat;
-                double lon = messageObject.messageOwner.media.geo._long;
-
-                if (messageObject.messageOwner.media.title != null && messageObject.messageOwner.media.title.length() > 0) {
-                    int maxWidth = (AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) - AndroidUtilities.dp((isChat && !messageObject.isOutOwner() ? 102 : 40) + 86 + 24);
-                    nameLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.title, locationTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), 3);
-                    int lineCount = nameLayout.getLineCount();
-                    if (messageObject.messageOwner.media.address != null && messageObject.messageOwner.media.address.length() > 0) {
-                        infoLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.address, locationAddressPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), Math.min(3, 4 - lineCount));
-                    } else {
-                        infoLayout = null;
-                    }
-
-                    media = false;
-                    availableTimeWidth = maxWidth - AndroidUtilities.dp(7);
-                    measureTime(messageObject);
-                    photoWidth = AndroidUtilities.dp(86);
-                    photoHeight = AndroidUtilities.dp(86);
-                    maxWidth = timeWidth + AndroidUtilities.dp(messageObject.isOutOwner() ? 29 : 9);
-                    for (int a = 0; a < lineCount; a++) {
-                        maxWidth = (int) Math.max(maxWidth, nameLayout.getLineWidth(a) + AndroidUtilities.dp(16));
-                    }
-                    if (infoLayout != null) {
-                        for (int a = 0; a < infoLayout.getLineCount(); a++) {
-                            maxWidth = (int) Math.max(maxWidth, infoLayout.getLineWidth(a) + AndroidUtilities.dp(16));
-                        }
-                    }
-                    backgroundWidth = photoWidth + AndroidUtilities.dp(21) + maxWidth;
-                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=72x72&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-                } else {
-                    availableTimeWidth = AndroidUtilities.dp(200 - 14);
-                    photoWidth = AndroidUtilities.dp(200);
-                    photoHeight = AndroidUtilities.dp(100);
-                    backgroundWidth = photoWidth + AndroidUtilities.dp(12);
-                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=200x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
-                }
-
-                photoImage.setNeedsQualityThumb(false);
-                photoImage.setShouldGenerateQualityThumb(false);
-                photoImage.setParentMessageObject(null);
-                photoImage.setImage(currentUrl, null, messageObject.isOutOwner() ? ResourceLoader.geoOutDrawable : ResourceLoader.geoInDrawable, null, 0);
-            } else if (messageObject.type == 13) { //webp
-                drawBackground = false;
-                for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                    TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
-                    if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
-                        photoWidth = attribute.w;
-                        photoHeight = attribute.h;
-                        break;
-                    }
-                }
-                float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
-                float maxWidth;
-                if (AndroidUtilities.isTablet()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
-                } else {
-                    maxWidth = AndroidUtilities.displaySize.x * 0.5f;
-                }
-                if (photoWidth == 0) {
-                    photoHeight = (int) maxHeight;
-                    photoWidth = photoHeight + AndroidUtilities.dp(100);
-                }
-                if (photoHeight > maxHeight) {
-                    photoWidth *= maxHeight / photoHeight;
-                    photoHeight = (int) maxHeight;
-                }
-                if (photoWidth > maxWidth) {
-                    photoHeight *= maxWidth / photoWidth;
-                    photoWidth = (int) maxWidth;
-                }
-                availableTimeWidth = photoWidth - AndroidUtilities.dp(14);
-                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
-                currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                photoImage.setNeedsQualityThumb(false);
-                photoImage.setShouldGenerateQualityThumb(false);
-                photoImage.setParentMessageObject(null);
-                if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
-                    File f = new File(messageObject.messageOwner.attachPath);
-                    if (f.exists()) {
-                        photoImage.setImage(null, messageObject.messageOwner.attachPath,
-                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
-                                null,
-                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                                "b1",
-                                messageObject.messageOwner.media.document.size, "webp", true);
-                    }
-                } else if (messageObject.messageOwner.media.document.id != 0) {
-                    photoImage.setImage(messageObject.messageOwner.media.document, null,
-                            String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
-                            null,
-                            currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
-                            "b1",
-                            messageObject.messageOwner.media.document.size, "webp", true);
-                }
-            } else {
-                int maxPhotoWidth;
-                if (AndroidUtilities.isTablet()) {
-                    maxPhotoWidth = photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
-                } else {
-                    maxPhotoWidth = photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
-                }
-                photoHeight = photoWidth + AndroidUtilities.dp(100);
-
-                if (photoWidth > AndroidUtilities.getPhotoSize()) {
-                    photoWidth = AndroidUtilities.getPhotoSize();
-                }
-                if (photoHeight > AndroidUtilities.getPhotoSize()) {
-                    photoHeight = AndroidUtilities.getPhotoSize();
-                }
-
-                if (messageObject.type == 1) {
-                    photoImage.setNeedsQualityThumb(false);
-                    photoImage.setShouldGenerateQualityThumb(false);
-                    photoImage.setParentMessageObject(null);
-                    currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                } else if (messageObject.type == 3) {
-                    photoImage.setNeedsQualityThumb(true);
-                    photoImage.setShouldGenerateQualityThumb(true);
-                    photoImage.setParentMessageObject(messageObject);
-                } else if (messageObject.type == 8) {
-                    photoImage.setNeedsQualityThumb(true);
-                    photoImage.setShouldGenerateQualityThumb(true);
-                    photoImage.setParentMessageObject(messageObject);
-                }
-                //8 - gif, 1 - photo, 3 - video
-
-                if (messageObject.caption != null) {
-                    media = false;
-                }
-
-                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
-
-                int w = 0;
-                int h = 0;
-
-                if (currentPhotoObject != null && currentPhotoObject == currentPhotoObjectThumb) {
-                    currentPhotoObjectThumb = null;
-                }
-
-                if (currentPhotoObject != null) {
-                    float scale = (float) currentPhotoObject.w / (float) photoWidth;
-                    w = (int) (currentPhotoObject.w / scale);
-                    h = (int) (currentPhotoObject.h / scale);
-                    if (w == 0) {
-                        if (messageObject.type == 3) {
-                            w = infoWidth + infoOffset + AndroidUtilities.dp(16);
-                        } else {
-                            w = AndroidUtilities.dp(100);
-                        }
-                    }
-                    if (h == 0) {
-                        h = AndroidUtilities.dp(100);
-                    }
-                    if (h > photoHeight) {
-                        float scale2 = h;
-                        h = photoHeight;
-                        scale2 /= h;
-                        w = (int) (w / scale2);
-                    } else if (h < AndroidUtilities.dp(120)) {
-                        h = AndroidUtilities.dp(120);
-                        float hScale = (float) currentPhotoObject.h / h;
-                        if (currentPhotoObject.w / hScale < photoWidth) {
-                            w = (int) (currentPhotoObject.w / hScale);
-                        }
-                    }
-                }
-
-                if ((w == 0 || h == 0) && messageObject.type == 8) {
-                    for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                        TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
-                        if (attribute instanceof TLRPC.TL_documentAttributeImageSize || attribute instanceof TLRPC.TL_documentAttributeVideo) {
-                            float scale = (float) attribute.w / (float) photoWidth;
-                            w = (int) (attribute.w / scale);
-                            h = (int) (attribute.h / scale);
-                            if (h > photoHeight) {
-                                float scale2 = h;
-                                h = photoHeight;
-                                scale2 /= h;
-                                w = (int) (w / scale2);
-                            } else if (h < AndroidUtilities.dp(120)) {
-                                h = AndroidUtilities.dp(120);
-                                float hScale = (float) attribute.h / h;
-                                if (attribute.w / hScale < photoWidth) {
-                                    w = (int) (attribute.w / hScale);
-                                }
-                            }
-                            break;
-                        }
-                    }
-                }
-
-
-                if (w == 0 || h == 0) {
-                    w = h = AndroidUtilities.dp(100);
-                }
-
-                availableTimeWidth = maxPhotoWidth - AndroidUtilities.dp(14);
-                measureTime(messageObject);
-                int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (messageObject.isOutOwner() ? 20 : 0));
-                if (w < timeWidthTotal) {
-                    w = timeWidthTotal;
-                }
-
-                if (messageObject.isSecretPhoto()) {
-                    if (AndroidUtilities.isTablet()) {
-                        w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
-                    } else {
-                        w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
-                    }
-                }
-
-                photoWidth = w;
-                photoHeight = h;
-                backgroundWidth = w + AndroidUtilities.dp(12);
-                if (!media) {
-                    backgroundWidth += AndroidUtilities.dp(9);
-                }
-                if (messageObject.caption != null) {
-                    try {
-                        nameLayout = new StaticLayout(messageObject.caption, MessageObject.textPaint, photoWidth - AndroidUtilities.dp(10), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                        if (nameLayout != null && nameLayout.getLineCount() > 0) {
-                            captionHeight = nameLayout.getHeight();
-                            additionHeight += captionHeight + AndroidUtilities.dp(9);
-                            float lastLineWidth = nameLayout.getLineWidth(nameLayout.getLineCount() - 1) + nameLayout.getLineLeft(nameLayout.getLineCount() - 1);
-                            if (photoWidth - AndroidUtilities.dp(8) - lastLineWidth < timeWidthTotal) {
-                                additionHeight += AndroidUtilities.dp(14);
-                            }
-                        }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-
-                currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
-                if (messageObject.photoThumbs != null && messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
-                    if (messageObject.isSecretPhoto()) {
-                        currentPhotoFilter += "_b2";
-                    } else {
-                        currentPhotoFilter += "_b";
-                    }
-                }
-
-                boolean noSize = false;
-                if (messageObject.type == 3 || messageObject.type == 8) {
-                    noSize = true;
-                }
-                if (currentPhotoObject != null && !noSize && currentPhotoObject.size == 0) {
-                    currentPhotoObject.size = -1;
-                }
-
-                if (messageObject.type == 1) {
-                    if (currentPhotoObject != null) {
-                        String fileName = FileLoader.getAttachFileName(currentPhotoObject);
-                        boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        } else {
-                            MediaController.getInstance().removeLoadingFileObserver(this);
-                        }
-
-                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                            if (allowedToSetPhoto || ImageLoader.getInstance().getImageFromMemory(currentPhotoObject.location, null, currentPhotoFilter) != null) {
-                                allowedToSetPhoto = true;
-                                photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, noSize ? 0 : currentPhotoObject.size, null, false);
-                            } else if (currentPhotoObjectThumb != null) {
-                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
-                            } else {
-                                photoImage.setImageBitmap((Drawable) null);
-                            }
-                        } else {
-                            photoNotSet = true;
-                            if (currentPhotoObjectThumb != null) {
-                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
-                            } else {
-                                photoImage.setImageBitmap((Drawable) null);
-                            }
-                        }
-                    } else {
-                        photoImage.setImageBitmap((Bitmap) null);
-                    }
-                } else if (messageObject.type == 8) {
-                    String fileName = FileLoader.getAttachFileName(messageObject.messageOwner.media.document);
-                    File cacheFile = null;
-                    boolean localFile = false;
-                    if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
-                        cacheFile = new File(messageObject.messageOwner.attachPath);
-                        if (!cacheFile.exists()) {
-                            cacheFile = null;
-                        } else {
-                            MediaController.getInstance().removeLoadingFileObserver(this);
-                            localFile = true;
-                        }
-                    }
-                    if (cacheFile == null) {
-                        cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
-                        if (!cacheFile.exists()) {
-                            cacheFile = null;
-                        }
-                    }
-                    if (!messageObject.isSending() && (cacheFile != null || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) && MessageObject.isNewGifDocument(messageObject.messageOwner.media.document) || FileLoader.getInstance().isLoadingFile(fileName))) {
-                        if (localFile) {
-                            photoImage.setImage(null, messageObject.isSendError() ? null : cacheFile.getAbsolutePath(), null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
-                        } else {
-                            photoImage.setImage(messageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, messageObject.messageOwner.media.document.size, null, false);
-                        }
-                    } else {
-                        photoNotSet = true;
-                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
-                    }
-                } else {
-                    photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
-                }
-            }
-            super.setMessageObject(messageObject);
-
-            if (drawForwardedName) {
-                namesOffset += AndroidUtilities.dp(5);
-            } else if (drawName && messageObject.messageOwner.reply_to_msg_id == 0) {
-                namesOffset += AndroidUtilities.dp(7);
-            }
-
-            invalidate();
-        }
-        updateButtonState(dataChanged);
-    }
-
-    @Override
-    protected int getMaxNameWidth() {
-        return backgroundWidth - AndroidUtilities.dp(14);
-    }
-
-    @Override
-    public ImageReceiver getPhotoImage() {
-        return photoImage;
-    }
-
-    public void updateButtonState(boolean animated) {
-        String fileName = null;
-        File cacheFile = null;
-        if (currentMessageObject.type == 1) {
-            if (currentPhotoObject == null) {
-                return;
-            }
-            fileName = FileLoader.getAttachFileName(currentPhotoObject);
-            cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-        } else if (currentMessageObject.type == 8 || currentMessageObject.type == 3 || currentMessageObject.type == 9) {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
-                File f = new File(currentMessageObject.messageOwner.attachPath);
-                if (f.exists()) {
-                    fileName = currentMessageObject.messageOwner.attachPath;
-                    cacheFile = f;
-                }
-            }
-            if (fileName == null) {
-                if (!currentMessageObject.isSendError()) {
-                    fileName = currentMessageObject.getFileName();
-                    cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-                }
-            }
-        }
-        if (fileName == null || fileName.length() == 0) {
-            radialProgress.setBackground(null, false, false);
-            return;
-        }
-        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
-                MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
-                boolean needProgress = currentMessageObject.messageOwner.attachPath == null || !currentMessageObject.messageOwner.attachPath.startsWith("http");
-                HashMap<String, String> params = currentMessageObject.messageOwner.params;
-                if (currentMessageObject.messageOwner.message != null && params != null && (params.containsKey("url") || params.containsKey("bot"))) {
-                    needProgress = false;
-                    buttonState = -1;
-                } else {
-                    buttonState = 1;
-                }
-                radialProgress.setBackground(getDrawableForCurrentState(), needProgress, animated);
-                if (needProgress) {
-                    Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-                    if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
-                        progress = 1.0f;
-                    }
-                    radialProgress.setProgress(progress != null ? progress : 0, false);
-                } else {
-                    radialProgress.setProgress(0, false);
-                }
-                invalidate();
-            }
-        } else {
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-            }
-            if (cacheFile.exists() && cacheFile.length() == 0) {
-                cacheFile.delete();
-            }
-            if (!cacheFile.exists()) {
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                float setProgress = 0;
-                boolean progressVisible = false;
-                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    if (!cancelLoading &&
-                        (currentMessageObject.type == 1 && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) ||
-                        currentMessageObject.type == 8 && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) && MessageObject.isNewGifDocument(currentMessageObject.messageOwner.media.document)) ) {
-                        progressVisible = true;
-                        buttonState = 1;
-                    } else {
-                        buttonState = 0;
-                    }
-                } else {
-                    progressVisible = true;
-                    buttonState = 1;
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    setProgress = progress != null ? progress : 0;
-                }
-                radialProgress.setProgress(setProgress, false);
-                radialProgress.setBackground(getDrawableForCurrentState(), progressVisible, animated);
-                invalidate();
-            } else {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-                if (currentMessageObject.type == 8 && !photoImage.isAllowStartAnimation()) {
-                    buttonState = 2;
-                } else if (currentMessageObject.type == 3) {
-                    buttonState = 3;
-                } else {
-                    buttonState = -1;
-                }
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                if (photoNotSet) {
-                    setMessageObject(currentMessageObject);
-                }
-                invalidate();
-            }
-        }
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14) + namesOffset + additionHeight);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        int x;
-        if (currentMessageObject.isOutOwner()) {
-            if (media) {
-                x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
-            } else {
-                x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
-            }
-        } else {
-            if (isChat && currentMessageObject.isFromUser()) {
-                x = AndroidUtilities.dp(67);
-            } else {
-                x = AndroidUtilities.dp(15);
-            }
-        }
-        photoImage.setImageCoords(x, AndroidUtilities.dp(7) + namesOffset, photoWidth, photoHeight);
-        int size = AndroidUtilities.dp(48);
-        buttonX = (int) (x + (photoWidth - size) / 2.0f);
-        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f) + namesOffset;
-
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
-        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
-    }
-
-    private void updateSecretTimeText(MessageObject messageObject) {
-        if (messageObject == null || messageObject.isOut()) {
-            return;
-        }
-        String str = messageObject.getSecretTimeString();
-        if (str == null) {
-            infoLayout = null;
-            return;
-        }
-        if (currentInfoString == null || !currentInfoString.equals(str)) {
-            currentInfoString = str;
-            infoOffset = 0;
-            infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
-            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
-            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            invalidate();
-        }
-    }
-
-    public void setAllowedToSetPhoto(boolean value) {
-        if (allowedToSetPhoto == value) {
-            return;
-        }
-        if (currentMessageObject != null && currentMessageObject.type == 1) {
-            allowedToSetPhoto = value;
-            if (value) {
-                MessageObject temp = currentMessageObject;
-                currentMessageObject = null;
-                setMessageObject(temp);
-            }
-        }
-    }
-
-    @Override
-    protected void onAfterBackgroundDraw(Canvas canvas) {
-        photoImage.setPressed(isDrawSelectedBackground());
-        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
-        boolean imageDrawn = photoImage.draw(canvas);
-        drawTime = photoImage.getVisible();
-
-        radialProgress.setHideCurrentDrawable(false);
-
-        if (currentMessageObject.type == 9) {
-            Drawable menuDrawable;
-            if (currentMessageObject.isOutOwner()) {
-                infoPaint.setColor(0xff70b15c);
-                docBackPaint.setColor(isDrawSelectedBackground() ? 0xffc5eca7 : 0xffdaf5c3);
-                menuDrawable = ResourceLoader.docMenuDrawable[1];
-            } else {
-                infoPaint.setColor(isDrawSelectedBackground() ? 0xff89b4c1 : 0xffa1aab3);
-                docBackPaint.setColor(isDrawSelectedBackground() ? 0xffcbeaf6 : 0xffebf0f5);
-                menuDrawable = ResourceLoader.docMenuDrawable[isDrawSelectedBackground() ? 2 : 0];
-            }
-
-            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10) + namesOffset);
-            menuDrawable.draw(canvas);
-
-            if (buttonState >= 0 && buttonState < 4) {
-                if (!imageDrawn) {
-                    if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawablesDoc[2][currentMessageObject.isOutOwner() ? 1 : (isDrawSelectedBackground() ? 2 : 0)]);
-                    } else {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOutOwner() ? 1 : (isDrawSelectedBackground() ? 2 : 0)]);
-                    }
-                } else {
-                    if (buttonState == 1 && !currentMessageObject.isSending()) {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawables[4]);
-                    } else {
-                        radialProgress.swapBackground(ResourceLoader.buttonStatesDrawables[buttonState]);
-                    }
-                }
-            }
-
-            if (!imageDrawn) {
-                canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), docBackPaint);
-                if (currentMessageObject.isOutOwner()) {
-                    radialProgress.setProgressColor(0xff81bd72);
-                } else {
-                    radialProgress.setProgressColor(isDrawSelectedBackground() ? 0xff83b2c2 : 0xffadbdcc);
-                }
-            } else {
-                if (buttonState == -1) {
-                    radialProgress.setHideCurrentDrawable(true);
-                }
-                radialProgress.setProgressColor(0xffffffff);
-            }
-        } else {
-            radialProgress.setProgressColor(0xffffffff);
-        }
-
-        if (buttonState == -1 && currentMessageObject.isSecretPhoto()) {
-            int drawable = 5;
-            if (currentMessageObject.messageOwner.destroyTime != 0) {
-                if (currentMessageObject.isOutOwner()) {
-                    drawable = 7;
-                } else {
-                    drawable = 6;
-                }
-            }
-            setDrawableBounds(ResourceLoader.buttonStatesDrawables[drawable], buttonX, buttonY);
-            ResourceLoader.buttonStatesDrawables[drawable].setAlpha((int) (255 * (1.0f - radialProgress.getAlpha())));
-            ResourceLoader.buttonStatesDrawables[drawable].draw(canvas);
-            if (!currentMessageObject.isOutOwner() && currentMessageObject.messageOwner.destroyTime != 0) {
-                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
-                float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
-                canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
-                if (progress != 0) {
-                    int offset = AndroidUtilities.dp(2);
-                    invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
-                }
-                updateSecretTimeText(currentMessageObject);
-            }
-        }
-
-        radialProgress.draw(canvas);
-
-        if (currentMessageObject.type == 1 || currentMessageObject.type == 3) {
-            if (nameLayout != null) {
-                canvas.save();
-                canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoHeight + AndroidUtilities.dp(6));
-                if (pressedLink != null) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                try {
-                    nameLayout.draw(canvas);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                canvas.restore();
-            }
-            if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
-                infoPaint.setColor(0xffffffff);
-                setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
-                ResourceLoader.mediaBackgroundDrawable.draw(canvas);
-
-                if (currentMessageObject.type == 3) {
-                    setDrawableBounds(ResourceLoader.videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dp(7.5f));
-                    ResourceLoader.videoIconDrawable.draw(canvas);
-                }
-
-                canvas.save();
-                canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
-                infoLayout.draw(canvas);
-                canvas.restore();
-            }
-        } else if (currentMessageObject.type == 4) {
-            if (nameLayout != null) {
-                locationAddressPaint.setColor(currentMessageObject.isOutOwner() ? 0xff70b15c : (isDrawSelectedBackground() ? 0xff89b4c1 : 0xff999999));
-
-                canvas.save();
-                canvas.translate(nameOffsetX + photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(3));
-                nameLayout.draw(canvas);
-                canvas.restore();
-
-                if (infoLayout != null) {
-                    canvas.save();
-                    canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(nameLayout.getLineCount() * 16 + 5));
-                    infoLayout.draw(canvas);
-                    canvas.restore();
-                }
-            }
-        } else if (currentMessageObject.type == 8) {
-            if (nameLayout != null) {
-                canvas.save();
-                canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoHeight + AndroidUtilities.dp(6));
-                if (pressedLink != null) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                try {
-                    nameLayout.draw(canvas);
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                canvas.restore();
-            }
-        } else if (nameLayout != null) {
-            canvas.save();
-            canvas.translate(nameOffsetX + photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(8));
-            nameLayout.draw(canvas);
-            canvas.restore();
-
-            try {
-                if (infoLayout != null) {
-                    canvas.save();
-                    canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + nameLayout.getLineBottom(nameLayout.getLineCount() - 1) + AndroidUtilities.dp(10));
-                    infoLayout.draw(canvas);
-                    canvas.restore();
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        }
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState(false);
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        radialProgress.setProgress(1, true);
-        if (!photoNotSet || currentMessageObject.type == 8 && currentMessageObject.audioProgress != 1) {
-            if (currentMessageObject.type == 8 && currentMessageObject.audioProgress != 1) {
-                photoNotSet = false;
-                buttonState = 2;
-                didPressedButton(true);
-            } else {
-                updateButtonState(true);
-            }
-        }
-        if (photoNotSet) {
-            setMessageObject(currentMessageObject);
-        }
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        radialProgress.setProgress(progress, true);
-        if (buttonState != 1) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-        radialProgress.setProgress(progress, true);
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index b07d425a9..f2cc715b0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -1,5 +1,5 @@
 /*
- * This is the source code of Telegram for Android v. 1.3.x.
+ * This is the source code of Telegram for Android v. 3.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
@@ -11,6 +11,9 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.text.Layout;
@@ -25,279 +28,868 @@
 import android.view.SoundEffectConstants;
 import android.view.ViewStructure;
 
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ContactsController;
+import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageReceiver;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.Utilities;
+import org.telegram.messenger.browser.Browser;
+import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.LinkPath;
 import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.Components.SeekBar;
+import org.telegram.ui.Components.SeekBarWaveform;
 import org.telegram.ui.Components.StaticLayoutEx;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanNoUnderline;
+import org.telegram.ui.PhotoViewer;
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Locale;
 
-public class ChatMessageCell extends ChatBaseCell {
+public class ChatMessageCell extends ChatBaseCell implements SeekBar.SeekBarDelegate {
+
+    private final static int DOCUMENT_ATTACH_TYPE_NONE = 0;
+    private final static int DOCUMENT_ATTACH_TYPE_DOCUMENT = 1;
+    private final static int DOCUMENT_ATTACH_TYPE_GIF = 2;
+    private final static int DOCUMENT_ATTACH_TYPE_AUDIO = 3;
+    private final static int DOCUMENT_ATTACH_TYPE_VIDEO = 4;
+    private final static int DOCUMENT_ATTACH_TYPE_MUSIC = 5;
+    private final static int DOCUMENT_ATTACH_TYPE_STICKER = 6;
+
+    private class BotButton {
+        private int x;
+        private int y;
+        private int width;
+        private int height;
+        private StaticLayout caption;
+        private TLRPC.KeyboardButton button;
+        private int angle;
+        private float progressAlpha;
+        private long lastUpdateTime;
+    }
 
-    private int textX, textY;
-    private int totalHeight = 0;
+    private int textX;
+    private int textY;
+    private int totalHeight;
+    private int keyboardHeight;
     private int linkBlockNum;
 
-    private int lastVisibleBlockNum = 0;
-    private int firstVisibleBlockNum = 0;
-    private int totalVisibleBlocksCount = 0;
+    private Rect scrollRect = new Rect();
+
+    private int lastVisibleBlockNum;
+    private int firstVisibleBlockNum;
+    private int totalVisibleBlocksCount;
+    private boolean needNewVisiblePart;
 
     private RadialProgress radialProgress;
-    private ImageReceiver linkImageView;
+    private ImageReceiver photoImage;
+    private AvatarDrawable avatarDrawable;
+
+    private boolean disallowLongPress;
+
     private boolean isSmallImage;
     private boolean drawImageButton;
-    private boolean isGifDocument;
-    private boolean drawLinkImageView;
+    private int documentAttachType;
+    private TLRPC.Document documentAttach;
+    private boolean drawPhotoImage;
     private boolean hasLinkPreview;
     private int linkPreviewHeight;
-    private boolean isInstagram;
+    private int mediaOffsetY;
     private int descriptionY;
     private int durationWidth;
     private int descriptionX;
     private int titleX;
     private int authorX;
-    private StaticLayout siteNameLayout;
+    private StaticLayout siteCaptionLayout;
     private StaticLayout titleLayout;
     private StaticLayout descriptionLayout;
     private StaticLayout durationLayout;
     private StaticLayout authorLayout;
-    private static TextPaint durationPaint;
+
+    private StaticLayout captionLayout;
+    private int captionX;
+    private int captionY;
+    private int captionHeight;
+    private int nameOffsetX;
+
+    private StaticLayout infoLayout;
+    private int infoWidth;
+
+    private String currentUrl;
+
+    private boolean allowedToSetPhoto = true;
 
     private int buttonX;
     private int buttonY;
     private int buttonState;
-    private boolean buttonPressed;
+    private int buttonPressed;
+    private int otherX;
+    private int otherY;
+    private boolean imagePressed;
+    private boolean otherPressed;
     private boolean photoNotSet;
+    private RectF deleteProgressRect = new RectF();
+    private RectF rect = new RectF();
     private TLRPC.PhotoSize currentPhotoObject;
     private TLRPC.PhotoSize currentPhotoObjectThumb;
     private String currentPhotoFilter;
     private String currentPhotoFilterThumb;
     private boolean cancelLoading;
 
-    private static Drawable igvideoDrawable;
+    private static TextPaint infoPaint;
+    private static TextPaint docNamePaint;
+    private static Paint docBackPaint;
+    private static Paint deleteProgressPaint;
+    private static Paint botProgressPaint;
+    private static TextPaint locationTitlePaint;
+    private static TextPaint locationAddressPaint;
+    private static Paint urlPaint;
+    private static TextPaint durationPaint;
+
+    private ClickableSpan pressedLink;
+    private int pressedLinkType;
+    private boolean linkPreviewPressed;
+    private ArrayList<LinkPath> urlPathCache = new ArrayList<>();
+    private ArrayList<LinkPath> urlPath = new ArrayList<>();
+    //private LinkPath urlPath = new LinkPath();
+
+    private boolean useSeekBarWaweform;
+    private SeekBar seekBar;
+    private SeekBarWaveform seekBarWaveform;
+    private int seekBarX;
+    private int seekBarY;
+
+    private StaticLayout timeLayout;
+    private String lastTimeString;
+    private int timeWidthAudio;
+    private int timeAudioX;
+
+    private static TextPaint audioTimePaint;
+    private static TextPaint audioTitlePaint;
+    private static TextPaint audioPerformerPaint;
+    private static TextPaint botButtonPaint;
+    private static TextPaint contactNamePaint;
+    private static TextPaint contactPhonePaint;
+
+    private StaticLayout songLayout;
+    private int songX;
+
+    private StaticLayout performerLayout;
+    private int performerX;
+
+    private ArrayList<BotButton> botButtons = new ArrayList<>();
+    private HashMap<String, BotButton> botButtonsByData = new HashMap<>();
+    private int widthForButtons;
+    private int pressedBotButton;
 
     public ChatMessageCell(Context context) {
         super(context);
-        drawForwardedName = true;
-        linkImageView = new ImageReceiver(this);
+        avatarDrawable = new AvatarDrawable();
+        photoImage = new ImageReceiver(this);
+        radialProgress = new RadialProgress(this);
+        seekBar = new SeekBar(context);
+        seekBar.setDelegate(this);
+        seekBarWaveform = new SeekBarWaveform(context);
+        seekBarWaveform.setDelegate(this);
+        seekBarWaveform.setParentView(this);
+
+        if (infoPaint == null) {
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            infoPaint.setTextSize(AndroidUtilities.dp(12));
+
+            docNamePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            docNamePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            docNamePaint.setTextSize(AndroidUtilities.dp(15));
+
+            docBackPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(Theme.MSG_SECRET_TIME_TEXT_COLOR);
+
+            botProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            botProgressPaint.setColor(Theme.MSG_BOT_PROGRESS_COLOR);
+            botProgressPaint.setStrokeCap(Paint.Cap.ROUND);
+            botProgressPaint.setStyle(Paint.Style.STROKE);
+            botProgressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+
+            locationTitlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            locationTitlePaint.setTextSize(AndroidUtilities.dp(15));
+            locationTitlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            locationAddressPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            locationAddressPaint.setTextSize(AndroidUtilities.dp(13));
+
+            urlPaint = new Paint();
+            urlPaint.setColor(Theme.MSG_LINK_SELECT_BACKGROUND_COLOR);
+
+            audioTimePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            audioTimePaint.setTextSize(AndroidUtilities.dp(12));
+
+            audioTitlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            audioTitlePaint.setTextSize(AndroidUtilities.dp(16));
+            audioTitlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            audioPerformerPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            audioPerformerPaint.setTextSize(AndroidUtilities.dp(15));
+
+            botButtonPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            botButtonPaint.setTextSize(AndroidUtilities.dp(15));
+            botButtonPaint.setColor(Theme.MSG_BOT_BUTTON_TEXT_COLOR);
+            botButtonPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            contactNamePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            contactNamePaint.setTextSize(AndroidUtilities.dp(15));
+            contactNamePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            contactPhonePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            contactPhonePaint.setTextSize(AndroidUtilities.dp(13));
+
+            durationPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            durationPaint.setTextSize(AndroidUtilities.dp(12));
+            durationPaint.setColor(Theme.MSG_WEB_PREVIEW_DURATION_TEXT_COLOR);
+        }
+
         radialProgress = new RadialProgress(this);
     }
 
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        boolean result = false;
-        if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && delegate.canPerformActions()) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null || buttonPressed) && event.getAction() == MotionEvent.ACTION_UP) {
-                int x = (int) event.getX();
-                int y = (int) event.getY();
-                if (x >= textX && y >= textY && x <= textX + currentMessageObject.textWidth && y <= textY + currentMessageObject.textHeight) {
-                    y -= textY;
-                    int blockNum = Math.max(0, y / currentMessageObject.blockHeight);
-                    if (blockNum < currentMessageObject.textLayoutBlocks.size()) {
-                        try {
-                            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
-                            x -= textX - (int) Math.ceil(block.textXOffset);
-                            y -= block.textYOffset;
-                            final int line = block.textLayout.getLineForVertical(y);
-                            final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
-
-                            final float left = block.textLayout.getLineLeft(line);
-                            if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
-                                Spannable buffer = (Spannable) currentMessageObject.messageText;
-                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                boolean ignore = false;
-                                if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
-                                    ignore = true;
-                                }
-                                if (!ignore) {
-                                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                                        resetPressedLink();
-                                        pressedLink = link[0];
-                                        linkBlockNum = blockNum;
-                                        try {
-                                            int start = buffer.getSpanStart(pressedLink) - block.charactersOffset;
-                                            urlPath.setCurrentLayout(block.textLayout, start);
-                                            block.textLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink) - block.charactersOffset, urlPath);
-                                        } catch (Exception e) {
-                                            FileLog.e("tmessages", e);
+    private void resetPressedLink(int type) {
+        if (pressedLink == null || pressedLinkType != type && type != -1) {
+            return;
+        }
+        resetUrlPaths();
+        pressedLink = null;
+        pressedLinkType = -1;
+        invalidate();
+    }
+
+    private void resetUrlPaths() {
+        if (urlPath.isEmpty()) {
+            return;
+        }
+        urlPathCache.addAll(urlPath);
+        urlPath.clear();
+    }
+
+    private LinkPath obtainNewUrlPath() {
+        LinkPath linkPath;
+        if (!urlPathCache.isEmpty()) {
+            linkPath = urlPathCache.get(0);
+            urlPathCache.remove(0);
+        } else {
+            linkPath = new LinkPath();
+        }
+        urlPath.add(linkPath);
+        return linkPath;
+    }
+
+    private boolean checkTextBlockMotionEvent(MotionEvent event) {
+        if (currentMessageObject.type != 0 || currentMessageObject.textLayoutBlocks == null || currentMessageObject.textLayoutBlocks.isEmpty() || !(currentMessageObject.messageText instanceof Spannable)) {
+            return false;
+        }
+        if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_UP && pressedLinkType == 1) {
+            int x = (int) event.getX();
+            int y = (int) event.getY();
+            if (x >= textX && y >= textY && x <= textX + currentMessageObject.textWidth && y <= textY + currentMessageObject.textHeight) {
+                y -= textY;
+                int blockNum = 0;
+                for (int a = 0; a < currentMessageObject.textLayoutBlocks.size(); a++) {
+                    if (currentMessageObject.textLayoutBlocks.get(a).textYOffset > y) {
+                        break;
+                    }
+                    blockNum = a;
+                }
+                try {
+                    MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
+                    x -= textX - (int) Math.ceil(block.textXOffset);
+                    y -= block.textYOffset;
+                    final int line = block.textLayout.getLineForVertical(y);
+                    final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
+
+                    final float left = block.textLayout.getLineLeft(line);
+                    if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
+                        Spannable buffer = (Spannable) currentMessageObject.messageText;
+                        ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+                        boolean ignore = false;
+                        if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
+                            ignore = true;
+                        }
+                        if (!ignore) {
+                            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                                pressedLink = link[0];
+                                linkBlockNum = blockNum;
+                                pressedLinkType = 1;
+                                resetUrlPaths();
+                                try {
+                                    LinkPath path = obtainNewUrlPath();
+                                    int start = buffer.getSpanStart(pressedLink) - block.charactersOffset;
+                                    int end = buffer.getSpanEnd(pressedLink);
+                                    int length = block.textLayout.getText().length();
+                                    path.setCurrentLayout(block.textLayout, start, 0);
+                                    block.textLayout.getSelectionPath(start, end - block.charactersOffset, path);
+                                    if (end >= block.charactersOffset + length) {
+                                        for (int a = blockNum + 1; a < currentMessageObject.textLayoutBlocks.size(); a++) {
+                                            MessageObject.TextLayoutBlock nextBlock = currentMessageObject.textLayoutBlocks.get(a);
+                                            length = nextBlock.textLayout.getText().length();
+                                            ClickableSpan[] nextLink = buffer.getSpans(nextBlock.charactersOffset, nextBlock.charactersOffset, ClickableSpan.class);
+                                            if (nextLink == null || nextLink.length == 0 || nextLink[0] != pressedLink) {
+                                                break;
+                                            }
+                                            path = obtainNewUrlPath();
+                                            path.setCurrentLayout(nextBlock.textLayout, 0, nextBlock.height);
+                                            nextBlock.textLayout.getSelectionPath(0, end - nextBlock.charactersOffset, path);
+                                            if (end < block.charactersOffset + length - 1) {
+                                                break;
+                                            }
                                         }
-                                        result = true;
-                                    } else {
-                                        if (link[0] == pressedLink) {
-                                            try {
-                                                delegate.didPressUrl(currentMessageObject, pressedLink, false);
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
+                                    }
+                                    if (start < 0) {
+                                        for (int a = blockNum - 1; a >= 0; a--) {
+                                            MessageObject.TextLayoutBlock nextBlock = currentMessageObject.textLayoutBlocks.get(a);
+                                            length = nextBlock.textLayout.getText().length();
+                                            ClickableSpan[] nextLink = buffer.getSpans(nextBlock.charactersOffset + length - 1, nextBlock.charactersOffset + length - 1, ClickableSpan.class);
+                                            if (nextLink == null || nextLink.length == 0 || nextLink[0] != pressedLink) {
+                                                break;
+                                            }
+                                            path = obtainNewUrlPath();
+                                            start = buffer.getSpanStart(pressedLink) - nextBlock.charactersOffset;
+                                            path.setCurrentLayout(nextBlock.textLayout, start, -nextBlock.height);
+                                            nextBlock.textLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink) - nextBlock.charactersOffset, path);
+                                            if (start >= 0) {
+                                                break;
                                             }
-                                            resetPressedLink();
-                                            result = true;
                                         }
                                     }
-                                } else {
-                                    resetPressedLink();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
                                 }
+                                invalidate();
+                                return true;
                             } else {
-                                resetPressedLink();
+                                if (link[0] == pressedLink) {
+                                    delegate.didPressedUrl(currentMessageObject, pressedLink, false);
+                                    resetPressedLink(1);
+                                    return true;
+                                }
                             }
-                        } catch (Exception e) {
-                            resetPressedLink();
-                            FileLog.e("tmessages", e);
                         }
-                    } else {
-                        resetPressedLink();
-                    }
-                } else if (hasLinkPreview && x >= textX && x <= textX + backgroundWidth && y >= textY + currentMessageObject.textHeight && y <= textY + currentMessageObject.textHeight + linkPreviewHeight + AndroidUtilities.dp(8)) {
-                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                        resetPressedLink();
-                        if (drawLinkImageView && linkImageView.isInsideImage(x, y)) {
-                            if (drawImageButton && buttonState != -1 && x >= buttonX && x <= buttonX + AndroidUtilities.dp(48) && y >= buttonY && y <= buttonY + AndroidUtilities.dp(48)) {
-                                buttonPressed = true;
-                                result = true;
-                            } else {
-                                linkPreviewPressed = true;
-                                result = true;
-                            }
-                            if (linkPreviewPressed && isGifDocument && buttonState == -1 && MediaController.getInstance().canAutoplayGifs()) {
-                                linkPreviewPressed = false;
-                                result = false;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            } else {
+                resetPressedLink(1);
+            }
+        }
+        return false;
+    }
+
+    private boolean checkCaptionMotionEvent(MotionEvent event) {
+        if (!(currentMessageObject.caption instanceof Spannable) || captionLayout == null) {
+            return false;
+        }
+        if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
+            int x = (int) event.getX();
+            int y = (int) event.getY();
+            if (x >= captionX && x <= captionX + backgroundWidth && y >= captionY && y <= captionY + captionHeight) {
+                if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                    try {
+                        x -= captionX;
+                        y -= captionY;
+                        final int line = captionLayout.getLineForVertical(y);
+                        final int off = captionLayout.getOffsetForHorizontal(line, x);
+
+                        final float left = captionLayout.getLineLeft(line);
+                        if (left <= x && left + captionLayout.getLineWidth(line) >= x) {
+                            Spannable buffer = (Spannable) currentMessageObject.caption;
+                            ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+                            boolean ignore = false;
+                            if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
+                                ignore = true;
                             }
-                        } else {
-                            if (descriptionLayout != null && y >= descriptionY) {
+                            if (!ignore) {
+                                pressedLink = link[0];
+                                pressedLinkType = 3;
+                                resetUrlPaths();
                                 try {
-                                    x -= textX + AndroidUtilities.dp(10) + descriptionX;
-                                    y -= descriptionY;
-                                    final int line = descriptionLayout.getLineForVertical(y);
-                                    final int off = descriptionLayout.getOffsetForHorizontal(line, x);
-
-                                    final float left = descriptionLayout.getLineLeft(line);
-                                    if (left <= x && left + descriptionLayout.getLineWidth(line) >= x) {
-                                        Spannable buffer = (Spannable) currentMessageObject.linkDescription;
-                                        ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
-                                        boolean ignore = false;
-                                        if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
-                                            ignore = true;
-                                        }
-                                        if (!ignore) {
-                                            resetPressedLink();
-                                            pressedLink = link[0];
-                                            linkPreviewPressed = true;
-                                            linkBlockNum = -10;
-                                            result = true;
-                                            try {
-                                                int start = buffer.getSpanStart(pressedLink);
-                                                urlPath.setCurrentLayout(descriptionLayout, start);
-                                                descriptionLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), urlPath);
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                        } else {
-                                            resetPressedLink();
-                                        }
-                                    } else {
-                                        resetPressedLink();
-                                    }
+                                    LinkPath path = obtainNewUrlPath();
+                                    int start = buffer.getSpanStart(pressedLink);
+                                    path.setCurrentLayout(captionLayout, start, 0);
+                                    captionLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), path);
                                 } catch (Exception e) {
-                                    resetPressedLink();
                                     FileLog.e("tmessages", e);
                                 }
+                                invalidate();
+                                return true;
                             }
                         }
-                    } else if (linkPreviewPressed) {
-                        try {
-                            if (pressedLink != null) {
-                                if (pressedLink instanceof URLSpan) {
-                                    AndroidUtilities.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
-                                } else {
-                                    pressedLink.onClick(this);
-                                }
-                            } else {
-                                if (drawImageButton && delegate != null) {
-                                    if (isGifDocument) {
-                                        if (buttonState == -1) {
-                                            buttonState = 2;
-                                            currentMessageObject.audioProgress = 1;
-                                            linkImageView.setAllowStartAnimation(false);
-                                            linkImageView.stopAnimation();
-                                            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                                            invalidate();
-                                            playSoundEffect(SoundEffectConstants.CLICK);
-                                        } else if (buttonState == 2 || buttonState == 0) {
-                                            didPressedButton(false);
-                                            playSoundEffect(SoundEffectConstants.CLICK);
-                                        }
-                                    } else if (buttonState == -1) {
-                                        delegate.didClickedImage(this);
-                                        playSoundEffect(SoundEffectConstants.CLICK);
-                                    }
-                                } else {
-                                    TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
-                                    if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
-                                        delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.url, webPage.embed_width, webPage.embed_height);
-                                    } else {
-                                        AndroidUtilities.openUrl(getContext(), webPage.url);
-                                    }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                } else if (pressedLinkType == 3) {
+                    delegate.didPressedUrl(currentMessageObject, pressedLink, false);
+                    resetPressedLink(3);
+                    return true;
+                }
+            } else {
+                resetPressedLink(3);
+            }
+        }
+        return false;
+    }
+
+    private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
+        if (currentMessageObject.type != 0 || !hasLinkPreview) {
+            return false;
+        }
+        int x = (int) event.getX();
+        int y = (int) event.getY();
+
+        if (x >= textX && x <= textX + backgroundWidth && y >= textY + currentMessageObject.textHeight && y <= textY + currentMessageObject.textHeight + linkPreviewHeight + AndroidUtilities.dp(8)) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT && drawPhotoImage && photoImage.isInsideImage(x, y)) {
+                    if (drawImageButton && buttonState != -1 && x >= buttonX && x <= buttonX + AndroidUtilities.dp(48) && y >= buttonY && y <= buttonY + AndroidUtilities.dp(48)) {
+                        buttonPressed = 1;
+                        return true;
+                    } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF && buttonState == -1 && MediaController.getInstance().canAutoplayGifs()) {
+                        linkPreviewPressed = false;
+                        return false;
+                    } else {
+                        linkPreviewPressed = true;
+                        return true;
+                    }
+                } else if (descriptionLayout != null && y >= descriptionY) {
+                    try {
+                        x -= textX + AndroidUtilities.dp(10) + descriptionX;
+                        y -= descriptionY;
+                        final int line = descriptionLayout.getLineForVertical(y);
+                        final int off = descriptionLayout.getOffsetForHorizontal(line, x);
+
+                        final float left = descriptionLayout.getLineLeft(line);
+                        if (left <= x && left + descriptionLayout.getLineWidth(line) >= x) {
+                            Spannable buffer = (Spannable) currentMessageObject.linkDescription;
+                            ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+                            boolean ignore = false;
+                            if (link.length == 0 || link.length != 0 && link[0] instanceof URLSpanBotCommand && !URLSpanBotCommand.enabled) {
+                                ignore = true;
+                            }
+                            if (!ignore) {
+                                pressedLink = link[0];
+                                linkBlockNum = -10;
+                                pressedLinkType = 2;
+                                resetUrlPaths();
+                                try {
+                                    LinkPath path = obtainNewUrlPath();
+                                    int start = buffer.getSpanStart(pressedLink);
+                                    path.setCurrentLayout(descriptionLayout, start, 0);
+                                    descriptionLayout.getSelectionPath(start, buffer.getSpanEnd(pressedLink), path);
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
                                 }
+                                invalidate();
+                                return true;
                             }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
                         }
-                        resetPressedLink();
-                        result = true;
-                    } else if (buttonPressed) {
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            } else if (event.getAction() == MotionEvent.ACTION_UP) {
+                if (pressedLinkType == 2 || buttonPressed != 0 || linkPreviewPressed) {
+                    if (buttonPressed != 0) {
                         if (event.getAction() == MotionEvent.ACTION_UP) {
-                            buttonPressed = false;
+                            buttonPressed = 0;
                             playSoundEffect(SoundEffectConstants.CLICK);
                             didPressedButton(false);
                             invalidate();
                         } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                            buttonPressed = false;
+                            buttonPressed = 0;
                             invalidate();
-                        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                            if (!(x >= buttonX && x <= buttonX + AndroidUtilities.dp(48) && y >= buttonY && y <= buttonY + AndroidUtilities.dp(48))) {
-                                buttonPressed = false;
-                                invalidate();
+                        }
+                    } else if (pressedLink != null) {
+                        if (pressedLink instanceof URLSpan) {
+                            Browser.openUrl(getContext(), ((URLSpan) pressedLink).getURL());
+                        } else {
+                            pressedLink.onClick(this);
+                        }
+                        resetPressedLink(2);
+                    } else {
+                        if (drawImageButton) {
+                            if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
+                                if (buttonState == -1) {
+                                    buttonState = 2;
+                                    currentMessageObject.audioProgress = 1;
+                                    photoImage.setAllowStartAnimation(false);
+                                    photoImage.stopAnimation();
+                                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                                    invalidate();
+                                    playSoundEffect(SoundEffectConstants.CLICK);
+                                } else if (buttonState == 2 || buttonState == 0) {
+                                    didPressedButton(false);
+                                    playSoundEffect(SoundEffectConstants.CLICK);
+                                }
+                            } else if (buttonState == -1) {
+                                delegate.didPressedImage(this);
+                                playSoundEffect(SoundEffectConstants.CLICK);
+                            }
+                        } else {
+                            TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
+                            if (webPage != null) {
+                                if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                                    delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.description, webPage.url, webPage.embed_width, webPage.embed_height);
+                                } else {
+                                    Browser.openUrl(getContext(), webPage.url);
+                                }
                             }
                         }
+                        resetPressedLink(2);
+                        return true;
                     }
                 } else {
-                    resetPressedLink();
+                    resetPressedLink(2);
+                }
+            }
+        }
+        return false;
+    }
+
+    private boolean checkOtherButtonMotionEvent(MotionEvent event) {
+        if (documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT && currentMessageObject.type != 12 && documentAttachType != DOCUMENT_ATTACH_TYPE_MUSIC && documentAttachType != DOCUMENT_ATTACH_TYPE_VIDEO) {
+            return false;
+        }
+
+        int x = (int) event.getX();
+        int y = (int) event.getY();
+
+        boolean result = false;
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (x >= otherX - AndroidUtilities.dp(20) && x <= otherX + AndroidUtilities.dp(20) && y >= otherY - AndroidUtilities.dp(4) && y <= otherY + AndroidUtilities.dp(30)) {
+                otherPressed = true;
+                result = true;
+            }
+        } else {
+            if (event.getAction() == MotionEvent.ACTION_UP) {
+                if (otherPressed) {
+                    otherPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    delegate.didPressedOther(this);
+                }
+            }
+        }
+        return result;
+    }
+    
+    private boolean checkPhotoImageMotionEvent(MotionEvent event) {
+        if (!drawPhotoImage && documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+            return false;
+        }
+
+        int x = (int) event.getX();
+        int y = (int) event.getY();
+
+        boolean result = false;
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (buttonState != -1 && x >= buttonX && x <= buttonX + AndroidUtilities.dp(48) && y >= buttonY && y <= buttonY + AndroidUtilities.dp(48)) {
+                buttonPressed = 1;
+                invalidate();
+                result = true;
+            } else {
+                if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                    if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                        imagePressed = true;
+                        result = true;
+                    }
+                } else if (currentMessageObject.type != 13 || currentMessageObject.getInputStickerSet() != null) {
+                    if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                        imagePressed = true;
+                        result = true;
+                    }
+                    if (currentMessageObject.type == 12) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.user_id);
+                        if (user == null) {
+                            imagePressed = false;
+                            result = false;
+                        }
+                    }
+                }
+            }
+            if (imagePressed && currentMessageObject.isSecretPhoto()) {
+                imagePressed = false;
+            } else if (imagePressed && currentMessageObject.isSendError()) {
+                imagePressed = false;
+                result = false;
+            } else if (imagePressed && currentMessageObject.type == 8 && buttonState == -1 && MediaController.getInstance().canAutoplayGifs()) {
+                imagePressed = false;
+                result = false;
+            }
+        } else {
+            if (event.getAction() == MotionEvent.ACTION_UP) {
+                if (buttonPressed == 1) {
+                    buttonPressed = 0;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton(false);
+                    invalidate();
+                } else if (imagePressed) {
+                    imagePressed = false;
+                    if (buttonState == -1 || buttonState == 2 || buttonState == 3) {
+                        playSoundEffect(SoundEffectConstants.CLICK);
+                        didClickedImage();
+                    } else if (buttonState == 0 && documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                        playSoundEffect(SoundEffectConstants.CLICK);
+                        didPressedButton(false);
+                    }
+                    invalidate();
+                }
+            }
+        }
+        return result;
+    }
+
+    private boolean checkAudioMotionEvent(MotionEvent event) {
+        if (documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO && documentAttachType != DOCUMENT_ATTACH_TYPE_MUSIC) {
+            return false;
+        }
+
+        int x = (int) event.getX();
+        int y = (int) event.getY();
+        boolean result;
+        if (useSeekBarWaweform) {
+            result = seekBarWaveform.onTouch(event.getAction(), event.getX() - seekBarX - AndroidUtilities.dp(13), event.getY() - seekBarY);
+        } else {
+            result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
+        }
+        if (result) {
+            if (!useSeekBarWaweform && event.getAction() == MotionEvent.ACTION_DOWN) {
+                getParent().requestDisallowInterceptTouchEvent(true);
+            } else if (useSeekBarWaweform && !seekBarWaveform.isStartDraging() && event.getAction() == MotionEvent.ACTION_UP) {
+                didPressedButton(true);
+            }
+            disallowLongPress = true;
+            invalidate();
+        } else {
+            int side = AndroidUtilities.dp(36);
+            boolean area;
+            if (buttonState == 0 || buttonState == 1 || buttonState == 2) {
+                area = x >= buttonX - AndroidUtilities.dp(12) && x <= buttonX - AndroidUtilities.dp(12) + backgroundWidth && y >= namesOffset + mediaOffsetY && y <= layoutHeight;
+            } else {
+                area = x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side;
+            }
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (area) {
+                    buttonPressed = 1;
+                    invalidate();
+                    result = true;
+                    radialProgress.swapBackground(getDrawableForCurrentState());
+                }
+            } else if (buttonPressed != 0) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    buttonPressed = 0;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton(true);
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    buttonPressed = 0;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!area) {
+                        buttonPressed = 0;
+                        invalidate();
+                    }
+                }
+                radialProgress.swapBackground(getDrawableForCurrentState());
+            }
+        }
+        return result;
+    }
+
+    private boolean checkBotButtonMotionEvent(MotionEvent event) {
+        if (botButtons.isEmpty()) {
+            return false;
+        }
+
+        int x = (int) event.getX();
+        int y = (int) event.getY();
+
+        boolean result = false;
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            int addX;
+            if (currentMessageObject.isOutOwner()) {
+                addX = getMeasuredWidth() - widthForButtons - AndroidUtilities.dp(10);
+            } else {
+                addX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(mediaBackground ? 1 : 7);
+            }
+            for (int a = 0; a < botButtons.size(); a++) {
+                BotButton button = botButtons.get(a);
+                int y2 = button.y + layoutHeight - AndroidUtilities.dp(2);
+                if (x >= button.x + addX && x <= button.x + addX + button.width && y >= y2 && y <= y2 + button.height) {
+                    pressedBotButton = a;
+                    invalidate();
+                    result = true;
+                    break;
                 }
-            } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                resetPressedLink();
             }
         } else {
-            resetPressedLink();
+            if (event.getAction() == MotionEvent.ACTION_UP) {
+                if (pressedBotButton != -1) {
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    delegate.didPressedBotButton(this, botButtons.get(pressedBotButton).button);
+                    pressedBotButton = -1;
+                    invalidate();
+                }
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (currentMessageObject == null || !delegate.canPerformActions()) {
+            return super.onTouchEvent(event);
+        }
+
+        disallowLongPress = false;
+
+        boolean result = checkTextBlockMotionEvent(event);
+        if (!result) {
+            result = checkOtherButtonMotionEvent(event);
+        }
+        if (!result) {
+            result = checkLinkPreviewMotionEvent(event);
         }
-        if (result && event.getAction() == MotionEvent.ACTION_DOWN) {
+        if (!result) {
+            result = checkCaptionMotionEvent(event);
+        }
+        if (!result) {
+            result = checkAudioMotionEvent(event);
+        }
+        if (!result) {
+            result = checkPhotoImageMotionEvent(event);
+        }
+        if (!result) {
+            result = checkBotButtonMotionEvent(event);
+        }
+
+        if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+            buttonPressed = 0;
+            pressedBotButton = -1;
+            linkPreviewPressed = false;
+            otherPressed = false;
+            imagePressed = false;
+            result = false;
+            resetPressedLink(-1);
+        }
+        if (!disallowLongPress && result && event.getAction() == MotionEvent.ACTION_DOWN) {
             startCheckLongPress();
         }
         if (event.getAction() != MotionEvent.ACTION_DOWN && event.getAction() != MotionEvent.ACTION_MOVE) {
             cancelCheckLongPress();
         }
+
         return result || super.onTouchEvent(event);
     }
 
+    public void updateAudioProgress() {
+        if (currentMessageObject == null || documentAttach == null) {
+            return;
+        }
+
+        if (useSeekBarWaweform) {
+            if (!seekBarWaveform.isDragging()) {
+                seekBarWaveform.setProgress(currentMessageObject.audioProgress);
+            }
+        } else {
+            if (!seekBar.isDragging()) {
+                seekBar.setProgress(currentMessageObject.audioProgress);
+            }
+        }
+
+        int duration = 0;
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO) {
+            if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+                for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                    TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                    if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                        duration = attribute.duration;
+                        break;
+                    }
+                }
+            } else {
+                duration = currentMessageObject.audioProgressSec;
+            }
+            String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
+            if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+                lastTimeString = timeString;
+                timeWidthAudio = (int) Math.ceil(audioTimePaint.measureText(timeString));
+                timeLayout = new StaticLayout(timeString, audioTimePaint, timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            }
+        } else {
+            int currentProgress = 0;
+            for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                    duration = attribute.duration;
+                    break;
+                }
+            }
+            if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+                currentProgress = currentMessageObject.audioProgressSec;
+            }
+            String timeString = String.format("%d:%02d / %d:%02d", currentProgress / 60, currentProgress % 60, duration / 60, duration % 60);
+            if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+                lastTimeString = timeString;
+                int timeWidth = (int) Math.ceil(audioTimePaint.measureText(timeString));
+                timeLayout = new StaticLayout(timeString, audioTimePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            }
+        }
+        invalidate();
+    }
+
+    public void downloadAudioIfNeed() {
+        if (documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO || documentAttach.size >= 1024 * 1024 * 5) {
+            return;
+        }
+        if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(documentAttach, true, false);
+            buttonState = 4;
+            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+        }
+    }
+
     public void setVisiblePart(int position, int height) {
         if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null) {
             return;
         }
+        position -= textY;
+
         int newFirst = -1, newLast = -1, newCount = 0;
 
-        for (int a = Math.max(0, (position - textY) / currentMessageObject.blockHeight); a < currentMessageObject.textLayoutBlocks.size(); a++) {
+        int startBlock = 0;
+        for (int a = 0; a < currentMessageObject.textLayoutBlocks.size(); a++) {
+            if (currentMessageObject.textLayoutBlocks.get(a).textYOffset > position) {
+                break;
+            }
+            startBlock = a;
+        }
+
+        for (int a = startBlock; a < currentMessageObject.textLayoutBlocks.size(); a++) {
             MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
-            float y = textY + block.textYOffset;
-            if (intersect(y, y + currentMessageObject.blockHeight, position, position + height)) {
+            float y = block.textYOffset;
+            if (intersect(y, y + block.height, position, position + height)) {
                 if (newFirst == -1) {
                     newFirst = a;
                 }
@@ -350,31 +942,113 @@ public static StaticLayout generateStaticLayout(CharSequence text, TextPaint pai
         return StaticLayoutEx.createStaticLayout(stringBuilder, paint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, maxWidth, maxLines);
     }
 
-    @Override
-    protected boolean isUserDataChanged() {
-        if (!hasLinkPreview && currentMessageObject.messageOwner.media != null && currentMessageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage) {
-            return true;
+    private void didClickedImage() {
+        if (currentMessageObject.type == 1 || currentMessageObject.type == 13) {
+            if (buttonState == -1) {
+                delegate.didPressedImage(this);
+            } else if (buttonState == 0) {
+                didPressedButton(false);
+            }
+        } else if (currentMessageObject.type == 12) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.user_id);
+            delegate.didPressedUserAvatar(this, user);
+        } else if (currentMessageObject.type == 8) {
+            if (buttonState == -1) {
+                buttonState = 2;
+                currentMessageObject.audioProgress = 1;
+                photoImage.setAllowStartAnimation(false);
+                photoImage.stopAnimation();
+                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                invalidate();
+            } else if (buttonState == 2 || buttonState == 0) {
+                didPressedButton(false);
+            }
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+            if (buttonState == 0 || buttonState == 3) {
+                didPressedButton(false);
+            }
+        } else if (currentMessageObject.type == 4) {
+            delegate.didPressedImage(this);
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+            if (buttonState == -1) {
+                delegate.didPressedImage(this);
+            }
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
+            if (buttonState == -1) {
+                TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
+                if (Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
+                    delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.description, webPage.url, webPage.embed_width, webPage.embed_height);
+                } else {
+                    Browser.openUrl(getContext(), webPage.url);
+                }
+            }
         }
-        //suppress warning
-        return super.isUserDataChanged();
-    }
-
-    @Override
-    public ImageReceiver getPhotoImage() {
-        return linkImageView;
+    }
+
+    private void updateSecretTimeText(MessageObject messageObject) {
+        if (messageObject == null || messageObject.isOut()) {
+            return;
+        }
+        String str = messageObject.getSecretTimeString();
+        if (str == null) {
+            return;
+        }
+        infoWidth = (int) Math.ceil(infoPaint.measureText(str));
+        CharSequence str2 = TextUtils.ellipsize(str, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+        infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        invalidate();
+    }
+
+    private boolean isPhotoDataChanged(MessageObject object) {
+        if (object.type == 0 || object.type == 14) {
+            return false;
+        }
+        if (object.type == 4) {
+            if (currentUrl == null) {
+                return true;
+            }
+            double lat = object.messageOwner.media.geo.lat;
+            double lon = object.messageOwner.media.geo._long;
+            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:mid|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+            if (!url.equals(currentUrl)) {
+                return true;
+            }
+        } else if (currentPhotoObject == null || currentPhotoObject.location instanceof TLRPC.TL_fileLocationUnavailable) {
+            return true;
+        } else if (currentMessageObject != null && photoNotSet) {
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            if (cacheFile.exists()) { //TODO
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    protected boolean isUserDataChanged() {
+        return currentMessageObject != null && (!hasLinkPreview && currentMessageObject.messageOwner.media != null && currentMessageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage || super.isUserDataChanged());
+    }
+
+    @Override
+    public ImageReceiver getPhotoImage() {
+        return photoImage;
     }
 
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
-        linkImageView.onDetachedFromWindow();
+        photoImage.onDetachedFromWindow();
         MediaController.getInstance().removeLoadingFileObserver(this);
     }
 
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
-        if (linkImageView.onAttachedToWindow()) {
+        if (drawPhotoImage) {
+            if (photoImage.onAttachedToWindow()) {
+                updateButtonState(false);
+            }
+        } else {
             updateButtonState(false);
         }
     }
@@ -384,720 +1058,2276 @@ protected void onLongPress() {
         if (pressedLink instanceof URLSpanNoUnderline) {
             URLSpanNoUnderline url = (URLSpanNoUnderline) pressedLink;
             if (url.getURL().startsWith("/")) {
-                delegate.didPressUrl(currentMessageObject, pressedLink, true);
+                delegate.didPressedUrl(currentMessageObject, pressedLink, true);
                 return;
             }
         } else if (pressedLink instanceof URLSpan) {
-            delegate.didPressUrl(currentMessageObject, pressedLink, true);
+            delegate.didPressedUrl(currentMessageObject, pressedLink, true);
             return;
         }
+        resetPressedLink(-1);
+        if (buttonPressed != 0 || pressedBotButton != -1) {
+            buttonPressed = 0;
+            pressedBotButton = -1;
+            invalidate();
+        }
         super.onLongPress();
     }
 
+    @Override
+    public void setCheckPressed(boolean value, boolean pressed) {
+        super.setCheckPressed(value, pressed);
+        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
+            invalidate();
+        }
+        if (useSeekBarWaweform) {
+            seekBarWaveform.setSelected(isDrawSelectedBackground());
+        } else {
+            seekBar.setSelected(isDrawSelectedBackground());
+        }
+    }
+
+    @Override
+    public void setHighlighted(boolean value) {
+        super.setHighlighted(value);
+        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
+            invalidate();
+        }
+        if (useSeekBarWaweform) {
+            seekBarWaveform.setSelected(isDrawSelectedBackground());
+        } else {
+            seekBar.setSelected(isDrawSelectedBackground());
+        }
+    }
+
+    @Override
+    public void setPressed(boolean pressed) {
+        super.setPressed(pressed);
+        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
+            invalidate();
+        }
+        if (useSeekBarWaweform) {
+            seekBarWaveform.setSelected(isDrawSelectedBackground());
+        } else {
+            seekBar.setSelected(isDrawSelectedBackground());
+        }
+    }
+
+    @Override
+    public void onSeekBarDrag(float progress) {
+        if (currentMessageObject == null) {
+            return;
+        }
+        currentMessageObject.audioProgress = progress;
+        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
+    }
+
+    private void updateWaveform() {
+        if (currentMessageObject == null || documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO) {
+            return;
+        }
+        for (int a = 0; a < documentAttach.attributes.size(); a++) {
+            TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                if (attribute.waveform == null || attribute.waveform.length == 0) {
+                    MediaController.getInstance().generateWaveform(currentMessageObject);
+                }
+                useSeekBarWaweform = attribute.waveform != null;
+                seekBarWaveform.setWaveform(attribute.waveform);
+                break;
+            }
+        }
+    }
+
+    private int createDocumentLayout(int maxWidth, MessageObject messageObject) {
+        if (messageObject.type == 0) {
+            documentAttach = messageObject.messageOwner.media.webpage.document;
+        } else {
+            documentAttach = messageObject.messageOwner.media.document;
+        }
+        if (documentAttach == null) {
+            return 0;
+        }
+        if (MessageObject.isVoiceDocument(documentAttach)) {
+            documentAttachType = DOCUMENT_ATTACH_TYPE_AUDIO;
+            int duration = 0;
+            for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                    duration = attribute.duration;
+                    break;
+                }
+            }
+            availableTimeWidth = maxWidth - AndroidUtilities.dp(76 + 18) - (int) Math.ceil(audioTimePaint.measureText("00:00"));
+            measureTime(messageObject);
+            int minSize = AndroidUtilities.dp(40 + 14 + 20 + 90 + 10) + timeWidth;
+            if (!hasLinkPreview) {
+                backgroundWidth = Math.min(maxWidth, minSize + duration * AndroidUtilities.dp(10));
+            }
+
+            if (messageObject.isOutOwner()) {
+                seekBarWaveform.setColors(Theme.MSG_OUT_VOICE_SEEKBAR_COLOR, Theme.MSG_OUT_VOICE_SEEKBAR_FILL_COLOR, Theme.MSG_OUT_VOICE_SEEKBAR_SELECTED_COLOR);
+                seekBar.setColors(Theme.MSG_OUT_AUDIO_SEEKBAR_COLOR, Theme.MSG_OUT_AUDIO_SEEKBAR_FILL_COLOR, Theme.MSG_OUT_AUDIO_SEEKBAR_SELECTED_COLOR);
+            } else {
+                seekBarWaveform.setColors(Theme.MSG_IN_VOICE_SEEKBAR_COLOR, Theme.MSG_IN_VOICE_SEEKBAR_FILL_COLOR, Theme.MSG_IN_VOICE_SEEKBAR_SELECTED_COLOR);
+                seekBar.setColors(Theme.MSG_IN_AUDIO_SEEKBAR_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_FILL_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_SELECTED_COLOR);
+            }
+            seekBarWaveform.setMessageObject(messageObject);
+            return 0;
+        } else if (MessageObject.isMusicDocument(documentAttach)) {
+            documentAttachType = DOCUMENT_ATTACH_TYPE_MUSIC;
+            if (messageObject.isOutOwner()) {
+                seekBar.setColors(Theme.MSG_OUT_AUDIO_SEEKBAR_COLOR, Theme.MSG_OUT_AUDIO_SEEKBAR_FILL_COLOR, Theme.MSG_OUT_AUDIO_SEEKBAR_SELECTED_COLOR);
+            } else {
+                seekBar.setColors(Theme.MSG_IN_AUDIO_SEEKBAR_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_FILL_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_SELECTED_COLOR);
+            }
+
+            maxWidth = maxWidth - AndroidUtilities.dp(86);
+
+            CharSequence stringFinal = TextUtils.ellipsize(messageObject.getMusicTitle().replace('\n', ' '), audioTitlePaint, maxWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            songLayout = new StaticLayout(stringFinal, audioTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (songLayout.getLineCount() > 0) {
+                songX = -(int) Math.ceil(songLayout.getLineLeft(0));
+            }
+
+            stringFinal = TextUtils.ellipsize(messageObject.getMusicAuthor().replace('\n', ' '), audioPerformerPaint, maxWidth, TextUtils.TruncateAt.END);
+            performerLayout = new StaticLayout(stringFinal, audioPerformerPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (performerLayout.getLineCount() > 0) {
+                performerX = -(int) Math.ceil(performerLayout.getLineLeft(0));
+            }
+
+            int duration = 0;
+            for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                    duration = attribute.duration;
+                    break;
+                }
+            }
+            int durationWidth = (int) Math.ceil(audioTimePaint.measureText(String.format("%d:%02d / %d:%02d", duration / 60, duration % 60, duration / 60, duration % 60)));
+            availableTimeWidth = backgroundWidth - AndroidUtilities.dp(76 + 18) - durationWidth;
+            return durationWidth;
+        } else if (MessageObject.isVideoDocument(documentAttach)) {
+            documentAttachType = DOCUMENT_ATTACH_TYPE_VIDEO;
+            int duration = 0;
+            for (int a = 0; a < documentAttach.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                    duration = attribute.duration;
+                    break;
+                }
+            }
+            int minutes = duration / 60;
+            int seconds = duration - minutes * 60;
+            String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(documentAttach.size));
+            infoWidth = (int) Math.ceil(infoPaint.measureText(str));
+            infoLayout = new StaticLayout(str, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+            return 0;
+        } else {
+            drawPhotoImage = documentAttach.mime_type != null && documentAttach.mime_type.toLowerCase().startsWith("image/") || documentAttach.thumb instanceof TLRPC.TL_photoSize && !(documentAttach.thumb.location instanceof TLRPC.TL_fileLocationUnavailable);
+            if (!drawPhotoImage) {
+                maxWidth += AndroidUtilities.dp(30);
+            }
+            documentAttachType = DOCUMENT_ATTACH_TYPE_DOCUMENT;
+            String name = FileLoader.getDocumentFileName(documentAttach);
+            if (name == null || name.length() == 0) {
+                name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+            }
+            captionLayout = StaticLayoutEx.createStaticLayout(name, docNamePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, maxWidth, drawPhotoImage ? 2 : 1);
+            nameOffsetX = Integer.MIN_VALUE;
+            int captionWidth;
+            if (captionLayout != null && captionLayout.getLineCount() > 0) {
+                int maxLineWidth = 0;
+                for (int a = 0; a < captionLayout.getLineCount(); a++) {
+                    maxLineWidth = Math.max(maxLineWidth, (int) Math.ceil(captionLayout.getLineWidth(a)));
+                    nameOffsetX = Math.max(nameOffsetX, (int) Math.ceil(-captionLayout.getLineLeft(a)));
+                }
+                captionWidth = Math.min(maxWidth, maxLineWidth);
+            } else {
+                captionWidth = maxWidth;
+                nameOffsetX = 0;
+            }
+
+            String str = AndroidUtilities.formatFileSize(documentAttach.size) + " " + FileLoader.getDocumentExtension(documentAttach);
+            infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(str)));
+            CharSequence str2 = TextUtils.ellipsize(str, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+            try {
+                if (infoWidth < 0) {
+                    infoWidth = AndroidUtilities.dp(10);
+                }
+                infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            if (drawPhotoImage) {
+                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+                photoImage.setNeedsQualityThumb(true);
+                photoImage.setShouldGenerateQualityThumb(true);
+                photoImage.setParentMessageObject(messageObject);
+                if (currentPhotoObject != null) {
+                    currentPhotoFilter = "86_86_b";
+                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, true);
+                } else {
+                    photoImage.setImageBitmap((BitmapDrawable) null);
+                }
+            }
+            return captionWidth;
+        }
+    }
+
+    private void calcBackgroundWidth(int maxWidth, int timeMore, int maxChildWidth) {
+        if (hasLinkPreview || maxWidth - currentMessageObject.lastLineWidth < timeMore) {
+            totalHeight += AndroidUtilities.dp(14);
+            backgroundWidth = Math.max(maxChildWidth, currentMessageObject.lastLineWidth) + AndroidUtilities.dp(31);
+            backgroundWidth = Math.max(backgroundWidth, timeWidth + AndroidUtilities.dp(31));
+        } else {
+            int diff = maxChildWidth - currentMessageObject.lastLineWidth;
+            if (diff >= 0 && diff <= timeMore) {
+                backgroundWidth = maxChildWidth + timeMore - diff + AndroidUtilities.dp(31);
+            } else {
+                backgroundWidth = Math.max(maxChildWidth, currentMessageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(31);
+            }
+        }
+    }
+
     @Override
     public void setMessageObject(MessageObject messageObject) {
+        boolean messageIdChanged = currentMessageObject == null || currentMessageObject.getId() != messageObject.getId();
+        boolean messageChanged = currentMessageObject != messageObject || messageObject.forceUpdate;
         boolean dataChanged = currentMessageObject == messageObject && (isUserDataChanged() || photoNotSet);
-        if (currentMessageObject != messageObject || dataChanged) {
-            if (currentMessageObject != messageObject) {
-                firstVisibleBlockNum = 0;
-                lastVisibleBlockNum = 0;
-            }
-            drawLinkImageView = false;
+        if (messageChanged || dataChanged || isPhotoDataChanged(messageObject)) {
+            resetPressedLink(-1);
+            messageObject.forceUpdate = false;
+            drawPhotoImage = false;
             hasLinkPreview = false;
-            resetPressedLink();
             linkPreviewPressed = false;
-            buttonPressed = false;
+            buttonPressed = 0;
+            pressedBotButton = -1;
             linkPreviewHeight = 0;
-            isInstagram = false;
+            mediaOffsetY = 0;
             durationLayout = null;
-            isGifDocument = false;
+            documentAttachType = DOCUMENT_ATTACH_TYPE_NONE;
+            documentAttach = null;
             descriptionLayout = null;
             titleLayout = null;
-            siteNameLayout = null;
+            siteCaptionLayout = null;
             authorLayout = null;
+            captionLayout = null;
             drawImageButton = false;
             currentPhotoObject = null;
             currentPhotoObjectThumb = null;
             currentPhotoFilter = null;
-            int maxWidth;
-
-            if (AndroidUtilities.isTablet()) {
-                if (isChat && !messageObject.isOutOwner() && messageObject.isFromUser()) {
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
-                    drawName = true;
-                } else {
-                    drawName = messageObject.messageOwner.to_id.channel_id != 0 && !messageObject.isOutOwner();
-                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
-                }
-            } else {
-                if (isChat && !messageObject.isOutOwner() && messageObject.isFromUser()) {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
-                    drawName = true;
-                } else {
-                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
-                    drawName = messageObject.messageOwner.to_id.channel_id != 0 && !messageObject.isOutOwner();
-                }
+            infoLayout = null;
+            cancelLoading = false;
+            buttonState = -1;
+            currentUrl = null;
+            photoNotSet = false;
+            drawBackground = true;
+            drawName = false;
+            useSeekBarWaweform = false;
+            drawForwardedName = false;
+            mediaBackground = false;
+            availableTimeWidth = 0;
+            photoImage.setNeedsQualityThumb(false);
+            photoImage.setShouldGenerateQualityThumb(false);
+            photoImage.setParentMessageObject(null);
+            photoImage.setRoundRadius(AndroidUtilities.dp(3));
+
+            if (messageChanged) {
+                firstVisibleBlockNum = 0;
+                lastVisibleBlockNum = 0;
+                needNewVisiblePart = true;
             }
 
-            backgroundWidth = maxWidth;
-            availableTimeWidth = backgroundWidth - AndroidUtilities.dp(29);
-
-            super.setMessageObject(messageObject);
-
-            backgroundWidth = messageObject.textWidth;
-            totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + namesOffset;
-
-            int maxChildWidth = Math.max(backgroundWidth, nameWidth);
-            maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
-            maxChildWidth = Math.max(maxChildWidth, replyNameWidth);
-            maxChildWidth = Math.max(maxChildWidth, replyTextWidth);
-            int maxWebWidth = 0;
-
-            int timeMore = timeWidth + AndroidUtilities.dp(6);
-            if (messageObject.isOutOwner()) {
-                timeMore += AndroidUtilities.dp(20.5f);
-            }
+            if (messageObject.type == 0) {
+                drawForwardedName = true;
 
-            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage) {
-                int linkPreviewMaxWidth;
+                int maxWidth;
                 if (AndroidUtilities.isTablet()) {
-                    if (messageObject.isFromUser() && (currentMessageObject.messageOwner.to_id.channel_id != 0 || currentMessageObject.messageOwner.to_id.chat_id != 0) && !currentMessageObject.isOut()) {
-                        linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                    if (isChat && !messageObject.isOutOwner() && messageObject.isFromUser()) {
+                        maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                        drawName = true;
                     } else {
-                        linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+                        drawName = messageObject.messageOwner.to_id.channel_id != 0 && !messageObject.isOutOwner();
+                        maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
                     }
                 } else {
-                    if (messageObject.isFromUser() && (currentMessageObject.messageOwner.to_id.channel_id != 0 || currentMessageObject.messageOwner.to_id.chat_id != 0) && !currentMessageObject.isOutOwner()) {
-                        linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+                    if (isChat && !messageObject.isOutOwner() && messageObject.isFromUser()) {
+                        maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+                        drawName = true;
                     } else {
-                        linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+                        maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+                        drawName = messageObject.messageOwner.to_id.channel_id != 0 && !messageObject.isOutOwner();
                     }
                 }
-                if (drawShareButton) {
-                    linkPreviewMaxWidth -= AndroidUtilities.dp(20);
+                measureTime(messageObject);
+                int timeMore = timeWidth + AndroidUtilities.dp(6);
+                if (messageObject.isOutOwner()) {
+                    timeMore += AndroidUtilities.dp(20.5f);
                 }
 
-                TLRPC.TL_webPage webPage = (TLRPC.TL_webPage) messageObject.messageOwner.media.webpage;
-
-                if (webPage.site_name != null && webPage.photo != null && webPage.site_name.toLowerCase().equals("instagram")) {
-                    linkPreviewMaxWidth = Math.max(AndroidUtilities.displaySize.y / 3, currentMessageObject.textWidth);
+                hasLinkPreview = messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && messageObject.messageOwner.media.webpage instanceof TLRPC.TL_webPage;
+                backgroundWidth = maxWidth;
+                if (hasLinkPreview || maxWidth - messageObject.lastLineWidth < timeMore) {
+                    backgroundWidth = Math.max(backgroundWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(31);
+                    backgroundWidth = Math.max(backgroundWidth, timeWidth + AndroidUtilities.dp(31));
+                } else {
+                    int diff = backgroundWidth - messageObject.lastLineWidth;
+                    if (diff >= 0 && diff <= timeMore) {
+                        backgroundWidth = backgroundWidth + timeMore - diff + AndroidUtilities.dp(31);
+                    } else {
+                        backgroundWidth = Math.max(backgroundWidth, messageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(31);
+                    }
                 }
+                availableTimeWidth = backgroundWidth - AndroidUtilities.dp(31);
 
-                int additinalWidth = AndroidUtilities.dp(10);
-                int restLinesCount = 3;
-                int additionalHeight = 0;
-                linkPreviewMaxWidth -= additinalWidth;
+                super.setMessageObject(messageObject);
 
-                hasLinkPreview = true;
+                backgroundWidth = messageObject.textWidth;
+                totalHeight = messageObject.textHeight + AndroidUtilities.dp(19.5f) + namesOffset;
 
-                if (currentMessageObject.photoThumbs == null && webPage.photo != null) {
-                    currentMessageObject.generateThumbs(true);
-                }
+                int maxChildWidth = Math.max(backgroundWidth, nameWidth);
+                maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
+                maxChildWidth = Math.max(maxChildWidth, replyNameWidth);
+                maxChildWidth = Math.max(maxChildWidth, replyTextWidth);
+                int maxWebWidth = 0;
 
-                isSmallImage = webPage.description != null && webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article")) && currentMessageObject.photoThumbs != null;
+                if (hasLinkPreview) {
+                    int linkPreviewMaxWidth;
+                    if (AndroidUtilities.isTablet()) {
+                        if (messageObject.isFromUser() && (currentMessageObject.messageOwner.to_id.channel_id != 0 || currentMessageObject.messageOwner.to_id.chat_id != 0) && !currentMessageObject.isOut()) {
+                            linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                        } else {
+                            linkPreviewMaxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+                        }
+                    } else {
+                        if (messageObject.isFromUser() && (currentMessageObject.messageOwner.to_id.channel_id != 0 || currentMessageObject.messageOwner.to_id.chat_id != 0) && !currentMessageObject.isOutOwner()) {
+                            linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+                        } else {
+                            linkPreviewMaxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+                        }
+                    }
+                    if (drawShareButton) {
+                        linkPreviewMaxWidth -= AndroidUtilities.dp(20);
+                    }
 
-                if (webPage.site_name != null) {
-                    try {
-                        int width = (int) Math.ceil(replyNamePaint.measureText(webPage.site_name));
-                        siteNameLayout = new StaticLayout(webPage.site_name, replyNamePaint, Math.min(width, linkPreviewMaxWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                        int height = siteNameLayout.getLineBottom(siteNameLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        additionalHeight += height;
-                        width = siteNameLayout.getWidth();
-                        maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                        maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
+                    TLRPC.TL_webPage webPage = (TLRPC.TL_webPage) messageObject.messageOwner.media.webpage;
+
+                    if (webPage.site_name != null && webPage.photo != null && webPage.site_name.toLowerCase().equals("instagram")) {
+                        linkPreviewMaxWidth = Math.max(AndroidUtilities.displaySize.y / 3, currentMessageObject.textWidth);
                     }
-                }
 
-                boolean titleIsRTL = false;
-                if (webPage.title != null) {
-                    try {
-                        titleX = 0;
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-                        int restLines = 0;
-                        if (!isSmallImage || webPage.description == null) {
-                            titleLayout = StaticLayoutEx.createStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 4);
-                        } else {
-                            restLines = restLinesCount;
-                            titleLayout = generateStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 4);
-                            restLinesCount -= titleLayout.getLineCount();
+                    int additinalWidth = AndroidUtilities.dp(10);
+                    int restLinesCount = 3;
+                    int additionalHeight = 0;
+                    linkPreviewMaxWidth -= additinalWidth;
+
+                    if (currentMessageObject.photoThumbs == null && webPage.photo != null) {
+                        currentMessageObject.generateThumbs(true);
+                    }
+
+                    isSmallImage = webPage.description != null && webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article")) && currentMessageObject.photoThumbs != null;
+
+                    if (webPage.site_name != null) {
+                        try {
+                            int width = (int) Math.ceil(replyNamePaint.measureText(webPage.site_name));
+                            siteCaptionLayout = new StaticLayout(webPage.site_name, replyNamePaint, Math.min(width, linkPreviewMaxWidth), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                            int height = siteCaptionLayout.getLineBottom(siteCaptionLayout.getLineCount() - 1);
+                            linkPreviewHeight += height;
+                            totalHeight += height;
+                            additionalHeight += height;
+                            width = siteCaptionLayout.getWidth();
+                            maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
+                            maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
                         }
-                        int height = titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        for (int a = 0; a < titleLayout.getLineCount(); a++) {
-                            int lineLeft = (int) titleLayout.getLineLeft(a);
-                            if (lineLeft != 0) {
-                                titleIsRTL = true;
-                                if (titleX == 0) {
-                                    titleX = -lineLeft;
+                    }
+
+                    boolean titleIsRTL = false;
+                    if (webPage.title != null) {
+                        try {
+                            titleX = 0;
+                            if (linkPreviewHeight != 0) {
+                                linkPreviewHeight += AndroidUtilities.dp(2);
+                                totalHeight += AndroidUtilities.dp(2);
+                            }
+                            int restLines = 0;
+                            if (!isSmallImage || webPage.description == null) {
+                                titleLayout = StaticLayoutEx.createStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 4);
+                            } else {
+                                restLines = restLinesCount;
+                                titleLayout = generateStaticLayout(webPage.title, replyNamePaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 4), restLinesCount, 4);
+                                restLinesCount -= titleLayout.getLineCount();
+                            }
+                            int height = titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
+                            linkPreviewHeight += height;
+                            totalHeight += height;
+                            for (int a = 0; a < titleLayout.getLineCount(); a++) {
+                                int lineLeft = (int) titleLayout.getLineLeft(a);
+                                if (lineLeft != 0) {
+                                    titleIsRTL = true;
+                                    if (titleX == 0) {
+                                        titleX = -lineLeft;
+                                    } else {
+                                        titleX = Math.max(titleX, -lineLeft);
+                                    }
+                                }
+                                int width;
+                                if (lineLeft != 0) {
+                                    width = titleLayout.getWidth() - lineLeft;
                                 } else {
-                                    titleX = Math.max(titleX, -lineLeft);
+                                    width = (int) Math.ceil(titleLayout.getLineWidth(a));
+                                }
+                                if (a < restLines || lineLeft != 0 && isSmallImage) {
+                                    width += AndroidUtilities.dp(48 + 4);
                                 }
+                                maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
+                                maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
                             }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                    boolean authorIsRTL = false;
+                    if (webPage.author != null) {
+                        try {
+                            if (linkPreviewHeight != 0) {
+                                linkPreviewHeight += AndroidUtilities.dp(2);
+                                totalHeight += AndroidUtilities.dp(2);
+                            }
+                            //int width = Math.min((int) Math.ceil(replyNamePaint.measureText(webPage.author)), linkPreviewMaxWidth);
+                            if (restLinesCount == 3 && (!isSmallImage || webPage.description == null)) {
+                                authorLayout = new StaticLayout(webPage.author, replyNamePaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                            } else {
+                                authorLayout = generateStaticLayout(webPage.author, replyNamePaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 4), restLinesCount, 1);
+                                restLinesCount -= authorLayout.getLineCount();
+                            }
+                            int height = authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
+                            linkPreviewHeight += height;
+                            totalHeight += height;
+                            int lineLeft = (int) authorLayout.getLineLeft(0);
+                            authorX = -lineLeft;
                             int width;
                             if (lineLeft != 0) {
-                                width = titleLayout.getWidth() - lineLeft;
+                                width = authorLayout.getWidth() - lineLeft;
+                                authorIsRTL = true;
                             } else {
-                                width = (int) Math.ceil(titleLayout.getLineWidth(a));
-                            }
-                            if (a < restLines || lineLeft != 0 && isSmallImage) {
-                                width += AndroidUtilities.dp(48 + 2);
+                                width = (int) Math.ceil(authorLayout.getLineWidth(0));
                             }
                             maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
                             maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
                         }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
                     }
-                }
 
-                boolean authorIsRTL = false;
-                if (webPage.author != null) {
-                    try {
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
+                    if (webPage.description != null) {
+                        try {
+                            descriptionX = 0;
+                            currentMessageObject.generateLinkDescription();
+                            if (linkPreviewHeight != 0) {
+                                linkPreviewHeight += AndroidUtilities.dp(2);
+                                totalHeight += AndroidUtilities.dp(2);
+                            }
+                            int restLines = 0;
+                            if (restLinesCount == 3 && !isSmallImage) {
+                                descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 6);
+                            } else {
+                                restLines = restLinesCount;
+                                descriptionLayout = generateStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 4), restLinesCount, 6);
+                            }
+                            int height = descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
+                            linkPreviewHeight += height;
+                            totalHeight += height;
+
+                            boolean hasRTL = false;
+                            for (int a = 0; a < descriptionLayout.getLineCount(); a++) {
+                                int lineLeft = (int) Math.ceil(descriptionLayout.getLineLeft(a));
+                                if (lineLeft != 0) {
+                                    hasRTL = true;
+                                    if (descriptionX == 0) {
+                                        descriptionX = -lineLeft;
+                                    } else {
+                                        descriptionX = Math.max(descriptionX, -lineLeft);
+                                    }
+                                }
+                            }
+
+                            for (int a = 0; a < descriptionLayout.getLineCount(); a++) {
+                                int lineLeft = (int) Math.ceil(descriptionLayout.getLineLeft(a));
+                                if (lineLeft == 0 && descriptionX != 0) {
+                                    descriptionX = 0;
+                                }
+
+                                int width;
+                                if (lineLeft != 0) {
+                                    width = descriptionLayout.getWidth() - lineLeft;
+                                } else {
+                                    width = hasRTL ? descriptionLayout.getWidth() : (int) Math.ceil(descriptionLayout.getLineWidth(a));
+                                }
+                                if (a < restLines || restLines != 0 && lineLeft != 0 && isSmallImage) {
+                                    width += AndroidUtilities.dp(48 + 4);
+                                }
+                                if (maxWebWidth < width + additinalWidth) {
+                                    if (titleIsRTL) {
+                                        titleX += (width + additinalWidth - maxWebWidth);
+                                    }
+                                    if (authorIsRTL) {
+                                        authorX += (width + additinalWidth - maxWebWidth);
+                                    }
+                                    maxWebWidth = width + additinalWidth;
+                                }
+                                if (restLines == 0 || !isSmallImage) {
+                                    if (titleIsRTL) {
+                                        titleX = -AndroidUtilities.dp(4);
+                                    }
+                                    if (authorIsRTL) {
+                                        authorX = -AndroidUtilities.dp(4);
+                                    }
+                                }
+                                maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
                         }
-                        //int width = Math.min((int) Math.ceil(replyNamePaint.measureText(webPage.author)), linkPreviewMaxWidth);
-                        if (restLinesCount == 3 && (!isSmallImage || webPage.description == null)) {
-                            authorLayout = new StaticLayout(webPage.author, replyNamePaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    }
+
+                    boolean smallImage = webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article"));
+                    if (smallImage && (descriptionLayout == null || descriptionLayout != null && descriptionLayout.getLineCount() == 1)) {
+                        smallImage = false;
+                        isSmallImage = false;
+                    }
+                    int maxPhotoWidth = smallImage ? AndroidUtilities.dp(48) : linkPreviewMaxWidth;
+
+                    if (webPage.document != null) {
+                        TLRPC.Document document = webPage.document;
+                        if (MessageObject.isGifDocument(document)){
+                            if (!MediaController.getInstance().canAutoplayGifs()) {
+                                messageObject.audioProgress = 1;
+                            }
+                            photoImage.setAllowStartAnimation(messageObject.audioProgress != 1);
+                            currentPhotoObject = document.thumb;
+                            if (currentPhotoObject != null && (currentPhotoObject.w == 0 || currentPhotoObject.h == 0)) {
+                                for (int a = 0; a < document.attributes.size(); a++) {
+                                    TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                                    if (attribute instanceof TLRPC.TL_documentAttributeImageSize || attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                                        currentPhotoObject.w = attribute.w;
+                                        currentPhotoObject.h = attribute.h;
+                                        break;
+                                    }
+                                }
+                                if (currentPhotoObject.w == 0 || currentPhotoObject.h == 0) {
+                                    currentPhotoObject.w = currentPhotoObject.h = AndroidUtilities.dp(150);
+                                }
+                            }
+                            documentAttachType = DOCUMENT_ATTACH_TYPE_GIF;
+                        } else if (MessageObject.isVideoDocument(document)) {
+                            currentPhotoObject = document.thumb;
+                            if (currentPhotoObject != null && (currentPhotoObject.w == 0 || currentPhotoObject.h == 0)) {
+                                for (int a = 0; a < document.attributes.size(); a++) {
+                                    TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                                    if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                                        currentPhotoObject.w = attribute.w;
+                                        currentPhotoObject.h = attribute.h;
+                                        break;
+                                    }
+                                }
+                                if (currentPhotoObject.w == 0 || currentPhotoObject.h == 0) {
+                                    currentPhotoObject.w = currentPhotoObject.h = AndroidUtilities.dp(150);
+                                }
+                            }
+                            createDocumentLayout(0, messageObject);
+                        } else if (MessageObject.isStickerDocument(document)) {
+                            currentPhotoObject = document.thumb;
+                            if (currentPhotoObject != null && (currentPhotoObject.w == 0 || currentPhotoObject.h == 0)) {
+                                for (int a = 0; a < document.attributes.size(); a++) {
+                                    TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                                    if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
+                                        currentPhotoObject.w = attribute.w;
+                                        currentPhotoObject.h = attribute.h;
+                                        break;
+                                    }
+                                }
+                                if (currentPhotoObject.w == 0 || currentPhotoObject.h == 0) {
+                                    currentPhotoObject.w = currentPhotoObject.h = AndroidUtilities.dp(150);
+                                }
+                            }
+                            documentAttach = document;
+                            documentAttachType = DOCUMENT_ATTACH_TYPE_STICKER;
                         } else {
-                            authorLayout = generateStaticLayout(webPage.author, replyNamePaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 1);
-                            restLinesCount -= authorLayout.getLineCount();
+                            calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
+                            if (!MessageObject.isStickerDocument(document)) {
+                                if (backgroundWidth < maxWidth + AndroidUtilities.dp(20)) {
+                                    backgroundWidth = maxWidth + AndroidUtilities.dp(20);
+                                }
+                                if (MessageObject.isVoiceDocument(document)) {
+                                    createDocumentLayout(backgroundWidth - AndroidUtilities.dp(10), messageObject);
+                                    mediaOffsetY = currentMessageObject.textHeight + AndroidUtilities.dp(8) + linkPreviewHeight;
+                                    totalHeight += AndroidUtilities.dp(30 + 14);
+                                    linkPreviewHeight += AndroidUtilities.dp(44);
+                                    calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
+                                } else if (MessageObject.isMusicDocument(document)) {
+                                    int durationWidth = createDocumentLayout(backgroundWidth - AndroidUtilities.dp(10), messageObject);
+                                    mediaOffsetY = currentMessageObject.textHeight + AndroidUtilities.dp(8) + linkPreviewHeight;
+                                    totalHeight += AndroidUtilities.dp(42 + 14);
+                                    linkPreviewHeight += AndroidUtilities.dp(56);
+
+                                    maxWidth = maxWidth - AndroidUtilities.dp(86);
+                                    maxChildWidth = Math.max(maxChildWidth, durationWidth + additinalWidth + AndroidUtilities.dp(86 + 8));
+                                    if (songLayout != null && songLayout.getLineCount() > 0) {
+                                        maxChildWidth = (int) Math.max(maxChildWidth, songLayout.getLineWidth(0) + additinalWidth + AndroidUtilities.dp(86));
+                                    }
+                                    if (performerLayout != null && performerLayout.getLineCount() > 0) {
+                                        maxChildWidth = (int) Math.max(maxChildWidth, performerLayout.getLineWidth(0) + additinalWidth + AndroidUtilities.dp(86));
+                                    }
+
+                                    calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
+                                } else {
+                                    createDocumentLayout(backgroundWidth - AndroidUtilities.dp(86 + 24 + 58), messageObject);
+                                    drawImageButton = true;
+                                    if (drawPhotoImage) {
+                                        totalHeight += AndroidUtilities.dp(86 + 14);
+                                        linkPreviewHeight += AndroidUtilities.dp(86);
+                                        photoImage.setImageCoords(0, totalHeight + namesOffset, AndroidUtilities.dp(86), AndroidUtilities.dp(86));
+                                    } else {
+                                        mediaOffsetY = currentMessageObject.textHeight + AndroidUtilities.dp(8) + linkPreviewHeight;
+                                        photoImage.setImageCoords(0, totalHeight + namesOffset - AndroidUtilities.dp(14), AndroidUtilities.dp(56), AndroidUtilities.dp(56));
+                                        totalHeight += AndroidUtilities.dp(50 + 14);
+                                        linkPreviewHeight += AndroidUtilities.dp(50);
+                                    }
+                                }
+                            }
                         }
-                        int height = authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
-                        int lineLeft = (int) authorLayout.getLineLeft(0);
-                        authorX = -lineLeft;
-                        int width;
-                        if (lineLeft != 0) {
-                            width = authorLayout.getWidth() - lineLeft;
-                            authorIsRTL = true;
-                        } else {
-                            width = (int) Math.ceil(authorLayout.getLineWidth(0));
+                    } else if (webPage.photo != null) {
+                        currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, drawImageButton ? AndroidUtilities.getPhotoSize() : maxPhotoWidth, !drawImageButton);
+                        currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
+                        if (currentPhotoObjectThumb == currentPhotoObject) {
+                            currentPhotoObjectThumb = null;
                         }
-                        maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
-                        maxWebWidth = Math.max(maxWebWidth, width + additinalWidth);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
                     }
-                }
 
-                if (webPage.description != null) {
-                    try {
-                        descriptionX = 0;
-                        currentMessageObject.generateLinkDescription();
-                        if (linkPreviewHeight != 0) {
-                            linkPreviewHeight += AndroidUtilities.dp(2);
-                            totalHeight += AndroidUtilities.dp(2);
-                        }
-                        int restLines = 0;
-                        if (restLinesCount == 3 && !isSmallImage) {
-                            descriptionLayout = StaticLayoutEx.createStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1), false, TextUtils.TruncateAt.END, linkPreviewMaxWidth, 6);
-                        } else {
-                            restLines = restLinesCount;
-                            descriptionLayout = generateStaticLayout(messageObject.linkDescription, replyTextPaint, linkPreviewMaxWidth, linkPreviewMaxWidth - AndroidUtilities.dp(48 + 2), restLinesCount, 6);
-                        }
-                        int height = descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
-                        linkPreviewHeight += height;
-                        totalHeight += height;
+                    if (documentAttachType != DOCUMENT_ATTACH_TYPE_MUSIC && documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO && documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                        if (currentPhotoObject != null) {
+                            drawImageButton = webPage.type != null && (webPage.type.equals("photo") || webPage.type.equals("document") && documentAttachType != DOCUMENT_ATTACH_TYPE_STICKER || webPage.type.equals("gif") || documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO);
+                            if (linkPreviewHeight != 0) {
+                                linkPreviewHeight += AndroidUtilities.dp(2);
+                                totalHeight += AndroidUtilities.dp(2);
+                            }
 
-                        boolean hasRTL = false;
-                        for (int a = 0; a < descriptionLayout.getLineCount(); a++) {
-                            int lineLeft = (int) Math.ceil(descriptionLayout.getLineLeft(a));
-                            if (lineLeft != 0) {
-                                hasRTL = true;
-                                if (descriptionX == 0) {
-                                    descriptionX = -lineLeft;
+                            if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER) {
+                                if (AndroidUtilities.isTablet()) {
+                                    maxPhotoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
                                 } else {
-                                    descriptionX = Math.max(descriptionX, -lineLeft);
+                                    maxPhotoWidth = (int) (AndroidUtilities.displaySize.x * 0.5f);
                                 }
                             }
-                        }
 
-                        for (int a = 0; a < descriptionLayout.getLineCount(); a++) {
-                            int lineLeft = (int) Math.ceil(descriptionLayout.getLineLeft(a));
-                            if (lineLeft == 0 && descriptionX != 0) {
-                                descriptionX = 0;
+                            maxChildWidth = Math.max(maxChildWidth, maxPhotoWidth + additinalWidth);
+                            currentPhotoObject.size = -1;
+                            if (currentPhotoObjectThumb != null) {
+                                currentPhotoObjectThumb.size = -1;
                             }
 
                             int width;
-                            if (lineLeft != 0) {
-                                width = descriptionLayout.getWidth() - lineLeft;
+                            int height;
+                            if (smallImage) {
+                                width = height = maxPhotoWidth;
                             } else {
-                                width = hasRTL ? descriptionLayout.getWidth() : (int) Math.ceil(descriptionLayout.getLineWidth(a));
-                            }
-                            if (a < restLines || restLines != 0 && lineLeft != 0 && isSmallImage) {
-                                width += AndroidUtilities.dp(48 + 2);
-                            }
-                            if (maxWebWidth < width + additinalWidth) {
-                                if (titleIsRTL) {
-                                    titleX += (width + additinalWidth - maxWebWidth);
+                                width = currentPhotoObject.w;
+                                height = currentPhotoObject.h;
+                                float scale = width / (float) (maxPhotoWidth - AndroidUtilities.dp(2));
+                                width /= scale;
+                                height /= scale;
+                                if (webPage.site_name == null || webPage.site_name != null && !webPage.site_name.toLowerCase().equals("instagram") && documentAttachType == 0) {
+                                    if (height > AndroidUtilities.displaySize.y / 3) {
+                                        height = AndroidUtilities.displaySize.y / 3;
+                                    }
                                 }
-                                if (authorIsRTL) {
-                                    authorX += (width + additinalWidth - maxWebWidth);
+                            }
+                            if (isSmallImage) {
+                                if (AndroidUtilities.dp(50) + additionalHeight > linkPreviewHeight) {
+                                    totalHeight += AndroidUtilities.dp(50) + additionalHeight - linkPreviewHeight + AndroidUtilities.dp(8);
+                                    linkPreviewHeight = AndroidUtilities.dp(50) + additionalHeight;
                                 }
-                                maxWebWidth = width + additinalWidth;
+                                linkPreviewHeight -= AndroidUtilities.dp(8);
+                            } else {
+                                totalHeight += height + AndroidUtilities.dp(12);
+                                linkPreviewHeight += height;
                             }
-                            if (restLines == 0 || !isSmallImage) {
-                                if (titleIsRTL) {
-                                    titleX = -AndroidUtilities.dp(4);
+
+                            photoImage.setImageCoords(0, 0, width, height);
+
+                            currentPhotoFilter = String.format(Locale.US, "%d_%d", width, height);
+                            currentPhotoFilterThumb = String.format(Locale.US, "%d_%d_b", width, height);
+
+                            if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER) {
+                                photoImage.setImage(documentAttach, null, currentPhotoFilter, null, currentPhotoObject != null ? currentPhotoObject.location : null, "b1", documentAttach.size, "webp", true);
+                            } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                                photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
+                            } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
+                                boolean photoExist = messageObject.mediaExists;
+                                String fileName = FileLoader.getAttachFileName(webPage.document);
+                                if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) || FileLoader.getInstance().isLoadingFile(fileName)) {
+                                    photoNotSet = false;
+                                    photoImage.setImage(webPage.document, null, currentPhotoObject.location, currentPhotoFilter, webPage.document.size, null, false);
+                                } else {
+                                    photoNotSet = true;
+                                    photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
                                 }
-                                if (authorIsRTL) {
-                                    authorX = -AndroidUtilities.dp(4);
+                            } else {
+                                boolean photoExist = messageObject.mediaExists;
+                                String fileName = FileLoader.getAttachFileName(currentPhotoObject);
+                                if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
+                                    photoNotSet = false;
+                                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                                } else {
+                                    photoNotSet = true;
+                                    if (currentPhotoObjectThumb != null) {
+                                        photoImage.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", width, height), 0, null, false);
+                                    } else {
+                                        photoImage.setImageBitmap((Drawable) null);
+                                    }
                                 }
                             }
-                            maxChildWidth = Math.max(maxChildWidth, width + additinalWidth);
+                            drawPhotoImage = true;
+
+                            if (webPage.type != null && webPage.type.equals("video") && webPage.duration != 0) {
+                                int minutes = webPage.duration / 60;
+                                int seconds = webPage.duration - minutes * 60;
+                                String str = String.format("%d:%02d", minutes, seconds);
+                                durationWidth = (int) Math.ceil(durationPaint.measureText(str));
+                                durationLayout = new StaticLayout(str, durationPaint, durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                            }
+                        } else {
+                            photoImage.setImageBitmap((Drawable) null);
+                            linkPreviewHeight -= AndroidUtilities.dp(6);
+                            totalHeight += AndroidUtilities.dp(4);
                         }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
+                        calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
                     }
+                } else {
+                    photoImage.setImageBitmap((Drawable) null);
+                    calcBackgroundWidth(maxWidth, timeMore, maxChildWidth);
+                }
+            } else if (messageObject.type == 12) {
+                drawName = false;
+                drawForwardedName = true;
+                drawPhotoImage = true;
+                photoImage.setRoundRadius(AndroidUtilities.dp(22));
+                if (AndroidUtilities.isTablet()) {
+                    backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                } else {
+                    backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
                 }
+                availableTimeWidth = backgroundWidth - AndroidUtilities.dp(31);
 
-                boolean smallImage = webPage.type != null && (webPage.type.equals("app") || webPage.type.equals("profile") || webPage.type.equals("article"));
-                if (smallImage && (descriptionLayout == null || descriptionLayout != null && descriptionLayout.getLineCount() == 1)) {
-                    smallImage = false;
-                    isSmallImage = false;
+                int uid = messageObject.messageOwner.media.user_id;
+                TLRPC.User user = MessagesController.getInstance().getUser(uid);
+
+                int maxWidth = getMaxNameWidth() - AndroidUtilities.dp(110);
+                if (maxWidth < 0) {
+                    maxWidth = AndroidUtilities.dp(10);
                 }
-                int maxPhotoWidth = smallImage ? AndroidUtilities.dp(48) : linkPreviewMaxWidth;
 
-                if (webPage.document != null && MessageObject.isGifDocument(webPage.document)) {
-                    if (!MediaController.getInstance().canAutoplayGifs()) {
-                        messageObject.audioProgress = 1;
+                TLRPC.FileLocation currentPhoto = null;
+                if (user != null) {
+                    if (user.photo != null) {
+                        currentPhoto = user.photo.photo_small;
                     }
-                    linkImageView.setAllowStartAnimation(messageObject.audioProgress != 1);
-                    currentPhotoObject = webPage.document.thumb;
-                    isGifDocument = true;
-                } else if (webPage.photo != null) {
-                    currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, drawImageButton ? AndroidUtilities.getPhotoSize() : maxPhotoWidth, !drawImageButton);
-                    currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
-                    if (currentPhotoObjectThumb == currentPhotoObject) {
-                        currentPhotoObjectThumb = null;
+                    avatarDrawable.setInfo(user);
+                }
+                photoImage.setImage(currentPhoto, "50_50", user != null ? avatarDrawable : Theme.contactDrawable[messageObject.isOutOwner() ? 1 : 0], null, false);
+
+                String phone = messageObject.messageOwner.media.phone_number;
+                if (phone != null && phone.length() != 0) {
+                    if (!phone.startsWith("+")) {
+                        phone = "+" + phone;
                     }
+                    phone = PhoneFormat.getInstance().format(phone);
+                } else {
+                    phone = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
                 }
 
-                if (currentPhotoObject != null) {
-                    drawImageButton = webPage.type != null && (webPage.type.equals("photo") || webPage.type.equals("document") || webPage.type.equals("gif"));
-                    if (linkPreviewHeight != 0) {
-                        linkPreviewHeight += AndroidUtilities.dp(2);
-                        totalHeight += AndroidUtilities.dp(2);
+                CharSequence currentNameString = ContactsController.formatName(messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name).replace('\n', ' ');
+                if (currentNameString.length() == 0) {
+                    currentNameString = phone;
+                }
+                titleLayout = new StaticLayout(TextUtils.ellipsize(currentNameString, contactNamePaint, maxWidth, TextUtils.TruncateAt.END), contactNamePaint, maxWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                captionLayout = new StaticLayout(TextUtils.ellipsize(phone.replace('\n', ' '), contactPhonePaint, maxWidth, TextUtils.TruncateAt.END), contactPhonePaint, maxWidth + AndroidUtilities.dp(2), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+                super.setMessageObject(messageObject);
+
+                if (drawForwardedName && messageObject.isForwarded()) {
+                    namesOffset += AndroidUtilities.dp(5);
+                } else if (drawNameLayout && messageObject.messageOwner.reply_to_msg_id == 0) {
+                    namesOffset += AndroidUtilities.dp(7);
+                }
+
+                totalHeight = AndroidUtilities.dp(70) + namesOffset;
+            } else if (messageObject.type == 2) {
+                drawForwardedName = true;
+                if (AndroidUtilities.isTablet()) {
+                    backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                } else {
+                    backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                }
+                createDocumentLayout(backgroundWidth, messageObject);
+
+                super.setMessageObject(messageObject);
+
+                totalHeight = AndroidUtilities.dp(70) + namesOffset;
+            } else if (messageObject.type == 14) {
+                if (AndroidUtilities.isTablet()) {
+                    backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                } else {
+                    backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                }
+
+                createDocumentLayout(backgroundWidth, messageObject);
+
+                super.setMessageObject(messageObject);
+
+                totalHeight = AndroidUtilities.dp(82) + namesOffset;
+            } else {
+                drawForwardedName = messageObject.messageOwner.fwd_from != null && messageObject.type != 13;
+                mediaBackground = messageObject.type != 9;
+                drawImageButton = true;
+                drawPhotoImage = true;
+
+                int photoWidth = 0;
+                int photoHeight = 0;
+                int additionHeight = 0;
+
+                if (messageObject.audioProgress != 2 && !MediaController.getInstance().canAutoplayGifs() && messageObject.type == 8) {
+                    messageObject.audioProgress = 1;
+                }
+
+                photoImage.setAllowStartAnimation(messageObject.audioProgress == 0);
+
+                photoImage.setForcePreview(messageObject.isSecretPhoto());
+                if (messageObject.type == 9) {
+                    if (AndroidUtilities.isTablet()) {
+                        backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                    } else {
+                        backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                    }
+                    if (checkNeedDrawShareButton(messageObject)) {
+                        backgroundWidth -= AndroidUtilities.dp(20);
                     }
+                    int maxWidth = backgroundWidth - AndroidUtilities.dp(86 + 52);
 
-                    maxChildWidth = Math.max(maxChildWidth, maxPhotoWidth + additinalWidth);
-                    currentPhotoObject.size = -1;
-                    if (currentPhotoObjectThumb != null) {
-                        currentPhotoObjectThumb.size = -1;
+                    createDocumentLayout(maxWidth, messageObject);
+                    if (drawPhotoImage) {
+                        photoWidth = AndroidUtilities.dp(86);
+                        photoHeight = AndroidUtilities.dp(86);
+                    } else {
+                        photoWidth = AndroidUtilities.dp(56);
+                        photoHeight = AndroidUtilities.dp(56);
                     }
+                    availableTimeWidth = maxWidth;
+                } else if (messageObject.type == 4) { //geo
+                    double lat = messageObject.messageOwner.media.geo.lat;
+                    double lon = messageObject.messageOwner.media.geo._long;
+
+                    if (messageObject.messageOwner.media.title != null && messageObject.messageOwner.media.title.length() > 0) {
+                        if (AndroidUtilities.isTablet()) {
+                            backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                        } else {
+                            backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(270));
+                        }
+                        if (checkNeedDrawShareButton(messageObject)) {
+                            backgroundWidth -= AndroidUtilities.dp(20);
+                        }
+                        int maxWidth = backgroundWidth - AndroidUtilities.dp(86 + 37);
+
+                        captionLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.title, locationTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth, 2);
+                        int lineCount = captionLayout.getLineCount();
+                        if (messageObject.messageOwner.media.address != null && messageObject.messageOwner.media.address.length() > 0) {
+                            infoLayout = StaticLayoutEx.createStaticLayout(messageObject.messageOwner.media.address, locationAddressPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth, Math.min(3, 3 - lineCount));
+                        } else {
+                            infoLayout = null;
+                        }
 
-                    int width;
-                    int height;
-                    if (smallImage) {
-                        width = height = maxPhotoWidth;
+                        mediaBackground = false;
+                        availableTimeWidth = maxWidth;
+                        photoWidth = AndroidUtilities.dp(86);
+                        photoHeight = AndroidUtilities.dp(86);
+                        currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=72x72&maptype=roadmap&scale=%d&markers=color:red|size:mid|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
                     } else {
-                        width = currentPhotoObject.w;
-                        height = currentPhotoObject.h;
-                        float scale = width / (float) maxPhotoWidth;
-                        width /= scale;
-                        height /= scale;
-                        if (webPage.site_name == null || webPage.site_name != null && !webPage.site_name.toLowerCase().equals("instagram") && !isGifDocument) {
-                            if (height > AndroidUtilities.displaySize.y / 3) {
-                                height = AndroidUtilities.displaySize.y / 3;
+                        availableTimeWidth = AndroidUtilities.dp(200 - 14);
+                        photoWidth = AndroidUtilities.dp(200);
+                        photoHeight = AndroidUtilities.dp(100);
+                        backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+                        currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=200x100&maptype=roadmap&scale=%d&markers=color:red|size:mid|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+                    }
+                    photoImage.setImage(currentUrl, null, messageObject.isOutOwner() ? Theme.geoOutDrawable : Theme.geoInDrawable, null, 0);
+                } else if (messageObject.type == 13) { //webp
+                    drawBackground = false;
+                    for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
+                        TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
+                        if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
+                            photoWidth = attribute.w;
+                            photoHeight = attribute.h;
+                            break;
+                        }
+                    }
+                    float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
+                    float maxWidth;
+                    if (AndroidUtilities.isTablet()) {
+                        maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
+                    } else {
+                        maxWidth = AndroidUtilities.displaySize.x * 0.5f;
+                    }
+                    if (photoWidth == 0) {
+                        photoHeight = (int) maxHeight;
+                        photoWidth = photoHeight + AndroidUtilities.dp(100);
+                    }
+                    if (photoHeight > maxHeight) {
+                        photoWidth *= maxHeight / photoHeight;
+                        photoHeight = (int) maxHeight;
+                    } else {
+                        photoHeight *= maxWidth / photoWidth;
+                        photoWidth = (int) maxWidth;
+                    }
+                    documentAttachType = DOCUMENT_ATTACH_TYPE_STICKER;
+                    availableTimeWidth = photoWidth - AndroidUtilities.dp(14);
+                    backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+                    currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
+                    if (messageObject.attachPathExists) {
+                        photoImage.setImage(null, messageObject.messageOwner.attachPath,
+                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+                                null,
+                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+                                "b1",
+                                messageObject.messageOwner.media.document.size, "webp", true);
+                    } else if (messageObject.messageOwner.media.document.id != 0) {
+                        photoImage.setImage(messageObject.messageOwner.media.document, null,
+                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+                                null,
+                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+                                "b1",
+                                messageObject.messageOwner.media.document.size, "webp", true);
+                    }
+                } else {
+                    int maxPhotoWidth;
+                    if (AndroidUtilities.isTablet()) {
+                        maxPhotoWidth = photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+                    } else {
+                        maxPhotoWidth = photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                    }
+                    photoHeight = photoWidth + AndroidUtilities.dp(100);
+                    if (checkNeedDrawShareButton(messageObject)) {
+                        maxPhotoWidth -= AndroidUtilities.dp(20);
+                        photoWidth -= AndroidUtilities.dp(20);
+                    }
+
+                    if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                        photoWidth = AndroidUtilities.getPhotoSize();
+                    }
+                    if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                        photoHeight = AndroidUtilities.getPhotoSize();
+                    }
+
+                    if (messageObject.type == 1) { //photo
+                        updateSecretTimeText(messageObject);
+                        currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
+                    } else if (messageObject.type == 3) { //video
+                        createDocumentLayout(0, messageObject);
+                        photoImage.setNeedsQualityThumb(true);
+                        photoImage.setShouldGenerateQualityThumb(true);
+                        photoImage.setParentMessageObject(messageObject);
+                    } else if (messageObject.type == 8) { //gif
+                        String str = AndroidUtilities.formatFileSize(messageObject.messageOwner.media.document.size);
+                        infoWidth = (int) Math.ceil(infoPaint.measureText(str));
+                        infoLayout = new StaticLayout(str, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+                        photoImage.setNeedsQualityThumb(true);
+                        photoImage.setShouldGenerateQualityThumb(true);
+                        photoImage.setParentMessageObject(messageObject);
+                    }
+
+                    if (messageObject.caption != null) {
+                        mediaBackground = false;
+                    }
+
+                    currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+
+                    int w = 0;
+                    int h = 0;
+
+                    if (currentPhotoObject != null && currentPhotoObject == currentPhotoObjectThumb) {
+                        currentPhotoObjectThumb = null;
+                    }
+
+                    if (currentPhotoObject != null) {
+                        float scale = (float) currentPhotoObject.w / (float) photoWidth;
+                        w = (int) (currentPhotoObject.w / scale);
+                        h = (int) (currentPhotoObject.h / scale);
+                        if (w == 0) {
+                            w = AndroidUtilities.dp(150);
+                        }
+                        if (h == 0) {
+                            h = AndroidUtilities.dp(150);
+                        }
+                        if (h > photoHeight) {
+                            float scale2 = h;
+                            h = photoHeight;
+                            scale2 /= h;
+                            w = (int) (w / scale2);
+                        } else if (h < AndroidUtilities.dp(120)) {
+                            h = AndroidUtilities.dp(120);
+                            float hScale = (float) currentPhotoObject.h / h;
+                            if (currentPhotoObject.w / hScale < photoWidth) {
+                                w = (int) (currentPhotoObject.w / hScale);
+                            }
+                        }
+                    }
+
+                    if ((w == 0 || h == 0) && messageObject.type == 8) {
+                        for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
+                            TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
+                            if (attribute instanceof TLRPC.TL_documentAttributeImageSize || attribute instanceof TLRPC.TL_documentAttributeVideo) {
+                                float scale = (float) attribute.w / (float) photoWidth;
+                                w = (int) (attribute.w / scale);
+                                h = (int) (attribute.h / scale);
+                                if (h > photoHeight) {
+                                    float scale2 = h;
+                                    h = photoHeight;
+                                    scale2 /= h;
+                                    w = (int) (w / scale2);
+                                } else if (h < AndroidUtilities.dp(120)) {
+                                    h = AndroidUtilities.dp(120);
+                                    float hScale = (float) attribute.h / h;
+                                    if (attribute.w / hScale < photoWidth) {
+                                        w = (int) (attribute.w / hScale);
+                                    }
+                                }
+                                break;
+                            }
+                        }
+                    }
+
+
+                    if (w == 0 || h == 0) {
+                        w = h = AndroidUtilities.dp(150);
+                    }
+                    if (messageObject.type == 3) {
+                        if (w < infoWidth + AndroidUtilities.dp(16 + 24)) {
+                            w = infoWidth + AndroidUtilities.dp(16 + 24);
+                        }
+                    }
+
+                    availableTimeWidth = maxPhotoWidth - AndroidUtilities.dp(14);
+                    measureTime(messageObject);
+                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (messageObject.isOutOwner() ? 20 : 0));
+                    if (w < timeWidthTotal) {
+                        w = timeWidthTotal;
+                    }
+
+                    if (messageObject.isSecretPhoto()) {
+                        if (AndroidUtilities.isTablet()) {
+                            w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
+                        } else {
+                            w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+                        }
+                    }
+
+                    photoWidth = w;
+                    photoHeight = h;
+                    backgroundWidth = w + AndroidUtilities.dp(12);
+                    if (!mediaBackground) {
+                        backgroundWidth += AndroidUtilities.dp(9);
+                    }
+                    if (messageObject.caption != null) {
+                        try {
+                            captionLayout = new StaticLayout(messageObject.caption, MessageObject.getTextPaint(), photoWidth - AndroidUtilities.dp(10), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                            if (captionLayout != null && captionLayout.getLineCount() > 0) {
+                                captionHeight = captionLayout.getHeight();
+                                additionHeight += captionHeight + AndroidUtilities.dp(9);
+                                float lastLineWidth = captionLayout.getLineWidth(captionLayout.getLineCount() - 1) + captionLayout.getLineLeft(captionLayout.getLineCount() - 1);
+                                if (photoWidth - AndroidUtilities.dp(8) - lastLineWidth < timeWidthTotal) {
+                                    additionHeight += AndroidUtilities.dp(14);
+                                }
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                    currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
+                    if (messageObject.photoThumbs != null && messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
+                        if (messageObject.isSecretPhoto()) {
+                            currentPhotoFilter += "_b2";
+                        } else {
+                            currentPhotoFilter += "_b";
+                        }
+                    }
+
+                    boolean noSize = false;
+                    if (messageObject.type == 3 || messageObject.type == 8) {
+                        noSize = true;
+                    }
+                    if (currentPhotoObject != null && !noSize && currentPhotoObject.size == 0) {
+                        currentPhotoObject.size = -1;
+                    }
+
+                    if (messageObject.type == 1) {
+                        if (currentPhotoObject != null) {
+                            boolean photoExist = true;
+                            String fileName = FileLoader.getAttachFileName(currentPhotoObject);
+                            if (messageObject.mediaExists) {
+                                MediaController.getInstance().removeLoadingFileObserver(this);
+                            } else {
+                                photoExist = false;
+                            }
+                            if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
+                                if (allowedToSetPhoto || ImageLoader.getInstance().getImageFromMemory(currentPhotoObject.location, null, currentPhotoFilter) != null) {
+                                    allowedToSetPhoto = true;
+                                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, noSize ? 0 : currentPhotoObject.size, null, false);
+                                } else if (currentPhotoObjectThumb != null) {
+                                    photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
+                                } else {
+                                    photoImage.setImageBitmap((Drawable) null);
+                                }
+                            } else {
+                                photoNotSet = true;
+                                if (currentPhotoObjectThumb != null) {
+                                    photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
+                                } else {
+                                    photoImage.setImageBitmap((Drawable) null);
+                                }
                             }
+                        } else {
+                            photoImage.setImageBitmap((BitmapDrawable) null);
+                        }
+                    } else if (messageObject.type == 8) {
+                        String fileName = FileLoader.getAttachFileName(messageObject.messageOwner.media.document);
+                        int localFile = 0;
+                        if (messageObject.attachPathExists) {
+                            MediaController.getInstance().removeLoadingFileObserver(this);
+                            localFile = 1;
+                        } else if (messageObject.mediaExists) {
+                            localFile = 2;
+                        }
+                        if (!messageObject.isSending() && (localFile != 0 || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) && MessageObject.isNewGifDocument(messageObject.messageOwner.media.document) || FileLoader.getInstance().isLoadingFile(fileName))) {
+                            if (localFile == 1) {
+                                photoImage.setImage(null, messageObject.isSendError() ? null : messageObject.messageOwner.attachPath, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
+                            } else {
+                                photoImage.setImage(messageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, messageObject.messageOwner.media.document.size, null, false);
+                            }
+                        } else {
+                            photoNotSet = true;
+                            photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
+                        }
+                    } else {
+                        photoImage.setImage(null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, 0, null, false);
+                    }
+                }
+                super.setMessageObject(messageObject);
+
+                if (drawForwardedName) {
+                    namesOffset += AndroidUtilities.dp(5);
+                } else if (drawNameLayout && messageObject.messageOwner.reply_to_msg_id == 0) {
+                    namesOffset += AndroidUtilities.dp(7);
+                }
+
+                invalidate();
+
+                photoImage.setImageCoords(0, AndroidUtilities.dp(7) + namesOffset, photoWidth, photoHeight);
+                totalHeight = photoHeight + AndroidUtilities.dp(14) + namesOffset + additionHeight;
+            }
+
+            botButtons.clear();
+            if (messageIdChanged) {
+                botButtonsByData.clear();
+            }
+            if (messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup) {
+                int rows = messageObject.messageOwner.reply_markup.rows.size();
+                substractBackgroundHeight = keyboardHeight = AndroidUtilities.dp(44 + 4) * rows + AndroidUtilities.dp(1);
+
+                widthForButtons = backgroundWidth;
+                boolean fullWidth = false;
+                if (messageObject.wantedBotKeyboardWidth > widthForButtons) {
+                    int maxButtonWidth = -AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 62 : 10);
+                    if (AndroidUtilities.isTablet()) {
+                        maxButtonWidth += AndroidUtilities.getMinTabletSide();
+                    } else {
+                        maxButtonWidth += Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
+                    }
+                    widthForButtons = Math.max(backgroundWidth, Math.min(messageObject.wantedBotKeyboardWidth, maxButtonWidth));
+                    fullWidth = true;
+                }
+
+                int maxButtonsWidth = 0;
+                for (int a = 0; a < rows; a++) {
+                    TLRPC.TL_keyboardButtonRow row = messageObject.messageOwner.reply_markup.rows.get(a);
+                    int buttonsCount = row.buttons.size();
+                    int buttonWidth = (widthForButtons - (AndroidUtilities.dp(5) * (buttonsCount - 1)) - AndroidUtilities.dp(!fullWidth && mediaBackground ? 0 : 9) - AndroidUtilities.dp(2)) / buttonsCount;
+                    for (int b = 0; b < row.buttons.size(); b++) {
+                        BotButton botButton = new BotButton();
+                        botButton.button = row.buttons.get(b);
+                        String key = Utilities.bytesToHex(botButton.button.data);
+                        BotButton oldButton = botButtonsByData.get(key);
+                        if (oldButton != null) {
+                            botButton.progressAlpha = oldButton.progressAlpha;
+                            botButton.angle = oldButton.angle;
+                            botButton.lastUpdateTime = oldButton.lastUpdateTime;
+                        } else {
+                            botButton.lastUpdateTime = System.currentTimeMillis();
+                        }
+                        botButtonsByData.put(key, botButton);
+                        botButton.x = b * (buttonWidth + AndroidUtilities.dp(5));
+                        botButton.y = a * AndroidUtilities.dp(44 + 4) + AndroidUtilities.dp(5);
+                        botButton.width = buttonWidth;
+                        botButton.height = AndroidUtilities.dp(44);
+                        CharSequence caption = Emoji.replaceEmoji(botButton.button.text, botButtonPaint.getFontMetricsInt(), AndroidUtilities.dp(15), false);
+                        caption = TextUtils.ellipsize(caption, botButtonPaint, buttonWidth - AndroidUtilities.dp(10), TextUtils.TruncateAt.END);
+                        botButton.caption = new StaticLayout(caption, botButtonPaint, buttonWidth - AndroidUtilities.dp(10), Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+                        botButtons.add(botButton);
+                        if (b == row.buttons.size() - 1) {
+                            maxButtonsWidth = Math.max(maxButtonsWidth, botButton.x + botButton.width);
                         }
                     }
-                    if (isSmallImage) {
-                        if (AndroidUtilities.dp(50) + additionalHeight > linkPreviewHeight) {
-                            totalHeight += AndroidUtilities.dp(50) + additionalHeight - linkPreviewHeight + AndroidUtilities.dp(8);
-                            linkPreviewHeight = AndroidUtilities.dp(50) + additionalHeight;
+                }
+                widthForButtons = maxButtonsWidth;
+            } else {
+                substractBackgroundHeight = 0;
+                keyboardHeight = 0;
+            }
+        }
+        updateWaveform();
+        updateButtonState(dataChanged);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), totalHeight + keyboardHeight);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        if (currentMessageObject.type == 0) {
+            textY = AndroidUtilities.dp(10) + namesOffset;
+        }
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO) {
+            if (currentMessageObject.isOutOwner()) {
+                seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(57);
+                buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(14);
+                timeAudioX = layoutWidth - backgroundWidth + AndroidUtilities.dp(67);
+            } else {
+                if (isChat && currentMessageObject.isFromUser()) {
+                    seekBarX = AndroidUtilities.dp(114);
+                    buttonX = AndroidUtilities.dp(71);
+                    timeAudioX = AndroidUtilities.dp(124);
+                } else {
+                    seekBarX = AndroidUtilities.dp(66);
+                    buttonX = AndroidUtilities.dp(23);
+                    timeAudioX = AndroidUtilities.dp(76);
+                }
+            }
+            if (hasLinkPreview) {
+                seekBarX += AndroidUtilities.dp(10);
+                buttonX += AndroidUtilities.dp(10);
+                timeAudioX += AndroidUtilities.dp(10);
+            }
+            seekBarWaveform.setSize(backgroundWidth - AndroidUtilities.dp(92 + (hasLinkPreview ? 10 : 0)), AndroidUtilities.dp(30));
+            seekBar.setSize(backgroundWidth - AndroidUtilities.dp(72 + (hasLinkPreview ? 10 : 0)), AndroidUtilities.dp(30));
+            seekBarY = AndroidUtilities.dp(13) + namesOffset + mediaOffsetY;
+            buttonY = AndroidUtilities.dp(13) + namesOffset + mediaOffsetY;
+            radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(44), buttonY + AndroidUtilities.dp(44));
+
+            updateAudioProgress();
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (currentMessageObject.isOutOwner()) {
+                seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(56);
+                buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(14);
+                timeAudioX = layoutWidth - backgroundWidth + AndroidUtilities.dp(67);
+            } else {
+                if (isChat && currentMessageObject.isFromUser()) {
+                    seekBarX = AndroidUtilities.dp(113);
+                    buttonX = AndroidUtilities.dp(71);
+                    timeAudioX = AndroidUtilities.dp(124);
+                } else {
+                    seekBarX = AndroidUtilities.dp(65);
+                    buttonX = AndroidUtilities.dp(23);
+                    timeAudioX = AndroidUtilities.dp(76);
+                }
+            }
+            if (hasLinkPreview) {
+                seekBarX += AndroidUtilities.dp(10);
+                buttonX += AndroidUtilities.dp(10);
+                timeAudioX += AndroidUtilities.dp(10);
+            }
+            seekBar.setSize(backgroundWidth - AndroidUtilities.dp(65 + (hasLinkPreview ? 10 : 0)), AndroidUtilities.dp(30));
+            seekBarY = AndroidUtilities.dp(29) + namesOffset + mediaOffsetY;
+            buttonY = AndroidUtilities.dp(13) + namesOffset + mediaOffsetY;
+            radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(44), buttonY + AndroidUtilities.dp(44));
+
+            updateAudioProgress();
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT && !drawPhotoImage) {
+            if (currentMessageObject.isOutOwner()) {
+                buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(14);
+            } else {
+                if (isChat && currentMessageObject.isFromUser()) {
+                    buttonX = AndroidUtilities.dp(71);
+                } else {
+                    buttonX = AndroidUtilities.dp(23);
+                }
+            }
+            if (hasLinkPreview) {
+                buttonX += AndroidUtilities.dp(10);
+            }
+            buttonY = AndroidUtilities.dp(13) + namesOffset + mediaOffsetY;
+            radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(44), buttonY + AndroidUtilities.dp(44));
+            photoImage.setImageCoords(buttonX - AndroidUtilities.dp(10), buttonY - AndroidUtilities.dp(10), photoImage.getImageWidth(), photoImage.getImageHeight());
+        } else if (currentMessageObject.type == 12) {
+            int x;
+
+            if (currentMessageObject.isOutOwner()) {
+                x = layoutWidth - backgroundWidth + AndroidUtilities.dp(14);
+            } else {
+                if (isChat && currentMessageObject.isFromUser()) {
+                    x = AndroidUtilities.dp(72);
+                } else {
+                    x = AndroidUtilities.dp(23);
+                }
+            }
+            photoImage.setImageCoords(x, AndroidUtilities.dp(13) + namesOffset, AndroidUtilities.dp(44), AndroidUtilities.dp(44));
+        } else {
+            int x;
+            if (currentMessageObject.isOutOwner()) {
+                if (mediaBackground) {
+                    x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+                } else {
+                    x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
+                }
+            } else {
+                if (isChat && currentMessageObject.isFromUser()) {
+                    x = AndroidUtilities.dp(63);
+                } else {
+                    x = AndroidUtilities.dp(15);
+                }
+            }
+            photoImage.setImageCoords(x, photoImage.getImageY(), photoImage.getImageWidth(), photoImage.getImageHeight());
+            buttonX = (int) (x + (photoImage.getImageWidth() - AndroidUtilities.dp(48)) / 2.0f);
+            buttonY = (int) (AndroidUtilities.dp(7) + (photoImage.getImageHeight() - AndroidUtilities.dp(48)) / 2.0f) + namesOffset;
+            radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
+            deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
+        }
+    }
+
+    @Override
+    protected void drawContent(Canvas canvas) {
+
+        if (needNewVisiblePart && currentMessageObject.type == 0) {
+            getLocalVisibleRect(scrollRect);
+            setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
+            needNewVisiblePart = false;
+        }
+
+        photoImage.setPressed(isDrawSelectedBackground());
+        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
+        radialProgress.setHideCurrentDrawable(false);
+        radialProgress.setProgressColor(Theme.MSG_MEDIA_PROGRESS_COLOR);
+
+        boolean imageDrawn = false;
+        if (currentMessageObject.type == 0 && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty()) {
+            if (currentMessageObject.isOutOwner()) {
+                textX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+            } else {
+                textX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(17);
+            }
+
+            textY = AndroidUtilities.dp(10) + namesOffset;
+
+            if (firstVisibleBlockNum >= 0) {
+                for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
+                    if (a >= currentMessageObject.textLayoutBlocks.size()) {
+                        break;
+                    }
+                    MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
+                    canvas.save();
+                    canvas.translate(textX - (int) Math.ceil(block.textXOffset), textY + block.textYOffset);
+                    if (pressedLink != null && a == linkBlockNum) {
+                        for (int b = 0; b < urlPath.size(); b++) {
+                            canvas.drawPath(urlPath.get(b), urlPaint);
+                        }
+                    }
+                    try {
+                        block.textLayout.draw(canvas);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    canvas.restore();
+                }
+            }
+
+            if (hasLinkPreview) {
+                int startY = textY + currentMessageObject.textHeight + AndroidUtilities.dp(8);
+                int linkX = textX + AndroidUtilities.dp(1);
+                int linkPreviewY = startY;
+                int smallImageStartY = 0;
+                replyLinePaint.setColor(currentMessageObject.isOutOwner() ? Theme.MSG_OUT_WEB_PREVIEW_LINE_COLOR : Theme.MSG_IN_WEB_PREVIEW_LINE_COLOR);
+
+                canvas.drawRect(linkX, linkPreviewY - AndroidUtilities.dp(3), linkX + AndroidUtilities.dp(2), linkPreviewY + linkPreviewHeight + AndroidUtilities.dp(3), replyLinePaint);
+
+                if (siteCaptionLayout != null) {
+                    replyNamePaint.setColor(currentMessageObject.isOutOwner() ? Theme.MSG_OUT_SITE_NAME_TEXT_COLOR : Theme.MSG_IN_SITE_NAME_TEXT_COLOR);
+                    canvas.save();
+                    canvas.translate(linkX + AndroidUtilities.dp(10), linkPreviewY - AndroidUtilities.dp(3));
+                    siteCaptionLayout.draw(canvas);
+                    canvas.restore();
+                    linkPreviewY += siteCaptionLayout.getLineBottom(siteCaptionLayout.getLineCount() - 1);
+                }
+
+                replyNamePaint.setColor(Theme.MSG_TEXT_COLOR);
+                replyTextPaint.setColor(Theme.MSG_TEXT_COLOR);
+                if (titleLayout != null) {
+                    if (linkPreviewY != startY) {
+                        linkPreviewY += AndroidUtilities.dp(2);
+                    }
+                    smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
+                    canvas.save();
+                    canvas.translate(linkX + AndroidUtilities.dp(10) + titleX, linkPreviewY - AndroidUtilities.dp(3));
+                    titleLayout.draw(canvas);
+                    canvas.restore();
+                    linkPreviewY += titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
+                }
+
+                if (authorLayout != null) {
+                    if (linkPreviewY != startY) {
+                        linkPreviewY += AndroidUtilities.dp(2);
+                    }
+                    if (smallImageStartY == 0) {
+                        smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
+                    }
+                    canvas.save();
+                    canvas.translate(linkX + AndroidUtilities.dp(10) + authorX, linkPreviewY - AndroidUtilities.dp(3));
+                    authorLayout.draw(canvas);
+                    canvas.restore();
+                    linkPreviewY += authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
+                }
+
+                if (descriptionLayout != null) {
+                    if (linkPreviewY != startY) {
+                        linkPreviewY += AndroidUtilities.dp(2);
+                    }
+                    if (smallImageStartY == 0) {
+                        smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
+                    }
+                    descriptionY = linkPreviewY - AndroidUtilities.dp(3);
+                    canvas.save();
+                    canvas.translate(linkX + AndroidUtilities.dp(10) + descriptionX, descriptionY);
+                    if (pressedLink != null && linkBlockNum == -10) {
+                        for (int b = 0; b < urlPath.size(); b++) {
+                            canvas.drawPath(urlPath.get(b), urlPaint);
                         }
-                        linkPreviewHeight -= AndroidUtilities.dp(8);
-                    } else {
-                        totalHeight += height + AndroidUtilities.dp(12);
-                        linkPreviewHeight += height;
                     }
+                    descriptionLayout.draw(canvas);
+                    canvas.restore();
+                    linkPreviewY += descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
+                }
 
-                    linkImageView.setImageCoords(0, 0, width, height);
-
-                    currentPhotoFilter = String.format(Locale.US, "%d_%d", width, height);
-                    currentPhotoFilterThumb = String.format(Locale.US, "%d_%d_b", width, height);
+                if (drawPhotoImage) {
+                    if (linkPreviewY != startY) {
+                        linkPreviewY += AndroidUtilities.dp(2);
+                    }
 
-                    if (isGifDocument) {
-                        boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToAttach(webPage.document);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        }
-                        String fileName = FileLoader.getAttachFileName(webPage.document);
-                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                            photoNotSet = false;
-                            linkImageView.setImage(webPage.document, null, currentPhotoObject.location, currentPhotoFilter, webPage.document.size, null, false);
-                        } else {
-                            photoNotSet = true;
-                            linkImageView.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
-                        }
+                    if (isSmallImage) {
+                        photoImage.setImageCoords(linkX + backgroundWidth - AndroidUtilities.dp(81), smallImageStartY, photoImage.getImageWidth(), photoImage.getImageHeight());
                     } else {
-                        boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToAttach(currentPhotoObject, true);
-                        if (!cacheFile.exists()) {
-                            photoExist = false;
-                        }
-                        String fileName = FileLoader.getAttachFileName(currentPhotoObject);
-                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
-                            photoNotSet = false;
-                            linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
-                        } else {
-                            photoNotSet = true;
-                            if (currentPhotoObjectThumb != null) {
-                                linkImageView.setImage(null, null, currentPhotoObjectThumb.location, String.format(Locale.US, "%d_%d_b", width, height), 0, null, false);
-                            } else {
-                                linkImageView.setImageBitmap((Drawable) null);
-                            }
+                        photoImage.setImageCoords(linkX + AndroidUtilities.dp(10), linkPreviewY, photoImage.getImageWidth(), photoImage.getImageHeight());
+                        if (drawImageButton) {
+                            int size = AndroidUtilities.dp(48);
+                            buttonX = (int) (photoImage.getImageX() + (photoImage.getImageWidth() - size) / 2.0f);
+                            buttonY = (int) (photoImage.getImageY() + (photoImage.getImageHeight() - size) / 2.0f);
+                            radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
                         }
                     }
-                    drawLinkImageView = true;
-
-                    if (webPage.site_name != null) {
-                        if (webPage.site_name.toLowerCase().equals("instagram") && webPage.type != null && webPage.type.equals("video")) {
-                            isInstagram = true;
-                            if (igvideoDrawable == null) {
-                                igvideoDrawable = getResources().getDrawable(R.drawable.igvideo);
-                            }
-                        }
+                    imageDrawn = photoImage.draw(canvas);
+
+                    if (durationLayout != null) {
+                        int x = photoImage.getImageX() + photoImage.getImageWidth() - AndroidUtilities.dp(8) - durationWidth;
+                        int y = photoImage.getImageY() + photoImage.getImageHeight() - AndroidUtilities.dp(19);
+                        Theme.timeBackgroundDrawable.setBounds(x - AndroidUtilities.dp(4), y - AndroidUtilities.dp(1.5f), x + durationWidth + AndroidUtilities.dp(4), y + AndroidUtilities.dp(14.5f));
+                        Theme.timeBackgroundDrawable.draw(canvas);
+
+                        canvas.save();
+                        canvas.translate(x, y);
+                        durationLayout.draw(canvas);
+                        canvas.restore();
                     }
+                }
+            }
+            drawTime = true;
+        } else if (drawPhotoImage) {
+            imageDrawn = photoImage.draw(canvas);
+            drawTime = photoImage.getVisible();
+        }
 
-                    if (webPage.type != null && webPage.type.equals("video") && webPage.duration != 0) {
-                        if (durationPaint == null) {
-                            durationPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-                            durationPaint.setTextSize(AndroidUtilities.dp(12));
-                            durationPaint.setColor(0xffffffff);
-                        }
-                        int minutes = webPage.duration / 60;
-                        int seconds = webPage.duration - minutes * 60;
-                        String str = String.format("%d:%02d", minutes, seconds);
-                        durationWidth = (int) Math.ceil(durationPaint.measureText(str));
-                        durationLayout = new StaticLayout(str, durationPaint, durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-                    }
+        if (buttonState == -1 && currentMessageObject.isSecretPhoto()) {
+            int drawable = 4;
+            if (currentMessageObject.messageOwner.destroyTime != 0) {
+                if (currentMessageObject.isOutOwner()) {
+                    drawable = 6;
                 } else {
-                    linkImageView.setImageBitmap((Drawable) null);
-                    linkPreviewHeight -= AndroidUtilities.dp(6);
-                    totalHeight += AndroidUtilities.dp(4);
+                    drawable = 5;
+                }
+            }
+            setDrawableBounds(Theme.photoStatesDrawables[drawable][buttonPressed], buttonX, buttonY);
+            Theme.photoStatesDrawables[drawable][buttonPressed].setAlpha((int) (255 * (1.0f - radialProgress.getAlpha())));
+            Theme.photoStatesDrawables[drawable][buttonPressed].draw(canvas);
+            if (!currentMessageObject.isOutOwner() && currentMessageObject.messageOwner.destroyTime != 0) {
+                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+                float progress = Math.max(0, (long) currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
+                canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
+                if (progress != 0) {
+                    int offset = AndroidUtilities.dp(2);
+                    invalidate((int) deleteProgressRect.left - offset, (int) deleteProgressRect.top - offset, (int) deleteProgressRect.right + offset * 2, (int) deleteProgressRect.bottom + offset * 2);
                 }
+                updateSecretTimeText(currentMessageObject);
+            }
+        }
+
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (currentMessageObject.isOutOwner()) {
+                audioTitlePaint.setColor(Theme.MSG_OUT_AUDIO_TITLE_TEXT_COLOR);
+                audioPerformerPaint.setColor(Theme.MSG_OUT_AUDIO_PERFORMER_TEXT_COLOR);
+                audioTimePaint.setColor(Theme.MSG_OUT_AUDIO_DURATION_TEXT_COLOR);
+                radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_OUT_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_OUT_AUDIO_PROGRESS_COLOR);
             } else {
-                linkImageView.setImageBitmap((Drawable) null);
+                audioTitlePaint.setColor(Theme.MSG_IN_AUDIO_TITLE_TEXT_COLOR);
+                audioPerformerPaint.setColor(Theme.MSG_IN_AUDIO_PERFORMER_TEXT_COLOR);
+                audioTimePaint.setColor(Theme.MSG_IN_AUDIO_DURATION_TEXT_COLOR);
+                radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_IN_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_IN_AUDIO_PROGRESS_COLOR);
             }
+            radialProgress.draw(canvas);
 
-            if (hasLinkPreview || maxWidth - messageObject.lastLineWidth < timeMore) {
-                totalHeight += AndroidUtilities.dp(14);
-                backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(29);
-                backgroundWidth = Math.max(backgroundWidth, timeWidth + AndroidUtilities.dp(29));
+            canvas.save();
+            canvas.translate(timeAudioX + songX, AndroidUtilities.dp(13) + namesOffset + mediaOffsetY);
+            songLayout.draw(canvas);
+            canvas.restore();
+
+            canvas.save();
+            if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+                canvas.translate(seekBarX, seekBarY);
+                seekBar.draw(canvas);
             } else {
-                int diff = maxChildWidth - messageObject.lastLineWidth;
-                if (diff >= 0 && diff <= timeMore) {
-                    backgroundWidth = maxChildWidth + timeMore - diff + AndroidUtilities.dp(29);
-                } else {
-                    backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(29);
-                }
+                canvas.translate(timeAudioX + performerX, AndroidUtilities.dp(35) + namesOffset + mediaOffsetY);
+                performerLayout.draw(canvas);
             }
-        }
-        updateButtonState(dataChanged);
-    }
+            canvas.restore();
 
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), totalHeight);
-    }
+            canvas.save();
+            canvas.translate(timeAudioX, AndroidUtilities.dp(57) + namesOffset + mediaOffsetY);
+            timeLayout.draw(canvas);
+            canvas.restore();
 
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
+            Drawable menuDrawable;
+            if (currentMessageObject.isOutOwner()) {
+                menuDrawable = Theme.docMenuDrawable[1];
+            } else {
+                menuDrawable = Theme.docMenuDrawable[isDrawSelectedBackground() ? 2 : 0];
+            }
+            setDrawableBounds(menuDrawable, otherX = buttonX + backgroundWidth - AndroidUtilities.dp(currentMessageObject.type == 0 ? 58 : 48), otherY = buttonY - AndroidUtilities.dp(5));
+            menuDrawable.draw(canvas);
+        } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO) {
+            if (currentMessageObject.isOutOwner()) {
+                audioTimePaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_AUDIO_DURATION_SELECTED_TEXT_COLOR : Theme.MSG_OUT_AUDIO_DURATION_TEXT_COLOR);
+                radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_OUT_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_OUT_AUDIO_PROGRESS_COLOR);
+            } else {
+                audioTimePaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_AUDIO_DURATION_SELECTED_TEXT_COLOR : Theme.MSG_IN_AUDIO_DURATION_TEXT_COLOR);
+                radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_IN_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_IN_AUDIO_PROGRESS_COLOR);
+            }
+            radialProgress.draw(canvas);
 
-        if (currentMessageObject.isOutOwner()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        } else {
-            textX = AndroidUtilities.dp(19) + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        }
-    }
+            canvas.save();
+            if (useSeekBarWaweform) {
+                canvas.translate(seekBarX + AndroidUtilities.dp(13), seekBarY);
+                seekBarWaveform.draw(canvas);
+            } else {
+                canvas.translate(seekBarX, seekBarY);
+                seekBar.draw(canvas);
+            }
+            canvas.restore();
 
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-        if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null || currentMessageObject.textLayoutBlocks.isEmpty()) {
-            return;
-        }
+            canvas.save();
+            canvas.translate(timeAudioX, AndroidUtilities.dp(44) + namesOffset + mediaOffsetY);
+            timeLayout.draw(canvas);
+            canvas.restore();
 
-        if (currentMessageObject.isOutOwner()) {
-            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
-            textY = AndroidUtilities.dp(10) + namesOffset;
-        } else {
-            textX = AndroidUtilities.dp(19) + (isChat && currentMessageObject.isFromUser() ? AndroidUtilities.dp(52) : 0);
-            textY = AndroidUtilities.dp(10) + namesOffset;
+            if (currentMessageObject.type != 0 && currentMessageObject.messageOwner.to_id.channel_id == 0 && currentMessageObject.isContentUnread()) {
+                docBackPaint.setColor(currentMessageObject.isOutOwner() ? Theme.MSG_OUT_VOICE_SEEKBAR_FILL_COLOR : Theme.MSG_IN_VOICE_SEEKBAR_FILL_COLOR);
+                canvas.drawCircle(timeAudioX + timeWidthAudio + AndroidUtilities.dp(6), AndroidUtilities.dp(51) + namesOffset + mediaOffsetY, AndroidUtilities.dp(3), docBackPaint);
+            }
         }
+        if (currentMessageObject.type == 1 || documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                setDrawableBounds(Theme.docMenuDrawable[3], otherX = photoImage.getImageX() + photoImage.getImageWidth() - AndroidUtilities.dp(14), otherY = photoImage.getImageY() + AndroidUtilities.dp(8.1f));
+                Theme.docMenuDrawable[3].draw(canvas);
+            }
 
-        if (firstVisibleBlockNum >= 0) {
-            for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
-                if (a >= currentMessageObject.textLayoutBlocks.size()) {
-                    break;
-                }
-                MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
+            if (captionLayout != null) {
                 canvas.save();
-                canvas.translate(textX - (int) Math.ceil(block.textXOffset), textY + block.textYOffset);
-                if (pressedLink != null && a == linkBlockNum) {
-                    canvas.drawPath(urlPath, urlPaint);
+                canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoImage.getImageHeight() + AndroidUtilities.dp(6));
+                if (pressedLink != null) {
+                    for (int b = 0; b < urlPath.size(); b++) {
+                        canvas.drawPath(urlPath.get(b), urlPaint);
+                    }
                 }
                 try {
-                    block.textLayout.draw(canvas);
+                    captionLayout.draw(canvas);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
                 canvas.restore();
             }
-        }
-
-        if (hasLinkPreview) {
-            int startY = textY + currentMessageObject.textHeight + AndroidUtilities.dp(8);
-            int linkPreviewY = startY;
-            int smallImageStartY = 0;
-            replyLinePaint.setColor(currentMessageObject.isOutOwner() ? 0xff8dc97a : 0xff6c9fd2);
+            if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
+                infoPaint.setColor(Theme.MSG_MEDIA_INFO_TEXT_COLOR);
+                setDrawableBounds(Theme.timeBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8), AndroidUtilities.dp(16.5f));
+                Theme.timeBackgroundDrawable.draw(canvas);
 
-            canvas.drawRect(textX, linkPreviewY - AndroidUtilities.dp(3), textX + AndroidUtilities.dp(2), linkPreviewY + linkPreviewHeight + AndroidUtilities.dp(3), replyLinePaint);
-
-            if (siteNameLayout != null) {
-                replyNamePaint.setColor(currentMessageObject.isOutOwner() ? 0xff70b15c : 0xff4b91cf);
                 canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10), linkPreviewY - AndroidUtilities.dp(3));
-                siteNameLayout.draw(canvas);
+                canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dp(5.5f));
+                infoLayout.draw(canvas);
                 canvas.restore();
-                linkPreviewY += siteNameLayout.getLineBottom(siteNameLayout.getLineCount() - 1);
             }
-
-            if (titleLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
+        } else if (currentMessageObject.type == 4) {
+            if (captionLayout != null) {
+                if (currentMessageObject.isOutOwner()) {
+                    locationTitlePaint.setColor(Theme.MSG_OUT_VENUE_NAME_TEXT_COLOR);
+                    locationAddressPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_VENUE_INFO_SELECTED_TEXT_COLOR : Theme.MSG_OUT_VENUE_INFO_TEXT_COLOR);
+                } else {
+                    locationTitlePaint.setColor(Theme.MSG_IN_VENUE_NAME_TEXT_COLOR);
+                    locationAddressPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_VENUE_INFO_SELECTED_TEXT_COLOR : Theme.MSG_IN_VENUE_INFO_TEXT_COLOR);
                 }
-                replyNamePaint.setColor(0xff000000);
-                smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
+
                 canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + titleX, linkPreviewY - AndroidUtilities.dp(3));
-                titleLayout.draw(canvas);
+                canvas.translate(nameOffsetX + photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(8));
+                captionLayout.draw(canvas);
                 canvas.restore();
-                linkPreviewY += titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
-            }
 
-            if (authorLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
+                if (infoLayout != null) {
+                    canvas.save();
+                    canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + captionLayout.getLineBottom(captionLayout.getLineCount() - 1) + AndroidUtilities.dp(13));
+                    infoLayout.draw(canvas);
+                    canvas.restore();
                 }
-                if (smallImageStartY == 0) {
-                    smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
+            }
+        } else if (currentMessageObject.type == 8) {
+            if (captionLayout != null) {
+                canvas.save();
+                canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoImage.getImageHeight() + AndroidUtilities.dp(6));
+                if (pressedLink != null) {
+                    for (int b = 0; b < urlPath.size(); b++) {
+                        canvas.drawPath(urlPath.get(b), urlPaint);
+                    }
+                }
+                try {
+                    captionLayout.draw(canvas);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-                replyNamePaint.setColor(0xff000000);
+                canvas.restore();
+            }
+        } else if (currentMessageObject.type == 12) {
+            contactNamePaint.setColor(currentMessageObject.isOutOwner() ? Theme.MSG_OUT_CONTACT_NAME_TEXT_COLOR : Theme.MSG_IN_CONTACT_NAME_TEXT_COLOR);
+            contactPhonePaint.setColor(currentMessageObject.isOutOwner() ? Theme.MSG_OUT_CONTACT_PHONE_TEXT_COLOR : Theme.MSG_IN_CONTACT_PHONE_TEXT_COLOR);
+            if (titleLayout != null) {
                 canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + authorX, linkPreviewY - AndroidUtilities.dp(3));
-                authorLayout.draw(canvas);
+                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(16) + namesOffset);
+                titleLayout.draw(canvas);
                 canvas.restore();
-                linkPreviewY += authorLayout.getLineBottom(authorLayout.getLineCount() - 1);
             }
-
-            if (descriptionLayout != null) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
-                }
-                if (smallImageStartY == 0) {
-                    smallImageStartY = linkPreviewY - AndroidUtilities.dp(1);
-                }
-                replyTextPaint.setColor(0xff000000);
-                descriptionY = linkPreviewY - AndroidUtilities.dp(3);
+            if (captionLayout != null) {
                 canvas.save();
-                canvas.translate(textX + AndroidUtilities.dp(10) + descriptionX, descriptionY);
-                if (pressedLink != null && linkBlockNum == -10) {
-                    canvas.drawPath(urlPath, urlPaint);
-                }
-                descriptionLayout.draw(canvas);
+                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(39) + namesOffset);
+                captionLayout.draw(canvas);
                 canvas.restore();
-                linkPreviewY += descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1);
             }
 
-            if (drawLinkImageView) {
-                if (linkPreviewY != startY) {
-                    linkPreviewY += AndroidUtilities.dp(2);
+            Drawable menuDrawable;
+            if (currentMessageObject.isOutOwner()) {
+                menuDrawable = Theme.docMenuDrawable[1];
+            } else {
+                menuDrawable = Theme.docMenuDrawable[isDrawSelectedBackground() ? 2 : 0];
+            }
+            setDrawableBounds(menuDrawable, otherX = photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(48), otherY = photoImage.getImageY() - AndroidUtilities.dp(5));
+            menuDrawable.draw(canvas);
+        }
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+            Drawable menuDrawable;
+            if (currentMessageObject.isOutOwner()) {
+                docNamePaint.setColor(Theme.MSG_OUT_FILE_NAME_TEXT_COLOR);
+                infoPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_FILE_INFO_SELECTED_TEXT_COLOR : Theme.MSG_OUT_FILE_INFO_TEXT_COLOR);
+                docBackPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_OUT_FILE_BACKGROUND_SELECTED_COLOR : Theme.MSG_OUT_FILE_BACKGROUND_COLOR);
+                menuDrawable = Theme.docMenuDrawable[1];
+            } else {
+                docNamePaint.setColor(Theme.MSG_IN_FILE_NAME_TEXT_COLOR);
+                infoPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_FILE_INFO_SELECTED_TEXT_COLOR : Theme.MSG_IN_FILE_INFO_TEXT_COLOR);
+                docBackPaint.setColor(isDrawSelectedBackground() ? Theme.MSG_IN_FILE_BACKGROUND_SELECTED_COLOR : Theme.MSG_IN_FILE_BACKGROUND_COLOR);
+                menuDrawable = Theme.docMenuDrawable[isDrawSelectedBackground() ? 2 : 0];
+            }
+
+            int x;
+            int titleY;
+            int subtitleY;
+            if (drawPhotoImage) {
+                if (currentMessageObject.type == 0) {
+                    setDrawableBounds(menuDrawable, otherX = photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(56), otherY = photoImage.getImageY() + AndroidUtilities.dp(1));
+                } else {
+                    setDrawableBounds(menuDrawable, otherX = photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(40), otherY = photoImage.getImageY() + AndroidUtilities.dp(1));
+                }
+
+                x = photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10);
+                titleY = photoImage.getImageY() + AndroidUtilities.dp(8);
+                subtitleY = photoImage.getImageY() + captionLayout.getLineBottom(captionLayout.getLineCount() - 1) + AndroidUtilities.dp(13);
+                if (buttonState >= 0 && buttonState < 4) {
+                    if (!imageDrawn) {
+                        int image = buttonState;
+                        if (buttonState == 0) {
+                            image = currentMessageObject.isOutOwner() ? 7 : 10;
+                        } else if (buttonState == 1) {
+                            image = currentMessageObject.isOutOwner() ? 8 : 11;
+                        }
+                        radialProgress.swapBackground(Theme.photoStatesDrawables[image][isDrawSelectedBackground() || buttonPressed != 0 ? 1 : 0]);
+                    } else {
+                        radialProgress.swapBackground(Theme.photoStatesDrawables[buttonState][buttonPressed]);
+                    }
                 }
 
-                if (isSmallImage) {
-                    linkImageView.setImageCoords(textX + backgroundWidth - AndroidUtilities.dp(77), smallImageStartY, linkImageView.getImageWidth(), linkImageView.getImageHeight());
+                if (!imageDrawn) {
+                    rect.set(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight());
+                    canvas.drawRoundRect(rect, AndroidUtilities.dp(3), AndroidUtilities.dp(3), docBackPaint);
+                    if (currentMessageObject.isOutOwner()) {
+                        radialProgress.setProgressColor(isDrawSelectedBackground() ? Theme.MSG_OUT_FILE_PROGRESS_SELECTED_COLOR : Theme.MSG_OUT_FILE_PROGRESS_COLOR);
+                    } else {
+                        radialProgress.setProgressColor(isDrawSelectedBackground() ? Theme.MSG_IN_FILE_PROGRESS_SELECTED_COLOR : Theme.MSG_IN_FILE_PROGRESS_COLOR);
+                    }
                 } else {
-                    linkImageView.setImageCoords(textX + AndroidUtilities.dp(10), linkPreviewY, linkImageView.getImageWidth(), linkImageView.getImageHeight());
-                    if (drawImageButton) {
-                        int size = AndroidUtilities.dp(48);
-                        buttonX = (int) (linkImageView.getImageX() + (linkImageView.getImageWidth() - size) / 2.0f);
-                        buttonY = (int) (linkImageView.getImageY() + (linkImageView.getImageHeight() - size) / 2.0f);
-                        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
+                    if (buttonState == -1) {
+                        radialProgress.setHideCurrentDrawable(true);
                     }
+                    radialProgress.setProgressColor(Theme.MSG_MEDIA_PROGRESS_COLOR);
                 }
-                linkImageView.draw(canvas);
-                if (drawImageButton) {
-                    radialProgress.draw(canvas);
+            } else {
+                setDrawableBounds(menuDrawable, otherX = buttonX + backgroundWidth - AndroidUtilities.dp(currentMessageObject.type == 0 ? 58 : 48), otherY = buttonY - AndroidUtilities.dp(5));
+                x = buttonX + AndroidUtilities.dp(53);
+                titleY = buttonY + AndroidUtilities.dp(4);
+                subtitleY = buttonY + AndroidUtilities.dp(27);
+                if (currentMessageObject.isOutOwner()) {
+                    radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_OUT_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_OUT_AUDIO_PROGRESS_COLOR);
+                } else {
+                    radialProgress.setProgressColor(isDrawSelectedBackground() || buttonPressed != 0 ? Theme.MSG_IN_AUDIO_SELECTED_PROGRESS_COLOR : Theme.MSG_IN_AUDIO_PROGRESS_COLOR);
                 }
+            }
+            menuDrawable.draw(canvas);
 
-                if (isInstagram && igvideoDrawable != null) {
-                    int x = linkImageView.getImageX() + linkImageView.getImageWidth() - igvideoDrawable.getIntrinsicWidth() - AndroidUtilities.dp(4);
-                    int y = linkImageView.getImageY() + AndroidUtilities.dp(4);
-                    igvideoDrawable.setBounds(x, y, x + igvideoDrawable.getIntrinsicWidth(), y + igvideoDrawable.getIntrinsicHeight());
-                    igvideoDrawable.draw(canvas);
+            try {
+                if (captionLayout != null) {
+                    canvas.save();
+                    canvas.translate(x + nameOffsetX, titleY);
+                    captionLayout.draw(canvas);
+                    canvas.restore();
                 }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
 
-                if (durationLayout != null) {
-                    int x = linkImageView.getImageX() + linkImageView.getImageWidth() - AndroidUtilities.dp(8) - durationWidth;
-                    int y = linkImageView.getImageY() + linkImageView.getImageHeight() - AndroidUtilities.dp(19);
-                    ResourceLoader.mediaBackgroundDrawable.setBounds(x - AndroidUtilities.dp(4), y - AndroidUtilities.dp(1.5f), x + durationWidth + AndroidUtilities.dp(4), y + AndroidUtilities.dp(14.5f));
-                    ResourceLoader.mediaBackgroundDrawable.draw(canvas);
-
+            try {
+                if (infoLayout != null) {
                     canvas.save();
-                    canvas.translate(x, y);
-                    durationLayout.draw(canvas);
+                    canvas.translate(x, subtitleY);
+                    infoLayout.draw(canvas);
                     canvas.restore();
                 }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        if (drawImageButton) {
+            radialProgress.draw(canvas);
+        }
+
+        if (!botButtons.isEmpty()) {
+            int addX;
+            if (currentMessageObject.isOutOwner()) {
+                addX = getMeasuredWidth() - widthForButtons - AndroidUtilities.dp(10);
+            } else {
+                addX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(mediaBackground ? 1 : 7);
+            }
+            for (int a = 0; a < botButtons.size(); a++) {
+                BotButton button = botButtons.get(a);
+                int y = button.y + layoutHeight - AndroidUtilities.dp(2);
+                Theme.systemDrawable.setColorFilter(a == pressedBotButton ? Theme.colorPressedFilter : Theme.colorFilter);
+                Theme.systemDrawable.setBounds(button.x + addX, y, button.x + addX + button.width, y + button.height);
+                Theme.systemDrawable.draw(canvas);
+                canvas.save();
+                canvas.translate(button.x + addX + AndroidUtilities.dp(5), y + (AndroidUtilities.dp(44) - button.caption.getLineBottom(button.caption.getLineCount() - 1)) / 2);
+                button.caption.draw(canvas);
+                canvas.restore();
+                if (button.button instanceof TLRPC.TL_keyboardButtonUrl) {
+                    int x = button.x + button.width - AndroidUtilities.dp(3) - Theme.botLink.getIntrinsicWidth() + addX;
+                    setDrawableBounds(Theme.botLink, x, y + AndroidUtilities.dp(3));
+                    Theme.botLink.draw(canvas);
+                } else if (button.button instanceof TLRPC.TL_keyboardButtonSwitchInline) {
+                    int x = button.x + button.width - AndroidUtilities.dp(3) - Theme.botInline.getIntrinsicWidth() + addX;
+                    setDrawableBounds(Theme.botInline, x, y + AndroidUtilities.dp(3));
+                    Theme.botInline.draw(canvas);
+                } else if (button.button instanceof TLRPC.TL_keyboardButtonCallback || button.button instanceof TLRPC.TL_keyboardButtonRequestGeoLocation) {
+                    boolean drawProgress = button.button instanceof TLRPC.TL_keyboardButtonCallback && SendMessagesHelper.getInstance().isSendingCallback(currentMessageObject, button.button) ||
+                            button.button instanceof TLRPC.TL_keyboardButtonRequestGeoLocation && SendMessagesHelper.getInstance().isSendingCurrentLocation(currentMessageObject, button.button);
+                    if (drawProgress || !drawProgress && button.progressAlpha != 0) {
+                        botProgressPaint.setAlpha(Math.min(255, (int) (button.progressAlpha * 255)));
+                        int x = button.x + button.width - AndroidUtilities.dp(9 + 3) + addX;
+                        rect.set(x, y + AndroidUtilities.dp(4), x + AndroidUtilities.dp(8), y + AndroidUtilities.dp(8 + 4));
+                        canvas.drawArc(rect, button.angle, 220, false, botProgressPaint);
+                        invalidate((int) rect.left - AndroidUtilities.dp(2), (int) rect.top - AndroidUtilities.dp(2), (int) rect.right + AndroidUtilities.dp(2), (int) rect.bottom + AndroidUtilities.dp(2));
+                        long newTime = System.currentTimeMillis();
+                        if (Math.abs(button.lastUpdateTime - System.currentTimeMillis()) < 1000) {
+                            long delta = (newTime - button.lastUpdateTime);
+                            float dt = 360 * delta / 2000.0f;
+                            button.angle += dt;
+                            button.angle -= 360 * (button.angle / 360);
+                            if (drawProgress) {
+                                if (button.progressAlpha < 1.0f) {
+                                    button.progressAlpha += delta / 200.0f;
+                                    if (button.progressAlpha > 1.0f) {
+                                        button.progressAlpha = 1.0f;
+                                    }
+                                }
+                            } else {
+                                if (button.progressAlpha > 0.0f) {
+                                    button.progressAlpha -= delta / 200.0f;
+                                    if (button.progressAlpha < 0.0f) {
+                                        button.progressAlpha = 0.0f;
+                                    }
+                                }
+                            }
+                        }
+                        button.lastUpdateTime = newTime;
+                    }
+                }
             }
         }
     }
 
     private Drawable getDrawableForCurrentState() {
-        if (buttonState >= 0 && buttonState < 4) {
-            if (buttonState == 1) {
-                return ResourceLoader.buttonStatesDrawables[4];
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (buttonState == -1) {
+                return null;
+            }
+            radialProgress.setAlphaForPrevious(false);
+            return Theme.fileStatesDrawable[currentMessageObject.isOutOwner() ? buttonState : buttonState + 5][isDrawSelectedBackground() || buttonPressed != 0 ? 1 : 0];
+        } else {
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT && !drawPhotoImage) {
+                radialProgress.setAlphaForPrevious(false);
+                if (buttonState == -1) {
+                    return Theme.fileStatesDrawable[currentMessageObject.isOutOwner() ? 3 : 8][isDrawSelectedBackground() ? 1 : 0];
+                } else if (buttonState == 0) {
+                    return Theme.fileStatesDrawable[currentMessageObject.isOutOwner() ? 2 : 7][isDrawSelectedBackground() ? 1 : 0];
+                } else if (buttonState == 1) {
+                    return Theme.fileStatesDrawable[currentMessageObject.isOutOwner() ? 4 : 9][isDrawSelectedBackground() ? 1 : 0];
+                }
             } else {
-                return ResourceLoader.buttonStatesDrawables[buttonState];
+                radialProgress.setAlphaForPrevious(true);
+                if (buttonState >= 0 && buttonState < 4) {
+                    if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                        int image = buttonState;
+                        if (buttonState == 0) {
+                            image = currentMessageObject.isOutOwner() ? 7 : 10;
+                        } else if (buttonState == 1) {
+                            image = currentMessageObject.isOutOwner() ? 8 : 11;
+                        }
+                        return Theme.photoStatesDrawables[image][isDrawSelectedBackground() || buttonPressed != 0 ? 1 : 0];
+                    } else {
+                        return Theme.photoStatesDrawables[buttonState][buttonPressed];
+                    }
+                } else if (buttonState == -1 && documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                    return Theme.photoStatesDrawables[currentMessageObject.isOutOwner() ? 9 : 12][isDrawSelectedBackground() ? 1 : 0];
+                }
             }
         }
         return null;
     }
 
-    public void updateButtonState(boolean animated) {
-        if (currentPhotoObject == null || !drawImageButton) {
-            return;
+    @Override
+    protected int getMaxNameWidth() {
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER) {
+            int maxWidth;
+            if (AndroidUtilities.isTablet()) {
+                if (isChat && !currentMessageObject.isOutOwner() && currentMessageObject.isFromUser()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(42);
+                } else {
+                    maxWidth = AndroidUtilities.getMinTabletSide();
+                }
+            } else {
+                if (isChat && !currentMessageObject.isOutOwner() && currentMessageObject.isFromUser()) {
+                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(42);
+                } else {
+                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
+                }
+            }
+            return maxWidth - backgroundWidth - AndroidUtilities.dp(57);
         }
-        String fileName;
-        File cacheFile;
+        return super.getMaxNameWidth();
+    }
 
-        if (isGifDocument) {
-            fileName = FileLoader.getAttachFileName(currentMessageObject.messageOwner.media.webpage.document);
-            cacheFile = FileLoader.getPathToAttach(currentMessageObject.messageOwner.media.webpage.document);
-        } else {
+    public void updateButtonState(boolean animated) {
+        String fileName = null;
+        boolean fileExists = false;
+        if (currentMessageObject.type == 1) {
+            if (currentPhotoObject == null) {
+                return;
+            }
+            fileName = FileLoader.getAttachFileName(currentPhotoObject);
+            fileExists = currentMessageObject.mediaExists;
+        } else if (currentMessageObject.type == 8 || documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO || currentMessageObject.type == 9 || documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (currentMessageObject.attachPathExists) {
+                fileName = currentMessageObject.messageOwner.attachPath;
+                fileExists = true;
+            } else if (!currentMessageObject.isSendError() || documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+                fileName = currentMessageObject.getFileName();
+                fileExists = currentMessageObject.mediaExists;
+            }
+        } else if (documentAttachType != DOCUMENT_ATTACH_TYPE_NONE) {
+            fileName = FileLoader.getAttachFileName(documentAttach);
+            fileExists = currentMessageObject.mediaExists;
+        } else if (currentPhotoObject != null) {
             fileName = FileLoader.getAttachFileName(currentPhotoObject);
-            cacheFile = FileLoader.getPathToAttach(currentPhotoObject, true);
+            fileExists = currentMessageObject.mediaExists;
         }
-        if (fileName == null) {
+        if (fileName == null || fileName.length() == 0) {
             radialProgress.setBackground(null, false, false);
             return;
         }
-        if (!cacheFile.exists()) {
-            MediaController.getInstance().addLoadingFileObserver(fileName, this);
-            float setProgress = 0;
-            boolean progressVisible = false;
-            if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                if (!cancelLoading &&
-                    (!isGifDocument && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) ||
-                    isGifDocument && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF)) ) {
+        boolean fromBot = currentMessageObject.messageOwner.params != null && currentMessageObject.messageOwner.params.containsKey("query_id");
+
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (currentMessageObject.isOut() && currentMessageObject.isSending() || currentMessageObject.isSendError() && fromBot) {
+                MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, currentMessageObject, this);
+                buttonState = 4;
+                radialProgress.setBackground(getDrawableForCurrentState(), !fromBot, animated);
+                if (!fromBot) {
+                    Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
+                    if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
+                        progress = 1.0f;
+                    }
+                    radialProgress.setProgress(progress != null ? progress : 0, false);
+                } else {
+                    radialProgress.setProgress(0, false);
+                }
+            } else {
+                if (fileExists) {
+                    MediaController.getInstance().removeLoadingFileObserver(this);
+                    boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
+                    if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
+                        buttonState = 0;
+                    } else {
+                        buttonState = 1;
+                    }
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                } else {
+                    MediaController.getInstance().addLoadingFileObserver(fileName, currentMessageObject, this);
+                    if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                        buttonState = 2;
+                        radialProgress.setProgress(0, animated);
+                        radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                    } else {
+                        buttonState = 4;
+                        Float progress = ImageLoader.getInstance().getFileProgress(fileName);
+                        if (progress != null) {
+                            radialProgress.setProgress(progress, animated);
+                        } else {
+                            radialProgress.setProgress(0, animated);
+                        }
+                        radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
+                    }
+                }
+            }
+            updateAudioProgress();
+        } else if (currentMessageObject.type == 0 && documentAttachType != DOCUMENT_ATTACH_TYPE_DOCUMENT && documentAttachType != DOCUMENT_ATTACH_TYPE_VIDEO) {
+            if (currentPhotoObject == null || !drawImageButton) {
+                return;
+            }
+            if (!fileExists) {
+                MediaController.getInstance().addLoadingFileObserver(fileName, currentMessageObject, this);
+                float setProgress = 0;
+                boolean progressVisible = false;
+                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                    if (!cancelLoading &&
+                            (documentAttachType == 0 && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) ||
+                                    documentAttachType == DOCUMENT_ATTACH_TYPE_GIF && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF))) {
+                        progressVisible = true;
+                        buttonState = 1;
+                    } else {
+                        buttonState = 0;
+                    }
+                } else {
                     progressVisible = true;
                     buttonState = 1;
-                } else {
-                    buttonState = 0;
+                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
+                    setProgress = progress != null ? progress : 0;
                 }
+                radialProgress.setProgress(setProgress, false);
+                radialProgress.setBackground(getDrawableForCurrentState(), progressVisible, animated);
+                invalidate();
             } else {
-                progressVisible = true;
-                buttonState = 1;
-                Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                setProgress = progress != null ? progress : 0;
+                MediaController.getInstance().removeLoadingFileObserver(this);
+                if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF && !photoImage.isAllowStartAnimation()) {
+                    buttonState = 2;
+                } else {
+                    buttonState = -1;
+                }
+                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                invalidate();
             }
-            radialProgress.setProgress(setProgress, false);
-            radialProgress.setBackground(getDrawableForCurrentState(), progressVisible, animated);
-            invalidate();
         } else {
-            MediaController.getInstance().removeLoadingFileObserver(this);
-            if (isGifDocument && !linkImageView.isAllowStartAnimation()) {
-                buttonState = 2;
+            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+                if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
+                    MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, currentMessageObject, this);
+                    boolean needProgress = currentMessageObject.messageOwner.attachPath == null || !currentMessageObject.messageOwner.attachPath.startsWith("http");
+                    HashMap<String, String> params = currentMessageObject.messageOwner.params;
+                    if (currentMessageObject.messageOwner.message != null && params != null && (params.containsKey("url") || params.containsKey("bot"))) {
+                        needProgress = false;
+                        buttonState = -1;
+                    } else {
+                        buttonState = 1;
+                    }
+                    radialProgress.setBackground(getDrawableForCurrentState(), needProgress, animated);
+                    if (needProgress) {
+                        Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
+                        if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
+                            progress = 1.0f;
+                        }
+                        radialProgress.setProgress(progress != null ? progress : 0, false);
+                    } else {
+                        radialProgress.setProgress(0, false);
+                    }
+                    invalidate();
+                }
             } else {
-                buttonState = -1;
+                if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+                    MediaController.getInstance().removeLoadingFileObserver(this);
+                }
+                if (!fileExists) {
+                    MediaController.getInstance().addLoadingFileObserver(fileName, currentMessageObject, this);
+                    float setProgress = 0;
+                    boolean progressVisible = false;
+                    if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                        if (!cancelLoading &&
+                                (currentMessageObject.type == 1 && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) ||
+                                        currentMessageObject.type == 8 && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_GIF) && MessageObject.isNewGifDocument(currentMessageObject.messageOwner.media.document)) ) {
+                            progressVisible = true;
+                            buttonState = 1;
+                        } else {
+                            buttonState = 0;
+                        }
+                    } else {
+                        progressVisible = true;
+                        buttonState = 1;
+                        Float progress = ImageLoader.getInstance().getFileProgress(fileName);
+                        setProgress = progress != null ? progress : 0;
+                    }
+                    radialProgress.setBackground(getDrawableForCurrentState(), progressVisible, animated);
+                    radialProgress.setProgress(setProgress, false);
+                    invalidate();
+                } else {
+                    MediaController.getInstance().removeLoadingFileObserver(this);
+                    if (currentMessageObject.type == 8 && !photoImage.isAllowStartAnimation()) {
+                        buttonState = 2;
+                    } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                        buttonState = 3;
+                    } else {
+                        buttonState = -1;
+                    }
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                    if (photoNotSet) {
+                        setMessageObject(currentMessageObject);
+                    }
+                    invalidate();
+                }
+            }
+        }
+    }
+
+    public void setAllowedToSetPhoto(boolean value) {
+        if (allowedToSetPhoto == value) {
+            return;
+        }
+        if (currentMessageObject != null && currentMessageObject.type == 1) {
+            allowedToSetPhoto = value;
+            if (value) {
+                MessageObject temp = currentMessageObject;
+                currentMessageObject = null;
+                setMessageObject(temp);
             }
-            radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-            invalidate();
         }
     }
 
     private void didPressedButton(boolean animated) {
         if (buttonState == 0) {
-            cancelLoading = false;
-            radialProgress.setProgress(0, false);
-            if (isGifDocument) {
-                linkImageView.setImage(currentMessageObject.messageOwner.media.webpage.document, null, currentPhotoObject.location, currentPhotoFilter, currentMessageObject.messageOwner.media.webpage.document.size, null, false);
-                currentMessageObject.audioProgress = 2;
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+                if (delegate.needPlayAudio(currentMessageObject)) {
+                    buttonState = 1;
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                    invalidate();
+                }
             } else {
-                linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                cancelLoading = false;
+                radialProgress.setProgress(0, false);
+                if (currentMessageObject.type == 1) {
+                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, currentPhotoObject.size, null, false);
+                } else if (currentMessageObject.type == 8) {
+                    currentMessageObject.audioProgress = 2;
+                    photoImage.setImage(currentMessageObject.messageOwner.media.document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, currentMessageObject.messageOwner.media.document.size, null, false);
+                } else if (currentMessageObject.type == 9) {
+                    FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, false, false);
+                } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO) {
+                    FileLoader.getInstance().loadFile(documentAttach, true, false);
+                } else if (currentMessageObject.type == 0 && documentAttachType != DOCUMENT_ATTACH_TYPE_NONE) {
+                    if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
+                        photoImage.setImage(currentMessageObject.messageOwner.media.webpage.document, null, currentPhotoObject.location, currentPhotoFilter, currentMessageObject.messageOwner.media.webpage.document.size, null, false);
+                        currentMessageObject.audioProgress = 2;
+                    } else if (documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                        FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.webpage.document, false, false);
+                    }
+                } else {
+                    photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                }
+                buttonState = 1;
+                radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
+                invalidate();
             }
-            buttonState = 1;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-            invalidate();
         } else if (buttonState == 1) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+                boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
+                if (result) {
+                    buttonState = 0;
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                    invalidate();
+                }
+            } else {
+                if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
                     delegate.didPressedCancelSendButton(this);
+                } else {
+                    cancelLoading = true;
+                    if (documentAttachType == DOCUMENT_ATTACH_TYPE_VIDEO || documentAttachType == DOCUMENT_ATTACH_TYPE_DOCUMENT) {
+                        FileLoader.getInstance().cancelLoadFile(documentAttach);
+                    } else if (currentMessageObject.type == 0 || currentMessageObject.type == 1 || currentMessageObject.type == 8) {
+                        photoImage.cancelLoadImage();
+                    } else if (currentMessageObject.type == 9) {
+                        FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
+                    }
+                    buttonState = 0;
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+                    invalidate();
                 }
+            }
+        } else if (buttonState == 2) {
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+                radialProgress.setProgress(0, false);
+                FileLoader.getInstance().loadFile(documentAttach, true, false);
+                buttonState = 4;
+                radialProgress.setBackground(getDrawableForCurrentState(), true, false);
+                invalidate();
             } else {
-                cancelLoading = true;
-                linkImageView.cancelLoadImage();
-                buttonState = 0;
+                photoImage.setAllowStartAnimation(true);
+                photoImage.startAnimation();
+                currentMessageObject.audioProgress = 0;
+                buttonState = -1;
                 radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                invalidate();
             }
-        } else if (buttonState == 2) {
-            linkImageView.setAllowStartAnimation(true);
-            linkImageView.startAnimation();
-            currentMessageObject.audioProgress = 0;
-            buttonState = -1;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
+        } else if (buttonState == 3) {
+            delegate.didPressedImage(this);
+        } else if (buttonState == 4) {
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+                if (currentMessageObject.isOut() && currentMessageObject.isSending() || currentMessageObject.isSendError()) {
+                    if (delegate != null) {
+                        delegate.didPressedCancelSendButton(this);
+                    }
+                } else {
+                    FileLoader.getInstance().cancelLoadFile(documentAttach);
+                    buttonState = 2;
+                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
+                    invalidate();
+                }
+            }
         }
     }
 
     @Override
     public void onFailedDownload(String fileName) {
-        updateButtonState(false);
+        updateButtonState(documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC);
     }
 
     @Override
     public void onSuccessDownload(String fileName) {
-        radialProgress.setProgress(1, true);
-        if (isGifDocument && currentMessageObject.audioProgress != 1) {
-            buttonState = 2;
-            didPressedButton(true);
-        } else if (!photoNotSet) {
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
             updateButtonState(true);
+            updateWaveform();
         } else {
-            setMessageObject(currentMessageObject);
+            radialProgress.setProgress(1, true);
+            if (currentMessageObject.type == 0) {
+                if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF && currentMessageObject.audioProgress != 1) {
+                    buttonState = 2;
+                    didPressedButton(true);
+                } else if (!photoNotSet) {
+                    updateButtonState(true);
+                } else {
+                    setMessageObject(currentMessageObject);
+                }
+            } else {
+                if (!photoNotSet || currentMessageObject.type == 8 && currentMessageObject.audioProgress != 1) {
+                    if (currentMessageObject.type == 8 && currentMessageObject.audioProgress != 1) {
+                        photoNotSet = false;
+                        buttonState = 2;
+                        didPressedButton(true);
+                    } else {
+                        updateButtonState(true);
+                    }
+                }
+                if (photoNotSet) {
+                    setMessageObject(currentMessageObject);
+                }
+            }
         }
     }
 
     @Override
     public void onProgressDownload(String fileName, float progress) {
         radialProgress.setProgress(progress, true);
-        if (buttonState != 1) {
-            updateButtonState(false);
+        if (documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC) {
+            if (buttonState != 4) {
+                updateButtonState(false);
+            }
+        } else {
+            if (buttonState != 1) {
+                updateButtonState(false);
+            }
         }
     }
 
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+        radialProgress.setProgress(progress, true);
+    }
+
     @Override
     public void onProvideStructure(ViewStructure structure) {
         super.onProvideStructure(structure);
         if (allowAssistant && Build.VERSION.SDK_INT >= 23) {
-            structure.setText(currentMessageObject.messageText);
+            if (currentMessageObject.messageText != null && currentMessageObject.messageText.length() > 0) {
+                structure.setText(currentMessageObject.messageText);
+            } else if (currentMessageObject.caption != null && currentMessageObject.caption.length() > 0) {
+                structure.setText(currentMessageObject.caption);
+            }
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java
deleted file mode 100644
index 0404682d3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMusicCell.java
+++ /dev/null
@@ -1,457 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Cells;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-import android.text.Layout;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.MotionEvent;
-import android.view.SoundEffectConstants;
-
-import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.ImageLoader;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.SendMessagesHelper;
-import org.telegram.messenger.FileLoader;
-import org.telegram.tgnet.TLRPC;
-import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.SeekBar;
-
-import java.io.File;
-
-public class ChatMusicCell extends ChatBaseCell implements SeekBar.SeekBarDelegate {
-
-    public interface ChatMusicCellDelegate {
-        boolean needPlayMusic(MessageObject messageObject);
-    }
-
-    private static TextPaint timePaint;
-    private static TextPaint titlePaint;
-    private static TextPaint authorPaint;
-
-    private SeekBar seekBar;
-    private int seekBarX;
-    private int seekBarY;
-
-    private RadialProgress radialProgress;
-    private int buttonState = 0;
-    private int buttonX;
-    private int buttonY;
-    private boolean buttonPressed = false;
-
-    private StaticLayout timeLayout;
-    private int timeX;
-    private String lastTimeString = null;
-
-    private StaticLayout titleLayout;
-    private int titleX;
-
-    private StaticLayout authorLayout;
-    private int authorX;
-
-    private ChatMusicCellDelegate musicDelegate;
-
-    public ChatMusicCell(Context context) {
-        super(context);
-
-        seekBar = new SeekBar(context);
-        seekBar.setDelegate(this);
-        radialProgress = new RadialProgress(this);
-        drawForwardedName = false;
-
-        if (timePaint == null) {
-            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
-            timePaint.setTextSize(AndroidUtilities.dp(13));
-
-            titlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            titlePaint.setTextSize(AndroidUtilities.dp(16));
-            titlePaint.setColor(0xff212121);
-            titlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-
-            authorPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-            authorPaint.setTextSize(AndroidUtilities.dp(15));
-            authorPaint.setColor(0xff212121);
-        }
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        super.onDetachedFromWindow();
-        MediaController.getInstance().removeLoadingFileObserver(this);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        updateButtonState(false);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getX();
-        float y = event.getY();
-        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
-        if (result) {
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                getParent().requestDisallowInterceptTouchEvent(true);
-            }
-            invalidate();
-        } else {
-            int side = AndroidUtilities.dp(36);
-            if (event.getAction() == MotionEvent.ACTION_DOWN) {
-                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
-                    buttonPressed = true;
-                    invalidate();
-                    result = true;
-                    radialProgress.swapBackground(getDrawableForCurrentState());
-                }
-            } else if (buttonPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    didPressedButton();
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = false;
-                    invalidate();
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
-                        buttonPressed = false;
-                        invalidate();
-                    }
-                }
-                radialProgress.swapBackground(getDrawableForCurrentState());
-            }
-            if (!result) {
-                result = super.onTouchEvent(event);
-            }
-        }
-
-        return result;
-    }
-
-    private void didPressedButton() {
-        if (buttonState == 0) {
-            if (musicDelegate != null) {
-                if (musicDelegate.needPlayMusic(currentMessageObject)) {
-                    buttonState = 1;
-                    radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                    invalidate();
-                }
-            }
-        } else if (buttonState == 1) {
-            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
-            if (result) {
-                buttonState = 0;
-                radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-                invalidate();
-            }
-        } else if (buttonState == 2) {
-            radialProgress.setProgress(0, false);
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-            buttonState = 3;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, false);
-            invalidate();
-        } else if (buttonState == 3) {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
-            buttonState = 2;
-            radialProgress.setBackground(getDrawableForCurrentState(), false, false);
-            invalidate();
-        } else if (buttonState == 4) {
-            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-                if (delegate != null) {
-                    delegate.didPressedCancelSendButton(this);
-                }
-            }
-        }
-    }
-
-    public void setMusicDelegate(ChatMusicCellDelegate delegate) {
-        musicDelegate = delegate;
-    }
-
-    public void updateProgress() {
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (!seekBar.isDragging()) {
-            seekBar.setProgress(currentMessageObject.audioProgress);
-        }
-
-        int duration = 0;
-        int currentProgress = 0;
-        for (int a = 0; a < currentMessageObject.messageOwner.media.document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = currentMessageObject.messageOwner.media.document.attributes.get(a);
-            if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                duration = attribute.duration;
-                break;
-            }
-        }
-        if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            currentProgress = currentMessageObject.audioProgressSec;
-        }
-        String timeString = String.format("%d:%02d / %d:%02d", currentProgress / 60, currentProgress % 60, duration / 60, duration % 60);
-        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
-            lastTimeString = timeString;
-            int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
-            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-        }
-        invalidate();
-    }
-
-    public void downloadAudioIfNeed() {
-        //if (buttonState == 2) {
-            //FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
-        //    buttonState = 3;
-        //    invalidate();
-        //}
-    }
-
-    public void updateButtonState(boolean animated) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
-            MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
-            buttonState = 4;
-            radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-            Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-            if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
-                progress = 1.0f;
-            }
-            radialProgress.setProgress(progress != null ? progress : 0, false);
-        } else {
-            File cacheFile = null;
-            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
-                cacheFile = new File(currentMessageObject.messageOwner.attachPath);
-                if (!cacheFile.exists()) {
-                    cacheFile = null;
-                }
-            }
-            if (cacheFile == null) {
-                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
-            }
-            if (cacheFile.exists()) {
-                MediaController.getInstance().removeLoadingFileObserver(this);
-                boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
-                if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
-                    buttonState = 0;
-                } else {
-                    buttonState = 1;
-                }
-                radialProgress.setProgress(0, animated);
-                radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-            } else {
-                String fileName = currentMessageObject.getFileName();
-                MediaController.getInstance().addLoadingFileObserver(fileName, this);
-                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
-                    buttonState = 2;
-                    radialProgress.setProgress(0, animated);
-                    radialProgress.setBackground(getDrawableForCurrentState(), false, animated);
-                } else {
-                    buttonState = 3;
-                    Float progress = ImageLoader.getInstance().getFileProgress(fileName);
-                    if (progress != null) {
-                        radialProgress.setProgress(progress, animated);
-                    } else {
-                        radialProgress.setProgress(0, animated);
-                    }
-                    radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
-                }
-            }
-        }
-        updateProgress();
-    }
-
-    @Override
-    public void onFailedDownload(String fileName) {
-        updateButtonState(true);
-    }
-
-    @Override
-    public void onSuccessDownload(String fileName) {
-        updateButtonState(true);
-    }
-
-    @Override
-    public void onProgressDownload(String fileName, float progress) {
-        radialProgress.setProgress(progress, true);
-        if (buttonState != 3) {
-            updateButtonState(false);
-        }
-    }
-
-    @Override
-    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
-        radialProgress.setProgress(progress, true);
-    }
-
-    @Override
-    public void onSeekBarDrag(float progress) {
-        if (currentMessageObject == null) {
-            return;
-        }
-        currentMessageObject.audioProgress = progress;
-        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
-    }
-
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(78) + namesOffset);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-
-        if (currentMessageObject.isOutOwner()) {
-            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(52);
-            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(13);
-            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(63);
-        } else {
-            if (isChat && currentMessageObject.isFromUser()) {
-                seekBarX = AndroidUtilities.dp(113);
-                buttonX = AndroidUtilities.dp(74);
-                timeX = AndroidUtilities.dp(124);
-            } else {
-                seekBarX = AndroidUtilities.dp(61);
-                buttonX = AndroidUtilities.dp(22);
-                timeX = AndroidUtilities.dp(72);
-            }
-        }
-
-        seekBar.width = backgroundWidth - AndroidUtilities.dp(67);
-        seekBar.height = AndroidUtilities.dp(30);
-        seekBarY = AndroidUtilities.dp(26) + namesOffset;
-        buttonY = AndroidUtilities.dp(13) + namesOffset;
-        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(40), buttonY + AndroidUtilities.dp(40));
-
-        updateProgress();
-    }
-
-    @Override
-    public void setMessageObject(MessageObject messageObject) {
-        boolean dataChanged = currentMessageObject == messageObject && isUserDataChanged();
-        if (currentMessageObject != messageObject || dataChanged) {
-            if (AndroidUtilities.isTablet()) {
-                backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(300));
-            } else {
-                backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat && messageObject.isFromUser() && !messageObject.isOutOwner() ? 102 : 50), AndroidUtilities.dp(300));
-            }
-
-            if (messageObject.isOutOwner()) {
-                seekBar.type = 0;
-                radialProgress.setProgressColor(0xff87bf78);
-            } else {
-                seekBar.type = 1;
-                radialProgress.setProgressColor(0xffa2b5c7);
-            }
-
-            int maxWidth = backgroundWidth - AndroidUtilities.dp(86);
-
-            CharSequence stringFinal = TextUtils.ellipsize(messageObject.getMusicTitle().replace("\n", " "), titlePaint, maxWidth, TextUtils.TruncateAt.END);
-            titleLayout = new StaticLayout(stringFinal, titlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (titleLayout.getLineCount() > 0) {
-                titleX = -(int) Math.ceil(titleLayout.getLineLeft(0));
-            }
-
-            stringFinal = TextUtils.ellipsize(messageObject.getMusicAuthor().replace("\n", " "), authorPaint, maxWidth, TextUtils.TruncateAt.END);
-            authorLayout = new StaticLayout(stringFinal, authorPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-            if (authorLayout.getLineCount() > 0) {
-                authorX = -(int) Math.ceil(authorLayout.getLineLeft(0));
-            }
-
-            int duration = 0;
-            for (int a = 0; a < messageObject.messageOwner.media.document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(a);
-                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
-                    duration = attribute.duration;
-                    break;
-                }
-            }
-            availableTimeWidth = backgroundWidth - AndroidUtilities.dp(72 + 14) - (int) Math.ceil(timePaint.measureText(String.format("%d:%02d / %d:%02d", duration / 60, duration % 60, duration / 60, duration % 60)));
-
-            super.setMessageObject(messageObject);
-        }
-        updateButtonState(dataChanged);
-    }
-
-    @Override
-    public void setCheckPressed(boolean value, boolean pressed) {
-        super.setCheckPressed(value, pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    @Override
-    public void setHighlighted(boolean value) {
-        super.setHighlighted(value);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    @Override
-    public void setPressed(boolean pressed) {
-        super.setPressed(pressed);
-        if (radialProgress.swapBackground(getDrawableForCurrentState())) {
-            invalidate();
-        }
-    }
-
-    private Drawable getDrawableForCurrentState() {
-        return ResourceLoader.audioStatesDrawable[currentMessageObject.isOutOwner() ? buttonState : buttonState + 5][isDrawSelectedBackground() ? 2 : (buttonPressed ? 1 : 0)];
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        if (currentMessageObject == null) {
-            return;
-        }
-
-        if (currentMessageObject.isOutOwner()) {
-            timePaint.setColor(0xff70b15c);
-        } else {
-            timePaint.setColor(isDrawSelectedBackground() ? 0xff89b4c1 : 0xffa1aab3);
-        }
-        radialProgress.draw(canvas);
-
-        canvas.save();
-        canvas.translate(timeX + titleX, AndroidUtilities.dp(12) + namesOffset);
-        titleLayout.draw(canvas);
-        canvas.restore();
-
-        canvas.save();
-        if (MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            canvas.translate(seekBarX, seekBarY);
-            seekBar.draw(canvas);
-        } else {
-            canvas.translate(timeX + authorX, AndroidUtilities.dp(32) + namesOffset);
-            authorLayout.draw(canvas);
-        }
-        canvas.restore();
-
-        canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(52) + namesOffset);
-        timeLayout.draw(canvas);
-        canvas.restore();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
index ef043f5b3..b69baddc4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatUnreadCell.java
@@ -18,6 +18,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 
 public class ChatUnreadCell extends FrameLayout {
 
@@ -38,7 +39,8 @@ public ChatUnreadCell(Context context) {
         textView = new TextView(context);
         textView.setPadding(0, 0, 0, AndroidUtilities.dp(1));
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        textView.setTextColor(0xff4a7297);
+        textView.setTextColor(Theme.CHAT_UNREAD_TEXT_COLOR);
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
index b9ec45600..5c789c3dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ContextLinkCell.java
@@ -21,8 +21,10 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 import android.view.View;
+import android.view.animation.AccelerateInterpolator;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.Emoji;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
@@ -30,11 +32,12 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.LetterDrawable;
 import org.telegram.ui.Components.RadialProgress;
-import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -42,6 +45,16 @@
 
 public class ContextLinkCell extends View implements MediaController.FileDownloadProgressListener {
 
+    private final static int DOCUMENT_ATTACH_TYPE_NONE = 0;
+    private final static int DOCUMENT_ATTACH_TYPE_DOCUMENT = 1;
+    private final static int DOCUMENT_ATTACH_TYPE_GIF = 2;
+    private final static int DOCUMENT_ATTACH_TYPE_AUDIO = 3;
+    private final static int DOCUMENT_ATTACH_TYPE_VIDEO = 4;
+    private final static int DOCUMENT_ATTACH_TYPE_MUSIC = 5;
+    private final static int DOCUMENT_ATTACH_TYPE_STICKER = 6;
+    private final static int DOCUMENT_ATTACH_TYPE_PHOTO = 7;
+    private final static int DOCUMENT_ATTACH_TYPE_GEO = 8;
+
     public interface ContextLinkCellDelegate {
         void didPressedImage(ContextLinkCell cell);
     }
@@ -52,6 +65,7 @@
 
     private boolean needDivider;
     private boolean buttonPressed;
+    private boolean needShadow;
 
     private int linkY;
     private StaticLayout linkLayout;
@@ -62,18 +76,26 @@
     private int descriptionY = AndroidUtilities.dp(27);
     private StaticLayout descriptionLayout;
 
-    private TLRPC.BotInlineResult result;
-    private TLRPC.Document gif;
+    private TLRPC.BotInlineResult inlineResult;
+    private TLRPC.Document documentAttach;
+    private int documentAttachType;
     private boolean mediaWebpage;
 
     private static TextPaint titleTextPaint;
     private static TextPaint descriptionTextPaint;
     private static Paint paint;
+    private static Drawable shadowDrawable;
 
     private int TAG;
     private int buttonState;
     private RadialProgress radialProgress;
 
+    private long lastUpdateTime;
+    private boolean scaled;
+    private float scale;
+    private long time = 0;
+    private static AccelerateInterpolator interpolator = new AccelerateInterpolator(0.5f);
+
     private ContextLinkCellDelegate delegate;
 
     public ContextLinkCell(Context context) {
@@ -93,7 +115,6 @@ public ContextLinkCell(Context context) {
             paint.setStrokeWidth(1);
         }
 
-        setWillNotDraw(false);
         linkImageView = new ImageReceiver(this);
         letterDrawable = new LetterDrawable();
         radialProgress = new RadialProgress(this);
@@ -107,47 +128,43 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         descriptionLayout = null;
         titleLayout = null;
         linkLayout = null;
-        TLRPC.PhotoSize currentPhotoObject = null;
-        TLRPC.PhotoSize currentPhotoObjectThumb = null;
-        ArrayList<TLRPC.PhotoSize> photoThumbs = null;
-        String url = null;
         linkY = AndroidUtilities.dp(27);
 
-        if (result == null && gif == null) {
+        if (inlineResult == null && documentAttach == null) {
             setMeasuredDimension(AndroidUtilities.dp(100), AndroidUtilities.dp(100));
             return;
         }
 
-        int maxWidth = MeasureSpec.getSize(widthMeasureSpec) - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - AndroidUtilities.dp(8);
+        int viewWidth = MeasureSpec.getSize(widthMeasureSpec);
+        int maxWidth = viewWidth - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - AndroidUtilities.dp(8);
 
-        TLRPC.Document document = null;
-        if (result != null && result.document != null) {
-            document = result.document;
-        } else if (gif != null) {
-            document = gif;
-        }
-        if (document != null) {
+        TLRPC.PhotoSize currentPhotoObject = null;
+        TLRPC.PhotoSize currentPhotoObjectThumb = null;
+        ArrayList<TLRPC.PhotoSize> photoThumbs = null;
+        String url = null;
+
+        if (documentAttach != null) {
             photoThumbs = new ArrayList<>();
-            photoThumbs.add(document.thumb);
-        } else if (result != null && result.photo != null) {
-            photoThumbs = new ArrayList<>(result.photo.sizes);
+            photoThumbs.add(documentAttach.thumb);
+        } else if (inlineResult != null && inlineResult.photo != null) {
+            photoThumbs = new ArrayList<>(inlineResult.photo.sizes);
         }
 
-        if (!mediaWebpage && result != null) {
-            if (result.title != null) {
+        if (!mediaWebpage && inlineResult != null) {
+            if (inlineResult.title != null) {
                 try {
-                    int width = (int) Math.ceil(titleTextPaint.measureText(result.title));
-                    CharSequence titleFinal = TextUtils.ellipsize(result.title.replace("\n", " "), titleTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.END);
-                    titleLayout = new StaticLayout(titleFinal, titleTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    int width = (int) Math.ceil(titleTextPaint.measureText(inlineResult.title));
+                    CharSequence titleFinal = TextUtils.ellipsize(Emoji.replaceEmoji(inlineResult.title.replace('\n', ' '), titleTextPaint.getFontMetricsInt(), AndroidUtilities.dp(15), false), titleTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.END);
+                    titleLayout = new StaticLayout(titleFinal, titleTextPaint, maxWidth + AndroidUtilities.dp(4), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
-                letterDrawable.setTitle(result.title);
+                letterDrawable.setTitle(inlineResult.title);
             }
 
-            if (result.description != null) {
+            if (inlineResult.description != null) {
                 try {
-                    descriptionLayout = ChatMessageCell.generateStaticLayout(result.description, descriptionTextPaint, maxWidth, maxWidth, 0, 3);
+                    descriptionLayout = ChatMessageCell.generateStaticLayout(Emoji.replaceEmoji(inlineResult.description, descriptionTextPaint.getFontMetricsInt(), AndroidUtilities.dp(13), false), descriptionTextPaint, maxWidth, maxWidth, 0, 3);
                     if (descriptionLayout.getLineCount() > 0) {
                         linkY = descriptionY + descriptionLayout.getLineBottom(descriptionLayout.getLineCount() - 1) + AndroidUtilities.dp(1);
                     }
@@ -156,10 +173,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 }
             }
 
-            if (result.url != null) {
+            if (inlineResult.url != null) {
                 try {
-                    int width = (int) Math.ceil(descriptionTextPaint.measureText(result.url));
-                    CharSequence linkFinal = TextUtils.ellipsize(result.url.replace("\n", " "), descriptionTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.MIDDLE);
+                    int width = (int) Math.ceil(descriptionTextPaint.measureText(inlineResult.url));
+                    CharSequence linkFinal = TextUtils.ellipsize(inlineResult.url.replace('\n', ' '), descriptionTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.MIDDLE);
                     linkLayout = new StaticLayout(linkFinal, descriptionTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -167,32 +184,52 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             }
         }
 
-        boolean isGifDocument = false;
-        if (document != null && MessageObject.isGifDocument(document)) {
-            currentPhotoObject = document.thumb;
-            isGifDocument = true;
-        } else if (result != null && result.photo != null) {
+        documentAttachType = DOCUMENT_ATTACH_TYPE_NONE;
+        String ext = null;
+        if (documentAttach != null) {
+            if (MessageObject.isGifDocument(documentAttach)) {
+                documentAttachType = DOCUMENT_ATTACH_TYPE_GIF;
+                currentPhotoObject = documentAttach.thumb;
+            } else if (MessageObject.isStickerDocument(documentAttach)) {
+                documentAttachType = DOCUMENT_ATTACH_TYPE_STICKER;
+                currentPhotoObject = documentAttach.thumb;
+                ext = "webp";
+            } else {
+                currentPhotoObject = documentAttach.thumb;
+            }
+        } else if (inlineResult != null && inlineResult.photo != null) {
+            documentAttachType = DOCUMENT_ATTACH_TYPE_PHOTO;
             currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize(), true);
             currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, 80);
             if (currentPhotoObjectThumb == currentPhotoObject) {
                 currentPhotoObjectThumb = null;
             }
         }
-        if (result != null) {
-            if (result.content_url != null) {
-                if (result.type != null) {
-                    if (result.type.startsWith("gif")) {
-                        if (!isGifDocument) {
-                            url = result.content_url;
-                            isGifDocument = true;
+        if (inlineResult != null) {
+            if (inlineResult.content_url != null) {
+                if (inlineResult.type != null) {
+                    if (inlineResult.type.startsWith("gif")) {
+                        if (documentAttachType != DOCUMENT_ATTACH_TYPE_GIF) {
+                            url = inlineResult.content_url;
+                            documentAttachType = DOCUMENT_ATTACH_TYPE_GIF;
+                        }
+                    } else if (inlineResult.type.equals("photo")) {
+                        url = inlineResult.thumb_url;
+                        if (url == null) {
+                            url = inlineResult.content_url;
                         }
-                    } else if (result.type.equals("photo")) {
-                        url = result.content_url;
                     }
                 }
             }
-            if (url == null && result.thumb_url != null) {
-                url = result.thumb_url;
+            if (url == null && inlineResult.thumb_url != null) {
+                url = inlineResult.thumb_url;
+            }
+        }
+        if (url == null && currentPhotoObject == null && currentPhotoObjectThumb == null) {
+            if (inlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaVenue || inlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaGeo) {
+                double lat = inlineResult.send_message.geo.lat;
+                double lon = inlineResult.send_message.geo._long;
+                url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=15&size=72x72&maptype=roadmap&scale=%d&markers=color:red|size:small|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
             }
         }
 
@@ -200,9 +237,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int w = 0;
         int h = 0;
 
-        if (document != null) {
-            for (int b = 0; b < document.attributes.size(); b++) {
-                TLRPC.DocumentAttribute attribute = document.attributes.get(b);
+        if (documentAttach != null) {
+            for (int b = 0; b < documentAttach.attributes.size(); b++) {
+                TLRPC.DocumentAttribute attribute = documentAttach.attributes.get(b);
                 if (attribute instanceof TLRPC.TL_documentAttributeImageSize || attribute instanceof TLRPC.TL_documentAttributeVideo) {
                     w = attribute.w;
                     h = attribute.h;
@@ -212,24 +249,26 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         }
         if (w == 0 || h == 0) {
             if (currentPhotoObject != null) {
-                currentPhotoObject.size = -1;
                 if (currentPhotoObjectThumb != null) {
                     currentPhotoObjectThumb.size = -1;
                 }
                 w = currentPhotoObject.w;
                 h = currentPhotoObject.h;
-            } else if (result != null) {
-                w = result.w;
-                h = result.h;
+            } else if (inlineResult != null) {
+                w = inlineResult.w;
+                h = inlineResult.h;
             }
         }
-        if (document != null || currentPhotoObject != null || url != null) {
+        if (w == 0 || h == 0) {
+            w = h = AndroidUtilities.dp(80);
+        }
+        if (documentAttach != null || currentPhotoObject != null || url != null) {
             String currentPhotoFilter;
             String currentPhotoFilterThumb = "52_52_b";
 
             if (mediaWebpage) {
                 width = (int) (w / (h / (float) AndroidUtilities.dp(80)));
-                if (Build.VERSION.SDK_INT >= 11 && isGifDocument) {
+                if (Build.VERSION.SDK_INT >= 11 && documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
                     currentPhotoFilterThumb = currentPhotoFilter = String.format(Locale.US, "%d_%d_b", (int) (width / AndroidUtilities.density), 80);
                 } else {
                     currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (width / AndroidUtilities.density), 80);
@@ -239,25 +278,26 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 currentPhotoFilter = "52_52";
             }
 
-            if (isGifDocument) {
-                if (document != null && Build.VERSION.SDK_INT >= 11) {
-                    linkImageView.setImage(document, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, document.size, null, false);
+            if (documentAttachType == DOCUMENT_ATTACH_TYPE_GIF) {
+                if (documentAttach != null && Build.VERSION.SDK_INT >= 11) {
+                    linkImageView.setImage(documentAttach, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, documentAttach.size, ext, false);
                 } else {
-                    linkImageView.setImage(null, url, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, -1, null, true);
+                    linkImageView.setImage(null, url, null, null, currentPhotoObject != null ? currentPhotoObject.location : null, currentPhotoFilter, -1, ext, true);
                 }
             } else {
                 if (currentPhotoObject != null) {
-                    linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, null, false);
+                    linkImageView.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, 0, ext, false);
                 } else {
-                    linkImageView.setImage(null, url, currentPhotoFilter, null, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, -1, null, true);
+                    linkImageView.setImage(null, url, currentPhotoFilter, null, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilterThumb, -1, ext, true);
                 }
             }
             drawLinkImageView = true;
         }
 
         if (mediaWebpage) {
-            if (gif != null) {
-                width = MeasureSpec.getSize(widthMeasureSpec);
+            setBackgroundDrawable(null);
+            if (inlineResult == null) {
+                width = viewWidth;
                 int height = MeasureSpec.getSize(heightMeasureSpec);
                 setMeasuredDimension(width, height);
                 if (needDivider) {
@@ -275,6 +315,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 linkImageView.setImageCoords(AndroidUtilities.dp(5), AndroidUtilities.dp(5), width, AndroidUtilities.dp(80));
             }
         } else {
+            setBackgroundResource(R.drawable.list_selector);
             int height = 0;
             if (titleLayout != null && titleLayout.getLineCount() != 0) {
                 height += titleLayout.getLineBottom(titleLayout.getLineCount() - 1);
@@ -290,14 +331,23 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
             int maxPhotoWidth = AndroidUtilities.dp(52);
             int x = LocaleController.isRTL ? MeasureSpec.getSize(widthMeasureSpec) - AndroidUtilities.dp(8) - maxPhotoWidth : AndroidUtilities.dp(8);
-            letterDrawable.setBounds(x, AndroidUtilities.dp(8), x + maxPhotoWidth, AndroidUtilities.dp(62));
+            letterDrawable.setBounds(x, AndroidUtilities.dp(8), x + maxPhotoWidth, AndroidUtilities.dp(60));
             linkImageView.setImageCoords(x, AndroidUtilities.dp(8), maxPhotoWidth, maxPhotoWidth);
         }
     }
 
-    public void setLink(TLRPC.BotInlineResult contextResult, boolean media, boolean divider) {
+    public void setLink(TLRPC.BotInlineResult contextResult, boolean media, boolean divider, boolean shadow) {
         needDivider = divider;
-        result = contextResult;
+        needShadow = shadow;
+        if (needShadow && shadowDrawable == null) {
+            shadowDrawable = getContext().getResources().getDrawable(R.drawable.header_shadow);
+        }
+        inlineResult = contextResult;
+        if (inlineResult != null && inlineResult.document != null) {
+            documentAttach = inlineResult.document;
+        } else {
+            documentAttach = null;
+        }
         mediaWebpage = media;
         requestLayout();
         updateButtonState(false);
@@ -305,13 +355,32 @@ public void setLink(TLRPC.BotInlineResult contextResult, boolean media, boolean
 
     public void setGif(TLRPC.Document document, boolean divider) {
         needDivider = divider;
-        result = null;
-        gif = document;
+        needShadow = false;
+        inlineResult = null;
+        documentAttach = document;
         mediaWebpage = true;
         requestLayout();
         updateButtonState(false);
     }
 
+    public boolean isSticker() {
+        return documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER;
+    }
+
+    public boolean showingBitmap() {
+        return linkImageView.getBitmap() != null;
+    }
+
+    public TLRPC.Document getDocument() {
+        return documentAttach;
+    }
+
+    public void setScaled(boolean value) {
+        scaled = value;
+        lastUpdateTime = System.currentTimeMillis();
+        invalidate();
+    }
+
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
@@ -333,7 +402,13 @@ protected void onAttachedToWindow() {
 
     @Override
     public boolean onTouchEvent(MotionEvent event) {
-        if (mediaWebpage || delegate == null || result == null) {
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(event.getX(), event.getY());
+            }
+        }
+
+        if (mediaWebpage || delegate == null || inlineResult == null) {
             return super.onTouchEvent(event);
         }
         int x = (int) event.getX();
@@ -341,22 +416,24 @@ public boolean onTouchEvent(MotionEvent event) {
 
         boolean result = false;
         int side = AndroidUtilities.dp(48);
-        if (event.getAction() == MotionEvent.ACTION_DOWN) {
-            if (letterDrawable.getBounds().contains(x, y)) {
-                buttonPressed = true;
-                result = true;
-            }
-        } else {
-            if (buttonPressed) {
-                if (event.getAction() == MotionEvent.ACTION_UP) {
-                    buttonPressed = false;
-                    playSoundEffect(SoundEffectConstants.CLICK);
-                    delegate.didPressedImage(this);
-                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
-                    buttonPressed = false;
-                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!letterDrawable.getBounds().contains(x, y)) {
+        if (inlineResult != null && inlineResult.content_url != null && inlineResult.content_url.length() > 0) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (letterDrawable.getBounds().contains(x, y)) {
+                    buttonPressed = true;
+                    result = true;
+                }
+            } else {
+                if (buttonPressed) {
+                    if (event.getAction() == MotionEvent.ACTION_UP) {
                         buttonPressed = false;
+                        playSoundEffect(SoundEffectConstants.CLICK);
+                        delegate.didPressedImage(this);
+                    } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                        buttonPressed = false;
+                    } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                        if (!letterDrawable.getBounds().contains(x, y)) {
+                            buttonPressed = false;
+                        }
                     }
                 }
             }
@@ -386,7 +463,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (linkLayout != null) {
-            descriptionTextPaint.setColor(0xff316f9f);
+            descriptionTextPaint.setColor(Theme.MSG_LINK_TEXT_COLOR);
             canvas.save();
             canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline), linkY);
             linkLayout.draw(canvas);
@@ -394,12 +471,68 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (!mediaWebpage) {
-            letterDrawable.draw(canvas);
+            if (inlineResult != null && inlineResult.type.equals("file")) {
+                int w = Theme.inlineDocDrawable.getIntrinsicWidth();
+                int h = Theme.inlineDocDrawable.getIntrinsicHeight();
+                int x = linkImageView.getImageX() + (AndroidUtilities.dp(52) - w) / 2;
+                int y = linkImageView.getImageY() + (AndroidUtilities.dp(52) - h) / 2;
+                canvas.drawRect(linkImageView.getImageX(), linkImageView.getImageY(), linkImageView.getImageX() + AndroidUtilities.dp(52), linkImageView.getImageY() + AndroidUtilities.dp(52), LetterDrawable.paint);
+                Theme.inlineDocDrawable.setBounds(x, y, x + w, y + h);
+                Theme.inlineDocDrawable.draw(canvas);
+            } else if (inlineResult != null && (inlineResult.type.equals("audio") || inlineResult.type.equals("voice"))) {
+                int w = Theme.inlineAudioDrawable.getIntrinsicWidth();
+                int h = Theme.inlineAudioDrawable.getIntrinsicHeight();
+                int x = linkImageView.getImageX() + (AndroidUtilities.dp(52) - w) / 2;
+                int y = linkImageView.getImageY() + (AndroidUtilities.dp(52) - h) / 2;
+                canvas.drawRect(linkImageView.getImageX(), linkImageView.getImageY(), linkImageView.getImageX() + AndroidUtilities.dp(52), linkImageView.getImageY() + AndroidUtilities.dp(52), LetterDrawable.paint);
+                Theme.inlineAudioDrawable.setBounds(x, y, x + w, y + h);
+                Theme.inlineAudioDrawable.draw(canvas);
+            } else if (inlineResult != null && (inlineResult.type.equals("venue") || inlineResult.type.equals("geo"))) {
+                int w = Theme.inlineLocationDrawable.getIntrinsicWidth();
+                int h = Theme.inlineLocationDrawable.getIntrinsicHeight();
+                int x = linkImageView.getImageX() + (AndroidUtilities.dp(52) - w) / 2;
+                int y = linkImageView.getImageY() + (AndroidUtilities.dp(52) - h) / 2;
+                canvas.drawRect(linkImageView.getImageX(), linkImageView.getImageY(), linkImageView.getImageX() + AndroidUtilities.dp(52), linkImageView.getImageY() + AndroidUtilities.dp(52), LetterDrawable.paint);
+                Theme.inlineLocationDrawable.setBounds(x, y, x + w, y + h);
+                Theme.inlineLocationDrawable.draw(canvas);
+            } else {
+                letterDrawable.draw(canvas);
+            }
+        } else {
+            if (inlineResult != null && (inlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaGeo || inlineResult.send_message instanceof TLRPC.TL_botInlineMessageMediaVenue)) {
+                int w = Theme.inlineLocationDrawable.getIntrinsicWidth();
+                int h = Theme.inlineLocationDrawable.getIntrinsicHeight();
+                int x = linkImageView.getImageX() + (linkImageView.getImageWidth() - w) / 2;
+                int y = linkImageView.getImageY() + (linkImageView.getImageHeight() - h) / 2;
+                canvas.drawRect(linkImageView.getImageX(), linkImageView.getImageY(), linkImageView.getImageX() + linkImageView.getImageWidth(), linkImageView.getImageY() + linkImageView.getImageHeight(), LetterDrawable.paint);
+                Theme.inlineLocationDrawable.setBounds(x, y, x + w, y + h);
+                Theme.inlineLocationDrawable.draw(canvas);
+            }
         }
         if (drawLinkImageView) {
+            canvas.save();
+            if (scaled && scale != 0.8f || !scaled && scale != 1.0f) {
+                long newTime = System.currentTimeMillis();
+                long dt = (newTime - lastUpdateTime);
+                lastUpdateTime = newTime;
+                if (scaled && scale != 0.8f) {
+                    scale -= dt / 400.0f;
+                    if (scale < 0.8f) {
+                        scale = 0.8f;
+                    }
+                } else {
+                    scale += dt / 400.0f;
+                    if (scale > 1.0f) {
+                        scale = 1.0f;
+                    }
+                }
+                invalidate();
+            }
+            canvas.scale(scale, scale, getMeasuredWidth() / 2, getMeasuredHeight() / 2);
             linkImageView.draw(canvas);
+            canvas.restore();
         }
-        if (mediaWebpage) {
+        if (mediaWebpage && (documentAttachType == DOCUMENT_ATTACH_TYPE_PHOTO || documentAttachType == DOCUMENT_ATTACH_TYPE_GIF)) {
             radialProgress.draw(canvas);
         }
 
@@ -410,10 +543,14 @@ protected void onDraw(Canvas canvas) {
                 canvas.drawLine(AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, paint);
             }
         }
+        if (needShadow && shadowDrawable != null) {
+            shadowDrawable.setBounds(0, 0, getMeasuredWidth(), AndroidUtilities.dp(3));
+            shadowDrawable.draw(canvas);
+        }
     }
 
     private Drawable getDrawableForCurrentState() {
-        return buttonState == 1 ? ResourceLoader.buttonStatesDrawables[6] : null;
+        return buttonState == 1 ? Theme.photoStatesDrawables[5][0] : null;
     }
 
     public void updateButtonState(boolean animated) {
@@ -422,27 +559,24 @@ public void updateButtonState(boolean animated) {
         }
         String fileName = null;
         File cacheFile = null;
-        if (result != null) {
-            if (result.photo instanceof TLRPC.TL_photo) {
-                TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(result.photo.sizes, AndroidUtilities.getPhotoSize(), true);
-                if (currentPhotoObject != null) {
-                    currentPhotoObject.size = -1;
-                }
+        if (inlineResult != null) {
+            if (inlineResult.document instanceof TLRPC.TL_document) {
+                fileName = FileLoader.getAttachFileName(inlineResult.document);
+                cacheFile = FileLoader.getPathToAttach(inlineResult.document);
+            } else if (inlineResult.photo instanceof TLRPC.TL_photo) {
+                TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(inlineResult.photo.sizes, AndroidUtilities.getPhotoSize(), true);
                 fileName = FileLoader.getAttachFileName(currentPhotoObject);
                 cacheFile = FileLoader.getPathToAttach(currentPhotoObject);
-            } else if (result.document instanceof TLRPC.TL_document) {
-                fileName = FileLoader.getAttachFileName(result.document);
-                cacheFile = FileLoader.getPathToAttach(result.document);
-            } else if (result.content_url != null) {
-                fileName = Utilities.MD5(result.content_url) + "." + ImageLoader.getHttpUrlExtension(result.content_url, "jpg");
+            } else if (inlineResult.content_url != null) {
+                fileName = Utilities.MD5(inlineResult.content_url) + "." + ImageLoader.getHttpUrlExtension(inlineResult.content_url, "jpg");
                 cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
-            } else if (result.thumb_url != null) {
-                fileName = Utilities.MD5(result.thumb_url) + "." + ImageLoader.getHttpUrlExtension(result.thumb_url, "jpg");
+            } else if (inlineResult.thumb_url != null) {
+                fileName = Utilities.MD5(inlineResult.thumb_url) + "." + ImageLoader.getHttpUrlExtension(inlineResult.thumb_url, "jpg");
                 cacheFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
             }
-        } else if (gif != null) {
-            fileName = FileLoader.getAttachFileName(gif);
-            cacheFile = FileLoader.getPathToAttach(gif);
+        } else if (documentAttach != null) {
+            fileName = FileLoader.getAttachFileName(documentAttach);
+            cacheFile = FileLoader.getPathToAttach(documentAttach);
         }
         if (fileName == null) {
             radialProgress.setBackground(null, false, false);
@@ -473,7 +607,7 @@ public void setDelegate(ContextLinkCellDelegate contextLinkCellDelegate) {
     }
 
     public TLRPC.BotInlineResult getResult() {
-        return result;
+        return inlineResult;
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 53bb5a867..d7a67358f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -395,7 +395,7 @@ public void buildLayout() {
                             if (mess.length() > 150) {
                                 mess = mess.substring(0, 150);
                             }
-                            mess = mess.replace("\n", " ");
+                            mess = mess.replace('\n', ' ');
                             messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name.replace("\n", ""), mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                         } else {
                             if (message.messageOwner.media != null && !message.isMediaEmpty()) {
@@ -407,7 +407,7 @@ public void buildLayout() {
                                     if (mess.length() > 150) {
                                         mess = mess.substring(0, 150);
                                     }
-                                    mess = mess.replace("\n", " ");
+                                    mess = mess.replace('\n', ' ');
                                     messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name.replace("\n", ""), mess), AndroidUtilities.FLAG_TAG_COLOR), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
                                 }
                             }
@@ -559,7 +559,7 @@ public void buildLayout() {
         }
 
         nameWidth = Math.max(AndroidUtilities.dp(12), nameWidth);
-        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace('\n', ' '), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
         try {
             nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
         } catch (Exception e) {
@@ -609,7 +609,7 @@ public void buildLayout() {
             if (mess.length() > 150) {
                 mess = mess.substring(0, 150);
             }
-            mess = mess.replace("\n", " ");
+            mess = mess.replace('\n', ' ');
             messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17), false);
         }
         messageWidth = Math.max(AndroidUtilities.dp(12), messageWidth);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
index 37f2fae98..d2219fc22 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -12,11 +12,14 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.Rect;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.widget.FrameLayout;
@@ -33,6 +36,7 @@
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 
 public class DrawerProfileCell extends FrameLayout {
 
@@ -43,10 +47,11 @@
     private Rect srcRect = new Rect();
     private Rect destRect = new Rect();
     private Paint paint = new Paint();
+    private int currentColor;
 
     public DrawerProfileCell(Context context) {
         super(context);
-        setBackgroundColor(0xff4c84b5);
+        setBackgroundColor(Theme.ACTION_BAR_PROFILE_COLOR);
 
         shadowView = new ImageView(context);
         shadowView.setVisibility(INVISIBLE);
@@ -66,6 +71,7 @@ public DrawerProfileCell(Context context) {
         nameTextView.setMaxLines(1);
         nameTextView.setSingleLine(true);
         nameTextView.setGravity(Gravity.LEFT);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
         addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 16, 28));
 
         phoneTextView = new TextView(context);
@@ -94,6 +100,12 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     @Override
     protected void onDraw(Canvas canvas) {
         Drawable backgroundDrawable = ApplicationLoader.getCachedWallpaper();
+        int color = ApplicationLoader.getServiceMessageColor();
+        if (currentColor != color) {
+            currentColor = color;
+            shadowView.getDrawable().setColorFilter(new PorterDuffColorFilter(color | 0xff000000, PorterDuff.Mode.MULTIPLY));
+        }
+
         if (ApplicationLoader.isCustomTheme() && backgroundDrawable != null) {
             phoneTextView.setTextColor(0xffffffff);
             shadowView.setVisibility(VISIBLE);
@@ -131,7 +143,7 @@ public void setUser(TLRPC.User user) {
         nameTextView.setText(UserObject.getUserName(user));
         phoneTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
         AvatarDrawable avatarDrawable = new AvatarDrawable(user);
-        avatarDrawable.setColor(0xff5c98cd);
+        avatarDrawable.setColor(Theme.ACTION_BAR_MAIN_AVATAR_COLOR);
         avatarImageView.setImage(photo, "50_50", avatarDrawable);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
index 2a9aba56a..94ffcd3c4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
@@ -9,9 +9,11 @@
 package org.telegram.ui.Cells;
 
 import android.content.Context;
+import android.os.Build;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.view.MotionEvent;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
@@ -66,6 +68,16 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
     }
 
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(event.getX(), event.getY());
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
     public void setUser(TLRPC.User user) {
         if (user == null) {
             nameTextView.setText("");
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
index e39fb48a2..c4d28b1d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerPhotoCell.java
@@ -52,7 +52,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(MeasureSpec.makeMeasureSpec(itemWidth, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(itemWidth, MeasureSpec.EXACTLY));
     }
 
-    public void setChecked(final boolean checked, boolean animated) {
+    public void setChecked(final boolean checked, final boolean animated) {
         checkBox.setChecked(checked, animated);
         if (animator != null) {
             animator.cancel();
@@ -69,13 +69,20 @@ public void setChecked(final boolean checked, boolean animated) {
             animator.addListener(new AnimatorListenerAdapterProxy() {
                 @Override
                 public void onAnimationEnd(Object animation) {
-                    if (animator.equals(animation)) {
+                    if (animator != null && animator.equals(animation)) {
                         animator = null;
                         if (!checked) {
                             setBackgroundColor(0);
                         }
                     }
                 }
+
+                @Override
+                public void onAnimationCancel(Object animation) {
+                    if (animator != null && animator.equals(animation)) {
+                        animator = null;
+                    }
+                }
             });
             animator.start();
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
index dbba717d1..b09451644 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -32,6 +32,7 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.ActionBar.Theme;
 
 public class ProfileSearchCell extends BaseCell {
 
@@ -104,7 +105,7 @@ public ProfileSearchCell(Context context) {
 
             onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             onlinePaint.setTextSize(AndroidUtilities.dp(16));
-            onlinePaint.setColor(0xff316f9f);
+            onlinePaint.setColor(Theme.MSG_LINK_TEXT_COLOR);
 
             offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             offlinePaint.setTextSize(AndroidUtilities.dp(16));
@@ -263,7 +264,7 @@ public void buildLayout() {
             } else if (user != null) {
                 nameString2 = UserObject.getUserName(user);
             }
-            nameString = nameString2.replace("\n", " ");
+            nameString = nameString2.replace('\n', ' ');
         }
         if (nameString.length() == 0) {
             if (user != null && user.phone != null && user.phone.length() != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
index e78a8c390..e7d11b6ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SendLocationCell.java
@@ -17,7 +17,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SimpleTextView;
+import org.telegram.ui.ActionBar.SimpleTextView;
 
 public class SendLocationCell extends FrameLayout {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
index 6f2257ef4..c7d9a88ab 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShadowSectionCell.java
@@ -16,13 +16,19 @@
 
 public class ShadowSectionCell extends View {
 
+    private int size = 12;
+
     public ShadowSectionCell(Context context) {
         super(context);
         setBackgroundResource(R.drawable.greydivider);
     }
 
+    public void setSize(int value) {
+        size = value;
+    }
+
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(12), MeasureSpec.EXACTLY));
+        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(size), MeasureSpec.EXACTLY));
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
index 5e45e5262..d9793952e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ShareDialogCell.java
@@ -9,9 +9,11 @@
 package org.telegram.ui.Cells;
 
 import android.content.Context;
+import android.os.Build;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.view.MotionEvent;
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
@@ -34,6 +36,7 @@
 
     public ShareDialogCell(Context context) {
         super(context);
+        setBackgroundResource(R.drawable.list_selector);
 
         imageView = new BackupImageView(context);
         imageView.setRoundRadius(AndroidUtilities.dp(27));
@@ -61,6 +64,16 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(100), MeasureSpec.EXACTLY));
     }
 
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(event.getX(), event.getY());
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
     public void setDialog(TLRPC.Dialog dialog, boolean checked, CharSequence name) {
         int lower_id = (int) dialog.id;
         TLRPC.FileLocation photo = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
index 5f6238ec1..63475c9b3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
@@ -146,7 +146,7 @@ private int getThumbForNameOrMime(String name, String mime) {
             }
             if (color == -1) {
                 int idx;
-                String ext = (idx = name.lastIndexOf(".")) == -1 ? "" : name.substring(idx + 1);
+                String ext = (idx = name.lastIndexOf('.')) == -1 ? "" : name.substring(idx + 1);
                 if (ext.length() != 0) {
                     color = ext.charAt(0) % icons.length;
                 } else {
@@ -198,34 +198,49 @@ public void setChecked(boolean checked, boolean animated) {
         checkBox.setChecked(checked, animated);
     }
 
-    public void setDocument(MessageObject document, boolean divider) {
+    public void setDocument(MessageObject messageObject, boolean divider) {
         needDivider = divider;
-        message = document;
+        message = messageObject;
         loaded = false;
         loading = false;
 
-        if (document != null && document.messageOwner.media != null && document.messageOwner.media.document != null) {
+        if (messageObject != null && messageObject.getDocument() != null) {
             int idx;
-            String name = FileLoader.getDocumentFileName(document.messageOwner.media.document);
-            if (name.length() == 0) {
-                if (document.isMusic()) {
-                    name = document.getMusicAuthor() + " - " + document.getMusicTitle();
+            String name = null;
+            if (messageObject.isMusic()) {
+                TLRPC.Document document;
+                if (messageObject.type == 0) {
+                    document = messageObject.messageOwner.media.webpage.document;
+                } else {
+                    document = messageObject.messageOwner.media.document;
+                }
+                for (int a = 0; a < document.attributes.size(); a++) {
+                    TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                    if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                        if (attribute.performer != null && attribute.performer.length() != 0 || attribute.title != null && attribute.title.length() != 0) {
+                            name = messageObject.getMusicAuthor() + " - " + messageObject.getMusicTitle();
+                        }
+                    }
                 }
             }
+            String fileName = FileLoader.getDocumentFileName(messageObject.getDocument());
+            if (name == null) {
+                name = fileName;
+            }
+            nameTextView.setText(name);
             placeholderImabeView.setVisibility(VISIBLE);
             extTextView.setVisibility(VISIBLE);
-            placeholderImabeView.setImageResource(getThumbForNameOrMime(name, document.messageOwner.media.document.mime_type));
-            nameTextView.setText(name);
-            extTextView.setText((idx = name.lastIndexOf(".")) == -1 ? "" : name.substring(idx + 1).toLowerCase());
-            if (document.messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty || document.messageOwner.media.document.thumb == null) {
+            placeholderImabeView.setImageResource(getThumbForNameOrMime(fileName, messageObject.getDocument().mime_type));
+            extTextView.setText((idx = fileName.lastIndexOf('.')) == -1 ? "" : fileName.substring(idx + 1).toLowerCase());
+            if (messageObject.getDocument().thumb instanceof TLRPC.TL_photoSizeEmpty || messageObject.getDocument().thumb == null) {
                 thumbImageView.setVisibility(INVISIBLE);
                 thumbImageView.setImageBitmap(null);
             } else {
                 thumbImageView.setVisibility(VISIBLE);
-                thumbImageView.setImage(document.messageOwner.media.document.thumb.location, "40_40", (Drawable) null);
+                thumbImageView.setImage(messageObject.getDocument().thumb.location, "40_40", (Drawable) null);
             }
-            long date = (long) document.messageOwner.date * 1000;
-            dateTextView.setText(String.format("%s, %s", AndroidUtilities.formatFileSize(document.messageOwner.media.document.size), LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date)))));
+            long date = (long) messageObject.messageOwner.date * 1000;
+            dateTextView.setText(String.format("%s, %s", AndroidUtilities.formatFileSize(messageObject.getDocument().size), LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date)))));
         } else {
             nameTextView.setText("");
             extTextView.setText("");
@@ -248,7 +263,7 @@ public void updateFileExistIcon() {
             if (message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0 || !(new File(message.messageOwner.attachPath).exists())) {
                 cacheFile = FileLoader.getPathToMessage(message.messageOwner);
                 if (!cacheFile.exists()) {
-                    fileName = FileLoader.getAttachFileName(message.messageOwner.media.document);
+                    fileName = FileLoader.getAttachFileName(message.getDocument());
                 }
             }
             loaded = false;
@@ -286,7 +301,7 @@ public void updateFileExistIcon() {
         }
     }
 
-    public MessageObject getDocument() {
+    public MessageObject getMessage() {
         return message;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
index 48d272883..4693f4890 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedLinkCell.java
@@ -10,13 +10,11 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.Intent;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
-import android.provider.Browser;
 import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
@@ -33,11 +31,13 @@
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LetterDrawable;
 import org.telegram.ui.Components.LinkPath;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -100,7 +100,7 @@ public SharedLinkCell(Context context) {
             paint.setStrokeWidth(1);
 
             urlPaint = new Paint();
-            urlPaint.setColor(0x33316f9f);
+            urlPaint.setColor(Theme.MSG_LINK_SELECT_BACKGROUND_COLOR);
         }
 
         setWillNotDraw(false);
@@ -216,7 +216,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         if (title != null) {
             try {
                 int width = (int) Math.ceil(titleTextPaint.measureText(title));
-                CharSequence titleFinal = TextUtils.ellipsize(title.replace("\n", " "), titleTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.END);
+                CharSequence titleFinal = TextUtils.ellipsize(title.replace('\n', ' '), titleTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.END);
                 titleLayout = new StaticLayout(titleFinal, titleTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
@@ -252,7 +252,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 try {
                     String link = links.get(a);
                     int width = (int) Math.ceil(descriptionTextPaint.measureText(link));
-                    CharSequence linkFinal = TextUtils.ellipsize(link.replace("\n", " "), descriptionTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.MIDDLE);
+                    CharSequence linkFinal = TextUtils.ellipsize(link.replace('\n', ' '), descriptionTextPaint, Math.min(width, maxWidth), TextUtils.TruncateAt.MIDDLE);
                     StaticLayout layout = new StaticLayout(linkFinal, descriptionTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                     linkY = description2Y;
                     if (descriptionLayout2 != null && descriptionLayout2.getLineCount() != 0) {
@@ -378,7 +378,7 @@ public boolean onTouchEvent(MotionEvent event) {
                                 pressedLink = a;
                                 linkPreviewPressed = true;
                                 try {
-                                    urlPath.setCurrentLayout(layout, 0);
+                                    urlPath.setCurrentLayout(layout, 0, 0);
                                     layout.getSelectionPath(0, layout.getText().length(), urlPath);
                                 } catch (Exception e) {
                                     FileLog.e("tmessages", e);
@@ -390,7 +390,7 @@ public boolean onTouchEvent(MotionEvent event) {
                                     if (webPage != null && Build.VERSION.SDK_INT >= 16 && webPage.embed_url != null && webPage.embed_url.length() != 0) {
                                         delegate.needOpenWebView(webPage);
                                     } else {
-                                        AndroidUtilities.openUrl(getContext(), links.get(pressedLink));
+                                        Browser.openUrl(getContext(), links.get(pressedLink));
                                     }
                                 } catch (Exception e) {
                                     FileLog.e("tmessages", e);
@@ -461,7 +461,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (!linkLayout.isEmpty()) {
-            descriptionTextPaint.setColor(0xff316f9f);
+            descriptionTextPaint.setColor(Theme.MSG_LINK_TEXT_COLOR);
             int offset = 0;
             for (int a = 0; a < linkLayout.size(); a++) {
                 StaticLayout layout = linkLayout.get(a);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
index c703e0353..333a86877 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
@@ -123,13 +123,20 @@ public void setChecked(final boolean checked, boolean animated) {
                 animator.addListener(new AnimatorListenerAdapterProxy() {
                     @Override
                     public void onAnimationEnd(Object animation) {
-                        if (animator.equals(animation)) {
+                        if (animator != null && animator.equals(animation)) {
                             animator = null;
                             if (!checked) {
                                 setBackgroundColor(0);
                             }
                         }
                     }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        if (animator != null && animator.equals(animation)) {
+                            animator = null;
+                        }
+                    }
                 });
                 animator.start();
             } else {
@@ -229,8 +236,8 @@ public void setItem(int a, int index, MessageObject messageObject) {
             if (messageObject.isVideo()) {
                 photoVideoView.videoInfoContainer.setVisibility(VISIBLE);
                 int duration = 0;
-                for (int b = 0; b < messageObject.messageOwner.media.document.attributes.size(); b++) {
-                    TLRPC.DocumentAttribute attribute = messageObject.messageOwner.media.document.attributes.get(b);
+                for (int b = 0; b < messageObject.getDocument().attributes.size(); b++) {
+                    TLRPC.DocumentAttribute attribute = messageObject.getDocument().attributes.get(b);
                     if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
                         duration = attribute.duration;
                         break;
@@ -239,8 +246,8 @@ public void setItem(int a, int index, MessageObject messageObject) {
                 int minutes = duration / 60;
                 int seconds = duration - minutes * 60;
                 photoVideoView.videoTextView.setText(String.format("%d:%02d", minutes, seconds));
-                if (messageObject.messageOwner.media.document.thumb != null) {
-                    TLRPC.FileLocation location = messageObject.messageOwner.media.document.thumb.location;
+                if (messageObject.getDocument().thumb != null) {
+                    TLRPC.FileLocation location = messageObject.getDocument().thumb.location;
                     photoVideoView.imageView.setImage(null, null, null, ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.photo_placeholder_in), null, location, "b", null, 0);
                 } else {
                     photoVideoView.imageView.setImageResource(R.drawable.photo_placeholder_in);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
index f04f7e70b..d8dc1d564 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/StickerSetCell.java
@@ -26,6 +26,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
 
@@ -76,21 +77,10 @@ public StickerSetCell(Context context) {
 
         optionsButton = new ImageView(context);
         optionsButton.setFocusable(false);
-        optionsButton.setBackgroundResource(R.drawable.bar_selector_grey);
+        optionsButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR));
         optionsButton.setImageResource(R.drawable.doc_actions_b);
         optionsButton.setScaleType(ImageView.ScaleType.CENTER);
         addView(optionsButton, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP));
-
-        /*ActionBarMenuItem menuItem = new ActionBarMenuItem(context, null, R.drawable.bar_selector_grey);
-        menuItem.setIcon(R.drawable.doc_actions_b);
-        addView(menuItem, LayoutHelper.createFrame(40, 40, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 40 : 0, 0, LocaleController.isRTL ? 0 : 40, 0));
-        menuItem.addSubItem(1, "test", 0);
-        menuItem.addSubItem(2, "test", 0);
-        menuItem.addSubItem(3, "test", 0);
-        menuItem.addSubItem(4, "test", 0);
-        menuItem.addSubItem(5, "test", 0);
-        menuItem.addSubItem(6, "test", 0);
-        menuItem.addSubItem(7, "test", 0);*/
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java
index c9a9fee64..37b6f197e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextBlockCell.java
@@ -38,7 +38,7 @@ public TextBlockCell(Context context) {
         textView.setTextColor(0xff212121);
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 8, 17, 8));
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 10, 17, 10));
     }
 
     public void setTextColor(int color) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
index 0cc41f21f..cb9751307 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
@@ -10,58 +10,78 @@
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
-import android.text.TextUtils;
-import android.util.TypedValue;
 import android.view.Gravity;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
-import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.SimpleTextView;
 
 public class TextCell extends FrameLayout {
 
-    private TextView textView;
-    private TextView valueTextView;
+    private SimpleTextView textView;
+    private SimpleTextView valueTextView;
     private ImageView imageView;
     private ImageView valueImageView;
 
     public TextCell(Context context) {
         super(context);
 
-        textView = new TextView(context);
+        textView = new SimpleTextView(context);
         textView.setTextColor(0xff212121);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        textView.setLines(1);
-        textView.setMaxLines(1);
-        textView.setSingleLine(true);
-        textView.setEllipsize(TextUtils.TruncateAt.END);
-        textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 16 : 71, 0, LocaleController.isRTL ? 71 : 16, 0));
-
-        valueTextView = new TextView(context);
+        textView.setTextSize(16);
+        textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        addView(textView);
+
+        valueTextView = new SimpleTextView(context);
         valueTextView.setTextColor(0xff2f8cc9);
-        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        valueTextView.setLines(1);
-        valueTextView.setMaxLines(1);
-        valueTextView.setSingleLine(true);
-        valueTextView.setGravity((LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL);
-        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 24 : 0, 0, LocaleController.isRTL ? 0 : 24, 0));
+        valueTextView.setTextSize(16);
+        valueTextView.setGravity(LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT);
+        addView(valueTextView);
 
         imageView = new ImageView(context);
         imageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 16, 5, LocaleController.isRTL ? 16 : 0, 0));
+        addView(imageView);
 
         valueImageView = new ImageView(context);
         valueImageView.setScaleType(ImageView.ScaleType.CENTER);
-        addView(valueImageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.CENTER_VERTICAL, LocaleController.isRTL ? 24 : 0, 0, LocaleController.isRTL ? 0 : 24, 0));
+        addView(valueImageView);
     }
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int height = AndroidUtilities.dp(48);
+
+        valueTextView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(24), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20), MeasureSpec.EXACTLY));
+        textView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + 24), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20), MeasureSpec.EXACTLY));
+        imageView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+        valueImageView.measure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
+
+        setMeasuredDimension(width, AndroidUtilities.dp(48));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        int height = bottom - top;
+        int width = right - left;
+
+        int viewTop = (height - valueTextView.getTextHeight()) / 2;
+        int viewLeft = LocaleController.isRTL ? AndroidUtilities.dp(24) : 0;
+        valueTextView.layout(viewLeft, viewTop, viewLeft + valueTextView.getMeasuredWidth(), viewTop + valueTextView.getMeasuredHeight());
+
+        viewTop = (height - textView.getTextHeight()) / 2;
+        viewLeft = !LocaleController.isRTL ? AndroidUtilities.dp(71) : AndroidUtilities.dp(24);
+        textView.layout(viewLeft, viewTop, viewLeft + textView.getMeasuredWidth(), viewTop + textView.getMeasuredHeight());
+
+        viewTop = AndroidUtilities.dp(5);
+        viewLeft = !LocaleController.isRTL ? AndroidUtilities.dp(16) : width - imageView.getMeasuredWidth() - AndroidUtilities.dp(16);
+        imageView.layout(viewLeft, viewTop, viewLeft + imageView.getMeasuredWidth(), viewTop + imageView.getMeasuredHeight());
+
+        viewTop = (height - valueImageView.getMeasuredHeight()) / 2;
+        viewLeft = LocaleController.isRTL ? AndroidUtilities.dp(24) : width - valueImageView.getMeasuredWidth() - AndroidUtilities.dp(24);
+        valueImageView.layout(viewLeft, viewTop, viewLeft + valueImageView.getMeasuredWidth(), viewTop + valueImageView.getMeasuredHeight());
     }
 
     public void setTextColor(int color) {
@@ -70,6 +90,7 @@ public void setTextColor(int color) {
 
     public void setText(String text) {
         textView.setText(text);
+        valueTextView.setText(null);
         imageView.setVisibility(INVISIBLE);
         valueTextView.setVisibility(INVISIBLE);
         valueImageView.setVisibility(INVISIBLE);
@@ -77,6 +98,7 @@ public void setText(String text) {
 
     public void setTextAndIcon(String text, int resId) {
         textView.setText(text);
+        valueTextView.setText(null);
         imageView.setImageResource(resId);
         imageView.setVisibility(VISIBLE);
         valueTextView.setVisibility(INVISIBLE);
@@ -94,6 +116,7 @@ public void setTextAndValue(String text, String value) {
 
     public void setTextAndValueDrawable(String text, Drawable drawable) {
         textView.setText(text);
+        valueTextView.setText(null);
         valueImageView.setVisibility(VISIBLE);
         valueImageView.setImageDrawable(drawable);
         valueTextView.setVisibility(INVISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
index 7c343a931..71af0bb96 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCheckCell.java
@@ -12,6 +12,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.os.Build;
+import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.widget.TextView;
@@ -25,9 +26,11 @@
 public class TextCheckCell extends FrameLayoutFixed {
 
     private TextView textView;
+    private TextView valueTextView;
     private Switch checkBox;
     private static Paint paint;
     private boolean needDivider;
+    private boolean isMultiline;
 
     public TextCheckCell(Context context) {
         super(context);
@@ -45,7 +48,19 @@ public TextCheckCell(Context context) {
         textView.setMaxLines(1);
         textView.setSingleLine(true);
         textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
-        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 17, 0, 17, 0));
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 64 : 17, 0, LocaleController.isRTL ? 17 : 64, 0));
+
+        valueTextView = new TextView(context);
+        valueTextView.setTextColor(0xff8a8a8a);
+        valueTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        valueTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        valueTextView.setLines(1);
+        valueTextView.setMaxLines(1);
+        valueTextView.setSingleLine(true);
+        valueTextView.setPadding(0, 0, 0, 0);
+        valueTextView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(valueTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 64 : 17, 35, LocaleController.isRTL ? 17 : 64, 0));
 
         checkBox = new Switch(context);
         checkBox.setDuplicateParentStateEnabled(false);
@@ -57,7 +72,11 @@ public TextCheckCell(Context context) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+        if (isMultiline) {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+        } else {
+            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(valueTextView.getVisibility() == VISIBLE ? 64 : 48) + (needDivider ? 1 : 0), MeasureSpec.EXACTLY));
+        }
     }
 
     public void setTextAndCheck(String text, boolean checked, boolean divider) {
@@ -66,8 +85,45 @@ public void setTextAndCheck(String text, boolean checked, boolean divider) {
             checkBox.resetLayout();
             checkBox.requestLayout();
         }
+        isMultiline = false;
         checkBox.setChecked(checked);
         needDivider = divider;
+        valueTextView.setVisibility(GONE);
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.topMargin = 0;
+        textView.setLayoutParams(layoutParams);
+        setWillNotDraw(!divider);
+    }
+
+    public void setTextAndValueAndCheck(String text, String value, boolean checked, boolean multiline, boolean divider) {
+        textView.setText(text);
+        valueTextView.setText(value);
+        if (Build.VERSION.SDK_INT < 11) {
+            checkBox.resetLayout();
+            checkBox.requestLayout();
+        }
+        checkBox.setChecked(checked);
+        needDivider = divider;
+        valueTextView.setVisibility(VISIBLE);
+        isMultiline = multiline;
+        if (multiline) {
+            valueTextView.setLines(0);
+            valueTextView.setMaxLines(0);
+            valueTextView.setSingleLine(false);
+            valueTextView.setEllipsize(null);
+            valueTextView.setPadding(0, 0, 0, AndroidUtilities.dp(11));
+        } else {
+            valueTextView.setLines(1);
+            valueTextView.setMaxLines(1);
+            valueTextView.setSingleLine(true);
+            valueTextView.setEllipsize(TextUtils.TruncateAt.END);
+            valueTextView.setPadding(0, 0, 0, 0);
+        }
+        LayoutParams layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.topMargin = AndroidUtilities.dp(10);
+        textView.setLayoutParams(layoutParams);
         setWillNotDraw(!divider);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
index baf0f8279..b008bb767 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextInfoPrivacyCell.java
@@ -18,6 +18,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 
 public class TextInfoPrivacyCell extends FrameLayout {
 
@@ -28,7 +29,7 @@ public TextInfoPrivacyCell(Context context) {
 
         textView = new TextView(context);
         textView.setTextColor(0xff808080);
-        textView.setLinkTextColor(0xff316f9f);
+        textView.setLinkTextColor(Theme.MSG_LINK_TEXT_COLOR);
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
         textView.setPadding(0, AndroidUtilities.dp(10), 0, AndroidUtilities.dp(17));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
index 1d99c59ea..7aa88dc29 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSettingsCell.java
@@ -87,6 +87,10 @@ public void setTextColor(int color) {
         textView.setTextColor(color);
     }
 
+    public void setTextValueColor(int color) {
+        valueTextView.setTextColor(color);
+    }
+
     public void setText(String text, boolean divider) {
         textView.setText(text);
         valueTextView.setVisibility(INVISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
index 547e8e348..257eb9c58 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
@@ -27,7 +27,7 @@
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.CheckBoxSquare;
 import org.telegram.ui.Components.LayoutHelper;
-import org.telegram.ui.Components.SimpleTextView;
+import org.telegram.ui.ActionBar.SimpleTextView;
 
 public class UserCell extends FrameLayout {
 
@@ -37,6 +37,7 @@
     private ImageView imageView;
     private CheckBox checkBox;
     private CheckBoxSquare checkBoxBig;
+    private ImageView adminImage;
 
     private AvatarDrawable avatarDrawable;
     private TLObject currentObject = null;
@@ -52,7 +53,7 @@
     private int statusColor = 0xffa8a8a8;
     private int statusOnlineColor = 0xff3b84c0;
 
-    public UserCell(Context context, int padding, int checkbox) {
+    public UserCell(Context context, int padding, int checkbox, boolean admin) {
         super(context);
 
         avatarDrawable = new AvatarDrawable();
@@ -65,7 +66,7 @@ public UserCell(Context context, int padding, int checkbox) {
         nameTextView.setTextColor(0xff212121);
         nameTextView.setTextSize(17);
         nameTextView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
-        addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 : (68 + padding), 11.5f, LocaleController.isRTL ? (68 + padding) : 28, 0));
+        addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 + (checkbox == 2 ? 18 : 0) : (68 + padding), 11.5f, LocaleController.isRTL ? (68 + padding) : 28 + (checkbox == 2 ? 18 : 0), 0));
 
         statusTextView = new SimpleTextView(context);
         statusTextView.setTextSize(14);
@@ -85,6 +86,24 @@ public UserCell(Context context, int padding, int checkbox) {
             checkBox.setVisibility(INVISIBLE);
             addView(checkBox, LayoutHelper.createFrame(22, 22, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 37 + padding, 38, LocaleController.isRTL ? 37 + padding : 0, 0));
         }
+
+        if (admin) {
+            adminImage = new ImageView(context);
+            addView(adminImage, LayoutHelper.createFrame(16, 16, (LocaleController.isRTL ? Gravity.LEFT : Gravity.RIGHT) | Gravity.TOP, LocaleController.isRTL ? 24 : 0, 13.5f, LocaleController.isRTL ? 0 : 24, 0));
+        }
+    }
+
+    public void setIsAdmin(int value) {
+        if (adminImage == null) {
+            return;
+        }
+        adminImage.setVisibility(value != 0 ? VISIBLE : GONE);
+        nameTextView.setPadding(LocaleController.isRTL && value != 0 ? AndroidUtilities.dp(16) : 0, 0, !LocaleController.isRTL && value != 0 ? AndroidUtilities.dp(16) : 0, 0);
+        if (value == 1) {
+            adminImage.setImageResource(R.drawable.admin_star);
+        } else if (value == 2) {
+            adminImage.setImageResource(R.drawable.admin_star2);
+        }
     }
 
     public void setData(TLObject user, CharSequence name, CharSequence status, int resId) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
index d42160a75..a37de6fe2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/WallpaperCell.java
@@ -16,7 +16,6 @@
 import android.widget.ImageView;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.BackupImageView;
@@ -64,7 +63,18 @@ public void setWallpaper(TLRPC.WallPaper wallpaper, int selectedBackground) {
                 imageView.setImageBitmap(null);
                 imageView.setBackgroundColor(0xff000000 | wallpaper.bg_color);
             } else {
-                TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallpaper.sizes, AndroidUtilities.dp(100));
+                int side = AndroidUtilities.dp(100);
+                TLRPC.PhotoSize size = null;
+                for (int a = 0; a < wallpaper.sizes.size(); a++) {
+                    TLRPC.PhotoSize obj = wallpaper.sizes.get(a);
+                    if (obj == null) {
+                        continue;
+                    }
+                    int currentSide = obj.w >= obj.h ? obj.w : obj.h;
+                    if (size == null || side > 100 && size.location != null && size.location.dc_id == Integer.MIN_VALUE || obj instanceof TLRPC.TL_photoCachedSize || currentSide <= side) {
+                        size = obj;
+                    }
+                }
                 if (size != null && size.location != null) {
                     imageView.setImage(size.location, "100_100", (Drawable) null);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 2a3f30834..3af498a7f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -166,6 +166,7 @@ private void saveName() {
             return;
         }
         TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
+        req.flags = 3;
         currentUser.first_name = req.first_name = newFirst;
         currentUser.last_name = req.last_name = newLast;
         TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index d4ab922a9..4add7d3e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -1,5 +1,5 @@
 /*
- * This is the source code of Telegram for Android v. 2.0.x.
+ * This is the source code of Telegram for Android v. 3.x.x.
  * It is licensed under GNU GPL v. 2 or later.
  * You should have received a copy of the license in this archive (see LICENSE).
  *
@@ -8,17 +8,25 @@
 
 package org.telegram.ui;
 
+import android.Manifest;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlertDialog;
+import android.app.Dialog;
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.os.Build;
 import android.os.Bundle;
 import android.telephony.TelephonyManager;
 import android.text.Editable;
 import android.text.InputFilter;
 import android.text.InputType;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.TypedValue;
@@ -30,6 +38,7 @@
 import android.widget.AdapterView;
 import android.widget.EditText;
 import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
@@ -59,7 +68,6 @@
 import org.telegram.ui.Components.HintEditText;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SlideView;
-import org.telegram.ui.Components.TypefaceSpan;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
@@ -74,17 +82,21 @@
 public class ChangePhoneActivity extends BaseFragment {
 
     private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[2];
+    private SlideView[] views = new SlideView[5];
     private ProgressDialog progressDialog;
+    private Dialog permissionsDialog;
+    private ArrayList<String> permissionsItems = new ArrayList<>();
+    private boolean checkPermissions = true;
+    private View doneButton;
 
     private final static int done_button = 1;
 
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
-        for (SlideView v : views) {
-            if (v != null) {
-                v.onDestroyActivity();
+        for (int a = 0; a < views.length; a++) {
+            if (views[a] != null) {
+                views[a].onDestroyActivity();
             }
         }
         if (progressDialog != null) {
@@ -114,39 +126,25 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
         fragmentView = new ScrollView(context);
         ScrollView scrollView = (ScrollView) fragmentView;
         scrollView.setFillViewport(true);
 
         FrameLayout frameLayout = new FrameLayout(context);
-        scrollView.addView(frameLayout);
-        ScrollView.LayoutParams layoutParams = (ScrollView.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = ScrollView.LayoutParams.MATCH_PARENT;
-        layoutParams.height = ScrollView.LayoutParams.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        frameLayout.setLayoutParams(layoutParams);
+        scrollView.addView(frameLayout, LayoutHelper.createScroll(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT));
 
         views[0] = new PhoneView(context);
-        views[0].setVisibility(View.VISIBLE);
-        frameLayout.addView(views[0], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
-
-        views[1] = new LoginActivitySmsView(context);
-        views[1].setVisibility(View.GONE);
-        frameLayout.addView(views[1], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0));
-
-        try {
-            if (views[0] == null || views[1] == null) {
-                FrameLayout parent = (FrameLayout) ((ScrollView) fragmentView).getChildAt(0);
-                for (int a = 0; a < views.length; a++) {
-                    if (views[a] == null) {
-                        views[a] = (SlideView) parent.getChildAt(a);
-                    }
-                }
-            }
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
+        views[1] = new LoginActivitySmsView(context, 1);
+        views[2] = new LoginActivitySmsView(context, 2);
+        views[3] = new LoginActivitySmsView(context, 3);
+        views[4] = new LoginActivitySmsView(context, 4);
+
+        for (int a = 0; a < views.length; a++) {
+            views[a].setVisibility(a == 0 ? View.VISIBLE : View.GONE);
+            frameLayout.addView(views[a], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, a == 0 ? LayoutHelper.WRAP_CONTENT : LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 26 : 18, 30, AndroidUtilities.isTablet() ? 26 : 18, 0));
+            //LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 30, 16, 0)
         }
 
         actionBar.setTitle(views[0].getHeaderName());
@@ -160,16 +158,34 @@ public void onResume() {
         AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
     }
 
+    @Override
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == 6) {
+            checkPermissions = false;
+            if (currentViewNum == 0) {
+                views[currentViewNum].onNextPressed();
+            }
+        }
+    }
+
+    @Override
+    protected void onDialogDismiss(Dialog dialog) {
+        if (Build.VERSION.SDK_INT >= 23 && dialog == permissionsDialog && !permissionsItems.isEmpty()) {
+            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
+        }
+    }
+
     @Override
     public boolean onBackPressed() {
         if (currentViewNum == 0) {
-            for (SlideView v : views) {
-                if (v != null) {
-                    v.onDestroyActivity();
+            for (int a = 0; a < views.length; a++) {
+                if (views[a] != null) {
+                    views[a].onDestroyActivity();
                 }
             }
             return true;
-        } else if (currentViewNum == 1) {
+        } else {
+            views[currentViewNum].onBackPressed();
             setPage(0, true, null, true);
         }
         return false;
@@ -217,6 +233,14 @@ public void needHideProgress() {
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
+        if (page == 3) {
+            doneButton.setVisibility(View.GONE);
+        } else {
+            if (page == 0) {
+                checkPermissions = true;
+            }
+            doneButton.setVisibility(View.VISIBLE);
+        }
         if(android.os.Build.VERSION.SDK_INT > 10) {
             final SlideView outView = views[currentViewNum];
             final SlideView newView = views[page];
@@ -257,6 +281,40 @@ public void onAnimationEnd(Object animation) {
         }
     }
 
+    private void fillNextCodeParams(Bundle params, TLRPC.TL_auth_sentCode res) {
+        params.putString("phoneHash", res.phone_code_hash);
+        if (res.next_type instanceof TLRPC.TL_auth_codeTypeCall) {
+            params.putInt("nextType", 4);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeFlashCall) {
+            params.putInt("nextType", 3);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeSms) {
+            params.putInt("nextType", 2);
+        }
+        if (res.type instanceof TLRPC.TL_auth_sentCodeTypeApp) {
+            params.putInt("type", 1);
+            params.putInt("length", res.type.length);
+            setPage(1, true, params, false);
+        } else {
+            if (res.timeout == 0) {
+                res.timeout = 60;
+            }
+            params.putInt("timeout", res.timeout * 1000);
+            if (res.type instanceof TLRPC.TL_auth_sentCodeTypeCall) {
+                params.putInt("type", 4);
+                params.putInt("length", res.type.length);
+                setPage(4, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeFlashCall) {
+                params.putInt("type", 3);
+                params.putString("pattern", res.type.pattern);
+                setPage(3, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeSms) {
+                params.putInt("type", 2);
+                params.putInt("length", res.type.length);
+                setPage(2, true, params, false);
+            }
+        }
+    }
+
     public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
 
         private EditText codeField;
@@ -287,9 +345,9 @@ public PhoneView(Context context) {
             countryButton.setMaxLines(1);
             countryButton.setSingleLine(true);
             countryButton.setEllipsize(TextUtils.TruncateAt.END);
-            countryButton.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
+            countryButton.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
             countryButton.setBackgroundResource(R.drawable.spinner_states);
-            addView(countryButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 20, 0, 20, 14));
+            addView(countryButton, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 0, 0, 0, 14));
             countryButton.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
@@ -315,7 +373,7 @@ public void run() {
             View view = new View(context);
             view.setPadding(AndroidUtilities.dp(12), 0, AndroidUtilities.dp(12), 0);
             view.setBackgroundColor(0xffdbdbdb);
-            addView(view, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 24, -17.5f, 24, 0));
+            addView(view, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 1, 4, -17.5f, 4, 0));
 
             LinearLayout linearLayout = new LinearLayout(context);
             linearLayout.setOrientation(HORIZONTAL);
@@ -325,7 +383,7 @@ public void run() {
             textView.setText("+");
             textView.setTextColor(0xff212121);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            linearLayout.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 24, 0, 0, 0));
+            linearLayout.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
 
             codeField = new EditText(context);
             codeField.setInputType(InputType.TYPE_CLASS_PHONE);
@@ -354,7 +412,6 @@ public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
                 @Override
                 public void afterTextChanged(Editable editable) {
                     if (ignoreOnTextChange) {
-                        ignoreOnTextChange = false;
                         return;
                     }
                     ignoreOnTextChange = true;
@@ -414,6 +471,7 @@ public void afterTextChanged(Editable editable) {
                             phoneField.setSelection(phoneField.length());
                         }
                     }
+                    ignoreOnTextChange = false;
                 }
             });
             codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -438,7 +496,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             phoneField.setMaxLines(1);
             phoneField.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
             phoneField.setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-            linearLayout.addView(phoneField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 0, 0, 24, 0));
+            linearLayout.addView(phoneField, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 36));
             phoneField.addTextChangedListener(new TextWatcher() {
 
                 private int characterAction = -1;
@@ -528,9 +586,9 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             textView.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
             textView.setTextColor(0xff757575);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            textView.setGravity(Gravity.LEFT);
+            textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             textView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT, 24, 28, 24, 10));
+            addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 28, 0, 10));
 
             HashMap<String, String> languageMap = new HashMap<>();
             try {
@@ -561,7 +619,7 @@ public int compare(String lhs, String rhs) {
             String country = null;
 
             try {
-                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
                 if (telephonyManager != null) {
                     country = telephonyManager.getSimCountryIso().toUpperCase();
                 }
@@ -605,6 +663,7 @@ public void selectCountry(String name) {
                 String hint = phoneFormatMap.get(code);
                 phoneField.setHintText(hint != null ? hint.replace('X', '–') : null);
                 countryState = 0;
+                ignoreOnTextChange = false;
             }
         }
 
@@ -617,6 +676,7 @@ public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l)
             ignoreOnTextChange = true;
             String str = countriesArray.get(i);
             codeField.setText(countriesMap.get(str));
+            ignoreOnTextChange = false;
         }
 
         @Override
@@ -626,9 +686,46 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         @Override
         public void onNextPressed() {
-            if (nextPressed) {
+            if (getParentActivity() == null || nextPressed) {
                 return;
             }
+            TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+            boolean simcardAvailable = tm.getSimState() != TelephonyManager.SIM_STATE_ABSENT && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_NONE;
+            boolean allowCall = true;
+            if (Build.VERSION.SDK_INT >= 23 && simcardAvailable) {
+                allowCall = getParentActivity().checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED;
+                boolean allowSms = getParentActivity().checkSelfPermission(Manifest.permission.RECEIVE_SMS) == PackageManager.PERMISSION_GRANTED;
+                if (checkPermissions) {
+                    permissionsItems.clear();
+                    if (!allowCall) {
+                        permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
+                    }
+                    if (!allowSms) {
+                        permissionsItems.add(Manifest.permission.RECEIVE_SMS);
+                    }
+                    if (!permissionsItems.isEmpty()) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        if (preferences.getBoolean("firstlogin", true) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
+                            preferences.edit().putBoolean("firstlogin", false).commit();
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                            if (permissionsItems.size() == 2) {
+                                builder.setMessage(LocaleController.getString("AllowReadCallAndSms", R.string.AllowReadCallAndSms));
+                            } else if (!allowSms) {
+                                builder.setMessage(LocaleController.getString("AllowReadSms", R.string.AllowReadSms));
+                            } else {
+                                builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
+                            }
+                            permissionsDialog = showDialog(builder.create());
+                        } else {
+                            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
+                        }
+                        return;
+                    }
+                }
+            }
+
             if (countryState == 1) {
                 needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
                 return;
@@ -643,10 +740,20 @@ public void onNextPressed() {
             TLRPC.TL_account_sendChangePhoneCode req = new TLRPC.TL_account_sendChangePhoneCode();
             String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
             req.phone_number = phone;
-            final String phone2 = "+" + codeField.getText() + " " + phoneField.getText();
+            req.allow_flashcall = simcardAvailable && allowCall;
+            if (req.allow_flashcall) {
+                String number = tm.getLine1Number();
+                req.current_number = number != null && number.length() != 0 && (phone.contains(number) || number.contains(phone));
+            }
 
             final Bundle params = new Bundle();
-            params.putString("phone", phone2);
+            params.putString("phone", "+" + codeField.getText() + phoneField.getText());
+            try {
+                params.putString("ephone", "+" + PhoneFormat.stripExceptNumbers(codeField.getText().toString()) + " " + PhoneFormat.stripExceptNumbers(phoneField.getText().toString()));
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+                params.putString("ephone", "+" + phone);
+            }
             params.putString("phoneFormated", phone);
             nextPressed = true;
             needShowProgress();
@@ -658,10 +765,7 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
                         public void run() {
                             nextPressed = false;
                             if (error == null) {
-                                TLRPC.TL_account_sentChangePhoneCode res = (TLRPC.TL_account_sentChangePhoneCode)response;
-                                params.putString("phoneHash", res.phone_code_hash);
-                                params.putInt("calltime", res.send_call_timeout * 1000);
-                                setPage(1, true, params, false);
+                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
                             } else {
                                 if (error.text != null) {
                                     if (error.text.contains("PHONE_NUMBER_INVALID")) {
@@ -673,7 +777,7 @@ public void run() {
                                     } else if (error.text.startsWith("FLOOD_WAIT")) {
                                         needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
                                     } else if (error.text.startsWith("PHONE_NUMBER_OCCUPIED")) {
-                                        needShowAlert(LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, phone2));
+                                        needShowAlert(LocaleController.formatString("ChangePhoneNumberOccupied", R.string.ChangePhoneNumberOccupied, params.getString("phone")));
                                     } else {
                                         needShowAlert(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
                                     }
@@ -709,43 +813,88 @@ public String getHeaderName() {
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
 
+        private class ProgressView extends View {
+
+            private Paint paint = new Paint();
+            private Paint paint2 = new Paint();
+            private float progress;
+
+            public ProgressView(Context context) {
+                super(context);
+                paint.setColor(0xffe1eaf2);
+                paint2.setColor(0xff62a0d0);
+            }
+
+            public void setProgress(float value) {
+                progress = value;
+                invalidate();
+            }
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                int start = (int) (getMeasuredWidth() * progress);
+                canvas.drawRect(0, 0, start, getMeasuredHeight(), paint2);
+                canvas.drawRect(start, 0, getMeasuredWidth(), getMeasuredHeight(), paint);
+            }
+        }
+
+        private String phone;
         private String phoneHash;
         private String requestPhone;
+        private String emailPhone;
         private EditText codeField;
         private TextView confirmTextView;
         private TextView timeText;
+        private TextView problemText;
         private Bundle currentParams;
+        private ProgressView progressView;
 
         private Timer timeTimer;
         private Timer codeTimer;
+        private int openTime;
         private final Object timerSync = new Object();
         private volatile int time = 60000;
         private volatile int codeTime = 15000;
         private double lastCurrentTime;
         private double lastCodeTime;
         private boolean ignoreOnTextChange;
-        private boolean waitingForSms = false;
-        private boolean nextPressed = false;
+        private boolean waitingForEvent;
+        private boolean nextPressed;
         private String lastError = "";
+        private int currentType;
+        private int nextType;
+        private String pattern = "*";
+        private int length;
+        private int timeout;
 
-        public LoginActivitySmsView(Context context) {
+        public LoginActivitySmsView(Context context, final int type) {
             super(context);
 
+            currentType = type;
             setOrientation(VERTICAL);
 
             confirmTextView = new TextView(context);
             confirmTextView.setTextColor(0xff757575);
             confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            confirmTextView.setGravity(Gravity.LEFT);
+            confirmTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(confirmTextView);
-            LayoutParams layoutParams = (LayoutParams) confirmTextView.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.LEFT;
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            confirmTextView.setLayoutParams(layoutParams);
+
+            if (currentType == 3) {
+                FrameLayout frameLayout = new FrameLayout(context);
+
+                ImageView imageView = new ImageView(context);
+                imageView.setImageResource(R.drawable.phone_activate);
+                if (LocaleController.isRTL) {
+                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.LEFT | Gravity.CENTER_VERTICAL, 2, 2, 0, 0));
+                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 64 + 18, 0, 0, 0));
+                } else {
+                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 0, 64 + 18, 0));
+                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.RIGHT | Gravity.CENTER_VERTICAL, 0, 2, 0, 2));
+                }
+                addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            } else {
+                addView(confirmTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            }
 
             codeField = new EditText(context);
             codeField.setTextColor(0xff212121);
@@ -757,15 +906,7 @@ public LoginActivitySmsView(Context context) {
             codeField.setInputType(InputType.TYPE_CLASS_PHONE);
             codeField.setMaxLines(1);
             codeField.setPadding(0, 0, 0, 0);
-            addView(codeField);
-            layoutParams = (LayoutParams) codeField.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = AndroidUtilities.dp(36);
-            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
-            layoutParams.topMargin = AndroidUtilities.dp(20);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            codeField.setLayoutParams(layoutParams);
+            addView(codeField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, Gravity.CENTER_HORIZONTAL, 0, 20, 0, 0));
             codeField.addTextChangedListener(new TextWatcher() {
                 @Override
                 public void beforeTextChanged(CharSequence s, int start, int count, int after) {
@@ -782,7 +923,7 @@ public void afterTextChanged(Editable s) {
                     if (ignoreOnTextChange) {
                         return;
                     }
-                    if (codeField.length() == 5) {
+                    if (length != 0 && codeField.length() == length) {
                         onNextPressed();
                     }
                 }
@@ -797,55 +938,133 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
+            if (currentType == 3) {
+                codeField.setEnabled(false);
+                codeField.setInputType(InputType.TYPE_NULL);
+                codeField.setVisibility(GONE);
+            }
 
             timeText = new TextView(context);
             timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             timeText.setTextColor(0xff757575);
             timeText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            timeText.setGravity(Gravity.LEFT);
-            addView(timeText);
-            layoutParams = (LayoutParams) timeText.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.LEFT;
-            layoutParams.topMargin = AndroidUtilities.dp(30);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            timeText.setLayoutParams(layoutParams);
+            timeText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            addView(timeText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 30, 0, 0));
+
+            if (currentType == 3) {
+                progressView = new ProgressView(context);
+                addView(progressView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 3, 0, 12, 0, 0));
+            }
+
+            problemText = new TextView(context);
+            problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
+            problemText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            problemText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            problemText.setTextColor(0xff4d83b3);
+            problemText.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
+            problemText.setPadding(0, AndroidUtilities.dp(2), 0, AndroidUtilities.dp(12));
+            addView(problemText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 20, 0, 0));
+            problemText.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (nextPressed) {
+                        return;
+                    }
+                    if (nextType != 0 && nextType != 4) {
+                        resendCode();
+                    } else {
+                        try {
+                            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                            String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
+
+                            Intent mailer = new Intent(Intent.ACTION_SEND);
+                            mailer.setType("message/rfc822");
+                            mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
+                            mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
+                            mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
+                            getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
+                        } catch (Exception e) {
+                            needShowAlert(LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
+                        }
+                    }
+                }
+            });
 
             LinearLayout linearLayout = new LinearLayout(context);
-            linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_VERTICAL);
-            addView(linearLayout);
-            layoutParams = (LayoutParams) linearLayout.getLayoutParams();
-            layoutParams.width = LayoutHelper.MATCH_PARENT;
-            layoutParams.height = LayoutHelper.MATCH_PARENT;
-            linearLayout.setLayoutParams(layoutParams);
+            linearLayout.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_VERTICAL);
+            addView(linearLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
 
             TextView wrongNumber = new TextView(context);
-            wrongNumber.setGravity(Gravity.LEFT | Gravity.CENTER_HORIZONTAL);
+            wrongNumber.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.CENTER_HORIZONTAL);
             wrongNumber.setTextColor(0xff4d83b3);
             wrongNumber.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             wrongNumber.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
             wrongNumber.setPadding(0, AndroidUtilities.dp(24), 0, 0);
-            linearLayout.addView(wrongNumber);
-            layoutParams = (LayoutParams) wrongNumber.getLayoutParams();
-            layoutParams.width = LayoutHelper.WRAP_CONTENT;
-            layoutParams.height = LayoutHelper.WRAP_CONTENT;
-            layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
-            layoutParams.bottomMargin = AndroidUtilities.dp(10);
-            layoutParams.leftMargin = AndroidUtilities.dp(24);
-            layoutParams.rightMargin = AndroidUtilities.dp(24);
-            wrongNumber.setLayoutParams(layoutParams);
+            linearLayout.addView(wrongNumber, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), 0, 0, 0, 10));
             wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
             wrongNumber.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
+                    TLRPC.TL_auth_cancelCode req = new TLRPC.TL_auth_cancelCode();
+                    req.phone_number = requestPhone;
+                    req.phone_code_hash = phoneHash;
+                    ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                        @Override
+                        public void run(TLObject response, TLRPC.TL_error error) {
+
+                        }
+                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
                     onBackPressed();
                     setPage(0, true, null, true);
                 }
             });
         }
 
+        private void resendCode() {
+            final Bundle params = new Bundle();
+            params.putString("phone", phone);
+            params.putString("ephone", emailPhone);
+            params.putString("phoneFormated", requestPhone);
+
+            nextPressed = true;
+            needShowProgress();
+
+            TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
+            req.phone_number = requestPhone;
+            req.phone_code_hash = phoneHash;
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            nextPressed = false;
+                            if (error == null) {
+                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                            } else {
+                                if (error.text != null) {
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        onBackPressed();
+                                        setPage(0, true, null, true);
+                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else if (error.code != -1000) {
+                                        needShowAlert(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
+                                    }
+                                }
+                            }
+                            needHideProgress();
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors);
+        }
+
         @Override
         public String getHeaderName() {
             return LocaleController.getString("YourCode", R.string.YourCode);
@@ -857,41 +1076,87 @@ public void setParams(Bundle params) {
                 return;
             }
             codeField.setText("");
-            AndroidUtilities.setWaitingForSms(true);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
+            waitingForEvent = true;
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(true);
+                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(true);
+                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveCall);
+            }
+
             currentParams = params;
-            waitingForSms = true;
-            String phone = params.getString("phone");
+            phone = params.getString("phone");
+            emailPhone = params.getString("ephone");
             requestPhone = params.getString("phoneFormated");
             phoneHash = params.getString("phoneHash");
-            time = params.getInt("calltime");
+            timeout = time = params.getInt("timeout");
+            openTime = (int) (System.currentTimeMillis() / 1000);
+            nextType = params.getInt("nextType");
+            pattern = params.getString("pattern");
+            length = params.getInt("length");
+
+            if (length != 0) {
+                InputFilter[] inputFilters = new InputFilter[1];
+                inputFilters[0] = new InputFilter.LengthFilter(length);
+                codeField.setFilters(inputFilters);
+            } else {
+                codeField.setFilters(new InputFilter[0]);
+            }
+            if (progressView != null) {
+                progressView.setVisibility(nextType != 0 ? VISIBLE : GONE);
+            }
 
             if (phone == null) {
                 return;
             }
 
             String number = PhoneFormat.getInstance().format(phone);
-            String str = String.format(Locale.US, LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
-            try {
-                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
-                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-                int idx = str.indexOf(number);
-                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
-                confirmTextView.setText(stringBuilder);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                confirmTextView.setText(str);
+            CharSequence str = "";
+            if (currentType == 1) {
+                str = AndroidUtilities.replaceTags(LocaleController.getString("SentAppCode", R.string.SentAppCode));
+            } else if (currentType == 2) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, number));
+            } else if (currentType == 3) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, number));
+            } else if (currentType == 4) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, number));
             }
+            confirmTextView.setText(str);
 
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
+            if (currentType != 3) {
+                AndroidUtilities.showKeyboard(codeField);
+                codeField.requestFocus();
+            } else {
+                AndroidUtilities.hideKeyboard(codeField);
+            }
 
             destroyTimer();
             destroyCodeTimer();
-            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-            lastCurrentTime = System.currentTimeMillis();
 
-            createTimer();
+            lastCurrentTime = System.currentTimeMillis();
+            if (currentType == 1) {
+                problemText.setVisibility(VISIBLE);
+                timeText.setVisibility(GONE);
+            } else if (currentType == 3 && (nextType == 4 || nextType == 2)) {
+                problemText.setVisibility(GONE);
+                timeText.setVisibility(VISIBLE);
+                if (nextType == 4) {
+                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
+                } else if (nextType == 2) {
+                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
+                }
+                createTimer();
+            } else if (currentType == 2 && (nextType == 4 || nextType == 3)) {
+                timeText.setVisibility(VISIBLE);
+                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
+                problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+                createTimer();
+            } else {
+                timeText.setVisibility(GONE);
+                problemText.setVisibility(GONE);
+                createCodeTimer();
+            }
         }
 
         private void createCodeTimer() {
@@ -912,6 +1177,7 @@ public void run() {
                         @Override
                         public void run() {
                             if (codeTime <= 1000) {
+                                problemText.setVisibility(VISIBLE);
                                 destroyCodeTimer();
                             }
                         }
@@ -922,7 +1188,7 @@ public void run() {
 
         private void destroyCodeTimer() {
             try {
-                synchronized(timerSync) {
+                synchronized (timerSync) {
                     if (codeTimer != null) {
                         codeTimer.cancel();
                         codeTimer = null;
@@ -941,7 +1207,10 @@ private void createTimer() {
             timeTimer.schedule(new TimerTask() {
                 @Override
                 public void run() {
-                    double currentTime = System.currentTimeMillis();
+                    if (timeTimer == null) {
+                        return;
+                    }
+                    final double currentTime = System.currentTimeMillis();
                     double diff = currentTime - lastCurrentTime;
                     time -= diff;
                     lastCurrentTime = currentTime;
@@ -951,27 +1220,53 @@ public void run() {
                             if (time >= 1000) {
                                 int minutes = time / 1000 / 60;
                                 int seconds = time / 1000 - minutes * 60;
-                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                                if (nextType == 4 || nextType == 3) {
+                                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                                } else if (nextType == 2) {
+                                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
+                                }
+                                if (progressView != null) {
+                                    progressView.setProgress(1.0f - (float) time / (float) timeout);
+                                }
                             } else {
-                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                                if (progressView != null) {
+                                    progressView.setProgress(1.0f);
+                                }
                                 destroyTimer();
-                                createCodeTimer();
-                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                                req.phone_number = requestPhone;
-                                req.phone_code_hash = phoneHash;
-                                ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                                    @Override
-                                    public void run(TLObject response, final TLRPC.TL_error error) {
-                                        if (error != null && error.text != null) {
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    lastError = error.text;
+                                if (currentType == 3) {
+                                    AndroidUtilities.setWaitingForCall(false);
+                                    NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+                                    waitingForEvent = false;
+                                    destroyCodeTimer();
+                                    resendCode();
+                                } else if (currentType == 2) {
+                                    if (nextType == 4) {
+                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                                        createCodeTimer();
+                                        TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
+                                        req.phone_number = requestPhone;
+                                        req.phone_code_hash = phoneHash;
+                                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                                            @Override
+                                            public void run(TLObject response, final TLRPC.TL_error error) {
+                                                if (error != null && error.text != null) {
+                                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                                        @Override
+                                                        public void run() {
+                                                            lastError = error.text;
+                                                        }
+                                                    });
                                                 }
-                                            });
-                                        }
+                                            }
+                                        }, ConnectionsManager.RequestFlagFailOnServerErrors);
+                                    } else if (nextType == 3) {
+                                        AndroidUtilities.setWaitingForSms(false);
+                                        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+                                        waitingForEvent = false;
+                                        destroyCodeTimer();
+                                        resendCode();
                                     }
-                                }, ConnectionsManager.RequestFlagFailOnServerErrors);
+                                }
                             }
                         }
                     });
@@ -981,7 +1276,7 @@ public void run() {
 
         private void destroyTimer() {
             try {
-                synchronized(timerSync) {
+                synchronized (timerSync) {
                     if (timeTimer != null) {
                         timeTimer.cancel();
                         timeTimer = null;
@@ -998,9 +1293,14 @@ public void onNextPressed() {
                 return;
             }
             nextPressed = true;
-            waitingForSms = false;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
             final TLRPC.TL_account_changePhone req = new TLRPC.TL_account_changePhone();
             req.phone_number = requestPhone;
             req.phone_code = codeField.getText().toString();
@@ -1028,17 +1328,29 @@ public void run() {
                                 finishFragment();
                             } else {
                                 lastError = error.text;
-                                createTimer();
-                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                    needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                    needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                    needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
-                                } else {
-                                    needShowAlert(error.text);
+                                if (currentType == 3 && (nextType == 4 || nextType == 2) || currentType == 2 && (nextType == 4 || nextType == 3)) {
+                                    createTimer();
+                                }
+                                if (currentType == 2) {
+                                    AndroidUtilities.setWaitingForSms(true);
+                                    NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveSmsCode);
+                                } else if (currentType == 3) {
+                                    AndroidUtilities.setWaitingForCall(true);
+                                    NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveCall);
+                                }
+                                waitingForEvent = true;
+                                if (currentType != 3) {
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else {
+                                        needShowAlert(error.text);
+                                    }
                                 }
                             }
                         }
@@ -1052,19 +1364,29 @@ public void onBackPressed() {
             destroyTimer();
             destroyCodeTimer();
             currentParams = null;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            waitingForSms = false;
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
         }
 
         @Override
         public void onDestroyActivity() {
             super.onDestroyActivity();
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
             destroyTimer();
             destroyCodeTimer();
-            waitingForSms = false;
         }
 
         @Override
@@ -1078,15 +1400,26 @@ public void onShow() {
 
         @Override
         public void didReceivedNotification(int id, final Object... args) {
+            if (!waitingForEvent || codeField == null) {
+                return;
+            }
             if (id == NotificationCenter.didReceiveSmsCode) {
-                if (!waitingForSms) {
-                    return;
-                }
-                if (codeField != null) {
-                    ignoreOnTextChange = true;
-                    codeField.setText("" + args[0]);
-                    onNextPressed();
+                ignoreOnTextChange = true;
+                codeField.setText("" + args[0]);
+                ignoreOnTextChange = false;
+                onNextPressed();
+            } else if (id == NotificationCenter.didReceiveCall) {
+                String num = "" + args[0];
+                if (!pattern.equals("*")) {
+                    String patternNumbers = pattern.replace("*", "");
+                    if (!num.contains(patternNumbers)) {
+                        return;
+                    }
                 }
+                ignoreOnTextChange = true;
+                codeField.setText(num);
+                ignoreOnTextChange = false;
+                onNextPressed();
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
index 32afbcb16..825fb18e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditActivity.java
@@ -39,9 +39,6 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
-import org.telegram.tgnet.ConnectionsManager;
-import org.telegram.tgnet.RequestDelegate;
-import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -63,25 +60,19 @@
     private View doneButton;
     private EditText nameTextView;
     private EditText descriptionTextView;
-    private EditText userNameTextView;
     private BackupImageView avatarImage;
     private AvatarDrawable avatarDrawable;
     private AvatarUpdater avatarUpdater;
-    private TextView checkTextView;
-    private ProgressDialog progressDialog = null;
+    private ProgressDialog progressDialog;
+    private TextSettingsCell typeCell;
+    private TextSettingsCell adminCell;
 
     private TLRPC.FileLocation avatar;
-    private int checkReqId = 0;
-    private String lastCheckName = null;
-    private Runnable checkRunnable = null;
-    private boolean lastNameAvailable = false;
     private TLRPC.Chat currentChat;
     private TLRPC.ChatFull info;
     private int chatId;
     private boolean allowComments = true;
     private TLRPC.InputFile uploadedAvatar;
-    private boolean wasPrivate;
-    private boolean privateAlertShown;
     private boolean signMessages;
 
     private boolean createAfterUpload;
@@ -131,24 +122,23 @@ public void run() {
                 }
             }
         }
-        wasPrivate = currentChat.username == null || currentChat.username.length() == 0;
         avatarUpdater.parentFragment = this;
         avatarUpdater.delegate = this;
         allowComments = !currentChat.broadcast;
         signMessages = currentChat.signatures;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         return super.onFragmentCreate();
     }
 
-    public void setInfo(TLRPC.ChatFull chatFull) {
-        info = chatFull;
-    }
-
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
         if (avatarUpdater != null) {
             avatarUpdater.clear();
         }
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
     }
 
@@ -172,7 +162,6 @@ public void onItemClick(int id) {
                     if (donePressed) {
                         return;
                     }
-                    donePressed = true;
                     if (nameTextView.length() == 0) {
                         Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
                         if (v != null) {
@@ -181,18 +170,7 @@ public void onItemClick(int id) {
                         AndroidUtilities.shakeView(nameTextView, 2, 0);
                         return;
                     }
-                    if (userNameTextView != null) {
-                        if ((currentChat.username == null && userNameTextView.length() != 0) || (currentChat.username != null && !currentChat.username.equalsIgnoreCase(userNameTextView.getText().toString()))) {
-                            if (userNameTextView.length() != 0 && !lastNameAvailable) {
-                                Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
-                                if (v != null) {
-                                    v.vibrate(200);
-                                }
-                                AndroidUtilities.shakeView(checkTextView, 2, 0);
-                                return;
-                            }
-                        }
-                    }
+                    donePressed = true;
 
                     if (avatarUpdater.uploadingAvatar != null) {
                         createAfterUpload = true;
@@ -226,12 +204,6 @@ public void onClick(DialogInterface dialog, int which) {
                     if (info != null && !info.about.equals(descriptionTextView.getText().toString())) {
                         MessagesController.getInstance().updateChannelAbout(chatId, descriptionTextView.getText().toString(), info);
                     }
-                    if (userNameTextView != null) {
-                        String oldUserName = currentChat.username != null ? currentChat.username : "";
-                        if (!oldUserName.equals(userNameTextView.getText().toString())) {
-                            MessagesController.getInstance().updateChannelUserName(chatId, userNameTextView.getText().toString());
-                        }
-                    }
                     if (signMessages != currentChat.signatures) {
                         currentChat.signatures = true;
                         MessagesController.getInstance().toogleChannelSignatures(chatId, signMessages);
@@ -346,8 +318,9 @@ public void afterTextChanged(Editable s) {
             }
         });
 
-        ShadowSectionCell sectionCell = new ShadowSectionCell(context);
-        linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        View lineView = new View(context);
+        lineView.setBackgroundColor(0xffcfcfcf);
+        linearLayout.addView(lineView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1));
 
         linearLayout2 = new LinearLayout(context);
         linearLayout2.setOrientation(LinearLayout.VERTICAL);
@@ -355,7 +328,7 @@ public void afterTextChanged(Editable s) {
         linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
         descriptionTextView = new EditText(context);
-        descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        descriptionTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         descriptionTextView.setHintTextColor(0xff979797);
         descriptionTextView.setTextColor(0xff212121);
         descriptionTextView.setPadding(0, 0, 0, AndroidUtilities.dp(6));
@@ -364,9 +337,9 @@ public void afterTextChanged(Editable s) {
         descriptionTextView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
         descriptionTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
         inputFilters = new InputFilter[1];
-        inputFilters[0] = new InputFilter.LengthFilter(120);
+        inputFilters[0] = new InputFilter.LengthFilter(255);
         descriptionTextView.setFilters(inputFilters);
-        descriptionTextView.setHint(LocaleController.getString("DescriptionPlaceholder", R.string.DescriptionPlaceholder));
+        descriptionTextView.setHint(LocaleController.getString("DescriptionOptionalPlaceholder", R.string.DescriptionOptionalPlaceholder));
         AndroidUtilities.clearCursorDrawable(descriptionTextView);
         linearLayout2.addView(descriptionTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 17, 12, 17, 6));
         descriptionTextView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
@@ -396,148 +369,68 @@ public void afterTextChanged(Editable editable) {
             }
         });
 
-        TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
-        if (currentChat.megagroup) {
-            infoCell.setText(LocaleController.getString("DescriptionInfoMega", R.string.DescriptionInfoMega));
-            infoCell.setBackgroundResource(currentChat.creator ? R.drawable.greydivider : R.drawable.greydivider_bottom);
-        } else {
-            infoCell.setText(LocaleController.getString("DescriptionInfo", R.string.DescriptionInfo));
-            infoCell.setBackgroundResource(R.drawable.greydivider);
-        }
-        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-        if (/*BuildVars.DEBUG_VERSION && currentChat.megagroup && currentChat.creator || */!currentChat.megagroup) {
-            linearLayout2 = new LinearLayout(context);
-            linearLayout2.setOrientation(LinearLayout.VERTICAL);
-            linearLayout2.setBackgroundColor(0xffffffff);
-            linearLayout2.setPadding(0, 0, 0, AndroidUtilities.dp(7));
-            linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-
-            LinearLayout publicContainer = new LinearLayout(context);
-            publicContainer.setOrientation(LinearLayout.HORIZONTAL);
-            linearLayout2.addView(publicContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 17, 7, 17, 0));
-
-            EditText editText = new EditText(context);
-            editText.setText("telegram.me/");
-            editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            editText.setHintTextColor(0xff979797);
-            editText.setTextColor(0xff212121);
-            editText.setMaxLines(1);
-            editText.setLines(1);
-            editText.setEnabled(false);
-            editText.setBackgroundDrawable(null);
-            editText.setPadding(0, 0, 0, 0);
-            editText.setSingleLine(true);
-            editText.setInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            publicContainer.addView(editText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 36));
-
-            userNameTextView = new EditText(context);
-            userNameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            userNameTextView.setHintTextColor(0xff979797);
-            userNameTextView.setTextColor(0xff212121);
-            userNameTextView.setMaxLines(1);
-            userNameTextView.setLines(1);
-            userNameTextView.setBackgroundDrawable(null);
-            userNameTextView.setPadding(0, 0, 0, 0);
-            userNameTextView.setSingleLine(true);
-            userNameTextView.setText(currentChat.username);
-            userNameTextView.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
-            userNameTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
-            userNameTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
-            userNameTextView.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-                @Override
-                public void onFocusChange(View v, boolean hasFocus) {
-                    if (wasPrivate && hasFocus && !privateAlertShown) {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        if (currentChat.megagroup) {
-                            //builder.setMessage(LocaleController.getString("MegaWasPrivateAlert", R.string.MegaWasPrivateAlert));
-                        } else {
-                            builder.setMessage(LocaleController.getString("ChannelWasPrivateAlert", R.string.ChannelWasPrivateAlert));
-                        }
-                        builder.setPositiveButton(LocaleController.getString("Close", R.string.Close), null);
-                        showDialog(builder.create());
-                    }
-                }
-            });
-            AndroidUtilities.clearCursorDrawable(userNameTextView);
-            publicContainer.addView(userNameTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36));
-            userNameTextView.addTextChangedListener(new TextWatcher() {
-                @Override
-                public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-                }
-
-                @Override
-                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-                    checkUserName(userNameTextView.getText().toString(), false);
-                }
-
-                @Override
-                public void afterTextChanged(Editable editable) {
-
-                }
-            });
-
-            checkTextView = new TextView(context);
-            checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
-            checkTextView.setVisibility(View.GONE);
-            linearLayout2.addView(checkTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 17, 3, 17, 7));
-
-            infoCell = new TextInfoPrivacyCell(context);
-            infoCell.setBackgroundResource(R.drawable.greydivider);
-            if (currentChat.megagroup) {
-                //infoCell.setText(LocaleController.getString("MegaUsernameHelp", R.string.MegaUsernameHelp));
-            } else {
-                infoCell.setText(LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
-            }
-            linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        }
+        ShadowSectionCell sectionCell = new ShadowSectionCell(context);
+        sectionCell.setSize(20);
+        linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
-        /*frameLayout = new FrameLayoutFixed(context);
-        frameLayout.setBackgroundColor(0xffffffff);
-        linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        if (currentChat.megagroup || !currentChat.megagroup) {
+            frameLayout = new FrameLayoutFixed(context);
+            frameLayout.setBackgroundColor(0xffffffff);
+            linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
-        TextCheckCell commentsCell = new TextCheckCell(context);
-        commentsCell.setTextAndCheck(LocaleController.getString("Comments", R.string.Comments), allowComments, false);
-        commentsCell.setBackgroundResource(R.drawable.list_selector);
-        frameLayout.addView(commentsCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-        commentsCell.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                allowComments = !allowComments;
-                ((TextCheckCell) v).setChecked(allowComments);
-            }
-        });
+            typeCell = new TextSettingsCell(context);
+            updateTypeCell();
+            typeCell.setBackgroundResource(R.drawable.list_selector);
+            frameLayout.addView(typeCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            //TODO
 
-        infoCell = new TextInfoPrivacyCell(context);
-        infoCell.setText(LocaleController.getString("CommentsInfo", R.string.CommentsInfo));
-        infoCell.setBackgroundResource(R.drawable.greydivider);
-        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));*/
+            lineView = new View(context);
+            lineView.setBackgroundColor(0xffcfcfcf);
+            linearLayout.addView(lineView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1));
 
-        if (!currentChat.megagroup && currentChat.creator) {
             frameLayout = new FrameLayoutFixed(context);
             frameLayout.setBackgroundColor(0xffffffff);
             linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
-            TextCheckCell textCell = new TextCheckCell(context);
-            textCell.setBackgroundResource(R.drawable.list_selector);
-            textCell.setTextAndCheck(LocaleController.getString("ChannelSignMessages", R.string.ChannelSignMessages), signMessages, false);
-            frameLayout.addView(textCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
-            textCell.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    signMessages = !signMessages;
-                    ((TextCheckCell) v).setChecked(signMessages);
-                }
-            });
+            if (!currentChat.megagroup) {
+                TextCheckCell textCheckCell = new TextCheckCell(context);
+                textCheckCell.setBackgroundResource(R.drawable.list_selector);
+                textCheckCell.setTextAndCheck(LocaleController.getString("ChannelSignMessages", R.string.ChannelSignMessages), signMessages, false);
+                frameLayout.addView(textCheckCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                textCheckCell.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        signMessages = !signMessages;
+                        ((TextCheckCell) v).setChecked(signMessages);
+                    }
+                });
 
-            infoCell = new TextInfoPrivacyCell(context);
-            infoCell.setBackgroundResource(R.drawable.greydivider);
-            infoCell.setText(LocaleController.getString("ChannelSignMessagesInfo", R.string.ChannelSignMessagesInfo));
-            linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
+                infoCell.setBackgroundResource(R.drawable.greydivider);
+                infoCell.setText(LocaleController.getString("ChannelSignMessagesInfo", R.string.ChannelSignMessagesInfo));
+                linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+            } else {
+                adminCell = new TextSettingsCell(context);
+                updateAdminCell();
+                adminCell.setBackgroundResource(R.drawable.list_selector);
+                frameLayout.addView(adminCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                adminCell.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", chatId);
+                        args.putInt("type", 1);
+                        presentFragment(new ChannelUsersActivity(args));
+                    }
+                });
+
+                sectionCell = new ShadowSectionCell(context);
+                sectionCell.setSize(20);
+                linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+                if (!currentChat.creator) {
+                    sectionCell.setBackgroundResource(R.drawable.greydivider_bottom);
+                }
+            }
         }
 
         if (currentChat.creator) {
@@ -582,7 +475,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             });
 
-            infoCell = new TextInfoPrivacyCell(context);
+            TextInfoPrivacyCell infoCell = new TextInfoPrivacyCell(context);
             infoCell.setBackgroundResource(R.drawable.greydivider_bottom);
             if (currentChat.megagroup) {
                 infoCell.setText(LocaleController.getString("MegaDeleteInfo", R.string.MegaDeleteInfo));
@@ -592,6 +485,27 @@ public void onClick(DialogInterface dialogInterface, int i) {
             linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
         }
 
+        /*frameLayout = new FrameLayoutFixed(context);
+        frameLayout.setBackgroundColor(0xffffffff);
+        linearLayout.addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        TextCheckCell commentsCell = new TextCheckCell(context);
+        commentsCell.setTextAndCheck(LocaleController.getString("Comments", R.string.Comments), allowComments, false);
+        commentsCell.setBackgroundResource(R.drawable.list_selector);
+        frameLayout.addView(commentsCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        commentsCell.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                allowComments = !allowComments;
+                ((TextCheckCell) v).setChecked(allowComments);
+            }
+        });
+
+        infoCell = new TextInfoPrivacyCell(context);
+        infoCell.setText(LocaleController.getString("CommentsInfo", R.string.CommentsInfo));
+        infoCell.setBackgroundResource(R.drawable.greydivider);
+        linearLayout.addView(infoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));*/
+
         nameTextView.setText(currentChat.title);
         nameTextView.setSelection(nameTextView.length());
         if (info != null) {
@@ -616,6 +530,13 @@ public void didReceivedNotification(int id, Object... args) {
                     descriptionTextView.setText(chatFull.about);
                 }
                 info = chatFull;
+                updateAdminCell();
+                updateTypeCell();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int updateMask = (Integer) args[0];
+            if ((updateMask & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
+                updateTypeCell();
             }
         }
     }
@@ -668,153 +589,46 @@ public void restoreSelfArgs(Bundle args) {
         }
     }
 
-    private boolean checkUserName(final String name, boolean alert) {
-        if (name != null && name.length() > 0) {
-            checkTextView.setVisibility(View.VISIBLE);
+    public void setInfo(TLRPC.ChatFull chatFull) {
+        info = chatFull;
+    }
+
+    private void updateTypeCell() {
+        String type = currentChat.username == null || currentChat.username.length() == 0 ? LocaleController.getString("ChannelTypePrivate", R.string.ChannelTypePrivate) : LocaleController.getString("ChannelTypePublic", R.string.ChannelTypePublic);
+        if (currentChat.megagroup) {
+            typeCell.setTextAndValue(LocaleController.getString("GroupType", R.string.GroupType), type, false);
         } else {
-            checkTextView.setVisibility(View.GONE);
-        }
-        if (alert && name.length() == 0) {
-            return true;
-        }
-        if (checkRunnable != null) {
-            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
-            checkRunnable = null;
-            lastCheckName = null;
-            if (checkReqId != 0) {
-                ConnectionsManager.getInstance().cancelRequest(checkReqId, true);
-            }
-        }
-        lastNameAvailable = false;
-        if (name != null) {
-            if (name.startsWith("_") || name.endsWith("_")) {
-                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
-                checkTextView.setTextColor(0xffcf3030);
-                return false;
-            }
-            for (int a = 0; a < name.length(); a++) {
-                char ch = name.charAt(a);
-                if (a == 0 && ch >= '0' && ch <= '9') {
-                    if (currentChat.megagroup) {
-                        if (alert) {
-                            //showErrorAlert(LocaleController.getString("LinkInvalidStartNumberMega", R.string.LinkInvalidStartNumberMega));
-                        } else {
-                            //checkTextView.setText(LocaleController.getString("LinkInvalidStartNumberMega", R.string.LinkInvalidStartNumberMega));
-                            checkTextView.setTextColor(0xffcf3030);
-                        }
-                    } else {
-                        if (alert) {
-                            showErrorAlert(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
-                        } else {
-                            checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
-                            checkTextView.setTextColor(0xffcf3030);
-                        }
-                    }
-                    return false;
-                }
-                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
-                    if (alert) {
-                        showErrorAlert(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
-                    } else {
-                        checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
-                        checkTextView.setTextColor(0xffcf3030);
-                    }
-                    return false;
-                }
-            }
-        }
-        if (name == null || name.length() < 5) {
-            if (currentChat.megagroup) {
-                if (alert) {
-                    //showErrorAlert(LocaleController.getString("LinkInvalidShortMega", R.string.LinkInvalidShortMega));
-                } else {
-                    //checkTextView.setText(LocaleController.getString("LinkInvalidShortMega", R.string.LinkInvalidShortMega));
-                    checkTextView.setTextColor(0xffcf3030);
-                }
-            } else {
-                if (alert) {
-                    showErrorAlert(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
-                } else {
-                    checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
-                    checkTextView.setTextColor(0xffcf3030);
-                }
-            }
-            return false;
-        }
-        if (name.length() > 32) {
-            if (alert) {
-                showErrorAlert(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
-            } else {
-                checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
-                checkTextView.setTextColor(0xffcf3030);
-            }
-            return false;
+            typeCell.setTextAndValue(LocaleController.getString("ChannelType", R.string.ChannelType), type, false);
         }
 
-        if (!alert) {
-            checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
-            checkTextView.setTextColor(0xff6d6d72);
-            lastCheckName = name;
-            checkRunnable = new Runnable() {
+        if (currentChat.creator && (info == null || info.can_set_username)) {
+            typeCell.setOnClickListener(new View.OnClickListener() {
                 @Override
-                public void run() {
-                    TLRPC.TL_channels_checkUsername req = new TLRPC.TL_channels_checkUsername();
-                    req.username = name;
-                    req.channel = MessagesController.getInputChannel(chatId);
-                    checkReqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                        @Override
-                        public void run(final TLObject response, final TLRPC.TL_error error) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    checkReqId = 0;
-                                    if (lastCheckName != null && lastCheckName.equals(name)) {
-                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
-                                            checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
-                                            checkTextView.setTextColor(0xff26972c);
-                                            lastNameAvailable = true;
-                                        } else {
-                                            if (error != null && error.text.equals("CHANNELS_ADMIN_PUBLIC_TOO_MUCH")) {
-                                                checkTextView.setText(LocaleController.getString("ChannelPublicLimitReached", R.string.ChannelPublicLimitReached));
-                                            } else {
-                                                checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
-                                            }
-                                            checkTextView.setTextColor(0xffcf3030);
-                                            lastNameAvailable = false;
-                                        }
-                                    }
-                                }
-                            });
-                        }
-                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putInt("chat_id", chatId);
+                    ChannelEditTypeActivity fragment = new ChannelEditTypeActivity(args);
+                    fragment.setInfo(info);
+                    presentFragment(fragment);
                 }
-            };
-            AndroidUtilities.runOnUIThread(checkRunnable, 300);
+            });
+            typeCell.setTextColor(0xff212121);
+            typeCell.setTextValueColor(0xff2f8cc9);
+        } else {
+            typeCell.setOnClickListener(null);
+            typeCell.setTextColor(0xffa8a8a8);
+            typeCell.setTextValueColor(0xffa8a8a8);
         }
-        return true;
     }
 
-    private void showErrorAlert(String error) {
-        if (getParentActivity() == null) {
+    private void updateAdminCell() {
+        if (adminCell == null) {
             return;
         }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        switch (error) {
-            case "USERNAME_INVALID":
-                builder.setMessage(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
-                break;
-            case "USERNAME_OCCUPIED":
-                builder.setMessage(LocaleController.getString("LinkInUse", R.string.LinkInUse));
-                break;
-            case "USERNAMES_UNAVAILABLE":
-                builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
-                break;
-            default:
-                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
-                break;
+        if (info != null) {
+            adminCell.setTextAndValue(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), String.format("%d", info.admins_count), false);
+        } else {
+            adminCell.setText(LocaleController.getString("ChannelAdministrators", R.string.ChannelAdministrators), false);
         }
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        showDialog(builder.create());
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditTypeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditTypeActivity.java
new file mode 100644
index 000000000..a389ec5cf
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelEditTypeActivity.java
@@ -0,0 +1,544 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Vibrator;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.RadioButtonCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextBlockCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.concurrent.Semaphore;
+
+public class ChannelEditTypeActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private LinearLayout linkContainer;
+    private LinearLayout publicContainer;
+    private TextBlockCell privateContainer;
+    private RadioButtonCell radioButtonCell1;
+    private RadioButtonCell radioButtonCell2;
+    private TextInfoPrivacyCell typeInfoCell;
+    private TextView checkTextView;
+    private HeaderCell headerCell;
+    private EditText nameTextView;
+    private boolean isPrivate = false;
+    private boolean loadingInvite;
+    private TLRPC.ExportedChatInvite invite;
+
+    private int checkReqId = 0;
+    private String lastCheckName = null;
+    private Runnable checkRunnable = null;
+    private boolean lastNameAvailable = false;
+    private TLRPC.Chat currentChat;
+    private int chatId;
+
+    private boolean donePressed;
+
+    private final static int done_button = 1;
+
+    public ChannelEditTypeActivity(Bundle args) {
+        super(args);
+        chatId = args.getInt("chat_id", 0);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean onFragmentCreate() {
+        currentChat = MessagesController.getInstance().getChat(chatId);
+        if (currentChat == null) {
+            final Semaphore semaphore = new Semaphore(0);
+            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    currentChat = MessagesStorage.getInstance().getChat(chatId);
+                    semaphore.release();
+                }
+            });
+            try {
+                semaphore.acquire();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (currentChat != null) {
+                MessagesController.getInstance().putChat(currentChat, true);
+            } else {
+                return false;
+            }
+        }
+        isPrivate = currentChat.username == null || currentChat.username.length() == 0;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+        AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+                    if (donePressed) {
+                        return;
+                    }
+
+                    if (!isPrivate && ((currentChat.username == null && nameTextView.length() != 0) || (currentChat.username != null && !currentChat.username.equalsIgnoreCase(nameTextView.getText().toString())))) {
+                        if (nameTextView.length() != 0 && !lastNameAvailable) {
+                            Vibrator v = (Vibrator) getParentActivity().getSystemService(Context.VIBRATOR_SERVICE);
+                            if (v != null) {
+                                v.vibrate(200);
+                            }
+                            AndroidUtilities.shakeView(checkTextView, 2, 0);
+                            return;
+                        }
+                    }
+                    donePressed = true;
+
+                    String oldUserName = currentChat.username != null ? currentChat.username : "";
+                    String newUserName = isPrivate ? "" : nameTextView.getText().toString();
+                    if (!oldUserName.equals(newUserName)) {
+                        MessagesController.getInstance().updateChannelUserName(chatId, newUserName);
+                    }
+                    finishFragment();
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        LinearLayout linearLayout;
+
+        fragmentView = new ScrollView(context);
+        fragmentView.setBackgroundColor(0xfff0f0f0);
+        ScrollView scrollView = (ScrollView) fragmentView;
+        scrollView.setFillViewport(true);
+        linearLayout = new LinearLayout(context);
+        scrollView.addView(linearLayout, new ScrollView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+
+        linearLayout.setOrientation(LinearLayout.VERTICAL);
+
+        if (currentChat.megagroup) {
+            actionBar.setTitle(LocaleController.getString("GroupType", R.string.GroupType));
+        } else {
+            actionBar.setTitle(LocaleController.getString("ChannelType", R.string.ChannelType));
+        }
+
+        LinearLayout linearLayout2 = new LinearLayout(context);
+        linearLayout2.setOrientation(LinearLayout.VERTICAL);
+        linearLayout2.setBackgroundColor(0xffffffff);
+        linearLayout.addView(linearLayout2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        radioButtonCell1 = new RadioButtonCell(context);
+        radioButtonCell1.setBackgroundResource(R.drawable.list_selector);
+        if (currentChat.megagroup) {
+            radioButtonCell1.setTextAndValue(LocaleController.getString("MegaPublic", R.string.MegaPublic), LocaleController.getString("MegaPublicInfo", R.string.MegaPublicInfo), !isPrivate, false);
+        } else {
+            radioButtonCell1.setTextAndValue(LocaleController.getString("ChannelPublic", R.string.ChannelPublic), LocaleController.getString("ChannelPublicInfo", R.string.ChannelPublicInfo), !isPrivate, false);
+        }
+        linearLayout2.addView(radioButtonCell1, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        radioButtonCell1.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!isPrivate) {
+                    return;
+                }
+                isPrivate = false;
+                updatePrivatePublic();
+            }
+        });
+
+        radioButtonCell2 = new RadioButtonCell(context);
+        radioButtonCell2.setBackgroundResource(R.drawable.list_selector);
+        if (currentChat.megagroup) {
+            radioButtonCell2.setTextAndValue(LocaleController.getString("MegaPrivate", R.string.MegaPrivate), LocaleController.getString("MegaPrivateInfo", R.string.MegaPrivateInfo), isPrivate, false);
+        } else {
+            radioButtonCell2.setTextAndValue(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate), LocaleController.getString("ChannelPrivateInfo", R.string.ChannelPrivateInfo), isPrivate, false);
+        }
+        linearLayout2.addView(radioButtonCell2, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        radioButtonCell2.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (isPrivate) {
+                    return;
+                }
+                isPrivate = true;
+                updatePrivatePublic();
+            }
+        });
+
+        ShadowSectionCell sectionCell = new ShadowSectionCell(context);
+        linearLayout.addView(sectionCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        linkContainer = new LinearLayout(context);
+        linkContainer.setOrientation(LinearLayout.VERTICAL);
+        linkContainer.setBackgroundColor(0xffffffff);
+        linearLayout.addView(linkContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        headerCell = new HeaderCell(context);
+        linkContainer.addView(headerCell);
+
+        publicContainer = new LinearLayout(context);
+        publicContainer.setOrientation(LinearLayout.HORIZONTAL);
+        linkContainer.addView(publicContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 17, 7, 17, 0));
+
+        EditText editText = new EditText(context);
+        editText.setText("telegram.me/");
+        editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        editText.setHintTextColor(0xff979797);
+        editText.setTextColor(0xff212121);
+        editText.setMaxLines(1);
+        editText.setLines(1);
+        editText.setEnabled(false);
+        editText.setBackgroundDrawable(null);
+        editText.setPadding(0, 0, 0, 0);
+        editText.setSingleLine(true);
+        editText.setInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+        editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        publicContainer.addView(editText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, 36));
+
+        nameTextView = new EditText(context);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        if (!isPrivate) {
+            nameTextView.setText(currentChat.username);
+        }
+        nameTextView.setHintTextColor(0xff979797);
+        nameTextView.setTextColor(0xff212121);
+        nameTextView.setMaxLines(1);
+        nameTextView.setLines(1);
+        nameTextView.setBackgroundDrawable(null);
+        nameTextView.setPadding(0, 0, 0, 0);
+        nameTextView.setSingleLine(true);
+        nameTextView.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+        nameTextView.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        nameTextView.setHint(LocaleController.getString("ChannelUsernamePlaceholder", R.string.ChannelUsernamePlaceholder));
+        AndroidUtilities.clearCursorDrawable(nameTextView);
+        publicContainer.addView(nameTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36));
+        nameTextView.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                checkUserName(nameTextView.getText().toString(), false);
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+
+            }
+        });
+
+        privateContainer = new TextBlockCell(context);
+        privateContainer.setBackgroundResource(R.drawable.list_selector);
+        linkContainer.addView(privateContainer);
+        privateContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (invite == null) {
+                    return;
+                }
+                try {
+                    if (Build.VERSION.SDK_INT < 11) {
+                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        clipboard.setText(invite.link);
+                    } else {
+                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", invite.link);
+                        clipboard.setPrimaryClip(clip);
+                    }
+                    Toast.makeText(getParentActivity(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+
+        checkTextView = new TextView(context);
+        checkTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        checkTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        checkTextView.setVisibility(View.GONE);
+        linkContainer.addView(checkTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 17, 3, 17, 7));
+
+        typeInfoCell = new TextInfoPrivacyCell(context);
+        typeInfoCell.setBackgroundResource(R.drawable.greydivider_bottom);
+        linearLayout.addView(typeInfoCell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+
+        updatePrivatePublic();
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.chatInfoDidLoaded) {
+            TLRPC.ChatFull chatFull = (TLRPC.ChatFull) args[0];
+            if (chatFull.id == chatId) {
+                invite = chatFull.exported_invite;
+                updatePrivatePublic();
+            }
+        }
+    }
+
+    public void setInfo(TLRPC.ChatFull chatFull) {
+        if (chatFull != null) {
+            if (chatFull.exported_invite instanceof TLRPC.TL_chatInviteExported) {
+                invite = chatFull.exported_invite;
+            } else {
+                generateLink();
+            }
+        }
+    }
+
+    private void updatePrivatePublic() {
+        radioButtonCell1.setChecked(!isPrivate, true);
+        radioButtonCell2.setChecked(isPrivate, true);
+        if (currentChat.megagroup) {
+            typeInfoCell.setText(isPrivate ? LocaleController.getString("MegaPrivateLinkHelp", R.string.MegaPrivateLinkHelp) : LocaleController.getString("MegaUsernameHelp", R.string.MegaUsernameHelp));
+            headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
+        } else {
+            typeInfoCell.setText(isPrivate ? LocaleController.getString("ChannelPrivateLinkHelp", R.string.ChannelPrivateLinkHelp) : LocaleController.getString("ChannelUsernameHelp", R.string.ChannelUsernameHelp));
+            headerCell.setText(isPrivate ? LocaleController.getString("ChannelInviteLinkTitle", R.string.ChannelInviteLinkTitle) : LocaleController.getString("ChannelLinkTitle", R.string.ChannelLinkTitle));
+        }
+        publicContainer.setVisibility(isPrivate ? View.GONE : View.VISIBLE);
+        privateContainer.setVisibility(isPrivate ? View.VISIBLE : View.GONE);
+        linkContainer.setPadding(0, 0, 0, isPrivate ? 0 : AndroidUtilities.dp(7));
+        privateContainer.setText(invite != null ? invite.link : LocaleController.getString("Loading", R.string.Loading), false);
+        nameTextView.clearFocus();
+        checkTextView.setVisibility(!isPrivate && checkTextView.length() != 0 ? View.VISIBLE : View.GONE);
+        AndroidUtilities.hideKeyboard(nameTextView);
+    }
+
+    private boolean checkUserName(final String name, boolean alert) {
+        if (name != null && name.length() > 0) {
+            checkTextView.setVisibility(View.VISIBLE);
+        } else {
+            checkTextView.setVisibility(View.GONE);
+        }
+        if (alert && name.length() == 0) {
+            return true;
+        }
+        if (checkRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(checkRunnable);
+            checkRunnable = null;
+            lastCheckName = null;
+            if (checkReqId != 0) {
+                ConnectionsManager.getInstance().cancelRequest(checkReqId, true);
+            }
+        }
+        lastNameAvailable = false;
+        if (name != null) {
+            if (name.startsWith("_") || name.endsWith("_")) {
+                checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                checkTextView.setTextColor(0xffcf3030);
+                return false;
+            }
+            for (int a = 0; a < name.length(); a++) {
+                char ch = name.charAt(a);
+                if (a == 0 && ch >= '0' && ch <= '9') {
+                    if (currentChat.megagroup) {
+                        if (alert) {
+                            showErrorAlert(LocaleController.getString("LinkInvalidStartNumberMega", R.string.LinkInvalidStartNumberMega));
+                        } else {
+                            checkTextView.setText(LocaleController.getString("LinkInvalidStartNumberMega", R.string.LinkInvalidStartNumberMega));
+                            checkTextView.setTextColor(0xffcf3030);
+                        }
+                    } else {
+                        if (alert) {
+                            showErrorAlert(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
+                        } else {
+                            checkTextView.setText(LocaleController.getString("LinkInvalidStartNumber", R.string.LinkInvalidStartNumber));
+                            checkTextView.setTextColor(0xffcf3030);
+                        }
+                    }
+                    return false;
+                }
+                if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                    if (alert) {
+                        showErrorAlert(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                    } else {
+                        checkTextView.setText(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                        checkTextView.setTextColor(0xffcf3030);
+                    }
+                    return false;
+                }
+            }
+        }
+        if (name == null || name.length() < 5) {
+            if (currentChat.megagroup) {
+                if (alert) {
+                    showErrorAlert(LocaleController.getString("LinkInvalidShortMega", R.string.LinkInvalidShortMega));
+                } else {
+                    checkTextView.setText(LocaleController.getString("LinkInvalidShortMega", R.string.LinkInvalidShortMega));
+                    checkTextView.setTextColor(0xffcf3030);
+                }
+            } else {
+                if (alert) {
+                    showErrorAlert(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
+                } else {
+                    checkTextView.setText(LocaleController.getString("LinkInvalidShort", R.string.LinkInvalidShort));
+                    checkTextView.setTextColor(0xffcf3030);
+                }
+            }
+            return false;
+        }
+        if (name.length() > 32) {
+            if (alert) {
+                showErrorAlert(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
+            } else {
+                checkTextView.setText(LocaleController.getString("LinkInvalidLong", R.string.LinkInvalidLong));
+                checkTextView.setTextColor(0xffcf3030);
+            }
+            return false;
+        }
+
+        if (!alert) {
+            checkTextView.setText(LocaleController.getString("LinkChecking", R.string.LinkChecking));
+            checkTextView.setTextColor(0xff6d6d72);
+            lastCheckName = name;
+            checkRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    TLRPC.TL_channels_checkUsername req = new TLRPC.TL_channels_checkUsername();
+                    req.username = name;
+                    req.channel = MessagesController.getInputChannel(chatId);
+                    checkReqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                        @Override
+                        public void run(final TLObject response, final TLRPC.TL_error error) {
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    checkReqId = 0;
+                                    if (lastCheckName != null && lastCheckName.equals(name)) {
+                                        if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                            checkTextView.setText(LocaleController.formatString("LinkAvailable", R.string.LinkAvailable, name));
+                                            checkTextView.setTextColor(0xff26972c);
+                                            lastNameAvailable = true;
+                                        } else {
+                                            if (error != null && error.text.equals("CHANNELS_ADMIN_PUBLIC_TOO_MUCH")) {
+                                                checkTextView.setText(LocaleController.getString("ChangePublicLimitReached", R.string.ChangePublicLimitReached));
+                                            } else {
+                                                checkTextView.setText(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                                            }
+                                            checkTextView.setTextColor(0xffcf3030);
+                                            lastNameAvailable = false;
+                                        }
+                                    }
+                                }
+                            });
+                        }
+                    }, ConnectionsManager.RequestFlagFailOnServerErrors);
+                }
+            };
+            AndroidUtilities.runOnUIThread(checkRunnable, 300);
+        }
+        return true;
+    }
+
+    private void generateLink() {
+        if (loadingInvite || invite != null) {
+            return;
+        }
+        loadingInvite = true;
+        TLRPC.TL_channels_exportInvite req = new TLRPC.TL_channels_exportInvite();
+        req.channel = MessagesController.getInputChannel(chatId);
+        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (error == null) {
+                            invite = (TLRPC.ExportedChatInvite) response;
+                        }
+                        loadingInvite = false;
+                        privateContainer.setText(invite != null ? invite.link : LocaleController.getString("Loading", R.string.Loading), false);
+                    }
+                });
+            }
+        });
+    }
+
+    private void showErrorAlert(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        switch (error) {
+            case "USERNAME_INVALID":
+                builder.setMessage(LocaleController.getString("LinkInvalid", R.string.LinkInvalid));
+                break;
+            case "USERNAME_OCCUPIED":
+                builder.setMessage(LocaleController.getString("LinkInUse", R.string.LinkInUse));
+                break;
+            case "USERNAMES_UNAVAILABLE":
+                builder.setMessage(LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
+                break;
+            default:
+                builder.setMessage(LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
+                break;
+        }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showDialog(builder.create());
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
index 1c1b286c0..1ad5b77b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelIntroActivity.java
@@ -23,6 +23,7 @@
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 
 public class ChannelIntroActivity extends BaseFragment {
 
@@ -33,10 +34,9 @@
 
     @Override
     public View createView(Context context) {
-
-        actionBar.setBackgroundColor(0xffffffff);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_CHANNEL_INTRO_COLOR);
         actionBar.setBackButtonImage(R.drawable.pl_back);
-        actionBar.setItemsBackground(R.drawable.bar_selector_audio);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_CHANNEL_INTRO_SELECTOR_COLOR);
         actionBar.setCastShadows(false);
         if (!AndroidUtilities.isTablet()) {
             actionBar.showActionModeTop();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
index 736be7769..78c2ff5df 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChannelUsersActivity.java
@@ -209,9 +209,9 @@ public void didSelectContact(TLRPC.User user, String param) {
                             args.putBoolean("returnAsResult", true);
                             args.putBoolean("needForwardCount", false);
                             args.putBoolean("allowUsernameSearch", true);
-                            if (isMegagroup) {
+                            /*if (isMegagroup) {
                                 args.putBoolean("allowBots", false);
-                            }
+                            }*/
                             args.putString("selectAlertString", LocaleController.getString("ChannelAddUserAdminAlert", R.string.ChannelAddUserAdminAlert));
                             ContactsActivity fragment = new ContactsActivity(args);
                             fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
@@ -560,7 +560,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int viewType = getItemViewType(i);
             if (viewType == 0) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 0);
+                    view = new UserCell(mContext, 1, 0, false);
                     view.setBackgroundColor(0xffffffff);
                 }
                 UserCell userCell = (UserCell) view;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 9cd8bbc00..eeeb857e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -21,6 +21,7 @@
 import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.media.ExifInterface;
@@ -41,6 +42,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
+import android.view.WindowManager;
 import android.webkit.MimeTypeMap;
 import android.widget.EditText;
 import android.widget.FrameLayout;
@@ -64,9 +66,10 @@
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.VideoEditedInfo;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.query.BotQuery;
 import org.telegram.messenger.query.MessagesSearchQuery;
-import org.telegram.messenger.query.ReplyMessageQuery;
+import org.telegram.messenger.query.MessagesQuery;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.support.widget.RecyclerView;
@@ -87,45 +90,40 @@
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BackDrawable;
 import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.SimpleTextView;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.ui.Adapters.StickersAdapter;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.ui.Cells.BotSwitchCell;
 import org.telegram.ui.Cells.ChatActionCell;
-import org.telegram.ui.Cells.ChatAudioCell;
 import org.telegram.ui.Cells.ChatBaseCell;
-import org.telegram.ui.Cells.ChatContactCell;
 import org.telegram.ui.Cells.ChatLoadingCell;
-import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Cells.ChatMessageCell;
-import org.telegram.ui.Cells.ChatMusicCell;
 import org.telegram.ui.Cells.ChatUnreadCell;
+import org.telegram.ui.Cells.CheckBoxCell;
 import org.telegram.ui.Components.AlertsCreator;
-import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.BotHelpCell;
 import org.telegram.ui.Components.ChatActivityEnterView;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.Components.ChatAttachView;
+import org.telegram.ui.Components.ChatAvatarContainer;
 import org.telegram.ui.Components.PlayerView;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.NumberTextView;
-import org.telegram.ui.Components.RadioButton;
-import org.telegram.ui.Components.RecordStatusDrawable;
 import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.SendingFileExDrawable;
-import org.telegram.ui.Components.ShareFrameLayout;
+import org.telegram.ui.Components.ShareAlert;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
-import org.telegram.ui.Components.TimerDrawable;
-import org.telegram.ui.Components.TypingDotsDrawable;
+import org.telegram.ui.Components.StickersAlert;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 import org.telegram.ui.Components.URLSpanReplacement;
@@ -140,7 +138,7 @@
 import java.util.regex.Matcher;
 
 @SuppressWarnings("unchecked")
-public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate,
+public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate,
         PhotoViewer.PhotoViewerProvider {
 
     protected TLRPC.Chat currentChat;
@@ -149,15 +147,12 @@
     private boolean userBlocked = false;
 
     private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList<>();
-    private ArrayList<ChatMediaCell> chatMediaCellsCache = new ArrayList<>();
 
     private Dialog closeChatDialog;
     private FrameLayout progressView;
     private FrameLayout bottomOverlay;
     protected ChatActivityEnterView chatActivityEnterView;
-    private ImageView timeItem;
     private View timeItem2;
-    private TimerDrawable timerDrawable;
     private ActionBarMenuItem menuItem;
     private ActionBarMenuItem attachItem;
     private ActionBarMenuItem headerItem;
@@ -168,24 +163,18 @@
     private RecyclerListView chatListView;
     private LinearLayoutManager chatLayoutManager;
     private ChatActivityAdapter chatAdapter;
-    private BackupImageView avatarImageView;
     private TextView bottomOverlayChatText;
     private FrameLayout bottomOverlayChat;
-    private TypingDotsDrawable typingDotsDrawable;
-    private RecordStatusDrawable recordStatusDrawable;
-    private SendingFileExDrawable sendingFileDrawable;
     private FrameLayout emptyViewContainer;
     private ArrayList<View> actionModeViews = new ArrayList<>();
-    private TextView nameTextView;
-    private TextView onlineTextView;
-    private RadioButton radioButton;
-    private FrameLayout avatarContainer;
+    private ChatAvatarContainer avatarContainer;
     private TextView bottomOverlayText;
     private TextView secretViewStatusTextView;
     private NumberTextView selectedMessagesCountTextView;
     private TextView actionModeTextView;
     private RecyclerListView stickersListView;
     private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
+    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
     private StickersAdapter stickersAdapter;
     private FrameLayout stickersPanel;
     private TextView muteItem;
@@ -195,29 +184,51 @@
     private TextView replyObjectTextView;
     private ImageView replyIconImageView;
     private MentionsAdapter mentionsAdapter;
+    private BotSwitchCell botSwitchCell;
+    private View botSwitchShadow;
+    private FrameLayout mentionContainer;
     private RecyclerListView mentionListView;
     private LinearLayoutManager mentionLayoutManager;
     private AnimatorSetProxy mentionListAnimation;
     private ChatAttachView chatAttachView;
     private BottomSheet chatAttachViewSheet;
     private LinearLayout reportSpamView;
+    private AnimatorSetProxy reportSpamViewAnimator;
     private TextView addToContactsButton;
     private TextView reportSpamButton;
     private FrameLayout reportSpamContainer;
     private PlayerView playerView;
     private TextView gifHintTextView;
     private View emojiButtonRed;
+    private FrameLayout pinnedMessageView;
+    private AnimatorSetProxy pinnedMessageViewAnimator;
+    private SimpleTextView pinnedMessageNameTextView;
+    private SimpleTextView pinnedMessageTextView;
+    private FrameLayout alertView;
+    private Runnable hideAlertViewRunnable;
+    private TextView alertNameTextView;
+    private TextView alertTextView;
+    private AnimatorSetProxy alertViewAnimator;
+
+    private boolean mentionListViewIgnoreLayout;
+    private int mentionListViewScrollOffsetY;
+    private int mentionListViewLastViewTop;
+    private int mentionListViewLastViewPosition;
+    private boolean mentionListViewIsScrolling;
+
+    private MessageObject pinnedMessageObject;
+    private int loadingPinnedMessage;
 
     private ObjectAnimatorProxy pagedownButtonAnimation;
     private AnimatorSetProxy replyButtonAnimation;
 
-    private TLRPC.User reportSpamUser;
-
     private boolean openSearchKeyboard;
 
     private int channelMessagesImportant;
     private boolean waitingForImportantLoad;
 
+    private boolean waitingForReplyMessageLoad;
+
     private boolean allowStickersPanel;
     private boolean allowContextBotPanel;
     private boolean allowContextBotPanelSecond = true;
@@ -239,6 +250,7 @@
     private Runnable waitingForCharaterEnterRunnable;
 
     private boolean openAnimationEnded;
+    private boolean attachAttachViewFirstShow = true;
 
     private int readWithDate;
     private int readWithMid;
@@ -271,6 +283,7 @@
     private int startLoadFromMessageId;
     private boolean needSelectFromMessageId;
     private int returnToMessageId;
+    private int returnToLoadIndex;
 
     private boolean first = true;
     private int unread_to_load;
@@ -286,19 +299,14 @@
     private Rect scrollRect = new Rect();
 
     protected TLRPC.ChatFull info = null;
-    private int onlineCount = -1;
 
     private HashMap<Integer, TLRPC.BotInfo> botInfo = new HashMap<>();
     private String botUser;
+    private long inlineReturn;
     private MessageObject botButtons;
     private MessageObject botReplyButtons;
     private int botsCount;
     private boolean hasBotsCommands;
-
-    private CharSequence lastPrintString;
-    private String lastStatus;
-    private int lastStatusDrawable;
-
     private long chatEnterTime = 0;
     private long chatLeaveTime = 0;
 
@@ -319,6 +327,7 @@
     private final static int mute = 18;
     private final static int reply = 19;
     private final static int edit_done = 20;
+    private final static int report = 21;
 
     private final static int bot_help = 30;
     private final static int bot_settings = 31;
@@ -370,6 +379,8 @@ public boolean onFragmentCreate() {
         final int chatId = arguments.getInt("chat_id", 0);
         final int userId = arguments.getInt("user_id", 0);
         final int encId = arguments.getInt("enc_id", 0);
+        inlineReturn = arguments.getLong("inline_return", 0);
+        String inlineQuery = arguments.getString("inline_query");
         startLoadFromMessageId = arguments.getInt("message_id", 0);
         int migrated_to = arguments.getInt("migrated_to", 0);
         scrollToTopOnResume = arguments.getBoolean("scrollToTopOnResume", false);
@@ -435,6 +446,9 @@ public void run() {
             }
             dialog_id = userId;
             botUser = arguments.getString("botUser");
+            if (inlineQuery != null) {
+                MessagesController.getInstance().sendBotStart(currentUser, inlineQuery);
+            }
         } else if (encId != 0) {
             currentEncryptedChat = MessagesController.getInstance().getEncryptedChat(encId);
             if (currentEncryptedChat == null) {
@@ -521,6 +535,8 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedMessagesViews);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoCantLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didLoadedPinnedMessage);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.peerSettingsDidLoaded);
 
         super.onFragmentCreate();
 
@@ -529,6 +545,7 @@ public void run() {
         }
 
         loading = true;
+        MessagesController.getInstance().loadPeerSettings(dialog_id, currentUser, currentChat);
         MessagesController.getInstance().setLastCreatedDialogId(dialog_id, true);
         if (startLoadFromMessageId != 0) {
             needSelectFromMessageId = true;
@@ -582,13 +599,6 @@ public void run() {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
         }
 
-        typingDotsDrawable = new TypingDotsDrawable();
-        typingDotsDrawable.setIsChat(currentChat != null);
-        recordStatusDrawable = new RecordStatusDrawable();
-        recordStatusDrawable.setIsChat(currentChat != null);
-        sendingFileDrawable = new SendingFileExDrawable();
-        sendingFileDrawable.setIsChat(currentChat != null);
-
         if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
             SecretChatHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat, null);
         }
@@ -602,6 +612,9 @@ public void onFragmentDestroy() {
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onDestroy();
         }
+        if (mentionsAdapter != null) {
+            mentionsAdapter.onDestroy();
+        }
         MessagesController.getInstance().setLastCreatedDialogId(dialog_id, false);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
@@ -638,12 +651,21 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioPlayStateChanged);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoCantLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didLoadedPinnedMessage);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.peerSettingsDidLoaded);
 
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
         }
         if (currentEncryptedChat != null) {
             MediaController.getInstance().stopMediaObserver();
+            try {
+                if (Build.VERSION.SDK_INT >= 14) {
+                    getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
+                }
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            }
         }
         if (currentUser != null) {
             MessagesController.getInstance().cancelLoadFullUser(currentUser.id);
@@ -673,24 +695,17 @@ public View createView(Context context) {
                 chatMessageCellsCache.add(new ChatMessageCell(context));
             }
         }
-        if (chatMediaCellsCache.isEmpty()) {
-            for (int a = 0; a < 4; a++) {
-                chatMediaCellsCache.add(new ChatMediaCell(context));
-            }
-        }
         for (int a = 1; a >= 0; a--) {
             selectedMessagesIds[a].clear();
             selectedMessagesCanCopyIds[a].clear();
         }
         cantDeleteMessagesCount = 0;
 
-        lastPrintString = null;
-        lastStatus = null;
         hasOwnBackground = true;
         chatAttachView = null;
         chatAttachViewSheet = null;
 
-        ResourceLoader.loadRecources(context);
+        Theme.loadRecources(context);
 
         actionBar.setBackButtonDrawable(new BackDrawable(false));
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
@@ -705,6 +720,7 @@ public void onItemClick(final int id) {
                         cantDeleteMessagesCount = 0;
                         chatActivityEnterView.setEditinigMessageObject(null, false);
                         actionBar.hideActionMode();
+                        updatePinnedMessageView(true);
                         updateVisibleRows();
                     } else {
                         finishFragment();
@@ -724,8 +740,10 @@ public void onItemClick(final int id) {
                             if (str.length() != 0) {
                                 str += "\n";
                             }
-                            if (messageObject.messageOwner.message != null) {
+                            if (messageObject.type == 0 && messageObject.messageOwner.message != null) {
                                 str += messageObject.messageOwner.message;
+                            } else if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.caption != null) {
+                                str += messageObject.messageOwner.media.caption;
                             } else {
                                 str += messageObject.messageText;
                             }
@@ -751,48 +769,19 @@ public void onItemClick(final int id) {
                     }
                     cantDeleteMessagesCount = 0;
                     actionBar.hideActionMode();
+                    updatePinnedMessageView(true);
                     updateVisibleRows();
                 } else if (id == edit_done) {
                     if (chatActivityEnterView != null && (chatActivityEnterView.isEditingCaption() || chatActivityEnterView.hasText())) {
                         chatActivityEnterView.doneEditingMessage();
                         actionBar.hideActionMode();
+                        updatePinnedMessageView(true);
                     }
                 } else if (id == delete) {
                     if (getParentActivity() == null) {
                         return;
                     }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", selectedMessagesIds[0].size() + selectedMessagesIds[1].size())));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            for (int a = 1; a >= 0; a--) {
-                                ArrayList<Integer> ids = new ArrayList<>(selectedMessagesIds[a].keySet());
-                                ArrayList<Long> random_ids = null;
-                                int channelId = 0;
-                                if (!ids.isEmpty()) {
-                                    MessageObject msg = selectedMessagesIds[a].get(ids.get(0));
-                                    if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
-                                        channelId = msg.messageOwner.to_id.channel_id;
-                                    }
-                                }
-                                if (currentEncryptedChat != null) {
-                                    random_ids = new ArrayList<>();
-                                    for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds[a].entrySet()) {
-                                        MessageObject msg = entry.getValue();
-                                        if (msg.messageOwner.random_id != 0 && msg.type != 10) {
-                                            random_ids.add(msg.messageOwner.random_id);
-                                        }
-                                    }
-                                }
-                                MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
-                            }
-                            actionBar.hideActionMode();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
+                    createDeleteMessagesAlert(null);
                 } else if (id == forward) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
@@ -852,22 +841,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         args.putBoolean("addContact", true);
                         presentFragment(new ContactAddActivity(args));
                     } else {
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
-                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialogInterface, int i) {
-                                SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
-                                moveScrollToLastMessage();
-                                showReplyPanel(false, null, null, null, false, true);
-                            }
-                        });
-                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
+                        shareMyContact(replyingMessageObject);
                     }
                 } else if (id == mute) {
                     toggleMute(false);
+                } else if (id == report) {
+                    showDialog(AlertsCreator.createReportAlert(getParentActivity(), dialog_id, ChatActivity.this));
                 } else if (id == reply) {
                     MessageObject messageObject = null;
                     for (int a = 1; a >= 0; a--) {
@@ -883,99 +862,35 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
                     cantDeleteMessagesCount = 0;
                     actionBar.hideActionMode();
+                    updatePinnedMessageView(true);
                     updateVisibleRows();
                 } else if (id == chat_menu_attach) {
                     if (getParentActivity() == null) {
                         return;
                     }
 
-                    if (chatAttachView == null) {
-                        BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-                        chatAttachView = new ChatAttachView(getParentActivity());
-                        chatAttachView.setDelegate(new ChatAttachView.ChatAttachViewDelegate() {
-                            @Override
-                            public void didPressedButton(int button) {
-                                if (button == 7) {
-                                    chatAttachViewSheet.dismiss();
-                                    HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = chatAttachView.getSelectedPhotos();
-                                    if (!selectedPhotos.isEmpty()) {
-                                        ArrayList<String> photos = new ArrayList<>();
-                                        ArrayList<String> captions = new ArrayList<>();
-                                        for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
-                                            MediaController.PhotoEntry photoEntry = entry.getValue();
-                                            if (photoEntry.imagePath != null) {
-                                                photos.add(photoEntry.imagePath);
-                                                captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
-                                            } else if (photoEntry.path != null) {
-                                                photos.add(photoEntry.path);
-                                                captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
-                                            }
-                                            photoEntry.imagePath = null;
-                                            photoEntry.thumbPath = null;
-                                            photoEntry.caption = null;
-                                        }
-                                        SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
-                                        showReplyPanel(false, null, null, null, false, true);
-                                    }
-                                    return;
-                                } else {
-                                    if (chatAttachViewSheet != null) {
-                                        chatAttachViewSheet.dismissWithButtonClick(button);
-                                    }
-                                }
-                                processSelectedAttach(button);
-                            }
-                        });
-                        builder.setDelegate(new BottomSheet.BottomSheetDelegate() {
-
-                            @Override
-                            public void onRevealAnimationStart(boolean open) {
-                                if (chatAttachView != null) {
-                                    chatAttachView.onRevealAnimationStart(open);
-                                }
-                            }
-
-                            @Override
-                            public void onRevealAnimationProgress(boolean open, float radius, int x, int y) {
-                                if (chatAttachView != null) {
-                                    chatAttachView.onRevealAnimationProgress(open, radius, x, y);
-                                }
-                            }
-
-                            @Override
-                            public void onRevealAnimationEnd(boolean open) {
-                                if (chatAttachView != null) {
-                                    chatAttachView.onRevealAnimationEnd(open);
-                                }
-                            }
-
-                            @Override
-                            public void onOpenAnimationEnd() {
-                                if (chatAttachView != null) {
-                                    chatAttachView.onRevealAnimationEnd(true);
-                                }
-                            }
-
-                            @Override
-                            public View getRevealView() {
-                                return menuItem;
-                            }
-                        });
-                        builder.setApplyTopPaddings(false);
-                        builder.setUseRevealAnimation();
-                        builder.setCustomView(chatAttachView);
-                        chatAttachViewSheet = builder.create();
-                    }
+                    createChatAttachView();
+                    chatAttachView.loadGalleryPhotos();
                     if (Build.VERSION.SDK_INT == 21 || Build.VERSION.SDK_INT == 22) {
                         chatActivityEnterView.closeKeyboard();
                     }
 
                     chatAttachView.init(ChatActivity.this);
-                    showDialog(chatAttachViewSheet);
+                    if (attachAttachViewFirstShow) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                showDialog(chatAttachViewSheet);
+                            }
+                        });
+                        attachAttachViewFirstShow = false;
+                    } else {
+                        showDialog(chatAttachViewSheet);
+                    }
                 } else if (id == bot_help) {
-                    SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                    SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null, null);
                 } else if (id == bot_settings) {
-                    SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                    SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null, null);
                 } else if (id == search) {
                     openSearchWithText(null);
                 } else if (id == search_up) {
@@ -993,34 +908,13 @@ public View getRevealView() {
             }
         });
 
-        avatarContainer = new FrameLayoutFixed(context);
-        avatarContainer.setBackgroundResource(R.drawable.bar_selector);
-        avatarContainer.setPadding(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0);
+        avatarContainer = new ChatAvatarContainer(context, this, ChatObject.isChannel(currentChat) && !currentChat.megagroup && !(currentChat instanceof TLRPC.TL_channelForbidden), currentEncryptedChat != null);
+        avatarContainer.setRadioChecked(channelMessagesImportant == 1, false);
         actionBar.addView(avatarContainer, 0, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 56, 0, 40, 0));
-        avatarContainer.setOnClickListener(new View.OnClickListener() {
+        avatarContainer.setDelegate(new ChatAvatarContainer.ChatAvatarContainerDelegate() {
             @Override
-            public void onClick(View v) {
-                if (radioButton == null || radioButton.getVisibility() != View.VISIBLE) {
-                    if (currentUser != null) {
-                        Bundle args = new Bundle();
-                        args.putInt("user_id", currentUser.id);
-                        if (currentEncryptedChat != null) {
-                            args.putLong("dialog_id", dialog_id);
-                        }
-                        ProfileActivity fragment = new ProfileActivity(args);
-                        fragment.setPlayProfileAnimation(true);
-                        presentFragment(fragment);
-                    } else if (currentChat != null) {
-                        Bundle args = new Bundle();
-                        args.putInt("chat_id", currentChat.id);
-                        ProfileActivity fragment = new ProfileActivity(args);
-                        fragment.setChatInfo(info);
-                        fragment.setPlayProfileAnimation(true);
-                        presentFragment(fragment);
-                    }
-                } else {
-                    switchImportantMode(null);
-                }
+            public void didPressedRadioButton() {
+                switchImportantMode(null);
             }
         });
 
@@ -1036,58 +930,6 @@ public void onClick(View v) {
             }
         }
 
-        avatarImageView = new BackupImageView(context);
-        avatarImageView.setRoundRadius(AndroidUtilities.dp(21));
-        avatarContainer.addView(avatarImageView, LayoutHelper.createFrame(42, 42, Gravity.TOP | Gravity.LEFT, 0, 3, 0, 0));
-
-        if (currentEncryptedChat != null) {
-            timeItem = new ImageView(context);
-            timeItem.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(10), AndroidUtilities.dp(5), AndroidUtilities.dp(5));
-            timeItem.setScaleType(ImageView.ScaleType.CENTER);
-            timeItem.setImageDrawable(timerDrawable = new TimerDrawable(context));
-            avatarContainer.addView(timeItem, LayoutHelper.createFrame(34, 34, Gravity.TOP | Gravity.LEFT, 16, 18, 0, 0));
-            timeItem.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (getParentActivity() == null) {
-                        return;
-                    }
-                    showDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat).create());
-                }
-            });
-        }
-
-        nameTextView = new TextView(context);
-        nameTextView.setTextColor(0xffffffff);
-        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        nameTextView.setLines(1);
-        nameTextView.setMaxLines(1);
-        nameTextView.setSingleLine(true);
-        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        nameTextView.setGravity(Gravity.LEFT);
-        nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-        nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        avatarContainer.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 22));
-
-        onlineTextView = new TextView(context);
-        onlineTextView.setTextColor(0xffd7e8f7);
-        onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        onlineTextView.setLines(1);
-        onlineTextView.setMaxLines(1);
-        onlineTextView.setSingleLine(true);
-        onlineTextView.setEllipsize(TextUtils.TruncateAt.END);
-        onlineTextView.setGravity(Gravity.LEFT);
-
-        if (ChatObject.isChannel(currentChat) && !currentChat.megagroup && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
-            radioButton = new RadioButton(context);
-            radioButton.setChecked(channelMessagesImportant == 1, false);
-            radioButton.setVisibility(View.GONE);
-            avatarContainer.addView(radioButton, LayoutHelper.createFrame(24, 24, Gravity.LEFT | Gravity.BOTTOM, 50, 0, 0, 0));
-            avatarContainer.addView(onlineTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 4));
-        } else {
-            avatarContainer.addView(onlineTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 4));
-        }
-
         ActionBarMenu menu = actionBar.createMenu();
 
         if (currentEncryptedChat == null && !isBroadcast) {
@@ -1133,7 +975,7 @@ public void run() {
                             searchItem.getSearchField().requestFocus();
                             AndroidUtilities.showKeyboard(searchItem.getSearchField());
                         }
-                    }, 300); //TODO find a better way to open keyboard
+                    }, 300);
                 }
 
                 @Override
@@ -1158,6 +1000,9 @@ public void onSearchPressed(EditText editText) {
         if (searchItem != null) {
             headerItem.addSubItem(search, LocaleController.getString("Search", R.string.Search), 0);
         }
+        if (ChatObject.isChannel(currentChat) && !currentChat.creator && (!currentChat.megagroup || currentChat.username != null && currentChat.username.length() > 0)) {
+            headerItem.addSubItem(report, LocaleController.getString("ReportChat", R.string.ReportChat), 0);
+        }
         if (currentUser != null) {
             addContactItem = headerItem.addSubItem(share_contact, "", 0);
         }
@@ -1180,7 +1025,8 @@ public void onSearchPressed(EditText editText) {
         }
 
         updateTitle();
-        updateSubtitle();
+        avatarContainer.updateOnlineCount();
+        avatarContainer.updateSubtitle();
         updateTitleIcons();
 
         attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
@@ -1195,7 +1041,7 @@ public void onSearchPressed(EditText editText) {
         selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
         selectedMessagesCountTextView.setTextSize(18);
         selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        selectedMessagesCountTextView.setTextColor(0xff737373);
+        selectedMessagesCountTextView.setTextColor(Theme.ACTION_BAR_ACTION_MODE_TEXT_COLOR);
         actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
         selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
             @Override
@@ -1207,7 +1053,7 @@ public boolean onTouch(View v, MotionEvent event) {
         actionModeTextView = new TextView(actionMode.getContext());
         actionModeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
         actionModeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-        actionModeTextView.setTextColor(0xff737373);
+        actionModeTextView.setTextColor(Theme.ACTION_BAR_ACTION_MODE_TEXT_COLOR);
         actionModeTextView.setVisibility(View.GONE);
         actionModeTextView.setGravity(Gravity.CENTER_VERTICAL);
         actionModeTextView.setText(LocaleController.getString("Edit", R.string.Edit));
@@ -1221,17 +1067,17 @@ public boolean onTouch(View v, MotionEvent event) {
 
         if (currentEncryptedChat == null) {
             if (!isBroadcast) {
-                actionModeViews.add(actionMode.addItem(reply, R.drawable.ic_ab_reply, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(reply, R.drawable.ic_ab_reply, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
             }
-            actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-            actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-            actionModeViews.add(actionMode.addItem(edit_done, R.drawable.check_blue, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(edit_done, R.drawable.check_blue, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
             actionMode.getItem(edit_done).setVisibility(View.GONE);
         } else {
-            actionModeViews.add(actionMode.addItem(reply, R.drawable.ic_ab_reply, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-            actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
-            actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(reply, R.drawable.ic_ab_reply, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
         }
         actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(delete).setVisibility(cantDeleteMessagesCount == 0 ? View.VISIBLE : View.GONE);
@@ -1276,6 +1122,51 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                             child.measure(contentWidthSpec, contentHeightSpec);
                         } else if (chatActivityEnterView.isPopupView(child)) {
                             child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, MeasureSpec.EXACTLY));
+                        } else if (child == mentionContainer) {
+                            int orientation = mentionsAdapter.getOrientation();
+                            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mentionContainer.getLayoutParams();
+                            int height;
+                            mentionListViewIgnoreLayout = true;
+                            if (mentionsAdapter.isBotContext()) {
+                                if (orientation == LinearLayoutManager.HORIZONTAL) {
+                                    height = AndroidUtilities.dp(90);
+                                    if (botSwitchCell.getVisibility() == VISIBLE) {
+                                        height += AndroidUtilities.dp(36);
+                                        mentionListView.setPadding(0, AndroidUtilities.dp(2 + 36), AndroidUtilities.dp(5), 0);
+                                    } else {
+                                        mentionListView.setPadding(0, AndroidUtilities.dp(2), AndroidUtilities.dp(5), 0);
+                                    }
+                                } else {
+                                    int size = mentionsAdapter.getItemCount();
+                                    int maxHeight = 0;
+                                    if (mentionsAdapter.getBotContextSwitch() != null) {
+                                        maxHeight += 36;
+                                        size -= 1;
+                                    }
+                                    maxHeight += size * 68;
+
+                                    height = heightSize - chatActivityEnterView.getMeasuredHeight() + (maxHeight != 0 ? AndroidUtilities.dp(2) : 0);
+                                    mentionListView.setPadding(0, Math.max(0, height - AndroidUtilities.dp(Math.min(maxHeight, 68 * 1.8f))), 0, 0);
+                                }
+                                layoutParams.height = height;
+                                layoutParams.topMargin = 0;
+                            } else {
+                                if (orientation == LinearLayoutManager.HORIZONTAL) {
+                                    mentionListView.setPadding(0, AndroidUtilities.dp(2), AndroidUtilities.dp(5), 0);
+                                    height = 90;
+                                } else {
+                                    mentionListView.setPadding(0, AndroidUtilities.dp(2), 0, 0);
+                                    if (mentionsAdapter.isBotContext()) {
+                                        height = 36 * 3 + 18;
+                                    } else {
+                                        height = 36 * Math.min(3, mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0);
+                                    }
+                                }
+                                layoutParams.height = AndroidUtilities.dp(height + (height != 0 ? 2 : 0));
+                                layoutParams.topMargin = -AndroidUtilities.dp(height);
+                            }
+                            mentionListViewIgnoreLayout = false;
+                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(layoutParams.height, MeasureSpec.EXACTLY));
                         } else {
                             measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
                         }
@@ -1339,7 +1230,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                             childTop = lp.topMargin;
                     }
 
-                    if (child == mentionListView) {
+                    if (child == mentionContainer) {
                         childTop -= chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2);
                     } else if (child == pagedownButton) {
                         childTop -= chatActivityEnterView.getMeasuredHeight();
@@ -1353,6 +1244,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                     child.layout(childLeft, childTop, childLeft + width, childTop + height);
                 }
 
+                updateMessagesVisisblePart();
                 notifyHeightChanged();
             }
         };
@@ -1378,22 +1270,25 @@ public boolean onTouch(View v, MotionEvent event) {
             } else {
                 emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
             }
-            emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             emptyView.setGravity(Gravity.CENTER);
-            emptyView.setTextColor(0xffffffff);
-            emptyView.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
-            emptyView.setPadding(AndroidUtilities.dp(7), AndroidUtilities.dp(1), AndroidUtilities.dp(7), AndroidUtilities.dp(1));
+            emptyView.setTextColor(Theme.CHAT_EMPTY_VIEW_TEXT_COLOR);
+            emptyView.setBackgroundResource(R.drawable.system);
+            emptyView.getBackground().setColorFilter(Theme.colorFilter);
+            emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            emptyView.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(2), AndroidUtilities.dp(10), AndroidUtilities.dp(3));
             emptyViewContainer.addView(emptyView, new FrameLayout.LayoutParams(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
         } else {
             LinearLayout secretChatPlaceholder = new LinearLayout(context);
-            secretChatPlaceholder.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
+            secretChatPlaceholder.setBackgroundResource(R.drawable.system);
+            secretChatPlaceholder.getBackground().setColorFilter(Theme.colorFilter);
             secretChatPlaceholder.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
             secretChatPlaceholder.setOrientation(LinearLayout.VERTICAL);
             emptyViewContainer.addView(secretChatPlaceholder, new FrameLayout.LayoutParams(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
             secretViewStatusTextView = new TextView(context);
             secretViewStatusTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            secretViewStatusTextView.setTextColor(0xffffffff);
+            secretViewStatusTextView.setTextColor(Theme.SECRET_CHAT_INFO_TEXT_COLOR);
             secretViewStatusTextView.setGravity(Gravity.CENTER_HORIZONTAL);
             secretViewStatusTextView.setMaxWidth(AndroidUtilities.dp(210));
             if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
@@ -1406,7 +1301,7 @@ public boolean onTouch(View v, MotionEvent event) {
             TextView textView = new TextView(context);
             textView.setText(LocaleController.getString("EncryptedDescriptionTitle", R.string.EncryptedDescriptionTitle));
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-            textView.setTextColor(0xffffffff);
+            textView.setTextColor(Theme.SECRET_CHAT_INFO_TEXT_COLOR);
             textView.setGravity(Gravity.CENTER_HORIZONTAL);
             textView.setMaxWidth(AndroidUtilities.dp(260));
             secretChatPlaceholder.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, 0, 8, 0, 0));
@@ -1421,7 +1316,7 @@ public boolean onTouch(View v, MotionEvent event) {
 
                 textView = new TextView(context);
                 textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
-                textView.setTextColor(0xffffffff);
+                textView.setTextColor(Theme.SECRET_CHAT_INFO_TEXT_COLOR);
                 textView.setGravity(Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
                 textView.setMaxWidth(AndroidUtilities.dp(260));
 
@@ -1453,6 +1348,9 @@ public boolean onTouch(View v, MotionEvent event) {
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onDestroy();
         }
+        if (mentionsAdapter != null) {
+            mentionsAdapter.onDestroy();
+        }
 
         chatListView = new RecyclerListView(context) {
             @Override
@@ -1504,7 +1402,7 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
 
             @Override
             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
-                checkScrollForLoad();
+                checkScrollForLoad(true);
                 int firstVisibleItem = chatLayoutManager.findFirstVisibleItemPosition();
                 int visibleItemCount = firstVisibleItem == RecyclerView.NO_POSITION ? 0 : Math.abs(chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
                 if (visibleItemCount > 0) {
@@ -1587,10 +1485,10 @@ public boolean onInterceptTouchEvent(MotionEvent event) {
                         if (top > y || bottom < y) {
                             continue;
                         }
-                        if (!(view instanceof ChatMediaCell)) {
+                        if (!(view instanceof ChatMessageCell)) {
                             break;
                         }
-                        final ChatMediaCell cell = (ChatMediaCell) view;
+                        final ChatMessageCell cell = (ChatMessageCell) view;
                         final MessageObject messageObject = cell.getMessageObject();
                         if (messageObject == null || messageObject.isSending() || !messageObject.isSecretPhoto() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
                             break;
@@ -1632,7 +1530,8 @@ public void run() {
         contentView.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
 
         View view = new View(context);
-        view.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+        view.setBackgroundResource(R.drawable.system_loader);
+        view.getBackground().setColorFilter(Theme.colorFilter);
         progressView.addView(view, LayoutHelper.createFrame(36, 36, Gravity.CENTER));
 
         ProgressBar progressBar = new ProgressBar(context);
@@ -1645,13 +1544,78 @@ public void run() {
         AndroidUtilities.setProgressBarAnimationDuration(progressBar, 1500);
         progressView.addView(progressBar, LayoutHelper.createFrame(32, 32, Gravity.CENTER));
 
+        if (ChatObject.isChannel(currentChat)) {
+            pinnedMessageView = new FrameLayoutFixed(context);
+            pinnedMessageView.setTag(1);
+            ViewProxy.setTranslationY(pinnedMessageView, -AndroidUtilities.dp(50));
+            pinnedMessageView.clearAnimation();
+            pinnedMessageView.setVisibility(View.GONE);
+            pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
+            contentView.addView(pinnedMessageView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT));
+            pinnedMessageView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    scrollToMessageId(info.pinned_msg_id, 0, true, 0);
+                }
+            });
+
+            View lineView = new View(context);
+            lineView.setBackgroundColor(0xff6c9fd2);
+            pinnedMessageView.addView(lineView, LayoutHelper.createFrame(2, 32, Gravity.LEFT | Gravity.TOP, 8, 8, 0, 0));
+
+            pinnedMessageNameTextView = new SimpleTextView(context);
+            pinnedMessageNameTextView.setTextSize(14);
+            pinnedMessageNameTextView.setTextColor(Theme.PINNED_PANEL_NAME_TEXT_COLOR);
+            pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            pinnedMessageView.addView(pinnedMessageNameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, AndroidUtilities.dp(18), Gravity.TOP | Gravity.LEFT, 18, 7.3f, 52, 0));
+
+            pinnedMessageTextView = new SimpleTextView(context);
+            pinnedMessageTextView.setTextSize(14);
+            pinnedMessageTextView.setTextColor(Theme.PINNED_PANEL_MESSAGE_TEXT_COLOR);
+            pinnedMessageView.addView(pinnedMessageTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, AndroidUtilities.dp(18), Gravity.TOP | Gravity.LEFT, 18, 25.3f, 52, 0));
+
+            ImageView closePinned = new ImageView(context);
+            closePinned.setImageResource(R.drawable.miniplayer_close);
+            closePinned.setScaleType(ImageView.ScaleType.CENTER);
+            pinnedMessageView.addView(closePinned, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP));
+            closePinned.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    if (currentChat.creator || currentChat.editor) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                MessagesController.getInstance().pinChannelMessage(currentChat, 0, false);
+                            }
+                        });
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showDialog(builder.create());
+                    } else {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        preferences.edit().putInt("pin_" + dialog_id, info.pinned_msg_id).commit();
+                        updatePinnedMessageView(true);
+                    }
+                }
+            });
+        }
+
         reportSpamView = new LinearLayout(context);
+        reportSpamView.setTag(1);
+        ViewProxy.setTranslationY(reportSpamView, -AndroidUtilities.dp(50));
+        reportSpamView.clearAnimation();
         reportSpamView.setVisibility(View.GONE);
         reportSpamView.setBackgroundResource(R.drawable.blockpanel);
         contentView.addView(reportSpamView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT));
 
         addToContactsButton = new TextView(context);
-        addToContactsButton.setTextColor(0xff4a82b5);
+        addToContactsButton.setTextColor(Theme.CHAT_ADD_CONTACT_TEXT_COLOR);
+        addToContactsButton.setVisibility(View.GONE);
         addToContactsButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         addToContactsButton.setSingleLine(true);
@@ -1671,26 +1635,32 @@ public void onClick(View v) {
         });
 
         reportSpamContainer = new FrameLayout(context);
-        reportSpamView.addView(reportSpamContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f, Gravity.LEFT | Gravity.TOP));
+        reportSpamView.addView(reportSpamContainer, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
 
         reportSpamButton = new TextView(context);
-        reportSpamButton.setTextColor(0xffcf5957);
+        reportSpamButton.setTextColor(Theme.CHAT_REPORT_SPAM_TEXT_COLOR);
         reportSpamButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         reportSpamButton.setSingleLine(true);
         reportSpamButton.setMaxLines(1);
-        reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
+        if (currentChat != null) {
+            reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
+        } else {
+            reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
+        }
         reportSpamButton.setGravity(Gravity.CENTER);
-        reportSpamButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(50), 0);
+        reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
         reportSpamContainer.addView(reportSpamButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP));
         reportSpamButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (reportSpamUser == null || getParentActivity() == null) {
+                if (getParentActivity() == null) {
                     return;
                 }
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                if (currentChat != null) {
+                if (ChatObject.isChannel(currentChat) && !currentChat.megagroup) {
+                    builder.setMessage(LocaleController.getString("ReportSpamAlertChannel", R.string.ReportSpamAlertChannel));
+                } else if (currentChat != null) {
                     builder.setMessage(LocaleController.getString("ReportSpamAlertGroup", R.string.ReportSpamAlertGroup));
                 } else {
                     builder.setMessage(LocaleController.getString("ReportSpamAlert", R.string.ReportSpamAlert));
@@ -1699,31 +1669,21 @@ public void onClick(View v) {
                 builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
-                        if (reportSpamUser == null) {
-                            return;
+                        if (currentUser != null) {
+                            MessagesController.getInstance().blockUser(currentUser.id);
                         }
-                        TLRPC.TL_messages_reportSpam req = new TLRPC.TL_messages_reportSpam();
+                        MessagesController.getInstance().reportSpam(dialog_id, currentUser, currentChat);
+                        updateSpamView();
                         if (currentChat != null) {
-                            req.peer = MessagesController.getInputPeer(-currentChat.id);
-                        } else if (currentUser != null) {
-                            req.peer = MessagesController.getInputPeer(currentUser.id);
-                        }
-                        MessagesController.getInstance().blockUser(reportSpamUser.id);
-                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                            @Override
-                            public void run(TLObject response, TLRPC.TL_error error) {
-                                if (error == null) {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                            preferences.edit().putBoolean("spam_" + dialog_id, true).commit();
-                                            updateSpamView();
-                                        }
-                                    });
-                                }
+                            if (ChatObject.isNotInChat(currentChat)) {
+                                MessagesController.getInstance().deleteDialog(dialog_id, 0);
+                            } else {
+                                MessagesController.getInstance().deleteUserFromChat((int) -dialog_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
                             }
-                        }, ConnectionsManager.RequestFlagFailOnServerErrors);
+                        } else {
+                            MessagesController.getInstance().deleteDialog(dialog_id, 0);
+                        }
+                        finishFragment();
                     }
                 });
                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -1732,64 +1692,175 @@ public void run() {
         });
 
         ImageView closeReportSpam = new ImageView(context);
-        closeReportSpam.setImageResource(R.drawable.delete_reply);
+        closeReportSpam.setImageResource(R.drawable.miniplayer_close);
         closeReportSpam.setScaleType(ImageView.ScaleType.CENTER);
         reportSpamContainer.addView(closeReportSpam, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP));
         closeReportSpam.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                preferences.edit().putBoolean("spam_" + dialog_id, true).commit();
+                MessagesController.getInstance().hideReportSpam(dialog_id, currentUser, currentChat);
                 updateSpamView();
             }
         });
 
+        alertView = new FrameLayoutFixed(context);
+        alertView.setTag(1);
+        ViewProxy.setTranslationY(alertView, -AndroidUtilities.dp(50));
+        alertView.clearAnimation();
+        alertView.setVisibility(View.GONE);
+        alertView.setBackgroundResource(R.drawable.blockpanel);
+        contentView.addView(alertView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 50, Gravity.TOP | Gravity.LEFT));
+
+        alertNameTextView = new TextView(context);
+        alertNameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        alertNameTextView.setTextColor(Theme.ALERT_PANEL_NAME_TEXT_COLOR);
+        alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        alertNameTextView.setSingleLine(true);
+        alertNameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        alertNameTextView.setMaxLines(1);
+        alertView.addView(alertNameTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 8, 5, 8, 0));
+
+        alertTextView = new TextView(context);
+        alertTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        alertTextView.setTextColor(Theme.ALERT_PANEL_MESSAGE_TEXT_COLOR);
+        alertTextView.setSingleLine(true);
+        alertTextView.setEllipsize(TextUtils.TruncateAt.END);
+        alertTextView.setMaxLines(1);
+        alertView.addView(alertTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 8, 23, 8, 0));
+
         if (!isBroadcast) {
-            mentionListView = new RecyclerListView(context);
+            mentionContainer = new FrameLayoutFixed(context) {
+
+                private Drawable background;
+
+                @Override
+                public void onDraw(Canvas canvas) {
+                    if (mentionsAdapter.isBotContext() && mentionsAdapter.getOrientation() == LinearLayoutManager.VERTICAL) {
+                        background.setBounds(0, mentionListViewScrollOffsetY - AndroidUtilities.dp(2), getMeasuredWidth(), getMeasuredHeight());
+                    } else {
+                        background.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
+                    }
+                    background.draw(canvas);
+                }
+
+                @Override
+                public void setBackgroundResource(int resid) {
+                    background = getContext().getResources().getDrawable(resid);
+                }
+
+                @Override
+                public void requestLayout() {
+                    if (mentionListViewIgnoreLayout) {
+                        return;
+                    }
+                    super.requestLayout();
+                }
+            };
+            mentionContainer.setBackgroundResource(R.drawable.compose_panel);
+            mentionContainer.setVisibility(View.GONE);
+            mentionContainer.setWillNotDraw(false);
+            contentView.addView(mentionContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
+
+            mentionListView = new RecyclerListView(context) {
+
+                private int lastWidth;
+                private int lastHeight;
+
+                @Override
+                public boolean onInterceptTouchEvent(MotionEvent event) {
+                    if (!mentionListViewIsScrolling && mentionListViewScrollOffsetY != 0 && event.getY() < mentionListViewScrollOffsetY && mentionsAdapter.isBotContext() && mentionsAdapter.getOrientation() == LinearLayoutManager.VERTICAL) {
+                        return false;
+                    }
+                    boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, mentionListView, 0);
+                    return super.onInterceptTouchEvent(event) || result;
+                }
+
+                @Override
+                public boolean onTouchEvent(MotionEvent event) {
+                    if (!mentionListViewIsScrolling && mentionListViewScrollOffsetY != 0 && event.getY() < mentionListViewScrollOffsetY && mentionsAdapter.isBotContext() && mentionsAdapter.getOrientation() == LinearLayoutManager.VERTICAL) {
+                        return false;
+                    }
+                    //supress warning
+                    return super.onTouchEvent(event);
+                }
+
+                @Override
+                public void requestLayout() {
+                    if (mentionListViewIgnoreLayout) {
+                        return;
+                    }
+                    super.requestLayout();
+                }
+
+                @Override
+                protected void onLayout(boolean changed, int l, int t, int r, int b) {
+                    int width = r - l;
+                    int height = b - t;
+
+                    int newPosition = -1;
+                    int newTop = 0;
+                    if (mentionListView != null && mentionListViewLastViewPosition >= 0 && width == lastWidth && height - lastHeight != 0) {
+                        newPosition = mentionListViewLastViewPosition;
+                        newTop = mentionListViewLastViewTop + height - lastHeight - getPaddingTop();
+                    }
+
+                    super.onLayout(changed, l, t, r, b);
+
+                    if (newPosition != -1) {
+                        mentionListViewIgnoreLayout = true;
+                        mentionLayoutManager.scrollToPositionWithOffset(newPosition, newTop);
+                        super.onLayout(false, l, t, r, b);
+                        mentionListViewIgnoreLayout = false;
+                    }
+
+                    lastHeight = height;
+                    lastWidth = width;
+                    mentionListViewUpdateLayout();
+                }
+            };
+            mentionListView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return StickerPreviewViewer.getInstance().onTouch(event, mentionListView, 0, mentionsOnItemClickListener);
+                }
+            });
             mentionLayoutManager = new LinearLayoutManager(context) {
                 @Override
                 public boolean supportsPredictiveItemAnimations() {
                     return false;
                 }
             };
+            mentionListView.setItemAnimator(null);
+            mentionListView.setLayoutAnimation(null);
             mentionLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
             mentionListView.setLayoutManager(mentionLayoutManager);
+            mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
+            mentionContainer.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
-            mentionListView.setBackgroundResource(R.drawable.compose_panel);
-            mentionListView.setVisibility(View.GONE);
-            mentionListView.setPadding(0, AndroidUtilities.dp(2), 0, 0);
-            mentionListView.setClipToPadding(true);
-            mentionListView.setDisallowInterceptTouchEvents(true);
-            if (Build.VERSION.SDK_INT > 8) {
-                mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
-            }
-            contentView.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
-
-            mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(context, false, new MentionsAdapter.MentionsAdapterDelegate() {
+            mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(context, false, dialog_id, new MentionsAdapter.MentionsAdapterDelegate() {
                 @Override
                 public void needChangePanelVisibility(boolean show) {
                     if (show) {
                         int orientation = mentionsAdapter.getOrientation();
-
-                        FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
-                        int height;
                         if (orientation == LinearLayoutManager.HORIZONTAL) {
-                            mentionListView.setPadding(0, AndroidUtilities.dp(2), AndroidUtilities.dp(5), 0);
                             mentionListView.setClipToPadding(false);
-                            height = 90;
+                            mentionListView.setDisallowInterceptTouchEvents(true);
                         } else {
-                            mentionListView.setPadding(0, AndroidUtilities.dp(2), 0, 0);
-                            mentionListView.setClipToPadding(true);
-                            if (mentionsAdapter.isBotContext()) {
-                                height = 36 * 3 + 18;
-                            } else {
-                                height = 36 * Math.min(3, mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0);
-                            }
+                            mentionListView.setClipToPadding(!mentionsAdapter.isBotContext());
+                            mentionListView.setDisallowInterceptTouchEvents(false);
+                        }
+                        if (mentionsAdapter.isBotContext() && orientation == LinearLayoutManager.HORIZONTAL && mentionsAdapter.getBotContextSwitch() != null) {
+                            botSwitchShadow.setVisibility(View.VISIBLE);
+                            botSwitchCell.setVisibility(View.VISIBLE);
+                            botSwitchCell.setText(mentionsAdapter.getBotContextSwitch().text);
+                        } else {
+                            botSwitchShadow.setVisibility(View.GONE);
+                            botSwitchCell.setVisibility(View.GONE);
+                        }
+                        if (!mentionsAdapter.isBotContext() || orientation == LinearLayoutManager.HORIZONTAL) {
+                            mentionListViewScrollOffsetY = 0;
+                            mentionListViewLastViewPosition = -1;
                         }
-                        layoutParams3.height = AndroidUtilities.dp(2 + height);
-                        layoutParams3.topMargin = -AndroidUtilities.dp(height);
-                        mentionListView.setLayoutParams(layoutParams3);
-
                         mentionLayoutManager.setOrientation(orientation);
 
                         if (mentionListAnimation != null) {
@@ -1797,8 +1868,8 @@ public void needChangePanelVisibility(boolean show) {
                             mentionListAnimation = null;
                         }
 
-                        if (mentionListView.getVisibility() == View.VISIBLE) {
-                            ViewProxy.setAlpha(mentionListView, 1.0f);
+                        if (mentionContainer.getVisibility() == View.VISIBLE) {
+                            ViewProxy.setAlpha(mentionContainer, 1.0f);
                             return;
                         } else {
                             mentionLayoutManager.scrollToPositionWithOffset(0, 10000);
@@ -1815,17 +1886,24 @@ public void needChangePanelVisibility(boolean show) {
                                     preferences.edit().putBoolean("secretbot", true).commit();
                                 }
                             }
-                            mentionListView.setVisibility(View.VISIBLE);
-                            mentionListView.setTag(null);
+                            mentionContainer.setVisibility(View.VISIBLE);
+                            mentionContainer.setTag(null);
                             mentionListAnimation = new AnimatorSetProxy();
                             mentionListAnimation.playTogether(
-                                    ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f, 1.0f)
+                                    ObjectAnimatorProxy.ofFloat(mentionContainer, "alpha", 0.0f, 1.0f)
                             );
                             mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
                                 @Override
                                 public void onAnimationEnd(Object animation) {
                                     if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                        mentionListView.clearAnimation();
+                                        mentionContainer.clearAnimation();
+                                        mentionListAnimation = null;
+                                    }
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Object animation) {
+                                    if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
                                         mentionListAnimation = null;
                                     }
                                 }
@@ -1833,9 +1911,9 @@ public void onAnimationEnd(Object animation) {
                             mentionListAnimation.setDuration(200);
                             mentionListAnimation.start();
                         } else {
-                            ViewProxy.setAlpha(mentionListView, 1.0f);
-                            mentionListView.clearAnimation();
-                            mentionListView.setVisibility(View.INVISIBLE);
+                            ViewProxy.setAlpha(mentionContainer, 1.0f);
+                            mentionContainer.clearAnimation();
+                            mentionContainer.setVisibility(View.INVISIBLE);
                         }
                     } else {
                         if (mentionListAnimation != null) {
@@ -1843,21 +1921,28 @@ public void onAnimationEnd(Object animation) {
                             mentionListAnimation = null;
                         }
 
-                        if (mentionListView.getVisibility() == View.GONE) {
+                        if (mentionContainer.getVisibility() == View.GONE) {
                             return;
                         }
                         if (allowStickersPanel) {
                             mentionListAnimation = new AnimatorSetProxy();
                             mentionListAnimation.playTogether(
-                                    ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f)
+                                    ObjectAnimatorProxy.ofFloat(mentionContainer, "alpha", 0.0f)
                             );
                             mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
                                 @Override
                                 public void onAnimationEnd(Object animation) {
                                     if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                        mentionListView.clearAnimation();
-                                        mentionListView.setVisibility(View.GONE);
-                                        mentionListView.setTag(null);
+                                        mentionContainer.clearAnimation();
+                                        mentionContainer.setVisibility(View.GONE);
+                                        mentionContainer.setTag(null);
+                                        mentionListAnimation = null;
+                                    }
+                                }
+
+                                @Override
+                                public void onAnimationCancel(Object animation) {
+                                    if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
                                         mentionListAnimation = null;
                                     }
                                 }
@@ -1865,9 +1950,9 @@ public void onAnimationEnd(Object animation) {
                             mentionListAnimation.setDuration(200);
                             mentionListAnimation.start();
                         } else {
-                            mentionListView.setTag(null);
-                            mentionListView.clearAnimation();
-                            mentionListView.setVisibility(View.GONE);
+                            mentionContainer.setTag(null);
+                            mentionContainer.clearAnimation();
+                            mentionContainer.setVisibility(View.GONE);
                         }
                     }
                 }
@@ -1887,22 +1972,23 @@ public void onContextClick(TLRPC.BotInlineResult result) {
                     }
                     if (result.type.equals("video") || result.type.equals("web_player_video")) {
                         BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-                        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), result.title != null ? result.title : "", result.content_url, result.content_url, result.w, result.h));
+                        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), result.title != null ? result.title : "", result.description, result.content_url, result.content_url, result.w, result.h));
                         builder.setUseFullWidth(true);
                         showDialog(builder.create());
                     } else {
-                        AndroidUtilities.openUrl(getParentActivity(), result.content_url);
+                        Browser.openUrl(getParentActivity(), result.content_url);
                     }
                 }
             }));
             if (!ChatObject.isChannel(currentChat) || currentChat != null && currentChat.megagroup) {
                 mentionsAdapter.setBotInfo(botInfo);
             }
+            mentionsAdapter.setParentFragment(this);
             mentionsAdapter.setChatInfo(info);
             mentionsAdapter.setNeedUsernames(currentChat != null);
             mentionsAdapter.setNeedBotContext(currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46);
             mentionsAdapter.setBotsCount(currentChat != null ? botsCount : 1);
-            mentionListView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
+            mentionListView.setOnItemClickListener(mentionsOnItemClickListener = new RecyclerListView.OnItemClickListener() {
                 @Override
                 public void onItemClick(View view, int position) {
                     Object object = mentionsAdapter.getItem(position);
@@ -1915,7 +2001,7 @@ public void onItemClick(View view, int position) {
                         }
                     } else if (object instanceof String) {
                         if (mentionsAdapter.isBotCommands()) {
-                            SendMessagesHelper.getInstance().sendMessage((String) object, dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                            SendMessagesHelper.getInstance().sendMessage((String) object, dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null, null);
                             chatActivityEnterView.setFieldText("");
                         } else {
                             chatActivityEnterView.replaceWithText(start, len, object + " ");
@@ -1935,6 +2021,8 @@ public void onItemClick(View view, int position) {
                         SendMessagesHelper.prepareSendingBotContextResult(result, params, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
                         chatActivityEnterView.setFieldText("");
                         showReplyPanel(false, null, null, null, false, true);
+                    } else if (object instanceof TLRPC.TL_inlineBotSwitchPM) {
+                        processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM) object);
                     }
                 }
             });
@@ -1974,6 +2062,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
             });
 
             mentionListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
+
+                @Override
+                public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+                    mentionListViewIsScrolling = newState == RecyclerView.SCROLL_STATE_DRAGGING;
+                }
+
                 @Override
                 public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                     int lastVisibleItem = mentionLayoutManager.findLastVisibleItemPosition();
@@ -1981,8 +2075,26 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                     if (visibleItemCount > 0 && lastVisibleItem > mentionsAdapter.getItemCount() - 5) {
                         mentionsAdapter.searchForContextBotForNextOffset();
                     }
+
+                    mentionListViewUpdateLayout();
+                }
+            });
+
+            botSwitchCell = new BotSwitchCell(context);
+            botSwitchCell.setVisibility(View.GONE);
+            botSwitchCell.setBackgroundResource(R.drawable.list_selector);
+            mentionContainer.addView(botSwitchCell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 36, Gravity.LEFT | Gravity.TOP, 0, 2, 0, 0));
+            botSwitchCell.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    processInlineBotContextPM(mentionsAdapter.getBotContextSwitch());
                 }
             });
+
+            botSwitchShadow = new View(context);
+            botSwitchShadow.setBackgroundResource(R.drawable.header_shadow);
+            botSwitchShadow.setVisibility(View.GONE);
+            mentionContainer.addView(botSwitchShadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.LEFT | Gravity.TOP, 0, 38, 0, 0));
         }
 
         pagedownButton = new ImageView(context);
@@ -1993,7 +2105,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
             @Override
             public void onClick(View view) {
                 if (returnToMessageId > 0) {
-                    scrollToMessageId(returnToMessageId, 0, true, 0);
+                    scrollToMessageId(returnToMessageId, 0, true, returnToLoadIndex);
                 } else {
                     scrollToLastMessage(true);
                 }
@@ -2099,9 +2211,9 @@ public void onWindowSizeChanged(int size) {
                         stickersPanel.clearAnimation();
                         stickersPanel.setVisibility(View.INVISIBLE);
                     }
-                    if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.INVISIBLE);
+                    if (mentionContainer != null && mentionContainer.getVisibility() == View.VISIBLE) {
+                        mentionContainer.clearAnimation();
+                        mentionContainer.setVisibility(View.INVISIBLE);
                     }
                 } else {
                     allowStickersPanel = true;
@@ -2109,15 +2221,15 @@ public void onWindowSizeChanged(int size) {
                         stickersPanel.clearAnimation();
                         stickersPanel.setVisibility(View.VISIBLE);
                     }
-                    if (mentionListView != null && mentionListView.getVisibility() == View.INVISIBLE && (!mentionsAdapter.isBotContext() || (allowContextBotPanel || allowContextBotPanelSecond))) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.VISIBLE);
-                        mentionListView.setTag(null);
+                    if (mentionContainer != null && mentionContainer.getVisibility() == View.INVISIBLE && (!mentionsAdapter.isBotContext() || (allowContextBotPanel || allowContextBotPanelSecond))) {
+                        mentionContainer.clearAnimation();
+                        mentionContainer.setVisibility(View.VISIBLE);
+                        mentionContainer.setTag(null);
                     }
                 }
+
                 allowContextBotPanel = !chatActivityEnterView.isPopupShowing();
                 checkContextBotPanel();
-                updateMessagesVisisblePart();
             }
 
             @Override
@@ -2158,7 +2270,7 @@ public void onClick(View v) {
 
         replyNameTextView = new TextView(context);
         replyNameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        replyNameTextView.setTextColor(0xff377aae);
+        replyNameTextView.setTextColor(Theme.REPLY_PANEL_NAME_TEXT_COLOR);
         replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         replyNameTextView.setSingleLine(true);
         replyNameTextView.setEllipsize(TextUtils.TruncateAt.END);
@@ -2167,7 +2279,7 @@ public void onClick(View v) {
 
         replyObjectTextView = new TextView(context);
         replyObjectTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        replyObjectTextView.setTextColor(0xff999999);
+        replyObjectTextView.setTextColor(Theme.REPLY_PANEL_MESSAGE_TEXT_COLOR);
         replyObjectTextView.setSingleLine(true);
         replyObjectTextView.setEllipsize(TextUtils.TruncateAt.END);
         replyObjectTextView.setMaxLines(1);
@@ -2209,22 +2321,24 @@ public boolean onTouch(View v, MotionEvent event) {
         stickersPanel.addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 53, 0, 0, 0));
 
         bottomOverlay = new FrameLayout(context);
-        bottomOverlay.setBackgroundColor(0xffffffff);
         bottomOverlay.setVisibility(View.INVISIBLE);
         bottomOverlay.setFocusable(true);
         bottomOverlay.setFocusableInTouchMode(true);
         bottomOverlay.setClickable(true);
-        contentView.addView(bottomOverlay, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM));
+        bottomOverlay.setBackgroundResource(R.drawable.compose_panel);
+        bottomOverlay.setPadding(0, AndroidUtilities.dp(3), 0, 0);
+        contentView.addView(bottomOverlay, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.BOTTOM));
 
         bottomOverlayText = new TextView(context);
         bottomOverlayText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        bottomOverlayText.setTextColor(0xff7f7f7f);
+        bottomOverlayText.setTextColor(Theme.CHAT_BOTTOM_OVERLAY_TEXT_COLOR);
         bottomOverlay.addView(bottomOverlayText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
         bottomOverlayChat = new FrameLayout(context);
-        bottomOverlayChat.setBackgroundColor(0xfffbfcfd);
+        bottomOverlayChat.setBackgroundResource(R.drawable.compose_panel);
+        bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3), 0, 0);
         bottomOverlayChat.setVisibility(View.INVISIBLE);
-        contentView.addView(bottomOverlayChat, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM));
+        contentView.addView(bottomOverlayChat, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 51, Gravity.BOTTOM));
         bottomOverlayChat.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -2240,7 +2354,7 @@ public void onClick(View view) {
                         if (botUserLast != null && botUserLast.length() != 0) {
                             MessagesController.getInstance().sendBotStart(currentUser, botUserLast);
                         } else {
-                            SendMessagesHelper.getInstance().sendMessage("/start", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                            SendMessagesHelper.getInstance().sendMessage("/start", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null, null);
                         }
                     } else {
                         builder = new AlertDialog.Builder(getParentActivity());
@@ -2256,12 +2370,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     if (botUser.length() != 0) {
                         MessagesController.getInstance().sendBotStart(currentUser, botUser);
                     } else {
-                        SendMessagesHelper.getInstance().sendMessage("/start", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                        SendMessagesHelper.getInstance().sendMessage("/start", dialog_id, null, null, false, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null, null);
                     }
                     botUser = null;
                     updateBottomOverlay();
                 } else {
-                    if (ChatObject.isChannel(currentChat) && !currentChat.megagroup && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
+                    if (ChatObject.isChannel(currentChat) && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
                         if (ChatObject.isNotInChat(currentChat)) {
                             MessagesController.getInstance().addUserToChat(currentChat.id, UserConfig.getCurrentUser(), null, 0, null, null);
                         } else {
@@ -2288,8 +2402,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
         });
 
         bottomOverlayChatText = new TextView(context);
-        bottomOverlayChatText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        bottomOverlayChatText.setTextColor(0xff3e6fa1);
+        bottomOverlayChatText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        bottomOverlayChatText.setTextColor(Theme.CHAT_BOTTOM_CHAT_OVERLAY_TEXT_COLOR);
         bottomOverlayChat.addView(bottomOverlayChatText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
         chatAdapter.updateRows();
@@ -2311,13 +2426,162 @@ public void onClick(DialogInterface dialogInterface, int i) {
         updateBottomOverlay();
         updateSecretStatus();
         updateSpamView();
+        updatePinnedMessageView(true);
+
+        try {
+            if (currentEncryptedChat != null && Build.VERSION.SDK_INT >= 23) {
+                getParentActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
+            }
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+        fixLayoutInternal();
 
         return fragmentView;
     }
 
-    public long getDialogId() {
-        return dialog_id;
-    }
+    private void mentionListViewUpdateLayout() {
+        if (mentionListView.getChildCount() <= 0 || !mentionsAdapter.isBotContext() || mentionsAdapter.getOrientation() != LinearLayoutManager.VERTICAL) {
+            mentionListViewScrollOffsetY = 0;
+            mentionListViewLastViewPosition = -1;
+            return;
+        }
+        View child = mentionListView.getChildAt(mentionListView.getChildCount() - 1);
+        MentionsAdapter.Holder holder = (MentionsAdapter.Holder) mentionListView.findContainingViewHolder(child);
+        if (holder != null) {
+            mentionListViewLastViewPosition = holder.getAdapterPosition();
+            mentionListViewLastViewTop = child.getTop();
+        } else {
+            mentionListViewLastViewPosition = -1;
+        }
+
+        child = mentionListView.getChildAt(0);
+        holder = (MentionsAdapter.Holder) mentionListView.findContainingViewHolder(child);
+        int newOffset = child.getTop() > 0 && holder != null && holder.getAdapterPosition() == 0 ? child.getTop() : 0;
+        if (mentionListViewScrollOffsetY != newOffset) {
+            mentionListView.setTopGlowOffset(mentionListViewScrollOffsetY = newOffset);
+            mentionListView.invalidate();
+            mentionContainer.invalidate();
+        }
+    }
+
+    public void processInlineBotContextPM(TLRPC.TL_inlineBotSwitchPM object) {
+        if (object == null) {
+            return;
+        }
+        TLRPC.User user = mentionsAdapter.getContextBotUser();
+        if (user == null) {
+            return;
+        }
+        chatActivityEnterView.setFieldText("");
+        if (dialog_id == user.id) {
+            inlineReturn = dialog_id;
+            MessagesController.getInstance().sendBotStart(currentUser, object.start_param);
+        } else {
+            Bundle args = new Bundle();
+            args.putInt("user_id", user.id);
+            args.putString("inline_query", object.start_param);
+            args.putLong("inline_return", dialog_id);
+            if (!MessagesController.checkCanOpenChat(args, ChatActivity.this)) {
+                return;
+            }
+            presentFragment(new ChatActivity(args));
+        }
+    }
+
+    private void createChatAttachView() {
+        if (chatAttachView == null) {
+            BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+            chatAttachView = new ChatAttachView(getParentActivity());
+            chatAttachView.setDelegate(new ChatAttachView.ChatAttachViewDelegate() {
+                @Override
+                public void didPressedButton(int button) {
+                    if (button == 7) {
+                        chatAttachViewSheet.dismiss();
+                        HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = chatAttachView.getSelectedPhotos();
+                        if (!selectedPhotos.isEmpty()) {
+                            ArrayList<String> photos = new ArrayList<>();
+                            ArrayList<String> captions = new ArrayList<>();
+                            for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
+                                MediaController.PhotoEntry photoEntry = entry.getValue();
+                                if (photoEntry.imagePath != null) {
+                                    photos.add(photoEntry.imagePath);
+                                    captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
+                                } else if (photoEntry.path != null) {
+                                    photos.add(photoEntry.path);
+                                    captions.add(photoEntry.caption != null ? photoEntry.caption.toString() : null);
+                                }
+                                photoEntry.imagePath = null;
+                                photoEntry.thumbPath = null;
+                                photoEntry.caption = null;
+                            }
+                            SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
+                            showReplyPanel(false, null, null, null, false, true);
+                        }
+                        return;
+                    } else {
+                        if (chatAttachViewSheet != null) {
+                            chatAttachViewSheet.dismissWithButtonClick(button);
+                        }
+                    }
+                    processSelectedAttach(button);
+                }
+            });
+            builder.setDelegate(new BottomSheet.BottomSheetDelegate() {
+
+                @Override
+                public void onRevealAnimationStart(boolean open) {
+                    if (chatAttachView != null) {
+                        chatAttachView.onRevealAnimationStart(open);
+                    }
+                }
+
+                @Override
+                public void onRevealAnimationProgress(boolean open, float radius, int x, int y) {
+                    if (chatAttachView != null) {
+                        chatAttachView.onRevealAnimationProgress(open, radius, x, y);
+                    }
+                }
+
+                @Override
+                public void onRevealAnimationEnd(boolean open) {
+                    if (chatAttachView != null) {
+                        chatAttachView.onRevealAnimationEnd(open);
+                    }
+                }
+
+                @Override
+                public void onOpenAnimationEnd() {
+                    if (chatAttachView != null) {
+                        chatAttachView.onRevealAnimationEnd(true);
+                    }
+                }
+
+                @Override
+                public View getRevealView() {
+                    return menuItem;
+                }
+            });
+            builder.setApplyTopPadding(false);
+            builder.setApplyBottomPadding(false);
+            builder.setUseRevealAnimation();
+            builder.setCustomView(chatAttachView);
+            chatAttachViewSheet = builder.create();
+        }
+    }
+
+    public long getDialogId() {
+        return dialog_id;
+    }
+
+    public void setBotUser(String value) {
+        if (inlineReturn != 0) {
+            MessagesController.getInstance().sendBotStart(currentUser, value);
+        } else {
+            botUser = value;
+            updateBottomOverlay();
+        }
+    }
 
     public boolean playFirstUnreadVoiceMessage() {
         for (int a = messages.size() - 1; a >= 0; a--) {
@@ -2381,6 +2645,13 @@ public void onAnimationEnd(Object animation) {
                                 runningAnimation = null;
                             }
                         }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (runningAnimation != null && runningAnimation.equals(animation)) {
+                                runningAnimation = null;
+                            }
+                        }
                     });
                     runningAnimation.start();
                 } else if (!show) {
@@ -2401,6 +2672,30 @@ public void onItemClick(View view, int position) {
         });
     }
 
+    public void shareMyContact(final MessageObject messageObject) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
+        if (currentUser != null) {
+            if (currentUser.bot) {
+                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
+            } else {
+                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, PhoneFormat.getInstance().format("+" + UserConfig.getCurrentUser().phone), ContactsController.formatName(currentUser.first_name, currentUser.last_name))));
+            }
+        } else {
+            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
+        }
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id, messageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
+                moveScrollToLastMessage();
+                showReplyPanel(false, null, null, null, false, true);
+            }
+        });
+        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+        showDialog(builder.create());
+    }
+
     private void showGifHint() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         if (preferences.getBoolean("gifhint", false)) {
@@ -2429,7 +2724,7 @@ private void showGifHint() {
 
         gifHintTextView = new TextView(getParentActivity());
         gifHintTextView.setBackgroundResource(R.drawable.tooltip);
-        gifHintTextView.setTextColor(0xffffffff);
+        gifHintTextView.setTextColor(Theme.CHAT_GIF_HINT_TEXT_COLOR);
         gifHintTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         gifHintTextView.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
         gifHintTextView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
@@ -2476,23 +2771,29 @@ public void onAnimationEnd(Object animation) {
     private void checkContextBotPanel() {
         if (allowStickersPanel && mentionsAdapter != null && mentionsAdapter.isBotContext()) {
             if (!allowContextBotPanel && !allowContextBotPanelSecond) {
-                if (mentionListView.getVisibility() == View.VISIBLE && mentionListView.getTag() == null) {
+                if (mentionContainer.getVisibility() == View.VISIBLE && mentionContainer.getTag() == null) {
                     if (mentionListAnimation != null) {
                         mentionListAnimation.cancel();
-                        mentionListAnimation = null;
                     }
 
-                    mentionListView.setTag(1);
+                    mentionContainer.setTag(1);
                     mentionListAnimation = new AnimatorSetProxy();
                     mentionListAnimation.playTogether(
-                            ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f)
+                            ObjectAnimatorProxy.ofFloat(mentionContainer, "alpha", 0.0f)
                     );
                     mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
                         @Override
                         public void onAnimationEnd(Object animation) {
                             if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                mentionListView.clearAnimation();
-                                mentionListView.setVisibility(View.INVISIBLE);
+                                mentionContainer.clearAnimation();
+                                mentionContainer.setVisibility(View.INVISIBLE);
+                                mentionListAnimation = null;
+                            }
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
                                 mentionListAnimation = null;
                             }
                         }
@@ -2501,22 +2802,28 @@ public void onAnimationEnd(Object animation) {
                     mentionListAnimation.start();
                 }
             } else {
-                if (mentionListView.getVisibility() == View.INVISIBLE || mentionListView.getTag() != null) {
+                if (mentionContainer.getVisibility() == View.INVISIBLE || mentionContainer.getTag() != null) {
                     if (mentionListAnimation != null) {
                         mentionListAnimation.cancel();
-                        mentionListAnimation = null;
                     }
-                    mentionListView.setTag(null);
-                    mentionListView.setVisibility(View.VISIBLE);
+                    mentionContainer.setTag(null);
+                    mentionContainer.setVisibility(View.VISIBLE);
                     mentionListAnimation = new AnimatorSetProxy();
                     mentionListAnimation.playTogether(
-                            ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f, 1.0f)
+                            ObjectAnimatorProxy.ofFloat(mentionContainer, "alpha", 0.0f, 1.0f)
                     );
                     mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
                         @Override
                         public void onAnimationEnd(Object animation) {
                             if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
-                                mentionListView.clearAnimation();
+                                mentionContainer.clearAnimation();
+                                mentionListAnimation = null;
+                            }
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
                                 mentionListAnimation = null;
                             }
                         }
@@ -2528,7 +2835,7 @@ public void onAnimationEnd(Object animation) {
         }
     }
 
-    private void checkScrollForLoad() {
+    private void checkScrollForLoad(boolean scroll) {
         if (chatLayoutManager == null || paused) {
             return;
         }
@@ -2536,7 +2843,17 @@ private void checkScrollForLoad() {
         int visibleItemCount = firstVisibleItem == RecyclerView.NO_POSITION ? 0 : Math.abs(chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
         if (visibleItemCount > 0) {
             int totalItemCount = chatAdapter.getItemCount();
-            if (firstVisibleItem <= 25 && !loading) {
+            int checkLoadCount;
+            if (scroll) {
+                if (lastLoadIndex < 3) {
+                    checkLoadCount = 5;
+                } else {
+                    checkLoadCount = 25;
+                }
+            } else  {
+                checkLoadCount = 5;
+            }
+            if (firstVisibleItem <= checkLoadCount && !loading) {
                 if (!endReached[0]) {
                     loading = true;
                     waitingForLoad.add(lastLoadIndex);
@@ -2667,14 +2984,14 @@ public boolean didSelectVideo(String path) {
                 FileLog.e("tmessages", e);
             }
         } else if (which == attach_location) {
-            if (!isGoogleMapsInstalled()) {
+            if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                 return;
             }
             LocationActivity fragment = new LocationActivity();
             fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
                 @Override
                 public void didSelectLocation(TLRPC.MessageMedia location) {
-                    SendMessagesHelper.getInstance().sendMessage(location, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
+                    SendMessagesHelper.getInstance().sendMessage(location, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
                     moveScrollToLastMessage();
                     showReplyPanel(false, null, null, null, false, true);
                     if (paused) {
@@ -2965,7 +3282,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                     if (mess.length() > 150) {
                         mess = mess.substring(0, 150);
                     }
-                    mess = mess.replace("\n", " ");
+                    mess = mess.replace('\n', ' ');
                     replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
                 }
             } else if (messageObjects != null) {
@@ -3051,7 +3368,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                         if (mess.length() > 150) {
                             mess = mess.substring(0, 150);
                         }
-                        mess = mess.replace("\n", " ");
+                        mess = mess.replace('\n', ' ');
                         replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
                     } else {
                         replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessage", messageObjects.size()));
@@ -3083,7 +3400,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                                 replyObjectTextView.setText(LocaleController.getString("AttachGif", R.string.AttachGif));
                             } else {
                                 String name;
-                                if ((name = FileLoader.getDocumentFileName(messageObjects.get(0).messageOwner.media.document)).length() != 0) {
+                                if ((name = FileLoader.getDocumentFileName(messageObjects.get(0).getDocument())).length() != 0) {
                                     replyObjectTextView.setText(name);
                                 }
                                 messageObject = messageObjects.get(0);
@@ -3121,7 +3438,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
             FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) replyNameTextView.getLayoutParams();
             FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) replyObjectTextView.getLayoutParams();
             TLRPC.PhotoSize photoSize = messageObject != null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80) : null;
-            if (photoSize == null || messageObject.type == 13 || messageObject != null && messageObject.isSecretMedia()) {
+            if (photoSize == null || photoSize instanceof TLRPC.TL_photoSizeEmpty || photoSize.location instanceof TLRPC.TL_fileLocationUnavailable || messageObject.type == 13 || messageObject != null && messageObject.isSecretMedia()) {
                 replyImageView.setImageBitmap(null);
                 replyImageLocation = null;
                 replyImageView.setVisibility(View.INVISIBLE);
@@ -3206,6 +3523,7 @@ private void clearChatData() {
         firstLoading = true;
         loading = true;
         waitingForImportantLoad = false;
+        waitingForReplyMessageLoad = false;
         startLoadFromMessageId = 0;
         last_message_id = 0;
         needSelectFromMessageId = false;
@@ -3328,21 +3646,24 @@ private void scrollToMessageId(int id, int fromMessageId, boolean select, int lo
             if (currentEncryptedChat != null && !MessagesStorage.getInstance().checkMessageId(dialog_id, startLoadFromMessageId)) {
                 return;
             }
-            clearChatData();
+            /*clearChatData();
             loadsCount = 0;
             unread_to_load = 0;
             first_unread_id = 0;
             loadingForward = false;
             unreadMessageObject = null;
-            scrollToMessage = null;
+            scrollToMessage = null;*/
+
+            waitingForReplyMessageLoad = true;
             highlightMessageId = Integer.MAX_VALUE;
             scrollToMessagePosition = -10000;
             startLoadFromMessageId = id;
             waitingForLoad.add(lastLoadIndex);
             MessagesController.getInstance().loadMessages(loadIndex == 0 ? dialog_id : mergeDialogId, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, classGuid, 3, 0, loadIndex == 0 ? channelMessagesImportant : 0, lastLoadIndex++);
-            emptyViewContainer.setVisibility(View.INVISIBLE);
+            //emptyViewContainer.setVisibility(View.INVISIBLE);
         }
         returnToMessageId = fromMessageId;
+        returnToLoadIndex = loadIndex;
         needSelectFromMessageId = select;
     }
 
@@ -3428,55 +3749,46 @@ private void updateSecretStatus() {
         checkActionBarMenu();
     }
 
+    @Override
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
+        }
+        if (mentionsAdapter != null) {
+            mentionsAdapter.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
+        }
+    }
+
     private void checkActionBarMenu() {
         if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) ||
                 currentChat != null && ChatObject.isNotInChat(currentChat) ||
                 currentUser != null && UserObject.isDeleted(currentUser)) {
-
             if (menuItem != null) {
                 menuItem.setVisibility(View.GONE);
             }
-            if (timeItem != null) {
-                timeItem.setVisibility(View.GONE);
-            }
             if (timeItem2 != null) {
                 timeItem2.setVisibility(View.GONE);
             }
+            if (avatarContainer != null) {
+                avatarContainer.hideTimeItem();
+            }
         } else {
             if (menuItem != null) {
                 menuItem.setVisibility(View.VISIBLE);
             }
-            if (timeItem != null) {
-                timeItem.setVisibility(View.VISIBLE);
-            }
             if (timeItem2 != null) {
                 timeItem2.setVisibility(View.VISIBLE);
             }
+            if (avatarContainer != null) {
+                avatarContainer.showTimeItem();
+            }
         }
-
-        if (timerDrawable != null && currentEncryptedChat != null) {
-            timerDrawable.setTime(currentEncryptedChat.ttl);
+        if (avatarContainer != null && currentEncryptedChat != null) {
+            avatarContainer.setTime(currentEncryptedChat.ttl);
         }
-
         checkAndUpdateAvatar();
     }
 
-    private int updateOnlineCount() {
-        onlineCount = 0;
-        if (!(info instanceof TLRPC.TL_chatFull)) {
-            return 0;
-        }
-        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-        for (int a = 0; a < info.participants.participants.size(); a++) {
-            TLRPC.ChatParticipant participant = info.participants.participants.get(a);
-            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
-                onlineCount++;
-            }
-        }
-        return onlineCount;
-    }
-
     private int getMessageType(MessageObject messageObject) {
         if (messageObject == null) {
             return -1;
@@ -3502,52 +3814,52 @@ private int getMessageType(MessageObject messageObject) {
                     }
                     return 1;
                 } else {
-                    if (!messageObject.isMediaEmpty()) {
-                        if (messageObject.isVoice()) {
-                            return 2;
-                        } else if (messageObject.isSticker()) {
-                            TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
-                            if (inputStickerSet instanceof TLRPC.TL_inputStickerSetID) {
-                                if (!StickersQuery.isStickerPackInstalled(inputStickerSet.id)) {
-                                    return 7;
-                                }
-                            } else if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
-                                if (!StickersQuery.isStickerPackInstalled(inputStickerSet.short_name)) {
-                                    return 7;
-                                }
+                    if (messageObject.isVoice()) {
+                        return 2;
+                    } else if (messageObject.isSticker()) {
+                        TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
+                        if (inputStickerSet instanceof TLRPC.TL_inputStickerSetID) {
+                            if (!StickersQuery.isStickerPackInstalled(inputStickerSet.id)) {
+                                return 7;
                             }
-                        } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                            boolean canSave = false;
-                            if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
-                                File f = new File(messageObject.messageOwner.attachPath);
-                                if (f.exists()) {
-                                    canSave = true;
-                                }
+                        } else if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
+                            if (!StickersQuery.isStickerPackInstalled(inputStickerSet.short_name)) {
+                                return 7;
                             }
-                            if (!canSave) {
-                                File f = FileLoader.getPathToMessage(messageObject.messageOwner);
-                                if (f.exists()) {
-                                    canSave = true;
-                                }
+                        }
+                    } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo()) {
+                        boolean canSave = false;
+                        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                            File f = new File(messageObject.messageOwner.attachPath);
+                            if (f.exists()) {
+                                canSave = true;
                             }
-                            if (canSave) {
-                                if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                    String mime = messageObject.messageOwner.media.document.mime_type;
-                                    if (mime != null) {
-                                        if (mime.endsWith("/xml")) {
-                                            return 5;
-                                        } else if (mime.endsWith("/png") || mime.endsWith("/jpg") || mime.endsWith("/jpeg")) {
-                                            return 6;
-                                        }
+                        }
+                        if (!canSave) {
+                            File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                            if (f.exists()) {
+                                canSave = true;
+                            }
+                        }
+                        if (canSave) {
+                            if (messageObject.getDocument() != null) {
+                                String mime = messageObject.getDocument().mime_type;
+                                if (mime != null) {
+                                    if (mime.endsWith("/xml")) {
+                                        return 5;
+                                    } else if (mime.endsWith("/png") || mime.endsWith("/jpg") || mime.endsWith("/jpeg")) {
+                                        return 6;
                                     }
                                 }
-                                return 4;
                             }
+                            return 4;
                         }
-                        return 2;
-                    } else {
+                    } else if (messageObject.type == 12) {
+                        return 8;
+                    } else if (messageObject.isMediaEmpty()) {
                         return 3;
                     }
+                    return 2;
                 }
             }
         } else {
@@ -3569,46 +3881,46 @@ private int getMessageType(MessageObject messageObject) {
                     return 1;
                 }
             } else {
-                if (!messageObject.isMediaEmpty()) {
-                    if (messageObject.isVoice()) {
-                        return 2;
-                    } else if (messageObject.isSticker()) {
-                        TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
-                        if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
-                            if (!StickersQuery.isStickerPackInstalled(inputStickerSet.short_name)) {
-                                return 7;
-                            }
+                if (messageObject.isVoice()) {
+                    return 2;
+                } else if (messageObject.isSticker()) {
+                    TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
+                    if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) {
+                        if (!StickersQuery.isStickerPackInstalled(inputStickerSet.short_name)) {
+                            return 7;
                         }
-                    } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                        boolean canSave = false;
-                        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
-                            File f = new File(messageObject.messageOwner.attachPath);
-                            if (f.exists()) {
-                                canSave = true;
-                            }
+                    }
+                } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo()) {
+                    boolean canSave = false;
+                    if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                        File f = new File(messageObject.messageOwner.attachPath);
+                        if (f.exists()) {
+                            canSave = true;
                         }
-                        if (!canSave) {
-                            File f = FileLoader.getPathToMessage(messageObject.messageOwner);
-                            if (f.exists()) {
-                                canSave = true;
-                            }
+                    }
+                    if (!canSave) {
+                        File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                        if (f.exists()) {
+                            canSave = true;
                         }
-                        if (canSave) {
-                            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                String mime = messageObject.messageOwner.media.document.mime_type;
-                                if (mime != null && mime.endsWith("text/xml")) {
-                                    return 5;
-                                }
-                            }
-                            if (messageObject.messageOwner.ttl <= 0) {
-                                return 4;
+                    }
+                    if (canSave) {
+                        if (messageObject.getDocument() != null) {
+                            String mime = messageObject.getDocument().mime_type;
+                            if (mime != null && mime.endsWith("text/xml")) {
+                                return 5;
                             }
                         }
+                        if (messageObject.messageOwner.ttl <= 0) {
+                            return 4;
+                        }
                     }
-                    return 2;
-                } else {
+                } else if (messageObject.type == 12) {
+                    return 8;
+                } else if (messageObject.isMediaEmpty()) {
                     return 3;
                 }
+                return 2;
             }
         }
     }
@@ -3617,7 +3929,7 @@ private void addToSelectedMessages(MessageObject messageObject) {
         int index = messageObject.getDialogId() == dialog_id ? 0 : 1;
         if (selectedMessagesIds[index].containsKey(messageObject.getId())) {
             selectedMessagesIds[index].remove(messageObject.getId());
-            if (messageObject.type == 0) {
+            if (messageObject.type == 0 || messageObject.caption != null) {
                 selectedMessagesCanCopyIds[index].remove(messageObject.getId());
             }
             if (!messageObject.canDeleteMessage(currentChat)) {
@@ -3625,7 +3937,7 @@ private void addToSelectedMessages(MessageObject messageObject) {
             }
         } else {
             selectedMessagesIds[index].put(messageObject.getId(), messageObject);
-            if (messageObject.type == 0) {
+            if (messageObject.type == 0 || messageObject.caption != null) {
                 selectedMessagesCanCopyIds[index].put(messageObject.getId(), messageObject);
             }
             if (!messageObject.canDeleteMessage(currentChat)) {
@@ -3635,6 +3947,7 @@ private void addToSelectedMessages(MessageObject messageObject) {
         if (actionBar.isActionModeShowed()) {
             if (selectedMessagesIds[0].isEmpty() && selectedMessagesIds[1].isEmpty()) {
                 actionBar.hideActionMode();
+                updatePinnedMessageView(true);
             } else {
                 int copyVisible = actionBar.createActionMode().getItem(copy).getVisibility();
                 actionBar.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
@@ -3650,7 +3963,6 @@ private void addToSelectedMessages(MessageObject messageObject) {
                     if (replyItem.getVisibility() != newVisibility) {
                         if (replyButtonAnimation != null) {
                             replyButtonAnimation.cancel();
-                            replyButtonAnimation = null;
                         }
                         if (copyVisible != newCopyVisible) {
                             if (newVisibility == View.VISIBLE) {
@@ -3681,13 +3993,20 @@ private void addToSelectedMessages(MessageObject messageObject) {
                             replyButtonAnimation.addListener(new AnimatorListenerAdapterProxy() {
                                 @Override
                                 public void onAnimationEnd(Object animation) {
-                                    if (replyButtonAnimation.equals(animation)) {
+                                    if (replyButtonAnimation != null && replyButtonAnimation.equals(animation)) {
                                         replyItem.clearAnimation();
                                         if (newVisibility == View.GONE) {
                                             replyItem.setVisibility(View.GONE);
                                         }
                                     }
                                 }
+
+                                @Override
+                                public void onAnimationCancel(Object animation) {
+                                    if (replyButtonAnimation != null && replyButtonAnimation.equals(animation)) {
+                                        replyButtonAnimation = null;
+                                    }
+                                }
                             });
                             replyButtonAnimation.start();
                         }
@@ -3725,20 +4044,20 @@ private void updateActionModeTitle() {
     }
 
     private void updateTitle() {
-        if (nameTextView == null) {
+        if (avatarContainer == null) {
             return;
         }
         if (currentChat != null) {
-            nameTextView.setText(currentChat.title);
+            avatarContainer.setTitle(currentChat.title);
         } else if (currentUser != null) {
             if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                    nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
+                    avatarContainer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
-                    nameTextView.setText(UserObject.getUserName(currentUser));
+                    avatarContainer.setTitle(UserObject.getUserName(currentUser));
                 }
             } else {
-                nameTextView.setText(UserObject.getUserName(currentUser));
+                avatarContainer.setTitle(UserObject.getUserName(currentUser));
             }
         }
     }
@@ -3778,13 +4097,11 @@ private void updateBotButtons() {
     }
 
     private void updateTitleIcons() {
-        if (nameTextView == null) {
+        if (avatarContainer == null) {
             return;
         }
-        int leftIcon = currentEncryptedChat != null ? R.drawable.ic_lock_header : 0;
         int rightIcon = MessagesController.getInstance().isDialogMuted(dialog_id) ? R.drawable.mute_fixed : 0;
-        nameTextView.setCompoundDrawablesWithIntrinsicBounds(leftIcon, 0, rightIcon, 0);
-
+        avatarContainer.setTitleIcons(currentEncryptedChat != null ? R.drawable.ic_lock_header : 0, rightIcon);
         if (rightIcon != 0) {
             muteItem.setText(LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications));
         } else {
@@ -3792,181 +4109,22 @@ private void updateTitleIcons() {
         }
     }
 
-    private void updateSubtitle() {
-        if (onlineTextView == null) {
-            return;
-        }
-        CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
-        if (printString != null) {
-            printString = TextUtils.replace(printString, new String[]{"..."}, new String[]{""});
-        }
-        if (printString == null || printString.length() == 0 || ChatObject.isChannel(currentChat) && !currentChat.megagroup) {
-            setTypingAnimation(false);
-            if (currentChat != null) {
-                if (ChatObject.isChannel(currentChat)) {
-                    if (!currentChat.broadcast && !currentChat.megagroup && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
-                        onlineTextView.setText(LocaleController.getString("ShowDiscussion", R.string.ShowDiscussion));
-                        if (radioButton != null && radioButton.getVisibility() != View.VISIBLE) {
-                            radioButton.setVisibility(View.VISIBLE);
-                            onlineTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 74, 0, 0, 4));
-                        }
-                    } else {
-                        if (info != null && info.participants_count != 0) {
-                            int result[] = new int[1];
-                            String shortNumber = LocaleController.formatShortNumber(info.participants_count, result);
-                            String text = LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber);
-                            onlineTextView.setText(text);
-                        } else {
-                            if (currentChat.megagroup) {
-                                onlineTextView.setText(LocaleController.getString("Loading", R.string.Loading).toLowerCase());
-                            } else {
-                                if ((currentChat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0) {
-                                    onlineTextView.setText(LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase());
-                                } else {
-                                    onlineTextView.setText(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase());
-                                }
-                            }
-                        }
-                        if (radioButton != null && radioButton.getVisibility() != View.GONE) {
-                            radioButton.setVisibility(View.GONE);
-                            onlineTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 4));
-                        }
-                    }
-                } else {
-                    if (ChatObject.isKickedFromChat(currentChat)) {
-                        onlineTextView.setText(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
-                    } else if (ChatObject.isLeftFromChat(currentChat)) {
-                        onlineTextView.setText(LocaleController.getString("YouLeft", R.string.YouLeft));
-                    } else {
-                        int count = currentChat.participants_count;
-                        if (info != null) {
-                            count = info.participants.participants.size();
-                        }
-                        if (onlineCount > 1 && count != 0) {
-                            onlineTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
-                        } else {
-                            onlineTextView.setText(LocaleController.formatPluralString("Members", count));
-                        }
-                    }
-                }
-            } else if (currentUser != null) {
-                TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
-                if (user != null) {
-                    currentUser = user;
-                }
-                String newStatus;
-                if (currentUser.id == 333000 || currentUser.id == 777000) {
-                    newStatus = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
-                } else if (currentUser.bot) {
-                    newStatus = LocaleController.getString("Bot", R.string.Bot);
-                } else {
-                    newStatus = LocaleController.formatUserStatus(currentUser);
-                }
-                if (lastStatus == null || lastPrintString != null || !lastStatus.equals(newStatus)) {
-                    lastStatus = newStatus;
-                    onlineTextView.setText(newStatus);
-                }
-            }
-            lastPrintString = null;
-        } else {
-            lastPrintString = printString;
-            onlineTextView.setText(printString);
-            setTypingAnimation(true);
-        }
-    }
-
-    private void setTypingAnimation(boolean start) {
-        if (actionBar == null) {
-            return;
-        }
-        if (start) {
-            try {
-                Integer type = MessagesController.getInstance().printingStringsTypes.get(dialog_id);
-                if (type == 0) {
-                    if (lastStatusDrawable == 1) {
-                        return;
-                    }
-                    lastStatusDrawable = 1;
-                    if (onlineTextView != null) {
-                        onlineTextView.setCompoundDrawablesWithIntrinsicBounds(typingDotsDrawable, null, null, null);
-                        onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-
-                        typingDotsDrawable.start();
-                        recordStatusDrawable.stop();
-                        sendingFileDrawable.stop();
-                    }
-                } else if (type == 1) {
-                    if (lastStatusDrawable == 2) {
-                        return;
-                    }
-                    lastStatusDrawable = 2;
-                    if (onlineTextView != null) {
-                        onlineTextView.setCompoundDrawablesWithIntrinsicBounds(recordStatusDrawable, null, null, null);
-                        onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-
-                        recordStatusDrawable.start();
-                        typingDotsDrawable.stop();
-                        sendingFileDrawable.stop();
-                    }
-                } else if (type == 2) {
-                    if (lastStatusDrawable == 3) {
-                        return;
-                    }
-                    lastStatusDrawable = 3;
-                    if (onlineTextView != null) {
-                        onlineTextView.setCompoundDrawablesWithIntrinsicBounds(sendingFileDrawable, null, null, null);
-                        onlineTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
-
-                        sendingFileDrawable.start();
-                        typingDotsDrawable.stop();
-                        recordStatusDrawable.stop();
-                    }
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        } else {
-            if (lastStatusDrawable == 0) {
-                return;
-            }
-            lastStatusDrawable = 0;
-            if (onlineTextView != null) {
-                onlineTextView.setCompoundDrawablesWithIntrinsicBounds(null, null, null, null);
-                onlineTextView.setCompoundDrawablePadding(0);
-
-                typingDotsDrawable.stop();
-                recordStatusDrawable.stop();
-                sendingFileDrawable.stop();
-            }
-        }
-    }
-
     private void checkAndUpdateAvatar() {
-        TLRPC.FileLocation newPhoto = null;
-        AvatarDrawable avatarDrawable = null;
         if (currentUser != null) {
             TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
             if (user == null) {
                 return;
             }
             currentUser = user;
-            if (currentUser.photo != null) {
-                newPhoto = currentUser.photo.photo_small;
-            }
-            avatarDrawable = new AvatarDrawable(currentUser);
         } else if (currentChat != null) {
             TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
             if (chat == null) {
                 return;
             }
             currentChat = chat;
-            if (currentChat.photo != null) {
-                newPhoto = currentChat.photo.photo_small;
-            }
-            avatarDrawable = new AvatarDrawable(currentChat);
         }
-        if (avatarImageView != null) {
-            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
+        if (avatarContainer != null) {
+            avatarContainer.checkAndUpdateAvatar();
         }
     }
 
@@ -4082,10 +4240,21 @@ public void sendButtonPressed(int index) {
                 showReplyPanel(false, null, null, null, false, true);
             } else if (requestCode == 2) {
                 String videoPath = null;
+                FileLog.d("tmessages", "pic path " + currentPicturePath);
+                if (data != null && currentPicturePath != null) {
+                    if (new File(currentPicturePath).exists()) {
+                        data = null;
+                    }
+                }
                 if (data != null) {
                     Uri uri = data.getData();
                     if (uri != null) {
-                        videoPath = uri.getPath();
+                        FileLog.d("tmessages", "video record uri " + uri.toString());
+                        videoPath = AndroidUtilities.getPath(uri);
+                        FileLog.d("tmessages", "resolved path = " + videoPath);
+                        if (!(new File(videoPath).exists())) {
+                            videoPath = currentPicturePath;
+                        }
                     } else {
                         videoPath = currentPicturePath;
                     }
@@ -4134,7 +4303,7 @@ public void sendButtonPressed(int index) {
                 String originalPath = tempPath;
                 if (tempPath == null) {
                     originalPath = data.toString();
-                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
+                    tempPath = MediaController.copyFileToCache(data.getData(), "file");
                 }
                 if (tempPath == null) {
                     showAttachmentError();
@@ -4161,7 +4330,7 @@ public void sendButtonPressed(int index) {
                             user.first_name = name;
                             user.last_name = "";
                             user.phone = number;
-                            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin());
+                            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, replyingMessageObject, chatActivityEnterView == null || chatActivityEnterView.asAdmin(), null, null);
                         }
                         if (sent) {
                             showReplyPanel(false, null, null, null, false, true);
@@ -4216,6 +4385,10 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.messagesDidLoaded) {
             int guid = (Integer) args[11];
             if (guid == classGuid) {
+                if (!openAnimationEnded) {
+                    NotificationCenter.getInstance().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoaded, NotificationCenter.dialogsNeedReload,
+                            NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoaded/*, NotificationCenter.botInfoDidLoaded*/});
+                }
                 int queryLoadIndex = (Integer) args[12];
                 int index = waitingForLoad.indexOf(queryLoadIndex);
                 if (index == -1) {
@@ -4223,10 +4396,26 @@ public void didReceivedNotification(int id, final Object... args) {
                 } else {
                     waitingForLoad.remove(index);
                 }
-                if (waitingForImportantLoad) {
+                ArrayList<MessageObject> messArr = (ArrayList<MessageObject>) args[2];
+                if (waitingForImportantLoad || waitingForReplyMessageLoad) {
+                    if (waitingForReplyMessageLoad) {
+                        boolean found = false;
+                        for (int a = 0; a < messArr.size(); a++) {
+                            if (messArr.get(a).getId() == startLoadFromMessageId) {
+                                found = true;
+                                break;
+                            }
+                        }
+                        if (!found) {
+                            startLoadFromMessageId = 0;
+                            return;
+                        }
+                    }
                     int startLoadFrom = startLoadFromMessageId;
+                    boolean needSelect = needSelectFromMessageId;
                     clearChatData();
                     startLoadFromMessageId = startLoadFrom;
+                    needSelectFromMessageId = needSelect;
                 }
 
                 loadsCount++;
@@ -4245,7 +4434,6 @@ public void didReceivedNotification(int id, final Object... args) {
                 } else if (startLoadFromMessageId != 0 && load_type == 3) {
                     last_message_id = (Integer) args[5];
                 }
-                ArrayList<MessageObject> messArr = (ArrayList<MessageObject>) args[2];
                 ArrayList<TLRPC.TL_messageGroup> groups = (ArrayList<TLRPC.TL_messageGroup>) args[9];
                 SparseArray<TLRPC.TL_messageGroup> groupsByStart = null;
                 if (groups != null && !groups.isEmpty()) {
@@ -4292,10 +4480,12 @@ public void didReceivedNotification(int id, final Object... args) {
                     Collections.reverse(messArr);
                 }
                 if (currentEncryptedChat == null) {
-                    ReplyMessageQuery.loadReplyMessagesForMessages(messArr, dialog_id);
+                    MessagesQuery.loadReplyMessagesForMessages(messArr, dialog_id);
                 }
+                int approximateHeightSum = 0;
                 for (int a = 0; a < messArr.size(); a++) {
                     MessageObject obj = messArr.get(a);
+                    approximateHeightSum += obj.getApproximateHeight();
                     if (currentUser != null && currentUser.bot && obj.isOut()) {
                         obj.setIsRead();
                     }
@@ -4341,7 +4531,7 @@ public void didReceivedNotification(int id, final Object... args) {
                         dateMsg.id = 0;
                         MessageObject dateObj = new MessageObject(dateMsg, null, false);
                         dateObj.type = 10;
-                        dateObj.contentType = 4;
+                        dateObj.contentType = 1;
                         if (load_type == 1) {
                             messages.add(0, dateObj);
                         } else {
@@ -4366,7 +4556,7 @@ public void didReceivedNotification(int id, final Object... args) {
                             dateMsg.from_id = group.max_id;
                             MessageObject dateObj = new MessageObject(dateMsg, null, false);
                             dateObj.type = 10;
-                            dateObj.contentType = 4;
+                            dateObj.contentType = 1;
                             dayArray.add(dateObj);
                             if (load_type == 1) {
                                 messages.add(0, dateObj);
@@ -4382,22 +4572,24 @@ public void didReceivedNotification(int id, final Object... args) {
                         messages.add(messages.size() - 1, obj);
                     }
 
-                    if (load_type == 2 && obj.getId() == first_unread_id) {
-                        TLRPC.Message dateMsg = new TLRPC.Message();
-                        dateMsg.message = "";
-                        dateMsg.id = 0;
-                        MessageObject dateObj = new MessageObject(dateMsg, null, false);
-                        dateObj.contentType = dateObj.type = 6;
-                        //boolean dateAdded = true;
-                        //if (a != messArr.size() - 1) {
-                        //    MessageObject next = messArr.get(a + 1);
-                        //    dateAdded = !next.dateKey.equals(obj.dateKey);
-                        //}
-                        messages.add(messages.size() - 1, dateObj);
-                        unreadMessageObject = dateObj;
-                        scrollToMessage = unreadMessageObject;
-                        scrollToMessagePosition = -10000;
-                        newRowsCount++;
+                    if (obj.getId() == last_message_id) {
+                        forwardEndReached[loadIndex] = true;
+                    }
+
+                    if (load_type == 2 && obj.getId() == first_unread_id) {
+                        if (approximateHeightSum > AndroidUtilities.displaySize.y / 2 || !forwardEndReached[0]) {
+                            TLRPC.Message dateMsg = new TLRPC.Message();
+                            dateMsg.message = "";
+                            dateMsg.id = 0;
+                            MessageObject dateObj = new MessageObject(dateMsg, null, false);
+                            dateObj.type = 6;
+                            dateObj.contentType = 2;
+                            messages.add(messages.size() - 1, dateObj);
+                            unreadMessageObject = dateObj;
+                            scrollToMessage = unreadMessageObject;
+                            scrollToMessagePosition = -10000;
+                            newRowsCount++;
+                        }
                     } else if (load_type == 3 && obj.getId() == startLoadFromMessageId) {
                         if (needSelectFromMessageId) {
                             highlightMessageId = obj.getId();
@@ -4410,10 +4602,6 @@ public void didReceivedNotification(int id, final Object... args) {
                             scrollToMessagePosition = -9000;
                         }
                     }
-
-                    if (obj.getId() == last_message_id) {
-                        forwardEndReached[loadIndex] = true;
-                    }
                 }
 
                 if (forwardEndReached[loadIndex] && loadIndex != 1) {
@@ -4422,7 +4610,7 @@ public void didReceivedNotification(int id, final Object... args) {
                 }
 
                 if (loadsCount <= 2) {
-                    if (messages.size() >= 20 || !isCache) {
+                    if (!isCache) {
                         updateSpamView();
                     }
                 }
@@ -4438,13 +4626,13 @@ public void didReceivedNotification(int id, final Object... args) {
                         }
                         startLoadFromMessageId = 0;
                     }
-                    if (newRowsCount != 0) {
+                    if (newRowsCount > 0) {
                         int firstVisPos = chatLayoutManager.findLastVisibleItemPosition();
                         int top = 0;
                         if (firstVisPos != chatLayoutManager.getItemCount() - 1) {
                             firstVisPos = RecyclerView.NO_POSITION;
                         } else {
-                            View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
+                            View firstVisView = chatLayoutManager.findViewByPosition(firstVisPos);
                             top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
                         }
                         chatAdapter.notifyItemRangeInserted(chatAdapter.getItemCount() - 1, newRowsCount);
@@ -4502,7 +4690,7 @@ public void didReceivedNotification(int id, final Object... args) {
                                     chatAdapter.notifyItemRangeChanged(chatAdapter.isBot ? 1 : 0, 2);
                                 }
                                 int firstVisPos = chatLayoutManager.findLastVisibleItemPosition();
-                                View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
+                                View firstVisView = chatLayoutManager.findViewByPosition(firstVisPos);
                                 int top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
                                 if (newRowsCount - (end ? 1 : 0) > 0) {
                                     chatAdapter.notifyItemRangeInserted((chatAdapter.isBot ? 2 : 1) + (end ? 0 : 1), newRowsCount - (end ? 1 : 0));
@@ -4571,7 +4759,7 @@ public void run() {
                         progressView.setVisibility(View.INVISIBLE);
                     }
                 }
-                checkScrollForLoad();
+                checkScrollForLoad(false);
             }
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (chatListView != null) {
@@ -4580,6 +4768,15 @@ public void run() {
             if (replyObjectTextView != null) {
                 replyObjectTextView.invalidate();
             }
+            if (alertTextView != null) {
+                alertTextView.invalidate();
+            }
+            if (pinnedMessageTextView != null) {
+                pinnedMessageTextView.invalidate();
+            }
+            if (mentionListView != null) {
+                mentionListView.invalidateViews();
+            }
         } else if (id == NotificationCenter.updateInterfaces) {
             int updateMask = (Integer) args[0];
             if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
@@ -4587,24 +4784,17 @@ public void run() {
             }
             boolean updateSubtitle = false;
             if ((updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0) {
-                if (currentChat != null) {
-                    int lastCount = onlineCount;
-                    if (lastCount != updateOnlineCount()) {
-                        updateSubtitle = true;
-                    }
-                } else {
-                    updateSubtitle = true;
+                if (currentChat != null && avatarContainer != null) {
+                    avatarContainer.updateOnlineCount();
                 }
+                updateSubtitle = true;
             }
             if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_NAME) != 0) {
                 checkAndUpdateAvatar();
                 updateVisibleRows();
             }
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
-                CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
-                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
-                    updateSubtitle = true;
-                }
+                updateSubtitle = true;
             }
             if ((updateMask & MessagesController.UPDATE_MASK_CHANNEL) != 0 && ChatObject.isChannel(currentChat)) {
                 TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
@@ -4618,12 +4808,11 @@ public void run() {
                     chatActivityEnterView.setDialogId(dialog_id);
                 }
             }
-            if (updateSubtitle) {
-                updateSubtitle();
+            if (avatarContainer != null && updateSubtitle) {
+                avatarContainer.updateSubtitle();
             }
             if ((updateMask & MessagesController.UPDATE_MASK_USER_PHONE) != 0) {
                 updateContactStatus();
-                updateSpamView();
             }
         } else if (id == NotificationCenter.didReceivedNewMessages) {
             long did = (Long) args[0];
@@ -4632,7 +4821,6 @@ public void run() {
                 boolean updateChat = false;
                 boolean hasFromMe = false;
                 ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
-
                 if (currentEncryptedChat != null && arr.size() == 1) {
                     MessageObject obj = arr.get(0);
 
@@ -4647,8 +4835,44 @@ public void run() {
                         }
                     }
                 }
+                if (currentChat != null || inlineReturn != 0) {
+                    for (int a = 0; a < arr.size(); a++) {
+                        MessageObject messageObject = arr.get(a);
+                        if (currentChat != null) {
+                            if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser && messageObject.messageOwner.action.user_id == UserConfig.getClientUserId() ||
+                                    messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser && messageObject.messageOwner.action.users.contains(UserConfig.getClientUserId())) {
+                                TLRPC.Chat newChat = MessagesController.getInstance().getChat(currentChat.id);
+                                if (newChat != null) {
+                                    currentChat = newChat;
+                                    checkActionBarMenu();
+                                    updateBottomOverlay();
+                                    if (avatarContainer != null) {
+                                        avatarContainer.updateSubtitle();
+                                    }
+                                }
+                            } else if (messageObject.messageOwner.reply_to_msg_id != 0 && messageObject.replyMessageObject == null) {
+                                messageObject.replyMessageObject = messagesDict[0].get(messageObject.messageOwner.reply_to_msg_id);
+                                if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+                                    messageObject.generatePinMessageText(null, null);
+                                }
+                            }
+                        } else if (inlineReturn != 0) {
+                            if (messageObject.messageOwner.reply_markup != null) {
+                                for (int b = 0; b < messageObject.messageOwner.reply_markup.rows.size(); b++) {
+                                    TLRPC.TL_keyboardButtonRow row = messageObject.messageOwner.reply_markup.rows.get(b);
+                                    for (int c = 0; c < row.buttons.size(); c++) {
+                                        TLRPC.KeyboardButton button = row.buttons.get(c);
+                                        if (button instanceof TLRPC.TL_keyboardButtonSwitchInline) {
+                                            processSwitchButton((TLRPC.TL_keyboardButtonSwitchInline) button);
+                                            break;
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
 
-                ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 boolean reloadMegagroup = false;
                 if (!forwardEndReached[0]) {
                     int currentMaxDate = Integer.MIN_VALUE;
@@ -4663,10 +4887,8 @@ public void run() {
                         if (currentUser != null && currentUser.bot && obj.isOut()) {
                             obj.setIsRead();
                         }
-                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
-                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
-                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
-                            timerDrawable.setTime(action.ttl_seconds);
+                        if (avatarContainer != null && currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction && obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                            avatarContainer.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction).ttl_seconds);
                         }
                         if (obj.messageOwner.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                             final Bundle bundle = new Bundle();
@@ -4743,10 +4965,8 @@ public void run() {
                         if (currentUser != null && currentUser.bot && obj.isOut()) {
                             obj.setIsRead();
                         }
-                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
-                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
-                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction;
-                            timerDrawable.setTime(action.ttl_seconds);
+                        if (avatarContainer != null && currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction && obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                            avatarContainer.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL) obj.messageOwner.action.encryptedAction).ttl_seconds);
                         }
                         if (messagesDict[0].containsKey(obj.getId())) {
                             continue;
@@ -4816,7 +5036,7 @@ public void run() {
                             dateMsg.id = 0;
                             MessageObject dateObj = new MessageObject(dateMsg, null, false);
                             dateObj.type = 10;
-                            dateObj.contentType = 4;
+                            dateObj.contentType = 1;
                             messages.add(0, dateObj);
                             addedCount++;
                         }
@@ -4835,7 +5055,8 @@ public void run() {
                                     dateMsg.message = "";
                                     dateMsg.id = 0;
                                     MessageObject dateObj = new MessageObject(dateMsg, null, false);
-                                    dateObj.contentType = dateObj.type = 6;
+                                    dateObj.type = 6;
+                                    dateObj.contentType = 2;
                                     messages.add(0, dateObj);
                                     unreadMessageObject = dateObj;
                                     scrollToMessage = unreadMessageObject;
@@ -5002,6 +5223,12 @@ public void run() {
             for (int a = 0; a < markAsDeletedMessages.size(); a++) {
                 Integer ids = markAsDeletedMessages.get(a);
                 MessageObject obj = messagesDict[loadIndex].get(ids);
+                if (loadIndex == 0 && info != null && info.pinned_msg_id == ids) {
+                    pinnedMessageObject = null;
+                    info.pinned_msg_id = 0;
+                    MessagesStorage.getInstance().updateChannelPinnedMessage(channelId, 0);
+                    updatePinnedMessageView(true);
+                }
                 if (obj != null) {
                     int index = messages.indexOf(obj);
                     if (index != -1) {
@@ -5083,22 +5310,24 @@ public void run() {
                 TLRPC.Message newMsgObj = (TLRPC.Message) args[2];
                 boolean mediaUpdated = false;
                 try {
-                    mediaUpdated = newMsgObj.media != null && obj.messageOwner.media != null && !newMsgObj.media.getClass().equals(obj.messageOwner.media.getClass());
+                    mediaUpdated = obj.messageOwner.params != null && obj.messageOwner.params.containsKey("query_id") || newMsgObj.media != null && obj.messageOwner.media != null && !newMsgObj.media.getClass().equals(obj.messageOwner.media.getClass());
                 } catch (Exception e) { //TODO
                     FileLog.e("tmessages", e);
                 }
                 if (newMsgObj != null) {
-                    obj.messageOwner.media = newMsgObj.media;
+                    obj.messageOwner = newMsgObj;
                     obj.generateThumbs(true);
+                    obj.setType();
                 }
                 messagesDict[0].remove(msgId);
                 messagesDict[0].put(newMsgId, obj);
                 obj.messageOwner.id = newMsgId;
                 obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                obj.forceUpdate = mediaUpdated;
                 ArrayList<MessageObject> messArr = new ArrayList<>();
                 messArr.add(obj);
                 if (currentEncryptedChat == null) {
-                    ReplyMessageQuery.loadReplyMessagesForMessages(messArr, dialog_id);
+                    MessagesQuery.loadReplyMessagesForMessages(messArr, dialog_id);
                 }
                 if (chatAdapter != null) {
                     chatAdapter.updateRowWithMessageObject(obj);
@@ -5147,8 +5376,16 @@ public void run() {
                 if (mentionsAdapter != null) {
                     mentionsAdapter.setChatInfo(info);
                 }
-                updateOnlineCount();
-                updateSubtitle();
+                if (args[3] instanceof MessageObject) {
+                    pinnedMessageObject = (MessageObject) args[3];
+                    updatePinnedMessageView(false);
+                } else {
+                    updatePinnedMessageView(true);
+                }
+                if (avatarContainer != null) {
+                    avatarContainer.updateOnlineCount();
+                    avatarContainer.updateSubtitle();
+                }
                 if (isBroadcast) {
                     SendMessagesHelper.getInstance().setCurrentChatInfo(info);
                 }
@@ -5206,12 +5443,19 @@ public void run() {
         } else if (id == NotificationCenter.chatInfoCantLoad) {
             int chatId = (Integer) args[0];
             if (currentChat != null && currentChat.id == chatId) {
+                int reason = (Integer) args[1];
                 if (getParentActivity() == null || closeChatDialog != null) {
                     return;
                 }
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                builder.setMessage(LocaleController.getString("ChannelCantOpenPrivate", R.string.ChannelCantOpenPrivate));
+                if (reason == 0) {
+                    builder.setMessage(LocaleController.getString("ChannelCantOpenPrivate", R.string.ChannelCantOpenPrivate));
+                } else if (reason == 1) {
+                    builder.setMessage(LocaleController.getString("ChannelCantOpenNa", R.string.ChannelCantOpenNa));
+                } else if (reason == 2) {
+                    builder.setMessage(LocaleController.getString("ChannelCantOpenBanned", R.string.ChannelCantOpenBanned));
+                }
                 builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                 showDialog(closeChatDialog = builder.create());
 
@@ -5225,8 +5469,9 @@ public void run() {
             }
         } else if (id == NotificationCenter.contactsDidLoaded) {
             updateContactStatus();
-            updateSubtitle();
-            updateSpamView();
+            if (avatarContainer != null) {
+                avatarContainer.updateSubtitle();
+            }
         } else if (id == NotificationCenter.encryptedChatUpdated) {
             TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) args[0];
             if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
@@ -5262,14 +5507,10 @@ public void run() {
                 int count = chatListView.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = chatListView.getChildAt(a);
-                    if (view instanceof ChatAudioCell) {
-                        ChatAudioCell cell = (ChatAudioCell) view;
-                        if (cell.getMessageObject() != null) {
-                            cell.updateButtonState(false);
-                        }
-                    } else if (view instanceof ChatMusicCell) {
-                        ChatMusicCell cell = (ChatMusicCell) view;
-                        if (cell.getMessageObject() != null) {
+                    if (view instanceof ChatMessageCell) {
+                        ChatMessageCell cell = (ChatMessageCell) view;
+                        MessageObject messageObject = cell.getMessageObject();
+                        if (messageObject != null && (messageObject.isVoice() || messageObject.isMusic())) {
                             cell.updateButtonState(false);
                         }
                     }
@@ -5281,27 +5522,15 @@ public void run() {
                 int count = chatListView.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = chatListView.getChildAt(a);
-                    if (view instanceof ChatAudioCell) {
-                        ChatAudioCell cell = (ChatAudioCell) view;
-                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
-                            MessageObject playing = cell.getMessageObject();
-                            MessageObject player = MediaController.getInstance().getPlayingMessageObject();
-                            if (player != null) {
-                                playing.audioProgress = player.audioProgress;
-                                playing.audioProgressSec = player.audioProgressSec;
-                                cell.updateProgress();
-                            }
-                            break;
-                        }
-                    } else if (view instanceof ChatMusicCell) {
-                        ChatMusicCell cell = (ChatMusicCell) view;
+                    if (view instanceof ChatMessageCell) {
+                        ChatMessageCell cell = (ChatMessageCell) view;
                         if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
                             MessageObject playing = cell.getMessageObject();
                             MessageObject player = MediaController.getInstance().getPlayingMessageObject();
                             if (player != null) {
                                 playing.audioProgress = player.audioProgress;
                                 playing.audioProgressSec = player.audioProgressSec;
-                                cell.updateProgress();
+                                cell.updateAudioProgress();
                             }
                             break;
                         }
@@ -5330,6 +5559,7 @@ public void run() {
                 }
                 cantDeleteMessagesCount = 0;
                 actionBar.hideActionMode();
+                updatePinnedMessageView(true);
 
                 if (botButtons != null) {
                     botButtons = null;
@@ -5378,7 +5608,6 @@ public void run() {
                 userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
                 if (oldValue != userBlocked) {
                     updateBottomOverlay();
-                    updateSpamView();
                 }
             }
         } else if (id == NotificationCenter.FileNewChunkAvailable) {
@@ -5415,14 +5644,10 @@ public void run() {
                 int count = chatListView.getChildCount();
                 for (int a = 0; a < count; a++) {
                     View view = chatListView.getChildAt(a);
-                    if (view instanceof ChatAudioCell) {
-                        ChatAudioCell cell = (ChatAudioCell) view;
-                        if (cell.getMessageObject() != null) {
-                            cell.updateButtonState(false);
-                        }
-                    } else if (view instanceof ChatMusicCell) {
-                        ChatMusicCell cell = (ChatMusicCell) view;
-                        if (cell.getMessageObject() != null) {
+                    if (view instanceof ChatMessageCell) {
+                        ChatMessageCell cell = (ChatMessageCell) view;
+                        MessageObject messageObject1 = cell.getMessageObject();
+                        if (messageObject1 != null && (messageObject1.isVoice() || messageObject1.isMusic())) {
                             cell.updateButtonState(false);
                         }
                     }
@@ -5449,6 +5674,10 @@ public void run() {
             for (int a = 0; a < messageObjects.size(); a++) {
                 MessageObject messageObject = messageObjects.get(a);
                 MessageObject old = messagesDict[loadIndex].get(messageObject.getId());
+                if (pinnedMessageObject != null && pinnedMessageObject.getId() == messageObject.getId()) {
+                    pinnedMessageObject = messageObject;
+                    updatePinnedMessageView(true);
+                }
                 if (old != null) {
                     if (!mediaUpdated && messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
                         mediaUpdated = true;
@@ -5482,6 +5711,13 @@ public void run() {
             if (did == dialog_id) {
                 updateVisibleRows();
             }
+        } else if (id == NotificationCenter.didLoadedPinnedMessage) {
+            MessageObject message = (MessageObject) args[0];
+            if (message.getDialogId() == dialog_id && info != null && info.pinned_msg_id == message.getId()) {
+                pinnedMessageObject = message;
+                loadingPinnedMessage = 0;
+                updatePinnedMessageView(true);
+            }
         } else if (id == NotificationCenter.didReceivedWebpages) {
             ArrayList<TLRPC.Message> arrayList = (ArrayList<TLRPC.Message>) args[0];
             boolean updated = false;
@@ -5501,7 +5737,7 @@ public void run() {
             }
             if (updated) {
                 updateVisibleRows();
-                if (chatLayoutManager.findLastVisibleItemPosition() >= messages.size() - 1) {
+                if (chatLayoutManager != null && chatLayoutManager.findLastVisibleItemPosition() >= messages.size() - 1) {
                     moveScrollToLastMessage();
                 }
             }
@@ -5520,7 +5756,7 @@ public void run() {
             boolean updated = false;
             for (int a = 0; a < arrayList.size(); a++) {
                 long mid = arrayList.get(a);
-                MessageObject currentMessage = messagesDict[0].get((int) mid);
+                MessageObject currentMessage = messagesDict[mergeDialogId == 0 ? 0 : 1].get((int) mid);
                 if (currentMessage != null) {
                     currentMessage.setContentIsRead();
                     updated = true;
@@ -5611,7 +5847,54 @@ public void run() {
                     updateVisibleRows();
                 }
             }
+        } else if (id == NotificationCenter.peerSettingsDidLoaded) {
+            long did = (Long) args[0];
+            if (did == dialog_id) {
+                updateSpamView();
+            }
+        }
+    }
+
+    public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button) {
+        if (inlineReturn == 0) {
+            return false;
+        }
+        String query = "@" + currentUser.username + " " + button.query;
+        if (inlineReturn == dialog_id) {
+            inlineReturn = 0;
+            chatActivityEnterView.setFieldText(query);
+        } else {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putString("dialog_" + inlineReturn, query);
+            editor.commit();
+            if (parentLayout.fragmentsStack.size() > 1) {
+                BaseFragment prevFragment = parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 2);
+                if (prevFragment instanceof ChatActivity && ((ChatActivity) prevFragment).dialog_id == inlineReturn) {
+                    finishFragment();
+                } else {
+                    Bundle bundle = new Bundle();
+                    int lower_part = (int) inlineReturn;
+                    int high_part = (int) (inlineReturn >> 32);
+                    if (lower_part != 0) {
+                        if (lower_part > 0) {
+                            bundle.putInt("user_id", lower_part);
+                        } else if (lower_part < 0) {
+                            bundle.putInt("chat_id", -lower_part);
+                        }
+                    } else {
+                        bundle.putInt("enc_id", high_part);
+                    }
+                    /*ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
+                    if (lastFragment != null) {
+                        NotificationCenter.getInstance().removeObserver(lastFragment, NotificationCenter.closeChats);
+                    }
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);*/
+                    presentFragment(new ChatActivity(bundle), true);
+                }
+            }
         }
+        return true;
     }
 
     private void updateSearchButtons(int mask) {
@@ -5625,28 +5908,32 @@ private void updateSearchButtons(int mask) {
 
     @Override
     public void onTransitionAnimationStart(boolean isOpen, boolean backward) {
+        NotificationCenter.getInstance().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoaded, NotificationCenter.dialogsNeedReload,
+                NotificationCenter.closeChats, NotificationCenter.messagesDidLoaded, NotificationCenter.botKeyboardDidLoaded/*, NotificationCenter.botInfoDidLoaded*/});
+        NotificationCenter.getInstance().setAnimationInProgress(true);
         if (isOpen) {
-            NotificationCenter.getInstance().setAnimationInProgress(true);
             openAnimationEnded = false;
         }
     }
 
     @Override
     public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
+        NotificationCenter.getInstance().setAnimationInProgress(false);
         if (isOpen) {
-            NotificationCenter.getInstance().setAnimationInProgress(false);
             openAnimationEnded = true;
             int count = chatListView.getChildCount();
             for (int a = 0; a < count; a++) {
                 View view = chatListView.getChildAt(a);
-                if (view instanceof ChatMediaCell) {
-                    ChatMediaCell cell = (ChatMediaCell) view;
-                    cell.setAllowedToSetPhoto(true);
+                if (view instanceof ChatMessageCell) {
+                    ((ChatMessageCell) view).setAllowedToSetPhoto(true);
                 }
             }
 
             if (currentUser != null) {
-                MessagesController.getInstance().loadFullUser(currentUser, classGuid);
+                MessagesController.getInstance().loadFullUser(currentUser, classGuid, false);
+            }
+            if (Build.VERSION.SDK_INT >= 21) {
+                createChatAttachView();
             }
         }
     }
@@ -5655,7 +5942,13 @@ public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
     protected void onDialogDismiss(Dialog dialog) {
         if (closeChatDialog != null && dialog == closeChatDialog) {
             MessagesController.getInstance().deleteDialog(dialog_id, 0);
-            finishFragment();
+            if (parentLayout != null && !parentLayout.fragmentsStack.isEmpty() && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1) != this) {
+                BaseFragment fragment = parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 1);
+                removeSelfFromStack();
+                fragment.finishFragment();
+            } else {
+                finishFragment();
+            }
         }
     }
 
@@ -5664,7 +5957,7 @@ private void updateBottomOverlay() {
             return;
         }
         if (currentChat != null) {
-            if (ChatObject.isChannel(currentChat) && !currentChat.megagroup && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
+            if (ChatObject.isChannel(currentChat) && !(currentChat instanceof TLRPC.TL_channelForbidden)) {
                 if (ChatObject.isNotInChat(currentChat)) {
                     bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                 } else {
@@ -5723,79 +6016,288 @@ private void updateBottomOverlay() {
         checkRaiseSensors();
     }
 
+    public void showAlert(TLRPC.User user, String message) {
+        if (alertView == null || user == null || message == null) {
+            return;
+        }
+
+        if (alertView.getTag() != null) {
+            alertView.setTag(null);
+            if (alertViewAnimator != null) {
+                alertViewAnimator.cancel();
+                alertViewAnimator = null;
+            }
+            if (Build.VERSION.SDK_INT >= 11) {
+                alertView.setVisibility(View.VISIBLE);
+                alertViewAnimator = new AnimatorSetProxy();
+                alertViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(alertView, "translationY", 0));
+                alertViewAnimator.setDuration(200);
+                alertViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (alertViewAnimator != null && alertViewAnimator.equals(animation)) {
+                            alertView.clearAnimation();
+                            alertViewAnimator = null;
+                        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        if (alertViewAnimator != null && alertViewAnimator.equals(animation)) {
+                            alertViewAnimator = null;
+                        }
+                    }
+                });
+                alertViewAnimator.start();
+            } else {
+                ViewProxy.setTranslationY(alertView, 0);
+                alertView.clearAnimation();
+                alertView.setVisibility(View.VISIBLE);
+            }
+        }
+        alertNameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        alertTextView.setText(Emoji.replaceEmoji(message.replace('\n', ' '), alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
+        if (hideAlertViewRunnable != null) {
+            AndroidUtilities.cancelRunOnUIThread(hideAlertViewRunnable);
+        }
+        AndroidUtilities.runOnUIThread(hideAlertViewRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (hideAlertViewRunnable != this) {
+                    return;
+                }
+                if (alertView.getTag() == null) {
+                    alertView.setTag(1);
+                    if (alertViewAnimator != null) {
+                        alertViewAnimator.cancel();
+                        alertViewAnimator = null;
+                    }
+                    if (Build.VERSION.SDK_INT >= 11) {
+                        alertViewAnimator = new AnimatorSetProxy();
+                        alertViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(alertView, "translationY", -AndroidUtilities.dp(50)));
+                        alertViewAnimator.setDuration(200);
+                        alertViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                            @Override
+                            public void onAnimationEnd(Object animation) {
+                                if (alertViewAnimator != null && alertViewAnimator.equals(animation)) {
+                                    alertView.clearAnimation();
+                                    alertView.setVisibility(View.GONE);
+                                    alertViewAnimator = null;
+                                }
+                            }
+
+                            @Override
+                            public void onAnimationCancel(Object animation) {
+                                if (alertViewAnimator != null && alertViewAnimator.equals(animation)) {
+                                    alertViewAnimator = null;
+                                }
+                            }
+                        });
+                        alertViewAnimator.start();
+                    } else {
+                        ViewProxy.setTranslationY(alertView, -AndroidUtilities.dp(50));
+                        alertView.clearAnimation();
+                        alertView.setVisibility(View.GONE);
+                    }
+                }
+            }
+        }, 3000);
+    }
+
+    private void hidePinnedMessageView(boolean animated) {
+        if (pinnedMessageView.getTag() == null) {
+            pinnedMessageView.setTag(1);
+            if (pinnedMessageViewAnimator != null) {
+                pinnedMessageViewAnimator.cancel();
+                pinnedMessageViewAnimator = null;
+            }
+            if (Build.VERSION.SDK_INT >= 11 && animated) {
+                pinnedMessageViewAnimator = new AnimatorSetProxy();
+                pinnedMessageViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(pinnedMessageView, "translationY", -AndroidUtilities.dp(50)));
+                pinnedMessageViewAnimator.setDuration(200);
+                pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (pinnedMessageViewAnimator != null && pinnedMessageViewAnimator.equals(animation)) {
+                            pinnedMessageView.clearAnimation();
+                            pinnedMessageView.setVisibility(View.GONE);
+                            pinnedMessageViewAnimator = null;
+                        }
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        if (pinnedMessageViewAnimator != null && pinnedMessageViewAnimator.equals(animation)) {
+                            pinnedMessageViewAnimator = null;
+                        }
+                    }
+                });
+                pinnedMessageViewAnimator.start();
+            } else {
+                ViewProxy.setTranslationY(pinnedMessageView, -AndroidUtilities.dp(50));
+                pinnedMessageView.clearAnimation();
+                pinnedMessageView.setVisibility(View.GONE);
+            }
+        }
+    }
+
+    private void updatePinnedMessageView(boolean animated) {
+        if (pinnedMessageView == null) {
+            return;
+        }
+        if (info != null) {
+            if (pinnedMessageObject != null && info.pinned_msg_id != pinnedMessageObject.getId()) {
+                pinnedMessageObject = null;
+            }
+            if (info.pinned_msg_id != 0 && pinnedMessageObject == null) {
+                pinnedMessageObject = messagesDict[0].get(info.pinned_msg_id);
+            }
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        if (info == null || info.pinned_msg_id == 0 || info.pinned_msg_id == preferences.getInt("pin_" + dialog_id, 0) || actionBar != null && actionBar.isActionModeShowed()) {
+            hidePinnedMessageView(animated);
+        } else {
+            if (pinnedMessageObject != null) {
+                if (pinnedMessageView.getTag() != null) {
+                    pinnedMessageView.setTag(null);
+                    if (pinnedMessageViewAnimator != null) {
+                        pinnedMessageViewAnimator.cancel();
+                        pinnedMessageViewAnimator = null;
+                    }
+                    if (Build.VERSION.SDK_INT >= 11 && animated) {
+                        pinnedMessageView.setVisibility(View.VISIBLE);
+                        pinnedMessageViewAnimator = new AnimatorSetProxy();
+                        pinnedMessageViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(pinnedMessageView, "translationY", 0));
+                        pinnedMessageViewAnimator.setDuration(200);
+                        pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                            @Override
+                            public void onAnimationEnd(Object animation) {
+                                if (pinnedMessageViewAnimator != null && pinnedMessageViewAnimator.equals(animation)) {
+                                    pinnedMessageView.clearAnimation();
+                                    pinnedMessageViewAnimator = null;
+                                }
+                            }
+
+                            @Override
+                            public void onAnimationCancel(Object animation) {
+                                if (pinnedMessageViewAnimator != null && pinnedMessageViewAnimator.equals(animation)) {
+                                    pinnedMessageViewAnimator = null;
+                                }
+                            }
+                        });
+                        pinnedMessageViewAnimator.start();
+                    } else {
+                        ViewProxy.setTranslationY(pinnedMessageView, 0);
+                        pinnedMessageView.clearAnimation();
+                        pinnedMessageView.setVisibility(View.VISIBLE);
+                    }
+                }
+                pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
+                if (pinnedMessageObject.messageText != null) {
+                    String mess = pinnedMessageObject.messageText.toString();
+                    if (mess.length() > 150) {
+                        mess = mess.substring(0, 150);
+                    }
+                    mess = mess.replace('\n', ' ');
+                    pinnedMessageTextView.setText(Emoji.replaceEmoji(mess, pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14), false));
+                }
+            } else {
+                hidePinnedMessageView(animated);
+                if (loadingPinnedMessage != info.pinned_msg_id) {
+                    loadingPinnedMessage = info.pinned_msg_id;
+                    MessagesQuery.loadPinnedMessage(currentChat.id, info.pinned_msg_id, true);
+                }
+            }
+        }
+        checkListViewPaddings();
+    }
+
     private void updateSpamView() {
         if (reportSpamView == null) {
             return;
         }
-        reportSpamUser = null;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        if (!messages.isEmpty() && !preferences.getBoolean("spam_" + dialog_id, false)) {
-            if (currentChat != null) {
+        boolean show = preferences.getInt("spam3_" + dialog_id, 0) == 2;
+        if (show) {
+            if (messages.isEmpty()) {
+                show = false;
+            } else {
                 int count = messages.size() - 1;
                 for (int a = count; a >= Math.max(count - 50, 0); a--) {
                     MessageObject messageObject = messages.get(a);
                     if (messageObject.isOut()) {
-                        reportSpamUser = null;
-                    } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
-                        reportSpamUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-                    } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
-                        if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId() || messageObject.messageOwner.action.users.contains(UserConfig.getClientUserId())) {
-                            reportSpamUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-                        }
+                        show = false;
+                        break;
                     }
                 }
-                if (reportSpamUser != null && ContactsController.getInstance().contactsDict.get(reportSpamUser.id) != null) {
-                    reportSpamUser = null;
-                }
-                if (reportSpamUser != null) {
-                    addToContactsButton.setVisibility(View.GONE);
-                    reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
-                    reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
-                }
-            } else if (currentUser != null) {
-                if (!currentUser.bot &&
-                    currentUser.id / 1000 != 333 && currentUser.id / 1000 != 777
-                        && !UserObject.isDeleted(currentUser)
-                        && !userBlocked
-                        && !ContactsController.getInstance().isLoadingContacts()
-                        && (currentUser.phone == null || currentUser.phone.length() == 0 || ContactsController.getInstance().contactsDict.get(currentUser.id) == null)) {
-                    if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                        reportSpamButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(50), 0);
-                        addToContactsButton.setVisibility(View.VISIBLE);
-                        reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
-                    } else {
-                        reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
-                        addToContactsButton.setVisibility(View.GONE);
-                        reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
-                    }
-                    reportSpamUser = currentUser;
-                }
-                if (reportSpamUser != null) {
-                    int count = messages.size() - 1;
-                    for (int a = count; a >= Math.max(count - 50, 0); a--) {
-                        MessageObject messageObject = messages.get(a);
-                        if (messageObject.isOut()) {
-                            reportSpamUser = null;
-                            break;
+            }
+        }
+        if (!show) {
+            if (reportSpamView.getTag() == null) {
+                reportSpamView.setTag(1);
+                if (Build.VERSION.SDK_INT >= 11) {
+                    if (reportSpamViewAnimator != null) {
+                        reportSpamViewAnimator.cancel();
+                    }
+                    reportSpamViewAnimator = new AnimatorSetProxy();
+                    reportSpamViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(reportSpamView, "translationY", -AndroidUtilities.dp(50)));
+                    reportSpamViewAnimator.setDuration(200);
+                    reportSpamViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                        @Override
+                        public void onAnimationEnd(Object animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                reportSpamView.clearAnimation();
+                                reportSpamView.setVisibility(View.GONE);
+                                reportSpamViewAnimator = null;
+                            }
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                reportSpamViewAnimator = null;
+                            }
                         }
+                    });
+                    reportSpamViewAnimator.start();
+                } else {
+                    reportSpamView.setVisibility(View.GONE);
+                }
+            }
+        } else {
+            if (reportSpamView.getTag() != null) {
+                reportSpamView.setTag(null);
+                if (Build.VERSION.SDK_INT >= 11) {
+                    reportSpamView.setVisibility(View.VISIBLE);
+                    if (reportSpamViewAnimator != null) {
+                        reportSpamViewAnimator.cancel();
                     }
+                    reportSpamViewAnimator = new AnimatorSetProxy();
+                    reportSpamViewAnimator.playTogether(ObjectAnimatorProxy.ofFloat(reportSpamView, "translationY", 0));
+                    reportSpamViewAnimator.setDuration(200);
+                    reportSpamViewAnimator.addListener(new AnimatorListenerAdapterProxy() {
+                        @Override
+                        public void onAnimationEnd(Object animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                reportSpamView.clearAnimation();
+                                reportSpamViewAnimator = null;
+                            }
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (reportSpamViewAnimator != null && reportSpamViewAnimator.equals(animation)) {
+                                reportSpamViewAnimator = null;
+                            }
+                        }
+                    });
+                    reportSpamViewAnimator.start();
+                } else {
+                    reportSpamView.setVisibility(View.VISIBLE);
                 }
             }
         }
-        if (reportSpamUser != null) {
-            if (reportSpamView.getVisibility() != View.VISIBLE) {
-                reportSpamView.setVisibility(View.VISIBLE);
-                reportSpamView.setTag(1);
-                chatListView.setTopGlowOffset(AndroidUtilities.dp(48));
-                chatListView.setPadding(0, AndroidUtilities.dp(52), 0, AndroidUtilities.dp(3));
-            }
-        } else if (reportSpamView.getVisibility() != View.GONE) {
-            reportSpamView.setVisibility(View.GONE);
-            reportSpamView.setTag(null);
-            chatListView.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(3));
-            chatListView.setTopGlowOffset(0);
-            chatLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-        }
+        checkListViewPaddings();
     }
 
     private void updateContactStatus() {
@@ -5815,27 +6317,54 @@ private void updateContactStatus() {
                     || ContactsController.getInstance().isLoadingContacts()
                     || (currentUser.phone != null && currentUser.phone.length() != 0 && ContactsController.getInstance().contactsDict.get(currentUser.id) != null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts()))) {
                 addContactItem.setVisibility(View.GONE);
-                reportSpamView.setVisibility(View.GONE);
-                chatListView.setTopGlowOffset(0);
-                chatListView.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(3));
             } else {
                 addContactItem.setVisibility(View.VISIBLE);
-                if (reportSpamView.getTag() != null) {
-                    reportSpamView.setVisibility(View.VISIBLE);
-                    chatListView.setPadding(0, AndroidUtilities.dp(52), 0, AndroidUtilities.dp(3));
-                    chatListView.setTopGlowOffset(AndroidUtilities.dp(48));
-                }
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
                     addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
+                    reportSpamButton.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(50), 0);
                     addToContactsButton.setVisibility(View.VISIBLE);
                     reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0.5f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
                 } else {
                     addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                     addToContactsButton.setVisibility(View.GONE);
+                    reportSpamButton.setPadding(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0);
                     reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 1.0f, Gravity.LEFT | Gravity.TOP, 0, 0, 0, AndroidUtilities.dp(1)));
                 }
             }
         }
+        checkListViewPaddings();
+    }
+
+    private void checkListViewPaddings() {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    int firstVisPos = chatLayoutManager.findLastVisibleItemPosition();
+                    int top = 0;
+                    if (firstVisPos != RecyclerView.NO_POSITION) {
+                        View firstVisView = chatLayoutManager.findViewByPosition(firstVisPos);
+                        top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
+                    }
+                    if (chatListView.getPaddingTop() != AndroidUtilities.dp(52) && (pinnedMessageView != null && pinnedMessageView.getTag() == null || reportSpamView != null && reportSpamView.getTag() == null)) {
+                        chatListView.setPadding(0, AndroidUtilities.dp(52), 0, AndroidUtilities.dp(3));
+                        chatListView.setTopGlowOffset(AndroidUtilities.dp(48));
+                        top -= AndroidUtilities.dp(48);
+                    } else if (chatListView.getPaddingTop() != AndroidUtilities.dp(4) && (pinnedMessageView == null || pinnedMessageView.getTag() != null) && (reportSpamView == null || reportSpamView.getTag() != null)) {
+                        chatListView.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(3));
+                        chatListView.setTopGlowOffset(0);
+                        top += AndroidUtilities.dp(48);
+                    } else {
+                        firstVisPos = RecyclerView.NO_POSITION;
+                    }
+                    if (firstVisPos != RecyclerView.NO_POSITION) {
+                        chatLayoutManager.scrollToPositionWithOffset(firstVisPos, top);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
     }
 
     private void checkRaiseSensors() {
@@ -5859,7 +6388,7 @@ public void onResume() {
             replyImageView.setImage(replyImageLocation, "50_50", (Drawable) null);
         }
 
-        NotificationsController.getInstance().setOpennedDialogId(dialog_id);
+        NotificationsController.getInstance().setOpenedDialogId(dialog_id);
         if (scrollToTopOnResume) {
             if (scrollToTopUnReadOnResume && scrollToMessage != null) {
                 if (chatListView != null) {
@@ -5893,7 +6422,7 @@ public void onResume() {
             readWhenResume = false;
             MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).getId(), readWithMid, readWithDate, true, false);
         }
-        checkScrollForLoad();
+        checkScrollForLoad(false);
         if (wasPaused) {
             wasPaused = false;
             if (chatAdapter != null) {
@@ -5901,7 +6430,7 @@ public void onResume() {
             }
         }
 
-        fixLayout(true);
+        fixLayout();
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         if (chatActivityEnterView.getFieldText() == null) {
             String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
@@ -5980,7 +6509,7 @@ public void onPause() {
         }
         paused = true;
         wasPaused = true;
-        NotificationsController.getInstance().setOpennedDialogId(0);
+        NotificationsController.getInstance().setOpenedDialogId(0);
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onPause();
             if (!chatActivityEnterView.isEditingMessage()) {
@@ -6041,7 +6570,34 @@ private void updateInformationForScreenshotDetector() {
         MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
     }
 
-    private void fixLayout(final boolean resume) {
+    private boolean fixLayoutInternal() {
+        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            selectedMessagesCountTextView.setTextSize(18);
+            actionModeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        } else {
+            selectedMessagesCountTextView.setTextSize(20);
+            actionModeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
+                actionBar.setBackButtonDrawable(new BackDrawable(false));
+                if (playerView != null && playerView.getParent() == null) {
+                    ((ViewGroup) fragmentView).addView(playerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
+                }
+            } else {
+                actionBar.setBackButtonDrawable(new BackDrawable(parentLayout == null || parentLayout.fragmentsStack.isEmpty() || parentLayout.fragmentsStack.get(0) == ChatActivity.this || parentLayout.fragmentsStack.size() == 1));
+                if (playerView != null && playerView.getParent() != null) {
+                    fragmentView.setPadding(0, 0, 0, 0);
+                    ((ViewGroup) fragmentView).removeView(playerView);
+                }
+            }
+            return false;
+        }
+        return true;
+    }
+
+    private void fixLayout() {
         if (avatarContainer != null) {
             avatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
                 @Override
@@ -6049,39 +6605,7 @@ public boolean onPreDraw() {
                     if (avatarContainer != null) {
                         avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                        selectedMessagesCountTextView.setTextSize(18);
-                        actionModeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-                    } else {
-                        selectedMessagesCountTextView.setTextSize(20);
-                        actionModeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
-                    }
-
-                    int padding = (ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
-                    if (avatarContainer.getPaddingTop() != padding) {
-                        avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
-                    }
-                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
-                    if (layoutParams.topMargin != (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0)) {
-                        layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
-                        avatarContainer.setLayoutParams(layoutParams);
-                    }
-                    if (AndroidUtilities.isTablet()) {
-                        if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                            actionBar.setBackButtonDrawable(new BackDrawable(false));
-                            if (playerView != null && playerView.getParent() == null) {
-                                ((ViewGroup) fragmentView).addView(playerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 39, Gravity.TOP | Gravity.LEFT, 0, -36, 0, 0));
-                            }
-                        } else {
-                            actionBar.setBackButtonDrawable(new BackDrawable(true));
-                            if (playerView != null && playerView.getParent() != null) {
-                                fragmentView.setPadding(0, 0, 0, 0);
-                                ((ViewGroup) fragmentView).removeView(playerView);
-                            }
-                        }
-                        return false;
-                    }
-                    return true;
+                    return fixLayoutInternal();
                 }
             });
         }
@@ -6089,7 +6613,7 @@ public boolean onPreDraw() {
 
     @Override
     public void onConfigurationChanged(android.content.res.Configuration newConfig) {
-        fixLayout(false);
+        fixLayout();
     }
 
     private void switchImportantMode(MessageObject searchBeforeMessage) {
@@ -6148,8 +6672,8 @@ private void switchImportantMode(MessageObject searchBeforeMessage) {
             }
         }
 
-        radioButton.setChecked(!radioButton.isChecked(), true);
-        channelMessagesImportant = radioButton.isChecked() ? 1 : 2;
+        avatarContainer.setRadioChecked(!avatarContainer.isRadioChecked(), true);
+        channelMessagesImportant = avatarContainer.isRadioChecked() ? 1 : 2;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         preferences.edit().putInt("important_" + dialog_id, channelMessagesImportant).commit();
         waitingForImportantLoad = true;
@@ -6162,10 +6686,145 @@ private void switchImportantMode(MessageObject searchBeforeMessage) {
         }
     }
 
-    private void createMenu(View v, boolean single) {
-        if (actionBar.isActionModeShowed()) {
-            return;
-        }
+    private void createDeleteMessagesAlert(final MessageObject finalSelectedObject) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", finalSelectedObject != null ? 1 : selectedMessagesIds[0].size() + selectedMessagesIds[1].size())));
+        builder.setTitle(LocaleController.getString("Message", R.string.Message));
+
+        final boolean[] checks = new boolean[3];
+        TLRPC.User user = null;
+        if (currentChat != null && currentChat.megagroup) {
+            if (finalSelectedObject != null) {
+                if (finalSelectedObject.messageOwner.action == null || finalSelectedObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty) {
+                    user = MessagesController.getInstance().getUser(finalSelectedObject.messageOwner.from_id);
+                }
+            } else {
+                int from_id = -1;
+                for (int a = 1; a >= 0; a--) {
+                    int channelId = 0;
+                    for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds[a].entrySet()) {
+                        MessageObject msg = entry.getValue();
+                        if (from_id == -1) {
+                            from_id = msg.messageOwner.from_id;
+                        }
+                        if (from_id < 0 || from_id != msg.messageOwner.from_id) {
+                            from_id = -2;
+                            break;
+                        }
+                    }
+                    if (from_id == -2) {
+                        break;
+                    }
+                }
+                if (from_id != -1) {
+                    user = MessagesController.getInstance().getUser(from_id);
+                }
+            }
+            if (user != null && user.id != UserConfig.getClientUserId()) {
+                FrameLayout frameLayout = new FrameLayout(getParentActivity());
+                if (Build.VERSION.SDK_INT >= 21) {
+                    frameLayout.setPadding(0, AndroidUtilities.dp(8), 0, 0);
+                }
+                for (int a = 0; a < 3; a++) {
+                    CheckBoxCell cell = new CheckBoxCell(getParentActivity());
+                    cell.setBackgroundResource(R.drawable.list_selector);
+                    cell.setTag(a);
+                    if (Build.VERSION.SDK_INT < 11) {
+                        cell.setTextColor(0xffffffff);
+                    }
+                    if (a == 0) {
+                        cell.setText(LocaleController.getString("DeleteBanUser", R.string.DeleteBanUser), "", false, false);
+                    } else if (a == 1) {
+                        cell.setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), "", false, false);
+                    } else if (a == 2) {
+                        cell.setText(LocaleController.formatString("DeleteAllFrom", R.string.DeleteAllFrom, ContactsController.formatName(user.first_name, user.last_name)), "", false, false);
+                    }
+                    cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8), 0);
+                    frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 8, 48 * a, 8, 0));
+                    cell.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            CheckBoxCell cell = (CheckBoxCell) v;
+                            Integer num = (Integer) cell.getTag();
+                            checks[num] = !checks[num];
+                            cell.setChecked(checks[num], true);
+                        }
+                    });
+                }
+                builder.setView(frameLayout);
+            } else {
+                user = null;
+            }
+        }
+        final TLRPC.User userFinal = user;
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                ArrayList<Integer> ids = null;
+                if (finalSelectedObject != null) {
+                    ids = new ArrayList<>();
+                    ids.add(finalSelectedObject.getId());
+                    ArrayList<Long> random_ids = null;
+                    if (currentEncryptedChat != null && finalSelectedObject.messageOwner.random_id != 0 && finalSelectedObject.type != 10) {
+                        random_ids = new ArrayList<>();
+                        random_ids.add(finalSelectedObject.messageOwner.random_id);
+                    }
+                    MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, finalSelectedObject.messageOwner.to_id.channel_id);
+                } else {
+                    for (int a = 1; a >= 0; a--) {
+                        ids = new ArrayList<>(selectedMessagesIds[a].keySet());
+                        ArrayList<Long> random_ids = null;
+                        int channelId = 0;
+                        if (!ids.isEmpty()) {
+                            MessageObject msg = selectedMessagesIds[a].get(ids.get(0));
+                            if (channelId == 0 && msg.messageOwner.to_id.channel_id != 0) {
+                                channelId = msg.messageOwner.to_id.channel_id;
+                            }
+                        }
+                        if (currentEncryptedChat != null) {
+                            random_ids = new ArrayList<>();
+                            for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds[a].entrySet()) {
+                                MessageObject msg = entry.getValue();
+                                if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                    random_ids.add(msg.messageOwner.random_id);
+                                }
+                            }
+                        }
+                        MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, channelId);
+                    }
+                    actionBar.hideActionMode();
+                    updatePinnedMessageView(true);
+                }
+                if (userFinal != null) {
+                    if (checks[0]) {
+                        MessagesController.getInstance().deleteUserFromChat(currentChat.id, userFinal, info);
+                    }
+                    if (checks[1]) {
+                        TLRPC.TL_channels_reportSpam req = new TLRPC.TL_channels_reportSpam();
+                        req.channel = MessagesController.getInputChannel(currentChat);
+                        req.user_id = MessagesController.getInputUser(userFinal);
+                        req.id = ids;
+                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+
+                            }
+                        });
+                    }
+                    if (checks[2]) {
+                        MessagesController.getInstance().deleteUserChannelHistory(currentChat, userFinal, 0);
+                    }
+                }
+            }
+        });
+        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+        showDialog(builder.create());
+    }
+
+    private void createMenu(View v, boolean single) {
+        if (actionBar.isActionModeShowed()) {
+            return;
+        }
 
         MessageObject message = null;
         if (v instanceof ChatBaseCell) {
@@ -6177,10 +6836,14 @@ private void createMenu(View v, boolean single) {
             return;
         }
         final int type = getMessageType(message);
-        if (channelMessagesImportant == 2 && message.getId() == 0 && message.contentType == 4 && message.type == 10 && message.messageOwner.from_id != 0) {
+        if (channelMessagesImportant == 2 && message.getId() == 0 && message.contentType == 1 && message.type == 10 && message.messageOwner.from_id != 0) {
             switchImportantMode(message);
             return;
         }
+        if (single && message.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
+            scrollToMessageId(message.messageOwner.reply_to_msg_id, 0, true, 0);
+            return;
+        }
 
         selectedObject = null;
         forwaringMessage = null;
@@ -6190,8 +6853,12 @@ private void createMenu(View v, boolean single) {
         }
         cantDeleteMessagesCount = 0;
         actionBar.hideActionMode();
+        updatePinnedMessageView(true);
 
         boolean allowChatActions = true;
+        boolean allowPin = message.getDialogId() != mergeDialogId && message.getId() > 0 && ChatObject.isChannel(currentChat) && currentChat.megagroup && (currentChat.creator || currentChat.editor) && (message.messageOwner.action == null || message.messageOwner.action instanceof TLRPC.TL_messageActionEmpty);
+        boolean allowUnpin = message.getDialogId() != mergeDialogId && info != null && info.pinned_msg_id == message.getId() && (currentChat.creator || currentChat.editor);
+        boolean allowEdit = message.canEditMessage(currentChat) && !chatActivityEnterView.hasAudioToSend();
         if (currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 46 || type == 1 && message.getDialogId() == mergeDialogId || currentEncryptedChat == null && message.getId() < 0 || isBroadcast || currentChat != null && (ChatObject.isNotInChat(currentChat) || ChatObject.isChannel(currentChat) && !currentChat.creator && !currentChat.editor && !currentChat.megagroup)) {
             allowChatActions = false;
         }
@@ -6218,7 +6885,14 @@ private void createMenu(View v, boolean single) {
                             items.add(LocaleController.getString("Reply", R.string.Reply));
                             options.add(8);
                         }
-                        if (message.canEditMessage(currentChat)) {
+                        if (allowUnpin) {
+                            items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
+                            options.add(14);
+                        } else if (allowPin) {
+                            items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
+                            options.add(13);
+                        }
+                        if (allowEdit) {
                             items.add(LocaleController.getString("Edit", R.string.Edit));
                             options.add(12);
                         }
@@ -6245,9 +6919,11 @@ private void createMenu(View v, boolean single) {
                             items.add(LocaleController.getString("Reply", R.string.Reply));
                             options.add(8);
                         }
-                        if (type == 3) {
+                        if (selectedObject.type == 0 || selectedObject.caption != null) {
                             items.add(LocaleController.getString("Copy", R.string.Copy));
                             options.add(3);
+                        }
+                        if (type == 3) {
                             if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage && MessageObject.isNewGifDocument(selectedObject.messageOwner.media.webpage.document)) {
                                 items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                 options.add(11);
@@ -6258,12 +6934,17 @@ private void createMenu(View v, boolean single) {
                                 options.add(4);
                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                 options.add(6);
-                            } else if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                if (MessageObject.isNewGifDocument(selectedObject.messageOwner.media.document)) {
+                            } else if (selectedObject.isMusic()) {
+                                items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
+                                options.add(10);
+                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
+                                options.add(6);
+                            } else if (selectedObject.getDocument() != null) {
+                                if (MessageObject.isNewGifDocument(selectedObject.getDocument())) {
                                     items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                     options.add(11);
                                 }
-                                items.add(selectedObject.isMusic() ? LocaleController.getString("SaveToMusic", R.string.SaveToMusic) : LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
+                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                 options.add(10);
                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                 options.add(6);
@@ -6279,17 +6960,36 @@ private void createMenu(View v, boolean single) {
                         } else if (type == 6) {
                             items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                             options.add(7);
-                            items.add(selectedObject.isMusic() ? LocaleController.getString("SaveToMusic", R.string.SaveToMusic) : LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
+                            items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                             options.add(10);
                             items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                             options.add(6);
                         } else if (type == 7) {
                             items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                             options.add(9);
+                        } else if (type == 8) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(selectedObject.messageOwner.media.user_id);
+                            if (user != null && user.id != UserConfig.getClientUserId() && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                                items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
+                                options.add(15);
+                            }
+                            if (selectedObject.messageOwner.media.phone_number != null || selectedObject.messageOwner.media.phone_number.length() != 0) {
+                                items.add(LocaleController.getString("Copy", R.string.Copy));
+                                options.add(16);
+                                items.add(LocaleController.getString("Call", R.string.Call));
+                                options.add(17);
+                            }
                         }
                         items.add(LocaleController.getString("Forward", R.string.Forward));
                         options.add(2);
-                        if (message.canEditMessage(currentChat)) {
+                        if (allowUnpin) {
+                            items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
+                            options.add(14);
+                        } else if (allowPin) {
+                            items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
+                            options.add(13);
+                        }
+                        if (allowEdit) {
                             items.add(LocaleController.getString("Edit", R.string.Edit));
                             options.add(12);
                         }
@@ -6302,17 +7002,23 @@ private void createMenu(View v, boolean single) {
                             items.add(LocaleController.getString("Reply", R.string.Reply));
                             options.add(8);
                         }
-                        if (type == 3) {
+                        if (selectedObject.type == 0 || selectedObject.caption != null) {
                             items.add(LocaleController.getString("Copy", R.string.Copy));
                             options.add(3);
-                        } else if (type == 4) {
+                        }
+                        if (type == 4) {
                             if (selectedObject.isVideo()) {
                                 items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                 options.add(4);
                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                 options.add(6);
-                            } else if (!selectedObject.isVideo() && selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                items.add(selectedObject.isMusic() ? LocaleController.getString("SaveToMusic", R.string.SaveToMusic) : LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
+                            } else if (selectedObject.isMusic()) {
+                                items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
+                                options.add(10);
+                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
+                                options.add(6);
+                            } else if (!selectedObject.isVideo() && selectedObject.getDocument() != null) {
+                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                 options.add(10);
                                 items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                 options.add(6);
@@ -6367,6 +7073,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
         }
 
         actionBar.showActionMode();
+        updatePinnedMessageView(true);
 
         if (Build.VERSION.SDK_INT >= 11) {
             AnimatorSetProxy animatorSet = new AnimatorSetProxy();
@@ -6390,263 +7097,341 @@ private void processSelectedOption(int option) {
         if (selectedObject == null) {
             return;
         }
-        if (option == 0) {
-            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
-                moveScrollToLastMessage();
-            }
-        } else if (option == 1) {
-            if (getParentActivity() == null) {
-                selectedObject = null;
-                return;
-            }
-            final MessageObject finalSelectedObject = selectedObject;
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", 1)));
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    ArrayList<Integer> ids = new ArrayList<>();
-                    ids.add(finalSelectedObject.getId());
-                    removeUnreadPlane();
-                    ArrayList<Long> random_ids = null;
-                    if (currentEncryptedChat != null && finalSelectedObject.messageOwner.random_id != 0 && finalSelectedObject.type != 10) {
-                        random_ids = new ArrayList<>();
-                        random_ids.add(finalSelectedObject.messageOwner.random_id);
-                    }
-                    MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat, finalSelectedObject.messageOwner.to_id.channel_id);
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-        } else if (option == 2) {
-            forwaringMessage = selectedObject;
-            Bundle args = new Bundle();
-            args.putBoolean("onlySelect", true);
-            args.putInt("dialogsType", 1);
-            DialogsActivity fragment = new DialogsActivity(args);
-            fragment.setDelegate(this);
-            presentFragment(fragment);
-        } else if (option == 3) {
-            try {
-                if (Build.VERSION.SDK_INT < 11) {
-                    android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                    clipboard.setText(selectedObject.messageText);
-                } else {
-                    android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                    android.content.ClipData clip = android.content.ClipData.newPlainText("label", selectedObject.messageText);
-                    clipboard.setPrimaryClip(clip);
-                }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
-        } else if (option == 4) {
-            String path = selectedObject.messageOwner.attachPath;
-            if (path != null && path.length() > 0) {
-                File temp = new File(path);
-                if (!temp.exists()) {
-                    path = null;
+        switch (option) {
+            case 0: {
+                if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
+                    moveScrollToLastMessage();
                 }
+                break;
             }
-            if (path == null || path.length() == 0) {
-                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
-            }
-            if (selectedObject.type == 3 || selectedObject.type == 1) {
-                if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
-                    getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
+            case 1: {
+                if (getParentActivity() == null) {
                     selectedObject = null;
                     return;
                 }
-                MediaController.saveFile(path, getParentActivity(), selectedObject.type == 3 ? 1 : 0, null);
+                createDeleteMessagesAlert(selectedObject);
+                break;
             }
-        } else if (option == 5) {
-            File locFile = null;
-            if (selectedObject.messageOwner.attachPath != null && selectedObject.messageOwner.attachPath.length() != 0) {
-                File f = new File(selectedObject.messageOwner.attachPath);
-                if (f.exists()) {
-                    locFile = f;
-                }
+            case 2: {
+                forwaringMessage = selectedObject;
+                Bundle args = new Bundle();
+                args.putBoolean("onlySelect", true);
+                args.putInt("dialogsType", 1);
+                DialogsActivity fragment = new DialogsActivity(args);
+                fragment.setDelegate(this);
+                presentFragment(fragment);
+                break;
             }
-            if (locFile == null) {
-                File f = FileLoader.getPathToMessage(selectedObject.messageOwner);
-                if (f.exists()) {
-                    locFile = f;
+            case 3: {
+                try {
+                    CharSequence str;
+                    if (selectedObject.type == 0 && selectedObject.messageOwner.message != null) {
+                        str = selectedObject.messageOwner.message;
+                    } else if (selectedObject.messageOwner.media != null && selectedObject.messageOwner.media.caption != null) {
+                        str = selectedObject.messageOwner.media.caption;
+                    } else {
+                        str = selectedObject.messageText;
+                    }
+                    if (Build.VERSION.SDK_INT < 11) {
+                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        clipboard.setText(str);
+                    } else {
+                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", str);
+                        clipboard.setPrimaryClip(clip);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
+                break;
             }
-            if (locFile != null) {
-                if (LocaleController.getInstance().applyLanguageFile(locFile)) {
-                    presentFragment(new LanguageSelectActivity());
-                } else {
-                    if (getParentActivity() == null) {
+            case 4: {
+                String path = selectedObject.messageOwner.attachPath;
+                if (path != null && path.length() > 0) {
+                    File temp = new File(path);
+                    if (!temp.exists()) {
+                        path = null;
+                    }
+                }
+                if (path == null || path.length() == 0) {
+                    path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+                }
+                if (selectedObject.type == 3 || selectedObject.type == 1) {
+                    if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                        getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
                         selectedObject = null;
                         return;
                     }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
-                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                    showDialog(builder.create());
+                    MediaController.saveFile(path, getParentActivity(), selectedObject.type == 3 ? 1 : 0, null, null);
                 }
+                break;
             }
-        } else if (option == 6) {
-            String path = selectedObject.messageOwner.attachPath;
-            if (path != null && path.length() > 0) {
-                File temp = new File(path);
-                if (!temp.exists()) {
-                    path = null;
+            case 5: {
+                File locFile = null;
+                if (selectedObject.messageOwner.attachPath != null && selectedObject.messageOwner.attachPath.length() != 0) {
+                    File f = new File(selectedObject.messageOwner.attachPath);
+                    if (f.exists()) {
+                        locFile = f;
+                    }
                 }
-            }
-            if (path == null || path.length() == 0) {
-                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
-            }
-            Intent intent = new Intent(Intent.ACTION_SEND);
-            intent.setType(selectedObject.messageOwner.media.document.mime_type);
-            intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(path)));
-            getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
-        } else if (option == 7) {
-            String path = selectedObject.messageOwner.attachPath;
-            if (path != null && path.length() > 0) {
-                File temp = new File(path);
-                if (!temp.exists()) {
-                    path = null;
+                if (locFile == null) {
+                    File f = FileLoader.getPathToMessage(selectedObject.messageOwner);
+                    if (f.exists()) {
+                        locFile = f;
+                    }
+                }
+                if (locFile != null) {
+                    if (LocaleController.getInstance().applyLanguageFile(locFile)) {
+                        presentFragment(new LanguageSelectActivity());
+                    } else {
+                        if (getParentActivity() == null) {
+                            selectedObject = null;
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                        showDialog(builder.create());
+                    }
                 }
+                break;
             }
-            if (path == null || path.length() == 0) {
-                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+            case 6: {
+                String path = selectedObject.messageOwner.attachPath;
+                if (path != null && path.length() > 0) {
+                    File temp = new File(path);
+                    if (!temp.exists()) {
+                        path = null;
+                    }
+                }
+                if (path == null || path.length() == 0) {
+                    path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+                }
+                Intent intent = new Intent(Intent.ACTION_SEND);
+                intent.setType(selectedObject.getDocument().mime_type);
+                intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(path)));
+                getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
+                break;
             }
-            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
-                getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
-                selectedObject = null;
-                return;
+            case 7: {
+                String path = selectedObject.messageOwner.attachPath;
+                if (path != null && path.length() > 0) {
+                    File temp = new File(path);
+                    if (!temp.exists()) {
+                        path = null;
+                    }
+                }
+                if (path == null || path.length() == 0) {
+                    path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+                }
+                if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                    getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
+                    selectedObject = null;
+                    return;
+                }
+                MediaController.saveFile(path, getParentActivity(), 0, null, null);
+                break;
             }
-            MediaController.saveFile(path, getParentActivity(), 0, null);
-        } else if (option == 8) {
-            showReplyPanel(true, selectedObject, null, null, false, true);
-        } else if (option == 9) {
-            StickersQuery.loadStickers(this, selectedObject.getInputStickerSet());
-        } else if (option == 10) {
-            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
-                getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
-                selectedObject = null;
-                return;
+            case 8: {
+                showReplyPanel(true, selectedObject, null, null, false, true);
+                break;
             }
-            String fileName = FileLoader.getDocumentFileName(selectedObject.messageOwner.media.document);
-            if (fileName == null || fileName.length() == 0) {
-                fileName = selectedObject.getFileName();
+            case 9: {
+                showDialog(new StickersAlert(getParentActivity(), selectedObject.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE ? chatActivityEnterView : null));
+                break;
             }
-            String path = selectedObject.messageOwner.attachPath;
-            if (path != null && path.length() > 0) {
-                File temp = new File(path);
-                if (!temp.exists()) {
-                    path = null;
+            case 10: {
+                if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                    getParentActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 4);
+                    selectedObject = null;
+                    return;
+                }
+                String fileName = FileLoader.getDocumentFileName(selectedObject.getDocument());
+                if (fileName == null || fileName.length() == 0) {
+                    fileName = selectedObject.getFileName();
+                }
+                String path = selectedObject.messageOwner.attachPath;
+                if (path != null && path.length() > 0) {
+                    File temp = new File(path);
+                    if (!temp.exists()) {
+                        path = null;
+                    }
                 }
+                if (path == null || path.length() == 0) {
+                    path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+                }
+                MediaController.saveFile(path, getParentActivity(), selectedObject.isMusic() ? 3 : 2, fileName, selectedObject.getDocument() != null ? selectedObject.getDocument().mime_type : "");
+                break;
             }
-            if (path == null || path.length() == 0) {
-                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+            case 11: {
+                MediaController.SearchImage searchImage = MessagesController.getInstance().saveGif(selectedObject.getDocument());
+                showGifHint();
+                chatActivityEnterView.addRecentGif(searchImage);
+                break;
             }
-            MediaController.saveFile(path, getParentActivity(), selectedObject.isMusic() ? 3 : 2, fileName);
-        } else if (option == 11) {
-            MediaController.SearchImage searchImage = new MediaController.SearchImage();
-            searchImage.type = 2;
-            if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
-                searchImage.document = selectedObject.messageOwner.media.webpage.document;
-            } else {
-                searchImage.document = selectedObject.messageOwner.media.document;
-            }
-            searchImage.date = (int) (System.currentTimeMillis() / 1000);
-            searchImage.id = "" + searchImage.document.id;
-
-            ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
-            arrayList.add(searchImage);
-            MessagesStorage.getInstance().putWebRecent(arrayList);
-            TLRPC.TL_messages_saveGif req = new TLRPC.TL_messages_saveGif();
-            req.id = new TLRPC.TL_inputDocument();
-            req.id.id = searchImage.document.id;
-            req.id.access_hash = searchImage.document.access_hash;
-            req.unsave = false;
-            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(TLObject response, TLRPC.TL_error error) {
-
+            case 12: {
+                if (getParentActivity() == null) {
+                    selectedObject = null;
+                    return;
                 }
-            });
-            showGifHint();
+                final MessageObject editingMessageObject = selectedObject;
+                final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+                progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                progressDialog.setCanceledOnTouchOutside(false);
+                progressDialog.setCancelable(false);
 
-            chatActivityEnterView.addRecentGif(searchImage);
-        } else if (option == 12) {
-            if (getParentActivity() == null) {
-                selectedObject = null;
-                return;
-            }
-            final MessageObject editingMessageObject = selectedObject;
-            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
-            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-            progressDialog.setCanceledOnTouchOutside(false);
-            progressDialog.setCancelable(false);
-
-            TLRPC.TL_channels_getMessageEditData req = new TLRPC.TL_channels_getMessageEditData();
-            req.channel = MessagesController.getInputChannel(currentChat);
-            req.id = selectedObject.getId();
-            final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(final TLObject response, TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                if (!getParentActivity().isFinishing()) {
-                                    progressDialog.dismiss();
+                TLRPC.TL_messages_getMessageEditData req = new TLRPC.TL_messages_getMessageEditData();
+                req.peer = MessagesController.getInputPeer((int) dialog_id);
+                req.id = selectedObject.getId();
+                final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                    @Override
+                    public void run(final TLObject response, TLRPC.TL_error error) {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                try {
+                                    if (!getParentActivity().isFinishing()) {
+                                        progressDialog.dismiss();
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
                                 }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            if (response != null) {
-                                TLRPC.TL_channels_messageEditData res = (TLRPC.TL_channels_messageEditData) response;
-                                if (mentionsAdapter != null) {
-                                    mentionsAdapter.setNeedBotContext(false);
-                                    chatListView.setOnItemLongClickListener(null);
-                                    chatListView.setOnItemClickListener(null);
-                                    chatListView.setClickable(false);
-                                    chatListView.setLongClickable(false);
-                                    chatActivityEnterView.setEditinigMessageObject(editingMessageObject, res.caption);
-                                    actionModeTextView.setVisibility(View.VISIBLE);
-                                    selectedMessagesCountTextView.setVisibility(View.GONE);
-
-                                    chatActivityEnterView.setAllowStickersAndGifs(false, false);
-                                    final ActionBarMenu actionMode = actionBar.createActionMode();
-                                    actionMode.getItem(reply).setVisibility(View.GONE);
-                                    actionMode.getItem(copy).setVisibility(View.GONE);
-                                    actionMode.getItem(forward).setVisibility(View.GONE);
-                                    actionMode.getItem(delete).setVisibility(View.GONE);
-                                    actionMode.getItem(edit_done).setVisibility(View.VISIBLE);
-                                    actionBar.showActionMode();
+                                if (response != null) {
+                                    TLRPC.TL_messages_messageEditData res = (TLRPC.TL_messages_messageEditData) response;
+                                    if (mentionsAdapter != null) {
+                                        mentionsAdapter.setNeedBotContext(false);
+                                        chatListView.setOnItemLongClickListener(null);
+                                        chatListView.setOnItemClickListener(null);
+                                        chatListView.setClickable(false);
+                                        chatListView.setLongClickable(false);
+                                        chatActivityEnterView.setEditinigMessageObject(editingMessageObject, res.caption);
+                                        actionModeTextView.setVisibility(View.VISIBLE);
+                                        selectedMessagesCountTextView.setVisibility(View.GONE);
+
+                                        chatActivityEnterView.setAllowStickersAndGifs(false, false);
+                                        final ActionBarMenu actionMode = actionBar.createActionMode();
+                                        actionMode.getItem(reply).setVisibility(View.GONE);
+                                        actionMode.getItem(copy).setVisibility(View.GONE);
+                                        actionMode.getItem(forward).setVisibility(View.GONE);
+                                        actionMode.getItem(delete).setVisibility(View.GONE);
+                                        actionMode.getItem(edit_done).setVisibility(View.VISIBLE);
+                                        actionBar.showActionMode();
+                                        updatePinnedMessageView(true);
+                                    }
+                                } else {
+                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                    builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
+                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                                    showDialog(builder.create());
                                 }
-                            } else {
-                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
-                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                                showDialog(builder.create());
                             }
+                        });
+                    }
+                });
+                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                        try {
+                            dialog.dismiss();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
                         }
-                    });
+                    }
+                });
+                try {
+                    progressDialog.show();
+                } catch (Exception e) {
+                    //don't promt
                 }
-            });
-            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    ConnectionsManager.getInstance().cancelRequest(reqId, true);
-                    try {
-                        dialog.dismiss();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
+                break;
+            }
+            case 13: {
+                final int mid = selectedObject.getId();
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
+
+                final boolean[] checks = new boolean[]{true};
+                FrameLayout frameLayout = new FrameLayout(getParentActivity());
+                if (Build.VERSION.SDK_INT >= 21) {
+                    frameLayout.setPadding(0, AndroidUtilities.dp(8), 0, 0);
+                }
+                CheckBoxCell cell = new CheckBoxCell(getParentActivity());
+                cell.setBackgroundResource(R.drawable.list_selector);
+                if (Build.VERSION.SDK_INT < 11) {
+                    cell.setTextColor(0xffffffff);
+                }
+                cell.setText(LocaleController.getString("PinNotify", R.string.PinNotify), "", true, false);
+                cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8), 0);
+                frameLayout.addView(cell, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.TOP | Gravity.LEFT, 8, 0, 8, 0));
+                cell.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        CheckBoxCell cell = (CheckBoxCell) v;
+                        checks[0] = !checks[0];
+                        cell.setChecked(checks[0], true);
+                    }
+                });
+                builder.setView(frameLayout);
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        MessagesController.getInstance().pinChannelMessage(currentChat, mid, checks[0]);
+                    }
+                });
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder.create());
+                break;
+            }
+            case 14: {
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        MessagesController.getInstance().pinChannelMessage(currentChat, 0, false);
+                    }
+                });
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder.create());
+                break;
+            }
+            case 15: {
+                Bundle args = new Bundle();
+                args.putInt("user_id", selectedObject.messageOwner.media.user_id);
+                args.putString("phone", selectedObject.messageOwner.media.phone_number);
+                args.putBoolean("addContact", true);
+                presentFragment(new ContactAddActivity(args));
+                break;
+            }
+            case 16: {
+                try {
+                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
+                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        clipboard.setText(selectedObject.messageOwner.media.phone_number);
+                    } else {
+                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", selectedObject.messageOwner.media.phone_number);
+                        clipboard.setPrimaryClip(clip);
                     }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
-            });
-            try {
-                progressDialog.show();
-            } catch (Exception e) {
-                //don't promt
+                break;
+            }
+            case 17: {
+                try {
+                    Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + selectedObject.messageOwner.media.phone_number));
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    getParentActivity().startActivityForResult(intent, 500);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                break;
             }
         }
         selectedObject = null;
@@ -6675,6 +7460,7 @@ public void didSelectDialog(DialogsActivity activity, long did, boolean param) {
                 }
                 cantDeleteMessagesCount = 0;
                 actionBar.hideActionMode();
+                updatePinnedMessageView(true);
             }
 
             if (did != dialog_id) {
@@ -6687,6 +7473,10 @@ public void didSelectDialog(DialogsActivity activity, long did, boolean param) {
                     } else if (lower_part < 0) {
                         args.putInt("chat_id", -lower_part);
                     }
+                    if (!MessagesController.checkCanOpenChat(args, activity)) {
+                        return;
+                    }
+
                     ChatActivity chatActivity = new ChatActivity(args);
                     if (presentFragment(chatActivity, true)) {
                         chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
@@ -6705,6 +7495,7 @@ public void didSelectDialog(DialogsActivity activity, long did, boolean param) {
                 showReplyPanel(true, null, fmessages, null, false, AndroidUtilities.isTablet());
                 if (AndroidUtilities.isTablet()) {
                     actionBar.hideActionMode();
+                    updatePinnedMessageView(true);
                 }
                 updateVisibleRows();
             }
@@ -6720,6 +7511,7 @@ public boolean onBackPressed() {
             }
             chatActivityEnterView.setEditinigMessageObject(null, false);
             actionBar.hideActionMode();
+            updatePinnedMessageView(true);
             cantDeleteMessagesCount = 0;
             updateVisibleRows();
             return false;
@@ -6730,34 +7522,6 @@ public boolean onBackPressed() {
         return true;
     }
 
-    public boolean isGoogleMapsInstalled() {
-        try {
-            ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
-            return true;
-        } catch (PackageManager.NameNotFoundException e) {
-            if (getParentActivity() == null) {
-                return false;
-            }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setMessage("Install Google Maps?");
-            builder.setCancelable(true);
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
-                    try {
-                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.google.android.apps.maps"));
-                        getParentActivity().startActivityForResult(intent, 500);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-            return false;
-        }
-    }
-
     private void updateVisibleRows() {
         if (chatListView == null) {
             return;
@@ -6786,6 +7550,9 @@ private void updateVisibleRows() {
                 cell.setMessageObject(cell.getMessageObject());
                 cell.setCheckPressed(!disableSelection, disableSelection && selected);
                 cell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().getId() == highlightMessageId);
+            } else if (view instanceof ChatActionCell) {
+                ChatActionCell cell = (ChatActionCell) view;
+                cell.setMessageObject(cell.getMessageObject());
             }
         }
     }
@@ -6816,7 +7583,7 @@ private void alertUserOpenError(MessageObject message) {
         if (message.type == 3) {
             builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
         } else {
-            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.messageOwner.media.document.mime_type));
+            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
         }
         showDialog(builder.create());
     }
@@ -6845,6 +7612,26 @@ public void updatePhotoAtIndex(int index) {
 
     }
 
+    public boolean isSecretChat() {
+        return currentEncryptedChat != null;
+    }
+
+    public TLRPC.User getCurrentUser() {
+        return currentUser;
+    }
+
+    public TLRPC.Chat getCurrentChat() {
+        return currentChat;
+    }
+
+    public TLRPC.EncryptedChat getCurrentEncryptedChat() {
+        return currentEncryptedChat;
+    }
+
+    public TLRPC.ChatFull getCurrentChatInfo() {
+        return info;
+    }
+
     @Override
     public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
         if (messageObject == null) {
@@ -6882,6 +7669,9 @@ public void updatePhotoAtIndex(int index) {
                 object.imageReceiver = imageReceiver;
                 object.thumb = imageReceiver.getBitmap();
                 object.radius = imageReceiver.getRoundRadius();
+                if (pinnedMessageView != null && pinnedMessageView.getTag() == null || reportSpamView != null && reportSpamView.getTag() == null) {
+                    object.clipTopAddition = AndroidUtilities.dp(48);
+                }
                 return object;
             }
         }
@@ -6924,6 +7714,24 @@ public int getSelectedCount() {
         return 0;
     }
 
+    public void showOpenUrlAlert(final String url) {
+        if (Browser.isInternalUrl(url)) {
+            Browser.openUrl(getParentActivity(), url, inlineReturn == 0);
+        } else {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setMessage(LocaleController.formatString("OpenUrlAlert", R.string.OpenUrlAlert, url));
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    Browser.openUrl(getParentActivity(), url, inlineReturn == 0);
+                }
+            });
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+            showDialog(builder.create());
+        }
+    }
+
     public class ChatActivityAdapter extends RecyclerView.Adapter {
 
         private Context mContext;
@@ -6996,68 +7804,29 @@ public long getItemId(int i) {
                 } else {
                     view = new ChatMessageCell(mContext);
                 }
-            } else if (viewType == 1) {
-                if (!chatMediaCellsCache.isEmpty()) {
-                    view = chatMediaCellsCache.get(0);
-                    chatMediaCellsCache.remove(0);
-                } else {
-                    view = new ChatMediaCell(mContext);
-                }
-            } else if (viewType == 2) {
-                view = new ChatAudioCell(mContext);
-                ((ChatAudioCell) view).setAudioDelegate(new ChatAudioCell.ChatAudioCellDelegate() {
-                    @Override
-                    public boolean needPlayAudio(MessageObject messageObject) {
-                        boolean result = MediaController.getInstance().playAudio(messageObject);
-                        MediaController.getInstance().setVoiceMessagesPlaylist(result ? createVoiceMessagesPlaylist(messageObject, false) : null, false);
-                        return result;
-                    }
-                });
-            } else if (viewType == 3) {
-                view = new ChatContactCell(mContext);
-            } else if (viewType == 4) {
-                view = new ChatActionCell(mContext);
-            } else if (viewType == 5) {
-                view = new ChatLoadingCell(mContext);
-            } else if (viewType == 6) {
-                view = new ChatUnreadCell(mContext);
-            } else if (viewType == 7) {
-                view = new BotHelpCell(mContext);
-                ((BotHelpCell) view).setDelegate(new BotHelpCell.BotHelpCellDelegate() {
-                    @Override
-                    public void didPressUrl(String url) {
-                        if (url.startsWith("@")) {
-                            MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
-                        } else if (url.startsWith("#")) {
-                            DialogsActivity fragment = new DialogsActivity(null);
-                            fragment.setSearchString(url);
-                            presentFragment(fragment);
-                        } else if (url.startsWith("/")) {
-                            chatActivityEnterView.setCommand(null, url, false, false);
-                        }
-                    }
-                });
-            } else if (viewType == 8) {
-                view = new ChatMusicCell(mContext);
-            }
-
-            if (view instanceof ChatBaseCell) {
-                if (currentEncryptedChat == null) {
-                    ((ChatBaseCell) view).setAllowAssistant(true);
-                }
-                ((ChatBaseCell) view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
+                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
+                chatMessageCell.setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
                     @Override
-                    public void didPressShare(ChatBaseCell cell) {
+                    public void didPressedShare(ChatBaseCell cell) {
                         if (getParentActivity() == null) {
                             return;
                         }
                         if (chatActivityEnterView != null) {
                             chatActivityEnterView.closeKeyboard();
                         }
-                        BottomSheet.Builder builder = new BottomSheet.Builder(mContext, true);
-                        builder.setCustomView(new ShareFrameLayout(mContext, builder.create(), cell.getMessageObject(), ChatObject.isChannel(currentChat) && !currentChat.megagroup && currentChat.username != null && currentChat.username.length() > 0)).setApplyTopPaddings(false);
-                        builder.setUseFullWidth(false);
-                        showDialog(builder.create());
+                        showDialog(new ShareAlert(mContext, cell.getMessageObject(), ChatObject.isChannel(currentChat) && !currentChat.megagroup && currentChat.username != null && currentChat.username.length() > 0));
+                    }
+
+                    @Override
+                    public boolean needPlayAudio(MessageObject messageObject) {
+                        if (messageObject.isVoice()) {
+                            boolean result = MediaController.getInstance().playAudio(messageObject);
+                            MediaController.getInstance().setVoiceMessagesPlaylist(result ? createVoiceMessagesPlaylist(messageObject, false) : null, false);
+                            return result;
+                        } else if (messageObject.isMusic()) {
+                            return MediaController.getInstance().setPlaylist(messages, messageObject);
+                        }
+                        return false;
                     }
 
                     @Override
@@ -7072,10 +7841,17 @@ public void didPressedChannelAvatar(ChatBaseCell cell, TLRPC.Chat chat, int post
                             if (postId != 0) {
                                 args.putInt("message_id", postId);
                             }
-                            presentFragment(new ChatActivity(args), true);
+                            if (MessagesController.checkCanOpenChat(args, ChatActivity.this)) {
+                                presentFragment(new ChatActivity(args), true);
+                            }
                         }
                     }
 
+                    @Override
+                    public void didPressedOther(ChatBaseCell cell) {
+                        createMenu(cell, true);
+                    }
+
                     @Override
                     public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
                         if (actionBar.isActionModeShowed()) {
@@ -7091,6 +7867,14 @@ public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
                         }
                     }
 
+                    @Override
+                    public void didPressedBotButton(ChatBaseCell cell, TLRPC.KeyboardButton button) {
+                        if (getParentActivity() == null || bottomOverlayChat.getVisibility() == View.VISIBLE && !(button instanceof TLRPC.TL_keyboardButtonCallback) && !(button instanceof TLRPC.TL_keyboardButtonUrl)) {
+                            return;
+                        }
+                        chatActivityEnterView.didPressedBotButton(button, cell.getMessageObject(), cell.getMessageObject());
+                    }
+
                     @Override
                     public void didPressedCancelSendButton(ChatBaseCell cell) {
                         MessageObject message = cell.getMessageObject();
@@ -7110,7 +7894,10 @@ public boolean canPerformActions() {
                     }
 
                     @Override
-                    public void didPressUrl(MessageObject messageObject, final ClickableSpan url, boolean longPress) {
+                    public void didPressedUrl(MessageObject messageObject, final ClickableSpan url, boolean longPress) {
+                        if (url == null) {
+                            return;
+                        }
                         if (url instanceof URLSpanNoUnderline) {
                             String str = ((URLSpanNoUnderline) url).getURL();
                             if (str.startsWith("@")) {
@@ -7137,7 +7924,7 @@ public void didPressUrl(MessageObject messageObject, final ClickableSpan url, bo
                                     @Override
                                     public void onClick(DialogInterface dialog, final int which) {
                                         if (which == 0) {
-                                            AndroidUtilities.openUrl(getParentActivity(), urlFinal);
+                                            Browser.openUrl(getParentActivity(), urlFinal, inlineReturn == 0);
                                         } else if (which == 1) {
                                             try {
                                                 if (Build.VERSION.SDK_INT < 11) {
@@ -7158,23 +7945,9 @@ public void onClick(DialogInterface dialog, final int which) {
                                 showDialog(builder.create());
                             } else {
                                 if (url instanceof URLSpanReplacement) {
-                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                                    builder.setMessage(LocaleController.formatString("OpenUrlAlert", R.string.OpenUrlAlert, ((URLSpanReplacement) url).getURL()));
-                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                                    builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            try {
-                                                AndroidUtilities.openUrl(getParentActivity(), urlFinal);
-                                            } catch (Exception e) {
-                                                FileLog.e("tmessages", e);
-                                            }
-                                        }
-                                    });
-                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                                    showDialog(builder.create());
+                                    showOpenUrlAlert(((URLSpanReplacement) url).getURL());
                                 } else if (url instanceof URLSpan) {
-                                    AndroidUtilities.openUrl(getParentActivity(), urlFinal);
+                                    Browser.openUrl(getParentActivity(), urlFinal, inlineReturn == 0);
                                 } else {
                                     url.onClick(fragmentView);
                                 }
@@ -7183,19 +7956,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
 
                     @Override
-                    public void needOpenWebView(String url, String title, String originalUrl, int w, int h) {
+                    public void needOpenWebView(String url, String title, String description, String originalUrl, int w, int h) {
                         BottomSheet.Builder builder = new BottomSheet.Builder(mContext);
-                        builder.setCustomView(new WebFrameLayout(mContext, builder.create(), title, originalUrl, url, w, h));
+                        builder.setCustomView(new WebFrameLayout(mContext, builder.create(), title, description, originalUrl, url, w, h));
                         builder.setUseFullWidth(true);
                         showDialog(builder.create());
                     }
 
                     @Override
-                    public void didPressReplyMessage(ChatBaseCell cell, int id) {
+                    public void didPressedReplyMessage(ChatBaseCell cell, int id) {
                         MessageObject messageObject = cell.getMessageObject();
                         if (messageObject.replyMessageObject != null && !messageObject.replyMessageObject.isImportant() && channelMessagesImportant == 2) {
                             channelMessagesImportant = 1;
-                            radioButton.setChecked(channelMessagesImportant == 1, false);
+                            avatarContainer.setRadioChecked(true, false);
                         }
                         scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == mergeDialogId ? 1 : 0);
                     }
@@ -7212,7 +7985,7 @@ public void didPressedViaBot(ChatBaseCell cell, String username) {
                     }
 
                     @Override
-                    public void didClickedImage(ChatBaseCell cell) {
+                    public void didPressedImage(ChatBaseCell cell) {
                         MessageObject message = cell.getMessageObject();
                         if (message.isSendError()) {
                             createMenu(cell, false);
@@ -7220,9 +7993,11 @@ public void didClickedImage(ChatBaseCell cell) {
                         } else if (message.isSending()) {
                             return;
                         }
-                        if (message.type == 1 || message.type == 0) {
+                        if (message.type == 13) {
+                            showDialog(new StickersAlert(getParentActivity(), message.getInputStickerSet(), null, bottomOverlayChat.getVisibility() != View.VISIBLE ? chatActivityEnterView : null));
+                        } else if (message.type == 1 || message.type == 0 && !message.isWebpageDocument()) {
                             PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                            PhotoViewer.getInstance().openPhoto(message, message.contentType == 1 ? dialog_id : 0, message.contentType == 1 ? mergeDialogId : 0, ChatActivity.this);
+                            PhotoViewer.getInstance().openPhoto(message, message.type != 0 ? dialog_id : 0, message.type != 0 ? mergeDialogId : 0, ChatActivity.this);
                         } else if (message.type == 3) {
                             sendSecretMessageRead(message);
                             try {
@@ -7240,13 +8015,13 @@ public void didClickedImage(ChatBaseCell cell) {
                                 alertUserOpenError(message);
                             }
                         } else if (message.type == 4) {
-                            if (!isGoogleMapsInstalled()) {
+                            if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                 return;
                             }
                             LocationActivity fragment = new LocationActivity();
                             fragment.setMessageObject(message);
                             presentFragment(fragment);
-                        } else if (message.type == 9) {
+                        } else if (message.type == 9 || message.type == 0) {
                             File f = null;
                             String fileName = message.getFileName();
                             if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
@@ -7259,26 +8034,26 @@ public void didClickedImage(ChatBaseCell cell) {
                                 String realMimeType = null;
                                 try {
                                     Intent intent = new Intent(Intent.ACTION_VIEW);
-                                    if (message.type == 8 || message.type == 9) {
-                                        MimeTypeMap myMime = MimeTypeMap.getSingleton();
-                                        int idx = fileName.lastIndexOf(".");
-                                        if (idx != -1) {
-                                            String ext = fileName.substring(idx + 1);
-                                            realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
-                                            if (realMimeType == null) {
-                                                realMimeType = message.messageOwner.media.document.mime_type;
-                                                if (realMimeType == null || realMimeType.length() == 0) {
-                                                    realMimeType = null;
-                                                }
+                                    MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                    int idx = fileName.lastIndexOf('.');
+                                    if (idx != -1) {
+                                        String ext = fileName.substring(idx + 1);
+                                        realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                        if (realMimeType == null) {
+                                            if (message.type == 9 || message.type == 0) {
+                                                realMimeType = message.getDocument().mime_type;
                                             }
-                                            if (realMimeType != null) {
-                                                intent.setDataAndType(Uri.fromFile(f), realMimeType);
-                                            } else {
-                                                intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                            if (realMimeType == null || realMimeType.length() == 0) {
+                                                realMimeType = null;
                                             }
+                                        }
+                                        if (realMimeType != null) {
+                                            intent.setDataAndType(Uri.fromFile(f), realMimeType);
                                         } else {
                                             intent.setDataAndType(Uri.fromFile(f), "text/plain");
                                         }
+                                    } else {
+                                        intent.setDataAndType(Uri.fromFile(f), "text/plain");
                                     }
                                     if (realMimeType != null) {
                                         try {
@@ -7297,81 +8072,12 @@ public void didClickedImage(ChatBaseCell cell) {
                         }
                     }
                 });
-                if (view instanceof ChatMediaCell) {
-                    ((ChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
-                    ((ChatMediaCell) view).setMediaDelegate(new ChatMediaCell.ChatMediaCellDelegate() {
-                        @Override
-                        public void didPressedOther(ChatMediaCell cell) {
-                            createMenu(cell, true);
-                        }
-                    });
-                } else if (view instanceof ChatContactCell) {
-                    ((ChatContactCell) view).setContactDelegate(new ChatContactCell.ChatContactCellDelegate() {
-                        @Override
-                        public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
-                            if (actionBar.isActionModeShowed()) {
-                                processRowSelect(cell);
-                                return;
-                            }
-                            MessageObject messageObject = cell.getMessageObject();
-                            Bundle args = new Bundle();
-                            args.putInt("user_id", messageObject.messageOwner.media.user_id);
-                            args.putString("phone", messageObject.messageOwner.media.phone_number);
-                            args.putBoolean("addContact", true);
-                            presentFragment(new ContactAddActivity(args));
-                        }
-
-                        @Override
-                        public void didClickPhone(ChatContactCell cell) {
-                            if (actionBar.isActionModeShowed()) {
-                                processRowSelect(cell);
-                                return;
-                            }
-                            final MessageObject messageObject = cell.getMessageObject();
-                            if (getParentActivity() == null || messageObject.messageOwner.media.phone_number == null || messageObject.messageOwner.media.phone_number.length() == 0) {
-                                return;
-                            }
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            if (i == 1) {
-                                                try {
-                                                    Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + messageObject.messageOwner.media.phone_number));
-                                                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                                    getParentActivity().startActivityForResult(intent, 500);
-                                                } catch (Exception e) {
-                                                    FileLog.e("tmessages", e);
-                                                }
-                                            } else if (i == 0) {
-                                                try {
-                                                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
-                                                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                        clipboard.setText(messageObject.messageOwner.media.phone_number);
-                                                    } else {
-                                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", messageObject.messageOwner.media.phone_number);
-                                                        clipboard.setPrimaryClip(clip);
-                                                    }
-                                                } catch (Exception e) {
-                                                    FileLog.e("tmessages", e);
-                                                }
-                                            }
-                                        }
-                                    }
-                            );
-                            showDialog(builder.create());
-                        }
-                    });
-                } else if (view instanceof ChatMusicCell) {
-                    ((ChatMusicCell) view).setMusicDelegate(new ChatMusicCell.ChatMusicCellDelegate() {
-                        @Override
-                        public boolean needPlayMusic(MessageObject messageObject) {
-                            return MediaController.getInstance().setPlaylist(messages, messageObject);
-                        }
-                    });
+                chatMessageCell.setAllowedToSetPhoto(openAnimationEnded);
+                if (currentEncryptedChat == null) {
+                    chatMessageCell.setAllowAssistant(true);
                 }
-            } else if (view instanceof ChatActionCell) {
+            } else if (viewType == 1) {
+                view = new ChatActionCell(mContext);
                 ((ChatActionCell) view).setDelegate(new ChatActionCell.ChatActionCellDelegate() {
                     @Override
                     public void didClickedImage(ChatActionCell cell) {
@@ -7390,7 +8096,9 @@ public void needOpenUserProfile(int uid) {
                         if (uid < 0) {
                             Bundle args = new Bundle();
                             args.putInt("chat_id", -uid);
-                            presentFragment(new ChatActivity(args), true);
+                            if (MessagesController.checkCanOpenChat(args, ChatActivity.this)) {
+                                presentFragment(new ChatActivity(args), true);
+                            }
                         } else if (uid != UserConfig.getClientUserId()) {
                             Bundle args = new Bundle();
                             args.putInt("user_id", uid);
@@ -7403,8 +8111,28 @@ public void needOpenUserProfile(int uid) {
                         }
                     }
                 });
+            } else if (viewType == 2) {
+                view = new ChatUnreadCell(mContext);
+            } else if (viewType == 3) {
+                view = new BotHelpCell(mContext);
+                ((BotHelpCell) view).setDelegate(new BotHelpCell.BotHelpCellDelegate() {
+                    @Override
+                    public void didPressUrl(String url) {
+                        if (url.startsWith("@")) {
+                            MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
+                        } else if (url.startsWith("#")) {
+                            DialogsActivity fragment = new DialogsActivity(null);
+                            fragment.setSearchString(url);
+                            presentFragment(fragment);
+                        } else if (url.startsWith("/")) {
+                            chatActivityEnterView.setCommand(null, url, false, false);
+                        }
+                    }
+                });
+            } else if (viewType == 4) {
+                view = new ChatLoadingCell(mContext);
             }
-
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
             return new Holder(view);
         }
 
@@ -7434,15 +8162,15 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     view.setBackgroundColor(0);
                 }
 
-                if (view instanceof ChatBaseCell) {
-                    ChatBaseCell baseCell = (ChatBaseCell) view;
-                    baseCell.isChat = currentChat != null;
-                    baseCell.setMessageObject(message);
-                    baseCell.setCheckPressed(!disableSelection, disableSelection && selected);
-                    if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
-                        ((ChatAudioCell) view).downloadAudioIfNeed();
-                    }
-                    baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && message.getId() == highlightMessageId);
+                if (view instanceof ChatMessageCell) {
+                    ChatMessageCell messageCell = (ChatMessageCell) view;
+                    messageCell.isChat = currentChat != null;
+                    messageCell.setMessageObject(message);
+                    messageCell.setCheckPressed(!disableSelection, disableSelection && selected);
+                    if (view instanceof ChatMessageCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
+                        ((ChatMessageCell) view).downloadAudioIfNeed();
+                    }
+                    messageCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && message.getId() == highlightMessageId);
                 } else if (view instanceof ChatActionCell) {
                     ChatActionCell actionCell = (ChatActionCell) view;
                     actionCell.setMessageObject(message);
@@ -7455,22 +8183,16 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
 
         @Override
         public int getItemViewType(int position) {
-            if (position == loadingUpRow || position == loadingDownRow) {
-                return 5;
-            } else if (position == botInfoRow) {
-                return 7;
-            } else if (position >= messagesStartRow && position < messagesEndRow) {
+            if (position >= messagesStartRow && position < messagesEndRow) {
                 return messages.get(messages.size() - (position - messagesStartRow) - 1).contentType;
+            } else if (position == botInfoRow) {
+                return 3;
             }
-            return 5;
+            return 4;
         }
 
         @Override
         public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
-            if (holder.itemView instanceof ChatBaseCell) {
-                ChatBaseCell baseCell = (ChatBaseCell) holder.itemView;
-                baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && baseCell.getMessageObject().getId() == highlightMessageId);
-            }
             if (holder.itemView instanceof ChatMessageCell) {
                 final ChatMessageCell messageCell = (ChatMessageCell) holder.itemView;
                 messageCell.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
@@ -7482,6 +8204,7 @@ public boolean onPreDraw() {
                         return true;
                     }
                 });
+                messageCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && messageCell.getMessageObject().getId() == highlightMessageId);
             }
         }
 
@@ -7526,7 +8249,7 @@ public void notifyItemChanged(int position) {
         public void notifyItemRangeChanged(int positionStart, int itemCount) {
             updateRows();
             try {
-            super.notifyItemRangeChanged(positionStart, itemCount);
+                super.notifyItemRangeChanged(positionStart, itemCount);
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
index c77407c64..c9c17d729 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AlertsCreator.java
@@ -14,18 +14,22 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
+import android.os.Bundle;
 
-import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationsController;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
+import org.telegram.messenger.Utilities;
 import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ReportOtherActivity;
 
 public class AlertsCreator {
 
@@ -82,6 +86,68 @@ public void onClick(DialogInterface dialogInterface, int i) {
         return builder.create();
     }
 
+    public static Dialog createReportAlert(Context context, final long dialog_id, final BaseFragment parentFragment) {
+        if (context == null || parentFragment == null) {
+            return null;
+        }
+
+        BottomSheet.Builder builder = new BottomSheet.Builder(context);
+        builder.setTitle(LocaleController.getString("ReportChat", R.string.ReportChat));
+        CharSequence[] items = new CharSequence[]{
+                LocaleController.getString("ReportChatSpam", R.string.ReportChatSpam),
+                LocaleController.getString("ReportChatViolence", R.string.ReportChatViolence),
+                LocaleController.getString("ReportChatPornography", R.string.ReportChatPornography),
+                LocaleController.getString("ReportChatOther", R.string.ReportChatOther)
+        };
+        builder.setItems(items, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (i == 3) {
+                            Bundle args = new Bundle();
+                            args.putLong("dialog_id", dialog_id);
+                            parentFragment.presentFragment(new ReportOtherActivity(args));
+                            return;
+                        }
+                        TLRPC.TL_account_reportPeer req = new TLRPC.TL_account_reportPeer();
+                        req.peer = MessagesController.getInputPeer((int) dialog_id);
+                        if (i == 0) {
+                            req.reason = new TLRPC.TL_inputReportReasonSpam();
+                        } else if (i == 1) {
+                            req.reason = new TLRPC.TL_inputReportReasonViolence();
+                        } else if (i == 2) {
+                            req.reason = new TLRPC.TL_inputReportReasonPornography();
+                        }
+                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+
+                            }
+                        });
+                    }
+                }
+        );
+        return builder.create();
+    }
+
+    public static void showFloodWaitAlert(String error, final BaseFragment fragment) {
+        if (error == null || !error.startsWith("FLOOD_WAIT") || fragment == null || fragment.getParentActivity() == null) {
+            return;
+        }
+        int time = Utilities.parseInt(error);
+        String timeString;
+        if (time < 60) {
+            timeString = LocaleController.formatPluralString("Seconds", time);
+        } else {
+            timeString = LocaleController.formatPluralString("Minutes", time / 60);
+        }
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setMessage(LocaleController.formatString("FloodWaitTime", R.string.FloodWaitTime, timeString));
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        fragment.showDialog(builder.create(), true);
+    }
+
     public static void showAddUserAlert(String error, final BaseFragment fragment, boolean isChannel) {
         if (error == null || fragment == null || fragment.getParentActivity() == null) {
             return;
@@ -94,7 +160,7 @@ public static void showAddUserAlert(String error, final BaseFragment fragment, b
                 builder.setNegativeButton(LocaleController.getString("MoreInfo", R.string.MoreInfo), new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
-                        AndroidUtilities.openUrl(fragment.getParentActivity(), LocaleController.getString("NobodyLikesSpamUrl", R.string.NobodyLikesSpamUrl));
+                        MessagesController.openByUserName("spambot", fragment, 1);
                     }
                 });
                 break;
@@ -145,6 +211,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
             case "USERS_TOO_FEW":
                 builder.setMessage(LocaleController.getString("CreateGroupError", R.string.CreateGroupError));
                 break;
+            case "USER_RESTRICTED":
+                builder.setMessage(LocaleController.getString("UserRestricted", R.string.UserRestricted));
+                break;
+            default:
+                builder.setMessage(error);
+                break;
         }
         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
         fragment.showDialog(builder.create(), true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java
index 098a000a9..649694d7e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AnimatedFileDrawable.java
@@ -9,9 +9,14 @@
 package org.telegram.ui.Components;
 
 import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
 import android.graphics.drawable.Animatable;
 import android.graphics.drawable.BitmapDrawable;
 import android.os.Handler;
@@ -43,8 +48,17 @@
     private boolean decoderCreated;
     private File path;
 
-    private float scaleX = 1f;
-    private float scaleY = 1f;
+    private BitmapShader renderingShader;
+    private BitmapShader nextRenderingShader;
+    private BitmapShader backgroundShader;
+
+    private int roundRadius;
+    private RectF roundRect = new RectF();
+    private RectF bitmapRect = new RectF();
+    private Matrix shaderMatrix = new Matrix();
+
+    private float scaleX = 1.0f;
+    private float scaleY = 1.0f;
     private boolean applyTransformation;
     private final android.graphics.Rect dstRect = new android.graphics.Rect();
     private static final Handler uiHandler = new Handler(Looper.getMainLooper());
@@ -74,11 +88,13 @@ public void run() {
             if (nativePtr == 0) {
                 if (backgroundBitmap != null) {
                     backgroundBitmap.recycle();
+                    backgroundBitmap = null;
                 }
                 return;
             }
             loadFrameTask = null;
             nextRenderingBitmap = backgroundBitmap;
+            nextRenderingShader = backgroundShader;
             if (metaData[2] < lastTimeStamp) {
                 lastTimeStamp = 0;
             }
@@ -107,11 +123,11 @@ public void run() {
                         } catch (Throwable e) {
                             FileLog.e("tmessages", e);
                         }
+                        if (backgroundShader == null && backgroundBitmap != null && roundRadius != 0) {
+                            backgroundShader = new BitmapShader(backgroundBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                        }
                     }
                     if (backgroundBitmap != null) {
-                        /*if (Build.VERSION.SDK_INT >= 14 && Build.VERSION.SDK_INT < 21) {
-                            Utilities.unpinBitmap(backgroundBitmap);
-                        }*/
                         getVideoFrame(nativePtr, backgroundBitmap, metaData);
                     }
                 } catch (Throwable e) {
@@ -197,12 +213,12 @@ public void start() {
         }
         isRunning = true;
         if (renderingBitmap == null) {
-            scheduleNextGetFrame(renderingBitmap);
+            scheduleNextGetFrame();
         }
         runOnUiThread(mStartTask);
     }
 
-    private void scheduleNextGetFrame(Bitmap bitmap) {
+    private void scheduleNextGetFrame() {
         if (loadFrameTask != null || nativePtr == 0 && decoderCreated || destroyWhenDone) {
             return;
         }
@@ -242,12 +258,14 @@ public void draw(Canvas canvas) {
         }
         if (isRunning) {
             if (renderingBitmap == null && nextRenderingBitmap == null) {
-                scheduleNextGetFrame(renderingBitmap);
+                scheduleNextGetFrame();
             } else if (Math.abs(System.currentTimeMillis() - lastFrameTime) >= invalidateAfter) {
                 if (nextRenderingBitmap != null) {
-                    scheduleNextGetFrame(renderingBitmap);
+                    scheduleNextGetFrame();
                     renderingBitmap = nextRenderingBitmap;
+                    renderingShader = nextRenderingShader;
                     nextRenderingBitmap = null;
+                    nextRenderingShader = null;
                     lastFrameTime = System.currentTimeMillis();
                 }
             }
@@ -260,9 +278,33 @@ public void draw(Canvas canvas) {
                 scaleY = (float) dstRect.height() / renderingBitmap.getHeight();
                 applyTransformation = false;
             }
-            canvas.translate(dstRect.left, dstRect.top);
-            canvas.scale(scaleX, scaleY);
-            canvas.drawBitmap(renderingBitmap, 0, 0, getPaint());
+            if (roundRadius != 0) {
+                int bitmapW = renderingBitmap.getWidth();
+                int bitmapH = renderingBitmap.getHeight();
+                float scale = Math.max(scaleX, scaleY);
+
+                if (renderingShader == null) {
+                    renderingShader = new BitmapShader(backgroundBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                }
+                getPaint().setShader(renderingShader);
+                roundRect.set(dstRect);
+                shaderMatrix.reset();
+                if (Math.abs(scaleX - scaleY) > 0.00001f) {
+                    int w = (int) Math.floor(dstRect.width() / scale);
+                    int h = (int) Math.floor(dstRect.height() / scale);
+                    bitmapRect.set((bitmapW - w) / 2, (bitmapH - h) / 2, w, h);
+                    shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.START);
+                } else {
+                    bitmapRect.set(0, 0, renderingBitmap.getWidth(), renderingBitmap.getHeight());
+                    shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                }
+                renderingShader.setLocalMatrix(shaderMatrix);
+                canvas.drawRoundRect(roundRect, roundRadius, roundRadius, getPaint());
+            } else {
+                canvas.translate(dstRect.left, dstRect.top);
+                canvas.scale(scaleX, scaleY);
+                canvas.drawBitmap(renderingBitmap, 0, 0, getPaint());
+            }
             if (isRunning) {
                 uiHandler.postDelayed(mInvalidateTask, invalidateAfter);
             }
@@ -288,6 +330,11 @@ public Bitmap getAnimatedBitmap() {
         return null;
     }
 
+    public void setRoundRadius(int value) {
+        roundRadius = value;
+        getPaint().setFlags(Paint.ANTI_ALIAS_FLAG);
+    }
+
     public boolean hasBitmap() {
         return nativePtr != 0 && (renderingBitmap != null || nextRenderingBitmap != null);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 22694ce13..cd1f12515 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -24,6 +24,7 @@
 import org.telegram.messenger.R;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.ui.ActionBar.Theme;
 
 public class AvatarDrawable extends Drawable {
 
@@ -31,12 +32,12 @@
     private static TextPaint namePaint;
     private static TextPaint namePaintSmall;
     private static int[] arrColors = {0xffe56555, 0xfff28c48, 0xff8e85ee, 0xff76c84d, 0xff5fbed5, 0xff549cdd, 0xff8e85ee, 0xfff2749a};
-    private static int[] arrColorsProfiles = {0xffd86f65, 0xfff69d61, 0xff8c79d2, 0xff67b35d, 0xff56a2bb, 0xff5c98cd, 0xff8c79d2, 0xfff37fa6};
-    private static int[] arrColorsProfilesBack = {0xffca6056, 0xfff18944, 0xff7d6ac4, 0xff56a14c, 0xff4492ac, 0xff4c84b6, 0xff7d6ac4, 0xff4c84b6};
-    private static int[] arrColorsProfilesText = {0xfff9cbc5, 0xfffdddc8, 0xffcdc4ed, 0xffc0edba, 0xffb8e2f0, 0xffb3d7f7, 0xffcdc4ed, 0xffb3d7f7};
+    private static int[] arrColorsProfiles = {0xffd86f65, 0xfff69d61, 0xff8c79d2, 0xff67b35d, 0xff56a2bb, Theme.ACTION_BAR_MAIN_AVATAR_COLOR, 0xff8c79d2, 0xfff37fa6};
+    private static int[] arrColorsProfilesBack = {0xffca6056, 0xfff18944, 0xff7d6ac4, 0xff56a14c, 0xff4492ac, Theme.ACTION_BAR_PROFILE_COLOR, 0xff7d6ac4, 0xff4c84b6};
+    private static int[] arrColorsProfilesText = {0xfff9cbc5, 0xfffdddc8, 0xffcdc4ed, 0xffc0edba, 0xffb8e2f0, Theme.ACTION_BAR_PROFILE_SUBTITLE_COLOR, 0xffcdc4ed, 0xffb3d7f7};
     private static int[] arrColorsNames = {0xffca5650, 0xffd87b29, 0xff4e92cc, 0xff50b232, 0xff42b1a8, 0xff4e92cc, 0xff4e92cc, 0xff4e92cc};
-    private static int[] arrColorsButtons = {R.drawable.bar_selector_red, R.drawable.bar_selector_orange, R.drawable.bar_selector_violet,
-            R.drawable.bar_selector_green, R.drawable.bar_selector_cyan, R.drawable.bar_selector_blue, R.drawable.bar_selector_violet, R.drawable.bar_selector_blue};
+    private static int[] arrColorsButtons = {Theme.ACTION_BAR_RED_SELECTOR_COLOR, Theme.ACTION_BAR_ORANGE_SELECTOR_COLOR, Theme.ACTION_BAR_VIOLET_SELECTOR_COLOR,
+            Theme.ACTION_BAR_GREEN_SELECTOR_COLOR, Theme.ACTION_BAR_CYAN_SELECTOR_COLOR, Theme.ACTION_BAR_BLUE_SELECTOR_COLOR, Theme.ACTION_BAR_VIOLET_SELECTOR_COLOR, Theme.ACTION_BAR_BLUE_SELECTOR_COLOR};
 
     private static Drawable broadcastDrawable;
     private static Drawable photoDrawable;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
index b8a091bee..7c1bfa0d3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BotKeyboardView.java
@@ -34,7 +34,7 @@
     private ArrayList<TextView> buttonViews = new ArrayList<>();
 
     public interface BotKeyboardViewDelegate {
-        void didPressedButton(CharSequence text);
+        void didPressedButton(TLRPC.KeyboardButton button);
     }
 
     public BotKeyboardView(Context context) {
@@ -99,8 +99,9 @@ public void setButtons(TLRPC.TL_replyKeyboardMarkup buttons) {
 
                 float weight = 1.0f / row.buttons.size();
                 for (int b = 0; b < row.buttons.size(); b++) {
-                    TLRPC.TL_keyboardButton button = row.buttons.get(b);
+                    TLRPC.KeyboardButton button = row.buttons.get(b);
                     TextView textView = new TextView(getContext());
+                    textView.setTag(button);
                     textView.setTextColor(0xff36474f);
                     textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
                     textView.setGravity(Gravity.CENTER);
@@ -111,7 +112,7 @@ public void setButtons(TLRPC.TL_replyKeyboardMarkup buttons) {
                     textView.setOnClickListener(new OnClickListener() {
                         @Override
                         public void onClick(View v) {
-                            delegate.didPressedButton(((TextView) v).getText());
+                            delegate.didPressedButton((TLRPC.KeyboardButton) v.getTag());
                         }
                     });
                     buttonViews.add(textView);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 7a8bda10b..92884aa38 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -11,7 +11,9 @@
 import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.graphics.Canvas;
@@ -19,7 +21,9 @@
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.os.Build;
+import android.os.Bundle;
 import android.os.PowerManager;
+import android.os.SystemClock;
 import android.text.Editable;
 import android.text.InputFilter;
 import android.text.Layout;
@@ -62,18 +66,22 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.DialogsActivity;
 import org.telegram.ui.StickersActivity;
 
 import java.io.File;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.Locale;
 
-public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierFrameLayout.SizeNotifierFrameLayoutDelegate {
+public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierFrameLayout.SizeNotifierFrameLayoutDelegate, StickersAlert.StickersAlertDelegate {
 
     public interface ChatActivityEnterViewDelegate {
         void onMessageSend(String message);
@@ -132,8 +140,7 @@ public boolean onTouchEvent(MotionEvent event) {
         @Override
         protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
             super.onLayout(changed, left, top, right, bottom);
-            seekBarWaveform.width = right - left;
-            seekBarWaveform.height = bottom - top;
+            seekBarWaveform.setSize(right - left, bottom - top);
         }
 
         @Override
@@ -150,9 +157,28 @@ protected void onDraw(Canvas canvas) {
         private int userNameLength;
         private int xOffset;
         private int yOffset;
+        private Object editor;
+        private Field editorField;
+        private Drawable[] mCursorDrawable;
+        private Field mCursorDrawableField;
+        private int triesCount = 0;
 
         public EditTextCaption(Context context) {
             super(context);
+
+            try {
+                Field field = TextView.class.getDeclaredField("mEditor");
+                field.setAccessible(true);
+                editor = field.get(this);
+                Class editorClass = Class.forName("android.widget.Editor");
+                editorField = editorClass.getDeclaredField("mShowCursor");
+                editorField.setAccessible(true);
+                mCursorDrawableField = editorClass.getDeclaredField("mCursorDrawable");
+                mCursorDrawableField.setAccessible(true);
+                mCursorDrawable = (Drawable[]) mCursorDrawableField.get(editor);
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            }
         }
 
         public void setCaption(String value) {
@@ -215,6 +241,21 @@ protected void onDraw(Canvas canvas) {
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
             }
+
+            try {
+                if (editorField != null && mCursorDrawable != null && mCursorDrawable[0] != null) {
+                    long mShowCursor = editorField.getLong(editor);
+                    boolean showCursor = (SystemClock.uptimeMillis() - mShowCursor) % (2 * 500) < 500;
+                    if (showCursor) {
+                        canvas.save();
+                        canvas.translate(0, getPaddingTop());
+                        mCursorDrawable[0].draw(canvas);
+                        canvas.restore();
+                    }
+                }
+            } catch (Throwable e) {
+                //ignore
+            }
         }
 
         @Override
@@ -229,6 +270,7 @@ public boolean onTouchEvent(MotionEvent event) {
 
     private EditTextCaption messageEditText;
     private ImageView sendButton;
+    private ImageView cancelBotButton;
     private ImageView emojiButton;
     private EmojiView emojiView;
     private TextView recordTimeText;
@@ -252,6 +294,7 @@ public boolean onTouchEvent(MotionEvent event) {
     private ImageView notifyButton;
     private RecordCircle recordCircle;
     private ContextProgressView contextProgressView;
+    private CloseProgressDrawable2 progressDrawable;
 
     private MessageObject editingMessageObject;
     private boolean editingCaption;
@@ -297,7 +340,7 @@ public boolean onTouchEvent(MotionEvent event) {
     private boolean lastSizeChangeValue2;
 
     private Activity parentActivity;
-    private BaseFragment parentFragment;
+    private ChatActivity parentFragment;
     private long dialog_id;
     private boolean ignoreTextChange;
     private int innerTextChange;
@@ -317,6 +360,9 @@ public boolean onTouchEvent(MotionEvent event) {
     private boolean allowShowTopView;
     private AnimatorSetProxy currentTopViewAnimation;
 
+    private MessageObject pendingMessageObject;
+    private TLRPC.KeyboardButton pendingLocationButton;
+
     private boolean waitingForKeyboardOpen;
     private Runnable openKeyboardRunnable = new Runnable() {
         @Override
@@ -448,7 +494,7 @@ protected void onDraw(Canvas canvas) {
         }
     }
 
-    public ChatActivityEnterView(Activity context, SizeNotifierFrameLayout parent, BaseFragment fragment, boolean isChat) {
+    public ChatActivityEnterView(Activity context, SizeNotifierFrameLayout parent, ChatActivity fragment, boolean isChat) {
         super(context);
         setBackgroundResource(R.drawable.compose_panel);
         setFocusable(true);
@@ -482,9 +528,12 @@ public ChatActivityEnterView(Activity context, SizeNotifierFrameLayout parent, B
         emojiButton = new ImageView(context);
         emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
         emojiButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        emojiButton.setPadding(AndroidUtilities.dp(4), AndroidUtilities.dp(1), 0, 0);
-        frameLayout.addView(emojiButton, LayoutHelper.createFrame(48, 48, Gravity.BOTTOM));
-        emojiButton.setOnClickListener(new View.OnClickListener() {
+        emojiButton.setPadding(0, AndroidUtilities.dp(1), 0, 0);
+        if (Build.VERSION.SDK_INT >= 21) {
+            emojiButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+        }
+        frameLayout.addView(emojiButton, LayoutHelper.createFrame(48, 48, Gravity.BOTTOM | Gravity.LEFT, 3, 0, 0, 0));
+        emojiButton.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
                 if (!isPopupShowing() || currentPopupContentType != 0) {
@@ -506,11 +555,10 @@ public void onClick(View view) {
         messageEditText.setGravity(Gravity.BOTTOM);
         messageEditText.setPadding(0, AndroidUtilities.dp(11), 0, AndroidUtilities.dp(12));
         messageEditText.setBackgroundDrawable(null);
-        AndroidUtilities.clearCursorDrawable(messageEditText);
         messageEditText.setTextColor(0xff000000);
         messageEditText.setHintTextColor(0xffb2b2b2);
         frameLayout.addView(messageEditText, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM, 52, 0, isChat ? 50 : 2, 0));
-        messageEditText.setOnKeyListener(new View.OnKeyListener() {
+        messageEditText.setOnKeyListener(new OnKeyListener() {
 
             boolean ctrlPressed = false;
 
@@ -583,7 +631,7 @@ public void onTextChanged(CharSequence charSequence, int start, int before, int
                 if (innerTextChange != 2 && before != count && (count - before) > 1) {
                     processChange = true;
                 }
-                if (!isAsAdmin && message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
+                if (editingMessageObject == null && !isAsAdmin && message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
                     int currentTime = ConnectionsManager.getInstance().getCurrentTime();
                     TLRPC.User currentUser = null;
                     if ((int) dialog_id > 0) {
@@ -617,6 +665,13 @@ public void afterTextChanged(Editable editable) {
                 }
             }
         });
+        try {
+            Field mCursorDrawableRes = TextView.class.getDeclaredField("mCursorDrawableRes");
+            mCursorDrawableRes.setAccessible(true);
+            mCursorDrawableRes.set(messageEditText, R.drawable.field_carret);
+        } catch (Exception e) {
+            //nothing to do
+        }
 
         if (isChat) {
             contextProgressView = new ContextProgressView(context);
@@ -633,6 +688,9 @@ public void afterTextChanged(Editable editable) {
             botButton.setImageResource(R.drawable.bot_keyboard2);
             botButton.setScaleType(ImageView.ScaleType.CENTER);
             botButton.setVisibility(GONE);
+            if (Build.VERSION.SDK_INT >= 21) {
+                botButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+            }
             attachButton.addView(botButton, LayoutHelper.createLinear(48, 48));
             botButton.setOnClickListener(new OnClickListener() {
                 @Override
@@ -660,6 +718,9 @@ public void onClick(View v) {
             asAdminButton.setImageResource(isAsAdmin ? R.drawable.publish_active : R.drawable.publish);
             asAdminButton.setScaleType(ImageView.ScaleType.CENTER);
             asAdminButton.setVisibility(adminModeAvailable ? VISIBLE : GONE);
+            if (Build.VERSION.SDK_INT >= 21) {
+                asAdminButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+            }
             attachButton.addView(asAdminButton, LayoutHelper.createLinear(48, 48));
             asAdminButton.setOnClickListener(new OnClickListener() {
                 @Override
@@ -676,6 +737,9 @@ public void onClick(View v) {
             notifyButton.setImageResource(silent ? R.drawable.notify_members_off : R.drawable.notify_members_on);
             notifyButton.setScaleType(ImageView.ScaleType.CENTER);
             notifyButton.setVisibility(canWriteToChannel ? VISIBLE : GONE);
+            if (Build.VERSION.SDK_INT >= 21) {
+                notifyButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+            }
             attachButton.addView(notifyButton, LayoutHelper.createLinear(48, 48));
             notifyButton.setOnClickListener(new OnClickListener() {
                 @Override
@@ -689,6 +753,7 @@ public void onClick(View v) {
                     } else {
                         Toast.makeText(parentActivity, LocaleController.getString("ChannelNotifyMembersInfoOn", R.string.ChannelNotifyMembersInfoOn), Toast.LENGTH_SHORT).show();
                     }
+                    updateFieldHint();
                 }
             });
         }
@@ -797,16 +862,14 @@ public void onClick(View v) {
         audioSendButton.setSoundEffectsEnabled(false);
         audioSendButton.setPadding(0, 0, AndroidUtilities.dp(4), 0);
         sendButtonContainer.addView(audioSendButton, LayoutHelper.createFrame(48, 48));
-        audioSendButton.setOnTouchListener(new View.OnTouchListener() {
+        audioSendButton.setOnTouchListener(new OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                     if (parentFragment != null) {
-                        if (Build.VERSION.SDK_INT >= 23) {
-                            if (parentActivity.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
-                                parentActivity.requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO}, 3);
-                                return false;
-                            }
+                        if (Build.VERSION.SDK_INT >= 23 && parentActivity.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
+                            parentActivity.requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO}, 3);
+                            return false;
                         }
 
                         String action;
@@ -885,8 +948,32 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         recordCircle.setVisibility(GONE);
         sizeNotifierLayout.addView(recordCircle, LayoutHelper.createFrame(124, 124, Gravity.BOTTOM | Gravity.RIGHT, 0, 0, -36, -38));
 
+        cancelBotButton = new ImageView(context);
+        cancelBotButton.setVisibility(INVISIBLE);
+        cancelBotButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        //cancelBotButton.setImageResource(R.drawable.delete_reply);
+        cancelBotButton.setImageDrawable(progressDrawable = new CloseProgressDrawable2());
+        cancelBotButton.setSoundEffectsEnabled(false);
+        ViewProxy.setScaleX(cancelBotButton, 0.1f);
+        ViewProxy.setScaleY(cancelBotButton, 0.1f);
+        ViewProxy.setAlpha(cancelBotButton, 0.0f);
+        cancelBotButton.clearAnimation();
+        sendButtonContainer.addView(cancelBotButton, LayoutHelper.createFrame(48, 48));
+        cancelBotButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                String text = messageEditText.getText().toString();
+                int idx = text.indexOf(' ');
+                if (idx == -1 || idx == text.length() - 1) {
+                    setFieldText("");
+                } else {
+                    setFieldText(text.substring(0, idx + 1));
+                }
+            }
+        });
+
         sendButton = new ImageView(context);
-        sendButton.setVisibility(View.INVISIBLE);
+        sendButton.setVisibility(INVISIBLE);
         sendButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
         sendButton.setImageResource(R.drawable.ic_send);
         sendButton.setSoundEffectsEnabled(false);
@@ -895,7 +982,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         ViewProxy.setAlpha(sendButton, 0.0f);
         sendButton.clearAnimation();
         sendButtonContainer.addView(sendButton, LayoutHelper.createFrame(48, 48));
-        sendButton.setOnClickListener(new View.OnClickListener() {
+        sendButton.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
                 sendMessage();
@@ -910,7 +997,7 @@ public void onClick(View view) {
     }
 
     public void showContextProgress(boolean show) {
-        if (contextProgressView == null) {
+        /*if (contextProgressView == null) {
             return;
         }
         contextProgressView.setVisibility(show ? VISIBLE : INVISIBLE);
@@ -918,12 +1005,21 @@ public void showContextProgress(boolean show) {
             messageEditText.setPadding(0, AndroidUtilities.dp(11), show ? AndroidUtilities.dp(38) : 0, AndroidUtilities.dp(12));
         } catch (Exception e) {
             FileLog.e("tmessages", e);
+        }*/
+        if (progressDrawable == null) {
+            return;
+        }
+        if (show) {
+            progressDrawable.startAnimation();
+        } else {
+            progressDrawable.stopAnimation();
         }
     }
 
     public void setCaption(String caption) {
         if (messageEditText != null) {
             messageEditText.setCaption(caption);
+            checkSendButton(true);
         }
     }
 
@@ -1004,6 +1100,13 @@ public void onAnimationEnd(Object animation) {
                                 currentTopViewAnimation = null;
                             }
                         }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (currentTopViewAnimation != null && currentTopViewAnimation.equals(animation)) {
+                                currentTopViewAnimation = null;
+                            }
+                        }
                     });
                     currentTopViewAnimation.setDuration(200);
                     currentTopViewAnimation.start();
@@ -1047,6 +1150,13 @@ public void onAnimationEnd(Object animation) {
                             currentTopViewAnimation = null;
                         }
                     }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        if (currentTopViewAnimation != null && currentTopViewAnimation.equals(animation)) {
+                            currentTopViewAnimation = null;
+                        }
+                    }
                 });
                 currentTopViewAnimation.setDuration(200);
                 currentTopViewAnimation.start();
@@ -1074,7 +1184,7 @@ private void onWindowSizeChanged() {
                 if (allowShowTopView) {
                     allowShowTopView = false;
                     if (needShowTopView) {
-                        topView.setVisibility(View.GONE);
+                        topView.setVisibility(GONE);
                         setTopViewAnimation(0.0f);
                     }
                 }
@@ -1082,7 +1192,7 @@ private void onWindowSizeChanged() {
                 if (!allowShowTopView) {
                     allowShowTopView = true;
                     if (needShowTopView) {
-                        topView.setVisibility(View.VISIBLE);
+                        topView.setVisibility(VISIBLE);
                         setTopViewAnimation(1.0f);
                     }
                 }
@@ -1171,7 +1281,15 @@ private void updateFieldHint() {
             if (editingMessageObject != null) {
                 messageEditText.setHint(editingCaption ? LocaleController.getString("Caption", R.string.Caption) : LocaleController.getString("TypeMessage", R.string.TypeMessage));
             } else {
-                messageEditText.setHint(isAsAdmin ? LocaleController.getString("ChannelBroadcast", R.string.ChannelBroadcast) : LocaleController.getString("ChannelComment", R.string.ChannelComment));
+                if (isAsAdmin) {
+                    if (silent) {
+                        messageEditText.setHint(LocaleController.getString("ChannelSilentBroadcast", R.string.ChannelSilentBroadcast));
+                    } else {
+                        messageEditText.setHint(LocaleController.getString("ChannelBroadcast", R.string.ChannelBroadcast));
+                    }
+                } else {
+                    messageEditText.setHint(LocaleController.getString("ChannelComment", R.string.ChannelComment));
+                }
             }
         } else {
             messageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
@@ -1216,7 +1334,7 @@ private void hideRecordedAudioPanel() {
             @Override
             public void onAnimationEnd(Object animation) {
                 recordedAudioPanel.clearAnimation();
-                recordedAudioPanel.setVisibility(View.GONE);
+                recordedAudioPanel.setVisibility(GONE);
 
             }
         });
@@ -1246,7 +1364,7 @@ private void sendMessage() {
             if (playing != null && playing == audioToSendMessageObject) {
                 MediaController.getInstance().cleanupPlayer(true, true);
             }
-            SendMessagesHelper.getInstance().sendMessage(audioToSend, null, audioToSendPath, dialog_id, replyingMessageObject, isAsAdmin, null);
+            SendMessagesHelper.getInstance().sendMessage(audioToSend, null, audioToSendPath, dialog_id, replyingMessageObject, isAsAdmin, null, null);
             if (delegate != null) {
                 delegate.onMessageSend(null);
             }
@@ -1281,7 +1399,7 @@ public boolean processSendingText(String text) {
             int count = (int) Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
                 String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch, asAdmin(), null, null);
+                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch, asAdmin(), null, null, null);
             }
             return true;
         }
@@ -1308,9 +1426,11 @@ private void checkSendButton(final boolean animated) {
         }
         String message = getTrimmedString(messageEditText.getText().toString());
         if (message.length() > 0 || forceShowSendButton || audioToSend != null) {
-            if (audioSendButton.getVisibility() == View.VISIBLE) {
+            boolean showBotButton = messageEditText.caption != null && sendButton.getVisibility() == VISIBLE;
+            boolean showSendButton = messageEditText.caption == null && cancelBotButton.getVisibility() == VISIBLE;
+            if (audioSendButton.getVisibility() == VISIBLE || showBotButton || showSendButton) {
                 if (animated) {
-                    if (runningAnimationType == 1) {
+                    if (runningAnimationType == 1 && messageEditText.caption == null || runningAnimationType == 3 && messageEditText.caption != null) {
                         return;
                     }
                     if (runningAnimation != null) {
@@ -1332,60 +1452,116 @@ private void checkSendButton(final boolean animated) {
                         runningAnimation2.addListener(new AnimatorListenerAdapterProxy() {
                             @Override
                             public void onAnimationEnd(Object animation) {
-                                if (runningAnimation2.equals(animation)) {
-                                    attachButton.setVisibility(View.GONE);
+                                if (runningAnimation2 != null && runningAnimation2.equals(animation)) {
+                                    attachButton.setVisibility(GONE);
                                     attachButton.clearAnimation();
                                 }
                             }
+
+                            @Override
+                            public void onAnimationCancel(Object animation) {
+                                if (runningAnimation2 != null && runningAnimation2.equals(animation)) {
+                                    runningAnimation2 = null;
+                                }
+                            }
                         });
                         runningAnimation2.start();
-
                         updateFieldRight(0);
-
                         if (delegate != null) {
                             delegate.onAttachButtonHidden();
                         }
                     }
 
-                    sendButton.setVisibility(View.VISIBLE);
                     runningAnimation = new AnimatorSetProxy();
-                    runningAnimationType = 1;
-
-                    runningAnimation.playTogether(
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 0.1f),
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 0.1f),
-                            ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 0.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 1.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 1.0f),
-                            ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 1.0f)
-                    );
 
+                    ArrayList<Object> animators = new ArrayList<>();
+                    if (audioSendButton.getVisibility() == VISIBLE) {
+                        animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 0.0f));
+                    }
+                    if (showBotButton) {
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f));
+                    } else if (showSendButton) {
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleX", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleY", 0.1f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "alpha", 0.0f));
+                    }
+                    if (messageEditText.caption != null) {
+                        runningAnimationType = 3;
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleX", 1.0f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleY", 1.0f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "alpha", 1.0f));
+                        cancelBotButton.setVisibility(VISIBLE);
+                    } else {
+                        runningAnimationType = 1;
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 1.0f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 1.0f));
+                        animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 1.0f));
+                        sendButton.setVisibility(VISIBLE);
+                    }
+
+                    runningAnimation.playTogether(animators);
                     runningAnimation.setDuration(150);
                     runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
                         @Override
                         public void onAnimationEnd(Object animation) {
                             if (runningAnimation != null && runningAnimation.equals(animation)) {
-                                sendButton.setVisibility(View.VISIBLE);
-                                audioSendButton.setVisibility(View.GONE);
+                                if (messageEditText.caption != null) {
+                                    cancelBotButton.setVisibility(VISIBLE);
+                                    sendButton.setVisibility(GONE);
+                                    sendButton.clearAnimation();
+                                } else {
+                                    sendButton.setVisibility(VISIBLE);
+                                    cancelBotButton.setVisibility(GONE);
+                                    cancelBotButton.clearAnimation();
+                                }
+                                audioSendButton.setVisibility(GONE);
                                 audioSendButton.clearAnimation();
                                 runningAnimation = null;
                                 runningAnimationType = 0;
                             }
                         }
+
+                        @Override
+                        public void onAnimationCancel(Object animation) {
+                            if (runningAnimation != null && runningAnimation.equals(animation)) {
+                                runningAnimation = null;
+                            }
+                        }
                     });
                     runningAnimation.start();
                 } else {
                     ViewProxy.setScaleX(audioSendButton, 0.1f);
                     ViewProxy.setScaleY(audioSendButton, 0.1f);
                     ViewProxy.setAlpha(audioSendButton, 0.0f);
-                    ViewProxy.setScaleX(sendButton, 1.0f);
-                    ViewProxy.setScaleY(sendButton, 1.0f);
-                    ViewProxy.setAlpha(sendButton, 1.0f);
-                    sendButton.setVisibility(View.VISIBLE);
-                    audioSendButton.setVisibility(View.GONE);
+                    if (messageEditText.caption != null) {
+                        ViewProxy.setScaleX(sendButton, 0.1f);
+                        ViewProxy.setScaleY(sendButton, 0.1f);
+                        ViewProxy.setAlpha(sendButton, 0.0f);
+                        ViewProxy.setScaleX(cancelBotButton, 1.0f);
+                        ViewProxy.setScaleY(cancelBotButton, 1.0f);
+                        ViewProxy.setAlpha(cancelBotButton, 1.0f);
+                        cancelBotButton.setVisibility(VISIBLE);
+                        sendButton.setVisibility(GONE);
+                        sendButton.clearAnimation();
+                    } else {
+                        ViewProxy.setScaleX(cancelBotButton, 0.1f);
+                        ViewProxy.setScaleY(cancelBotButton, 0.1f);
+                        ViewProxy.setAlpha(cancelBotButton, 0.0f);
+                        ViewProxy.setScaleX(sendButton, 1.0f);
+                        ViewProxy.setScaleY(sendButton, 1.0f);
+                        ViewProxy.setAlpha(sendButton, 1.0f);
+                        sendButton.setVisibility(VISIBLE);
+                        cancelBotButton.setVisibility(GONE);
+                        cancelBotButton.clearAnimation();
+                    }
+                    audioSendButton.setVisibility(GONE);
                     audioSendButton.clearAnimation();
                     if (attachButton != null) {
-                        attachButton.setVisibility(View.GONE);
+                        attachButton.setVisibility(GONE);
                         attachButton.clearAnimation();
                         if (delegate != null) {
                             delegate.onAttachButtonHidden();
@@ -1394,7 +1570,7 @@ public void onAnimationEnd(Object animation) {
                     }
                 }
             }
-        } else if (sendButton.getVisibility() == View.VISIBLE) {
+        } else if (sendButton.getVisibility() == VISIBLE || cancelBotButton.getVisibility() == VISIBLE) {
             if (animated) {
                 if (runningAnimationType == 2) {
                     return;
@@ -1410,7 +1586,7 @@ public void onAnimationEnd(Object animation) {
                 }
 
                 if (attachButton != null) {
-                    attachButton.setVisibility(View.VISIBLE);
+                    attachButton.setVisibility(VISIBLE);
                     runningAnimation2 = new AnimatorSetProxy();
                     runningAnimation2.playTogether(
                             ObjectAnimatorProxy.ofFloat(attachButton, "alpha", 1.0f),
@@ -1418,52 +1594,70 @@ public void onAnimationEnd(Object animation) {
                     );
                     runningAnimation2.setDuration(100);
                     runningAnimation2.start();
-
                     updateFieldRight(1);
-
                     delegate.onAttachButtonShow();
                 }
 
-                audioSendButton.setVisibility(View.VISIBLE);
+                audioSendButton.setVisibility(VISIBLE);
                 runningAnimation = new AnimatorSetProxy();
                 runningAnimationType = 2;
 
-                runningAnimation.playTogether(
-                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f),
-                        ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f),
-                        ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 1.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 1.0f),
-                        ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 1.0f)
-                );
+                ArrayList<Object> animators = new ArrayList<>();
+                animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleX", 1.0f));
+                animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "scaleY", 1.0f));
+                animators.add(ObjectAnimatorProxy.ofFloat(audioSendButton, "alpha", 1.0f));
+                if (cancelBotButton.getVisibility() == VISIBLE) {
+                    animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleX", 0.1f));
+                    animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "scaleY", 0.1f));
+                    animators.add(ObjectAnimatorProxy.ofFloat(cancelBotButton, "alpha", 0.0f));
+                } else {
+                    animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleX", 0.1f));
+                    animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "scaleY", 0.1f));
+                    animators.add(ObjectAnimatorProxy.ofFloat(sendButton, "alpha", 0.0f));
+                }
 
+                runningAnimation.playTogether(animators);
                 runningAnimation.setDuration(150);
                 runningAnimation.addListener(new AnimatorListenerAdapterProxy() {
                     @Override
                     public void onAnimationEnd(Object animation) {
                         if (runningAnimation != null && runningAnimation.equals(animation)) {
-                            sendButton.setVisibility(View.GONE);
+                            sendButton.setVisibility(GONE);
                             sendButton.clearAnimation();
-                            audioSendButton.setVisibility(View.VISIBLE);
+                            cancelBotButton.setVisibility(GONE);
+                            cancelBotButton.clearAnimation();
+                            audioSendButton.setVisibility(VISIBLE);
                             runningAnimation = null;
                             runningAnimationType = 0;
                         }
                     }
+
+                    @Override
+                    public void onAnimationCancel(Object animation) {
+                        if (runningAnimation != null && runningAnimation.equals(animation)) {
+                            runningAnimation = null;
+                        }
+                    }
                 });
                 runningAnimation.start();
             } else {
                 ViewProxy.setScaleX(sendButton, 0.1f);
                 ViewProxy.setScaleY(sendButton, 0.1f);
                 ViewProxy.setAlpha(sendButton, 0.0f);
+                ViewProxy.setScaleX(cancelBotButton, 0.1f);
+                ViewProxy.setScaleY(cancelBotButton, 0.1f);
+                ViewProxy.setAlpha(cancelBotButton, 0.0f);
                 ViewProxy.setScaleX(audioSendButton, 1.0f);
                 ViewProxy.setScaleY(audioSendButton, 1.0f);
                 ViewProxy.setAlpha(audioSendButton, 1.0f);
-                sendButton.setVisibility(View.GONE);
+                cancelBotButton.setVisibility(GONE);
+                cancelBotButton.clearAnimation();
+                sendButton.setVisibility(GONE);
                 sendButton.clearAnimation();
-                audioSendButton.setVisibility(View.VISIBLE);
+                audioSendButton.setVisibility(VISIBLE);
                 if (attachButton != null) {
                     delegate.onAttachButtonShow();
-                    attachButton.setVisibility(View.VISIBLE);
+                    attachButton.setVisibility(VISIBLE);
                     updateFieldRight(1);
                 }
             }
@@ -1575,8 +1769,8 @@ public void onAnimationEnd(Object animator) {
                         params.leftMargin = AndroidUtilities.dp(30);
                         slideText.setLayoutParams(params);
                         ViewProxy.setAlpha(slideText, 1);
-                        recordPanel.setVisibility(View.GONE);
-                        recordCircle.setVisibility(View.GONE);
+                        recordPanel.setVisibility(GONE);
+                        recordCircle.setVisibility(GONE);
                         runningAnimationAudio = null;
                     }
                 }
@@ -1615,9 +1809,9 @@ public void setCommand(MessageObject messageObject, String command, boolean long
         } else {
             TLRPC.User user = messageObject != null && (int) dialog_id < 0 ? MessagesController.getInstance().getUser(messageObject.messageOwner.from_id) : null;
             if ((botCount != 1 || username) && user != null && user.bot && !command.contains("@")) {
-                SendMessagesHelper.getInstance().sendMessage(String.format(Locale.US, "%s@%s", command, user.username), dialog_id, null, null, false, asAdmin(), null, null);
+                SendMessagesHelper.getInstance().sendMessage(String.format(Locale.US, "%s@%s", command, user.username), dialog_id, null, null, false, asAdmin(), null, null, null);
             } else {
-                SendMessagesHelper.getInstance().sendMessage(command, dialog_id, null, null, false, asAdmin(), null, null);
+                SendMessagesHelper.getInstance().sendMessage(command, dialog_id, null, null, false, asAdmin(), null, null, null);
             }
         }
     }
@@ -1651,10 +1845,12 @@ public void setEditinigMessageObject(MessageObject messageObject, boolean captio
             layoutParams.rightMargin = AndroidUtilities.dp(4);
             messageEditText.setLayoutParams(layoutParams);
             sendButton.clearAnimation();
+            cancelBotButton.clearAnimation();
             audioSendButton.clearAnimation();
             attachButton.clearAnimation();
             sendButtonContainer.clearAnimation();
             sendButton.setVisibility(GONE);
+            cancelBotButton.setVisibility(GONE);
             audioSendButton.setVisibility(GONE);
             attachButton.setVisibility(GONE);
             sendButtonContainer.setVisibility(GONE);
@@ -1669,11 +1865,16 @@ public void setEditinigMessageObject(MessageObject messageObject, boolean captio
             ViewProxy.setScaleX(sendButton, 0.1f);
             ViewProxy.setScaleY(sendButton, 0.1f);
             ViewProxy.setAlpha(sendButton, 0.0f);
+            ViewProxy.setScaleX(cancelBotButton, 0.1f);
+            ViewProxy.setScaleY(cancelBotButton, 0.1f);
+            ViewProxy.setAlpha(cancelBotButton, 0.0f);
             ViewProxy.setScaleX(audioSendButton, 1.0f);
             ViewProxy.setScaleY(audioSendButton, 1.0f);
             ViewProxy.setAlpha(audioSendButton, 1.0f);
-            sendButton.setVisibility(View.GONE);
+            sendButton.setVisibility(GONE);
             sendButton.clearAnimation();
+            cancelBotButton.setVisibility(GONE);
+            cancelBotButton.clearAnimation();
             messageEditText.setText("");
             delegate.onAttachButtonShow();
             updateFieldRight(1);
@@ -1764,6 +1965,9 @@ public void addToAttachLayout(View view) {
             ViewGroup viewGroup = (ViewGroup) view.getParent();
             viewGroup.removeView(view);
         }
+        if (Build.VERSION.SDK_INT >= 21) {
+            view.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+        }
         attachButton.addView(view, LayoutHelper.createLinear(48, 48));
     }
 
@@ -1817,9 +2021,9 @@ public void setButtons(MessageObject messageObject, boolean openKeyboard) {
             botKeyboardView.setVisibility(GONE);
             botKeyboardView.setDelegate(new BotKeyboardView.BotKeyboardViewDelegate() {
                 @Override
-                public void didPressedButton(CharSequence text) {
+                public void didPressedButton(TLRPC.KeyboardButton button) {
                     MessageObject object = replyingMessageObject != null ? replyingMessageObject : ((int) dialog_id < 0 ? botButtonsMessageObject : null);
-                    SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, object, null, false, asAdmin(), null, null);
+                    didPressedBotButton(button, object, replyingMessageObject != null ? replyingMessageObject : botButtonsMessageObject);
                     if (replyingMessageObject != null) {
                         openKeyboardInternal();
                         setButtons(botMessageObject, false);
@@ -1863,6 +2067,92 @@ public void didPressedButton(CharSequence text) {
         updateBotButton();
     }
 
+    public void didPressedBotButton(final TLRPC.KeyboardButton button, final MessageObject replyMessageObject, final MessageObject messageObject) {
+        if (button == null || messageObject == null) {
+            return;
+        }
+        if (button instanceof TLRPC.TL_keyboardButton) {
+            SendMessagesHelper.getInstance().sendMessage(button.text, dialog_id, replyMessageObject, null, false, asAdmin(), null, null, null);
+        } else if (button instanceof TLRPC.TL_keyboardButtonUrl) {
+            parentFragment.showOpenUrlAlert(button.url);
+        } else if (button instanceof TLRPC.TL_keyboardButtonRequestPhone) {
+            parentFragment.shareMyContact(messageObject);
+        } else if (button instanceof TLRPC.TL_keyboardButtonRequestGeoLocation) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+            builder.setTitle(LocaleController.getString("ShareYouLocationTitle", R.string.ShareYouLocationTitle));
+            builder.setMessage(LocaleController.getString("ShareYouLocationInfo", R.string.ShareYouLocationInfo));
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    if (Build.VERSION.SDK_INT >= 23 && parentActivity.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                        parentActivity.requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION}, 2);
+                        pendingMessageObject = messageObject;
+                        pendingLocationButton = button;
+                        return;
+                    }
+                    SendMessagesHelper.getInstance().sendCurrentLocation(messageObject, button);
+                }
+            });
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+            parentFragment.showDialog(builder.create());
+        } else if (button instanceof TLRPC.TL_keyboardButtonCallback) {
+            SendMessagesHelper.getInstance().sendCallback(messageObject, button, parentFragment);
+        } else if (button instanceof TLRPC.TL_keyboardButtonSwitchInline) {
+            if (parentFragment.processSwitchButton((TLRPC.TL_keyboardButtonSwitchInline) button)) {
+                return;
+            }
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", true);
+            args.putInt("dialogsType", 1);
+            DialogsActivity fragment = new DialogsActivity(args);
+            fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
+                @Override
+                public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
+                    int uid = messageObject.messageOwner.from_id;
+                    if (messageObject.messageOwner.via_bot_id != 0) {
+                        uid = messageObject.messageOwner.via_bot_id;
+                    }
+                    TLRPC.User user = MessagesController.getInstance().getUser(uid);
+                    if (user == null) {
+                        fragment.finishFragment();
+                        return;
+                    }
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putString("dialog_" + did, "@" + user.username + " " + button.query);
+                    editor.commit();
+                    if (did != dialog_id) {
+                        int lower_part = (int) did;
+                        if (lower_part != 0) {
+                            Bundle args = new Bundle();
+                            if (lower_part > 0) {
+                                args.putInt("user_id", lower_part);
+                            } else if (lower_part < 0) {
+                                args.putInt("chat_id", -lower_part);
+                            }
+                            if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                return;
+                            }
+                            ChatActivity chatActivity = new ChatActivity(args);
+                            if (parentFragment.presentFragment(chatActivity, true)) {
+                                if (!AndroidUtilities.isTablet()) {
+                                    parentFragment.removeSelfFromStack();
+                                }
+                            } else {
+                                fragment.finishFragment();
+                            }
+                        } else {
+                            fragment.finishFragment();
+                        }
+                    } else {
+                        fragment.finishFragment();
+                    }
+                }
+            });
+            parentFragment.presentFragment(fragment);
+        }
+    }
+
     public boolean isPopupView(View view) {
         return view == botKeyboardView || view == emojiView;
     }
@@ -1905,10 +2195,7 @@ public void onEmojiSelected(String symbol) {
             }
 
             public void onStickerSelected(TLRPC.Document sticker) {
-                SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject, asAdmin());
-                if (delegate != null) {
-                    delegate.onMessageSend(null);
-                }
+                ChatActivityEnterView.this.onStickerSelected(sticker);
             }
 
             @Override
@@ -1920,7 +2207,10 @@ public void onStickersSettingsClick() {
 
             @Override
             public void onGifSelected(TLRPC.Document gif) {
-                SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) gif, null, null, dialog_id, replyingMessageObject, asAdmin(), null);
+                SendMessagesHelper.getInstance().sendSticker(gif, dialog_id, replyingMessageObject, asAdmin());
+                if ((int) dialog_id == 0) {
+                    MessagesController.getInstance().saveGif(gif);
+                }
                 if (delegate != null) {
                     delegate.onMessageSend(null);
                 }
@@ -1944,11 +2234,37 @@ public void onGifTab(boolean opened) {
             public void onStickersTab(boolean opened) {
                 delegate.onStickersTab(opened);
             }
+
+            @Override
+            public void onClearEmojiRecent() {
+                if (parentFragment == null || parentActivity == null) {
+                    return;
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setMessage(LocaleController.getString("ClearRecentEmoji", R.string.ClearRecentEmoji));
+                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        emojiView.clearRecentEmoji();
+                    }
+                });
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                parentFragment.showDialog(builder.create());
+            }
         });
         emojiView.setVisibility(GONE);
         sizeNotifierLayout.addView(emojiView);
     }
 
+    @Override
+    public void onStickerSelected(TLRPC.Document sticker) {
+        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject, asAdmin());
+        if (delegate != null) {
+            delegate.onMessageSend(null);
+        }
+    }
+
     private void showPopup(int show, int contentType) {
         if (show == 1) {
             if (contentType == 0 && emojiView == null) {
@@ -2066,6 +2382,10 @@ public boolean isEditingCaption() {
         return editingCaption;
     }
 
+    public boolean hasAudioToSend() {
+        return audioToSendMessageObject != null;
+    }
+
     public void openKeyboard() {
         AndroidUtilities.showKeyboard(messageEditText);
     }
@@ -2279,4 +2599,16 @@ public void didReceivedNotification(int id, Object... args) {
             }
         }
     }
+
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == 2) {
+            if (pendingLocationButton != null) {
+                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    SendMessagesHelper.getInstance().sendCurrentLocation(pendingMessageObject, pendingLocationButton);
+                }
+                pendingLocationButton = null;
+                pendingMessageObject = null;
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
index 97a47121f..86c3d2aa5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachView.java
@@ -37,8 +37,8 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.support.widget.LinearLayoutManager;
 import org.telegram.messenger.R;
+import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.ui.Adapters.PhotoAttachAdapter;
 import org.telegram.ui.Cells.PhotoAttachPhotoCell;
 import org.telegram.ui.ChatActivity;
 import org.telegram.ui.PhotoViewer;
@@ -60,12 +60,13 @@
     private RecyclerListView attachPhotoRecyclerView;
     private View lineView;
     private EmptyTextProgressView progressView;
+    private ArrayList<PhotoAttachAdapter.Holder> viewsCache = new ArrayList<>(8);
 
     private float[] distCache = new float[20];
 
     private DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
 
-    private boolean loading;
+    private boolean loading = true;
 
     private ChatAttachViewDelegate delegate;
 
@@ -106,12 +107,6 @@ public ChatAttachView(Context context) {
         super(context);
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.albumsDidLoaded);
-        if (MediaController.allPhotosAlbumEntry == null) {
-            if (Build.VERSION.SDK_INT >= 21) {
-                MediaController.loadGalleryPhotosAlbums(0);
-            }
-            loading = true;
-        }
 
         views[8] = attachPhotoRecyclerView = new RecyclerListView(context);
         attachPhotoRecyclerView.setVerticalScrollBarEnabled(true);
@@ -132,12 +127,6 @@ public boolean supportsPredictiveItemAnimations() {
         };
         attachPhotoLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
         attachPhotoRecyclerView.setLayoutManager(attachPhotoLayoutManager);
-        photoAttachAdapter.setDelegate(new PhotoAttachAdapter.PhotoAttachAdapterDelegate() {
-            @Override
-            public void selectedPhotosChanged() {
-                updatePhotosButton();
-            }
-        });
         attachPhotoRecyclerView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @SuppressWarnings("unchecked")
             @Override
@@ -215,6 +204,10 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
+        for (int a = 0; a < 8; a++) {
+            viewsCache.add(photoAttachAdapter.createHolder());
+        }
+
         if (loading) {
             progressView.showProgress();
         } else {
@@ -288,6 +281,14 @@ public void onRevealAnimationEnd(boolean open) {
         }
     }
 
+    public void loadGalleryPhotos() {
+        if (MediaController.allPhotosAlbumEntry == null) {
+            if (Build.VERSION.SDK_INT >= 21) {
+                MediaController.loadGalleryPhotosAlbums(0);
+            }
+        }
+    }
+
     @SuppressLint("NewApi")
     public void onRevealAnimationStart(boolean open) {
         if (!open) {
@@ -523,4 +524,98 @@ public void sendButtonPressed(int index) {
     public int getSelectedCount() {
         return photoAttachAdapter.getSelectedPhotos().size();
     }
+
+    @Override
+    public boolean hasOverlappingRendering() {
+        return false;
+    }
+
+    public class PhotoAttachAdapter extends RecyclerView.Adapter {
+
+        private Context mContext;
+        private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = new HashMap<>();
+
+        private class Holder extends RecyclerView.ViewHolder {
+
+            public Holder(View itemView) {
+                super(itemView);
+            }
+        }
+
+        public PhotoAttachAdapter(Context context) {
+            mContext = context;
+        }
+
+        public void clearSelectedPhotos() {
+            if (!selectedPhotos.isEmpty()) {
+                for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
+                    MediaController.PhotoEntry photoEntry = entry.getValue();
+                    photoEntry.imagePath = null;
+                    photoEntry.thumbPath = null;
+                    photoEntry.caption = null;
+                }
+                selectedPhotos.clear();
+                updatePhotosButton();
+                notifyDataSetChanged();
+            }
+        }
+
+        public Holder createHolder() {
+            PhotoAttachPhotoCell cell = new PhotoAttachPhotoCell(mContext);
+            cell.setDelegate(new PhotoAttachPhotoCell.PhotoAttachPhotoCellDelegate() {
+                @Override
+                public void onCheckClick(PhotoAttachPhotoCell v) {
+                    MediaController.PhotoEntry photoEntry = v.getPhotoEntry();
+                    if (selectedPhotos.containsKey(photoEntry.imageId)) {
+                        selectedPhotos.remove(photoEntry.imageId);
+                        v.setChecked(false, true);
+                        photoEntry.imagePath = null;
+                        photoEntry.thumbPath = null;
+                        v.setPhotoEntry(photoEntry, (Integer) v.getTag() == MediaController.allPhotosAlbumEntry.photos.size() - 1);
+                    } else {
+                        selectedPhotos.put(photoEntry.imageId, photoEntry);
+                        v.setChecked(true, true);
+                    }
+                    updatePhotosButton();
+                }
+            });
+            return new Holder(cell);
+        }
+
+        public HashMap<Integer, MediaController.PhotoEntry> getSelectedPhotos() {
+            return selectedPhotos;
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            PhotoAttachPhotoCell cell = (PhotoAttachPhotoCell) holder.itemView;
+            MediaController.PhotoEntry photoEntry = MediaController.allPhotosAlbumEntry.photos.get(position);
+            cell.setPhotoEntry(photoEntry, position == MediaController.allPhotosAlbumEntry.photos.size() - 1);
+            cell.setChecked(selectedPhotos.containsKey(photoEntry.imageId), false);
+            cell.getImageView().setTag(position);
+            cell.setTag(position);
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            Holder holder;
+            if (!viewsCache.isEmpty()) {
+                holder = viewsCache.get(0);
+                viewsCache.remove(0);
+            } else {
+                holder = createHolder();
+            }
+            return holder;
+        }
+
+        @Override
+        public int getItemCount() {
+            return (MediaController.allPhotosAlbumEntry != null ? MediaController.allPhotosAlbumEntry.photos.size() : 0);
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
new file mode 100644
index 000000000..c851dbf9c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
@@ -0,0 +1,366 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.SimpleTextView;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ChatActivity;
+import org.telegram.ui.ProfileActivity;
+
+public class ChatAvatarContainer extends FrameLayout {
+
+    private BackupImageView avatarImageView;
+    private SimpleTextView titleTextView;
+    private SimpleTextView subtitleTextView;
+    private RadioButton radioButton;
+    private ImageView timeItem;
+    private TimerDrawable timerDrawable;
+    private ChatActivity parentFragment;
+    private TypingDotsDrawable typingDotsDrawable;
+    private RecordStatusDrawable recordStatusDrawable;
+    private SendingFileExDrawable sendingFileDrawable;
+    private AvatarDrawable avatarDrawable = new AvatarDrawable();
+    private ChatAvatarContainerDelegate delegate;
+
+    private int onlineCount = -1;
+
+    public interface ChatAvatarContainerDelegate {
+        void didPressedRadioButton();
+    }
+
+    public ChatAvatarContainer(Context context, ChatActivity chatActivity, boolean needRadio, boolean needTime) {
+        super(context);
+        parentFragment = chatActivity;
+
+        avatarImageView = new BackupImageView(context);
+        avatarImageView.setRoundRadius(AndroidUtilities.dp(21));
+        addView(avatarImageView);
+
+        titleTextView = new SimpleTextView(context);
+        titleTextView.setTextColor(Theme.ACTION_BAR_TITLE_COLOR);
+        titleTextView.setTextSize(18);
+        titleTextView.setGravity(Gravity.LEFT);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        titleTextView.setLeftDrawableTopPadding(-AndroidUtilities.dp(1.3f));
+        titleTextView.setRightDrawableTopPadding(-AndroidUtilities.dp(1.3f));
+        addView(titleTextView);
+
+        subtitleTextView = new SimpleTextView(context);
+        subtitleTextView.setTextColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
+        subtitleTextView.setTextSize(14);
+        subtitleTextView.setGravity(Gravity.LEFT);
+        addView(subtitleTextView);
+
+        if (needTime) {
+            timeItem = new ImageView(context);
+            timeItem.setPadding(AndroidUtilities.dp(10), AndroidUtilities.dp(10), AndroidUtilities.dp(5), AndroidUtilities.dp(5));
+            timeItem.setScaleType(ImageView.ScaleType.CENTER);
+            timeItem.setImageDrawable(timerDrawable = new TimerDrawable(context));
+            addView(timeItem);
+            timeItem.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    parentFragment.showDialog(AndroidUtilities.buildTTLAlert(getContext(), parentFragment.getCurrentEncryptedChat()).create());
+                }
+            });
+        }
+
+        if (needRadio) {
+            radioButton = new RadioButton(context);
+            radioButton.setVisibility(View.GONE);
+            addView(radioButton);
+        }
+
+        setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (radioButton == null || radioButton.getVisibility() != View.VISIBLE) {
+                    TLRPC.User user = parentFragment.getCurrentUser();
+                    TLRPC.Chat chat = parentFragment.getCurrentChat();
+                    if (user != null) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user.id);
+                        if (timeItem != null) {
+                            args.putLong("dialog_id", parentFragment.getDialogId());
+                        }
+                        ProfileActivity fragment = new ProfileActivity(args);
+                        fragment.setPlayProfileAnimation(true);
+                        parentFragment.presentFragment(fragment);
+                    } else if (chat != null) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", chat.id);
+                        ProfileActivity fragment = new ProfileActivity(args);
+                        fragment.setChatInfo(parentFragment.getCurrentChatInfo());
+                        fragment.setPlayProfileAnimation(true);
+                        parentFragment.presentFragment(fragment);
+                    }
+                } else {
+                    delegate.didPressedRadioButton();
+                }
+            }
+        });
+
+        TLRPC.Chat chat = parentFragment.getCurrentChat();
+        typingDotsDrawable = new TypingDotsDrawable();
+        typingDotsDrawable.setIsChat(chat != null);
+        recordStatusDrawable = new RecordStatusDrawable();
+        recordStatusDrawable.setIsChat(chat != null);
+        sendingFileDrawable = new SendingFileExDrawable();
+        sendingFileDrawable.setIsChat(chat != null);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        int availableWidth = width - AndroidUtilities.dp(54 + 16);
+        avatarImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(42), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(42), MeasureSpec.EXACTLY));
+        titleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24), MeasureSpec.AT_MOST));
+        if (radioButton != null && radioButton.getVisibility() == VISIBLE) {
+            radioButton.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24), MeasureSpec.EXACTLY));
+            availableWidth -= AndroidUtilities.dp(20);
+        }
+        subtitleTextView.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20), MeasureSpec.AT_MOST));
+        if (timeItem != null) {
+            timeItem.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(34), MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(34), MeasureSpec.EXACTLY));
+        }
+        setMeasuredDimension(width, MeasureSpec.getSize(heightMeasureSpec));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        int actionBarHeight = ActionBar.getCurrentActionBarHeight();
+        int viewTop = (actionBarHeight - AndroidUtilities.dp(42)) / 2 + (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
+        avatarImageView.layout(AndroidUtilities.dp(8), viewTop, AndroidUtilities.dp(42 + 8), viewTop + AndroidUtilities.dp(42));
+        titleTextView.layout(AndroidUtilities.dp(8 + 54), viewTop + AndroidUtilities.dp(1.3f), AndroidUtilities.dp(8 + 54) + titleTextView.getMeasuredWidth(), viewTop + titleTextView.getTextHeight() + AndroidUtilities.dp(1.3f));
+        if (timeItem != null) {
+            timeItem.layout(AndroidUtilities.dp(8 + 16), viewTop + AndroidUtilities.dp(15), AndroidUtilities.dp(8 + 16 + 34), viewTop + AndroidUtilities.dp(15 + 34));
+        }
+        if (radioButton != null && radioButton.getVisibility() == VISIBLE) {
+            subtitleTextView.layout(AndroidUtilities.dp(8 + 54 + 20), viewTop + AndroidUtilities.dp(24), AndroidUtilities.dp(8 + 54 + 20) + subtitleTextView.getMeasuredWidth(), viewTop + subtitleTextView.getTextHeight() + AndroidUtilities.dp(24));
+            viewTop = viewTop + subtitleTextView.getTextHeight() / 2 + AndroidUtilities.dp(12);
+            radioButton.layout(AndroidUtilities.dp(8 + 50), viewTop, AndroidUtilities.dp(8 + 50 + 24), viewTop + AndroidUtilities.dp(24));
+        } else {
+            subtitleTextView.layout(AndroidUtilities.dp(8 + 54), viewTop + AndroidUtilities.dp(24), AndroidUtilities.dp(8 + 54) + subtitleTextView.getMeasuredWidth(), viewTop + subtitleTextView.getTextHeight() + AndroidUtilities.dp(24));
+        }
+    }
+
+    public void setRadioChecked(boolean value, boolean animated) {
+        if (radioButton == null) {
+            return;
+        }
+        radioButton.setChecked(value, animated);
+    }
+
+    public boolean isRadioChecked() {
+        return radioButton.isChecked();
+    }
+
+    public void showTimeItem() {
+        if (timeItem == null) {
+            return;
+        }
+        timeItem.setVisibility(VISIBLE);
+    }
+
+    public void hideTimeItem() {
+        if (timeItem == null) {
+            return;
+        }
+        timeItem.setVisibility(GONE);
+    }
+
+    public void setTime(int value) {
+        if (timerDrawable == null) {
+            return;
+        }
+        timerDrawable.setTime(value);
+    }
+
+    public void setTitleIcons(int leftIcon, int rightIcon) {
+        titleTextView.setLeftDrawable(leftIcon);
+        titleTextView.setRightDrawable(rightIcon);
+    }
+
+    public void setTitle(CharSequence value) {
+        titleTextView.setText(value);
+    }
+
+    public void setDelegate(ChatAvatarContainerDelegate chatAvatarContainerDelegate) {
+        delegate = chatAvatarContainerDelegate;
+    }
+
+    private void setTypingAnimation(boolean start) {
+        if (start) {
+            try {
+                Integer type = MessagesController.getInstance().printingStringsTypes.get(parentFragment.getDialogId());
+                if (type == 0) {
+                    subtitleTextView.setLeftDrawable(typingDotsDrawable);
+                    typingDotsDrawable.start();
+                    recordStatusDrawable.stop();
+                    sendingFileDrawable.stop();
+                } else if (type == 1) {
+                    subtitleTextView.setLeftDrawable(recordStatusDrawable);
+                    recordStatusDrawable.start();
+                    typingDotsDrawable.stop();
+                    sendingFileDrawable.stop();
+                } else if (type == 2) {
+                    subtitleTextView.setLeftDrawable(sendingFileDrawable);
+                    sendingFileDrawable.start();
+                    typingDotsDrawable.stop();
+                    recordStatusDrawable.stop();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            subtitleTextView.setLeftDrawable(null);
+            typingDotsDrawable.stop();
+            recordStatusDrawable.stop();
+            sendingFileDrawable.stop();
+        }
+    }
+
+    public void updateSubtitle() {
+        TLRPC.User user = parentFragment.getCurrentUser();
+        TLRPC.Chat chat = parentFragment.getCurrentChat();
+        CharSequence printString = MessagesController.getInstance().printingStrings.get(parentFragment.getDialogId());
+        if (printString != null) {
+            printString = TextUtils.replace(printString, new String[]{"..."}, new String[]{""});
+        }
+        if (printString == null || printString.length() == 0 || ChatObject.isChannel(chat) && !chat.megagroup) {
+            setTypingAnimation(false);
+            if (chat != null) {
+                TLRPC.ChatFull info = parentFragment.getCurrentChatInfo();
+                if (ChatObject.isChannel(chat)) {
+                    if (!chat.broadcast && !chat.megagroup && !(chat instanceof TLRPC.TL_channelForbidden)) {
+                        subtitleTextView.setText(LocaleController.getString("ShowDiscussion", R.string.ShowDiscussion));
+                        if (radioButton != null && radioButton.getVisibility() != VISIBLE) {
+                            radioButton.setVisibility(View.VISIBLE);
+                        }
+                    } else {
+                        if (info != null && info.participants_count != 0) {
+                            if (chat.megagroup && info.participants_count <= 200) {
+                                if (onlineCount > 1 && info.participants_count != 0) {
+                                    subtitleTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", info.participants_count), LocaleController.formatPluralString("Online", onlineCount)));
+                                } else {
+                                    subtitleTextView.setText(LocaleController.formatPluralString("Members", info.participants_count));
+                                }
+                            } else {
+                                int result[] = new int[1];
+                                String shortNumber = LocaleController.formatShortNumber(info.participants_count, result);
+                                String text = LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber);
+                                subtitleTextView.setText(text);
+                            }
+                        } else {
+                            if (chat.megagroup) {
+                                subtitleTextView.setText(LocaleController.getString("Loading", R.string.Loading).toLowerCase());
+                            } else {
+                                if ((chat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0) {
+                                    subtitleTextView.setText(LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase());
+                                } else {
+                                    subtitleTextView.setText(LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase());
+                                }
+                            }
+                        }
+                        if (radioButton != null && radioButton.getVisibility() != GONE) {
+                            radioButton.setVisibility(View.GONE);
+                        }
+                    }
+                } else {
+                    if (ChatObject.isKickedFromChat(chat)) {
+                        subtitleTextView.setText(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
+                    } else if (ChatObject.isLeftFromChat(chat)) {
+                        subtitleTextView.setText(LocaleController.getString("YouLeft", R.string.YouLeft));
+                    } else {
+                        int count = chat.participants_count;
+                        if (info != null) {
+                            count = info.participants.participants.size();
+                        }
+                        if (onlineCount > 1 && count != 0) {
+                            subtitleTextView.setText(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
+                        } else {
+                            subtitleTextView.setText(LocaleController.formatPluralString("Members", count));
+                        }
+                    }
+                }
+            } else if (user != null) {
+                user = MessagesController.getInstance().getUser(user.id);
+                String newStatus;
+                if (user.id == 333000 || user.id == 777000) {
+                    newStatus = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
+                } else if (user.bot) {
+                    newStatus = LocaleController.getString("Bot", R.string.Bot);
+                } else {
+                    newStatus = LocaleController.formatUserStatus(user);
+                }
+                subtitleTextView.setText(newStatus);
+            }
+        } else {
+            subtitleTextView.setText(printString);
+            setTypingAnimation(true);
+        }
+    }
+
+    public void checkAndUpdateAvatar() {
+        TLRPC.FileLocation newPhoto = null;
+        TLRPC.User user = parentFragment.getCurrentUser();
+        TLRPC.Chat chat = parentFragment.getCurrentChat();
+        if (user != null) {
+            if (user.photo != null) {
+                newPhoto = user.photo.photo_small;
+            }
+            avatarDrawable.setInfo(user);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                newPhoto = chat.photo.photo_small;
+            }
+            avatarDrawable.setInfo(chat);
+        }
+        if (avatarImageView != null) {
+            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
+        }
+    }
+
+    public void updateOnlineCount() {
+        onlineCount = 0;
+        TLRPC.ChatFull info = parentFragment.getCurrentChatInfo();
+        if (info == null) {
+            return;
+        }
+        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+        if (info instanceof TLRPC.TL_chatFull || info instanceof TLRPC.TL_channelFull && info.participants_count <= 200 && info.participants != null) {
+            for (int a = 0; a < info.participants.participants.size(); a++) {
+                TLRPC.ChatParticipant participant = info.participants.participants.get(a);
+                TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+                if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                    onlineCount++;
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
index 615777efe..64790946f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
@@ -51,6 +51,9 @@ public ClippingImageView(Context context) {
         matrix = new Matrix();
         drawRect = new RectF();
         bitmapRect = new RectF();
+        roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+        roundRect = new RectF();
+        shaderMatrix = new Matrix();
     }
 
     public void setAnimationValues(float[][] values) {
@@ -109,10 +112,32 @@ public void onDraw(Canvas canvas) {
             canvas.save();
 
             if (needRadius) {
-                roundRect.set(0, 0, getWidth(), getHeight());
                 shaderMatrix.reset();
-                shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                roundRect.set(0, 0, getWidth(), getHeight());
+
+                int bitmapW;
+                int bitmapH;
+                if (orientation % 360 == 90 || orientation % 360 == 270) {
+                    bitmapW = bmp.getHeight();
+                    bitmapH = bmp.getWidth();
+                } else {
+                    bitmapW = bmp.getWidth();
+                    bitmapH = bmp.getHeight();
+                }
+                float scaleW = getWidth() != 0 ? bitmapW / getWidth() : 1.0f;
+                float scaleH = getHeight() != 0 ? bitmapH / getHeight() : 1.0f;
+                float scale = Math.min(scaleW, scaleH);
+                if (Math.abs(scaleW - scaleH) > 0.00001f) {
+                    int w = (int) Math.floor(getWidth() * scale);
+                    int h = (int) Math.floor(getHeight() * scale);
+                    bitmapRect.set((bitmapW - w) / 2, (bitmapH - h) / 2, w, h);
+                    shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.START);
+                } else {
+                    bitmapRect.set(0, 0, bmp.getWidth(), bmp.getHeight());
+                    shaderMatrix.setRectToRect(bitmapRect, roundRect, Matrix.ScaleToFit.FILL);
+                }
                 bitmapShader.setLocalMatrix(shaderMatrix);
+                canvas.clipRect(clipLeft / scaleY, clipTop / scaleY, getWidth() - clipRight / scaleY, getHeight() - clipBottom / scaleY);
                 canvas.drawRoundRect(roundRect, radius, radius, roundPaint);
             } else {
                 if (orientation == 90 || orientation == 270) {
@@ -182,10 +207,7 @@ public void setImageBitmap(Bitmap bitmap) {
         if (bitmap != null) {
             bitmapRect.set(0, 0, bitmap.getWidth(), bitmap.getHeight());
             if (needRadius) {
-                roundRect = new RectF();
-                shaderMatrix = new Matrix();
                 bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
-                roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                 roundPaint.setShader(bitmapShader);
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable.java
new file mode 100644
index 000000000..7ddd35863
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable.java
@@ -0,0 +1,91 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.Components;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.PixelFormat;
+import android.graphics.drawable.Drawable;
+import android.view.animation.DecelerateInterpolator;
+
+import org.telegram.messenger.AndroidUtilities;
+
+public class CloseProgressDrawable extends Drawable {
+
+    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private long lastFrameTime;
+    private int currentAnimationTime;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator();
+    private int currentSegment;
+
+    public CloseProgressDrawable() {
+        super();
+        paint.setColor(0xff757575);
+        paint.setStrokeWidth(AndroidUtilities.dp(2));
+        paint.setStrokeCap(Paint.Cap.ROUND);
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        long newTime = System.currentTimeMillis();
+        if (lastFrameTime != 0) {
+            long dt = (newTime - lastFrameTime);
+            currentAnimationTime += dt;
+            if (currentAnimationTime > 200) {
+                currentAnimationTime = 0;
+                currentSegment++;
+                if (currentSegment == 4) {
+                    currentSegment -= 4;
+                }
+            }
+        }
+
+        canvas.save();
+        canvas.translate(getIntrinsicWidth() / 2, getIntrinsicHeight() / 2);
+        canvas.rotate(45);
+        paint.setAlpha(255 - (currentSegment % 4) * 40);
+        canvas.drawLine(-AndroidUtilities.dp(8), 0, 0, 0, paint);
+        paint.setAlpha(255 - ((currentSegment + 1) % 4) * 40);
+        canvas.drawLine(0, -AndroidUtilities.dp(8), 0, 0, paint);
+        paint.setAlpha(255 - ((currentSegment + 2) % 4) * 40);
+        canvas.drawLine(0, 0, AndroidUtilities.dp(8), 0, paint);
+        paint.setAlpha(255 - ((currentSegment + 3) % 4) * 40);
+        canvas.drawLine(0, 0, 0, AndroidUtilities.dp(8), paint);
+        canvas.restore();
+
+        lastFrameTime = newTime;
+        invalidateSelf();
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return PixelFormat.TRANSPARENT;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return AndroidUtilities.dp(24);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return AndroidUtilities.dp(24);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable2.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable2.java
new file mode 100644
index 000000000..7d93f1253
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/CloseProgressDrawable2.java
@@ -0,0 +1,143 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui.Components;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.PixelFormat;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.view.animation.DecelerateInterpolator;
+
+import org.telegram.messenger.AndroidUtilities;
+
+public class CloseProgressDrawable2 extends Drawable {
+
+    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private long lastFrameTime;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator();
+    private RectF rect = new RectF();
+    private float angle;
+    private boolean animating;
+
+    public CloseProgressDrawable2() {
+        super();
+        paint.setColor(0xffadadad);
+        paint.setStrokeWidth(AndroidUtilities.dp(2));
+        paint.setStrokeCap(Paint.Cap.ROUND);
+        paint.setStyle(Paint.Style.STROKE);
+    }
+
+    public void startAnimation() {
+        animating = true;
+        lastFrameTime = System.currentTimeMillis();
+        invalidateSelf();
+    }
+
+    public void stopAnimation() {
+        animating = false;
+    }
+
+    @Override
+    public void draw(Canvas canvas) {
+        long newTime = System.currentTimeMillis();
+        boolean invalidate = false;
+        if (lastFrameTime != 0) {
+            long dt = (newTime - lastFrameTime);
+            if (animating || angle != 0) {
+                angle += 360 * dt / 500.0f;
+                if (!animating && angle >= 720) {
+                    angle = 0;
+                } else {
+                    angle -= (int) (angle / 720) * 720;
+                }
+                invalidateSelf();
+            }
+        }
+
+        canvas.save();
+        canvas.translate(getIntrinsicWidth() / 2, getIntrinsicHeight() / 2);
+        canvas.rotate(-45);
+        float progress1 = 1.0f;
+        float progress2 = 1.0f;
+        float progress3 = 1.0f;
+        float progress4 = 0.0f;
+        if (angle >= 0 && angle < 90) {
+            progress1 = (1.0f - angle / 90.0f);
+        } else if (angle >= 90 && angle < 180) {
+            progress1 = 0.0f;
+            progress2 = 1.0f - (angle - 90) / 90.0f;
+        } else if (angle >= 180 && angle < 270) {
+            progress1 = progress2 = 0;
+            progress3 = 1.0f - (angle - 180) / 90.0f;
+        } else if (angle >= 270 && angle < 360) {
+            progress1 = progress2 = progress3 = 0;
+            progress4 = (angle - 270) / 90.0f;
+        } else if (angle >= 360 && angle < 450) {
+            progress1 = progress2 = progress3 = 0;
+            progress4 = 1.0f - (angle - 360) / 90.0f;
+        } else if (angle >= 450 && angle < 540) {
+            progress2 = progress3 = 0;
+            progress1 = (angle - 450) / 90.0f;
+        } else if (angle >= 540 && angle < 630) {
+            progress3 = 0;
+            progress2 = (angle - 540) / 90.0f;
+        } else if (angle >= 630 && angle < 720) {
+            progress3 = (angle - 630) / 90.0f;
+        }
+
+        if (progress1 != 0) {
+            canvas.drawLine(0, 0, 0, AndroidUtilities.dp(8) * progress1, paint);
+        }
+        if (progress2 != 0) {
+            canvas.drawLine(-AndroidUtilities.dp(8) * progress2, 0, 0, 0, paint);
+        }
+        if (progress3 != 0) {
+            canvas.drawLine(0, -AndroidUtilities.dp(8) * progress3, 0, 0, paint);
+        }
+        if (progress4 != 1) {
+            canvas.drawLine(AndroidUtilities.dp(8) * progress4, 0, AndroidUtilities.dp(8), 0, paint);
+        }
+
+        canvas.restore();
+
+        int cx = getBounds().centerX();
+        int cy = getBounds().centerY();
+        rect.set(cx - AndroidUtilities.dp(8), cy - AndroidUtilities.dp(8), cx + AndroidUtilities.dp(8), cy + AndroidUtilities.dp(8));
+        canvas.drawArc(rect, (angle < 360 ? 0 : angle - 360) - 45, (angle < 360 ? angle : 720 - angle), false, paint);
+
+        lastFrameTime = newTime;
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+
+    }
+
+    @Override
+    public void setColorFilter(ColorFilter cf) {
+
+    }
+
+    @Override
+    public int getOpacity() {
+        return PixelFormat.TRANSPARENT;
+    }
+
+    @Override
+    public int getIntrinsicWidth() {
+        return AndroidUtilities.dp(24);
+    }
+
+    @Override
+    public int getIntrinsicHeight() {
+        return AndroidUtilities.dp(24);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 7877474c2..63c0773bf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -48,6 +48,7 @@
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.Utilities;
 import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -77,6 +78,7 @@
         void onGifSelected(TLRPC.Document gif);
         void onGifTab(boolean opened);
         void onStickersTab(boolean opened);
+        void onClearEmojiRecent();
     }
 
     private static final Field superListenerField;
@@ -160,6 +162,8 @@ public boolean onLongClick(View view) {
                         pickerViewPopup.showAsDropDown(view, xOffset, -view.getMeasuredHeight() - popupHeight + (view.getMeasuredHeight() - emojiSize) / 2 - yOffset);
                         view.getParent().requestDisallowInterceptTouchEvent(true);
                         return true;
+                    } else if (pager.getCurrentItem() == 0) {
+                        listener.onClearEmojiRecent();
                     }
                     return false;
                 }
@@ -519,7 +523,6 @@ protected void onDraw(Canvas canvas) {
     private GifsAdapter gifsAdapter;
     private AdapterView.OnItemClickListener stickersOnItemClickListener;
 
-
     private EmojiColorPickerView pickerView;
     private EmojiPopupWindow pickerViewPopup;
     private int popupWidth;
@@ -531,8 +534,6 @@ protected void onDraw(Canvas canvas) {
     private int gifTabBum = -2;
     private boolean switchToGifTab;
 
-
-
     private int oldWidth;
     private int lastNotifyWidth;
 
@@ -667,7 +668,7 @@ public void onItemClick(View view, int position) {
                             return;
                         }
                         TLRPC.Document document = recentImages.get(position).document;
-                        listener.onStickerSelected(document);
+                        listener.onGifSelected(document);
                     }
                 });
                 gifsGridView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
@@ -966,6 +967,15 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
         loadRecents();
     }
 
+    public void clearRecentEmoji() {
+        SharedPreferences preferences = getContext().getSharedPreferences("emoji", Activity.MODE_PRIVATE);
+        preferences.edit().putBoolean("filled_default", true).commit();
+        emojiUseHistory.clear();
+        recentEmoji.clear();
+        saveRecentEmoji();
+        adapters.get(0).notifyDataSetChanged();
+    }
+
     private void showGifTab() {
         gifsGridView.setVisibility(VISIBLE);
         stickersGridView.setVisibility(GONE);
@@ -1268,7 +1278,7 @@ public void loadRecents() {
                     String[] args = str.split(",");
                     for (String arg : args) {
                         String[] args2 = arg.split("=");
-                        long value = Long.parseLong(args2[0]);
+                        long value = Utilities.parseLong(args2[0]);
                         String string = "";
                         for (int a = 0; a < 4; a++) {
                             char ch = (char) value;
@@ -1279,7 +1289,7 @@ public void loadRecents() {
                             }
                         }
                         if (string.length() > 0) {
-                            emojiUseHistory.put(string, Integer.parseInt(args2[1]));
+                            emojiUseHistory.put(string, Utilities.parseInt(args2[1]));
                         }
                     }
                 }
@@ -1291,22 +1301,25 @@ public void loadRecents() {
                     String[] args = str.split(",");
                     for (String arg : args) {
                         String[] args2 = arg.split("=");
-                        emojiUseHistory.put(args2[0], Integer.parseInt(args2[1]));
+                        emojiUseHistory.put(args2[0], Utilities.parseInt(args2[1]));
                     }
                 }
             }
             if (emojiUseHistory.isEmpty()) {
-                String[] newRecent = new String[]{
-                        "\uD83D\uDE02", "\uD83D\uDE18", "\u2764", "\uD83D\uDE0D", "\uD83D\uDE0A", "\uD83D\uDE01",
-                        "\uD83D\uDC4D", "\u263A", "\uD83D\uDE14", "\uD83D\uDE04", "\uD83D\uDE2D", "\uD83D\uDC8B",
-                        "\uD83D\uDE12", "\uD83D\uDE33", "\uD83D\uDE1C", "\uD83D\uDE48", "\uD83D\uDE09", "\uD83D\uDE03",
-                        "\uD83D\uDE22", "\uD83D\uDE1D", "\uD83D\uDE31", "\uD83D\uDE21", "\uD83D\uDE0F", "\uD83D\uDE1E",
-                        "\uD83D\uDE05", "\uD83D\uDE1A", "\uD83D\uDE4A", "\uD83D\uDE0C", "\uD83D\uDE00", "\uD83D\uDE0B",
-                        "\uD83D\uDE06", "\uD83D\uDC4C", "\uD83D\uDE10", "\uD83D\uDE15"};
-                for (int i = 0; i < newRecent.length; i++) {
-                    emojiUseHistory.put(newRecent[i], newRecent.length - i);
+                if (!preferences.getBoolean("filled_default", false)) {
+                    String[] newRecent = new String[]{
+                            "\uD83D\uDE02", "\uD83D\uDE18", "\u2764", "\uD83D\uDE0D", "\uD83D\uDE0A", "\uD83D\uDE01",
+                            "\uD83D\uDC4D", "\u263A", "\uD83D\uDE14", "\uD83D\uDE04", "\uD83D\uDE2D", "\uD83D\uDC8B",
+                            "\uD83D\uDE12", "\uD83D\uDE33", "\uD83D\uDE1C", "\uD83D\uDE48", "\uD83D\uDE09", "\uD83D\uDE03",
+                            "\uD83D\uDE22", "\uD83D\uDE1D", "\uD83D\uDE31", "\uD83D\uDE21", "\uD83D\uDE0F", "\uD83D\uDE1E",
+                            "\uD83D\uDE05", "\uD83D\uDE1A", "\uD83D\uDE4A", "\uD83D\uDE0C", "\uD83D\uDE00", "\uD83D\uDE0B",
+                            "\uD83D\uDE06", "\uD83D\uDC4C", "\uD83D\uDE10", "\uD83D\uDE15"};
+                    for (int i = 0; i < newRecent.length; i++) {
+                        emojiUseHistory.put(newRecent[i], newRecent.length - i);
+                    }
+                    preferences.edit().putBoolean("filled_default", true).commit();
+                    saveRecentEmoji();
                 }
-                saveRecentEmoji();
             }
             sortEmoji();
             adapters.get(0).notifyDataSetChanged();
@@ -1338,8 +1351,8 @@ public void loadRecents() {
                     for (int a = 0; a < args.length; a++) {
                         String arg = args[a];
                         String[] args2 = arg.split("=");
-                        Long key = Long.parseLong(args2[0]);
-                        stickersUseHistory.put(key, Integer.parseInt(args2[1]));
+                        Long key = Utilities.parseLong(args2[0]);
+                        stickersUseHistory.put(key, Utilities.parseInt(args2[1]));
                         newRecentStickers.add(key);
                     }
                     Collections.sort(newRecentStickers, new Comparator<Long>() {
@@ -1367,7 +1380,13 @@ public int compare(Long lhs, Long rhs) {
                     str = preferences.getString("stickers2", "");
                     String[] args = str.split(",");
                     for (int a = 0; a < args.length; a++) {
-                        newRecentStickers.add(Long.parseLong(args[a]));
+                        if (args[a].length() == 0) {
+                            continue;
+                        }
+                        long id = Utilities.parseLong(args[a]);
+                        if (id != 0) {
+                            newRecentStickers.add(id);
+                        }
                     }
                 }
                 sortStickers();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
index 930ad1917..f558d9d2d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/FrameLayoutFixed.java
@@ -14,6 +14,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 
 import java.util.ArrayList;
@@ -155,6 +156,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 super.onMeasure(widthMeasureSpec, heightMeasureSpec);
             } catch (Exception e2) {
                 FileLog.e("tmessages", e2);
+                setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(10), MeasureSpec.EXACTLY));
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterDrawable.java
index e8567c3e7..91bd7ead0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LetterDrawable.java
@@ -23,7 +23,7 @@
 
 public class LetterDrawable extends Drawable {
 
-    private static Paint paint = new Paint();
+    public static Paint paint = new Paint();
     private static TextPaint namePaint;
 
     private StaticLayout textLayout;
@@ -36,7 +36,7 @@ public LetterDrawable() {
         super();
 
         if (namePaint == null) {
-            paint.setColor(0xffdfdfdf);
+            paint.setColor(0xfff0f0f0);
             namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
             namePaint.setColor(0xffffffff);
             namePaint.setTextSize(AndroidUtilities.dp(28));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java
index 4f146c6dc..f7203005e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LinkPath.java
@@ -16,15 +16,19 @@
     private StaticLayout currentLayout;
     private int currentLine;
     private float lastTop = -1;
+    private float heightOffset;
 
-    public void setCurrentLayout(StaticLayout layout, int start) {
+    public void setCurrentLayout(StaticLayout layout, int start, float yOffset) {
         currentLayout = layout;
         currentLine = layout.getLineForOffset(start);
         lastTop = -1;
+        heightOffset = yOffset;
     }
 
     @Override
     public void addRect(float left, float top, float right, float bottom, Direction dir) {
+        top += heightOffset;
+        bottom += heightOffset;
         if (lastTop == -1) {
             lastTop = top;
         } else if (lastTop != top) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
index 3c12182b8..be8516efa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
@@ -24,6 +24,7 @@
 
     public interface PhotoCropViewDelegate {
         void needMoveImageTo(float x, float y, float s, boolean animated);
+        Bitmap getBitmap();
     }
 
     private boolean freeformCrop = true;
@@ -38,11 +39,11 @@
     private float oldX = 0, oldY = 0;
     private int bitmapWidth = 1, bitmapHeight = 1, bitmapX, bitmapY;
     private float rectX = -1, rectY = -1;
-    private Bitmap bitmapToEdit;
     private float bitmapGlobalScale = 1;
     private float bitmapGlobalX = 0;
     private float bitmapGlobalY = 0;
     private PhotoCropViewDelegate delegate;
+    private Bitmap bitmapToEdit;
 
     private RectF animationStartValues;
     private RectF animationEndValues;
@@ -472,6 +473,11 @@ public float getLimitHeight() {
     }
 
     private Bitmap createBitmap(int x, int y, int w, int h) {
+        Bitmap newBimap = delegate.getBitmap();
+        if (newBimap != null) {
+            bitmapToEdit = newBimap;
+        }
+
         Bitmap bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
         Canvas canvas = new Canvas(bitmap);
         Paint paint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG);
@@ -495,6 +501,11 @@ private Bitmap createBitmap(int x, int y, int w, int h) {
     }
 
     public Bitmap getBitmap() {
+        Bitmap newBimap = delegate.getBitmap();
+        if (newBimap != null) {
+            bitmapToEdit = newBimap;
+        }
+
         float bitmapScaledWidth = bitmapWidth * bitmapGlobalScale;
         float bitmapScaledHeight = bitmapHeight * bitmapGlobalScale;
         float bitmapStartX = (getWidth() - AndroidUtilities.dp(28) - bitmapScaledWidth) / 2 + bitmapGlobalX + AndroidUtilities.dp(14);
@@ -658,6 +669,11 @@ public void setDelegate(PhotoCropViewDelegate delegate) {
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         super.onLayout(changed, left, top, right, bottom);
 
+        Bitmap newBimap = delegate.getBitmap();
+        if (newBimap != null) {
+            bitmapToEdit = newBimap;
+        }
+
         if (bitmapToEdit == null) {
             return;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index 2eb4445a1..c5a162982 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -40,6 +40,7 @@
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.PhotoEditToolCell;
 
 import java.nio.ByteBuffer;
@@ -2006,7 +2007,9 @@ public void onSurfaceTextureSizeChanged(SurfaceTexture surface, final int width,
                     eglThread.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            eglThread.requestRender(false);
+                            if (eglThread != null) {
+                                eglThread.requestRender(false);
+                            }
                         }
                     });
                 }
@@ -2066,7 +2069,7 @@ public void valueChanged() {
         cancelTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         cancelTextView.setTextColor(0xffffffff);
         cancelTextView.setGravity(Gravity.CENTER);
-        cancelTextView.setBackgroundResource(R.drawable.bar_selector_picker);
+        cancelTextView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false));
         cancelTextView.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         cancelTextView.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
         cancelTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -2076,7 +2079,7 @@ public void valueChanged() {
         doneTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         doneTextView.setTextColor(0xff51bdf3);
         doneTextView.setGravity(Gravity.CENTER);
-        doneTextView.setBackgroundResource(R.drawable.bar_selector_picker);
+        doneTextView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false));
         doneTextView.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
         doneTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -2167,7 +2170,7 @@ public void onItemClick(View view, int position) {
 
         ImageView imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.edit_cancel);
-        imageView.setBackgroundResource(R.drawable.bar_selector_picker);
+        imageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false));
         imageView.setPadding(AndroidUtilities.dp(22), 0, AndroidUtilities.dp(22), 0);
         frameLayout.addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
         imageView.setOnClickListener(new OnClickListener() {
@@ -2215,7 +2218,7 @@ public void onClick(View v) {
 
         imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.edit_doneblue);
-        imageView.setBackgroundResource(R.drawable.bar_selector_picker);
+        imageView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false));
         imageView.setPadding(AndroidUtilities.dp(22), AndroidUtilities.dp(1), AndroidUtilities.dp(22), 0);
         frameLayout.addView(imageView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
         imageView.setOnClickListener(new OnClickListener() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
index 505cbb901..3da5c1ac1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
@@ -9,13 +9,17 @@
 package org.telegram.ui.Components;
 
 import android.content.Context;
+import android.os.Build;
 import android.text.Editable;
 import android.text.InputFilter;
 import android.text.TextWatcher;
 import android.text.style.ImageSpan;
 import android.util.TypedValue;
+import android.view.ActionMode;
 import android.view.Gravity;
 import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
@@ -34,6 +38,9 @@
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+
 public class PhotoViewerCaptionEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierFrameLayoutPhoto.SizeNotifierFrameLayoutPhotoDelegate {
 
     public interface PhotoViewerCaptionEnterViewDelegate {
@@ -47,6 +54,8 @@
     private EmojiView emojiView;
     private SizeNotifierFrameLayoutPhoto sizeNotifierLayout;
 
+    private ActionMode currentActionMode;
+
     private AnimatorSetProxy runningAnimation;
     private AnimatorSetProxy runningAnimation2;
     private ObjectAnimatorProxy runningAnimationAudio;
@@ -65,11 +74,14 @@
 
     private PhotoViewerCaptionEnterViewDelegate delegate;
 
-    public PhotoViewerCaptionEnterView(Context context, SizeNotifierFrameLayoutPhoto parent) {
+    private View windowView;
+
+    public PhotoViewerCaptionEnterView(Context context, SizeNotifierFrameLayoutPhoto parent, final View window) {
         super(context);
         setBackgroundColor(0x7f000000);
         setFocusable(true);
         setFocusableInTouchMode(true);
+        windowView = window;
 
         sizeNotifierLayout = parent;
 
@@ -97,6 +109,63 @@ public void onClick(View view) {
         });
 
         messageEditText = new EditText(context);
+        if (Build.VERSION.SDK_INT >= 23) {
+            messageEditText.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
+                @Override
+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                    currentActionMode = mode;
+                    return true;
+                }
+
+                @Override
+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                    if (Build.VERSION.SDK_INT >= 23) {
+                        fixActionMode(mode);
+                    }
+                    return true;
+                }
+
+                @Override
+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                    return false;
+                }
+
+                @Override
+                public void onDestroyActionMode(ActionMode mode) {
+                    if (currentActionMode == mode) {
+                        currentActionMode = null;
+                    }
+                }
+            });
+
+            messageEditText.setCustomInsertionActionModeCallback(new ActionMode.Callback() {
+                @Override
+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                    currentActionMode = mode;
+                    return true;
+                }
+
+                @Override
+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                    if (Build.VERSION.SDK_INT >= 23) {
+                        fixActionMode(mode);
+                    }
+                    return true;
+                }
+
+                @Override
+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                    return false;
+                }
+
+                @Override
+                public void onDestroyActionMode(ActionMode mode) {
+                    if (currentActionMode == mode) {
+                        currentActionMode = null;
+                    }
+                }
+            });
+        }
         messageEditText.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
         messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
         messageEditText.setInputType(messageEditText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES);
@@ -116,11 +185,15 @@ public void onClick(View view) {
         messageEditText.setOnKeyListener(new OnKeyListener() {
             @Override
             public boolean onKey(View view, int i, KeyEvent keyEvent) {
-                if (i == KeyEvent.KEYCODE_BACK && !keyboardVisible && isPopupShowing()) {
-                    if (keyEvent.getAction() == 1) {
-                        showPopup(0);
+                if (i == KeyEvent.KEYCODE_BACK) {
+                    if (hideActionMode()) {
+                        return true;
+                    } else if (!keyboardVisible && isPopupShowing()) {
+                        if (keyEvent.getAction() == 1) {
+                            showPopup(0);
+                        }
+                        return true;
                     }
-                    return true;
                 }
                 return false;
             }
@@ -187,6 +260,47 @@ public void afterTextChanged(Editable editable) {
         });
     }
 
+    public boolean hideActionMode() {
+        if (Build.VERSION.SDK_INT >= 23 && currentActionMode != null) {
+            currentActionMode.finish();
+            currentActionMode = null;
+            return true;
+        }
+        return false;
+    }
+
+    @SuppressWarnings("unchecked")
+    private void fixActionMode(ActionMode mode) {
+        try {
+            Class classActionMode = Class.forName("com.android.internal.view.FloatingActionMode");
+            Field fieldToolbar = classActionMode.getDeclaredField("mFloatingToolbar");
+            fieldToolbar.setAccessible(true);
+            Object toolbar = fieldToolbar.get(mode);
+
+            Class classToolbar = Class.forName("com.android.internal.widget.FloatingToolbar");
+            Field fieldToolbarPopup = classToolbar.getDeclaredField("mPopup");
+            Field fieldToolbarWidth = classToolbar.getDeclaredField("mWidthChanged");
+            fieldToolbarPopup.setAccessible(true);
+            fieldToolbarWidth.setAccessible(true);
+            Object popup = fieldToolbarPopup.get(toolbar);
+
+            Class classToolbarPopup = Class.forName("com.android.internal.widget.FloatingToolbar$FloatingToolbarPopup");
+            Field fieldToolbarPopupParent = classToolbarPopup.getDeclaredField("mParent");
+            fieldToolbarPopupParent.setAccessible(true);
+
+            View currentView = (View) fieldToolbarPopupParent.get(popup);
+            if (currentView != windowView) {
+                fieldToolbarPopupParent.set(popup, windowView);
+
+                Method method = classActionMode.getDeclaredMethod("updateViewLocationInWindow");
+                method.setAccessible(true);
+                method.invoke(mode);
+            }
+        } catch (Throwable e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
     private void onWindowSizeChanged() {
         int size = sizeNotifierLayout.getHeight();
         if (!keyboardVisible) {
@@ -343,6 +457,11 @@ public void onGifTab(boolean opened) {
                     public void onStickersTab(boolean opened) {
 
                     }
+
+                    @Override
+                    public void onClearEmojiRecent() {
+
+                    }
                 });
                 sizeNotifierLayout.addView(emojiView);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
index de73728f3..8aaf358f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PickerBottomLayout.java
@@ -19,6 +19,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.Theme;
 
 public class PickerBottomLayout extends FrameLayout {
 
@@ -43,7 +44,7 @@ public PickerBottomLayout(Context context, boolean darkTheme) {
         cancelButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         cancelButton.setTextColor(isDarkTheme ? 0xffffffff : 0xff19a7e8);
         cancelButton.setGravity(Gravity.CENTER);
-        cancelButton.setBackgroundResource(isDarkTheme ? R.drawable.bar_selector_picker : R.drawable.bar_selector_audio);
+        cancelButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(isDarkTheme ? Theme.ACTION_BAR_PICKER_SELECTOR_COLOR : Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
         cancelButton.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
         cancelButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -51,7 +52,7 @@ public PickerBottomLayout(Context context, boolean darkTheme) {
 
         doneButton = new LinearLayout(context);
         doneButton.setOrientation(LinearLayout.HORIZONTAL);
-        doneButton.setBackgroundResource(isDarkTheme ? R.drawable.bar_selector_picker : R.drawable.bar_selector_audio);
+        doneButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(isDarkTheme ? Theme.ACTION_BAR_PICKER_SELECTOR_COLOR : Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
         doneButton.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
         addView(doneButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PlayerView.java
index d85fae84a..18cbeaf85 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PlayerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PlayerView.java
@@ -32,6 +32,7 @@
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.AudioPlayerActivity;
 
 public class PlayerView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
@@ -54,7 +55,7 @@ public PlayerView(Context context, BaseFragment parentFragment) {
 
         setTag(1);
         FrameLayout frameLayout = new FrameLayout(context);
-        frameLayout.setBackgroundColor(0xffffffff);
+        frameLayout.setBackgroundColor(Theme.INAPP_PLAYER_BACKGROUND_COLOR);
         addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 36, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 0));
 
         View shadow = new View(context);
@@ -76,7 +77,7 @@ public void onClick(View v) {
         });
 
         titleTextView = new TextView(context);
-        titleTextView.setTextColor(0xff212121);
+        titleTextView.setTextColor(Theme.INAPP_PLAYER_TITLE_TEXT_COLOR);
         titleTextView.setMaxLines(1);
         titleTextView.setLines(1);
         titleTextView.setSingleLine(true);
@@ -163,9 +164,11 @@ private void checkPlayer(boolean create) {
             lastMessageObject = null;
             if (visible) {
                 visible = false;
-                if (create && topPadding != 0) {
+                if (create) {
                     clearAnimation();
-                    setVisibility(GONE);
+                    if (getVisibility() != GONE) {
+                        setVisibility(GONE);
+                    }
                     setTopPadding(0);
                 } else {
                     if (animatorSet != null) {
@@ -233,7 +236,7 @@ public void onAnimationEnd(Object animation) {
                     stringBuilder = new SpannableStringBuilder(String.format("%s - %s", messageObject.getMusicAuthor(), messageObject.getMusicTitle()));
                     titleTextView.setEllipsize(TextUtils.TruncateAt.END);
                 }
-                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"), 0, Theme.INAPP_PLAYER_PERFORMER_TEXT_COLOR);
                 stringBuilder.setSpan(span, 0, messageObject.getMusicAuthor().length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
                 titleTextView.setText(stringBuilder);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
index c68e8709b..a6a40c039 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
@@ -25,6 +25,7 @@
 import org.telegram.messenger.R;
 import org.telegram.messenger.MessageObject;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.BaseCell;
 
 import java.io.File;
@@ -60,23 +61,23 @@ public PopupAudioView(Context context) {
         super(context);
         if (backgroundMediaDrawableIn == null) {
             backgroundMediaDrawableIn = getResources().getDrawable(R.drawable.msg_in_photo);
-            statesDrawable[0][0] = getResources().getDrawable(R.drawable.play_w2);
-            statesDrawable[0][1] = getResources().getDrawable(R.drawable.play_w2_pressed);
-            statesDrawable[1][0] = getResources().getDrawable(R.drawable.pause_w2);
-            statesDrawable[1][1] = getResources().getDrawable(R.drawable.pause_w2_pressed);
-            statesDrawable[2][0] = getResources().getDrawable(R.drawable.download_g);
-            statesDrawable[2][1] = getResources().getDrawable(R.drawable.download_g_pressed);
-            statesDrawable[3][0] = getResources().getDrawable(R.drawable.pause_g);
-            statesDrawable[3][1] = getResources().getDrawable(R.drawable.pause_g_pressed);
-
-            statesDrawable[4][0] = getResources().getDrawable(R.drawable.play_w);
-            statesDrawable[4][1] = getResources().getDrawable(R.drawable.play_w_pressed);
-            statesDrawable[5][0] = getResources().getDrawable(R.drawable.pause_w);
-            statesDrawable[5][1] = getResources().getDrawable(R.drawable.pause_w_pressed);
-            statesDrawable[6][0] = getResources().getDrawable(R.drawable.download_b);
-            statesDrawable[6][1] = getResources().getDrawable(R.drawable.download_b_pressed);
-            statesDrawable[7][0] = getResources().getDrawable(R.drawable.pause_b);
-            statesDrawable[7][1] = getResources().getDrawable(R.drawable.pause_b_pressed);
+            statesDrawable[0][0] = getResources().getDrawable(R.drawable.play_g);
+            statesDrawable[0][1] = getResources().getDrawable(R.drawable.play_g_s);
+            statesDrawable[1][0] = getResources().getDrawable(R.drawable.pause_g);
+            statesDrawable[1][1] = getResources().getDrawable(R.drawable.pause_g_s);
+            statesDrawable[2][0] = getResources().getDrawable(R.drawable.file_g_load);
+            statesDrawable[2][1] = getResources().getDrawable(R.drawable.file_g_load_s);
+            statesDrawable[3][0] = getResources().getDrawable(R.drawable.file_g_cancel);
+            statesDrawable[3][1] = getResources().getDrawable(R.drawable.file_g_cancel_s);
+
+            statesDrawable[4][0] = getResources().getDrawable(R.drawable.play_b);
+            statesDrawable[4][1] = getResources().getDrawable(R.drawable.play_b_s);
+            statesDrawable[5][0] = getResources().getDrawable(R.drawable.pause_b);
+            statesDrawable[5][1] = getResources().getDrawable(R.drawable.pause_b_s);
+            statesDrawable[6][0] = getResources().getDrawable(R.drawable.file_b_load);
+            statesDrawable[6][1] = getResources().getDrawable(R.drawable.file_b_load_s);
+            statesDrawable[7][0] = getResources().getDrawable(R.drawable.file_b_cancel);
+            statesDrawable[7][1] = getResources().getDrawable(R.drawable.file_b_cancel_s);
 
             timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             timePaint.setTextSize(AndroidUtilities.dp(16));
@@ -91,7 +92,7 @@ public PopupAudioView(Context context) {
 
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject) {
-            seekBar.type = 1;
+            seekBar.setColors(Theme.MSG_IN_AUDIO_SEEKBAR_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_FILL_COLOR, Theme.MSG_IN_AUDIO_SEEKBAR_SELECTED_COLOR);
             progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
 
             currentMessageObject = messageObject;
@@ -123,8 +124,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         buttonX = AndroidUtilities.dp(10);
         timeX = getMeasuredWidth() - timeWidth - AndroidUtilities.dp(16);
 
-        seekBar.width = getMeasuredWidth() - AndroidUtilities.dp(70) - timeWidth;
-        seekBar.height = AndroidUtilities.dp(30);
+        seekBar.setSize(getMeasuredWidth() - AndroidUtilities.dp(70) - timeWidth, AndroidUtilities.dp(30));
         progressView.width = getMeasuredWidth() - AndroidUtilities.dp(94) - timeWidth;
         progressView.height = AndroidUtilities.dp(30);
         seekBarY = AndroidUtilities.dp(13);
@@ -248,11 +248,11 @@ private void didPressedButton() {
                 invalidate();
             }
         } else if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
+            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
             buttonState = 3;
             invalidate();
         } else if (buttonState == 3) {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
+            FileLoader.getInstance().cancelLoadFile(currentMessageObject.getDocument());
             buttonState = 2;
             invalidate();
         }
@@ -269,8 +269,8 @@ public void updateProgress() {
 
         int duration = 0;
         if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
-            for (int a = 0; a < currentMessageObject.messageOwner.media.document.attributes.size(); a++) {
-                TLRPC.DocumentAttribute attribute = currentMessageObject.messageOwner.media.document.attributes.get(a);
+            for (int a = 0; a < currentMessageObject.getDocument().attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = currentMessageObject.getDocument().attributes.get(a);
                 if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
                     duration = attribute.duration;
                     break;
@@ -289,7 +289,7 @@ public void updateProgress() {
 
     public void downloadAudioIfNeed() {
         if (buttonState == 2) {
-            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
+            FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
             buttonState = 3;
             invalidate();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
index 4f68cd136..a21a27f36 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadialProgress.java
@@ -27,7 +27,7 @@
     private float animatedProgressValue = 0;
     private RectF progressRect = new RectF();
     private RectF cicleRect = new RectF();
-    private View parent = null;
+    private View parent;
     private float animatedAlphaValue = 1.0f;
 
     private boolean currentWithRound;
@@ -37,8 +37,9 @@
     private boolean hideCurrentDrawable;
     private int progressColor = 0xffffffff;
 
-    private static DecelerateInterpolator decelerateInterpolator = null;
-    private static Paint progressPaint = null;
+    private static DecelerateInterpolator decelerateInterpolator;
+    private static Paint progressPaint;
+    private boolean alphaForPrevious = true;
 
     public RadialProgress(View parentView) {
         if (decelerateInterpolator == null) {
@@ -46,7 +47,7 @@ public RadialProgress(View parentView) {
             progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             progressPaint.setStyle(Paint.Style.STROKE);
             progressPaint.setStrokeCap(Paint.Cap.ROUND);
-            progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+            progressPaint.setStrokeWidth(AndroidUtilities.dp(3));
         }
         parent = parentView;
     }
@@ -55,6 +56,10 @@ public void setProgressRect(int left, int top, int right, int bottom) {
         progressRect.set(left, top, right, bottom);
     }
 
+    public void setAlphaForPrevious(boolean value) {
+        alphaForPrevious = value;
+    }
+
     private void updateAnimation(boolean progress) {
         long newTime = System.currentTimeMillis();
         long dt = newTime - lastUpdateTime;
@@ -105,10 +110,17 @@ public void setHideCurrentDrawable(boolean value) {
     }
 
     public void setProgress(float value, boolean animated) {
+        if (value != 1 && animatedAlphaValue != 0 && previousDrawable != null) {
+            animatedAlphaValue = 0.0f;
+            previousDrawable = null;
+        }
         if (!animated) {
             animatedProgressValue = value;
             animationProgressStart = value;
         } else {
+            if (animatedProgressValue > value) {
+                animatedProgressValue = value;
+            }
             animationProgressStart = animatedProgressValue;
         }
         currentProgress = value;
@@ -125,10 +137,10 @@ private void invalidateParent() {
     public void setBackground(Drawable drawable, boolean withRound, boolean animated) {
         lastUpdateTime = System.currentTimeMillis();
         if (animated && currentDrawable != drawable) {
-            setProgress(1, animated);
             previousDrawable = currentDrawable;
             previousWithRound = currentWithRound;
             animatedAlphaValue = 1.0f;
+            setProgress(1, animated);
         } else {
             previousDrawable = null;
             previousWithRound = false;
@@ -156,7 +168,11 @@ public float getAlpha() {
 
     public void draw(Canvas canvas) {
         if (previousDrawable != null) {
-            previousDrawable.setAlpha((int)(255 * animatedAlphaValue));
+            if (alphaForPrevious) {
+                previousDrawable.setAlpha((int) (255 * animatedAlphaValue));
+            } else {
+                previousDrawable.setAlpha(255);
+            }
             previousDrawable.setBounds((int)progressRect.left, (int)progressRect.top, (int)progressRect.right, (int)progressRect.bottom);
             previousDrawable.draw(canvas);
         }
@@ -172,7 +188,7 @@ public void draw(Canvas canvas) {
         }
 
         if (currentWithRound || previousWithRound) {
-            int diff = AndroidUtilities.dp(1);
+            int diff = AndroidUtilities.dp(4);
             progressPaint.setColor(progressColor);
             if (previousWithRound) {
                 progressPaint.setAlpha((int)(255 * animatedAlphaValue));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java
index 1dd5e1a50..93bd1efff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RadioButton.java
@@ -21,6 +21,7 @@
 import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
+import org.telegram.ui.ActionBar.Theme;
 
 public class RadioButton extends View {
 
@@ -30,8 +31,8 @@
     private static Paint eraser;
     private static Paint checkedPaint;
 
-    private int checkedColor = 0xffd7e8f7;
-    private int color = 0xffd7e8f7;
+    private int checkedColor = Theme.ACTION_BAR_SUBTITLE_COLOR;
+    private int color = Theme.ACTION_BAR_SUBTITLE_COLOR;
 
     private float progress;
     private ObjectAnimatorProxy checkAnimator;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java
index 8f93244c5..6bcf6de14 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecordStatusDrawable.java
@@ -15,6 +15,7 @@
 import android.graphics.drawable.Drawable;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.ActionBar.Theme;
 
 public class RecordStatusDrawable extends Drawable {
 
@@ -27,7 +28,7 @@
 
     public RecordStatusDrawable() {
         super();
-        paint.setColor(0xffd7e8f7);
+        paint.setColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
         paint.setStyle(Paint.Style.STROKE);
         paint.setStrokeWidth(AndroidUtilities.dp(2));
         paint.setStrokeCap(Paint.Cap.ROUND);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java
deleted file mode 100644
index 5d705c37d..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-
-import org.telegram.messenger.R;
-
-public class ResourceLoader {
-
-    public static Drawable backgroundDrawableIn;
-    public static Drawable backgroundDrawableInSelected;
-    public static Drawable backgroundDrawableOut;
-    public static Drawable backgroundDrawableOutSelected;
-    public static Drawable backgroundMediaDrawableIn;
-    public static Drawable backgroundMediaDrawableInSelected;
-    public static Drawable backgroundMediaDrawableOut;
-    public static Drawable backgroundMediaDrawableOutSelected;
-    public static Drawable checkDrawable;
-    public static Drawable halfCheckDrawable;
-    public static Drawable clockDrawable;
-    public static Drawable broadcastDrawable;
-    public static Drawable checkMediaDrawable;
-    public static Drawable halfCheckMediaDrawable;
-    public static Drawable clockMediaDrawable;
-    public static Drawable broadcastMediaDrawable;
-    public static Drawable errorDrawable;
-    public static Drawable backgroundBlack;
-    public static Drawable backgroundBlue;
-    public static Drawable mediaBackgroundDrawable;
-    public static Drawable[] clockChannelDrawable = new Drawable[2];
-
-    public static Drawable[][] shareDrawable = new Drawable[2][2];
-
-    public static Drawable[] viewsCountDrawable = new Drawable[2];
-    public static Drawable viewsOutCountDrawable;
-    public static Drawable viewsMediaCountDrawable;
-
-    public static Drawable geoInDrawable;
-    public static Drawable geoOutDrawable;
-
-    public static Drawable[][] audioStatesDrawable = new Drawable[10][3];
-
-    public static Drawable[] placeholderDocDrawable = new Drawable[3];
-    public static Drawable videoIconDrawable;
-    public static Drawable[] docMenuDrawable = new Drawable[3];
-    public static Drawable[] buttonStatesDrawables = new Drawable[8];
-    public static Drawable[][] buttonStatesDrawablesDoc = new Drawable[3][3];
-
-    public static void loadRecources(Context context) {
-        if (backgroundDrawableIn == null) {
-            backgroundDrawableIn = context.getResources().getDrawable(R.drawable.msg_in);
-            backgroundDrawableInSelected = context.getResources().getDrawable(R.drawable.msg_in_selected);
-            backgroundDrawableOut = context.getResources().getDrawable(R.drawable.msg_out);
-            backgroundDrawableOutSelected = context.getResources().getDrawable(R.drawable.msg_out_selected);
-            backgroundMediaDrawableIn = context.getResources().getDrawable(R.drawable.msg_in_photo);
-            backgroundMediaDrawableInSelected = context.getResources().getDrawable(R.drawable.msg_in_photo_selected);
-            backgroundMediaDrawableOut = context.getResources().getDrawable(R.drawable.msg_out_photo);
-            backgroundMediaDrawableOutSelected = context.getResources().getDrawable(R.drawable.msg_out_photo_selected);
-            checkDrawable = context.getResources().getDrawable(R.drawable.msg_check);
-            halfCheckDrawable = context.getResources().getDrawable(R.drawable.msg_halfcheck);
-            clockDrawable = context.getResources().getDrawable(R.drawable.msg_clock);
-            checkMediaDrawable = context.getResources().getDrawable(R.drawable.msg_check_w);
-            halfCheckMediaDrawable = context.getResources().getDrawable(R.drawable.msg_halfcheck_w);
-            clockMediaDrawable = context.getResources().getDrawable(R.drawable.msg_clock_photo);
-            clockChannelDrawable[0] = context.getResources().getDrawable(R.drawable.msg_clock2);
-            clockChannelDrawable[1] = context.getResources().getDrawable(R.drawable.msg_clock2_s);
-            errorDrawable = context.getResources().getDrawable(R.drawable.msg_warning);
-            mediaBackgroundDrawable = context.getResources().getDrawable(R.drawable.phototime);
-            broadcastDrawable = context.getResources().getDrawable(R.drawable.broadcast3);
-            broadcastMediaDrawable = context.getResources().getDrawable(R.drawable.broadcast4);
-            backgroundBlack = context.getResources().getDrawable(R.drawable.system_black);
-            backgroundBlue = context.getResources().getDrawable(R.drawable.system_blue);
-
-            viewsCountDrawable[0] = context.getResources().getDrawable(R.drawable.post_views);
-            viewsCountDrawable[1] = context.getResources().getDrawable(R.drawable.post_views_s);
-            viewsOutCountDrawable = context.getResources().getDrawable(R.drawable.post_viewsg);
-            viewsMediaCountDrawable = context.getResources().getDrawable(R.drawable.post_views_w);
-
-            audioStatesDrawable[0][2] = audioStatesDrawable[0][0] = context.getResources().getDrawable(R.drawable.play_w2);
-            audioStatesDrawable[0][1] = context.getResources().getDrawable(R.drawable.play_w2_pressed);
-
-            audioStatesDrawable[1][2] = audioStatesDrawable[1][0] = context.getResources().getDrawable(R.drawable.pause_w2);
-            audioStatesDrawable[1][1] = context.getResources().getDrawable(R.drawable.pause_w2_pressed);
-
-            audioStatesDrawable[2][0] = context.getResources().getDrawable(R.drawable.download_g);
-            audioStatesDrawable[2][1] = context.getResources().getDrawable(R.drawable.download_g_pressed);
-            audioStatesDrawable[2][2] = context.getResources().getDrawable(R.drawable.download_g_s);
-
-            audioStatesDrawable[3][0] = context.getResources().getDrawable(R.drawable.pause_g);
-            audioStatesDrawable[3][1] = context.getResources().getDrawable(R.drawable.pause_g_pressed);
-            audioStatesDrawable[3][2] = context.getResources().getDrawable(R.drawable.pause_g_s);
-
-            audioStatesDrawable[4][0] = context.getResources().getDrawable(R.drawable.cancel_g);
-            audioStatesDrawable[4][1] = context.getResources().getDrawable(R.drawable.cancel_g_pressed);
-            audioStatesDrawable[4][2] = context.getResources().getDrawable(R.drawable.cancel_g_s);
-
-            audioStatesDrawable[5][2] = audioStatesDrawable[5][0] = context.getResources().getDrawable(R.drawable.play_w);
-            audioStatesDrawable[5][1] = context.getResources().getDrawable(R.drawable.play_w_pressed);
-
-            audioStatesDrawable[6][2] = audioStatesDrawable[6][0] = context.getResources().getDrawable(R.drawable.pause_w);
-            audioStatesDrawable[6][1] = context.getResources().getDrawable(R.drawable.pause_w_pressed);
-
-            audioStatesDrawable[7][0] = context.getResources().getDrawable(R.drawable.download_b);
-            audioStatesDrawable[7][1] = context.getResources().getDrawable(R.drawable.download_b_pressed);
-            audioStatesDrawable[7][2] = context.getResources().getDrawable(R.drawable.download_b_s);
-
-            audioStatesDrawable[8][0] = context.getResources().getDrawable(R.drawable.pause_b);
-            audioStatesDrawable[8][1] = context.getResources().getDrawable(R.drawable.pause_b_pressed);
-            audioStatesDrawable[8][2] = context.getResources().getDrawable(R.drawable.pause_b_s);
-
-            audioStatesDrawable[9][0] = context.getResources().getDrawable(R.drawable.cancel_b);
-            audioStatesDrawable[9][1] = context.getResources().getDrawable(R.drawable.cancel_b_pressed);
-            audioStatesDrawable[9][2] = context.getResources().getDrawable(R.drawable.cancel_b_s);
-
-            placeholderDocDrawable[0] = context.getResources().getDrawable(R.drawable.doc_blue);
-            placeholderDocDrawable[1] = context.getResources().getDrawable(R.drawable.doc_green);
-            placeholderDocDrawable[2] = context.getResources().getDrawable(R.drawable.doc_blue_s);
-            buttonStatesDrawables[0] = context.getResources().getDrawable(R.drawable.photoload);
-            buttonStatesDrawables[1] = context.getResources().getDrawable(R.drawable.photocancel);
-            buttonStatesDrawables[2] = context.getResources().getDrawable(R.drawable.photogif);
-            buttonStatesDrawables[3] = context.getResources().getDrawable(R.drawable.playvideo);
-            buttonStatesDrawables[4] = context.getResources().getDrawable(R.drawable.photopause);
-            buttonStatesDrawables[5] = context.getResources().getDrawable(R.drawable.burn);
-            buttonStatesDrawables[6] = context.getResources().getDrawable(R.drawable.circle);
-            buttonStatesDrawables[7] = context.getResources().getDrawable(R.drawable.photocheck);
-            buttonStatesDrawablesDoc[0][0] = context.getResources().getDrawable(R.drawable.docload_b);
-            buttonStatesDrawablesDoc[0][1] = context.getResources().getDrawable(R.drawable.docload_g);
-            buttonStatesDrawablesDoc[0][2] = context.getResources().getDrawable(R.drawable.docload_b_s);
-            buttonStatesDrawablesDoc[1][0] = context.getResources().getDrawable(R.drawable.doccancel_b);
-            buttonStatesDrawablesDoc[1][1] = context.getResources().getDrawable(R.drawable.doccancel_g);
-            buttonStatesDrawablesDoc[1][2] = context.getResources().getDrawable(R.drawable.doccancel_b_s);
-            buttonStatesDrawablesDoc[2][0] = context.getResources().getDrawable(R.drawable.docpause_b);
-            buttonStatesDrawablesDoc[2][1] = context.getResources().getDrawable(R.drawable.docpause_g);
-            buttonStatesDrawablesDoc[2][2] = context.getResources().getDrawable(R.drawable.docpause_b_s);
-            videoIconDrawable = context.getResources().getDrawable(R.drawable.ic_video);
-            docMenuDrawable[0] = context.getResources().getDrawable(R.drawable.doc_actions_b);
-            docMenuDrawable[1] = context.getResources().getDrawable(R.drawable.doc_actions_g);
-            docMenuDrawable[2] = context.getResources().getDrawable(R.drawable.doc_actions_b_s);
-
-            shareDrawable[0][0] = context.getResources().getDrawable(R.drawable.shareblue);
-            shareDrawable[0][1] = context.getResources().getDrawable(R.drawable.shareblue_pressed);
-            shareDrawable[1][0] = context.getResources().getDrawable(R.drawable.shareblack);
-            shareDrawable[1][1] = context.getResources().getDrawable(R.drawable.shareblack_pressed);
-
-            geoInDrawable = context.getResources().getDrawable(R.drawable.location_b);
-            geoOutDrawable = context.getResources().getDrawable(R.drawable.location_g);
-
-            context.getResources().getDrawable(R.drawable.attach_camera_states);
-            context.getResources().getDrawable(R.drawable.attach_gallery_states);
-            context.getResources().getDrawable(R.drawable.attach_video_states);
-            context.getResources().getDrawable(R.drawable.attach_audio_states);
-            context.getResources().getDrawable(R.drawable.attach_file_states);
-            context.getResources().getDrawable(R.drawable.attach_contact_states);
-            context.getResources().getDrawable(R.drawable.attach_location_states);
-            context.getResources().getDrawable(R.drawable.attach_hide_states);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
index fddeafa74..87a77c457 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
@@ -21,36 +21,25 @@
         void onSeekBarDrag(float progress);
     }
 
-    private static Paint innerPaint1;
-    private static Paint outerPaint1;
-    private static Paint innerPaint2;
-    private static Paint outerPaint2;
+    private static Paint innerPaint;
+    private static Paint outerPaint;
     private static int thumbWidth;
-    private static int thumbHeight;
-    public int type;
-    public int thumbX = 0;
-    public int thumbDX = 0;
+    private int thumbX = 0;
+    private int thumbDX = 0;
     private boolean pressed = false;
-    public int width;
-    public int height;
+    private int width;
+    private int height;
     private SeekBarDelegate delegate;
+    private int innerColor;
+    private int outerColor;
+    private int selectedColor;
+    private boolean selected;
 
     public SeekBar(Context context) {
-        if (innerPaint1 == null) {
-            innerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
-            innerPaint1.setColor(0xffc3e3ab);
-
-            outerPaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
-            outerPaint1.setColor(0xff87bf78);
-
-            innerPaint2 = new Paint(Paint.ANTI_ALIAS_FLAG);
-            innerPaint2.setColor(0xffe4eaf0);
-
-            outerPaint2 = new Paint(Paint.ANTI_ALIAS_FLAG);
-            outerPaint2.setColor(0xff4195e5);
-
+        if (innerPaint == null) {
+            innerPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            outerPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
             thumbWidth = AndroidUtilities.dp(24);
-            thumbHeight = AndroidUtilities.dp(24);
         }
     }
 
@@ -88,6 +77,12 @@ public boolean onTouch(int action, float x, float y) {
         return false;
     }
 
+    public void setColors(int inner, int outer, int selected) {
+        innerColor = inner;
+        outerColor = outer;
+        selectedColor = selected;
+    }
+
     public void setProgress(float progress) {
         thumbX = (int)Math.ceil((width - thumbWidth) * progress);
         if (thumbX < 0) {
@@ -101,19 +96,21 @@ public boolean isDragging() {
         return pressed;
     }
 
+    public void setSelected(boolean value) {
+        selected = value;
+    }
+
+    public void setSize(int w, int h) {
+        width = w;
+        height = h;
+    }
+
     public void draw(Canvas canvas) {
-        Paint inner = null;
-        Paint outer = null;
-        if (type == 0) {
-            inner = innerPaint1;
-            outer = outerPaint1;
-        } else if (type == 1) {
-            inner = innerPaint2;
-            outer = outerPaint2;
-        }
-        int y = (height - thumbHeight) / 2;
-        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), width - thumbWidth / 2, height / 2 + AndroidUtilities.dp(1), inner);
-        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), thumbWidth / 2 + thumbX, height / 2 + AndroidUtilities.dp(1), outer);
-        canvas.drawCircle(thumbX + thumbWidth / 2, y + thumbHeight / 2, AndroidUtilities.dp(pressed ? 8 : 6), outer);
+        innerPaint.setColor(selected ? selectedColor : innerColor);
+        outerPaint.setColor(outerColor);
+
+        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), width - thumbWidth / 2, height / 2 + AndroidUtilities.dp(1), innerPaint);
+        canvas.drawRect(thumbWidth / 2, height / 2 - AndroidUtilities.dp(1), thumbWidth / 2 + thumbX, height / 2 + AndroidUtilities.dp(1), outerPaint);
+        canvas.drawCircle(thumbX + thumbWidth / 2, height / 2, AndroidUtilities.dp(pressed ? 8 : 6), outerPaint);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java
index 385893d12..776fbe48c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBarWaveform.java
@@ -21,13 +21,13 @@
 
     private static Paint paintInner;
     private static Paint paintOuter;
-    public int thumbX = 0;
-    public int thumbDX = 0;
+    private int thumbX = 0;
+    private int thumbDX = 0;
     private float startX;
     private boolean startDraging = false;
     private boolean pressed = false;
-    public int width;
-    public int height;
+    private int width;
+    private int height;
     private SeekBar.SeekBarDelegate delegate;
     private byte[] waveformBytes;
     private MessageObject messageObject;
@@ -128,6 +128,11 @@ public boolean isDragging() {
         return pressed;
     }
 
+    public void setSize(int w, int h) {
+        width = w;
+        height = h;
+    }
+
     public void draw(Canvas canvas) {
         if (waveformBytes == null || width == 0) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java
index 3e68de538..60c13ea66 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileDrawable.java
@@ -16,6 +16,7 @@
 import android.view.animation.DecelerateInterpolator;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.ActionBar.Theme;
 
 public class SendingFileDrawable extends Drawable {
 
@@ -33,7 +34,7 @@
 
     public SendingFileDrawable() {
         super();
-        paint.setColor(0xffd7e8f7);
+        paint.setColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
         paint.setStyle(Paint.Style.STROKE);
         paint.setStrokeWidth(AndroidUtilities.dp(2));
         paint.setStrokeCap(Paint.Cap.ROUND);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java
index 25f0ae6b0..5770e9d04 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileEx2Drawable.java
@@ -14,6 +14,7 @@
 import android.graphics.drawable.Drawable;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.ActionBar.Theme;
 
 public class SendingFileEx2Drawable extends Drawable {
 
@@ -25,7 +26,7 @@
 
     public SendingFileEx2Drawable() {
         super();
-        paint.setColor(0xffd7e8f7);
+        paint.setColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
         paint.setStyle(Paint.Style.STROKE);
         paint.setStrokeWidth(AndroidUtilities.dp(3));
         paint.setStrokeCap(Paint.Cap.ROUND);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java
index 48d5d917e..9953d0bfc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SendingFileExDrawable.java
@@ -14,6 +14,7 @@
 import android.graphics.drawable.Drawable;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.ActionBar.Theme;
 
 public class SendingFileExDrawable extends Drawable {
 
@@ -25,7 +26,7 @@
 
     public SendingFileExDrawable() {
         super();
-        paint.setColor(0xffd7e8f7);
+        paint.setColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
         paint.setStyle(Paint.Style.STROKE);
         paint.setStrokeWidth(AndroidUtilities.dp(2));
         paint.setStrokeCap(Paint.Cap.ROUND);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareFrameLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
similarity index 73%
rename from TMessagesProj/src/main/java/org/telegram/ui/Components/ShareFrameLayout.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
index cad5ced81..440205d3a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareFrameLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ShareAlert.java
@@ -8,7 +8,10 @@
 
 package org.telegram.ui.Components;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
+import android.graphics.*;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.text.Editable;
 import android.text.InputType;
@@ -20,10 +23,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
-import android.widget.AdapterView;
 import android.widget.EditText;
 import android.widget.FrameLayout;
-import android.widget.GridView;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
@@ -40,13 +41,15 @@
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.R;
 import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.support.widget.GridLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.BottomSheet;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.ShareDialogCell;
 
 import java.util.ArrayList;
@@ -57,18 +60,22 @@
 import java.util.Timer;
 import java.util.TimerTask;
 
-public class ShareFrameLayout extends FrameLayout {
+public class ShareAlert extends BottomSheet {
 
-    private BottomSheet parentBottomSheet;
+    private FrameLayout frameLayout;
+    private FrameLayout container;
     private TextView doneButtonBadgeTextView;
     private TextView doneButtonTextView;
     private LinearLayout doneButton;
     private EditText nameTextView;
-    private GridView gridView;
+    private View shadow;
+    private RecyclerListView gridView;
+    private GridLayoutManager layoutManager;
     private ShareDialogsAdapter listAdapter;
     private ShareSearchAdapter searchAdapter;
     private MessageObject sendingMessageObject;
     private EmptyTextProgressView searchEmptyView;
+    private Drawable shadowDrawable;
     private HashMap<Long, TLRPC.Dialog> selectedDialogs = new HashMap<>();
 
     private TLRPC.TL_exportedMessageLink exportedMessageLink;
@@ -77,10 +84,19 @@
 
     private boolean isPublicChannel;
 
-    public ShareFrameLayout(final Context context, BottomSheet bottomSheet, final MessageObject messageObject, boolean publicChannel) {
-        super(context);
+    private int scrollOffsetY;
+    private int topBeforeSwitch;
+
+    public ShareAlert(final Context context, final MessageObject messageObject, boolean publicChannel) {
+        super(context, true);
+        setApplyTopPadding(false);
+        setApplyBottomPadding(false);
+        if (Build.VERSION.SDK_INT >= 11) {
+            setDisableBackground(true);
+        }
+
+        shadowDrawable = context.getResources().getDrawable(R.drawable.sheet_shadow);
 
-        parentBottomSheet = bottomSheet;
         sendingMessageObject = messageObject;
         searchAdapter = new ShareSearchAdapter(context);
         isPublicChannel = publicChannel;
@@ -110,26 +126,91 @@ public void run() {
             });
         }
 
-        FrameLayout frameLayout = new FrameLayout(context);
+        container = new FrameLayout(context) {
+
+            private boolean ignoreLayout = false;
+
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                return scrollOffsetY != 0 && ev.getY() < scrollOffsetY || super.onInterceptTouchEvent(ev);
+            }
+
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                int height = MeasureSpec.getSize(heightMeasureSpec);
+                if (Build.VERSION.SDK_INT >= 21) {
+                    height -= AndroidUtilities.statusBarHeight;
+                }
+                int size = Math.max(searchAdapter.getItemCount(), listAdapter.getItemCount());
+                int contentSize = AndroidUtilities.dp(48) + Math.max(3, (int) Math.ceil(size / 4.0f)) * AndroidUtilities.dp(100) + backgroundPaddingTop;
+                if (Build.VERSION.SDK_INT < 11) {
+                    super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Math.min(contentSize, AndroidUtilities.displaySize.y / 5 * 3), MeasureSpec.EXACTLY));
+                } else {
+                    int padding = contentSize < height ? 0 : height - (height / 5 * 3) + AndroidUtilities.dp(8);
+                    if (gridView.getPaddingTop() != padding) {
+                        ignoreLayout = true;
+                        gridView.setPadding(0, padding, 0, AndroidUtilities.dp(8));
+                        ignoreLayout = false;
+                    }
+                    super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Math.min(contentSize, height), MeasureSpec.EXACTLY));
+                }
+            }
+
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                super.onLayout(changed, left, top, right, bottom);
+                if (Build.VERSION.SDK_INT >= 11) {
+                    updateLayout();
+                }
+            }
+
+            @Override
+            public void requestLayout() {
+                if (ignoreLayout) {
+                    return;
+                }
+                super.requestLayout();
+            }
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                if (Build.VERSION.SDK_INT >= 11) {
+                    shadowDrawable.setBounds(0, scrollOffsetY - backgroundPaddingTop, getMeasuredWidth(), getMeasuredHeight());
+                    shadowDrawable.draw(canvas);
+                }
+            }
+        };
+        if (Build.VERSION.SDK_INT >= 11) {
+            container.setWillNotDraw(false);
+        }
+        container.setPadding(backgroundPaddingLeft, 0, backgroundPaddingLeft, 0);
+        setCustomView(container);
+
+        frameLayout = new FrameLayout(context);
         frameLayout.setBackgroundColor(0xffffffff);
-        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.TOP));
+        frameLayout.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
 
         doneButton = new LinearLayout(context);
         doneButton.setOrientation(LinearLayout.HORIZONTAL);
-        doneButton.setBackgroundResource(R.drawable.bar_selector_audio);
+        doneButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
         doneButton.setPadding(AndroidUtilities.dp(21), 0, AndroidUtilities.dp(21), 0);
         frameLayout.addView(doneButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
-        doneButton.setOnClickListener(new OnClickListener() {
+        doneButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 if (selectedDialogs.isEmpty() && isPublicChannel) {
                     if (loadingLink) {
                         copyLinkOnEnd = true;
-                        Toast.makeText(ShareFrameLayout.this.getContext(), LocaleController.getString("Loading", R.string.Loading), Toast.LENGTH_SHORT).show();
+                        Toast.makeText(ShareAlert.this.getContext(), LocaleController.getString("Loading", R.string.Loading), Toast.LENGTH_SHORT).show();
                     } else {
-                        copyLink(ShareFrameLayout.this.getContext());
+                        copyLink(ShareAlert.this.getContext());
                     }
-                    parentBottomSheet.dismiss();
+                    dismiss();
                 } else {
                     ArrayList<MessageObject> arrayList = new ArrayList<>();
                     arrayList.add(sendingMessageObject);
@@ -145,7 +226,7 @@ public void onClick(View v) {
                         }
                         SendMessagesHelper.getInstance().sendMessage(arrayList, entry.getKey(), asAdmin);
                     }
-                    parentBottomSheet.dismiss();
+                    dismiss();
                 }
             }
         });
@@ -153,7 +234,7 @@ public void onClick(View v) {
         doneButtonBadgeTextView = new TextView(context);
         doneButtonBadgeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         doneButtonBadgeTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
-        doneButtonBadgeTextView.setTextColor(0xffffffff);
+        doneButtonBadgeTextView.setTextColor(Theme.SHARE_SHEET_BADGE_TEXT_COLOR);
         doneButtonBadgeTextView.setGravity(Gravity.CENTER);
         doneButtonBadgeTextView.setBackgroundResource(R.drawable.bluecounter);
         doneButtonBadgeTextView.setMinWidth(AndroidUtilities.dp(23));
@@ -162,7 +243,6 @@ public void onClick(View v) {
 
         doneButtonTextView = new TextView(context);
         doneButtonTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-        doneButtonTextView.setTextColor(0xff19a7e8);
         doneButtonTextView.setGravity(Gravity.CENTER);
         doneButtonTextView.setCompoundDrawablePadding(AndroidUtilities.dp(8));
         doneButtonTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -181,11 +261,11 @@ public void onClick(View v) {
         nameTextView.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
         nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         nameTextView.setBackgroundDrawable(null);
-        nameTextView.setHintTextColor(0xff979797);
+        nameTextView.setHintTextColor(Theme.SHARE_SHEET_EDIT_PLACEHOLDER_TEXT_COLOR);
         nameTextView.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
         nameTextView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
         AndroidUtilities.clearCursorDrawable(nameTextView);
-        nameTextView.setTextColor(0xff212121);
+        nameTextView.setTextColor(Theme.SHARE_SHEET_EDIT_TEXT_COLOR);
         frameLayout.addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 48, 2, 96, 0));
         nameTextView.addTextChangedListener(new TextWatcher() {
             @Override
@@ -203,6 +283,7 @@ public void afterTextChanged(Editable s) {
                 String text = nameTextView.getText().toString();
                 if (text.length() != 0) {
                     if (gridView.getAdapter() != searchAdapter) {
+                        topBeforeSwitch = getCurrentTop();
                         gridView.setAdapter(searchAdapter);
                         searchAdapter.notifyDataSetChanged();
                     }
@@ -211,9 +292,13 @@ public void afterTextChanged(Editable s) {
                     }
                 } else {
                     if (gridView.getAdapter() != listAdapter) {
+                        int top = getCurrentTop();
                         searchEmptyView.setText(LocaleController.getString("NoChats", R.string.NoChats));
                         gridView.setAdapter(listAdapter);
                         listAdapter.notifyDataSetChanged();
+                        if (top > 0) {
+                            layoutManager.scrollToPositionWithOffset(0, -top);
+                        }
                     }
                 }
                 if (searchAdapter != null) {
@@ -222,39 +307,37 @@ public void afterTextChanged(Editable s) {
             }
         });
 
-        View lineView = new View(context);
-        lineView.setBackgroundResource(R.drawable.header_shadow);
-        addView(lineView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
-
-        setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        gridView = new GridView(context);
-        gridView.setDrawSelectorOnTop(true);
-        gridView.setPadding(0, AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8));
+        gridView = new RecyclerListView(context);
+        gridView.setPadding(0, 0, 0, AndroidUtilities.dp(8));
         gridView.setClipToPadding(false);
-        gridView.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);
+        gridView.setLayoutManager(layoutManager = new GridLayoutManager(getContext(), 4));
         gridView.setHorizontalScrollBarEnabled(false);
         gridView.setVerticalScrollBarEnabled(false);
-        gridView.setNumColumns(4);
-        gridView.setVerticalSpacing(AndroidUtilities.dp(4));
-        gridView.setHorizontalSpacing(AndroidUtilities.dp(4));
-        gridView.setSelector(R.drawable.list_selector);
-        addView(gridView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
+        gridView.addItemDecoration(new RecyclerView.ItemDecoration() {
+            @Override
+            public void getItemOffsets(android.graphics.Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
+                Holder holder = (Holder) parent.getChildViewHolder(view);
+                if (holder != null) {
+                    int pos = holder.getAdapterPosition();
+                    outRect.left = pos % 4 == 0 ? 0 : AndroidUtilities.dp(4);
+                    outRect.right = pos % 4 == 3 ? 0 : AndroidUtilities.dp(4);
+                } else {
+                    outRect.left = AndroidUtilities.dp(4);
+                    outRect.right = AndroidUtilities.dp(4);
+                }
+            }
+        });
+        container.addView(gridView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
         gridView.setAdapter(listAdapter = new ShareDialogsAdapter(context));
-        AndroidUtilities.setListViewEdgeEffectColor(gridView, 0xfff5f6f7);
-        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+        gridView.setGlowColor(0xfff5f6f7);
+        gridView.setOnItemClickListener(new RecyclerListView.OnItemClickListener() {
             @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+            public void onItemClick(View view, int position) {
                 TLRPC.Dialog dialog;
                 if (gridView.getAdapter() == listAdapter) {
-                    dialog = listAdapter.getItem(i);
+                    dialog = listAdapter.getItem(position);
                 } else {
-                    dialog = searchAdapter.getItem(i);
+                    dialog = searchAdapter.getItem(position);
                 }
                 ShareDialogCell cell = (ShareDialogCell) view;
                 if (selectedDialogs.containsKey(dialog.id)) {
@@ -267,18 +350,62 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                 updateSelectedCount();
             }
         });
+        if (Build.VERSION.SDK_INT >= 11) {
+            gridView.setOnScrollListener(new RecyclerView.OnScrollListener() {
+                @SuppressLint("NewApi")
+                @Override
+                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+                    updateLayout();
+                }
+            });
+        }
 
         searchEmptyView = new EmptyTextProgressView(context);
         searchEmptyView.setShowAtCenter(true);
         searchEmptyView.showTextView();
         searchEmptyView.setText(LocaleController.getString("NoChats", R.string.NoChats));
         gridView.setEmptyView(searchEmptyView);
-        addView(searchEmptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
+        container.addView(searchEmptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
+
+        container.addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.TOP));
+
+        shadow = new View(context);
+        shadow.setBackgroundResource(R.drawable.header_shadow);
+        container.addView(shadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
 
         updateSelectedCount();
     }
 
-    public void copyLink(Context context) {
+    private int getCurrentTop() {
+        if (gridView.getChildCount() != 0) {
+            View child = gridView.getChildAt(0);
+            Holder holder = (Holder) gridView.findContainingViewHolder(child);
+            if (holder != null) {
+                return gridView.getPaddingTop() - (holder.getAdapterPosition() == 0 && child.getTop() >= 0 ? child.getTop() : 0);
+            }
+        }
+        return -1000;
+    }
+
+    @SuppressLint("NewApi")
+    private void updateLayout() {
+        if (gridView.getChildCount() <= 0) {
+            return;
+        }
+        View child = gridView.getChildAt(0);
+        Holder holder = (Holder) gridView.findContainingViewHolder(child);
+        int top = child.getTop() - AndroidUtilities.dp(8);
+        int newOffset = top > 0 && holder != null && holder.getAdapterPosition() == 0 ? top : 0;
+        if (scrollOffsetY != newOffset) {
+            gridView.setTopGlowOffset(scrollOffsetY = newOffset);
+            frameLayout.setTranslationY(scrollOffsetY);
+            shadow.setTranslationY(scrollOffsetY);
+            searchEmptyView.setTranslationY(scrollOffsetY);
+            container.invalidate();
+        }
+    }
+
+    private void copyLink(Context context) {
         if (exportedMessageLink == null) {
             return;
         }
@@ -301,11 +428,11 @@ public void updateSelectedCount() {
         if (selectedDialogs.isEmpty()) {
             doneButtonBadgeTextView.setVisibility(View.GONE);
             if (!isPublicChannel) {
-                doneButtonTextView.setTextColor(0xffb3b3b3);
+                doneButtonTextView.setTextColor(Theme.SHARE_SHEET_SEND_DISABLED_TEXT_COLOR);
                 doneButton.setEnabled(false);
                 doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
             } else {
-                doneButtonTextView.setTextColor(0xff517fad);
+                doneButtonTextView.setTextColor(Theme.SHARE_SHEET_COPY_TEXT_COLOR);
                 doneButton.setEnabled(true);
                 doneButtonTextView.setText(LocaleController.getString("CopyLink", R.string.CopyLink).toUpperCase());
             }
@@ -313,25 +440,27 @@ public void updateSelectedCount() {
             doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             doneButtonBadgeTextView.setVisibility(View.VISIBLE);
             doneButtonBadgeTextView.setText(String.format("%d", selectedDialogs.size()));
-            doneButtonTextView.setTextColor(0xff3ec1f9);
+            doneButtonTextView.setTextColor(Theme.SHARE_SHEET_SEND_TEXT_COLOR);
             doneButton.setEnabled(true);
             doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
         }
     }
 
-    @Override
-    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(310), MeasureSpec.EXACTLY));
+    private class Holder extends RecyclerView.ViewHolder {
+
+        public Holder(View itemView) {
+            super(itemView);
+        }
     }
 
-    private class ShareDialogsAdapter extends BaseFragmentAdapter {
+    private class ShareDialogsAdapter extends RecyclerView.Adapter {
 
-        private Context mContext;
+        private Context context;
         private int currentCount;
         private ArrayList<TLRPC.Dialog> dialogs = new ArrayList<>();
 
         public ShareDialogsAdapter(Context context) {
-            mContext = context;
+            this.context = context;
             for (int a = 0; a < MessagesController.getInstance().dialogsServerOnly.size(); a++) {
                 TLRPC.Dialog dialog = MessagesController.getInstance().dialogsServerOnly.get(a);
                 int lower_id = (int) dialog.id;
@@ -350,7 +479,7 @@ public ShareDialogsAdapter(Context context) {
         }
 
         @Override
-        public int getCount() {
+        public int getItemCount() {
             return dialogs.size();
         }
 
@@ -367,35 +496,28 @@ public long getItemId(int i) {
         }
 
         @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new ShareDialogCell(mContext);
-            }
-            ShareDialogCell cell = (ShareDialogCell) view;
-            TLRPC.Dialog dialog = getItem(i);
-            cell.setDialog(dialog, selectedDialogs.containsKey(dialog.id), null);
-            return view;
-        }
-
-        @Override
-        public int getItemViewType(int i) {
-            return 0;
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = new ShareDialogCell(context);
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(100)));
+            return new Holder(view);
         }
 
         @Override
-        public int getViewTypeCount() {
-            return 1;
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            ShareDialogCell cell = (ShareDialogCell) holder.itemView;
+            TLRPC.Dialog dialog = getItem(position);
+            cell.setDialog(dialog, selectedDialogs.containsKey(dialog.id), null);
         }
 
         @Override
-        public boolean isEmpty() {
-            return getCount() == 0;
+        public int getItemViewType(int i) {
+            return 0;
         }
     }
 
-    public class ShareSearchAdapter extends BaseFragmentAdapter {
+    public class ShareSearchAdapter extends RecyclerView.Adapter {
 
-        private Context mContext;
+        private Context context;
         private Timer searchTimer;
         private ArrayList<DialogSearchResult> searchResult = new ArrayList<>();
         private String lastSearchText;
@@ -411,7 +533,7 @@ public boolean isEmpty() {
         }
 
         public ShareSearchAdapter(Context context) {
-            mContext = context;
+            this.context = context;
         }
 
         private void searchDialogsInternal(final String query, final int searchId) {
@@ -629,8 +751,17 @@ public void run() {
                             MessagesController.getInstance().putChat(chat, true);
                         }
                     }
+                    boolean becomeEmpty = !searchResult.isEmpty() && result.isEmpty();
+                    boolean isEmpty = searchResult.isEmpty() && result.isEmpty();
+                    if (becomeEmpty) {
+                        topBeforeSwitch = getCurrentTop();
+                    }
                     searchResult = result;
                     notifyDataSetChanged();
+                    if (!isEmpty && !becomeEmpty && topBeforeSwitch > 0) {
+                        layoutManager.scrollToPositionWithOffset(0, -topBeforeSwitch);
+                        topBeforeSwitch = -1000;
+                    }
                 }
             });
         }
@@ -650,6 +781,7 @@ public void searchDialogs(final String query) {
             }
             if (query == null || query.length() == 0) {
                 searchResult.clear();
+                topBeforeSwitch = getCurrentTop();
                 notifyDataSetChanged();
             } else {
                 final int searchId = ++lastSearchId;
@@ -671,7 +803,7 @@ public void run() {
         }
 
         @Override
-        public int getCount() {
+        public int getItemCount() {
             return searchResult.size();
         }
 
@@ -685,24 +817,22 @@ public long getItemId(int i) {
         }
 
         @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new ShareDialogCell(mContext);
-            }
-            ShareDialogCell cell = (ShareDialogCell) view;
-            DialogSearchResult result = searchResult.get(i);
-            cell.setDialog(result.dialog, selectedDialogs.containsKey(result.dialog.id), result.name);
-            return view;
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = new ShareDialogCell(context);
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(100)));
+            return new Holder(view);
         }
 
         @Override
-        public int getItemViewType(int i) {
-            return 0;
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            ShareDialogCell cell = (ShareDialogCell) holder.itemView;
+            DialogSearchResult result = searchResult.get(position);
+            cell.setDialog(result.dialog, selectedDialogs.containsKey(result.dialog.id), result.name);
         }
 
         @Override
-        public boolean isEmpty() {
-            return getCount() == 0;
+        public int getItemViewType(int i) {
+            return 0;
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SimpleTextView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SimpleTextView.java
deleted file mode 100644
index e955b8547..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SimpleTextView.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2016.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Typeface;
-import android.text.Layout;
-import android.text.SpannableStringBuilder;
-import android.text.StaticLayout;
-import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.Gravity;
-import android.view.View;
-
-import org.telegram.messenger.AndroidUtilities;
-
-public class SimpleTextView extends View {
-
-    private Layout layout;
-    private TextPaint textPaint;
-    private int gravity;
-    private CharSequence text;
-    private SpannableStringBuilder spannableStringBuilder;
-
-    private int offsetX;
-    private boolean wasLayout = false;
-
-    public SimpleTextView(Context context) {
-        super(context);
-        textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
-    }
-
-    public void setTextColor(int color) {
-        textPaint.setColor(color);
-    }
-
-    public void setTextSize(int size) {
-        textPaint.setTextSize(AndroidUtilities.dp(size));
-    }
-
-    public void setGravity(int value) {
-        gravity = value;
-    }
-
-    public void setTypeface(Typeface typeface) {
-        textPaint.setTypeface(typeface);
-    }
-
-    private void createLayout(int width) {
-        if (text != null) {
-            try {
-                CharSequence string = TextUtils.ellipsize(text, textPaint, width, TextUtils.TruncateAt.END);
-                layout = new StaticLayout(string, 0, string.length(), textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
-
-                /*if (metrics == null) {
-                    metrics = BoringLayout.isBoring(text, textPaint);
-                }
-                if (layout == null) {
-                    layout = BoringLayout.make(text, textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, metrics, false, TextUtils.TruncateAt.END, width);
-                } else {
-                    layout = ((BoringLayout) layout).replaceOrMake(text, textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, metrics, false, TextUtils.TruncateAt.END, width);
-                }*/
-
-                /*if (spannableStringBuilder == null) {
-                    spannableStringBuilder = new SpannableStringBuilder(text);
-                    layout = new DynamicLayout(text, text, textPaint, width, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, width);
-                } else {
-                    spannableStringBuilder.replace(0, text.length(), text);
-                }*/
-
-                if (layout.getLineCount() > 0) {
-                    if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.LEFT) {
-                        offsetX = -(int) layout.getLineLeft(0);
-                    } else if (layout.getLineLeft(0) == 0) {
-                        offsetX = (int) (width - layout.getLineWidth(0));
-                    } else {
-                        offsetX = 0;
-                    }
-                }
-            } catch (Exception e) {
-                //ignore
-            }
-        }
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        if (changed) {
-            createLayout(right - left);
-            invalidate();
-            wasLayout = true;
-        }
-    }
-
-    public void setText(CharSequence value) {
-        text = value;
-        if (wasLayout) {
-            createLayout(getMeasuredWidth());
-            invalidate();
-        } else {
-            requestLayout();
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (layout != null) {
-            if (offsetX != 0) {
-                canvas.save();
-                canvas.translate(offsetX, 0);
-            }
-            layout.draw(canvas);
-            if (offsetX != 0) {
-                canvas.restore();
-            }
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
index d81c556fd..8cb1adadb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
@@ -20,7 +20,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.Theme;
 
 public class SlidingTabView extends LinearLayout {
 
@@ -58,7 +58,7 @@ public void addTextTab(final int position, String title) {
         tab.setTextColor(0xffffffff);
         tab.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         tab.setTypeface(Typeface.DEFAULT_BOLD);
-        tab.setBackgroundResource(R.drawable.bar_selector_picker);
+        tab.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR, false));
 
         tab.setOnClickListener(new OnClickListener() {
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
index 97916e024..eae765ee7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/StickersAlert.java
@@ -8,80 +8,545 @@
 
 package org.telegram.ui.Components;
 
-import android.app.AlertDialog;
+import android.annotation.SuppressLint;
 import android.content.Context;
-import android.content.DialogInterface;
-import android.database.DataSetObserver;
+import android.graphics.*;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
 import android.widget.FrameLayout;
-import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
+import org.telegram.messenger.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.messenger.Emoji;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.query.StickersQuery;
+import org.telegram.messenger.support.widget.GridLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Cells.StickerEmojiCell;
 import org.telegram.ui.StickerPreviewViewer;
 
-import java.util.ArrayList;
+public class StickersAlert extends BottomSheet implements NotificationCenter.NotificationCenterDelegate {
 
-public class StickersAlert extends AlertDialog implements NotificationCenter.NotificationCenterDelegate {
+    public interface StickersAlertDelegate {
+        void onStickerSelected(TLRPC.Document sticker);
+    }
+
+    private FrameLayout container;
+    private RecyclerListView gridView;
+    private GridLayoutManager layoutManager;
+    private GridAdapter adapter;
+    private TextView titleTextView;
+    private PickerBottomLayout pickerBottomLayout;
+    private FrameLayout stickerPreviewLayout;
+    private TextView previewSendButton;
+    private View previewSendButtonShadow;
+    private BackupImageView stickerImageView;
+    private TextView stickerEmojiTextView;
+    private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
+    private Drawable shadowDrawable;
+    private AnimatorSetProxy shadowAnimation[] = new AnimatorSetProxy[2];
+    private View shadow[] = new View[2];
+    private FrameLayout emptyView;
+
+    private TLRPC.TL_messages_stickerSet stickerSet;
+    private TLRPC.Document selectedSticker;
+    private TLRPC.InputStickerSet inputStickerSet;
+
+    private StickersAlertDelegate delegate;
 
-    private ArrayList<TLRPC.Document> stickers;
-    private GridView gridView;
+    private int scrollOffsetY;
+    private int reqId;
+    private boolean ignoreLayout = false;
 
-    public StickersAlert(Context context, TLRPC.TL_messages_stickerSet set) {
-        super(context);
-        stickers = set.documents;
+    public StickersAlert(Context context, TLRPC.InputStickerSet set, TLRPC.TL_messages_stickerSet loadedSet, StickersAlertDelegate stickersAlertDelegate) {
+        super(context, false);
+        setApplyTopPadding(false);
+        setApplyBottomPadding(false);
+        if (Build.VERSION.SDK_INT >= 11) {
+            setDisableBackground(true);
+        }
+
+        delegate = stickersAlertDelegate;
+        inputStickerSet = set;
+        stickerSet = loadedSet;
+        shadowDrawable = context.getResources().getDrawable(R.drawable.sheet_shadow);
+
+        container = new FrameLayout(context) {
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                return scrollOffsetY != 0 && ev.getY() < scrollOffsetY || super.onInterceptTouchEvent(ev);
+            }
 
-        FrameLayout container = new FrameLayout(context) {
             @Override
             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec((int) Math.min(Math.ceil(stickers.size() / 4.0f) * AndroidUtilities.dp(82), AndroidUtilities.displaySize.y / 5 * 3), MeasureSpec.EXACTLY));
+                int height = MeasureSpec.getSize(heightMeasureSpec);
+                if (Build.VERSION.SDK_INT >= 21) {
+                    height -= AndroidUtilities.statusBarHeight;
+                }
+                int contentSize = AndroidUtilities.dp(48 + 48) + Math.max(3, (stickerSet != null ? (int) Math.ceil(stickerSet.documents.size() / 5.0f) : 0)) * AndroidUtilities.dp(82) + backgroundPaddingTop;
+                if (Build.VERSION.SDK_INT < 11) {
+                    super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Math.min(contentSize, AndroidUtilities.displaySize.y / 5 * 3), MeasureSpec.EXACTLY));
+                } else {
+                    int padding = contentSize < (height / 5 * 3.2) ? 0 : (height / 5 * 2);
+                    if (padding != 0 && contentSize < height) {
+                        padding -= (height - contentSize);
+                    }
+                    if (padding == 0) {
+                        padding = backgroundPaddingTop;
+                    }
+                    if (gridView.getPaddingTop() != padding) {
+                        ignoreLayout = true;
+                        gridView.setPadding(AndroidUtilities.dp(10), padding, AndroidUtilities.dp(10), 0);
+                        emptyView.setPadding(0, padding, 0, 0);
+                        ignoreLayout = false;
+                    }
+                    super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(Math.min(contentSize, height), MeasureSpec.EXACTLY));
+                }
+            }
+
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                super.onLayout(changed, left, top, right, bottom);
+                if (Build.VERSION.SDK_INT >= 11) {
+                    updateLayout();
+                }
+            }
+
+            @Override
+            public void requestLayout() {
+                if (ignoreLayout) {
+                    return;
+                }
+                super.requestLayout();
+            }
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                if (Build.VERSION.SDK_INT >= 11) {
+                    shadowDrawable.setBounds(0, scrollOffsetY - backgroundPaddingTop, getMeasuredWidth(), getMeasuredHeight());
+                    shadowDrawable.draw(canvas);
+                }
             }
         };
-        setView(container, AndroidUtilities.dp(16), 0, AndroidUtilities.dp(16), 0);
+        if (Build.VERSION.SDK_INT >= 11) {
+            container.setWillNotDraw(false);
+        }
+        container.setPadding(backgroundPaddingLeft, 0, backgroundPaddingLeft, 0);
+        setCustomView(container);
+
+        titleTextView = new TextView(context);
+
+        titleTextView = new TextView(getContext());
+        titleTextView.setLines(1);
+        titleTextView.setSingleLine(true);
+        titleTextView.setTextColor(Theme.STICKERS_SHEET_TITLE_TEXT_COLOR);
+        titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+        titleTextView.setEllipsize(TextUtils.TruncateAt.MIDDLE);
+        titleTextView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        titleTextView.setGravity(Gravity.CENTER_VERTICAL);
+        titleTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        container.addView(titleTextView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
+        titleTextView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        shadow[0] = new View(context);
+        shadow[0].setBackgroundResource(R.drawable.header_shadow);
+        ViewProxy.setAlpha(shadow[0], 0.0f);
+        shadow[0].clearAnimation();
+        shadow[0].setVisibility(View.INVISIBLE);
+        shadow[0].setTag(1);
+        container.addView(shadow[0], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 0));
 
-        gridView = new GridView(context) {
+        gridView = new RecyclerListView(context) {
             @Override
             public boolean onInterceptTouchEvent(MotionEvent event) {
                 boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, gridView, 0);
                 return super.onInterceptTouchEvent(event) || result;
             }
+
+            @Override
+            public void requestLayout() {
+                if (ignoreLayout) {
+                    return;
+                }
+                super.requestLayout();
+            }
         };
-        gridView.setNumColumns(4);
-        gridView.setAdapter(new GridAdapter(context));
+        gridView.setLayoutManager(layoutManager = new GridLayoutManager(getContext(), 5));
+        gridView.setAdapter(adapter = new GridAdapter(context));
         gridView.setVerticalScrollBarEnabled(false);
+        gridView.addItemDecoration(new RecyclerView.ItemDecoration() {
+            @Override
+            public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
+                outRect.left = 0;
+                outRect.right = 0;
+                outRect.bottom = 0;
+                outRect.top = 0;
+            }
+        });
+        gridView.setPadding(AndroidUtilities.dp(10), 0, AndroidUtilities.dp(10), 0);
+        gridView.setClipToPadding(false);
+        gridView.setEnabled(true);
+        gridView.setGlowColor(0xfff5f6f7);
         gridView.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
-                return StickerPreviewViewer.getInstance().onTouch(event, gridView, 0, null);
+                return StickerPreviewViewer.getInstance().onTouch(event, gridView, 0, stickersOnItemClickListener);
+            }
+        });
+        if (Build.VERSION.SDK_INT >= 11) {
+            gridView.setOnScrollListener(new RecyclerView.OnScrollListener() {
+                @SuppressLint("NewApi")
+                @Override
+                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+                    updateLayout();
+                }
+            });
+        }
+        stickersOnItemClickListener = new RecyclerListView.OnItemClickListener() {
+            @Override
+            public void onItemClick(View view, int position) {
+                if (stickerSet == null || position < 0 || position >= stickerSet.documents.size()) {
+                    return;
+                }
+                selectedSticker = stickerSet.documents.get(position);
+
+                boolean set = false;
+                for (int a = 0; a < selectedSticker.attributes.size(); a++) {
+                    TLRPC.DocumentAttribute attribute = selectedSticker.attributes.get(a);
+                    if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
+                        if (attribute.alt != null && attribute.alt.length() > 0) {
+                            stickerEmojiTextView.setText(Emoji.replaceEmoji(attribute.alt, stickerEmojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(30), false));
+                            set = true;
+                        }
+                        break;
+                    }
+                }
+                if (!set) {
+                    stickerEmojiTextView.setText(Emoji.replaceEmoji(StickersQuery.getEmojiForSticker(selectedSticker.id), stickerEmojiTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(30), false));
+                }
+
+                stickerImageView.getImageReceiver().setImage(selectedSticker, null, selectedSticker.thumb.location, null, "webp", true);
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) stickerPreviewLayout.getLayoutParams();
+                layoutParams.topMargin = scrollOffsetY;
+                stickerPreviewLayout.setLayoutParams(layoutParams);
+                stickerPreviewLayout.setVisibility(View.VISIBLE);
+                AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+                animatorSet.playTogether(ObjectAnimatorProxy.ofFloat(stickerPreviewLayout, "alpha", 0.0f, 1.0f));
+                animatorSet.setDuration(200);
+                animatorSet.start();
+            }
+        };
+        gridView.setOnItemClickListener(stickersOnItemClickListener);
+        container.addView(gridView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 48, 0, 48));
+
+        emptyView = new FrameLayout(context) {
+            @Override
+            public void requestLayout() {
+                if (ignoreLayout) {
+                    return;
+                }
+                super.requestLayout();
+            }
+        };
+        container.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48));
+        gridView.setEmptyView(emptyView);
+        emptyView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
             }
         });
-        container.addView(gridView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
-        setTitle(set.set.title);
+        ProgressBar progressView = new ProgressBar(context);
+        emptyView.addView(progressView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        shadow[1] = new View(context);
+        shadow[1].setBackgroundResource(R.drawable.header_shadow_reverse);
+        container.addView(shadow[1], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
+
+        pickerBottomLayout = new PickerBottomLayout(context, false);
+        container.addView(pickerBottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM));
+        pickerBottomLayout.cancelButton.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        pickerBottomLayout.cancelButton.setTextColor(Theme.STICKERS_SHEET_CLOSE_TEXT_COLOR);
+        pickerBottomLayout.cancelButton.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
+        pickerBottomLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dismiss();
+            }
+        });
+        pickerBottomLayout.doneButton.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        pickerBottomLayout.doneButtonBadgeTextView.setBackgroundResource(R.drawable.stickercounter);
+
+        stickerPreviewLayout = new FrameLayout(context);
+        stickerPreviewLayout.setBackgroundColor(0xdfffffff);
+        stickerPreviewLayout.setVisibility(View.GONE);
+        stickerPreviewLayout.setSoundEffectsEnabled(false);
+        container.addView(stickerPreviewLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        stickerPreviewLayout.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                hidePreview();
+            }
+        });
+
+        ImageView closeButton = new ImageView(context);
+        closeButton.setImageResource(R.drawable.delete_reply);
+        closeButton.setScaleType(ImageView.ScaleType.CENTER);
+        if (Build.VERSION.SDK_INT >= 21) {
+            closeButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.INPUT_FIELD_SELECTOR_COLOR));
+        }
+        stickerPreviewLayout.addView(closeButton, LayoutHelper.createFrame(48, 48, Gravity.RIGHT | Gravity.TOP));
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                hidePreview();
+            }
+        });
+
+        stickerImageView = new BackupImageView(context);
+        stickerImageView.setAspectFit(true);
+        int size = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) / 2 / AndroidUtilities.density);
+        stickerPreviewLayout.addView(stickerImageView, LayoutHelper.createFrame(size, size, Gravity.CENTER));
 
-        setOnShowListener(new OnShowListener() {
+        stickerEmojiTextView = new TextView(context);
+        stickerEmojiTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 30);
+        stickerEmojiTextView.setGravity(Gravity.BOTTOM | Gravity.RIGHT);
+        stickerPreviewLayout.addView(stickerEmojiTextView, LayoutHelper.createFrame(size, size, Gravity.CENTER));
+
+        previewSendButton = new TextView(context);
+        previewSendButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        previewSendButton.setTextColor(Theme.STICKERS_SHEET_SEND_TEXT_COLOR);
+        previewSendButton.setGravity(Gravity.CENTER);
+        previewSendButton.setBackgroundColor(0xffffffff);
+        previewSendButton.setPadding(AndroidUtilities.dp(29), 0, AndroidUtilities.dp(29), 0);
+        previewSendButton.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
+        previewSendButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        previewSendButton.setVisibility(View.GONE);
+        stickerPreviewLayout.addView(previewSendButton, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
+        previewSendButton.setOnClickListener(new View.OnClickListener() {
             @Override
-            public void onShow(DialogInterface arg0) {
-                if (getButton(AlertDialog.BUTTON_NEUTRAL) != null) {
-                    getButton(AlertDialog.BUTTON_NEUTRAL).setTextColor(0xffcd5a5a);
+            public void onClick(View v) {
+                delegate.onStickerSelected(selectedSticker);
+                dismiss();
+            }
+        });
+
+        previewSendButtonShadow = new View(context);
+        previewSendButtonShadow.setBackgroundResource(R.drawable.header_shadow_reverse);
+        previewSendButtonShadow.setVisibility(View.GONE);
+        stickerPreviewLayout.addView(previewSendButtonShadow, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
+
+        if (delegate != null) {
+            previewSendButton.setText(LocaleController.getString("SendSticker", R.string.SendSticker).toUpperCase());
+            stickerImageView.setLayoutParams(LayoutHelper.createFrame(size, size, Gravity.CENTER, 0, 0, 0, 30));
+            stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size, size, Gravity.CENTER, 0, 0, 0, 30));
+            previewSendButton.setVisibility(View.VISIBLE);
+            previewSendButtonShadow.setVisibility(View.VISIBLE);
+        }
+
+        if (stickerSet == null && inputStickerSet.short_name != null) {
+            stickerSet = StickersQuery.getStickerSetByName(inputStickerSet.short_name);
+        }
+        if (stickerSet == null) {
+            stickerSet = StickersQuery.getStickerSetById(inputStickerSet.id);
+        }
+        if (stickerSet == null) {
+            TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
+            req.stickerset = inputStickerSet;
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            reqId = 0;
+                            if (error == null) {
+                                stickerSet = (TLRPC.TL_messages_stickerSet) response;
+                                updateFields();
+                                adapter.notifyDataSetChanged();
+                            } else {
+                                Toast.makeText(getContext(), LocaleController.getString("AddStickersNotFound", R.string.AddStickersNotFound), Toast.LENGTH_SHORT).show();
+                                dismiss();
+                            }
+                        }
+                    });
                 }
-                if (getButton(AlertDialog.BUTTON_POSITIVE) != null) {
-                    getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(0xff37a919);
+            });
+        }
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        updateFields();
+    }
+
+    private void updateFields() {
+        if (titleTextView == null) {
+            return;
+        }
+        if (stickerSet != null) {
+            titleTextView.setText(stickerSet.set.title);
+
+            if (stickerSet.set == null || !StickersQuery.isStickerPackInstalled(stickerSet.set.id)) {
+                setRightButton(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        dismiss();
+                        TLRPC.TL_messages_installStickerSet req = new TLRPC.TL_messages_installStickerSet();
+                        req.stickerset = inputStickerSet;
+                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                            @Override
+                            public void run(TLObject response, final TLRPC.TL_error error) {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        try {
+                                            if (error == null) {
+                                                Toast.makeText(getContext(), LocaleController.getString("AddStickersInstalled", R.string.AddStickersInstalled), Toast.LENGTH_SHORT).show();
+                                            } else {
+                                                if (error.text.equals("STICKERSETS_TOO_MUCH")) {
+                                                    Toast.makeText(getContext(), LocaleController.getString("TooMuchStickersets", R.string.TooMuchStickersets), Toast.LENGTH_SHORT).show();
+                                                } else {
+                                                    Toast.makeText(getContext(), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
+                                                }
+                                            }
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                        StickersQuery.loadStickers(false, true);
+                                    }
+                                });
+                            }
+                        });
+                    }
+                }, LocaleController.getString("AddStickers", R.string.AddStickers), Theme.STICKERS_SHEET_ADD_TEXT_COLOR, true);
+            } else {
+                if (stickerSet.set.official) {
+                    setRightButton(null, null, Theme.STICKERS_SHEET_REMOVE_TEXT_COLOR, false);
+                } else {
+                    setRightButton(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            dismiss();
+                            StickersQuery.removeStickersSet(getContext(), stickerSet.set, 0);
+                        }
+                    }, LocaleController.getString("StickersRemove", R.string.StickersRemove), Theme.STICKERS_SHEET_REMOVE_TEXT_COLOR, false);
                 }
             }
+            adapter.notifyDataSetChanged();
+        } else {
+            setRightButton(null, null, Theme.STICKERS_SHEET_REMOVE_TEXT_COLOR, false);
+        }
+    }
+
+    @SuppressLint("NewApi")
+    private void updateLayout() {
+        if (gridView.getChildCount() <= 0) {
+            gridView.setTopGlowOffset(scrollOffsetY = gridView.getPaddingTop());
+            titleTextView.setTranslationY(scrollOffsetY);
+            shadow[0].setTranslationY(scrollOffsetY);
+            container.invalidate();
+            return;
+        }
+        View child = gridView.getChildAt(0);
+        GridAdapter.Holder holder = (GridAdapter.Holder) gridView.findContainingViewHolder(child);
+        int top = child.getTop();
+        int newOffset = 0;
+        if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
+            newOffset = top;
+            runShadowAnimation(0, false);
+        } else {
+            runShadowAnimation(0, true);
+        }
+        if (scrollOffsetY != newOffset) {
+            gridView.setTopGlowOffset(scrollOffsetY = newOffset);
+            titleTextView.setTranslationY(scrollOffsetY);
+            shadow[0].setTranslationY(scrollOffsetY);
+            container.invalidate();
+        }
+    }
+
+    private void hidePreview() {
+        AnimatorSetProxy animatorSet = new AnimatorSetProxy();
+        animatorSet.playTogether(ObjectAnimatorProxy.ofFloat(stickerPreviewLayout, "alpha", 0.0f));
+        animatorSet.setDuration(200);
+        animatorSet.addListener(new AnimatorListenerAdapterProxy() {
+            @Override
+            public void onAnimationEnd(Object animation) {
+                stickerPreviewLayout.setVisibility(View.GONE);
+            }
         });
+        animatorSet.start();
+    }
+
+    private void runShadowAnimation(final int num, final boolean show) {
+        if (show && shadow[num].getTag() != null || !show && shadow[num].getTag() == null) {
+            shadow[num].setTag(show ? null : 1);
+            if (show) {
+                shadow[num].setVisibility(View.VISIBLE);
+            }
+            if (shadowAnimation[num] != null) {
+                shadowAnimation[num].cancel();
+            }
+            shadowAnimation[num] = new AnimatorSetProxy();
+            shadowAnimation[num].playTogether(ObjectAnimatorProxy.ofFloat(shadow[num], "alpha", show ? 1.0f : 0.0f));
+            shadowAnimation[num].setDuration(150);
+            shadowAnimation[num].addListener(new AnimatorListenerAdapterProxy() {
+                @Override
+                public void onAnimationEnd(Object animation) {
+                    if (shadowAnimation[num] != null && shadowAnimation[num].equals(animation)) {
+                        shadow[num].clearAnimation();
+                        if (!show) {
+                            shadow[num].setVisibility(View.INVISIBLE);
+                        }
+                        shadowAnimation[num] = null;
+                    }
+                }
+
+                @Override
+                public void onAnimationCancel(Object animation) {
+                    if (shadowAnimation[num] != null && shadowAnimation[num].equals(animation)) {
+                        shadowAnimation[num] = null;
+                    }
+                }
+            });
+            shadowAnimation[num].start();
+        }
     }
 
     @Override
     public void dismiss() {
         super.dismiss();
+        if (reqId != 0) {
+            ConnectionsManager.getInstance().cancelRequest(reqId, true);
+            reqId = 0;
+        }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
     }
 
@@ -98,7 +563,24 @@ public void didReceivedNotification(int id, Object... args) {
         }
     }
 
-    private class GridAdapter extends BaseAdapter {
+    private void setRightButton(View.OnClickListener onClickListener, String title, int color, boolean showCircle) {
+        if (title == null) {
+            pickerBottomLayout.doneButton.setVisibility(View.GONE);
+        } else {
+            pickerBottomLayout.doneButton.setVisibility(View.VISIBLE);
+            if (showCircle) {
+                pickerBottomLayout.doneButtonBadgeTextView.setVisibility(View.VISIBLE);
+                pickerBottomLayout.doneButtonBadgeTextView.setText(String.format("%d", stickerSet.documents.size()));
+            } else {
+                pickerBottomLayout.doneButtonBadgeTextView.setVisibility(View.GONE);
+            }
+            pickerBottomLayout.doneButtonTextView.setTextColor(color);
+            pickerBottomLayout.doneButtonTextView.setText(title.toUpperCase());
+            pickerBottomLayout.doneButton.setOnClickListener(onClickListener);
+        }
+    }
+
+    private class GridAdapter extends RecyclerView.Adapter {
 
         Context context;
 
@@ -106,45 +588,28 @@ public GridAdapter(Context context) {
             this.context = context;
         }
 
-        public int getCount() {
-            return stickers.size();
-        }
-
-        public Object getItem(int i) {
-            return stickers.get(i);
+        @Override
+        public int getItemCount() {
+            return stickerSet != null ? stickerSet.documents.size() : 0;
         }
 
-        public long getItemId(int i) {
-            return stickers.get(i).id;
-        }
+        private class Holder extends RecyclerView.ViewHolder {
 
-        @Override
-        public boolean areAllItemsEnabled() {
-            return false;
+            public Holder(View itemView) {
+                super(itemView);
+            }
         }
 
         @Override
-        public boolean isEnabled(int position) {
-            return false;
-        }
-
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            if (view == null) {
-                view = new StickerEmojiCell(context) {
-                    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-                        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(82), MeasureSpec.EXACTLY));
-                    }
-                };
-            }
-            ((StickerEmojiCell) view).setSticker(stickers.get(i), true);
-            return view;
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = new StickerEmojiCell(context);
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(82)));
+            return new Holder(view);
         }
 
         @Override
-        public void unregisterDataSetObserver(DataSetObserver observer) {
-            if (observer != null) {
-                super.unregisterDataSetObserver(observer);
-            }
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            ((StickerEmojiCell) holder.itemView).setSticker(stickerSet.documents.get(position), true);
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
index 2f93be636..217e6b368 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Switch.java
@@ -391,6 +391,7 @@ public void toggle() {
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
         attachedToWindow = true;
+        requestLayout();
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
index 41d4bd9a8..34a95d0c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TypingDotsDrawable.java
@@ -15,6 +15,7 @@
 import android.view.animation.DecelerateInterpolator;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.ui.ActionBar.Theme;
 
 public class TypingDotsDrawable extends Drawable {
 
@@ -29,7 +30,7 @@
 
     public TypingDotsDrawable() {
         super();
-        paint.setColor(0xffd7e8f7);
+        paint.setColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
     }
 
     public void setIsChat(boolean value) {
@@ -90,9 +91,9 @@ public void stop() {
     public void draw(Canvas canvas) {
         int y;
         if (isChat) {
-            y = AndroidUtilities.dp(6);
+            y = AndroidUtilities.dp(8.3f) + getBounds().top;
         } else {
-            y = AndroidUtilities.dp(7);
+            y = AndroidUtilities.dp(9) + getBounds().top;
         }
         canvas.drawCircle(AndroidUtilities.dp(3), y, scales[0] * AndroidUtilities.density, paint);
         canvas.drawCircle(AndroidUtilities.dp(9), y, scales[1] * AndroidUtilities.density, paint);
@@ -124,6 +125,6 @@ public int getIntrinsicWidth() {
 
     @Override
     public int getIntrinsicHeight() {
-        return AndroidUtilities.dp(10);
+        return AndroidUtilities.dp(18);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanBotCommand.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanBotCommand.java
index 61b7433e4..adb870543 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanBotCommand.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/URLSpanBotCommand.java
@@ -10,6 +10,8 @@
 
 import android.text.TextPaint;
 
+import org.telegram.ui.ActionBar.Theme;
+
 public class URLSpanBotCommand extends URLSpanNoUnderline {
 
     public static boolean enabled = true;
@@ -21,7 +23,7 @@ public URLSpanBotCommand(String url) {
     @Override
     public void updateDrawState(TextPaint ds) {
         super.updateDrawState(ds);
-        ds.setColor(enabled ? 0xff316f9f : 0xff000000);
+        ds.setColor(enabled ? Theme.MSG_LINK_TEXT_COLOR : Theme.MSG_TEXT_COLOR);
         ds.setUnderlineText(false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
index a9250c135..43a315199 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebFrameLayout.java
@@ -16,6 +16,7 @@
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.webkit.CookieManager;
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
@@ -28,11 +29,13 @@
 import android.widget.Toast;
 
 import org.telegram.messenger.AndroidUtilities;
-import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.util.HashMap;
 
@@ -48,11 +51,13 @@
     private int width;
     private int height;
     private String openUrl;
+    private boolean hasDescription;
 
     @SuppressLint("SetJavaScriptEnabled")
-    public WebFrameLayout(Context context, BottomSheet parentDialog, String title, String originalUrl, final String url, int w, int h) {
+    public WebFrameLayout(Context context, final BottomSheet parentDialog, String title, String descripton, String originalUrl, final String url, int w, int h) {
         super(context);
 
+        hasDescription = descripton != null && descripton.length() > 0;
         openUrl = originalUrl;
         width = w;
         height = h;
@@ -67,69 +72,18 @@ public WebFrameLayout(Context context, BottomSheet parentDialog, String title, S
         if (Build.VERSION.SDK_INT >= 21) {
             fullscreenVideoContainer.setFitsSystemWindows(true);
         }
+        parentDialog.setApplyTopPadding(false);
+        parentDialog.setApplyBottomPadding(false);
         dialog.getContainer().addView(fullscreenVideoContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         fullscreenVideoContainer.setVisibility(INVISIBLE);
 
-        LinearLayout linearLayout = new LinearLayout(context);
+        /*LinearLayout linearLayout = new LinearLayout(context);
         linearLayout.setOrientation(LinearLayout.HORIZONTAL);
         addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 32, Gravity.LEFT | Gravity.TOP));
 
-        TextView textView = new TextView(context);
-        textView.setTextColor(0xff666666);
-        textView.setText(title);
-        textView.setSingleLine(true);
-        textView.setEllipsize(TextUtils.TruncateAt.END);
-        textView.setGravity(Gravity.CENTER_VERTICAL);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-        linearLayout.addView(textView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 16, 0, 0, 0));
 
-        textView = new TextView(context);
-        textView.setTextColor(0xff999999);
-        textView.setText(LocaleController.getString("OpenInBrowser", R.string.OpenInBrowser));
-        textView.setGravity(Gravity.CENTER_VERTICAL);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-        linearLayout.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, 16, 0, 0, 0));
-        textView.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                AndroidUtilities.openUrl(getContext(), openUrl);
-                if (dialog != null) {
-                    dialog.dismiss();
-                }
-            }
-        });
 
-        textView = new TextView(context);
-        textView.setTextColor(0xff999999);
-        textView.setText(LocaleController.getString("CopyUrl", R.string.CopyUrl));
-        textView.setGravity(Gravity.CENTER_VERTICAL);
-        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-        linearLayout.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, 16, 0, 16, 0));
-        textView.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                try {
-                    if (Build.VERSION.SDK_INT < 11) {
-                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                        clipboard.setText(openUrl);
-                    } else {
-                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", openUrl);
-                        clipboard.setPrimaryClip(clip);
-                    }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                Toast.makeText(getContext(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
-                if (dialog != null) {
-                    dialog.dismiss();
-                }
-            }
-        });
-
-        View lineView = new View(context);
-        lineView.setBackgroundResource(R.drawable.header_shadow);
-        addView(lineView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3, Gravity.TOP | Gravity.LEFT, 0, 40, 0, 0));
+        */
 
         webView = new WebView(context);
         webView.getSettings().setJavaScriptEnabled(true);
@@ -203,10 +157,117 @@ public void onPageFinished(WebView view, String url) {
             }
         });
 
-        addView(webView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 8, 49, 8, 0));
+        addView(webView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48 + 36 + (hasDescription ? 22 : 0)));
 
         progressBar = new ProgressBar(context);
-        addView(progressBar, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 8, 24, 8, 0));
+        addView(progressBar, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 0, 0, 0, (48 + 36 + (hasDescription ? 22 : 0)) / 2));
+
+        //TODO 16m
+        //TODO 14
+
+        TextView textView;
+
+        if (hasDescription) {
+            textView = new TextView(context);
+            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
+            textView.setTextColor(0xff222222);
+            textView.setText(descripton);
+            textView.setSingleLine(true);
+            textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            textView.setEllipsize(TextUtils.TruncateAt.END);
+            textView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+            addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 48 + 9 + 20));
+        }
+
+        textView = new TextView(context);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTextColor(0xff8a8a8a);
+        textView.setText(title);
+        textView.setSingleLine(true);
+        textView.setEllipsize(TextUtils.TruncateAt.END);
+        textView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 0, 0, 0, 48 + 9));
+
+        View lineView = new View(context);
+        lineView.setBackgroundColor(0xffdbdbdb);
+        addView(lineView, new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1, Gravity.LEFT | Gravity.BOTTOM));
+        ((LayoutParams) lineView.getLayoutParams()).bottomMargin = AndroidUtilities.dp(48);
+
+        FrameLayout frameLayout = new FrameLayout(context);
+        frameLayout.setBackgroundColor(0xffffffff);
+        addView(frameLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.BOTTOM));
+
+        textView = new TextView(context);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTextColor(0xff19a7e8);
+        textView.setGravity(Gravity.CENTER);
+        textView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
+        textView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        textView.setText(LocaleController.getString("Close", R.string.Close).toUpperCase());
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        frameLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        textView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+            }
+        });
+
+        LinearLayout linearLayout = new LinearLayout(context);
+        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
+        frameLayout.addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
+
+        textView = new TextView(context);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTextColor(0xff19a7e8);
+        textView.setGravity(Gravity.CENTER);
+        textView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
+        textView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        textView.setText(LocaleController.getString("Copy", R.string.Copy).toUpperCase());
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        linearLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        textView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                try {
+                    if (Build.VERSION.SDK_INT < 11) {
+                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        clipboard.setText(openUrl);
+                    } else {
+                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", openUrl);
+                        clipboard.setPrimaryClip(clip);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                Toast.makeText(getContext(), LocaleController.getString("LinkCopied", R.string.LinkCopied), Toast.LENGTH_SHORT).show();
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+            }
+        });
+
+        textView = new TextView(context);
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+        textView.setTextColor(0xff19a7e8);
+        textView.setGravity(Gravity.CENTER);
+        textView.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_AUDIO_SELECTOR_COLOR, false));
+        textView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
+        textView.setText(LocaleController.getString("OpenInBrowser", R.string.OpenInBrowser).toUpperCase());
+        textView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        linearLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        textView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Browser.openUrl(getContext(), openUrl);
+                if (dialog != null) {
+                    dialog.dismiss();
+                }
+            }
+        });
 
         setOnTouchListener(new OnTouchListener() {
             @Override
@@ -248,6 +309,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int parentWidth = MeasureSpec.getSize(widthMeasureSpec);
         float scale = width / parentWidth;
         int h = (int) Math.min(height / scale, AndroidUtilities.displaySize.y / 2);
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(h + AndroidUtilities.dp(49), MeasureSpec.EXACTLY));
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(h + AndroidUtilities.dp(48 + 36 + (hasDescription ? 22 : 0)) + 1, MeasureSpec.EXACTLY));
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index 2719ce944..c4a0da7b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -98,6 +98,8 @@ public void onItemClick(int id) {
                         user.last_name = lastNameField.getText().toString();
                         ContactsController.getInstance().addContact(user);
                         finishFragment();
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        preferences.edit().putInt("spam3_" + user_id, 1).commit();
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 2b7e44622..6785b376d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -40,6 +40,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.SecretChatHelper;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.messenger.ContactsController;
@@ -289,12 +290,17 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         didSelectResult(user, true, null);
                     } else {
                         if (createSecretChat) {
+                            if (user.id == UserConfig.getClientUserId()) {
+                                return;
+                            }
                             creatingChat = true;
                             SecretChatHelper.getInstance().startSecretChat(getParentActivity(), user);
                         } else {
                             Bundle args = new Bundle();
                             args.putInt("user_id", user.id);
-                            presentFragment(new ChatActivity(args), true);
+                            if (MessagesController.checkCanOpenChat(args, ContactsActivity.this)) {
+                                presentFragment(new ChatActivity(args), true);
+                            }
                         }
                     }
                 } else {
@@ -330,6 +336,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                 args.putBoolean("onlyUsers", true);
                                 args.putBoolean("destroyAfterSelect", true);
                                 args.putBoolean("createSecretChat", true);
+                                args.putBoolean("allowBots", false);
                                 presentFragment(new ContactsActivity(args), false);
                             } else if (row == 2) {
                                 if (!MessagesController.isFeatureEnabled("broadcast_create", ContactsActivity.this)) {
@@ -363,7 +370,9 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                                 } else {
                                     Bundle args = new Bundle();
                                     args.putInt("user_id", user.id);
-                                    presentFragment(new ChatActivity(args), true);
+                                    if (MessagesController.checkCanOpenChat(args, ContactsActivity.this)) {
+                                        presentFragment(new ChatActivity(args), true);
+                                    }
                                 }
                             }
                         } else if (item instanceof ContactsController.Contact) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java
new file mode 100644
index 000000000..3af4bb4ca
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ConvertGroupActivity.java
@@ -0,0 +1,216 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ConvertGroupActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+
+    private int convertInfoRow;
+    private int convertRow;
+    private int convertDetailRow;
+    private int rowCount;
+
+    private int chat_id;
+
+    public ConvertGroupActivity(Bundle args) {
+        super(args);
+        chat_id = args.getInt("chat_id");
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        convertInfoRow = rowCount++;
+        convertRow = rowCount++;
+        convertDetailRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ConvertGroup", R.string.ConvertGroup));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(final AdapterView<?> adapterView, View view, final int i, long l) {
+                if (i == convertRow) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.getString("ConvertGroupAlert", R.string.ConvertGroupAlert));
+                    builder.setTitle(LocaleController.getString("ConvertGroupAlertWarning", R.string.ConvertGroupAlertWarning));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            MessagesController.getInstance().convertToMegaGroup(getParentActivity(), chat_id);
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showDialog(builder.create());
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == convertRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(0xffffffff);
+                }
+                TextSettingsCell textCell = (TextSettingsCell) view;
+                if (i == convertRow) {
+                    textCell.setText(LocaleController.getString("ConvertGroup", R.string.ConvertGroup), false);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new TextInfoPrivacyCell(mContext);
+                }
+                if (i == convertInfoRow) {
+                    ((TextInfoPrivacyCell) view).setText(AndroidUtilities.replaceTags(LocaleController.getString("ConvertGroupInfo2", R.string.ConvertGroupInfo2)));
+                    view.setBackgroundResource(R.drawable.greydivider);
+                } else if (i == convertDetailRow) {
+                    ((TextInfoPrivacyCell) view).setText(AndroidUtilities.replaceTags(LocaleController.getString("ConvertGroupInfo3", R.string.ConvertGroupInfo3)));
+                    view.setBackgroundResource(R.drawable.greydivider_bottom);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == convertRow) {
+                return 0;
+            } else if (i == convertInfoRow || i == convertDetailRow) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 15cd7859a..c5771d909 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -72,7 +72,7 @@
 import org.telegram.ui.Components.EmptyTextProgressView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
-import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.util.ArrayList;
 
@@ -111,9 +111,9 @@
     private String searchString;
     private long openedDialogId;
 
-    private MessagesActivityDelegate delegate;
+    private DialogsActivityDelegate delegate;
 
-    public interface MessagesActivityDelegate {
+    public interface DialogsActivityDelegate {
         void didSelectDialog(DialogsActivity fragment, long dialog_id, boolean param);
     }
 
@@ -147,6 +147,7 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.needReloadRecentDialogsSearch);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didLoadedReplyMessages);
         }
 
 
@@ -175,6 +176,7 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.needReloadRecentDialogsSearch);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didLoadedReplyMessages);
         }
         delegate = null;
     }
@@ -184,7 +186,7 @@ public View createView(final Context context) {
         searching = false;
         searchWas = false;
 
-        ResourceLoader.loadRecources(context);
+        Theme.loadRecources(context);
 
         ActionBarMenu menu = actionBar.createMenu();
         if (!onlySelect && searchString == null) {
@@ -429,10 +431,14 @@ public void onItemClick(View view, int position) {
                         }
                     }
                     if (searchString != null) {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                        presentFragment(new ChatActivity(args));
+                        if (MessagesController.checkCanOpenChat(args, DialogsActivity.this)) {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            presentFragment(new ChatActivity(args));
+                        }
                     } else {
-                        presentFragment(new ChatActivity(args));
+                        if (MessagesController.checkCanOpenChat(args, DialogsActivity.this)) {
+                            presentFragment(new ChatActivity(args));
+                        }
                     }
                 }
             }
@@ -619,7 +625,7 @@ public boolean onTouch(View v, MotionEvent event) {
         textView = new TextView(context);
         String help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
         if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
-            help = help.replace("\n", " ");
+            help = help.replace('\n', ' ');
         }
         textView.setText(help);
         textView.setTextColor(0xff959595);
@@ -896,9 +902,7 @@ public void didReceivedNotification(int id, Object... args) {
                 }
             }
         } else if (id == NotificationCenter.emojiDidLoaded) {
-            if (listView != null) {
-                updateVisibleRows(0);
-            }
+            updateVisibleRows(0);
         } else if (id == NotificationCenter.updateInterfaces) {
             updateVisibleRows((Integer) args[0]);
         } else if (id == NotificationCenter.appDidLogout) {
@@ -933,6 +937,8 @@ public void didReceivedNotification(int id, Object... args) {
             if (dialogsSearchAdapter != null) {
                 dialogsSearchAdapter.loadRecentSearch();
             }
+        } else if (id == NotificationCenter.didLoadedReplyMessages) {
+            updateVisibleRows(0);
         }
     }
 
@@ -1005,7 +1011,7 @@ private void updateVisibleRows(int mask) {
         }
     }
 
-    public void setDelegate(MessagesActivityDelegate delegate) {
+    public void setDelegate(DialogsActivityDelegate delegate) {
         this.delegate = delegate;
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index db9e4887c..1e93dd0a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -33,6 +33,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.BackDrawable;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -186,7 +187,7 @@ public boolean onTouch(View v, MotionEvent event) {
         });
         actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
 
-        actionModeViews.add(actionMode.addItem(done, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+        actionModeViews.add(actionMode.addItem(done, R.drawable.ic_ab_done_gray, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
 
         fragmentView = getParentActivity().getLayoutInflater().inflate(R.layout.document_select_layout, null, false);
         listAdapter = new ListAdapter(context);
@@ -453,8 +454,9 @@ public int compare(File lhs, File rhs) {
                 }*/
             }
         });
-        for (File file : files) {
-            if (file.getName().startsWith(".")) {
+        for (int a = 0; a < files.length; a++) {
+            File file = files[a];
+            if (file.getName().indexOf('.') == 0) {
                 continue;
             }
             ListItem item = new ListItem();
@@ -514,7 +516,7 @@ private void listRoots() {
         String defaultPathState = Environment.getExternalStorageState();
         if (defaultPathState.equals(Environment.MEDIA_MOUNTED) || defaultPathState.equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {
             ListItem ext = new ListItem();
-            if (Build.VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable()) {
+            if (Environment.isExternalStorageRemovable()) {
                 ext.title = LocaleController.getString("SdCard", R.string.SdCard);
                 ext.icon = R.drawable.ic_external_storage;
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 5339c3d00..469f469ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -78,7 +78,7 @@
     private int beforeChangeIndex;
     private boolean ignoreChange;
     private CharSequence changeString;
-    private int maxCount = 1000;
+    private int maxCount = 5000;
     private int chatType = ChatObject.CHAT_TYPE_CHAT;
     private boolean isAlwaysShare;
     private boolean isNeverShare;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
index c2c220b7b..4cde07fd7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateFinalActivity.java
@@ -450,7 +450,7 @@ public boolean isEnabled(int position) {
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
             if (view == null) {
-                view = new UserCell(mContext, 1, 0);
+                view = new UserCell(mContext, 1, 0, false);
             }
 
             TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(i));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index 80409c3fd..401a1b005 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -39,6 +39,7 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.IdenticonDrawable;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.URLSpanReplacement;
 
 public class IdenticonActivity extends BaseFragment {
@@ -114,7 +115,7 @@ public boolean onTouch(View v, MotionEvent event) {
         textView.setClickable(true);
         textView.setMovementMethod(new LinkMovementMethodMy());
         //textView.setAutoLinkMask(Linkify.WEB_URLS);
-        textView.setLinkTextColor(0xff316f9f);
+        textView.setLinkTextColor(Theme.MSG_LINK_TEXT_COLOR);
         textView.setGravity(Gravity.CENTER);
         frameLayout.addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index 006bc6b22..05755ec14 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -32,6 +32,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.ui.ActionBar.Theme;
 
 public class IntroActivity extends Activity {
 
@@ -50,6 +51,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         setTheme(R.style.Theme_TMessages);
         super.onCreate(savedInstanceState);
+        Theme.loadRecources(this);
         requestWindowFeature(Window.FEATURE_NO_TITLE);
 
         if (AndroidUtilities.isTablet()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 213d5155a..d636ea4bd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -47,18 +47,19 @@
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.ImageLoader;
+import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NativeCrashManager;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.query.StickersQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -70,15 +71,18 @@
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PasscodeView;
+import org.telegram.ui.Components.StickersAlert;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate {
 
     private boolean finished;
     private String videoPath;
@@ -127,7 +131,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 return;
             }
             if (intent != null && !intent.getBooleanExtra("fromIntro", false)) {
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", MODE_PRIVATE);
                 Map<String, ?> state = preferences.getAll();
                 if (state.isEmpty()) {
                     Intent intent2 = new Intent(this, IntroActivity.class);
@@ -144,6 +148,7 @@ protected void onCreate(Bundle savedInstanceState) {
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
 
         super.onCreate(savedInstanceState);
+        Theme.loadRecources(this);
 
         if (UserConfig.passcodeHash.length() != 0 && UserConfig.appLocked) {
             UserConfig.lastPauseTime = ConnectionsManager.getInstance().getCurrentTime();
@@ -295,6 +300,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                     args.putBoolean("onlyUsers", true);
                     args.putBoolean("destroyAfterSelect", true);
                     args.putBoolean("createSecretChat", true);
+                    args.putBoolean("allowBots", false);
                     presentFragment(new ContactsActivity(args));
                     drawerLayoutContainer.closeDrawer(false);
                 } else if (position == 4) {
@@ -328,7 +334,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                     presentFragment(new SettingsActivity());
                     drawerLayoutContainer.closeDrawer(false);
                 } else if (position == 9) {
-                    AndroidUtilities.openUrl(LaunchActivity.this, LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
+                    Browser.openUrl(LaunchActivity.this, LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
                     drawerLayoutContainer.closeDrawer(false);
                 }
             }
@@ -356,6 +362,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedConnectionState);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.needShowAlert);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wasUnableToFindCurrentLocation);
         if (Build.VERSION.SDK_INT < 14) {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.screenStateChanged);
         }
@@ -606,22 +613,24 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 error = true;
                             }
                         } else {
-                            if ((type == null || type != null && (type.equals("text/plain") || type.equals("message/rfc822"))) && (intent.getStringExtra(Intent.EXTRA_TEXT) != null || intent.getCharSequenceExtra(Intent.EXTRA_TEXT) != null)) {
-                                String text = intent.getStringExtra(Intent.EXTRA_TEXT);
-                                if (text == null) {
-                                    text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT).toString();
+                            String text = intent.getStringExtra(Intent.EXTRA_TEXT);
+                            if (text == null) {
+                                CharSequence textSequence = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
+                                if (textSequence != null) {
+                                    text = textSequence.toString();
                                 }
-                                String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
+                            }
+                            String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
 
-                                if (text != null && text.length() != 0) {
-                                    if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
-                                        text = subject + "\n" + text;
-                                    }
-                                    sendingText = text;
-                                } else if (subject != null && subject.length() > 0) {
-                                    sendingText = subject;
+                            if (text != null && text.length() != 0) {
+                                if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
+                                    text = subject + "\n" + text;
                                 }
+                                sendingText = text;
+                            } else if (subject != null && subject.length() > 0) {
+                                sendingText = subject;
                             }
+
                             Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
                             if (parcelable != null) {
                                 String path;
@@ -630,11 +639,8 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 }
                                 Uri uri = (Uri) parcelable;
                                 if (uri != null) {
-                                    if (ContentResolver.SCHEME_FILE.equals(uri.getScheme())) {
-                                        String pathString = Utilities.readlink(uri.getPath());
-                                        if (pathString != null && pathString.contains("/data/data/" + getPackageName() + "/files")) {
-                                            error = true;
-                                        }
+                                    if (isInternalUri(uri)) {
+                                        error = true;
                                     }
                                 }
                                 if (!error) {
@@ -693,12 +699,9 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                     }
                                     Uri uri = (Uri) parcelable;
                                     if (uri != null) {
-                                        if (ContentResolver.SCHEME_FILE.equals(uri.getScheme())) {
-                                            String pathString = Utilities.readlink(uri.getPath());
-                                            if (pathString != null && pathString.contains("/data/data/" + getPackageName() + "/files")) {
-                                                uris.remove(a);
-                                                a--;
-                                            }
+                                        if (isInternalUri(uri)) {
+                                            uris.remove(a);
+                                            a--;
                                         }
                                     }
                                 }
@@ -768,7 +771,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                             if (scheme != null) {
                                 if ((scheme.equals("http") || scheme.equals("https"))) {
                                     String host = data.getHost().toLowerCase();
-                                    if (host.equals("telegram.me")) {
+                                    if (host.equals("telegram.me") || host.equals("telegram.dog")) {
                                         String path = data.getPath();
                                         if (path != null && path.length() > 1) {
                                             path = path.substring(1);
@@ -882,16 +885,20 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
             if (push_user_id != 0) {
                 Bundle args = new Bundle();
                 args.putInt("user_id", push_user_id);
-                ChatActivity fragment = new ChatActivity(args);
-                if (actionBarLayout.presentFragment(fragment, false, true, true)) {
-                    pushOpened = true;
+                if (mainFragmentsStack.isEmpty() || MessagesController.checkCanOpenChat(args, mainFragmentsStack.get(mainFragmentsStack.size() - 1))) {
+                    ChatActivity fragment = new ChatActivity(args);
+                    if (actionBarLayout.presentFragment(fragment, false, true, true)) {
+                        pushOpened = true;
+                    }
                 }
             } else if (push_chat_id != 0) {
                 Bundle args = new Bundle();
                 args.putInt("chat_id", push_chat_id);
-                ChatActivity fragment = new ChatActivity(args);
-                if (actionBarLayout.presentFragment(fragment, false, true, true)) {
-                    pushOpened = true;
+                if (mainFragmentsStack.isEmpty() || MessagesController.checkCanOpenChat(args, mainFragmentsStack.get(mainFragmentsStack.size() - 1))) {
+                    ChatActivity fragment = new ChatActivity(args);
+                    if (actionBarLayout.presentFragment(fragment, false, true, true)) {
+                        pushOpened = true;
+                    }
                 }
             } else if (push_enc_id != 0) {
                 Bundle args = new Bundle();
@@ -1025,6 +1032,21 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
         return false;
     }
 
+    private boolean isInternalUri(Uri uri) {
+        String pathString = uri.getPath();
+        if (pathString == null) {
+            return false;
+        }
+        while (true) {
+            String newPath = Utilities.readlink(pathString);
+            if (newPath == null || newPath.equals(pathString)) {
+                break;
+            }
+            pathString = newPath;
+        }
+        return pathString != null && pathString.toLowerCase().contains("/data/data/" + getPackageName() + "/files");
+    }
+
     private void runLinkRequest(final String username, final String group, final String sticker, final String botUser, final String botChat, final String message, final boolean hasUrl, final Integer messageId, final int state) {
         final ProgressDialog progressDialog = new ProgressDialog(this);
         progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
@@ -1068,34 +1090,48 @@ public void run() {
                                         args.putInt("dialogsType", 2);
                                         args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
                                         DialogsActivity fragment = new DialogsActivity(args);
-                                        fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
+                                        fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
                                             @Override
                                             public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                                MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, botChat, null);
                                                 Bundle args = new Bundle();
                                                 args.putBoolean("scrollToTopOnResume", true);
                                                 args.putInt("chat_id", -(int) did);
-                                                actionBarLayout.presentFragment(new ChatActivity(args), true, false, true);
+                                                if (mainFragmentsStack.isEmpty() || MessagesController.checkCanOpenChat(args, mainFragmentsStack.get(mainFragmentsStack.size() - 1))) {
+                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                                    MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, botChat, null);
+                                                    actionBarLayout.presentFragment(new ChatActivity(args), true, false, true);
+                                                }
                                             }
                                         });
                                         presentFragment(fragment);
                                     } else {
+                                        long dialog_id;
+                                        boolean isBot = false;
                                         Bundle args = new Bundle();
                                         if (!res.chats.isEmpty()) {
                                             args.putInt("chat_id", res.chats.get(0).id);
+                                            dialog_id = -res.chats.get(0).id;
                                         } else {
                                             args.putInt("user_id", res.users.get(0).id);
+                                            dialog_id = res.users.get(0).id;
                                         }
                                         if (botUser != null && res.users.size() > 0 && res.users.get(0).bot) {
                                             args.putString("botUser", botUser);
+                                            isBot = true;
                                         }
                                         if (messageId != null) {
                                             args.putInt("message_id", messageId);
                                         }
-                                        ChatActivity fragment = new ChatActivity(args);
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                        actionBarLayout.presentFragment(fragment, false, true, true);
+                                        BaseFragment lastFragment = !mainFragmentsStack.isEmpty() ? mainFragmentsStack.get(mainFragmentsStack.size() - 1) : null;
+                                        if (lastFragment == null || MessagesController.checkCanOpenChat(args, lastFragment)) {
+                                            if (isBot && lastFragment != null && lastFragment instanceof ChatActivity && ((ChatActivity) lastFragment).getDialogId() == dialog_id) {
+                                                ((ChatActivity) lastFragment).setBotUser(botUser);
+                                            } else {
+                                                ChatActivity fragment = new ChatActivity(args);
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                                actionBarLayout.presentFragment(fragment, false, true, true);
+                                            }
+                                        }
                                     }
                                 } else {
                                     try {
@@ -1134,9 +1170,11 @@ public void run() {
                                             MessagesStorage.getInstance().putUsersAndChats(null, chats, false, true);
                                             Bundle args = new Bundle();
                                             args.putInt("chat_id", invite.chat.id);
-                                            ChatActivity fragment = new ChatActivity(args);
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                            actionBarLayout.presentFragment(fragment, false, true, true);
+                                            if (mainFragmentsStack.isEmpty() || MessagesController.checkCanOpenChat(args, mainFragmentsStack.get(mainFragmentsStack.size() - 1))) {
+                                                ChatActivity fragment = new ChatActivity(args);
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                                actionBarLayout.presentFragment(fragment, false, true, true);
+                                            }
                                         } else {
                                             AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
                                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1200,9 +1238,11 @@ public void run() {
                                                 MessagesController.getInstance().putChats(updates.chats, false);
                                                 Bundle args = new Bundle();
                                                 args.putInt("chat_id", chat.id);
-                                                ChatActivity fragment = new ChatActivity(args);
-                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                                actionBarLayout.presentFragment(fragment, false, true, true);
+                                                if (mainFragmentsStack.isEmpty() || MessagesController.checkCanOpenChat(args, mainFragmentsStack.get(mainFragmentsStack.size() - 1))) {
+                                                    ChatActivity fragment = new ChatActivity(args);
+                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                                    actionBarLayout.presentFragment(fragment, false, true, true);
+                                                }
                                             }
                                         }
                                     } else {
@@ -1228,21 +1268,16 @@ public void run() {
             if (!mainFragmentsStack.isEmpty()) {
                 TLRPC.TL_inputStickerSetShortName stickerset = new TLRPC.TL_inputStickerSetShortName();
                 stickerset.short_name = sticker;
-                StickersQuery.loadStickers(mainFragmentsStack.get(0), stickerset);
+                mainFragmentsStack.get(mainFragmentsStack.size() - 1).showDialog(new StickersAlert(LaunchActivity.this, stickerset, null, null));
             }
             return;
         } else if (message != null) {
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
             DialogsActivity fragment = new DialogsActivity(args);
-            fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
+            fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
                 @Override
                 public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                    SharedPreferences.Editor editor = preferences.edit();
-                    editor.putString("dialog_" + did, message);
-                    editor.commit();
                     Bundle args = new Bundle();
                     args.putBoolean("scrollToTopOnResume", true);
                     args.putBoolean("hasUrl", hasUrl);
@@ -1261,7 +1296,14 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                     } else {
                         args.putInt("enc_id", high_id);
                     }
-                    actionBarLayout.presentFragment(new ChatActivity(args), true, false, true);
+                    if (MessagesController.checkCanOpenChat(args, fragment)) {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putString("dialog_" + did, message);
+                        editor.commit();
+                        actionBarLayout.presentFragment(new ChatActivity(args), true, false, true);
+                    }
                 }
             });
             presentFragment(fragment, false, true);
@@ -1339,6 +1381,9 @@ public void didSelectDialog(DialogsActivity dialogsFragment, long dialog_id, boo
             } else {
                 args.putInt("enc_id", high_id);
             }
+            if (!MessagesController.checkCanOpenChat(args, dialogsFragment)) {
+                return;
+            }
             ChatActivity fragment = new ChatActivity(args);
 
             if (videoPath != null) {
@@ -1373,7 +1418,7 @@ public void didSelectDialog(DialogsActivity dialogsFragment, long dialog_id, boo
                 }
                 if (contactsToSend != null && !contactsToSend.isEmpty()) {
                     for (TLRPC.User user : contactsToSend) {
-                        SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null, true);
+                        SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null, true, null, null);
                     }
                 }
             }
@@ -1401,6 +1446,7 @@ private void onFinish() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.needShowAlert);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wasUnableToFindCurrentLocation);
         if (Build.VERSION.SDK_INT < 14) {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.screenStateChanged);
         }
@@ -1416,7 +1462,7 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
 
     public void needLayout() {
         if (AndroidUtilities.isTablet()) {
-            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) layersActionBarLayout.getLayoutParams();
             relativeLayoutParams.leftMargin = (AndroidUtilities.displaySize.x - relativeLayoutParams.width) / 2;
             int y = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
             relativeLayoutParams.topMargin = y + (AndroidUtilities.displaySize.y - relativeLayoutParams.height - y) / 2;
@@ -1445,11 +1491,14 @@ public void needLayout() {
                 relativeLayoutParams.leftMargin = leftWidth;
                 rightActionBarLayout.setLayoutParams(relativeLayoutParams);
 
-                if (AndroidUtilities.isSmallTablet() && actionBarLayout.fragmentsStack.size() == 2) {
-                    BaseFragment chatFragment = actionBarLayout.fragmentsStack.get(1);
-                    chatFragment.onPause();
-                    actionBarLayout.fragmentsStack.remove(1);
-                    rightActionBarLayout.fragmentsStack.add(chatFragment);
+                if (AndroidUtilities.isSmallTablet() && actionBarLayout.fragmentsStack.size() >= 2) {
+                    for (int a = 1; a < actionBarLayout.fragmentsStack.size(); a++) {
+                        BaseFragment chatFragment = actionBarLayout.fragmentsStack.get(a);
+                        chatFragment.onPause();
+                        actionBarLayout.fragmentsStack.remove(a);
+                        rightActionBarLayout.fragmentsStack.add(chatFragment);
+                        a--;
+                    }
                     if (passcodeView.getVisibility() != View.VISIBLE) {
                         actionBarLayout.showLastFragment();
                         rightActionBarLayout.showLastFragment();
@@ -1471,12 +1520,14 @@ public void needLayout() {
                 rightActionBarLayout.setVisibility(View.GONE);
                 backgroundTablet.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
 
-                if (rightActionBarLayout.fragmentsStack.size() == 1) {
-                    BaseFragment chatFragment = rightActionBarLayout.fragmentsStack.get(0);
-                    chatFragment.onPause();
-                    rightActionBarLayout.fragmentsStack.remove(0);
-                    actionBarLayout.fragmentsStack.add(chatFragment);
-                    //actionBarLayout.addFragmentToStack(chatFragment);
+                if (!rightActionBarLayout.fragmentsStack.isEmpty()) {
+                    for (int a = 0; a < rightActionBarLayout.fragmentsStack.size(); a++) {
+                        BaseFragment chatFragment = rightActionBarLayout.fragmentsStack.get(a);
+                        chatFragment.onPause();
+                        rightActionBarLayout.fragmentsStack.remove(a);
+                        actionBarLayout.fragmentsStack.add(chatFragment);
+                        a--;
+                    }
                     if (passcodeView.getVisibility() != View.VISIBLE) {
                         actionBarLayout.showLastFragment();
                     }
@@ -1495,7 +1546,12 @@ public void fixLayout() {
         actionBarLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
             @Override
             public void onGlobalLayout() {
-                needLayout();
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        needLayout();
+                    }
+                });
                 if (actionBarLayout != null) {
                     if (Build.VERSION.SDK_INT < 16) {
                         actionBarLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
@@ -1605,6 +1661,18 @@ protected void onPause() {
         AndroidUtilities.unregisterUpdates();
     }
 
+    @Override
+    protected void onStart() {
+        super.onStart();
+        Browser.bindCustomTabsService(this);
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        Browser.unbindCustomTabsService(this);
+    }
+
     @Override
     protected void onDestroy() {
         PhotoViewer.getInstance().destroyPhotoViewer();
@@ -1720,7 +1788,9 @@ public void didReceivedNotification(int id, Object... args) {
                 builder.setNegativeButton(LocaleController.getString("MoreInfo", R.string.MoreInfo), new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
-                        AndroidUtilities.openUrl(LaunchActivity.this, LocaleController.getString("NobodyLikesSpamUrl", R.string.NobodyLikesSpamUrl));
+                        if (!mainFragmentsStack.isEmpty()) {
+                            MessagesController.openByUserName("spambot", mainFragmentsStack.get(mainFragmentsStack.size() - 1), 1);
+                        }
                     }
                 });
             }
@@ -1734,6 +1804,38 @@ public void onClick(DialogInterface dialogInterface, int i) {
             if (!mainFragmentsStack.isEmpty()) {
                 mainFragmentsStack.get(mainFragmentsStack.size() - 1).showDialog(builder.create());
             }
+        } else if (id == NotificationCenter.wasUnableToFindCurrentLocation) {
+            final HashMap<String, MessageObject> waitingForLocation = (HashMap<String, MessageObject>) args[0];
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+            builder.setNegativeButton(LocaleController.getString("ShareYouLocationUnableManually", R.string.ShareYouLocationUnableManually), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    if (mainFragmentsStack.isEmpty()) {
+                        return;
+                    }
+                    BaseFragment lastFragment = mainFragmentsStack.get(mainFragmentsStack.size() - 1);
+                    if (!AndroidUtilities.isGoogleMapsInstalled(lastFragment)) {
+                        return;
+                    }
+                    LocationActivity fragment = new LocationActivity();
+                    fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
+                        @Override
+                        public void didSelectLocation(TLRPC.MessageMedia location) {
+                            for (HashMap.Entry<String, MessageObject> entry : waitingForLocation.entrySet()) {
+                                MessageObject messageObject = entry.getValue();
+                                SendMessagesHelper.getInstance().sendMessage(location, messageObject.getDialogId(), messageObject, false, null, null);
+                            }
+                        }
+                    });
+                    presentFragment(fragment);
+                }
+            });
+            builder.setMessage(LocaleController.getString("ShareYouLocationUnable", R.string.ShareYouLocationUnable));
+            if (!mainFragmentsStack.isEmpty()) {
+                mainFragmentsStack.get(mainFragmentsStack.size() - 1).showDialog(builder.create());
+            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 51e5088b2..78bc7cb0d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -363,6 +363,15 @@ public void getOutline(View view, Outline outline) {
             routeButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
+                    if (Build.VERSION.SDK_INT >= 23) {
+                        Activity activity = getParentActivity();
+                        if (activity != null) {
+                            if (activity.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                                showPermissionAlert(true);
+                                return;
+                            }
+                        }
+                    }
                     if (myLocation != null) {
                         try {
                             Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(String.format(Locale.US, "http://maps.google.com/maps?saddr=%f,%f&daddr=%f,%f", myLocation.getLatitude(), myLocation.getLongitude(), messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long)));
@@ -382,7 +391,7 @@ public void onClick(View v) {
                         Activity activity = getParentActivity();
                         if (activity != null) {
                             if (activity.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
-                                showPermissionAlert();
+                                showPermissionAlert(true);
                                 return;
                             }
                         }
@@ -539,7 +548,7 @@ public void onClick(View v) {
                         Activity activity = getParentActivity();
                         if (activity != null) {
                             if (activity.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
-                                showPermissionAlert();
+                                showPermissionAlert(false);
                                 return;
                             }
                         }
@@ -646,13 +655,17 @@ public void onMyLocationChange(Location location) {
         return fragmentView;
     }
 
-    private void showPermissionAlert() {
+    private void showPermissionAlert(boolean byButton) {
         if (getParentActivity() == null) {
             return;
         }
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        builder.setMessage(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation));
+        if (byButton) {
+            builder.setMessage(LocaleController.getString("PermissionNoLocationPosition", R.string.PermissionNoLocationPosition));
+        } else {
+            builder.setMessage(LocaleController.getString("PermissionNoLocation", R.string.PermissionNoLocation));
+        }
         builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() {
             @TargetApi(Build.VERSION_CODES.GINGERBREAD)
             @Override
@@ -929,7 +942,18 @@ public void onResume() {
         super.onResume();
         AndroidUtilities.removeAdjustResize(getParentActivity(), classGuid);
         if (mapView != null) {
-            mapView.onResume();
+            try {
+                mapView.onResume();
+            } catch (Throwable e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        if (googleMap != null) {
+            try {
+                googleMap.setMyLocationEnabled(true);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         }
         updateUserData();
         fixLayoutInternal(true);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 358bc1127..7dc0183ad 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -8,8 +8,10 @@
 
 package org.telegram.ui;
 
+import android.Manifest;
 import android.animation.Animator;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.ProgressDialog;
@@ -18,6 +20,9 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.graphics.Canvas;
+import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.os.Build;
 import android.os.Bundle;
@@ -26,8 +31,6 @@
 import android.text.Editable;
 import android.text.InputFilter;
 import android.text.InputType;
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.text.method.PasswordTransformationMethod;
@@ -40,6 +43,7 @@
 import android.widget.AdapterView;
 import android.widget.EditText;
 import android.widget.FrameLayout;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
@@ -67,7 +71,6 @@
 import org.telegram.ui.Components.HintEditText;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SlideView;
-import org.telegram.ui.Components.TypefaceSpan;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
@@ -84,17 +87,21 @@
 public class LoginActivity extends BaseFragment {
 
     private int currentViewNum = 0;
-    private SlideView[] views = new SlideView[5];
+    private SlideView[] views = new SlideView[8];
     private ProgressDialog progressDialog;
+    private Dialog permissionsDialog;
+    private ArrayList<String> permissionsItems = new ArrayList<>();
+    private boolean checkPermissions = true;
+    private View doneButton;
 
     private final static int done_button = 1;
 
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
-        for (SlideView v : views) {
-            if (v != null) {
-                v.onDestroyActivity();
+        for (int a = 0; a < views.length; a++) {
+            if (views[a] != null) {
+                views[a].onDestroyActivity();
             }
         }
         if (progressDialog != null) {
@@ -123,7 +130,7 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
 
         fragmentView = new ScrollView(context);
         ScrollView scrollView = (ScrollView) fragmentView;
@@ -133,12 +140,15 @@ public void onItemClick(int id) {
         scrollView.addView(frameLayout, LayoutHelper.createScroll(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT));
 
         views[0] = new PhoneView(context);
-        views[1] = new LoginActivitySmsView(context);
-        views[2] = new LoginActivityRegisterView(context);
-        views[3] = new LoginActivityPasswordView(context);
-        views[4] = new LoginActivityRecoverView(context);
+        views[1] = new LoginActivitySmsView(context, 1);
+        views[2] = new LoginActivitySmsView(context, 2);
+        views[3] = new LoginActivitySmsView(context, 3);
+        views[4] = new LoginActivitySmsView(context, 4);
+        views[5] = new LoginActivityRegisterView(context);
+        views[6] = new LoginActivityPasswordView(context);
+        views[7] = new LoginActivityRecoverView(context);
 
-        for (int a = 0; a < 5; a++) {
+        for (int a = 0; a < views.length; a++) {
             views[a].setVisibility(a == 0 ? View.VISIBLE : View.GONE);
             frameLayout.addView(views[a], LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, a == 0 ? LayoutHelper.WRAP_CONTENT : LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, AndroidUtilities.isTablet() ? 26 : 18, 30, AndroidUtilities.isTablet() ? 26 : 18, 0));
         }
@@ -146,7 +156,7 @@ public void onItemClick(int id) {
         Bundle savedInstanceState = loadCurrentState();
         if (savedInstanceState != null) {
             currentViewNum = savedInstanceState.getInt("currentViewNum", 0);
-            if (currentViewNum == 1) {
+            if (currentViewNum >= 1 && currentViewNum <= 4) {
                 int time = savedInstanceState.getInt("open");
                 if (time != 0 && Math.abs(System.currentTimeMillis() / 1000 - time) >= 24 * 60 * 60) {
                     currentViewNum = 0;
@@ -158,12 +168,21 @@ public void onItemClick(int id) {
         actionBar.setTitle(views[currentViewNum].getHeaderName());
         for (int a = 0; a < views.length; a++) {
             if (savedInstanceState != null) {
-                views[a].restoreStateParams(savedInstanceState);
+                if (a >= 1 && a <= 4) {
+                    if (a == currentViewNum) {
+                        views[a].restoreStateParams(savedInstanceState);
+                    }
+                } else {
+                    views[a].restoreStateParams(savedInstanceState);
+                }
             }
             if (currentViewNum == a) {
                 actionBar.setBackButtonImage(views[a].needBackButton() ? R.drawable.ic_ab_back : 0);
                 views[a].setVisibility(View.VISIBLE);
                 views[a].onShow();
+                if (a == 3) {
+                    doneButton.setVisibility(View.GONE);
+                }
             } else {
                 views[a].setVisibility(View.GONE);
             }
@@ -183,10 +202,10 @@ public void onResume() {
         super.onResume();
         AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
         try {
-            if (currentViewNum == 1 && views[1] instanceof LoginActivitySmsView) {
-                int time = ((LoginActivitySmsView) views[1]).openTime;
+            if (currentViewNum >= 1 && currentViewNum <= 4 && views[currentViewNum] instanceof LoginActivitySmsView) {
+                int time = ((LoginActivitySmsView) views[currentViewNum]).openTime;
                 if (time != 0 && Math.abs(System.currentTimeMillis() / 1000 - time) >= 24 * 60 * 60) {
-                    views[1].onBackPressed();
+                    views[currentViewNum].onBackPressed();
                     setPage(0, false, null, true);
                 }
             }
@@ -195,10 +214,20 @@ public void onResume() {
         }
     }
 
+    @Override
+    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
+        if (requestCode == 6) {
+            checkPermissions = false;
+            if (currentViewNum == 0) {
+                views[currentViewNum].onNextPressed();
+            }
+        }
+    }
+
     private Bundle loadCurrentState() {
         try {
             Bundle bundle = new Bundle();
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", Context.MODE_PRIVATE);
             Map<String, ?> params = preferences.getAll();
             for (Map.Entry<String, ?> entry : params.entrySet()) {
                 String key = entry.getKey();
@@ -231,7 +260,7 @@ private Bundle loadCurrentState() {
     }
 
     private void clearCurrentState() {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", Context.MODE_PRIVATE);
         SharedPreferences.Editor editor = preferences.edit();
         editor.clear();
         editor.commit();
@@ -259,22 +288,29 @@ private void putBundleToEditor(Bundle bundle, SharedPreferences.Editor editor, S
         }
     }
 
+    @Override
+    protected void onDialogDismiss(Dialog dialog) {
+        if (Build.VERSION.SDK_INT >= 23 && dialog == permissionsDialog && !permissionsItems.isEmpty() && getParentActivity() != null) {
+            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
+        }
+    }
+
     @Override
     public boolean onBackPressed() {
         if (currentViewNum == 0) {
-            for (SlideView v : views) {
-                if (v != null) {
-                    v.onDestroyActivity();
+            for (int a = 0; a < views.length; a++) {
+                if (views[a] != null) {
+                    views[a].onDestroyActivity();
                 }
             }
             clearCurrentState();
             return true;
-        } else if (currentViewNum == 3) {
+        } else if (currentViewNum == 6) {
             views[currentViewNum].onBackPressed();
             setPage(0, true, null, true);
-        } else if (currentViewNum == 4) {
+        } else if (currentViewNum == 7) {
             views[currentViewNum].onBackPressed();
-            setPage(3, true, null, true);
+            setPage(6, true, null, true);
         }
         return false;
     }
@@ -314,6 +350,14 @@ public void needHideProgress() {
     }
 
     public void setPage(int page, boolean animated, Bundle params, boolean back) {
+        if (page == 3) {
+            doneButton.setVisibility(View.GONE);
+        } else {
+            if (page == 0) {
+                checkPermissions = true;
+            }
+            doneButton.setVisibility(View.VISIBLE);
+        }
         if (android.os.Build.VERSION.SDK_INT > 13 && animated) {
             final SlideView outView = views[currentViewNum];
             final SlideView newView = views[page];
@@ -384,7 +428,7 @@ public void saveSelfArgs(Bundle outState) {
                     v.saveStateParams(bundle);
                 }
             }
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo2", Context.MODE_PRIVATE);
             SharedPreferences.Editor editor = preferences.edit();
             editor.clear();
             putBundleToEditor(bundle, editor, null);
@@ -394,13 +438,47 @@ public void saveSelfArgs(Bundle outState) {
         }
     }
 
-    public void needFinishActivity() {
+    private void needFinishActivity() {
         clearCurrentState();
         presentFragment(new DialogsActivity(null), true);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.mainUserInfoChanged);
     }
 
-    public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener, NotificationCenter.NotificationCenterDelegate {
+    private void fillNextCodeParams(Bundle params, TLRPC.TL_auth_sentCode res) {
+        params.putString("phoneHash", res.phone_code_hash);
+        if (res.next_type instanceof TLRPC.TL_auth_codeTypeCall) {
+            params.putInt("nextType", 4);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeFlashCall) {
+            params.putInt("nextType", 3);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeSms) {
+            params.putInt("nextType", 2);
+        }
+        if (res.type instanceof TLRPC.TL_auth_sentCodeTypeApp) {
+            params.putInt("type", 1);
+            params.putInt("length", res.type.length);
+            setPage(1, true, params, false);
+        } else {
+            if (res.timeout == 0) {
+                res.timeout = 60;
+            }
+            params.putInt("timeout", res.timeout * 1000);
+            if (res.type instanceof TLRPC.TL_auth_sentCodeTypeCall) {
+                params.putInt("type", 4);
+                params.putInt("length", res.type.length);
+                setPage(4, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeFlashCall) {
+                params.putInt("type", 3);
+                params.putString("pattern", res.type.pattern);
+                setPage(3, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeSms) {
+                params.putInt("type", 2);
+                params.putInt("length", res.type.length);
+                setPage(2, true, params, false);
+            }
+        }
+    }
+
+    public class PhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
 
         private EditText codeField;
         private HintEditText phoneField;
@@ -418,7 +496,7 @@ public void needFinishActivity() {
         private boolean ignoreOnPhoneChange = false;
         private boolean nextPressed = false;
 
-        public PhoneView(final Context context) {
+        public PhoneView(Context context) {
             super(context);
 
             setOrientation(VERTICAL);
@@ -729,11 +807,9 @@ public int compare(String lhs, String rhs) {
             }
 
             if (codeField.length() != 0) {
-                AndroidUtilities.showKeyboard(phoneField);
                 phoneField.requestFocus();
                 phoneField.setSelection(phoneField.length());
             } else {
-                AndroidUtilities.showKeyboard(codeField);
                 codeField.requestFocus();
             }
         }
@@ -752,17 +828,6 @@ public void selectCountry(String name) {
             }
         }
 
-        @Override
-        public void didReceivedNotification(int id, final Object... args) {
-            /*if (id == NotificationCenter.didReceiveCall) {
-                if (codeField != null) {
-                    String phone = (String) args[0];
-                    phone = PhoneFormat.stripExceptNumbers(phone);
-                    codeField.setText(phone);
-                }
-            }*/
-        }
-
         @Override
         public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
             if (ignoreSelection) {
@@ -782,9 +847,46 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         @Override
         public void onNextPressed() {
-            if (nextPressed) {
+            if (getParentActivity() == null || nextPressed) {
                 return;
             }
+            TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+            boolean simcardAvailable = tm.getSimState() != TelephonyManager.SIM_STATE_ABSENT && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_NONE;
+            boolean allowCall = true;
+            if (Build.VERSION.SDK_INT >= 23 && simcardAvailable) {
+                allowCall = getParentActivity().checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED;
+                boolean allowSms = getParentActivity().checkSelfPermission(Manifest.permission.RECEIVE_SMS) == PackageManager.PERMISSION_GRANTED;
+                if (checkPermissions) {
+                    permissionsItems.clear();
+                    if (!allowCall) {
+                        permissionsItems.add(Manifest.permission.READ_PHONE_STATE);
+                    }
+                    if (!allowSms) {
+                        permissionsItems.add(Manifest.permission.RECEIVE_SMS);
+                    }
+                    if (!permissionsItems.isEmpty()) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        if (preferences.getBoolean("firstlogin", true) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.READ_PHONE_STATE) || getParentActivity().shouldShowRequestPermissionRationale(Manifest.permission.RECEIVE_SMS)) {
+                            preferences.edit().putBoolean("firstlogin", false).commit();
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                            if (permissionsItems.size() == 2) {
+                                builder.setMessage(LocaleController.getString("AllowReadCallAndSms", R.string.AllowReadCallAndSms));
+                            } else if (!allowSms) {
+                                builder.setMessage(LocaleController.getString("AllowReadSms", R.string.AllowReadSms));
+                            } else {
+                                builder.setMessage(LocaleController.getString("AllowReadCall", R.string.AllowReadCall));
+                            }
+                            permissionsDialog = showDialog(builder.create());
+                        } else {
+                            getParentActivity().requestPermissions(permissionsItems.toArray(new String[permissionsItems.size()]), 6);
+                        }
+                        return;
+                    }
+                }
+            }
+
             if (countryState == 1) {
                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
                 return;
@@ -796,7 +898,6 @@ public void onNextPressed() {
                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
                 return;
             }
-            //NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
 
             ConnectionsManager.getInstance().cleanUp();
             TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
@@ -804,12 +905,16 @@ public void onNextPressed() {
             ConnectionsManager.getInstance().applyCountryPortNumber(phone);
             req.api_hash = BuildVars.APP_HASH;
             req.api_id = BuildVars.APP_ID;
-            req.sms_type = 0;
             req.phone_number = phone;
-            req.lang_code = LocaleController.getLocaleString(LocaleController.getInstance().getSystemDefaultLocale());
+            req.lang_code = LocaleController.getLocaleStringIso639();
             if (req.lang_code.length() == 0) {
                 req.lang_code = "en";
             }
+            req.allow_flashcall = simcardAvailable && allowCall;
+            if (req.allow_flashcall) {
+                String number = tm.getLine1Number();
+                req.current_number = number != null && number.length() != 0 && (phone.contains(number) || number.contains(phone));
+            }
 
             final Bundle params = new Bundle();
             params.putString("phone", "+" + codeField.getText() + phoneField.getText());
@@ -830,10 +935,7 @@ public void run(final TLObject response, final TLRPC.TL_error error) {
                         public void run() {
                             nextPressed = false;
                             if (error == null) {
-                                final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode) response;
-                                params.putString("phoneHash", res.phone_code_hash);
-                                params.putInt("calltime", res.send_call_timeout * 1000);
-                                setPage(1, true, params, false);
+                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
                             } else {
                                 if (error.text != null) {
                                     if (error.text.contains("PHONE_NUMBER_INVALID")) {
@@ -869,7 +971,6 @@ public void onShow() {
                     codeField.requestFocus();
                 }
             }
-            //NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveCall);
         }
 
         @Override
@@ -904,6 +1005,32 @@ public void restoreStateParams(Bundle bundle) {
 
     public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
 
+        private class ProgressView extends View {
+
+            private Paint paint = new Paint();
+            private Paint paint2 = new Paint();
+            private float progress;
+
+            public ProgressView(Context context) {
+                super(context);
+                paint.setColor(0xffe1eaf2);
+                paint2.setColor(0xff62a0d0);
+            }
+
+            public void setProgress(float value) {
+                progress = value;
+                invalidate();
+            }
+
+            @Override
+            protected void onDraw(Canvas canvas) {
+                int start = (int) (getMeasuredWidth() * progress);
+                canvas.drawRect(0, 0, start, getMeasuredHeight(), paint2);
+                canvas.drawRect(start, 0, getMeasuredWidth(), getMeasuredHeight(), paint);
+            }
+        }
+
+        private String phone;
         private String phoneHash;
         private String requestPhone;
         private String emailPhone;
@@ -912,6 +1039,7 @@ public void restoreStateParams(Bundle bundle) {
         private TextView timeText;
         private TextView problemText;
         private Bundle currentParams;
+        private ProgressView progressView;
 
         private Timer timeTimer;
         private Timer codeTimer;
@@ -921,14 +1049,20 @@ public void restoreStateParams(Bundle bundle) {
         private volatile int codeTime = 15000;
         private double lastCurrentTime;
         private double lastCodeTime;
-        private boolean ignoreOnTextChange = false;
-        private boolean waitingForSms = false;
-        private boolean nextPressed = false;
+        private boolean ignoreOnTextChange;
+        private boolean waitingForEvent;
+        private boolean nextPressed;
         private String lastError = "";
+        private int currentType;
+        private int nextType;
+        private String pattern = "*";
+        private int length;
+        private int timeout;
 
-        public LoginActivitySmsView(Context context) {
+        public LoginActivitySmsView(Context context, final int type) {
             super(context);
 
+            currentType = type;
             setOrientation(VERTICAL);
 
             confirmTextView = new TextView(context);
@@ -936,7 +1070,23 @@ public LoginActivitySmsView(Context context) {
             confirmTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             confirmTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             confirmTextView.setLineSpacing(AndroidUtilities.dp(2), 1.0f);
-            addView(confirmTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+
+            if (currentType == 3) {
+                FrameLayout frameLayout = new FrameLayout(context);
+
+                ImageView imageView = new ImageView(context);
+                imageView.setImageResource(R.drawable.phone_activate);
+                if (LocaleController.isRTL) {
+                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.LEFT | Gravity.CENTER_VERTICAL, 2, 2, 0, 0));
+                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 64 + 18, 0, 0, 0));
+                } else {
+                    frameLayout.addView(confirmTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 0, 64 + 18, 0));
+                    frameLayout.addView(imageView, LayoutHelper.createFrame(64, 76, Gravity.RIGHT | Gravity.CENTER_VERTICAL, 0, 2, 0, 2));
+                }
+                addView(frameLayout, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            } else {
+                addView(confirmTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT));
+            }
 
             codeField = new EditText(context);
             codeField.setTextColor(0xff212121);
@@ -948,9 +1098,6 @@ public LoginActivitySmsView(Context context) {
             codeField.setInputType(InputType.TYPE_CLASS_PHONE);
             codeField.setMaxLines(1);
             codeField.setPadding(0, 0, 0, 0);
-            InputFilter[] inputFilters = new InputFilter[1];
-            inputFilters[0] = new InputFilter.LengthFilter(5);
-            codeField.setFilters(inputFilters);
             addView(codeField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, Gravity.CENTER_HORIZONTAL, 0, 20, 0, 0));
             codeField.addTextChangedListener(new TextWatcher() {
                 @Override
@@ -968,7 +1115,7 @@ public void afterTextChanged(Editable s) {
                     if (ignoreOnTextChange) {
                         return;
                     }
-                    if (codeField.length() == 5) {
+                    if (length != 0 && codeField.length() == length) {
                         onNextPressed();
                     }
                 }
@@ -983,6 +1130,11 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                     return false;
                 }
             });
+            if (currentType == 3) {
+                codeField.setEnabled(false);
+                codeField.setInputType(InputType.TYPE_NULL);
+                codeField.setVisibility(GONE);
+            }
 
             timeText = new TextView(context);
             timeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
@@ -991,9 +1143,13 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             timeText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             addView(timeText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT, 0, 30, 0, 0));
 
+            if (currentType == 3) {
+                progressView = new ProgressView(context);
+                addView(progressView, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 3, 0, 12, 0, 0));
+            }
+
             problemText = new TextView(context);
             problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
-            problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
             problemText.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             problemText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             problemText.setTextColor(0xff4d83b3);
@@ -1003,18 +1159,25 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             problemText.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    try {
-                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                        String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
-
-                        Intent mailer = new Intent(Intent.ACTION_SEND);
-                        mailer.setType("message/rfc822");
-                        mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
-                        mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
-                        mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
-                        getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
-                    } catch (Exception e) {
-                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
+                    if (nextPressed) {
+                        return;
+                    }
+                    if (nextType != 0 && nextType != 4) {
+                        resendCode();
+                    } else {
+                        try {
+                            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                            String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
+
+                            Intent mailer = new Intent(Intent.ACTION_SEND);
+                            mailer.setType("message/rfc822");
+                            mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@stel.com"});
+                            mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + emailPhone);
+                            mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
+                            getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
+                        } catch (Exception e) {
+                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
+                        }
                     }
                 }
             });
@@ -1034,12 +1197,66 @@ public void onClick(View v) {
             wrongNumber.setOnClickListener(new OnClickListener() {
                 @Override
                 public void onClick(View view) {
+                    TLRPC.TL_auth_cancelCode req = new TLRPC.TL_auth_cancelCode();
+                    req.phone_number = requestPhone;
+                    req.phone_code_hash = phoneHash;
+                    ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                        @Override
+                        public void run(TLObject response, TLRPC.TL_error error) {
+
+                        }
+                    }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
                     onBackPressed();
                     setPage(0, true, null, true);
                 }
             });
         }
 
+        private void resendCode() {
+            final Bundle params = new Bundle();
+            params.putString("phone", phone);
+            params.putString("ephone", emailPhone);
+            params.putString("phoneFormated", requestPhone);
+
+            nextPressed = true;
+            needShowProgress();
+
+            TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
+            req.phone_number = requestPhone;
+            req.phone_code_hash = phoneHash;
+            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            nextPressed = false;
+                            if (error == null) {
+                                fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response);
+                            } else {
+                                if (error.text != null) {
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        onBackPressed();
+                                        setPage(0, true, null, true);
+                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else if (error.code != -1000) {
+                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
+                                    }
+                                }
+                            }
+                            needHideProgress();
+                        }
+                    });
+                }
+            }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+        }
+
         @Override
         public String getHeaderName() {
             return LocaleController.getString("YourCode", R.string.YourCode);
@@ -1051,49 +1268,87 @@ public void setParams(Bundle params) {
                 return;
             }
             codeField.setText("");
-            AndroidUtilities.setWaitingForSms(true);
-            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
+            waitingForEvent = true;
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(true);
+                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(true);
+                NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceiveCall);
+            }
+
             currentParams = params;
-            waitingForSms = true;
-            String phone = params.getString("phone");
+            phone = params.getString("phone");
             emailPhone = params.getString("ephone");
             requestPhone = params.getString("phoneFormated");
             phoneHash = params.getString("phoneHash");
-            time = params.getInt("calltime");
+            timeout = time = params.getInt("timeout");
             openTime = (int) (System.currentTimeMillis() / 1000);
+            nextType = params.getInt("nextType");
+            pattern = params.getString("pattern");
+            length = params.getInt("length");
+
+            if (length != 0) {
+                InputFilter[] inputFilters = new InputFilter[1];
+                inputFilters[0] = new InputFilter.LengthFilter(length);
+                codeField.setFilters(inputFilters);
+            } else {
+                codeField.setFilters(new InputFilter[0]);
+            }
+            if (progressView != null) {
+                progressView.setVisibility(nextType != 0 ? VISIBLE : GONE);
+            }
 
             if (phone == null) {
                 return;
             }
 
             String number = PhoneFormat.getInstance().format(phone);
-            String str = String.format(LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " %s", number);
-            try {
-                SpannableStringBuilder stringBuilder = new SpannableStringBuilder(str);
-                TypefaceSpan span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-                int idx = str.indexOf(number);
-                stringBuilder.setSpan(span, idx, idx + number.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);
-                confirmTextView.setText(stringBuilder);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                confirmTextView.setText(str);
+            CharSequence str = "";
+            if (currentType == 1) {
+                str = AndroidUtilities.replaceTags(LocaleController.getString("SentAppCode", R.string.SentAppCode));
+            } else if (currentType == 2) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentSmsCode", R.string.SentSmsCode, number));
+            } else if (currentType == 3) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallCode", R.string.SentCallCode, number));
+            } else if (currentType == 4) {
+                str = AndroidUtilities.replaceTags(LocaleController.formatString("SentCallOnly", R.string.SentCallOnly, number));
+            }
+            confirmTextView.setText(str);
+
+            if (currentType != 3) {
+                AndroidUtilities.showKeyboard(codeField);
+                codeField.requestFocus();
+            } else {
+                AndroidUtilities.hideKeyboard(codeField);
             }
 
-            AndroidUtilities.showKeyboard(codeField);
-            codeField.requestFocus();
-
             destroyTimer();
             destroyCodeTimer();
-            if (time >= 3600 * 1000) {
+
+            lastCurrentTime = System.currentTimeMillis();
+            if (currentType == 1) {
+                problemText.setVisibility(VISIBLE);
                 timeText.setVisibility(GONE);
+            } else if (currentType == 3 && (nextType == 4 || nextType == 2)) {
                 problemText.setVisibility(GONE);
-            } else {
-                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
-                lastCurrentTime = System.currentTimeMillis();
+                timeText.setVisibility(VISIBLE);
+                if (nextType == 4) {
+                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
+                } else if (nextType == 2) {
+                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, 1, 0));
+                }
+                createTimer();
+            } else if (currentType == 2 && (nextType == 4 || nextType == 3)) {
+                timeText.setVisibility(VISIBLE);
+                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 2, 0));
                 problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+                createTimer();
+            } else {
+                timeText.setVisibility(GONE);
+                problemText.setVisibility(GONE);
+                createCodeTimer();
             }
-
-            createTimer();
         }
 
         private void createCodeTimer() {
@@ -1137,14 +1392,17 @@ private void destroyCodeTimer() {
         }
 
         private void createTimer() {
-            if (timeTimer != null || time >= 3600 * 1000) {
+            if (timeTimer != null) {
                 return;
             }
             timeTimer = new Timer();
             timeTimer.schedule(new TimerTask() {
                 @Override
                 public void run() {
-                    double currentTime = System.currentTimeMillis();
+                    if (timeTimer == null) {
+                        return;
+                    }
+                    final double currentTime = System.currentTimeMillis();
                     double diff = currentTime - lastCurrentTime;
                     time -= diff;
                     lastCurrentTime = currentTime;
@@ -1154,27 +1412,53 @@ public void run() {
                             if (time >= 1000) {
                                 int minutes = time / 1000 / 60;
                                 int seconds = time / 1000 - minutes * 60;
-                                timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                                if (nextType == 4 || nextType == 3) {
+                                    timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                                } else if (nextType == 2) {
+                                    timeText.setText(LocaleController.formatString("SmsText", R.string.SmsText, minutes, seconds));
+                                }
+                                if (progressView != null) {
+                                    progressView.setProgress(1.0f - (float) time / (float) timeout);
+                                }
                             } else {
-                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                                if (progressView != null) {
+                                    progressView.setProgress(1.0f);
+                                }
                                 destroyTimer();
-                                createCodeTimer();
-                                TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
-                                req.phone_number = requestPhone;
-                                req.phone_code_hash = phoneHash;
-                                ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                                    @Override
-                                    public void run(TLObject response, final TLRPC.TL_error error) {
-                                        if (error != null && error.text != null) {
-                                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                                @Override
-                                                public void run() {
-                                                    lastError = error.text;
+                                if (currentType == 3) {
+                                    AndroidUtilities.setWaitingForCall(false);
+                                    NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+                                    waitingForEvent = false;
+                                    destroyCodeTimer();
+                                    resendCode();
+                                } else if (currentType == 2) {
+                                    if (nextType == 4) {
+                                        timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                                        createCodeTimer();
+                                        TLRPC.TL_auth_resendCode req = new TLRPC.TL_auth_resendCode();
+                                        req.phone_number = requestPhone;
+                                        req.phone_code_hash = phoneHash;
+                                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                                            @Override
+                                            public void run(TLObject response, final TLRPC.TL_error error) {
+                                                if (error != null && error.text != null) {
+                                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                                        @Override
+                                                        public void run() {
+                                                            lastError = error.text;
+                                                        }
+                                                    });
                                                 }
-                                            });
-                                        }
+                                            }
+                                        }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+                                    } else if (nextType == 3) {
+                                        AndroidUtilities.setWaitingForSms(false);
+                                        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+                                        waitingForEvent = false;
+                                        destroyCodeTimer();
+                                        resendCode();
                                     }
-                                }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+                                }
                             }
                         }
                     });
@@ -1201,9 +1485,14 @@ public void onNextPressed() {
                 return;
             }
             nextPressed = true;
-            waitingForSms = false;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
             final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
             req.phone_number = requestPhone;
             req.phone_code = codeField.getText().toString();
@@ -1244,7 +1533,7 @@ public void run() {
                                     params.putString("phoneFormated", requestPhone);
                                     params.putString("phoneHash", phoneHash);
                                     params.putString("code", req.phone_code);
-                                    setPage(2, true, params, false);
+                                    setPage(5, true, params, false);
                                     destroyTimer();
                                     destroyCodeTimer();
                                 } else if (error.text.contains("SESSION_PASSWORD_NEEDED")) {
@@ -1266,7 +1555,7 @@ public void run() {
                                                         bundle.putString("phoneHash", phoneHash);
                                                         bundle.putString("code", req.phone_code);
                                                         bundle.putInt("has_recovery", password.has_recovery ? 1 : 0);
-                                                        setPage(3, true, bundle, false);
+                                                        setPage(6, true, bundle, false);
                                                     } else {
                                                         needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
                                                     }
@@ -1278,19 +1567,31 @@ public void run() {
                                     destroyCodeTimer();
                                 } else {
                                     needHideProgress();
-                                    createTimer();
-                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
-                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
-                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
-                                        onBackPressed();
-                                        setPage(0, true, null, true);
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
-                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
-                                    } else {
-                                        needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
+                                    if (currentType == 3 && (nextType == 4 || nextType == 2) || currentType == 2 && (nextType == 4 || nextType == 3)) {
+                                        createTimer();
+                                    }
+                                    if (currentType == 2) {
+                                        AndroidUtilities.setWaitingForSms(true);
+                                        NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveSmsCode);
+                                    } else if (currentType == 3) {
+                                        AndroidUtilities.setWaitingForCall(true);
+                                        NotificationCenter.getInstance().addObserver(LoginActivitySmsView.this, NotificationCenter.didReceiveCall);
+                                    }
+                                    waitingForEvent = true;
+                                    if (currentType != 3) {
+                                        if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                        } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                        } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                            onBackPressed();
+                                            setPage(0, true, null, true);
+                                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                        } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("FloodWait", R.string.FloodWait));
+                                        } else {
+                                            needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
+                                        }
                                     }
                                 }
                             }
@@ -1305,19 +1606,29 @@ public void onBackPressed() {
             destroyTimer();
             destroyCodeTimer();
             currentParams = null;
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
-            waitingForSms = false;
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
         }
 
         @Override
         public void onDestroyActivity() {
             super.onDestroyActivity();
-            AndroidUtilities.setWaitingForSms(false);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            if (currentType == 2) {
+                AndroidUtilities.setWaitingForSms(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveSmsCode);
+            } else if (currentType == 3) {
+                AndroidUtilities.setWaitingForCall(false);
+                NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceiveCall);
+            }
+            waitingForEvent = false;
             destroyTimer();
             destroyCodeTimer();
-            waitingForSms = false;
         }
 
         @Override
@@ -1331,16 +1642,26 @@ public void onShow() {
 
         @Override
         public void didReceivedNotification(int id, final Object... args) {
+            if (!waitingForEvent || codeField == null) {
+                return;
+            }
             if (id == NotificationCenter.didReceiveSmsCode) {
-                if (!waitingForSms) {
-                    return;
-                }
-                if (codeField != null) {
-                    ignoreOnTextChange = true;
-                    codeField.setText("" + args[0]);
-                    ignoreOnTextChange = false;
-                    onNextPressed();
+                ignoreOnTextChange = true;
+                codeField.setText("" + args[0]);
+                ignoreOnTextChange = false;
+                onNextPressed();
+            } else if (id == NotificationCenter.didReceiveCall) {
+                String num = "" + args[0];
+                if (!pattern.equals("*")) {
+                    String patternNumbers = pattern.replace("*", "");
+                    if (!num.contains(patternNumbers)) {
+                        return;
+                    }
                 }
+                ignoreOnTextChange = true;
+                codeField.setText(num);
+                ignoreOnTextChange = false;
+                onNextPressed();
             }
         }
 
@@ -1348,10 +1669,10 @@ public void didReceivedNotification(int id, final Object... args) {
         public void saveStateParams(Bundle bundle) {
             String code = codeField.getText().toString();
             if (code.length() != 0) {
-                bundle.putString("smsview_code", code);
+                bundle.putString("smsview_code_" + currentType, code);
             }
             if (currentParams != null) {
-                bundle.putBundle("smsview_params", currentParams);
+                bundle.putBundle("smsview_params_" + currentType, currentParams);
             }
             if (time != 0) {
                 bundle.putInt("time", time);
@@ -1363,11 +1684,11 @@ public void saveStateParams(Bundle bundle) {
 
         @Override
         public void restoreStateParams(Bundle bundle) {
-            currentParams = bundle.getBundle("smsview_params");
+            currentParams = bundle.getBundle("smsview_params_" + currentType);
             if (currentParams != null) {
                 setParams(currentParams);
             }
-            String code = bundle.getString("smsview_code");
+            String code = bundle.getString("smsview_code_" + currentType);
             if (code != null) {
                 codeField.setText(code);
             }
@@ -1468,7 +1789,7 @@ public void run() {
                                                 public void onClick(DialogInterface dialogInterface, int i) {
                                                     Bundle bundle = new Bundle();
                                                     bundle.putString("email_unconfirmed_pattern", res.email_pattern);
-                                                    setPage(4, true, bundle, false);
+                                                    setPage(7, true, bundle, false);
                                                 }
                                             });
                                             Dialog dialog = showDialog(builder.create());
@@ -1537,7 +1858,7 @@ public void run() {
                                                 params.putString("phoneFormated", requestPhone);
                                                 params.putString("phoneHash", phoneHash);
                                                 params.putString("code", phoneCode);
-                                                setPage(2, true, params, false);
+                                                setPage(5, true, params, false);
                                             } else {
                                                 needShowAlert(LocaleController.getString("AppName", R.string.AppName), error.text);
                                             }
@@ -1794,7 +2115,7 @@ public void onClick(View view) {
                     builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
-                            setPage(3, true, new Bundle(), true);
+                            setPage(6, true, new Bundle(), true);
                         }
                     });
                     Dialog dialog = showDialog(builder.create());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
index a2e77c3d8..65430d061 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ManageSpaceActivity.java
@@ -33,6 +33,7 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
 import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.util.ArrayList;
 
@@ -56,6 +57,7 @@ protected void onCreate(Bundle savedInstanceState) {
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
 
         super.onCreate(savedInstanceState);
+        Theme.loadRecources(this);
 
         int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
         if (resourceId > 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index e3d856b3f..716dea31e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -42,6 +42,7 @@
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MediaController;
 import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.messenger.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
@@ -60,6 +61,7 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BackDrawable;
 import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Adapters.BaseSectionsAdapter;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -336,7 +338,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     args.putBoolean("onlySelect", true);
                     args.putInt("dialogsType", 1);
                     DialogsActivity fragment = new DialogsActivity(args);
-                    fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
                         @Override
                         public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                             int lower_part = (int) did;
@@ -348,6 +350,9 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                                 } else if (lower_part < 0) {
                                     args.putInt("chat_id", -lower_part);
                                 }
+                                if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                    return;
+                                }
 
                                 ArrayList<MessageObject> fmessages = new ArrayList<>();
                                 for (int a = 1; a >= 0; a--) {
@@ -364,6 +369,7 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                                 actionBar.hideActionMode();
 
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+
                                 ChatActivity chatActivity = new ChatActivity(args);
                                 presentFragment(chatActivity, true);
                                 chatActivity.showReplyPanel(true, null, fmessages, null, false, false);
@@ -438,7 +444,7 @@ public void onTextChanged(EditText editText) {
         searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
         searchItem.setVisibility(View.GONE);
 
-        dropDownContainer = new ActionBarMenuItem(context, menu, R.drawable.bar_selector);
+        dropDownContainer = new ActionBarMenuItem(context, menu, 0);
         dropDownContainer.setSubMenuOpenSide(1);
         dropDownContainer.addSubItem(shared_media_item, LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle), 0);
         dropDownContainer.addSubItem(files_item, LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle), 0);
@@ -487,9 +493,9 @@ public boolean onTouch(View v, MotionEvent event) {
         actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
 
         if ((int) dialog_id != 0) {
-            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+            actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
         }
-        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+        actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, Theme.ACTION_BAR_MODE_SELECTOR_COLOR, null, AndroidUtilities.dp(54)));
 
         photoVideoAdapter = new SharedPhotoVideoAdapter(context);
         documentsAdapter = new SharedDocumentsAdapter(context, 1);
@@ -512,7 +518,7 @@ public boolean onTouch(View v, MotionEvent event) {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
                 if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
-                    MediaActivity.this.onItemClick(i, view, ((SharedDocumentCell) view).getDocument(), 0);
+                    MediaActivity.this.onItemClick(i, view, ((SharedDocumentCell) view).getMessage(), 0);
                 } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
                     MediaActivity.this.onItemClick(i, view, ((SharedLinkCell) view).getMessage(), 0);
                 }
@@ -560,7 +566,7 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
             public boolean onItemLongClick(AdapterView<?> parent, View view, int i, long id) {
                 if ((selectedMode == 1 || selectedMode == 4) && view instanceof SharedDocumentCell) {
                     SharedDocumentCell cell = (SharedDocumentCell) view;
-                    MessageObject message = cell.getDocument();
+                    MessageObject message = cell.getMessage();
                     return MediaActivity.this.onItemLongClick(message, view, 0);
                 } else if (selectedMode == 3 && view instanceof SharedLinkCell) {
                     SharedLinkCell cell = (SharedLinkCell) view;
@@ -901,7 +907,11 @@ private void switchToCurrentSelectedMode() {
                 listView.setAdapter(photoVideoAdapter);
                 dropDown.setText(LocaleController.getString("SharedMediaTitle", R.string.SharedMediaTitle));
                 emptyImageView.setImageResource(R.drawable.tip1);
-                emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoMediaSecret", R.string.NoMediaSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+                }
                 searchItem.setVisibility(View.GONE);
                 if (sharedMediaData[selectedMode].loading && sharedMediaData[selectedMode].messages.isEmpty()) {
                     progressView.setVisibility(View.VISIBLE);
@@ -918,12 +928,20 @@ private void switchToCurrentSelectedMode() {
                     listView.setAdapter(documentsAdapter);
                     dropDown.setText(LocaleController.getString("DocumentsTitle", R.string.DocumentsTitle));
                     emptyImageView.setImageResource(R.drawable.tip2);
-                    emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFilesSecret", R.string.NoSharedFilesSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedFiles", R.string.NoSharedFiles));
+                    }
                 } else if (selectedMode == 4) {
                     listView.setAdapter(audioAdapter);
                     dropDown.setText(LocaleController.getString("AudioTitle", R.string.AudioTitle));
                     emptyImageView.setImageResource(R.drawable.tip4);
-                    emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    if ((int) dialog_id == 0) {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudioSecret", R.string.NoSharedAudioSecret));
+                    } else {
+                        emptyTextView.setText(LocaleController.getString("NoSharedAudio", R.string.NoSharedAudio));
+                    }
                 }
                 searchItem.setVisibility(!sharedMediaData[selectedMode].messages.isEmpty() ? View.VISIBLE : View.GONE);
                 if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
@@ -944,7 +962,11 @@ private void switchToCurrentSelectedMode() {
                 listView.setAdapter(linksAdapter);
                 dropDown.setText(LocaleController.getString("LinksTitle", R.string.LinksTitle));
                 emptyImageView.setImageResource(R.drawable.tip3);
-                emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                if ((int) dialog_id == 0) {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinksSecret", R.string.NoSharedLinksSecret));
+                } else {
+                    emptyTextView.setText(LocaleController.getString("NoSharedLinks", R.string.NoSharedLinks));
+                }
                 searchItem.setVisibility(!sharedMediaData[3].messages.isEmpty() ? View.VISIBLE : View.GONE);
                 if (!sharedMediaData[selectedMode].loading && !sharedMediaData[selectedMode].endReached[0] && sharedMediaData[selectedMode].messages.isEmpty()) {
                     sharedMediaData[selectedMode].loading = true;
@@ -1044,7 +1066,7 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                             }
                         }
                         File f = null;
-                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.messageOwner.media.document) : "";
+                        String fileName = message.messageOwner.media != null ? FileLoader.getAttachFileName(message.getDocument()) : "";
                         if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
                             f = new File(message.messageOwner.attachPath);
                         }
@@ -1056,12 +1078,12 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                             try {
                                 Intent intent = new Intent(Intent.ACTION_VIEW);
                                 MimeTypeMap myMime = MimeTypeMap.getSingleton();
-                                int idx = fileName.lastIndexOf(".");
+                                int idx = fileName.lastIndexOf('.');
                                 if (idx != -1) {
                                     String ext = fileName.substring(idx + 1);
                                     realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
                                     if (realMimeType == null) {
-                                        realMimeType = message.messageOwner.media.document.mime_type;
+                                        realMimeType = message.getDocument().mime_type;
                                         if (realMimeType == null || realMimeType.length() == 0) {
                                             realMimeType = null;
                                         }
@@ -1091,15 +1113,15 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                 builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.messageOwner.media.document.mime_type));
+                                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
                                 showDialog(builder.create());
                             }
                         }
                     } else if (!cell.isLoading()) {
-                        FileLoader.getInstance().loadFile(cell.getDocument().messageOwner.media.document, false, false);
+                        FileLoader.getInstance().loadFile(cell.getMessage().getDocument(), false, false);
                         cell.updateFileExistIcon();
                     } else {
-                        FileLoader.getInstance().cancelLoadFile(cell.getDocument().messageOwner.media.document);
+                        FileLoader.getInstance().cancelLoadFile(cell.getMessage().getDocument());
                         cell.updateFileExistIcon();
                     }
                 }
@@ -1119,7 +1141,7 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
                         link = ((SharedLinkCell) view).getLink(0);
                     }
                     if (link != null) {
-                        AndroidUtilities.openUrl(getParentActivity(), link);
+                        Browser.openUrl(getParentActivity(), link);
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -1130,7 +1152,7 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
 
     private void openWebView(TLRPC.WebPage webPage) {
         BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
-        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.title, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
+        builder.setCustomView(new WebFrameLayout(getParentActivity(), builder.create(), webPage.site_name, webPage.description, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height));
         builder.setUseFullWidth(true);
         showDialog(builder.create());
     }
@@ -1612,14 +1634,14 @@ private void processSearch(final String query) {
                 @Override
                 public void run() {
                     if (!sharedMediaData[currentType].messages.isEmpty()) {
-                        if (currentType == 1) {
+                        if (currentType == 1 || currentType == 4) {
                             MessageObject messageObject = sharedMediaData[currentType].messages.get(sharedMediaData[currentType].messages.size() - 1);
                             queryServerSearch(query, messageObject.getId(), messageObject.getDialogId());
-                        } else if (currentType == 3 || currentType == 4) {
+                        } else if (currentType == 3) {
                             queryServerSearch(query, 0, dialog_id);
                         }
                     }
-                    if (currentType == 1) {
+                    if (currentType == 1 || currentType == 4) {
                         final ArrayList<MessageObject> copy = new ArrayList<>();
                         copy.addAll(sharedMediaData[currentType].messages);
                         Utilities.searchQueue.postRunnable(new Runnable() {
@@ -1644,7 +1666,8 @@ public void run() {
 
                                 for (int a = 0; a < copy.size(); a++) {
                                     MessageObject messageObject = copy.get(a);
-                                    for (String q : search) {
+                                    for (int b = 0; b < search.length; b++) {
+                                        String q = search[b];
                                         String name = messageObject.getDocumentName();
                                         if (name == null || name.length() == 0) {
                                             continue;
@@ -1654,6 +1677,31 @@ public void run() {
                                             resultArray.add(messageObject);
                                             break;
                                         }
+                                        if (currentType == 4) {
+                                            TLRPC.Document document;
+                                            if (messageObject.type == 0) {
+                                                document = messageObject.messageOwner.media.webpage.document;
+                                            } else {
+                                                document = messageObject.messageOwner.media.document;
+                                            }
+                                            boolean ok = false;
+                                            for (int c = 0; c < document.attributes.size(); c++) {
+                                                TLRPC.DocumentAttribute attribute = document.attributes.get(c);
+                                                if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
+                                                    if (attribute.performer != null) {
+                                                        ok = attribute.performer.toLowerCase().contains(q);
+                                                    }
+                                                    if (!ok && attribute.title != null) {
+                                                        ok = attribute.title.toLowerCase().contains(q);
+                                                    }
+                                                    break;
+                                                }
+                                            }
+                                            if (ok) {
+                                                resultArray.add(messageObject);
+                                                break;
+                                            }
+                                        }
                                     }
                                 }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 0ad05c2d7..513a21ae7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -57,7 +57,7 @@
     private boolean reseting = false;
 
     private int notificationsServiceRow;
-    private int messageSectionRow2;
+    private int notificationsServiceConnectionRow;
     private int messageSectionRow;
     private int messageAlertRow;
     private int messagePreviewRow;
@@ -85,6 +85,7 @@
     private int eventsSectionRow2;
     private int eventsSectionRow;
     private int contactJoinedRow;
+    private int pinnedMessageRow;
     private int otherSectionRow2;
     private int otherSectionRow;
     private int badgeNumberRow;
@@ -97,8 +98,6 @@
 
     @Override
     public boolean onFragmentCreate() {
-        notificationsServiceRow = rowCount++;
-        messageSectionRow2 = rowCount++;
         messageSectionRow = rowCount++;
         messageAlertRow = rowCount++;
         messagePreviewRow = rowCount++;
@@ -138,8 +137,11 @@ public boolean onFragmentCreate() {
         eventsSectionRow2 = rowCount++;
         eventsSectionRow = rowCount++;
         contactJoinedRow = rowCount++;
+        pinnedMessageRow = rowCount++;
         otherSectionRow2 = rowCount++;
         otherSectionRow = rowCount++;
+        notificationsServiceRow = rowCount++;
+        notificationsServiceConnectionRow = rowCount++;
         badgeNumberRow = rowCount++;
         androidAutoAlertRow = -1;
         repeatRow = rowCount++;
@@ -319,6 +321,12 @@ public void run() {
                     MessagesController.getInstance().enableJoined = !enabled;
                     editor.putBoolean("EnableContactJoined", !enabled);
                     editor.commit();
+                } else if (i == pinnedMessageRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    enabled = preferences.getBoolean("PinnedMessages", true);
+                    editor.putBoolean("PinnedMessages", !enabled);
+                    editor.commit();
                 } else if (i == androidAutoAlertRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -332,14 +340,30 @@ public void run() {
                     editor.putBoolean("badgeNumber", !enabled);
                     editor.commit();
                     NotificationsController.getInstance().setBadgeEnabled(!enabled);
+                } else if (i == notificationsServiceConnectionRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    enabled = preferences.getBoolean("pushConnection", true);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("pushConnection", !enabled);
+                    editor.commit();
+                    if (!enabled) {
+                        ConnectionsManager.getInstance().setPushConnectionEnabled(true);
+                    } else {
+                        ConnectionsManager.getInstance().setPushConnectionEnabled(false);
+                    }
                 } else if (i == notificationsServiceRow) {
                     final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     enabled = preferences.getBoolean("pushService", true);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("pushService", !enabled);
+                    editor.commit();
                     if (!enabled) {
-                        final SharedPreferences.Editor editor = preferences.edit();
-                        editor.putBoolean("pushService", !enabled);
-                        editor.commit();
                         ApplicationLoader.startPushService();
+                    } else {
+                        ApplicationLoader.stopPushService();
+                    }
+                    /*if (!enabled) {
+
                     } else {
                         if (getParentActivity() == null) {
                             return;
@@ -350,7 +374,7 @@ public void run() {
                         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
-                                ApplicationLoader.stopPushService();
+
                                 final SharedPreferences.Editor editor = preferences.edit();
                                 editor.putBoolean("pushService", false);
                                 editor.commit();
@@ -364,7 +388,7 @@ public void onClick(DialogInterface dialog, int which) {
                             }
                         });
                         showDialog(builder.create());
-                    }
+                    }*/
                 } else if (i == messageLedRow || i == groupLedRow) {
                     if (getParentActivity() == null) {
                         return;
@@ -641,7 +665,7 @@ public boolean areAllItemsEnabled() {
         public boolean isEnabled(int i) {
             return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow ||
                     i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow ||
-                    i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
+                    i == eventsSectionRow2 || i == groupSectionRow2 ||
                     i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2);
         }
 
@@ -709,11 +733,15 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == inappPriorityRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("NotificationsPriority", R.string.NotificationsPriority), preferences.getBoolean("EnableInAppPriority", false), false);
                 } else if (i == contactJoinedRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
+                    checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), true);
+                } else if (i == pinnedMessageRow) {
+                    checkCell.setTextAndCheck(LocaleController.getString("PinnedMessages", R.string.PinnedMessages), preferences.getBoolean("PinnedMessages", true), false);
                 } else if (i == androidAutoAlertRow) {
                     checkCell.setTextAndCheck("Android Auto", preferences.getBoolean("EnableAutoNotifications", false), true);
                 } else if (i == notificationsServiceRow) {
-                    checkCell.setTextAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), preferences.getBoolean("pushService", true), false);
+                    checkCell.setTextAndValueAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), LocaleController.getString("NotificationsServiceInfo", R.string.NotificationsServiceInfo), preferences.getBoolean("pushService", true), true, true);
+                } else if (i == notificationsServiceConnectionRow) {
+                    checkCell.setTextAndValueAndCheck(LocaleController.getString("NotificationsServiceConnection", R.string.NotificationsServiceConnection), LocaleController.getString("NotificationsServiceConnectionInfo", R.string.NotificationsServiceConnectionInfo), preferences.getBoolean("pushConnection", true), true, true);
                 } else if (i == badgeNumberRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("BadgeNumber", R.string.BadgeNumber), preferences.getBoolean("badgeNumber", true), true);
                 } else if (i == inchatSoundRow) {
@@ -837,13 +865,13 @@ public int getItemViewType(int i) {
                 return 0;
             } else if (i == messageAlertRow || i == messagePreviewRow || i == groupAlertRow ||
                     i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
-                    i == inappPreviewRow || i == contactJoinedRow ||
+                    i == inappPreviewRow || i == contactJoinedRow || i == pinnedMessageRow ||
                     i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
-                    i == inchatSoundRow || i == androidAutoAlertRow) {
+                    i == inchatSoundRow || i == androidAutoAlertRow || i == notificationsServiceConnectionRow) {
                 return 1;
             } else if (i == messageLedRow || i == groupLedRow) {
                 return 3;
-            } else if (i == messageSectionRow2 || i == eventsSectionRow2 || i == groupSectionRow2 ||
+            } else if (i == eventsSectionRow2 || i == groupSectionRow2 ||
                     i == inappSectionRow2 || i == otherSectionRow2 || i == resetSectionRow2) {
                 return 4;
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
index e3848972d..64f5deb6c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
@@ -53,6 +53,7 @@
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.TextCheckCell;
 import org.telegram.ui.Cells.TextInfoPrivacyCell;
@@ -255,7 +256,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
             }
 
             if (type == 1) {
-                dropDownContainer = new ActionBarMenuItem(context, menu, R.drawable.bar_selector);
+                dropDownContainer = new ActionBarMenuItem(context, menu, 0);
                 dropDownContainer.setSubMenuOpenSide(1);
                 dropDownContainer.addSubItem(pin_item, LocaleController.getString("PasscodePIN", R.string.PasscodePIN), 0);
                 dropDownContainer.addSubItem(password_item, LocaleController.getString("PasscodePassword", R.string.PasscodePassword), 0);
@@ -362,7 +363,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                             @Override
                             public String format(int value) {
                                 if (value == 0) {
-                                    return LocaleController.getString("Disabled", R.string.Disabled);
+                                    return LocaleController.getString("AutoLockDisabled", R.string.AutoLockDisabled);
                                 } else if (value == 1) {
                                     return LocaleController.formatString("AutoLockInTime", R.string.AutoLockInTime, LocaleController.formatPluralString("Minutes", 1));
                                 } else if (value == 2) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 909fb7c94..c4b50be27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -37,6 +37,7 @@
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.Cells.PhotoPickerAlbumsCell;
 import org.telegram.ui.Cells.PhotoPickerSearchCell;
@@ -111,8 +112,8 @@ public void onFragmentDestroy() {
     @SuppressWarnings("unchecked")
     @Override
     public View createView(Context context) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_picker);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_MEDIA_PICKER_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
@@ -160,7 +161,7 @@ public void onItemClick(int id) {
         if (!singlePhoto) {
             selectedMode = 0;
 
-            dropDownContainer = new ActionBarMenuItem(context, menu, R.drawable.bar_selector_picker);
+            dropDownContainer = new ActionBarMenuItem(context, menu, 0);
             dropDownContainer.setSubMenuOpenSide(1);
             dropDownContainer.addSubItem(item_photos, LocaleController.getString("PickerPhotos", R.string.PickerPhotos), 0);
             dropDownContainer.addSubItem(item_video, LocaleController.getString("PickerVideo", R.string.PickerVideo), 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index f51a2ebbf..b3d8d6590 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -15,7 +15,6 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.net.Uri;
 import android.os.Bundle;
-import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -29,6 +28,7 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.io.File;
@@ -58,16 +58,6 @@ public PhotoCropView(Context context) {
             init();
         }
 
-        public PhotoCropView(Context context, AttributeSet attrs) {
-            super(context, attrs);
-            init();
-        }
-
-        public PhotoCropView(Context context, AttributeSet attrs, int defStyle) {
-            super(context, attrs, defStyle);
-            init();
-        }
-
         private void init() {
             rectPaint = new Paint();
             rectPaint.setColor(0x3ffafafa);
@@ -428,8 +418,8 @@ public void onFragmentDestroy() {
 
     @Override
     public View createView(Context context) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_picker);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_MEDIA_PICKER_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAllowOverlayTitle(true);
         actionBar.setTitle(LocaleController.getString("CropImage", R.string.CropImage));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index c7cb26b90..c7d9915b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -60,6 +60,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
@@ -161,8 +162,8 @@ public void onFragmentDestroy() {
     @SuppressWarnings("unchecked")
     @Override
     public View createView(Context context) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_picker);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_MEDIA_PICKER_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         if (selectedAlbum != null) {
             actionBar.setTitle(selectedAlbum.bucketName);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 50e819baf..9071f57d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -31,6 +31,8 @@
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
 import android.util.TypedValue;
+import android.view.ActionMode;
+import android.view.ContextThemeWrapper;
 import android.view.GestureDetector;
 import android.view.Gravity;
 import android.view.KeyEvent;
@@ -67,6 +69,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -101,6 +104,7 @@
     private boolean isVisible;
 
     private Activity parentActivity;
+    private Context actvityContext;
 
     private ActionBar actionBar;
     private boolean isActionBarVisible = true;
@@ -294,7 +298,7 @@ public RadialProgressView(Context context, View parentView) {
                 progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
                 progressPaint.setStyle(Paint.Style.STROKE);
                 progressPaint.setStrokeCap(Paint.Cap.ROUND);
-                progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+                progressPaint.setStrokeWidth(AndroidUtilities.dp(3));
                 progressPaint.setColor(0xffffffff);
             }
             parent = parentView;
@@ -389,7 +393,7 @@ public void onDraw(Canvas canvas) {
             }
 
             if (backgroundState == 0 || backgroundState == 1 || previousBackgroundState == 0 || previousBackgroundState == 1) {
-                int diff = AndroidUtilities.dp(1);
+                int diff = AndroidUtilities.dp(4);
                 if (previousBackgroundState != -2) {
                     progressPaint.setAlpha((int) (255 * animatedAlphaValue * alpha));
                 } else {
@@ -886,6 +890,7 @@ public void setParentActivity(final Activity activity) {
             return;
         }
         parentActivity = activity;
+        actvityContext = new ContextThemeWrapper(parentActivity, R.style.Theme_TMessages);
 
         if (progressDrawables == null) {
             progressDrawables = new Drawable[4];
@@ -911,9 +916,27 @@ public boolean dispatchKeyEventPreIme(KeyEvent event) {
                 }
                 return super.dispatchKeyEventPreIme(event);
             }
+
+            @Override
+            public ActionMode startActionModeForChild(View originalView, ActionMode.Callback callback, int type) {
+                if (Build.VERSION.SDK_INT >= 23) {
+                    View view = parentActivity.findViewById(android.R.id.content);
+                    if (view instanceof ViewGroup) {
+                        try {
+                            return ((ViewGroup) view).startActionModeForChild(originalView, callback, type);
+                        } catch (Throwable e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+                return super.startActionModeForChild(originalView, callback, type);
+            }
         };
         windowView.setBackgroundDrawable(backgroundDrawable);
         windowView.setFocusable(false);
+        if (Build.VERSION.SDK_INT >= 23) {
+            windowView.setFitsSystemWindows(true);
+        }
 
         animatingImageView = new ClippingImageView(activity);
         animatingImageView.setAnimationValues(animationValues);
@@ -932,9 +955,9 @@ public boolean dispatchKeyEventPreIme(KeyEvent event) {
         windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
 
         actionBar = new ActionBar(activity);
-        actionBar.setBackgroundColor(0x7F000000);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_PHOTO_VIEWER_COLOR);
         actionBar.setOccupyStatusBar(false);
-        actionBar.setItemsBackground(R.drawable.bar_selector_white);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
         containerView.addView(actionBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
@@ -962,7 +985,7 @@ public void onItemClick(int id) {
                     }
 
                     if (f != null && f.exists()) {
-                        MediaController.saveFile(f.toString(), parentActivity, currentMessageObject != null && currentMessageObject.isVideo() ? 1 : 0, null);
+                        MediaController.saveFile(f.toString(), parentActivity, currentMessageObject != null && currentMessageObject.isVideo() ? 1 : 0, null, null);
                     } else {
                         AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1156,11 +1179,11 @@ public boolean canOpenMenu() {
         cropItem = menu.addItemWithWidth(gallery_menu_crop, R.drawable.photo_crop, AndroidUtilities.dp(56));
         tuneItem = menu.addItemWithWidth(gallery_menu_tune, R.drawable.photo_tools, AndroidUtilities.dp(56));
 
-        bottomLayout = new FrameLayout(parentActivity);
+        bottomLayout = new FrameLayout(actvityContext);
         bottomLayout.setBackgroundColor(0x7f000000);
         containerView.addView(bottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
 
-        captionTextViewOld = new TextView(parentActivity);
+        captionTextViewOld = new TextView(actvityContext);
         captionTextViewOld.setMaxLines(10);
         captionTextViewOld.setBackgroundColor(0x7f000000);
         captionTextViewOld.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), AndroidUtilities.dp(8));
@@ -1171,7 +1194,7 @@ public boolean canOpenMenu() {
         captionTextViewOld.setVisibility(View.INVISIBLE);
         containerView.addView(captionTextViewOld, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
 
-        captionTextView = captionTextViewNew = new TextView(parentActivity);
+        captionTextView = captionTextViewNew = new TextView(actvityContext);
         captionTextViewNew.setMaxLines(10);
         captionTextViewNew.setBackgroundColor(0x7f000000);
         captionTextViewNew.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), AndroidUtilities.dp(8));
@@ -1192,7 +1215,7 @@ public boolean canOpenMenu() {
         shareButton = new ImageView(containerView.getContext());
         shareButton.setImageResource(R.drawable.share);
         shareButton.setScaleType(ImageView.ScaleType.CENTER);
-        shareButton.setBackgroundResource(R.drawable.bar_selector_white);
+        shareButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
         bottomLayout.addView(shareButton, LayoutHelper.createFrame(50, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.RIGHT));
         shareButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -1206,10 +1229,10 @@ public void onClick(View v) {
 
                     if (currentMessageObject != null) {
                         isVideo = currentMessageObject.isVideo();
-                        if (currentMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
+                        /*if (currentMessageObject.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) {
                             AndroidUtilities.openUrl(parentActivity, currentMessageObject.messageOwner.media.webpage.url);
                             return;
-                        }
+                        }*/
                         f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
                     } else if (currentFileLocation != null) {
                         f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
@@ -1258,7 +1281,7 @@ public void onClick(View v) {
         dateTextView.setGravity(Gravity.LEFT);
         bottomLayout.addView(dateTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.LEFT, 16, 25, 50, 0));
 
-        pickerView = new PickerBottomLayout(parentActivity);
+        pickerView = new PickerBottomLayout(actvityContext);
         pickerView.setBackgroundColor(0x7f000000);
         containerView.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
         pickerView.cancelButton.setOnClickListener(new View.OnClickListener() {
@@ -1279,7 +1302,7 @@ public void onClick(View view) {
             }
         });
 
-        editorDoneLayout = new PickerBottomLayout(parentActivity);
+        editorDoneLayout = new PickerBottomLayout(actvityContext);
         editorDoneLayout.setBackgroundColor(0x7f000000);
         editorDoneLayout.updateSelectedCount(0, false);
         editorDoneLayout.setVisibility(View.GONE);
@@ -1307,10 +1330,10 @@ public void onClick(View view) {
             }
         });
 
-        ImageView rotateButton = new ImageView(parentActivity);
+        ImageView rotateButton = new ImageView(actvityContext);
         rotateButton.setScaleType(ImageView.ScaleType.CENTER);
         rotateButton.setImageResource(R.drawable.tool_rotate);
-        rotateButton.setBackgroundResource(R.drawable.bar_selector_white);
+        rotateButton.setBackgroundDrawable(Theme.createBarSelectorDrawable(Theme.ACTION_BAR_WHITE_SELECTOR_COLOR));
         editorDoneLayout.addView(rotateButton, LayoutHelper.createFrame(48, 48, Gravity.CENTER));
         rotateButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -1355,7 +1378,7 @@ public void onClick(View v) {
             }
         });
 
-        captionEditText = new PhotoViewerCaptionEnterView(parentActivity, containerView);
+        captionEditText = new PhotoViewerCaptionEnterView(actvityContext, containerView, windowView);
         captionEditText.setDelegate(new PhotoViewerCaptionEnterView.PhotoViewerCaptionEnterViewDelegate() {
             @Override
             public void onCaptionEnter() {
@@ -1389,8 +1412,8 @@ public void onWindowSizeChanged(int size) {
         });
         containerView.addView(captionEditText, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, -400));
 
-        mentionListView = new RecyclerListView(parentActivity);
-        mentionLayoutManager = new LinearLayoutManager(parentActivity) {
+        mentionListView = new RecyclerListView(actvityContext);
+        mentionLayoutManager = new LinearLayoutManager(actvityContext) {
             @Override
             public boolean supportsPredictiveItemAnimations() {
                 return false;
@@ -1401,12 +1424,10 @@ public boolean supportsPredictiveItemAnimations() {
         mentionListView.setBackgroundColor(0x7f000000);
         mentionListView.setVisibility(View.GONE);
         mentionListView.setClipToPadding(true);
-        if (Build.VERSION.SDK_INT > 8) {
-            mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
-        }
+        mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
         containerView.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
 
-        mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(parentActivity, true, new MentionsAdapter.MentionsAdapterDelegate() {
+        mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(actvityContext, true, 0, new MentionsAdapter.MentionsAdapterDelegate() {
             @Override
             public void needChangePanelVisibility(boolean show) {
                 if (show) {
@@ -1785,7 +1806,7 @@ public void onAnimationEnd(Object animation) {
             imageMoveAnimation.start();
         } else if (mode == 1) {
             if (photoCropView == null) {
-                photoCropView = new PhotoCropView(parentActivity);
+                photoCropView = new PhotoCropView(actvityContext);
                 photoCropView.setVisibility(View.GONE);
                 containerView.addView(photoCropView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48));
                 photoCropView.setDelegate(new PhotoCropView.PhotoCropViewDelegate() {
@@ -1800,6 +1821,11 @@ public void needMoveImageTo(float x, float y, float s, boolean animated) {
                             containerView.invalidate();
                         }
                     }
+
+                    @Override
+                    public Bitmap getBitmap() {
+                        return centerImage.getBitmap();
+                    }
                 });
             }
 
@@ -2165,12 +2191,12 @@ private String getFileName(int index) {
                 } else {
                     size[0] = -1;
                 }
-            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaDocument && message.messageOwner.media.document != null && message.messageOwner.media.document.thumb != null) {
-                size[0] = message.messageOwner.media.document.thumb.size;
+            } else if (message.getDocument() != null && message.getDocument().thumb != null) {
+                size[0] = message.getDocument().thumb.size;
                 if (size[0] == 0) {
                     size[0] = -1;
                 }
-                return message.messageOwner.media.document.thumb.location;
+                return message.getDocument().thumb.location;
             }
         }
         return null;
@@ -2358,7 +2384,9 @@ private void setImageIndex(int index, boolean init) {
                 closePhoto(false, false);
                 return;
             }
-            currentMessageObject = imagesArr.get(currentIndex);
+            MessageObject newMessageObject = imagesArr.get(currentIndex);
+            sameImage = currentMessageObject != null && currentMessageObject.getId() == newMessageObject.getId();
+            currentMessageObject = newMessageObject;
             isVideo = currentMessageObject.isVideo();
             if (currentMessageObject.canDeleteMessage(null)) {
                 menuItem.showSubItem(gallery_menu_delete);
@@ -2383,7 +2411,7 @@ private void setImageIndex(int index, boolean init) {
             long date = (long) currentMessageObject.messageOwner.date * 1000;
             String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.getInstance().formatterYear.format(new Date(date)), LocaleController.getInstance().formatterDay.format(new Date(date)));
             if (currentFileNames[0] != null && isVideo) {
-                dateTextView.setText(String.format("%s (%s)", dateString, AndroidUtilities.formatFileSize(currentMessageObject.messageOwner.media.document.size)));
+                dateTextView.setText(String.format("%s (%s)", dateString, AndroidUtilities.formatFileSize(currentMessageObject.getDocument().size)));
             } else {
                 dateTextView.setText(dateString);
             }
@@ -2579,7 +2607,7 @@ private void setCurrentCaption(final CharSequence caption) {
             captionTextViewNew = captionTextView;
 
             captionItem.setIcon(R.drawable.photo_text2);
-            CharSequence str = Emoji.replaceEmoji(new SpannableStringBuilder(caption.toString()), MessageObject.textPaint.getFontMetricsInt(), AndroidUtilities.dp(20), false);
+            CharSequence str = Emoji.replaceEmoji(new SpannableStringBuilder(caption.toString()), MessageObject.getTextPaint().getFontMetricsInt(), AndroidUtilities.dp(20), false);
             captionTextView.setTag(str);
             captionTextView.setText(str);
             ViewProxy.setAlpha(captionTextView, bottomLayout.getVisibility() == View.VISIBLE || pickerView.getVisibility() == View.VISIBLE ? 1.0f : 0.0f);
@@ -2973,16 +3001,12 @@ public void run() {
                         }
                     });
                 }
-
-                @Override
-                public void onAnimationCancel(Object animation) {
-                    onAnimationEnd(animation);
-                }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
             AndroidUtilities.runOnUIThread(new Runnable() {
                 @Override
                 public void run() {
+                    NotificationCenter.getInstance().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.mediaCountDidLoaded, NotificationCenter.mediaDidLoaded});
                     NotificationCenter.getInstance().setAnimationInProgress(true);
                     animatorSet.start();
                 }
@@ -3044,6 +3068,9 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         if (parentActivity == null || !isVisible || checkAnimation() || placeProvider == null) {
             return;
         }
+        if (captionEditText.hideActionMode() && !fromEditMode) {
+            return;
+        }
 
         captionEditText.onDestroy();
         parentChatActivity = null;
@@ -3178,11 +3205,6 @@ public void run() {
                         }
                     });
                 }
-
-                @Override
-                public void onAnimationCancel(Object animation) {
-                    onAnimationEnd(animation);
-                }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
             if (Build.VERSION.SDK_INT >= 18) {
@@ -3916,9 +3938,9 @@ private void onActionClick() {
         }
         if (loadFile) {
             if (!FileLoader.getInstance().isLoadingFile(currentFileNames[0])) {
-                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true, false);
+                FileLoader.getInstance().loadFile(currentMessageObject.getDocument(), true, false);
             } else {
-                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
+                FileLoader.getInstance().cancelLoadFile(currentMessageObject.getDocument());
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index e63a43f7e..41e6345d3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -63,6 +63,7 @@
 import org.telegram.ui.Components.PopupAudioView;
 import org.telegram.ui.Components.RecordStatusDrawable;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.TypingDotsDrawable;
 
 import java.io.File;
@@ -160,6 +161,7 @@ protected void onAnimationEnd() {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        Theme.loadRecources(this);
 
         int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
         if (resourceId > 0) {
@@ -347,8 +349,8 @@ public void onStickersTab(boolean opened) {
         actionBar = new ActionBar(this);
         actionBar.setOccupyStatusBar(false);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
-        actionBar.setBackgroundColor(0xff54759e);
-        actionBar.setItemsBackground(R.drawable.bar_selector);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_SELECTOR_COLOR);
         popupContainer.addView(actionBar);
         ViewGroup.LayoutParams layoutParams = actionBar.getLayoutParams();
         layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;
@@ -359,7 +361,6 @@ public void onStickersTab(boolean opened) {
         countText = (TextView) view.findViewById(R.id.count_text);
 
         avatarContainer = new FrameLayoutFixed(this);
-        avatarContainer.setBackgroundResource(R.drawable.bar_selector);
         avatarContainer.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
         actionBar.addView(avatarContainer);
         FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
@@ -398,7 +399,7 @@ public void onStickersTab(boolean opened) {
         nameTextView.setLayoutParams(layoutParams2);
 
         onlineTextView = new TextView(this);
-        onlineTextView.setTextColor(0xffd7e8f7);
+        onlineTextView.setTextColor(Theme.ACTION_BAR_SUBTITLE_COLOR);
         onlineTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
         onlineTextView.setLines(1);
         onlineTextView.setMaxLines(1);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
index 3ff965bbe..2dd66ce53 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacyUsersActivity.java
@@ -285,7 +285,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
             if (type == 0) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 0);
+                    view = new UserCell(mContext, 1, 0, false);
                 }
                 TLRPC.User user = MessagesController.getInstance().getUser(uidArray.get(i));
                 ((UserCell)view).setData(user, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown), 0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 57d5e9e10..4ffd7be05 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -20,14 +20,13 @@
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Outline;
-import android.graphics.drawable.Drawable;
+import android.graphics.Paint;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
@@ -38,7 +37,6 @@
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
-import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
@@ -70,6 +68,7 @@
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.BackDrawable;
 import org.telegram.messenger.AnimationCompat.ViewProxy;
+import org.telegram.ui.ActionBar.SimpleTextView;
 import org.telegram.ui.Cells.AboutLinkCell;
 import org.telegram.ui.Cells.DividerCell;
 import org.telegram.ui.Cells.EmptyCell;
@@ -90,6 +89,7 @@
 import org.telegram.ui.Components.IdenticonDrawable;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -97,20 +97,19 @@
 import java.util.HashMap;
 import java.util.concurrent.Semaphore;
 
-public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
+public class ProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, PhotoViewer.PhotoViewerProvider {
 
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
     private ListAdapter listAdapter;
     private BackupImageView avatarImage;
-    private TextView nameTextView[] = new TextView[2];
-    private TextView onlineTextView[] = new TextView[2];
+    private SimpleTextView nameTextView[] = new SimpleTextView[2];
+    private SimpleTextView onlineTextView[] = new SimpleTextView[2];
     private ImageView writeButton;
     private AnimatorSetProxy writeButtonAnimation;
-    private View extraHeightView;
-    private View shadowView;
     private AvatarDrawable avatarDrawable;
     private ActionBarMenuItem animatingItem;
+    private TopView topView;
     private int user_id;
     private int chat_id;
     private long dialog_id;
@@ -119,8 +118,7 @@
     private long mergeDialogId;
 
     private boolean loadingUsers;
-    private ArrayList<TLRPC.ChannelParticipant> participants = new ArrayList<>();
-    private HashMap<Integer, TLRPC.ChannelParticipant> participantsMap = new HashMap<>();
+    private HashMap<Integer, TLRPC.ChatParticipant> participantsMap = new HashMap<>();
     private boolean usersEndReached;
 
     private boolean openAnimationInProgress;
@@ -153,8 +151,8 @@
     private final static int share = 10;
     private final static int set_admins = 11;
     private final static int edit_channel = 12;
+    private final static int convert_to_supergroup = 13;
 
-    private int overscrollRow;
     private int emptyRow;
     private int emptyRowChat;
     private int emptyRowChat2;
@@ -174,14 +172,46 @@
     private int leaveChannelRow;
     private int startSecretChatRow;
     private int sectionRow;
-    private int botSectionRow;
-    private int botInfoRow;
+    private int userSectionRow;
+    private int userInfoRow;
     private int membersSectionRow;
     private int membersEndRow;
     private int loadMoreMembersRow;
     private int addMemberRow;
     private int rowCount = 0;
 
+    private class TopView extends View {
+
+        private int currentColor;
+        private Paint paint = new Paint();
+
+        public TopView(Context context) {
+            super(context);
+        }
+
+        @Override
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), ActionBar.getCurrentActionBarHeight() + (!AndroidUtilities.isTablet() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.dp(91));
+        }
+
+        @Override
+        public void setBackgroundColor(int color) {
+            if (color != currentColor) {
+                paint.setColor(color);
+                invalidate();
+            }
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            int height = getMeasuredHeight() - AndroidUtilities.dp(91);
+            canvas.drawRect(0, 0, getMeasuredWidth(), height + extraHeight, paint);
+            if (parentLayout != null) {
+                parentLayout.drawHeaderShadow(canvas, height + extraHeight);
+            }
+        }
+    }
+
     public ProfileActivity(Bundle args) {
         super(args);
     }
@@ -205,6 +235,7 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.botInfoDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.userInfoDidLoaded);
             if (currentEncryptedChat != null) {
                 NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
             }
@@ -212,8 +243,7 @@ public boolean onFragmentCreate() {
             if (user.bot) {
                 BotQuery.loadBotInfo(user.id, true, classGuid);
             }
-            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
-            participants = null;
+            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid, true);
             participantsMap = null;
         } else if (chat_id != 0) {
             currentChat = MessagesController.getInstance().getChat(chat_id);
@@ -241,7 +271,6 @@ public void run() {
             if (currentChat.megagroup) {
                 getChannelParticipants(true);
             } else {
-                participants = null;
                 participantsMap = null;
             }
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
@@ -259,6 +288,10 @@ public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.
                 }
             };
             avatarUpdater.parentFragment = this;
+
+            if (ChatObject.isChannel(currentChat)) {
+                MessagesController.getInstance().loadFullChat(chat_id, classGuid, true);
+            }
         } else {
             return false;
         }
@@ -294,6 +327,7 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botInfoDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.userInfoDidLoaded);
             MessagesController.getInstance().cancelLoadFullUser(user_id);
             if (currentEncryptedChat != null) {
                 NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
@@ -305,17 +339,25 @@ public void onFragmentDestroy() {
     }
 
     @Override
-    public View createView(Context context) {
-        actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
-        actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
+    protected ActionBar createActionBar(Context context) {
+        ActionBar actionBar = new ActionBar(context) {
+            @Override
+            public boolean onTouchEvent(MotionEvent event) {
+                return super.onTouchEvent(event); //TODO
+            }
+        };
+        actionBar.setItemsBackgroundColor(AvatarDrawable.getButtonColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
         actionBar.setBackButtonDrawable(new BackDrawable(false));
         actionBar.setCastShadows(false);
         actionBar.setAddToContainer(false);
+        actionBar.setOccupyStatusBar(!AndroidUtilities.isTablet());
+        return actionBar;
+    }
+
+    @Override
+    public View createView(Context context) {
         hasOwnBackground = true;
         extraHeight = 88;
-        if (AndroidUtilities.isTablet()) {
-            actionBar.setOccupyStatusBar(false);
-        }
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(final int id) {
@@ -354,7 +396,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             MessagesController.getInstance().blockUser(user_id);
                         } else {
                             MessagesController.getInstance().unblockUser(user_id);
-                            SendMessagesHelper.getInstance().sendMessage("/start", user_id, null, null, false, false, null, null);
+                            SendMessagesHelper.getInstance().sendMessage("/start", user_id, null, null, false, false, null, null, null);
                             finishFragment();
                         }
                     }
@@ -417,15 +459,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     args.putInt("dialogsType", 2);
                     args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
                     DialogsActivity fragment = new DialogsActivity(args);
-                    fragment.setDelegate(new DialogsActivity.MessagesActivityDelegate() {
+                    fragment.setDelegate(new DialogsActivity.DialogsActivityDelegate() {
                         @Override
                         public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
-                            NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                            MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, null, ProfileActivity.this);
                             Bundle args = new Bundle();
                             args.putBoolean("scrollToTopOnResume", true);
                             args.putInt("chat_id", -(int) did);
+                            if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                                return;
+                            }
+
+                            NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, null, ProfileActivity.this);
                             presentFragment(new ChatActivity(args), true);
                             removeSelfFromStack();
                         }
@@ -439,8 +485,9 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                         }
                         Intent intent = new Intent(Intent.ACTION_SEND);
                         intent.setType("text/plain");
-                        if (botInfo != null && botInfo.share_text != null && botInfo.share_text.length() > 0) {
-                            intent.putExtra(Intent.EXTRA_TEXT, String.format("%s https://telegram.me/%s", botInfo.share_text, user.username));
+                        String about = MessagesController.getInstance().getUserAbout(botInfo.user_id);
+                        if (botInfo != null && about != null) {
+                            intent.putExtra(Intent.EXTRA_TEXT, String.format("%s https://telegram.me/%s", about, user.username));
                         } else {
                             intent.putExtra(Intent.EXTRA_TEXT, String.format("https://telegram.me/%s", user.username));
                         }
@@ -454,6 +501,10 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
                     SetAdminsActivity fragment = new SetAdminsActivity(args);
                     fragment.setChatInfo(info);
                     presentFragment(fragment);
+                } else if (id == convert_to_supergroup) {
+                    Bundle args = new Bundle();
+                    args.putInt("chat_id", chat_id);
+                    presentFragment(new ConvertGroupActivity(args));
                 }
             }
         });
@@ -469,6 +520,12 @@ public void didSelectDialog(DialogsActivity fragment, long did, boolean param) {
             public boolean hasOverlappingRendering() {
                 return false;
             }
+
+            @Override
+            protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+                super.onLayout(changed, left, top, right, bottom);
+                checkListViewScroll();
+            }
         };
         FrameLayout frameLayout = (FrameLayout) fragmentView;
 
@@ -478,10 +535,12 @@ public boolean hasOverlappingRendering() {
                 return false;
             }
         };
+        listView.setPadding(0, AndroidUtilities.dp(88), 0, 0);
         listView.setBackgroundColor(0xffffffff);
         listView.setVerticalScrollBarEnabled(false);
         listView.setItemAnimator(null);
         listView.setLayoutAnimation(null);
+        listView.setClipToPadding(false);
         layoutManager = new LinearLayoutManager(context) {
             @Override
             public boolean supportsPredictiveItemAnimations() {
@@ -537,73 +596,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     });
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
-                } else if (position == usernameRow) {
-                    final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    if (user == null || user.username == null) {
-                        return;
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == 0) {
-                                try {
-                                    if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-                                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                        clipboard.setText("@" + user.username);
-                                    } else {
-                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", "@" + user.username);
-                                        clipboard.setPrimaryClip(clip);
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
-                } else if (position == phoneRow) {
-                    final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-                    if (user == null || user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
-                        return;
-                    }
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setItems(new CharSequence[]{LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            if (i == 0) {
-                                try {
-                                    Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
-                                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                    getParentActivity().startActivityForResult(intent, 500);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            } else if (i == 1) {
-                                try {
-                                    if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-                                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                        clipboard.setText("+" + user.phone);
-                                    } else {
-                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", "+" + user.phone);
-                                        clipboard.setPrimaryClip(clip);
-                                    }
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
                 } else if (position > emptyRowChat2 && position < membersEndRow) {
                     int user_id;
-                    if (participants != null) {
-                        user_id = participants.get(position - emptyRowChat2 - 1).user_id;
-                    } else {
+                    if (!sortedUsers.isEmpty()) {
                         user_id = info.participants.participants.get(sortedUsers.get(position - emptyRowChat2 - 1)).user_id;
+                    } else {
+                        user_id = info.participants.participants.get(position - emptyRowChat2 - 1).user_id;
                     }
                     if (user_id == UserConfig.getClientUserId()) {
                         return;
@@ -639,30 +637,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         args.putInt("type", 2);
                     }
                     presentFragment(new ChannelUsersActivity(args));
-                } else if (position == channelInfoRow) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            try {
-                                if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
-                                    android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                    clipboard.setText(info.about);
-                                } else {
-                                    android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                                    android.content.ClipData clip = android.content.ClipData.newPlainText("label", info.about);
-                                    clipboard.setPrimaryClip(clip);
-                                }
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-                    });
-                    showDialog(builder.create());
                 } else if (position == convertRow) {
                     AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                     builder.setMessage(LocaleController.getString("ConvertGroupAlert", R.string.ConvertGroupAlert));
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setTitle(LocaleController.getString("ConvertGroupAlertWarning", R.string.ConvertGroupAlertWarning));
                     builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
@@ -671,130 +649,125 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     });
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
+                } else {
+                    processOnClickOrPress(position);
                 }
             }
         });
 
-        if (chat_id != 0) {
-            listView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
-                @Override
-                public boolean onItemClick(View view, int position) {
-                    if (position > emptyRowChat2 && position < membersEndRow) {
-                        if (getParentActivity() == null) {
-                            return false;
-                        }
-                        boolean allowKick = false;
-                        boolean allowSetAdmin = false;
-                        TLRPC.ChannelParticipant channelParticipant = null;
-                        if (ChatObject.isChannel(currentChat)) {
-                            channelParticipant = participants.get(position - emptyRowChat2 - 1);
-                            if (channelParticipant.user_id != UserConfig.getClientUserId()) {
-                                if (currentChat.creator) {
+        listView.setOnItemLongClickListener(new RecyclerListView.OnItemLongClickListener() {
+            @Override
+            public boolean onItemClick(View view, int position) {
+                if (position > emptyRowChat2 && position < membersEndRow) {
+                    if (getParentActivity() == null) {
+                        return false;
+                    }
+                    boolean allowKick = false;
+                    boolean allowSetAdmin = false;
+
+                    final TLRPC.ChatParticipant user;
+                    if (!sortedUsers.isEmpty()) {
+                        user = info.participants.participants.get(sortedUsers.get(position - emptyRowChat2 - 1));
+                    } else {
+                        user = info.participants.participants.get(position - emptyRowChat2 - 1);
+                    }
+                    selectedUser = user.user_id;
+
+                    if (ChatObject.isChannel(currentChat)) {
+                        TLRPC.ChannelParticipant channelParticipant = ((TLRPC.TL_chatChannelParticipant) user).channelParticipant;
+                        if (user.user_id != UserConfig.getClientUserId()) {
+                            if (currentChat.creator) {
+                                allowKick = true;
+                            } else if (channelParticipant instanceof TLRPC.TL_channelParticipant) {
+                                if (currentChat.editor || channelParticipant.inviter_id == UserConfig.getClientUserId()) {
                                     allowKick = true;
-                                } else if (channelParticipant instanceof TLRPC.TL_channelParticipant) {
-                                    if (currentChat.editor || channelParticipant.inviter_id == UserConfig.getClientUserId()) {
-                                        allowKick = true;
-                                    }
                                 }
                             }
-                            TLRPC.User u = MessagesController.getInstance().getUser(channelParticipant.user_id);
-                            allowSetAdmin = channelParticipant instanceof TLRPC.TL_channelParticipant && !u.bot;
-                            selectedUser = channelParticipant.user_id;
-                        } else {
-                            TLRPC.ChatParticipant user = info.participants.participants.get(sortedUsers.get(position - emptyRowChat2 - 1));
-                            if (user.user_id != UserConfig.getClientUserId()) {
-                                if (currentChat.creator) {
+                        }
+                        TLRPC.User u = MessagesController.getInstance().getUser(user.user_id);
+                        allowSetAdmin = channelParticipant instanceof TLRPC.TL_channelParticipant && !u.bot;
+                    } else {
+                        if (user.user_id != UserConfig.getClientUserId()) {
+                            if (currentChat.creator) {
+                                allowKick = true;
+                            } else if (user instanceof TLRPC.TL_chatParticipant) {
+                                if (currentChat.admin && currentChat.admins_enabled || user.inviter_id == UserConfig.getClientUserId()) {
                                     allowKick = true;
-                                } else if (user instanceof TLRPC.TL_chatParticipant) {
-                                    if (currentChat.admin && currentChat.admins_enabled || user.inviter_id == UserConfig.getClientUserId()) {
-                                        allowKick = true;
-                                    }
                                 }
                             }
-                            selectedUser = user.user_id;
                         }
-                        if (!allowKick) {
-                            return false;
-                        }
-                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                        if (currentChat.megagroup && currentChat.creator && allowSetAdmin) {
-                            final TLRPC.ChannelParticipant channelParticipantFinal = channelParticipant;
-                            CharSequence[] items = new CharSequence[]{LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin), LocaleController.getString("KickFromGroup", R.string.KickFromGroup)};
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    if (i == 0) {
-                                        int index = participants.indexOf(channelParticipantFinal);
-                                        if (index != -1) {
-                                            TLRPC.TL_channelParticipantEditor editor = new TLRPC.TL_channelParticipantEditor();
-                                            editor.inviter_id = UserConfig.getClientUserId();
-                                            editor.user_id = channelParticipantFinal.user_id;
-                                            editor.date = channelParticipantFinal.date;
-                                            participants.set(index, editor);
-                                        }
-                                        TLRPC.TL_channels_editAdmin req = new TLRPC.TL_channels_editAdmin();
-                                        req.channel = MessagesController.getInputChannel(chat_id);
-                                        req.user_id = MessagesController.getInputUser(selectedUser);
-                                        req.role = new TLRPC.TL_channelRoleEditor();
-                                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                                            @Override
-                                            public void run(TLObject response, final TLRPC.TL_error error) {
-                                                if (error == null) {
-                                                    MessagesController.getInstance().processUpdates((TLRPC.Updates) response, false);
-                                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                                        @Override
-                                                        public void run() {
-                                                            MessagesController.getInstance().loadFullChat(chat_id, 0, true);
-                                                        }
-                                                    }, 1000);
-                                                } else {
-                                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                                        @Override
-                                                        public void run() {
-                                                            AlertsCreator.showAddUserAlert(error.text, ProfileActivity.this, false);
-                                                        }
-                                                    });
-                                                }
+                    }
+                    if (!allowKick) {
+                        return false;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    if (currentChat.megagroup && currentChat.creator && allowSetAdmin) {
+                        CharSequence[] items = new CharSequence[]{LocaleController.getString("SetAsAdmin", R.string.SetAsAdmin), LocaleController.getString("KickFromGroup", R.string.KickFromGroup)};
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    TLRPC.TL_chatChannelParticipant channelParticipant = ((TLRPC.TL_chatChannelParticipant) user);
+
+                                    channelParticipant.channelParticipant = new TLRPC.TL_channelParticipantEditor();
+                                    channelParticipant.channelParticipant.inviter_id = UserConfig.getClientUserId();
+                                    channelParticipant.channelParticipant.user_id = user.user_id;
+                                    channelParticipant.channelParticipant.date = user.date;
+
+                                    TLRPC.TL_channels_editAdmin req = new TLRPC.TL_channels_editAdmin();
+                                    req.channel = MessagesController.getInputChannel(chat_id);
+                                    req.user_id = MessagesController.getInputUser(selectedUser);
+                                    req.role = new TLRPC.TL_channelRoleEditor();
+                                    ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                                        @Override
+                                        public void run(TLObject response, final TLRPC.TL_error error) {
+                                            if (error == null) {
+                                                MessagesController.getInstance().processUpdates((TLRPC.Updates) response, false);
+                                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                                    @Override
+                                                    public void run() {
+                                                        MessagesController.getInstance().loadFullChat(chat_id, 0, true);
+                                                    }
+                                                }, 1000);
+                                            } else {
+                                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                                    @Override
+                                                    public void run() {
+                                                        AlertsCreator.showAddUserAlert(error.text, ProfileActivity.this, false);
+                                                    }
+                                                });
                                             }
-                                        });
-                                    } else if (i == 1) {
-                                        kickUser(selectedUser);
-                                    }
+                                        }
+                                    });
+                                } else if (i == 1) {
+                                    kickUser(selectedUser);
                                 }
-                            });
-                        } else {
-                            CharSequence[] items = new CharSequence[]{chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    if (i == 0) {
-                                        kickUser(selectedUser);
-                                    }
+                            }
+                        });
+                    } else {
+                        CharSequence[] items = new CharSequence[]{chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    kickUser(selectedUser);
                                 }
-                            });
-                        }
-                        showDialog(builder.create());
-                        return true;
+                            }
+                        });
                     }
-                    return false;
+                    showDialog(builder.create());
+                    return true;
+                } else {
+                    return processOnClickOrPress(position);
                 }
-            });
-        }
-
-        frameLayout.addView(actionBar);
+            }
+        });
 
-        extraHeightView = new View(context);
-        ViewProxy.setPivotY(extraHeightView, 0);
-        extraHeightView.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
-        frameLayout.addView(extraHeightView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 88));
+        topView = new TopView(context);
+        topView.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
+        frameLayout.addView(topView);
 
-        shadowView = new View(context);
-        try {
-            shadowView.setBackgroundResource(R.drawable.header_shadow);
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-        }
-        frameLayout.addView(shadowView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 3));
+        frameLayout.addView(actionBar);
 
         avatarImage = new BackupImageView(context);
         avatarImage.setRoundRadius(AndroidUtilities.dp(21));
@@ -824,27 +797,20 @@ public void onClick(View v) {
             if (!playProfileAnimation && a == 0) {
                 continue;
             }
-            nameTextView[a] = new TextView(context);
+            nameTextView[a] = new SimpleTextView(context);
             nameTextView[a].setTextColor(0xffffffff);
-            nameTextView[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
-            nameTextView[a].setLines(1);
-            nameTextView[a].setMaxLines(1);
-            nameTextView[a].setSingleLine(true);
-            nameTextView[a].setEllipsize(TextUtils.TruncateAt.END);
+            nameTextView[a].setTextSize(18);
             nameTextView[a].setGravity(Gravity.LEFT);
             nameTextView[a].setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
-            nameTextView[a].setCompoundDrawablePadding(AndroidUtilities.dp(4));
+            nameTextView[a].setLeftDrawableTopPadding(-AndroidUtilities.dp(1.3f));
+            nameTextView[a].setRightDrawableTopPadding(-AndroidUtilities.dp(1.3f));
             ViewProxy.setPivotX(nameTextView[a], 0);
             ViewProxy.setPivotY(nameTextView[a], 0);
             frameLayout.addView(nameTextView[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118, 0, a == 0 ? 48 : 0, 0));
 
-            onlineTextView[a] = new TextView(context);
+            onlineTextView[a] = new SimpleTextView(context);
             onlineTextView[a].setTextColor(AvatarDrawable.getProfileTextColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id));
-            onlineTextView[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
-            onlineTextView[a].setLines(1);
-            onlineTextView[a].setMaxLines(1);
-            onlineTextView[a].setSingleLine(true);
-            onlineTextView[a].setEllipsize(TextUtils.TruncateAt.END);
+            onlineTextView[a].setTextSize(14);
             onlineTextView[a].setGravity(Gravity.LEFT);
             frameLayout.addView(onlineTextView[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118, 0, a == 0 ? 48 : 8, 0));
         }
@@ -897,10 +863,13 @@ public void onClick(View v) {
                             if (user == null || user instanceof TLRPC.TL_userEmpty) {
                                 return;
                             }
-                            NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                             Bundle args = new Bundle();
                             args.putInt("user_id", user_id);
+                            if (!MessagesController.checkCanOpenChat(args, ProfileActivity.this)) {
+                                return;
+                            }
+                            NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                             presentFragment(new ChatActivity(args), true);
                         }
                     } else if (chat_id != 0) {
@@ -909,10 +878,13 @@ public void onClick(View v) {
                             if (playProfileAnimation && parentLayout.fragmentsStack.get(parentLayout.fragmentsStack.size() - 2) instanceof ChatActivity) {
                                 finishFragment();
                             } else {
-                                NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                                 Bundle args = new Bundle();
                                 args.putInt("chat_id", currentChat.id);
+                                if (!MessagesController.checkCanOpenChat(args, ProfileActivity.this)) {
+                                    return;
+                                }
+                                NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                                 presentFragment(new ChatActivity(args), true);
                             }
                         } else {
@@ -946,15 +918,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
         needLayout();
 
         listView.setOnScrollListener(new RecyclerView.OnScrollListener() {
-            @Override
-            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
-                super.onScrollStateChanged(recyclerView, newState);
-            }
-
             @Override
             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 checkListViewScroll();
-                if (participants != null && loadMoreMembersRow != -1 && layoutManager.findLastVisibleItemPosition() > loadMoreMembersRow - 8) {
+                if (participantsMap != null && loadMoreMembersRow != -1 && layoutManager.findLastVisibleItemPosition() > loadMoreMembersRow - 8) {
                     getChannelParticipants(false);
                 }
             }
@@ -963,6 +930,104 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         return fragmentView;
     }
 
+    private boolean processOnClickOrPress(final int position) {
+        if (position == usernameRow) {
+            final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user == null || user.username == null) {
+                return false;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    if (i == 0) {
+                        try {
+                            if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                clipboard.setText("@" + user.username);
+                            } else {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", "@" + user.username);
+                                clipboard.setPrimaryClip(clip);
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+            });
+            showDialog(builder.create());
+            return true;
+        } else if (position == phoneRow) {
+            final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user == null || user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
+                return false;
+            }
+
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setItems(new CharSequence[]{LocaleController.getString("Call", R.string.Call), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    if (i == 0) {
+                        try {
+                            Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
+                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                            getParentActivity().startActivityForResult(intent, 500);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == 1) {
+                        try {
+                            if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                clipboard.setText("+" + user.phone);
+                            } else {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", "+" + user.phone);
+                                clipboard.setPrimaryClip(clip);
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+            });
+            showDialog(builder.create());
+            return true;
+        } else if (position == channelInfoRow || position == userInfoRow) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    try {
+                        String about;
+                        if (position == channelInfoRow) {
+                            about = info.about;
+                        } else {
+                            about = MessagesController.getInstance().getUserAbout(botInfo.user_id);
+                        }
+                        if (about == null) {
+                            return;
+                        }
+                        if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                            clipboard.setText(about);
+                        } else {
+                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", about);
+                            clipboard.setPrimaryClip(clip);
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+            showDialog(builder.create());
+            return true;
+        }
+        return false;
+    }
+
     private void leaveChatPressed() {
         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
         if (ChatObject.isChannel(chat_id) && !currentChat.megagroup) {
@@ -1008,17 +1073,17 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
     }
 
     private void getChannelParticipants(boolean reload) {
-        if (loadingUsers || participants == null) {
+        if (loadingUsers || participantsMap == null || info == null) {
             return;
         }
         loadingUsers = true;
-        final int delay = Build.VERSION.SDK_INT >= 11 && !participants.isEmpty() && reload ? 300 : 0;
+        final int delay = Build.VERSION.SDK_INT >= 11 && !participantsMap.isEmpty() && reload ? 300 : 0;
 
         final TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
         req.channel = MessagesController.getInputChannel(chat_id);
         req.filter = new TLRPC.TL_channelParticipantsRecent();
-        req.offset = reload ? 0 : participants.size();
-        req.limit = 33;
+        req.offset = reload ? 0 : participantsMap.size();
+        req.limit = 200;
         int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
             @Override
             public void run(final TLObject response, final TLRPC.TL_error error) {
@@ -1028,25 +1093,28 @@ public void run() {
                         if (error == null) {
                             TLRPC.TL_channels_channelParticipants res = (TLRPC.TL_channels_channelParticipants) response;
                             MessagesController.getInstance().putUsers(res.users, false);
-                            if (res.participants.size() == 33) {
-                                res.participants.remove(32);
-                            } else {
+                            if (res.users.size() != 200) {
                                 usersEndReached = true;
                             }
                             if (req.offset == 0) {
-                                participants.clear();
                                 participantsMap.clear();
+                                info.participants = new TLRPC.TL_chatParticipants();
                                 MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
                                 MessagesStorage.getInstance().updateChannelUsers(chat_id, res.participants);
                             }
                             for (int a = 0; a < res.participants.size(); a++) {
-                                TLRPC.ChannelParticipant participant = res.participants.get(a);
+                                TLRPC.TL_chatChannelParticipant participant = new TLRPC.TL_chatChannelParticipant();
+                                participant.channelParticipant = res.participants.get(a);
+                                participant.inviter_id = participant.channelParticipant.inviter_id;
+                                participant.user_id = participant.channelParticipant.user_id;
+                                participant.date = participant.channelParticipant.date;
                                 if (!participantsMap.containsKey(participant.user_id)) {
-                                    participants.add(participant);
+                                    info.participants.participants.add(participant);
                                     participantsMap.put(participant.user_id, participant);
                                 }
                             }
                         }
+                        updateOnlineCount();
                         loadingUsers = false;
                         updateRowsIds();
                         if (listAdapter != null) {
@@ -1079,36 +1147,32 @@ public void didSelectContact(TLRPC.User user, String param) {
                 MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0, null, ProfileActivity.this);
             }
         });
-        if (info instanceof TLRPC.TL_chatFull) {
+        if (info != null && info.participants != null) {
             HashMap<Integer, TLRPC.User> users = new HashMap<>();
             for (int a = 0; a < info.participants.participants.size(); a++) {
                 users.put(info.participants.participants.get(a).user_id, null);
             }
             fragment.setIgnoreUsers(users);
-        } else if (participants != null) {
-            HashMap<Integer, TLRPC.User> users = new HashMap<>();
-            for (int a = 0; a < participants.size(); a++) {
-                users.put(participants.get(a).user_id, null);
-            }
-            fragment.setIgnoreUsers(users);
         }
         presentFragment(fragment);
     }
 
     private void checkListViewScroll() {
-        if (listView.getChildCount() == 0 || openAnimationInProgress) {
+        if (listView.getChildCount() <= 0 || openAnimationInProgress) {
             return;
         }
-        int height = 0;
+
         View child = listView.getChildAt(0);
-        if (child != null) {
-            if (layoutManager.findFirstVisibleItemPosition() == 0) {
-                height = AndroidUtilities.dp(88) + (child.getTop() < 0 ? child.getTop() : 0);
-            }
-            if (extraHeight != height) {
-                extraHeight = height;
-                needLayout();
-            }
+        ListAdapter.Holder holder = (ListAdapter.Holder) listView.findContainingViewHolder(child);
+        int top = child.getTop();
+        int newOffset = 0;
+        if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
+            newOffset = top;
+        }
+        if (extraHeight != newOffset) {
+            extraHeight = newOffset;
+            topView.invalidate();
+            needLayout();
         }
     }
 
@@ -1120,14 +1184,11 @@ private void needLayout() {
             if (layoutParams.topMargin != newTop) {
                 layoutParams.topMargin = newTop;
                 listView.setLayoutParams(layoutParams);
-                ViewProxy.setTranslationY(extraHeightView, newTop);
             }
         }
 
         if (avatarImage != null) {
             float diff = extraHeight / (float) AndroidUtilities.dp(88);
-            ViewProxy.setScaleY(extraHeightView, diff);
-            ViewProxy.setTranslationY(shadowView, newTop + extraHeight);
             listView.setTopGlowOffset(extraHeight);
 
             if (writeButton != null) {
@@ -1209,9 +1270,9 @@ public void onAnimationEnd(Object animation) {
                     continue;
                 }
                 ViewProxy.setTranslationX(nameTextView[a], -21 * AndroidUtilities.density * diff);
-                ViewProxy.setTranslationY(nameTextView[a], (float) Math.floor(avatarY) - (float) Math.ceil(AndroidUtilities.density) + (float) Math.floor(7 * AndroidUtilities.density * diff));
+                ViewProxy.setTranslationY(nameTextView[a], (float) Math.floor(avatarY) + AndroidUtilities.dp(1.3f) + AndroidUtilities.dp(7) * diff);
                 ViewProxy.setTranslationX(onlineTextView[a], -21 * AndroidUtilities.density * diff);
-                ViewProxy.setTranslationY(onlineTextView[a], (float) Math.floor(avatarY) + AndroidUtilities.dp(22) + (float) Math.floor(11 * AndroidUtilities.density) * diff);
+                ViewProxy.setTranslationY(onlineTextView[a], (float) Math.floor(avatarY) + AndroidUtilities.dp(24) + (float) Math.floor(11 * AndroidUtilities.density) * diff);
                 ViewProxy.setScaleX(nameTextView[a], 1.0f + 0.12f * diff);
                 ViewProxy.setScaleY(nameTextView[a], 1.0f + 0.12f * diff);
                 if (a == 1 && !openAnimationInProgress) {
@@ -1222,13 +1283,7 @@ public void onAnimationEnd(Object animation) {
                         width = AndroidUtilities.displaySize.x;
                     }
                     width = (int) (width - AndroidUtilities.dp(118 + 8 + 40 * (1.0f - diff)) - ViewProxy.getTranslationX(nameTextView[a]));
-                    float width2 = nameTextView[a].getPaint().measureText(nameTextView[a].getText().toString()) * ViewProxy.getScaleX(nameTextView[a]);
-                    Drawable[] drawables = nameTextView[a].getCompoundDrawables();
-                    for (int b = 0; b < drawables.length; b++) {
-                        if (drawables[b] != null) {
-                            width2 += drawables[b].getIntrinsicWidth() + AndroidUtilities.dp(4);
-                        }
-                    }
+                    float width2 = nameTextView[a].getPaint().measureText(nameTextView[a].getText().toString()) * ViewProxy.getScaleX(nameTextView[a]) + nameTextView[a].getSideDrawablesSize();
                     layoutParams = (FrameLayout.LayoutParams) nameTextView[a].getLayoutParams();
                     if (width < width2) {
                         layoutParams.width = (int) Math.ceil(width / ViewProxy.getScaleX(nameTextView[a]));
@@ -1388,6 +1443,7 @@ public void run() {
                         chatFull.participants = info.participants;
                     }
                 }
+                boolean loadChannelParticipants = info == null && chatFull instanceof TLRPC.TL_channelFull;
                 info = chatFull;
                 if (mergeDialogId == 0 && info.migrated_from_chat_id != 0) {
                     mergeDialogId = -info.migrated_from_chat_id;
@@ -1405,7 +1461,7 @@ public void run() {
                     currentChat = newChat;
                     createActionBarMenu();
                 }
-                if (currentChat.megagroup && !byChannelUsers) {
+                if (currentChat.megagroup && (loadChannelParticipants || !byChannelUsers)) {
                     getChannelParticipants(true);
                 }
             }
@@ -1421,6 +1477,14 @@ public void run() {
                     checkListViewScroll();
                 }
             }
+        } else if (id == NotificationCenter.userInfoDidLoaded) {
+            int uid = (Integer) args[0];
+            if (uid == user_id) {
+                updateRowsIds();
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+            }
         } else if (id == NotificationCenter.didReceivedNewMessages) {
             long did = (Long) args[0];
             if (did == dialog_id) {
@@ -1461,6 +1525,7 @@ protected void onTransitionAnimationStart(boolean isOpen, boolean backward) {
         if (!backward && playProfileAnimation) {
             openAnimationInProgress = true;
         }
+        NotificationCenter.getInstance().setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.mediaCountDidLoaded});
         NotificationCenter.getInstance().setAnimationInProgress(true);
     }
 
@@ -1479,22 +1544,32 @@ public float getAnimationProgress() {
     public void setAnimationProgress(float progress) {
         animationProgress = progress;
         ViewProxy.setAlpha(listView, progress);
-        ViewProxy.setTranslationX(listView, AndroidUtilities.dp(48) * (1.0f - progress));
+
+        //ViewProxy.setTranslationY(listView, -AndroidUtilities.dp(48) + AndroidUtilities.dp(48) * progress);
         int color = AvatarDrawable.getProfileBackColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id);
-        int rD = (int) ((Color.red(color) - 0x54) * progress);
-        int gD = (int) ((Color.green(color) - 0x75) * progress);
-        int bD = (int) ((Color.blue(color) - 0x9e) * progress);
-        actionBar.setBackgroundColor(Color.rgb(0x54 + rD, 0x75 + gD, 0x9e + bD));
-        extraHeightView.setBackgroundColor(Color.rgb(0x54 + rD, 0x75 + gD, 0x9e + bD));
+
+        int r = Color.red(Theme.ACTION_BAR_COLOR);
+        int g = Color.green(Theme.ACTION_BAR_COLOR);
+        int b = Color.blue(Theme.ACTION_BAR_COLOR);
+
+        int rD = (int) ((Color.red(color) - r) * progress);
+        int gD = (int) ((Color.green(color) - g) * progress);
+        int bD = (int) ((Color.blue(color) - b) * progress);
+        topView.setBackgroundColor(Color.rgb(r + rD, g + gD, b + bD));
         color = AvatarDrawable.getProfileTextColorForId(user_id != 0 || ChatObject.isChannel(chat_id) && !currentChat.megagroup ? 5 : chat_id);
-        rD = (int) ((Color.red(color) - 0xd7) * progress);
-        gD = (int) ((Color.green(color) - 0xe8) * progress);
-        bD = (int) ((Color.blue(color) - 0xf7) * progress);
+
+        r = Color.red(Theme.ACTION_BAR_SUBTITLE_COLOR);
+        g = Color.green(Theme.ACTION_BAR_SUBTITLE_COLOR);
+        b = Color.blue(Theme.ACTION_BAR_SUBTITLE_COLOR);
+
+        rD = (int) ((Color.red(color) - r) * progress);
+        gD = (int) ((Color.green(color) - g) * progress);
+        bD = (int) ((Color.blue(color) - b) * progress);
         for (int a = 0; a < 2; a++) {
             if (onlineTextView[a] == null) {
                 continue;
             }
-            onlineTextView[a].setTextColor(Color.rgb(0xd7 + rD, 0xe8 + gD, 0xf7 + bD));
+            onlineTextView[a].setTextColor(Color.rgb(r + rD, g + gD, b + bD));
         }
         extraHeight = (int) (initialAnimationExtraHeight * progress);
         color = AvatarDrawable.getProfileColorForId(user_id != 0 ? user_id : chat_id);
@@ -1514,7 +1589,7 @@ public void setAnimationProgress(float progress) {
     protected AnimatorSetProxy onCustomTransitionAnimation(final boolean isOpen, final Runnable callback) {
         if (playProfileAnimation) {
             final AnimatorSetProxy animatorSet = new AnimatorSetProxy();
-            animatorSet.setDuration(150);
+            animatorSet.setDuration(180);
             if (Build.VERSION.SDK_INT > 15) {
                 listView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             }
@@ -1530,14 +1605,7 @@ protected AnimatorSetProxy onCustomTransitionAnimation(final boolean isOpen, fin
                 onlineTextView[1].setLayoutParams(layoutParams);
 
                 int width = (int) Math.ceil(AndroidUtilities.displaySize.x - AndroidUtilities.dp(118 + 8) + 21 * AndroidUtilities.density);
-                float width2 = nameTextView[1].getPaint().measureText(nameTextView[1].getText().toString()) * 1.12f;
-                Drawable[] drawables = nameTextView[1].getCompoundDrawables();
-                for (int b = 0; b < drawables.length; b++) {
-                    if (drawables[b] != null) {
-                        width2 += drawables[b].getIntrinsicWidth() + AndroidUtilities.dp(4);
-                    }
-                }
-
+                float width2 = nameTextView[1].getPaint().measureText(nameTextView[1].getText().toString()) * 1.12f + nameTextView[1].getSideDrawablesSize();
                 layoutParams = (FrameLayout.LayoutParams) nameTextView[1].getLayoutParams();
                 if (width < width2) {
                     layoutParams.width = (int) Math.ceil(width / 1.12f);
@@ -1602,13 +1670,6 @@ public void onAnimationEnd(Object animation) {
                     }
                     callback.run();
                 }
-
-                @Override
-                public void onAnimationCancel(Object animation) {
-                    if (Build.VERSION.SDK_INT > 15) {
-                        listView.setLayerType(View.LAYER_TYPE_NONE, null);
-                    }
-                }
             });
             animatorSet.setInterpolator(new DecelerateInterpolator());
 
@@ -1696,71 +1757,69 @@ public void sendButtonPressed(int index) { }
 
     private void updateOnlineCount() {
         onlineCount = 0;
-        if (!(info instanceof TLRPC.TL_chatFull)) {
-            return;
-        }
         int currentTime = ConnectionsManager.getInstance().getCurrentTime();
         sortedUsers.clear();
-        int i = 0;
-        for (TLRPC.ChatParticipant participant : info.participants.participants) {
-            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
-                onlineCount++;
-            }
-            sortedUsers.add(i);
-            i++;
-        }
+        if (info instanceof TLRPC.TL_chatFull || info instanceof TLRPC.TL_channelFull && info.participants_count <= 200 && info.participants != null) {
+            for (int a = 0; a < info.participants.participants.size(); a++) {
+                TLRPC.ChatParticipant participant = info.participants.participants.get(a);
+                TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+                if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                    onlineCount++;
+                }
+                sortedUsers.add(a);
+            }
 
-        try {
-            Collections.sort(sortedUsers, new Comparator<Integer>() {
-                @Override
-                public int compare(Integer lhs, Integer rhs) {
-                    TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.participants.get(rhs).user_id);
-                    TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.participants.get(lhs).user_id);
-                    int status1 = 0;
-                    int status2 = 0;
-                    if (user1 != null && user1.status != null) {
-                        if (user1.id == UserConfig.getClientUserId()) {
-                            status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                        } else {
-                            status1 = user1.status.expires;
+            try {
+                Collections.sort(sortedUsers, new Comparator<Integer>() {
+                    @Override
+                    public int compare(Integer lhs, Integer rhs) {
+                        TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.participants.get(rhs).user_id);
+                        TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.participants.get(lhs).user_id);
+                        int status1 = 0;
+                        int status2 = 0;
+                        if (user1 != null && user1.status != null) {
+                            if (user1.id == UserConfig.getClientUserId()) {
+                                status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                            } else {
+                                status1 = user1.status.expires;
+                            }
                         }
-                    }
-                    if (user2 != null && user2.status != null) {
-                        if (user2.id == UserConfig.getClientUserId()) {
-                            status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
-                        } else {
-                            status2 = user2.status.expires;
+                        if (user2 != null && user2.status != null) {
+                            if (user2.id == UserConfig.getClientUserId()) {
+                                status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                            } else {
+                                status2 = user2.status.expires;
+                            }
                         }
-                    }
-                    if (status1 > 0 && status2 > 0) {
-                        if (status1 > status2) {
-                            return 1;
-                        } else if (status1 < status2) {
+                        if (status1 > 0 && status2 > 0) {
+                            if (status1 > status2) {
+                                return 1;
+                            } else if (status1 < status2) {
+                                return -1;
+                            }
+                            return 0;
+                        } else if (status1 < 0 && status2 < 0) {
+                            if (status1 > status2) {
+                                return 1;
+                            } else if (status1 < status2) {
+                                return -1;
+                            }
+                            return 0;
+                        } else if (status1 < 0 && status2 > 0 || status1 == 0 && status2 != 0) {
                             return -1;
-                        }
-                        return 0;
-                    } else if (status1 < 0 && status2 < 0) {
-                        if (status1 > status2) {
+                        } else if (status2 < 0 && status1 > 0 || status2 == 0 && status1 != 0) {
                             return 1;
-                        } else if (status1 < status2) {
-                            return -1;
                         }
                         return 0;
-                    } else if (status1 < 0 && status2 > 0 || status1 == 0 && status2 != 0) {
-                        return -1;
-                    } else if (status2 < 0 && status1 > 0 || status2 == 0 && status1 != 0) {
-                        return 1;
                     }
-                    return 0;
-                }
-            });
-        } catch (Exception e) {
-            FileLog.e("tmessages", e); //TODO find crash
-        }
+                });
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
 
-        if (listAdapter != null) {
-            listAdapter.notifyItemRangeChanged(emptyRowChat2 + 1, sortedUsers.size());
+            if (listAdapter != null) {
+                listAdapter.notifyItemRangeChanged(emptyRowChat2 + 1, sortedUsers.size());
+            }
         }
     }
 
@@ -1773,14 +1832,10 @@ public void setChatInfo(TLRPC.ChatFull chatInfo) {
     }
 
     private void fetchUsersFromChannelInfo() {
-        if (info != null && info instanceof TLRPC.TL_channelFull && info.participants != null && participants != null && participants.isEmpty()) {
+        if (info instanceof TLRPC.TL_channelFull && info.participants != null) {
             for (int a = 0; a < info.participants.participants.size(); a++) {
                 TLRPC.ChatParticipant chatParticipant = info.participants.participants.get(a);
-                if (chatParticipant instanceof TLRPC.TL_chatChannelParticipant) {
-                    TLRPC.ChannelParticipant channelParticipant = ((TLRPC.TL_chatChannelParticipant) chatParticipant).channelParticipant;
-                    participants.add(channelParticipant);
-                    participantsMap.put(channelParticipant.user_id, channelParticipant);
-                }
+                participantsMap.put(chatParticipant.user_id, chatParticipant);
             }
         }
     }
@@ -1788,15 +1843,15 @@ private void fetchUsersFromChannelInfo() {
     private void kickUser(int uid) {
         if (uid != 0) {
             MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(uid), info);
-            if (currentChat.megagroup && participants != null) {
+            if (currentChat.megagroup && info != null && info.participants != null) {
                 boolean changed = false;
-                for (int a = 0; a < participants.size(); a++) {
-                    TLRPC.ChannelParticipant p = participants.get(a);
+                for (int a = 0; a < info.participants.participants.size(); a++) {
+                    TLRPC.ChannelParticipant p = ((TLRPC.TL_chatChannelParticipant) info.participants.participants.get(a)).channelParticipant;
                     if (p.user_id == uid) {
                         if (info != null) {
                             info.participants_count--;
                         }
-                        participants.remove(a);
+                        info.participants.participants.remove(a);
                         changed = true;
                         break;
                     }
@@ -1812,6 +1867,7 @@ private void kickUser(int uid) {
                     }
                 }
                 if (changed) {
+                    updateOnlineCount();
                     updateRowsIds();
                     listAdapter.notifyDataSetChanged();
                 }
@@ -1834,16 +1890,34 @@ public boolean isChat() {
     }
 
     private void updateRowsIds() {
+        emptyRow = -1;
+        phoneRow = -1;
+        userInfoRow = -1;
+        userSectionRow = -1;
+        sectionRow = -1;
+        sharedMediaRow = -1;
+        settingsNotificationsRow = -1;
+        usernameRow = -1;
+        settingsTimerRow = -1;
+        settingsKeyRow = -1;
+        startSecretChatRow = -1;
+        membersEndRow = -1;
+        emptyRowChat2 = -1;
+        addMemberRow = -1;
+        channelInfoRow = -1;
+        channelNameRow = -1;
+        convertRow = -1;
+        convertHelpRow = -1;
+        emptyRowChat = -1;
+        membersSectionRow = -1;
+        membersRow = -1;
+        managementRow = -1;
+        leaveChannelRow = -1;
+        loadMoreMembersRow = -1;
+        blockedUsersRow = -1;
+
         rowCount = 0;
-        overscrollRow = rowCount++;
         if (user_id != 0) {
-            phoneRow = -1;
-            usernameRow = -1;
-            settingsTimerRow = -1;
-            settingsKeyRow = -1;
-            startSecretChatRow = -1;
-            blockedUsersRow = -1;
-
             TLRPC.User user = MessagesController.getInstance().getUser(user_id);
             emptyRow = rowCount++;
             if (user == null || !user.bot) {
@@ -1852,9 +1926,13 @@ private void updateRowsIds() {
             if (user != null && user.username != null && user.username.length() > 0) {
                 usernameRow = rowCount++;
             }
-            if (botInfo != null && botInfo.share_text != null && botInfo.share_text.length() > 0) {
-                botSectionRow = rowCount++;
-                botInfoRow = rowCount++;
+            String about = MessagesController.getInstance().getUserAbout(user.id);
+            if (about != null) {
+                userSectionRow = rowCount++;
+                userInfoRow = rowCount++;
+            } else {
+                userSectionRow = -1;
+                userInfoRow = -1;
             }
             sectionRow = rowCount++;
             settingsNotificationsRow = rowCount++;
@@ -1863,26 +1941,10 @@ private void updateRowsIds() {
                 settingsTimerRow = rowCount++;
                 settingsKeyRow = rowCount++;
             }
-            if (user != null && !user.bot && currentEncryptedChat == null) {
+            if (user != null && !user.bot && currentEncryptedChat == null && user.id != UserConfig.getClientUserId()) {
                 startSecretChatRow = rowCount++;
             }
         } else if (chat_id != 0) {
-            membersEndRow = -1;
-            membersSectionRow = -1;
-            emptyRowChat2 = -1;
-            addMemberRow = -1;
-            channelInfoRow = -1;
-            channelNameRow = -1;
-            convertRow = -1;
-            convertHelpRow = -1;
-            emptyRowChat = -1;
-            membersSectionRow = -1;
-            membersRow = -1;
-            managementRow = -1;
-            leaveChannelRow = -1;
-            loadMoreMembersRow = -1;
-            blockedUsersRow = -1;
-
             if (chat_id > 0) {
                 emptyRow = rowCount++;
                 if (ChatObject.isChannel(currentChat) && (info != null && info.about != null && info.about.length() > 0 || currentChat.username != null && currentChat.username.length() > 0)) {
@@ -1900,7 +1962,7 @@ private void updateRowsIds() {
                     if (!currentChat.megagroup && info != null && (currentChat.creator || info.can_view_participants)) {
                         membersRow = rowCount++;
                     }
-                    if (!ChatObject.isNotInChat(currentChat) && (currentChat.creator || currentChat.editor || currentChat.moderator)) {
+                    if (!ChatObject.isNotInChat(currentChat) && !currentChat.megagroup && (currentChat.creator || currentChat.editor || currentChat.moderator)) {
                         managementRow = rowCount++;
                     }
                     if (!ChatObject.isNotInChat(currentChat) && currentChat.megagroup && (currentChat.editor || currentChat.creator)) {
@@ -1914,11 +1976,11 @@ private void updateRowsIds() {
                             addMemberRow = rowCount++;
                         }
                     }
-                    if (participants != null && !participants.isEmpty()) {
+                    if (info != null && info.participants != null && !info.participants.participants.isEmpty()) {
                         emptyRowChat = rowCount++;
                         membersSectionRow = rowCount++;
                         emptyRowChat2 = rowCount++;
-                        rowCount += participants.size();
+                        rowCount += info.participants.participants.size();
                         membersEndRow = rowCount;
                         if (!usersEndReached) {
                             loadMoreMembersRow = rowCount++;
@@ -1987,15 +2049,11 @@ private void updateProfileData() {
                 if (nameTextView[a] == null) {
                     continue;
                 }
-                if (a == 0) {
-                    if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
-                        if (user.phone != null && user.phone.length() != 0) {
-                            nameTextView[a].setText(PhoneFormat.getInstance().format("+" + user.phone));
-                        } else {
-                            nameTextView[a].setText(UserObject.getUserName(user));
-                        }
-                    } else {
-                        nameTextView[a].setText(UserObject.getUserName(user));
+                if (a == 0 && user.phone != null && user.phone.length() != 0 && user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null &&
+                        (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+                    String phoneString = PhoneFormat.getInstance().format("+" + user.phone);
+                    if (!nameTextView[a].getText().equals(phoneString)) {
+                        nameTextView[a].setText(phoneString);
                     }
                 } else {
                     if (!nameTextView[a].getText().equals(newString)) {
@@ -2006,19 +2064,14 @@ private void updateProfileData() {
                     onlineTextView[a].setText(newString2);
                 }
                 int leftIcon = currentEncryptedChat != null ? R.drawable.ic_lock_header : 0;
-                if (a != 0) {
-                    if (user.verified) {
-                        if (nameTextView[a].getCompoundDrawables()[2] == null || nameTextView[a].getCompoundDrawables()[0] == null && leftIcon != 0) {
-                            nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(leftIcon, 0, R.drawable.check_profile_fixed, 0);
-                        }
-                    } else {
-                        if (nameTextView[a].getCompoundDrawables()[2] != null || nameTextView[a].getCompoundDrawables()[0] == null && leftIcon != 0) {
-                            nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(leftIcon, 0, 0, 0);
-                        }
-                    }
-                } else {
-                    nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(leftIcon, 0, MessagesController.getInstance().isDialogMuted(dialog_id != 0 ? dialog_id : (long) user_id) ? R.drawable.mute_fixed : 0, 0);
+                int rightIcon = 0;
+                if (a == 0) {
+                    rightIcon = MessagesController.getInstance().isDialogMuted(dialog_id != 0 ? dialog_id : (long) user_id) ? R.drawable.mute_fixed : 0;
+                } else if (user.verified) {
+                    rightIcon = R.drawable.check_profile_fixed;
                 }
+                nameTextView[a].setLeftDrawable(leftIcon);
+                nameTextView[a].setRightDrawable(rightIcon);
             }
 
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
@@ -2033,15 +2086,27 @@ private void updateProfileData() {
             String newString;
             if (ChatObject.isChannel(chat)) {
                 if (info == null || !currentChat.megagroup && (info.participants_count == 0 || (currentChat.admin || info.can_view_participants))) {
-                    if ((chat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0) {
-                        newString = LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase();
+                    if (currentChat.megagroup) {
+                        newString = LocaleController.getString("Loading", R.string.Loading).toLowerCase();
                     } else {
-                        newString = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase();
+                        if ((chat.flags & TLRPC.CHAT_FLAG_IS_PUBLIC) != 0) {
+                            newString = LocaleController.getString("ChannelPublic", R.string.ChannelPublic).toLowerCase();
+                        } else {
+                            newString = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate).toLowerCase();
+                        }
                     }
                 } else {
-                    int result[] = new int[1];
-                    String shortNumber = LocaleController.formatShortNumber(info.participants_count, result);
-                    newString = LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber);
+                    if (currentChat.megagroup && info.participants_count <= 200) {
+                        if (onlineCount > 1 && info.participants_count != 0) {
+                            newString = String.format("%s, %s", LocaleController.formatPluralString("Members", info.participants_count), LocaleController.formatPluralString("Online", onlineCount));
+                        } else {
+                            newString = LocaleController.formatPluralString("Members", info.participants_count);
+                        }
+                    } else {
+                        int result[] = new int[1];
+                        String shortNumber = LocaleController.formatShortNumber(info.participants_count, result);
+                        newString = LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber);
+                    }
                 }
             } else {
                 int count = chat.participants_count;
@@ -2062,24 +2127,24 @@ private void updateProfileData() {
                 if (chat.title != null && !nameTextView[a].getText().equals(chat.title)) {
                     nameTextView[a].setText(chat.title);
                 }
+                nameTextView[a].setLeftDrawable(null);
                 if (a != 0) {
                     if (chat.verified) {
-                        if (nameTextView[a].getCompoundDrawables()[2] == null) {
-                            nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.check_profile_fixed, 0);
-                        }
+                        nameTextView[a].setRightDrawable(R.drawable.check_profile_fixed);
                     } else {
-                        if (nameTextView[a].getCompoundDrawables()[2] != null) {
-                            nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
-                        }
+                        nameTextView[a].setRightDrawable(null);
                     }
                 } else {
-                    nameTextView[a].setCompoundDrawablesWithIntrinsicBounds(0, 0, MessagesController.getInstance().isDialogMuted((long) -chat_id) ? R.drawable.mute_fixed : 0, 0);
+                    nameTextView[a].setRightDrawable(MessagesController.getInstance().isDialogMuted((long) -chat_id) ? R.drawable.mute_fixed : 0);
                 }
-                if (a == 0 && ChatObject.isChannel(currentChat) && info != null && info.participants_count != 0 && (currentChat.megagroup || currentChat.broadcast)) {
+                if (currentChat.megagroup && info != null && info.participants_count <= 200 && onlineCount > 0) {
+                    if (!onlineTextView[a].getText().equals(newString)) {
+                        onlineTextView[a].setText(newString);
+                    }
+                } else if (a == 0 && ChatObject.isChannel(currentChat) && info != null && info.participants_count != 0 && (currentChat.megagroup || currentChat.broadcast)) {
                     int result[] = new int[1];
                     String shortNumber = LocaleController.formatShortNumber(info.participants_count, result);
-                    String text = LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber);
-                    onlineTextView[a].setText(text);
+                    onlineTextView[a].setText(LocaleController.formatPluralString("Members", result[0]).replace(String.format("%d", result[0]), shortNumber));
                 } else {
                     if (!onlineTextView[a].getText().equals(newString)) {
                         onlineTextView[a].setText(newString);
@@ -2168,6 +2233,9 @@ private void createActionBarMenu() {
                     if (!chat.admins_enabled || chat.creator || chat.admin) {
                         item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
                     }
+                    if (chat.creator && (info == null || info.participants.participants.size() > 1)) {
+                        item.addSubItem(convert_to_supergroup, LocaleController.getString("ConvertGroupMenu", R.string.ConvertGroupMenu), 0);
+                    }
                     item.addSubItem(leave_group, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit), 0);
                 }
             } else {
@@ -2185,12 +2253,10 @@ protected void onDialogDismiss(Dialog dialog) {
     }
 
     @Override
-    public void didSelectDialog(DialogsActivity messageFragment, long dialog_id, boolean param) {
+    public void didSelectDialog(DialogsActivity fragment, long dialog_id, boolean param) {
         if (dialog_id != 0) {
             Bundle args = new Bundle();
             args.putBoolean("scrollToTopOnResume", true);
-            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
             int lower_part = (int) dialog_id;
             if (lower_part != 0) {
                 if (lower_part > 0) {
@@ -2201,10 +2267,16 @@ public void didSelectDialog(DialogsActivity messageFragment, long dialog_id, boo
             } else {
                 args.putInt("enc_id", (int) (dialog_id >> 32));
             }
+            if (!MessagesController.checkCanOpenChat(args, fragment)) {
+                return;
+            }
+
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
             presentFragment(new ChatActivity(args), true);
             removeSelfFromStack();
             TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null, true);
+            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null, true, null, null);
         }
     }
 
@@ -2260,7 +2332,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     };
                     break;
                 case 4:
-                    view = new UserCell(mContext, 61, 0) {
+                    view = new UserCell(mContext, 61, 0, true) {
                         @Override
                         public boolean onTouchEvent(MotionEvent event) {
                             if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
@@ -2308,6 +2380,7 @@ public void didPressUrl(String url) {
                     });
                     break;
             }
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
             return new Holder(view);
         }
 
@@ -2316,9 +2389,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
             boolean checkBackground = true;
             switch (holder.getItemViewType()) {
                 case 0:
-                    if (i == overscrollRow) {
-                        ((EmptyCell) holder.itemView).setHeight(AndroidUtilities.dp(88));
-                    } else if (i == emptyRowChat || i == emptyRowChat2) {
+                    if (i == emptyRowChat || i == emptyRowChat2) {
                         ((EmptyCell) holder.itemView).setHeight(AndroidUtilities.dp(8));
                     } else {
                         ((EmptyCell) holder.itemView).setHeight(AndroidUtilities.dp(36));
@@ -2389,7 +2460,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                         textCell.setTextColor(0xffed3d39);
                         textCell.setText(LocaleController.getString("LeaveChannel", R.string.LeaveChannel));
                     } else if (i == convertRow) {
-                        textCell.setText(LocaleController.getString("ConvertGroup", R.string.ConvertGroup));
+                        textCell.setText(LocaleController.getString("UpgradeGroup", R.string.UpgradeGroup));
                         textCell.setTextColor(0xff37a919);
                     } else if (i == membersRow) {
                         if (info != null) {
@@ -2418,18 +2489,40 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
                     }
                     break;
                 case 4:
-                    if (participants != null) {
-                        TLRPC.ChannelParticipant part = participants.get(i - emptyRowChat2 - 1);
-                        ((UserCell) holder.itemView).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
+                    UserCell userCell = ((UserCell) holder.itemView);
+                    TLRPC.ChatParticipant part;
+                    if (!sortedUsers.isEmpty()) {
+                        part = info.participants.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
                     } else {
-                        TLRPC.ChatParticipant part = info.participants.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
-                        ((UserCell) holder.itemView).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
+                        part = info.participants.participants.get(i - emptyRowChat2 - 1);
+                    }
+                    if (part != null) {
+                        if (part instanceof TLRPC.TL_chatChannelParticipant) {
+                            TLRPC.ChannelParticipant channelParticipant = ((TLRPC.TL_chatChannelParticipant) part).channelParticipant;
+                            if (channelParticipant instanceof TLRPC.TL_channelParticipantCreator) {
+                                userCell.setIsAdmin(1);
+                            } else if (channelParticipant instanceof TLRPC.TL_channelParticipantEditor || channelParticipant instanceof TLRPC.TL_channelParticipantModerator) {
+                                userCell.setIsAdmin(2);
+                            } else {
+                                userCell.setIsAdmin(0);
+                            }
+                        } else {
+                            if (part instanceof TLRPC.TL_chatParticipantCreator) {
+                                userCell.setIsAdmin(1);
+                            } else if (currentChat.admins_enabled && part instanceof TLRPC.TL_chatParticipantAdmin) {
+                                userCell.setIsAdmin(2);
+                            } else {
+                                userCell.setIsAdmin(0);
+                            }
+                        }
+                        userCell.setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
                     }
                     break;
                 case 8:
                     AboutLinkCell aboutLinkCell = (AboutLinkCell) holder.itemView;
-                    if (i == botInfoRow) {
-                        aboutLinkCell.setTextAndIcon(botInfo.share_text, R.drawable.bot_info);
+                    if (i == userInfoRow) {
+                        String about = MessagesController.getInstance().getUserAbout(user_id);
+                        aboutLinkCell.setTextAndIcon(about, R.drawable.bot_info);
                     } else if (i == channelInfoRow) {
                         String text = info.about;
                         while (text.contains("\n\n\n")) {
@@ -2444,9 +2537,12 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
             if (checkBackground) {
                 boolean enabled = false;
                 if (user_id != 0) {
-                    enabled = i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow || i == startSecretChatRow || i == usernameRow;
+                    enabled = i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow ||
+                            i == sharedMediaRow || i == startSecretChatRow || i == usernameRow || i == userInfoRow;
                 } else if (chat_id != 0) {
-                    enabled = i == convertRow || i == settingsNotificationsRow || i == sharedMediaRow || i > emptyRowChat2 && i < membersEndRow || i == addMemberRow || i == channelNameRow || i == leaveChannelRow || i == membersRow || i == managementRow || i == blockedUsersRow || i == channelInfoRow;
+                    enabled = i == convertRow || i == settingsNotificationsRow || i == sharedMediaRow || i > emptyRowChat2 && i < membersEndRow ||
+                            i == addMemberRow || i == channelNameRow || i == leaveChannelRow || i == membersRow || i == managementRow ||
+                            i == blockedUsersRow || i == channelInfoRow;
                 }
                 if (enabled) {
                     if (holder.itemView.getBackground() == null) {
@@ -2467,9 +2563,9 @@ public int getItemCount() {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == emptyRow || i == overscrollRow || i == emptyRowChat || i == emptyRowChat2) {
+            if (i == emptyRow || i == emptyRowChat || i == emptyRowChat2) {
                 return 0;
-            } else if (i == sectionRow || i == botSectionRow) {
+            } else if (i == sectionRow || i == userSectionRow) {
                 return 1;
             } else if (i == phoneRow || i == usernameRow || i == channelNameRow) {
                 return 2;
@@ -2483,7 +2579,7 @@ public int getItemViewType(int i) {
                 return 6;
             } else if (i == loadMoreMembersRow) {
                 return 7;
-            } else if (i == botInfoRow || i == channelInfoRow) {
+            } else if (i == userInfoRow || i == channelInfoRow) {
                 return 8;
             }
             return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java
new file mode 100644
index 000000000..e16918642
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ReportOtherActivity.java
@@ -0,0 +1,151 @@
+/*
+ * This is the source code of Telegram for Android v. 3.x.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2016.
+ */
+
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.InputType;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.tgnet.ConnectionsManager;
+import org.telegram.tgnet.RequestDelegate;
+import org.telegram.tgnet.TLObject;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.LayoutHelper;
+
+public class ReportOtherActivity extends BaseFragment {
+
+    private EditText firstNameField;
+    private View headerLabelView;
+    private long dialog_id;
+    private View doneButton;
+
+    private final static int done_button = 1;
+
+    public ReportOtherActivity(Bundle args) {
+        super(args);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ReportChat", R.string.ReportChat));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                } else if (id == done_button) {
+                    if (firstNameField.getText().length() != 0) {
+                        TLRPC.TL_account_reportPeer req = new TLRPC.TL_account_reportPeer();
+                        req.peer = MessagesController.getInputPeer((int) dialog_id);
+                        req.reason = new TLRPC.TL_inputReportReasonOther();
+                        req.reason.text = firstNameField.getText().toString();
+                        ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+
+                            }
+                        });
+                        finishFragment();
+                    }
+                }
+            }
+        });
+
+        ActionBarMenu menu = actionBar.createMenu();
+        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        LinearLayout linearLayout = new LinearLayout(context);
+        fragmentView = linearLayout;
+        fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+        fragmentView.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+
+        firstNameField = new EditText(context);
+        firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        firstNameField.setHintTextColor(0xff979797);
+        firstNameField.setTextColor(0xff212121);
+        firstNameField.setMaxLines(3);
+        firstNameField.setPadding(0, 0, 0, 0);
+        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+        firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+        firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+        AndroidUtilities.clearCursorDrawable(firstNameField);
+        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                    doneButton.performClick();
+                    return true;
+                }
+                return false;
+            }
+        });
+
+        linearLayout.addView(firstNameField, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 36, 24, 24, 24, 0));
+        firstNameField.setHint(LocaleController.getString("ReportChatDescription", R.string.ReportChatDescription));
+        firstNameField.setSelection(firstNameField.length());
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    @Override
+    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
+        if (isOpen) {
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (firstNameField != null) {
+                        firstNameField.requestFocus();
+                        AndroidUtilities.showKeyboard(firstNameField);
+                    }
+                }
+            }, 100);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
index edcc97be7..b7dbcd7cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
@@ -202,6 +202,9 @@ public void setParentActivity(Activity activity) {
         windowView.setBackgroundColor(0xff000000);
         windowView.setFocusable(true);
         windowView.setFocusableInTouchMode(true);
+        if (Build.VERSION.SDK_INT >= 23) {
+            windowView.setFitsSystemWindows(true); //TODO ?
+        }
 
         containerView = new FrameLayoutDrawer(activity);
         containerView.setFocusable(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
index 8c9e4d7cf..c5cdcaf67 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SetAdminsActivity.java
@@ -379,10 +379,6 @@ public boolean isEnabled(int i) {
                 return true;
             } else if (i >= usersStartRow && i < usersEndRow) {
                 TLRPC.ChatParticipant participant = participants.get(i - usersStartRow);
-                TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-                if (user != null && user.bot) {
-                    return false;
-                }
                 if (!(participant instanceof TLRPC.TL_chatParticipantCreator)) {
                     return true;
                 }
@@ -442,7 +438,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
             } else if (type == 2) {
                 if (view == null) {
-                    view = new UserCell(mContext, 1, 2);
+                    view = new UserCell(mContext, 1, 2, false);
                     view.setBackgroundColor(0xffffffff);
                 }
                 UserCell userCell = (UserCell) view;
@@ -451,7 +447,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 userCell.setData(user, null, null, 0);
                 chat = MessagesController.getInstance().getChat(chat_id);
                 userCell.setChecked(!(part instanceof TLRPC.TL_chatParticipant) || chat != null && !chat.admins_enabled, false);
-                userCell.setCheckDisabled(chat == null || !chat.admins_enabled || part.user_id == UserConfig.getClientUserId() || user != null && user.bot);
+                userCell.setCheckDisabled(chat == null || !chat.admins_enabled || part.user_id == UserConfig.getClientUserId());
             }
             return view;
         }
@@ -548,7 +544,7 @@ public void run() {
                             for (int a = 0; a < contactsCopy.size(); a++) {
                                 TLRPC.ChatParticipant participant = contactsCopy.get(a);
                                 TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-                                if (user.id == UserConfig.getClientUserId() || user.bot) {
+                                if (user.id == UserConfig.getClientUserId()) {
                                     continue;
                                 }
 
@@ -629,7 +625,7 @@ public boolean hasStableIds() {
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
             if (view == null) {
-                view = new UserCell(mContext, 1, 2);
+                view = new UserCell(mContext, 1, 2, false);
             }
 
             TLRPC.ChatParticipant participant = getItem(i);
@@ -651,7 +647,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             userCell.setData(user, name, username, 0);
             chat = MessagesController.getInstance().getChat(chat_id);
             userCell.setChecked(!(participant instanceof TLRPC.TL_chatParticipant) || chat != null && !chat.admins_enabled, false);
-            userCell.setCheckDisabled(chat == null || !chat.admins_enabled || participant.user_id == UserConfig.getClientUserId() || user != null && user.bot);
+            userCell.setCheckDisabled(chat == null || !chat.admins_enabled || participant.user_id == UserConfig.getClientUserId());
             return view;
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 5f389d771..af47b4f04 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -61,6 +61,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.browser.Browser;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.SerializedData;
@@ -93,6 +94,7 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.NumberPicker;
+import org.telegram.ui.ActionBar.Theme;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -133,6 +135,8 @@
     private int saveToGalleryRow;
     private int messagesSectionRow;
     private int messagesSectionRow2;
+    private int customTabsRow;
+    private int directShareRow;
     private int textSizeRow;
     private int stickersRow;
     private int cacheRow;
@@ -142,6 +146,7 @@
     private int supportSectionRow2;
     private int askQuestionRow;
     private int telegramFaqRow;
+    private int privacyPolicyRow;
     private int sendLogsRow;
     private int clearLogsRow;
     private int switchBackendButtonRow;
@@ -250,6 +255,10 @@ public void run() {
         saveToGalleryRow = rowCount++;
         messagesSectionRow = rowCount++;
         messagesSectionRow2 = rowCount++;
+        customTabsRow = rowCount++;
+        if (Build.VERSION.SDK_INT >= 23) {
+            directShareRow = rowCount++;
+        }
         textSizeRow = rowCount++;
         stickersRow = rowCount++;
         cacheRow = rowCount++;
@@ -259,6 +268,7 @@ public void run() {
         supportSectionRow2 = rowCount++;
         askQuestionRow = rowCount++;
         telegramFaqRow = rowCount++;
+        privacyPolicyRow = rowCount++;
         if (BuildVars.DEBUG_VERSION) {
             sendLogsRow = rowCount++;
             clearLogsRow = rowCount++;
@@ -269,7 +279,7 @@ public void run() {
         //contactsReimportRow = rowCount++;
         //contactsSortRow = rowCount++;
 
-        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid);
+        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid, true);
 
         return true;
     }
@@ -288,7 +298,7 @@ public void onFragmentDestroy() {
     @Override
     public View createView(Context context) {
         actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
-        actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
+        actionBar.setItemsBackgroundColor(AvatarDrawable.getButtonColorForId(5));
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setAddToContainer(false);
         extraHeight = 88;
@@ -412,7 +422,7 @@ public void onClick(DialogInterface dialog, int which) {
                     final TextView message = new TextView(getParentActivity());
                     message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
                     message.setTextSize(18);
-                    message.setLinkTextColor(0xff316f9f);
+                    message.setLinkTextColor(Theme.MSG_LINK_TEXT_COLOR);
                     message.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(5), AndroidUtilities.dp(8), AndroidUtilities.dp(6));
                     message.setMovementMethod(new LinkMovementMethodMy());
 
@@ -454,6 +464,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     if (view instanceof TextCheckCell) {
                         ((TextCheckCell) view).setChecked(MediaController.getInstance().canSaveToGallery());
                     }
+                } else if (i == customTabsRow) {
+                    MediaController.getInstance().toggleCustomTabs();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(MediaController.getInstance().canCustomTabs());
+                    }
+                } else if(i == directShareRow) {
+                    MediaController.getInstance().toggleDirectShare();
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(MediaController.getInstance().canDirectShare());
+                    }
                 } else if (i == privacyRow) {
                     presentFragment(new PrivacySettingsActivity());
                 } else if (i == languageRow) {
@@ -474,7 +494,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     showDialog(builder.create());
                 } else if (i == telegramFaqRow) {
-                    AndroidUtilities.openUrl(getParentActivity(), LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
+                    Browser.openUrl(getParentActivity(), LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl));
+                } else if (i == privacyPolicyRow) {
+                    Browser.openUrl(getParentActivity(), LocaleController.getString("PrivacyPolicyUrl", R.string.PrivacyPolicyUrl));
                 } else if (i == contactsReimportRow) {
                     //not implemented
                 } else if (i == contactsSortRow) {
@@ -517,7 +539,8 @@ public void onClick(DialogInterface dialog, int which) {
                         mask = MediaController.getInstance().roamingDownloadMask;
                     }
 
-                    builder.setApplyTopPaddings(false);
+                    builder.setApplyTopPadding(false);
+                    builder.setApplyBottomPadding(false);
                     LinearLayout linearLayout = new LinearLayout(getParentActivity());
                     linearLayout.setOrientation(LinearLayout.VERTICAL);
                     for (int a = 0; a < 6; a++) {
@@ -563,7 +586,7 @@ public void onClick(View v) {
                     BottomSheet.BottomSheetCell cell = new BottomSheet.BottomSheetCell(getParentActivity(), 2);
                     cell.setBackgroundResource(R.drawable.list_selector);
                     cell.setTextAndIcon(LocaleController.getString("Save", R.string.Save).toUpperCase(), 0);
-                    cell.setTextColor(0xff517fad);
+                    cell.setTextColor(Theme.AUTODOWNLOAD_SHEET_SAVE_TEXT_COLOR);
                     cell.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View v) {
@@ -644,7 +667,7 @@ public void onClick(View v) {
             @Override
             public void onClick(View v) {
                 TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
-                if (user.photo != null && user.photo.photo_big != null) {
+                if (user != null && user.photo != null && user.photo.photo_big != null) {
                     PhotoViewer.getInstance().setParentActivity(getParentActivity());
                     PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
                 }
@@ -1076,7 +1099,8 @@ private void updateUserData() {
             photoBig = user.photo.photo_big;
         }
         AvatarDrawable avatarDrawable = new AvatarDrawable(user, true);
-        avatarDrawable.setColor(0xff5c98cd);
+
+        avatarDrawable.setColor(Theme.ACTION_BAR_MAIN_AVATAR_COLOR);
         if (avatarImage != null) {
             avatarImage.setImage(photo, "50_50", avatarDrawable);
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
@@ -1130,7 +1154,7 @@ public boolean isEnabled(int i) {
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == autoplayGifsRow || i == privacyRow || i == wifiDownloadRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow ||
-                    i == stickersRow || i == cacheRow || i == raiseToSpeakRow;
+                    i == stickersRow || i == cacheRow || i == raiseToSpeakRow || i == privacyPolicyRow || i == customTabsRow || i == directShareRow;
         }
 
         @Override
@@ -1214,6 +1238,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setText(LocaleController.getString("Stickers", R.string.Stickers), true);
                 } else if (i == cacheRow) {
                     textCell.setText(LocaleController.getString("CacheSettings", R.string.CacheSettings), true);
+                } else if (i == privacyPolicyRow) {
+                    textCell.setText(LocaleController.getString("PrivacyPolicy", R.string.PrivacyPolicy), true);
                 }
             } else if (type == 3) {
                 if (view == null) {
@@ -1232,6 +1258,10 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textCell.setTextAndCheck(LocaleController.getString("AutoplayGifs", R.string.AutoplayGifs), MediaController.getInstance().canAutoplayGifs(), true);
                 } else if (i == raiseToSpeakRow) {
                     textCell.setTextAndCheck(LocaleController.getString("RaiseToSpeak", R.string.RaiseToSpeak), MediaController.getInstance().canRaiseToSpeak(), true);
+                } else if (i == customTabsRow) {
+                    textCell.setTextAndValueAndCheck(LocaleController.getString("ChromeCustomTabs", R.string.ChromeCustomTabs), LocaleController.getString("ChromeCustomTabsInfo", R.string.ChromeCustomTabsInfo), MediaController.getInstance().canCustomTabs(), false, true);
+                } else if (i == directShareRow) {
+                    textCell.setTextAndValueAndCheck(LocaleController.getString("DirectShare", R.string.DirectShare), LocaleController.getString("DirectShareInfo", R.string.DirectShareInfo), MediaController.getInstance().canDirectShare(), false, true);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -1253,7 +1283,23 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextInfoCell(mContext);
                     try {
                         PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
-                        ((TextInfoCell) view).setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
+                        int code = pInfo.versionCode / 10;
+                        String abi = "";
+                        switch (pInfo.versionCode % 10) {
+                            case 0:
+                                abi = "arm";
+                                break;
+                            case 1:
+                                abi = "arm-v7a";
+                                break;
+                            case 2:
+                                abi = "x86";
+                                break;
+                            case 3:
+                                abi = "universal";
+                                break;
+                        }
+                        ((TextInfoCell) view).setText(String.format(Locale.US, "Asturgram p\'Android ufríu por Softastur so la llicencia GPLv3 y biforcáu del orixinal fechu por Pavel Durov y Nicolai Durov. Esta ye la versión %s (%d). Arquitectura %s", pInfo.versionName, code, abi));
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
@@ -1348,9 +1394,9 @@ public int getItemViewType(int i) {
             }
             if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
-            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == autoplayGifsRow || i == raiseToSpeakRow) {
+            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == autoplayGifsRow || i == raiseToSpeakRow || i == customTabsRow || i == directShareRow) {
                 return 3;
-            } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == stickersRow || i == cacheRow) {
+            } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == languageRow || i == contactsSortRow || i == stickersRow || i == cacheRow || i == privacyPolicyRow) {
                 return 2;
             } else if (i == versionRow) {
                 return 5;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
index e2bfaaa22..9970ed5e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickerPreviewViewer.java
@@ -27,6 +27,7 @@
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.messenger.FileLog;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Cells.ContextLinkCell;
 import org.telegram.ui.Cells.StickerCell;
 import org.telegram.ui.Cells.StickerEmojiCell;
 import org.telegram.ui.Components.LayoutHelper;
@@ -88,6 +89,8 @@ public void reset() {
                 ((StickerEmojiCell) currentStickerPreviewCell).setScaled(false);
             } else if (currentStickerPreviewCell instanceof StickerCell) {
                 ((StickerCell) currentStickerPreviewCell).setScaled(false);
+            } else if (currentStickerPreviewCell instanceof ContextLinkCell) {
+                ((ContextLinkCell) currentStickerPreviewCell).setScaled(false);
             }
             currentStickerPreviewCell = null;
         }
@@ -116,6 +119,8 @@ public void run() {
                             ((StickerEmojiCell) currentStickerPreviewCell).setScaled(false);
                         } else if (currentStickerPreviewCell instanceof StickerCell) {
                             ((StickerCell) currentStickerPreviewCell).setScaled(false);
+                        } else if (currentStickerPreviewCell instanceof ContextLinkCell) {
+                            ((ContextLinkCell) currentStickerPreviewCell).setScaled(false);
                         }
                         currentStickerPreviewCell = null;
                     }
@@ -148,13 +153,23 @@ public void run() {
                             if (top > y || bottom < y || left > x || right < x) {
                                 continue;
                             }
-                            if (!(view instanceof StickerEmojiCell) && !(view instanceof StickerCell) || view == currentStickerPreviewCell) {
+                            boolean ok = false;
+                            if (view instanceof StickerEmojiCell) {
+                                ok = true;
+                            } else if (view instanceof StickerCell) {
+                                ok = true;
+                            } else if (view instanceof ContextLinkCell) {
+                                ok = ((ContextLinkCell) view).isSticker();
+                            }
+                            if (!ok || view == currentStickerPreviewCell) {
                                 break;
                             }
                             if (currentStickerPreviewCell instanceof StickerEmojiCell) {
                                 ((StickerEmojiCell) currentStickerPreviewCell).setScaled(false);
                             } else if (currentStickerPreviewCell instanceof StickerCell) {
                                 ((StickerCell) currentStickerPreviewCell).setScaled(false);
+                            } else if (currentStickerPreviewCell instanceof ContextLinkCell) {
+                                ((ContextLinkCell) currentStickerPreviewCell).setScaled(false);
                             }
                             currentStickerPreviewCell = view;
                             setKeyboardHeight(height);
@@ -164,6 +179,9 @@ public void run() {
                             } else if (currentStickerPreviewCell instanceof StickerCell) {
                                 open(((StickerCell) currentStickerPreviewCell).getSticker());
                                 ((StickerCell) currentStickerPreviewCell).setScaled(true);
+                            } else if (currentStickerPreviewCell instanceof ContextLinkCell) {
+                                open(((ContextLinkCell) currentStickerPreviewCell).getDocument());
+                                ((ContextLinkCell) currentStickerPreviewCell).setScaled(true);
                             }
                             return true;
                         }
@@ -212,7 +230,16 @@ public boolean onInterceptTouchEvent(MotionEvent event, final View listView, fin
                 if (top > y || bottom < y || left > x || right < x) {
                     continue;
                 }
-                if (!(view instanceof StickerEmojiCell) && !(view instanceof StickerCell) || view instanceof StickerEmojiCell && !((StickerEmojiCell) view).showingBitmap() || view instanceof StickerCell && !((StickerCell) view).showingBitmap()) {
+                boolean ok = false;
+                if (view instanceof StickerEmojiCell) {
+                    ok = ((StickerEmojiCell) view).showingBitmap();
+                } else if (view instanceof StickerCell) {
+                    ok = ((StickerCell) view).showingBitmap();
+                } else if (view instanceof ContextLinkCell) {
+                    ContextLinkCell cell = (ContextLinkCell) view;
+                    ok = cell.isSticker() && cell.showingBitmap();
+                }
+                if (!ok) {
                     return false;
                 }
                 startX = x;
@@ -240,6 +267,9 @@ public void run() {
                         } else if (currentStickerPreviewCell instanceof StickerCell) {
                             open(((StickerCell) currentStickerPreviewCell).getSticker());
                             ((StickerCell) currentStickerPreviewCell).setScaled(true);
+                        } else if (currentStickerPreviewCell instanceof ContextLinkCell) {
+                            open(((ContextLinkCell) currentStickerPreviewCell).getDocument());
+                            ((ContextLinkCell) currentStickerPreviewCell).setScaled(true);
                         }
                     }
                 };
@@ -259,6 +289,9 @@ public void setParentActivity(Activity activity) {
         windowView = new FrameLayout(activity);
         windowView.setFocusable(true);
         windowView.setFocusableInTouchMode(true);
+        if (Build.VERSION.SDK_INT >= 23) {
+            windowView.setFitsSystemWindows(true);
+        }
 
         containerView = new FrameLayoutDrawer(activity);
         containerView.setFocusable(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
index 56bfeafd8..a6644a08a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/StickersActivity.java
@@ -14,7 +14,6 @@
 import android.content.Intent;
 import android.graphics.Canvas;
 import android.os.Build;
-import android.os.Message;
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
 import android.view.View;
@@ -167,18 +166,7 @@ public void onItemClick(View view, int position) {
                     if (stickers == null || stickers.isEmpty()) {
                         return;
                     }
-                    StickersAlert alert = new StickersAlert(getParentActivity(), stickerSet);
-                    alert.setButton(AlertDialog.BUTTON_NEGATIVE, LocaleController.getString("Close", R.string.Close), (Message) null);
-                    if (!stickerSet.set.official) {
-                        alert.setButton(AlertDialog.BUTTON_NEUTRAL, LocaleController.getString("StickersRemove", R.string.StickersRemove), new DialogInterface.OnClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                StickersQuery.removeStickersSet(getParentActivity(), stickerSet.set, 0);
-                            }
-                        });
-                    }
-                    setVisibleDialog(alert);
-                    alert.show();
+                    showDialog(new StickersAlert(getParentActivity(), null, stickerSet, null));
                 }
             }
         });
@@ -375,6 +363,7 @@ public void onClick(View widget) {
                     view.setBackgroundResource(R.drawable.greydivider_bottom);
                     break;
             }
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
             return new Holder(view);
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
index bc5f0afec..25c793b26 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/TwoStepVerificationActivity.java
@@ -680,8 +680,8 @@ private boolean isValidEmail(String text) {
         if (text == null || text.length() < 3) {
             return false;
         }
-        int dot = text.lastIndexOf(".");
-        int dog = text.lastIndexOf("@");
+        int dot = text.lastIndexOf('.');
+        int dog = text.lastIndexOf('@');
         return !(dot < 0 || dog < 0 || dot < dog);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 64db21a64..111f7be53 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -49,6 +49,7 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.VideoSeekBarView;
 import org.telegram.ui.Components.VideoTimelineView;
@@ -225,8 +226,8 @@ public void onFragmentDestroy() {
 
     @Override
     public View createView(Context context) {
-        actionBar.setBackgroundColor(0xff333333);
-        actionBar.setItemsBackground(R.drawable.bar_selector_white);
+        actionBar.setBackgroundColor(Theme.ACTION_BAR_MEDIA_PICKER_COLOR);
+        actionBar.setItemsBackgroundColor(Theme.ACTION_BAR_PICKER_SELECTOR_COLOR);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setTitle(LocaleController.getString("EditVideo", R.string.EditVideo));
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index 0e75d8250..e2ee12828 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -16,6 +16,8 @@
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
@@ -61,7 +63,8 @@
 
     private ListAdapter listAdapter;
     private ImageView backgroundImage;
-    private ProgressBar progressBar;
+    private FrameLayout progressView;
+    private View progressViewBackground;
     private int selectedBackground;
     private int selectedColor;
     private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<>();
@@ -80,7 +83,6 @@ public boolean onFragmentCreate() {
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);
 
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -97,7 +99,6 @@ public void onFragmentDestroy() {
         super.onFragmentDestroy();
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);
     }
 
@@ -171,9 +172,23 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
-        progressBar = new ProgressBar(context);
-        progressBar.setPadding(AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6), AndroidUtilities.dp(6));
-        frameLayout.addView(progressBar, LayoutHelper.createFrame(60, 60, Gravity.CENTER, 0, 0, 0, 52));
+        progressView = new FrameLayout(context);
+        progressView.setVisibility(View.INVISIBLE);
+        frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 52));
+
+        progressViewBackground = new View(context);
+        progressViewBackground.setBackgroundResource(R.drawable.system_loader);
+        progressView.addView(progressViewBackground, LayoutHelper.createFrame(36, 36, Gravity.CENTER));
+
+        ProgressBar progressBar = new ProgressBar(context);
+        try {
+            progressBar.setIndeterminateDrawable(context.getResources().getDrawable(R.drawable.loading_animation));
+        } catch (Exception e) {
+            //don't promt
+        }
+        progressBar.setIndeterminate(true);
+        AndroidUtilities.setProgressBarAnimationDuration(progressBar, 1500);
+        progressView.addView(progressBar, LayoutHelper.createFrame(32, 32, Gravity.CENTER));
 
         RecyclerListView listView = new RecyclerListView(context);
         listView.setClipToPadding(false);
@@ -313,11 +328,12 @@ private void processSelectedBackground() {
             String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
             File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
             if (!f.exists()) {
-                progressBar.setProgress(0);
+                int result[] = AndroidUtilities.calcDrawableColor(backgroundImage.getDrawable());
+                progressViewBackground.getBackground().setColorFilter(new PorterDuffColorFilter(result[0], PorterDuff.Mode.MULTIPLY));
                 loadingFile = fileName;
                 loadingFileObject = f;
                 doneButton.setEnabled(false);
-                progressBar.setVisibility(View.VISIBLE);
+                progressView.setVisibility(View.VISIBLE);
                 loadingSize = size;
                 selectedColor = 0;
                 FileLoader.getInstance().loadFile(size, null, true);
@@ -337,7 +353,7 @@ private void processSelectedBackground() {
                 backgroundImage.setBackgroundColor(0);
                 selectedColor = 0;
                 doneButton.setEnabled(true);
-                progressBar.setVisibility(View.GONE);
+                progressView.setVisibility(View.GONE);
             }
         } else {
             if (loadingFile != null) {
@@ -373,7 +389,7 @@ private void processSelectedBackground() {
             loadingFile = null;
             loadingSize = null;
             doneButton.setEnabled(true);
-            progressBar.setVisibility(View.GONE);
+            progressView.setVisibility(View.GONE);
         }
     }
 
@@ -386,26 +402,20 @@ public void didReceivedNotification(int id, final Object... args) {
                 loadingFileObject = null;
                 loadingFile = null;
                 loadingSize = null;
-                progressBar.setVisibility(View.GONE);
+                progressView.setVisibility(View.GONE);
                 doneButton.setEnabled(false);
             }
         } else if (id == NotificationCenter.FileDidLoaded) {
             String location = (String) args[0];
             if (loadingFile != null && loadingFile.equals(location)) {
                 backgroundImage.setImageURI(Uri.fromFile(loadingFileObject));
-                progressBar.setVisibility(View.GONE);
+                progressView.setVisibility(View.GONE);
                 backgroundImage.setBackgroundColor(0);
                 doneButton.setEnabled(true);
                 loadingFileObject = null;
                 loadingFile = null;
                 loadingSize = null;
             }
-        } else if (id == NotificationCenter.FileLoadProgressChanged) {
-            String location = (String) args[0];
-            if (loadingFile != null && loadingFile.equals(location)) {
-                Float progress = (Float) args[1];
-                progressBar.setProgress((int) (progress * 100));
-            }
         } else if (id == NotificationCenter.wallpapersDidLoaded) {
             wallPapers = (ArrayList<TLRPC.WallPaper>) args[0];
             wallpappersByIds.clear();
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/abc_ic_menu_share_mtrl_alpha.png b/TMessagesProj/src/main/res/drawable-hdpi/abc_ic_menu_share_mtrl_alpha.png
new file mode 100644
index 000000000..ee4081296
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/abc_ic_menu_share_mtrl_alpha.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png
deleted file mode 100755
index a90b6ce9c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/admin_star.png b/TMessagesProj/src/main/res/drawable-hdpi/admin_star.png
new file mode 100755
index 000000000..2f6db99ed
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/admin_star.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/admin_star2.png b/TMessagesProj/src/main/res/drawable-hdpi/admin_star2.png
new file mode 100755
index 000000000..6d9f3a892
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/admin_star2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_video.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_video.png
index 7bb7aca4f..2b21de5b6 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/attach_video.png and b/TMessagesProj/src/main/res/drawable-hdpi/attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png
index db40e51ce..3f23133f9 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png and b/TMessagesProj/src/main/res/drawable-hdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_file.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_file.png
new file mode 100755
index 000000000..81a867e92
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bot_file.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_lines.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_lines.png
new file mode 100755
index 000000000..3d80a3e40
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bot_lines.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_link.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_link.png
new file mode 100755
index 000000000..9fbea8cf5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bot_link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_list.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_list.png
index d87b1878f..cbcfa1f25 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/bot_list.png and b/TMessagesProj/src/main/res/drawable-hdpi/bot_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_location.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_location.png
new file mode 100755
index 000000000..e587748fe
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bot_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bot_music.png b/TMessagesProj/src/main/res/drawable-hdpi/bot_music.png
new file mode 100755
index 000000000..03857ec84
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/bot_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/bottom_shadow.png b/TMessagesProj/src/main/res/drawable-hdpi/bottom_shadow.png
index 5dc9ed10a..c2d6c3756 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/bottom_shadow.png and b/TMessagesProj/src/main/res/drawable-hdpi/bottom_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_b.png
deleted file mode 100755
index c942d603c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_pressed.png
deleted file mode 100755
index 58add0c14..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_s.png
deleted file mode 100755
index a649b3121..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_big.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_big.png
index 8a26eefa1..2dadadc3f 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_big.png and b/TMessagesProj/src/main/res/drawable-hdpi/cancel_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_g.png
deleted file mode 100755
index 7c9c3decb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_pressed.png
deleted file mode 100755
index 2efb6df04..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_s.png
deleted file mode 100755
index a9d24b6fe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/cancel_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/circle_big.png b/TMessagesProj/src/main/res/drawable-hdpi/circle_big.png
index bdad5c802..4a0f8dd5f 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/circle_big.png and b/TMessagesProj/src/main/res/drawable-hdpi/circle_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/contact_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/contact_blue.png
new file mode 100755
index 000000000..0f52e8781
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/contact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/contact_green.png b/TMessagesProj/src/main/res/drawable-hdpi/contact_green.png
new file mode 100755
index 000000000..1b3c67d76
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/contact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_in_bl.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_bl.png
new file mode 100755
index 000000000..de2693153
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_in_br.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_br.png
new file mode 100755
index 000000000..4bdd96326
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tl.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tl.png
new file mode 100755
index 000000000..26868c2a3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tr.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tr.png
new file mode 100755
index 000000000..7351bcc97
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_in_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_out_bl.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_bl.png
new file mode 100755
index 000000000..6209ba0be
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_out_br.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_br.png
new file mode 100755
index 000000000..e4783db81
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tl.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tl.png
new file mode 100755
index 000000000..0c22f84ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tr.png b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tr.png
new file mode 100755
index 000000000..64cab85f3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/corner_out_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png
index 213ff5b50..d225e7e22 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png and b/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png
old mode 100644
new mode 100755
index dbb256bc3..3d15a62bc
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge2.9.png b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge2.9.png
index 76ff17ccc..3a857ff23 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge2.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/dialogs_badge2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_blue.png
old mode 100644
new mode 100755
index a6a72c978..2e5b702f5
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/doc_blue.png and b/TMessagesProj/src/main/res/drawable-hdpi/doc_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_blue_s.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_blue_s.png
index d5f3d88bf..0484f441a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/doc_blue_s.png and b/TMessagesProj/src/main/res/drawable-hdpi/doc_blue_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/doc_green.png b/TMessagesProj/src/main/res/drawable-hdpi/doc_green.png
old mode 100644
new mode 100755
index 72180a744..9bc676c99
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/doc_green.png and b/TMessagesProj/src/main/res/drawable-hdpi/doc_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_b.png b/TMessagesProj/src/main/res/drawable-hdpi/download_b.png
deleted file mode 100755
index a9f428125..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_b_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/download_b_pressed.png
deleted file mode 100755
index d3a6eb918..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/download_b_s.png
deleted file mode 100755
index ee0cc68fd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_bb.png b/TMessagesProj/src/main/res/drawable-hdpi/download_bb.png
deleted file mode 100755
index 20e550799..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_bb.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_g.png b/TMessagesProj/src/main/res/drawable-hdpi/download_g.png
deleted file mode 100755
index 1c5762132..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_g_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/download_g_pressed.png
deleted file mode 100755
index c4bba83d5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/download_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/download_g_s.png
deleted file mode 100755
index a6fea44b6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/download_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b.png
new file mode 100755
index 000000000..b9b9fdbc1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel.png
new file mode 100755
index 000000000..76fccb3be
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel_s.png
new file mode 100755
index 000000000..212a68f29
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b_load.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b_load.png
new file mode 100755
index 000000000..d704af86e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b_load_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b_load_s.png
new file mode 100755
index 000000000..23a413daa
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_b_s.png
new file mode 100755
index 000000000..b682a368c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g.png
new file mode 100755
index 000000000..6b805748c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel.png
new file mode 100755
index 000000000..5fbc87d9b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel_s.png
new file mode 100755
index 000000000..07b8de153
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g_load.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g_load.png
new file mode 100755
index 000000000..741b69864
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g_load_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g_load_s.png
new file mode 100755
index 000000000..244900120
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/file_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/file_g_s.png
new file mode 100755
index 000000000..41228655b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/file_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating.png b/TMessagesProj/src/main/res/drawable-hdpi/floating.png
index 99fdffa70..5215c11d3 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/floating.png and b/TMessagesProj/src/main/res/drawable-hdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating_m.png b/TMessagesProj/src/main/res/drawable-hdpi/floating_m.png
index 7b5f02ca5..be31f6d4c 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/floating_m.png and b/TMessagesProj/src/main/res/drawable-hdpi/floating_m.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png
index 1edf010e5..b4579d8bb 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png and b/TMessagesProj/src/main/res/drawable-hdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png
old mode 100644
new mode 100755
index 36d5c85d6..c39ac4ef7
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png and b/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_new.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_new.png
index b604e6257..c06f2c593 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_new.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_new.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png
index a819fd9f1..f5e6c3360 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_kb.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_kb.png
old mode 100644
new mode 100755
index 4a9ed0d81..c6985f357
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_kb.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_kb.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_send.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_send.png
index 50e63ae1e..30feca08d 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_send.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_send.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/igvideo.png b/TMessagesProj/src/main/res/drawable-hdpi/igvideo.png
deleted file mode 100644
index 92c22481f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/igvideo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png
index a8d1b924c..fc3fed713 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/link.png b/TMessagesProj/src/main/res/drawable-hdpi/link.png
old mode 100644
new mode 100755
index 5ad1fcb8f..987f4cc52
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/link.png and b/TMessagesProj/src/main/res/drawable-hdpi/link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/load_big.png b/TMessagesProj/src/main/res/drawable-hdpi/load_big.png
index 54ebdc932..6a082f283 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/load_big.png and b/TMessagesProj/src/main/res/drawable-hdpi/load_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/location2.png b/TMessagesProj/src/main/res/drawable-hdpi/location2.png
new file mode 100644
index 000000000..84e92b27b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/location2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/location_b.9.png b/TMessagesProj/src/main/res/drawable-hdpi/location_b.9.png
old mode 100644
new mode 100755
index 84e92b27b..28f77558b
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/location_b.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/location_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/location_g.9.png b/TMessagesProj/src/main/res/drawable-hdpi/location_g.9.png
old mode 100644
new mode 100755
index 2c9c70da2..8f2c9c0c7
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/location_g.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/location_g.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_pause.png b/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_pause.png
index 390a69c76..f173ae63a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_pause.png and b/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_play.png b/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_play.png
index 7e3d35f71..7dd0d0688 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_play.png and b/TMessagesProj/src/main/res/drawable-hdpi/miniplayer_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in.9.png
index 974d60e2d..984a1871c 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_in.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo.9.png
index e92d7aedb..5bded8c16 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo_selected.9.png
index f88932d19..e279dc81e 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected.9.png
index a7638c2d6..8ddd4059e 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out.9.png
index 08fd35b4c..5034ea1f0 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_out.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo.9.png
index f8f07f7fb..a6604011a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo_selected.9.png
index 3d5b1f9fa..8a4bd61f3 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected.9.png
index 5e01d8fe3..82b6bc2db 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/newmsg_divider.png b/TMessagesProj/src/main/res/drawable-hdpi/newmsg_divider.png
index b6c3c9a33..58321338a 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/newmsg_divider.png and b/TMessagesProj/src/main/res/drawable-hdpi/newmsg_divider.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/notification.png b/TMessagesProj/src/main/res/drawable-hdpi/notification.png
index e9ba19015..9de5cbac8 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/notification.png and b/TMessagesProj/src/main/res/drawable-hdpi/notification.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/passcode_logo.png b/TMessagesProj/src/main/res/drawable-hdpi/passcode_logo.png
old mode 100644
new mode 100755
index a004ca95c..5425c5f8b
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/passcode_logo.png and b/TMessagesProj/src/main/res/drawable-hdpi/passcode_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_b.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_b.png
index a9ac7a794..d8547fe06 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_b.png and b/TMessagesProj/src/main/res/drawable-hdpi/pause_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_b_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_b_pressed.png
deleted file mode 100755
index 9f4b6e1db..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_b_s.png
index 6ae227b1a..fe250126e 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_b_s.png and b/TMessagesProj/src/main/res/drawable-hdpi/pause_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_bb.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_bb.png
deleted file mode 100755
index d8d58546b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_bb.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_g.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_g.png
index b8bd88ef3..1f1f85d82 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_g.png and b/TMessagesProj/src/main/res/drawable-hdpi/pause_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_g_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_g_pressed.png
deleted file mode 100755
index 19c76b441..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_g_s.png
index ae16e2fc0..f9b9d4285 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_g_s.png and b/TMessagesProj/src/main/res/drawable-hdpi/pause_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_w.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_w.png
deleted file mode 100755
index b3ba2dce6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_w2.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_w2.png
deleted file mode 100755
index c673dbc14..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_w2_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_w2_pressed.png
deleted file mode 100755
index 7fdae4f8a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/pause_w_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/pause_w_pressed.png
deleted file mode 100755
index ca28d541d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/pause_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/phone_activate.png b/TMessagesProj/src/main/res/drawable-hdpi/phone_activate.png
new file mode 100755
index 000000000..52b4de8d6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/phone_activate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png
old mode 100644
new mode 100755
index fb7572ece..06eae4553
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b.png
new file mode 100755
index 000000000..780ecf6ac
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b_s.png
new file mode 100755
index 000000000..6c2bc841f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g.png
new file mode 100755
index 000000000..23200be5d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g_s.png
new file mode 100755
index 000000000..a8aad3a0e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png
new file mode 100755
index 000000000..3aa1632d8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photocancel_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photogif.png b/TMessagesProj/src/main/res/drawable-hdpi/photogif.png
old mode 100644
new mode 100755
index 0033e3db6..2c71a6420
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-hdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png
new file mode 100755
index 000000000..ec339890c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photogif_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload.png
old mode 100644
new mode 100755
index 2dbd58252..57c2e5240
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-hdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_b.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_b.png
new file mode 100755
index 000000000..f78f534d8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photoload_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_b_s.png
new file mode 100755
index 000000000..563dd17c5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photoload_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_g.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_g.png
new file mode 100755
index 000000000..bb7ba472c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photoload_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_g_s.png
new file mode 100755
index 000000000..027d0da08
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photoload_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png
new file mode 100755
index 000000000..588a4fa7b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/photoload_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/photopause.png b/TMessagesProj/src/main/res/drawable-hdpi/photopause.png
deleted file mode 100644
index ca0653d40..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/photopause.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/phototime2.9.png b/TMessagesProj/src/main/res/drawable-hdpi/phototime2.9.png
new file mode 100755
index 000000000..143a0fbdc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/phototime2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/phototime2_b.9.png b/TMessagesProj/src/main/res/drawable-hdpi/phototime2_b.9.png
new file mode 100755
index 000000000..a0e4a272b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/phototime2_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_b.png b/TMessagesProj/src/main/res/drawable-hdpi/play_b.png
new file mode 100755
index 000000000..702c57a9a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/play_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_b_s.png b/TMessagesProj/src/main/res/drawable-hdpi/play_b_s.png
new file mode 100755
index 000000000..fd1dc1228
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/play_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_big.png b/TMessagesProj/src/main/res/drawable-hdpi/play_big.png
index a4e74383e..ede6189a8 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/play_big.png and b/TMessagesProj/src/main/res/drawable-hdpi/play_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_g.png b/TMessagesProj/src/main/res/drawable-hdpi/play_g.png
new file mode 100755
index 000000000..6b61de3ff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/play_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_g_s.png b/TMessagesProj/src/main/res/drawable-hdpi/play_g_s.png
new file mode 100755
index 000000000..0cffb436f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/play_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_w.png b/TMessagesProj/src/main/res/drawable-hdpi/play_w.png
deleted file mode 100755
index 3b9bac668..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/play_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_w2.png b/TMessagesProj/src/main/res/drawable-hdpi/play_w2.png
deleted file mode 100755
index 330da7e1e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/play_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_w2_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/play_w2_pressed.png
deleted file mode 100755
index 7b7018e2a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/play_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/play_w_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/play_w_pressed.png
deleted file mode 100755
index 7261585f5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/play_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png
old mode 100644
new mode 100755
index 1bead9ee9..dc0e8a04d
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-hdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png
new file mode 100755
index 000000000..63b03ebb4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/playvideo_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/reply.png b/TMessagesProj/src/main/res/drawable-hdpi/reply.png
index 98db79e65..f92853200 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/reply.png and b/TMessagesProj/src/main/res/drawable-hdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/share_arrow.png b/TMessagesProj/src/main/res/drawable-hdpi/share_arrow.png
new file mode 100755
index 000000000..c30cfa144
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/share_arrow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/share_round.png b/TMessagesProj/src/main/res/drawable-hdpi/share_round.png
new file mode 100755
index 000000000..d21a328b5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/share_round.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/shareblack.png b/TMessagesProj/src/main/res/drawable-hdpi/shareblack.png
deleted file mode 100644
index 9a9fd6f15..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/shareblack.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/shareblack_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/shareblack_pressed.png
deleted file mode 100644
index be1b13bf8..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/shareblack_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/shareblue.png b/TMessagesProj/src/main/res/drawable-hdpi/shareblue.png
deleted file mode 100644
index 0171ea6f1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/shareblue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/shareblue_pressed.png b/TMessagesProj/src/main/res/drawable-hdpi/shareblue_pressed.png
deleted file mode 100644
index 02e40e50f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/shareblue_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/stickercounter.9.png b/TMessagesProj/src/main/res/drawable-hdpi/stickercounter.9.png
new file mode 100755
index 000000000..e17364d60
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/stickercounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system.9.png b/TMessagesProj/src/main/res/drawable-hdpi/system.9.png
new file mode 100755
index 000000000..de5d484a1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/system.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_black.9.png b/TMessagesProj/src/main/res/drawable-hdpi/system_black.9.png
deleted file mode 100644
index 14865b7ab..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/system_black.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png
deleted file mode 100755
index 65ad2140d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_loader.png b/TMessagesProj/src/main/res/drawable-hdpi/system_loader.png
new file mode 100755
index 000000000..f6a19f070
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/system_loader.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_loader1.png b/TMessagesProj/src/main/res/drawable-hdpi/system_loader1.png
deleted file mode 100755
index c73039957..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/system_loader1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_loader2.png b/TMessagesProj/src/main/res/drawable-hdpi/system_loader2.png
deleted file mode 100755
index 30432e96d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/system_loader2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/video_actions.png b/TMessagesProj/src/main/res/drawable-hdpi/video_actions.png
new file mode 100755
index 000000000..1a80a8cd4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/video_actions.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/abc_ic_menu_share_mtrl_alpha.png b/TMessagesProj/src/main/res/drawable-mdpi/abc_ic_menu_share_mtrl_alpha.png
new file mode 100644
index 000000000..d05f969e9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/abc_ic_menu_share_mtrl_alpha.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/admin_star.png b/TMessagesProj/src/main/res/drawable-mdpi/admin_star.png
new file mode 100755
index 000000000..d676d01e4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/admin_star.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/admin_star2.png b/TMessagesProj/src/main/res/drawable-mdpi/admin_star2.png
new file mode 100755
index 000000000..150fb2159
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/admin_star2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_video.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_video.png
index 67ac2e3c7..4a956ce6a 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/attach_video.png and b/TMessagesProj/src/main/res/drawable-mdpi/attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png
index b814908bc..aef64ae3c 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png and b/TMessagesProj/src/main/res/drawable-mdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_file.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_file.png
new file mode 100755
index 000000000..44b53c442
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bot_file.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_lines.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_lines.png
new file mode 100755
index 000000000..8f7e13f52
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bot_lines.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_link.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_link.png
new file mode 100755
index 000000000..76d34b503
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bot_link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_list.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_list.png
index 0c79af3e2..41a7ae2f0 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/bot_list.png and b/TMessagesProj/src/main/res/drawable-mdpi/bot_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_location.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_location.png
new file mode 100755
index 000000000..e18474ab1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bot_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bot_music.png b/TMessagesProj/src/main/res/drawable-mdpi/bot_music.png
new file mode 100755
index 000000000..2a9f2e532
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/bot_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/bottom_shadow.png b/TMessagesProj/src/main/res/drawable-mdpi/bottom_shadow.png
index 3e170fda5..08ede3f29 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/bottom_shadow.png and b/TMessagesProj/src/main/res/drawable-mdpi/bottom_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_b.png
deleted file mode 100755
index b0dd70ea0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_pressed.png
deleted file mode 100755
index 412153274..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_s.png
deleted file mode 100755
index 7de64f7ac..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_big.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_big.png
index 8ffce8e40..105022781 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_big.png and b/TMessagesProj/src/main/res/drawable-mdpi/cancel_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_g.png
deleted file mode 100755
index 43b0a71e4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_pressed.png
deleted file mode 100755
index 4942c02cb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_s.png
deleted file mode 100755
index 074873187..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/cancel_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/circle_big.png b/TMessagesProj/src/main/res/drawable-mdpi/circle_big.png
index 46266d416..a42899d88 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/circle_big.png and b/TMessagesProj/src/main/res/drawable-mdpi/circle_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/contact_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/contact_blue.png
new file mode 100755
index 000000000..1b2beced2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/contact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/contact_green.png b/TMessagesProj/src/main/res/drawable-mdpi/contact_green.png
new file mode 100755
index 000000000..0cb733438
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/contact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_bl.png
similarity index 53%
rename from TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png
rename to TMessagesProj/src/main/res/drawable-mdpi/corner_in_bl.png
index a553f495f..51b1c2810 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/addcontact_green.png and b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/corner_in_br.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_br.png
new file mode 100755
index 000000000..ef954307f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_tl.png
similarity index 54%
rename from TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png
rename to TMessagesProj/src/main/res/drawable-mdpi/corner_in_tl.png
index 45d6ac2b4..c9d6a3985 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_green.png and b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/corner_in_tr.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_tr.png
new file mode 100755
index 000000000..1ca70a22c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/corner_in_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_bl.png
similarity index 53%
rename from TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png
rename to TMessagesProj/src/main/res/drawable-mdpi/corner_out_bl.png
index ec9b9c028..4d5e2d59f 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/addcontact_blue.png and b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/corner_out_br.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_br.png
new file mode 100755
index 000000000..93b55ba67
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tl.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tl.png
new file mode 100755
index 000000000..023cc522d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tr.png b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tr.png
new file mode 100755
index 000000000..c549ad936
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/corner_out_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png
index 2fd1c1ac9..8808768e4 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png and b/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png
old mode 100644
new mode 100755
index 2c32c51ef..bf14151a6
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge2.9.png b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge2.9.png
index 45eaa60e0..26856e0f3 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge2.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/dialogs_badge2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_blue.png
old mode 100644
new mode 100755
index 153d689ba..6412768df
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/doc_blue.png and b/TMessagesProj/src/main/res/drawable-mdpi/doc_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_blue_s.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_blue_s.png
index 922975c71..361da2e7f 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/doc_blue_s.png and b/TMessagesProj/src/main/res/drawable-mdpi/doc_blue_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/doc_green.png b/TMessagesProj/src/main/res/drawable-mdpi/doc_green.png
old mode 100644
new mode 100755
index 3636a40ca..d9bbb09b2
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/doc_green.png and b/TMessagesProj/src/main/res/drawable-mdpi/doc_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_b.png b/TMessagesProj/src/main/res/drawable-mdpi/download_b.png
deleted file mode 100755
index 7c3fb80ce..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_b_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/download_b_pressed.png
deleted file mode 100755
index 7e5385dd7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/download_b_s.png
deleted file mode 100755
index 09ba0e35d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_g.png b/TMessagesProj/src/main/res/drawable-mdpi/download_g.png
deleted file mode 100755
index 2b6c9b925..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_g_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/download_g_pressed.png
deleted file mode 100755
index a1270b164..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/download_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/download_g_s.png
deleted file mode 100755
index 7600aa259..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/download_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b.png
new file mode 100755
index 000000000..463d64525
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel.png
new file mode 100755
index 000000000..d2e695375
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel_s.png
new file mode 100755
index 000000000..0535435fb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b_load.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b_load.png
new file mode 100755
index 000000000..4038ef607
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b_load_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b_load_s.png
new file mode 100755
index 000000000..68251f82f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_b_s.png
new file mode 100755
index 000000000..970f88a98
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g.png
new file mode 100755
index 000000000..7e3ba2594
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel.png
new file mode 100755
index 000000000..8697a7efd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel_s.png
new file mode 100755
index 000000000..16c52423f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g_load.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g_load.png
new file mode 100755
index 000000000..9a760469d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g_load_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g_load_s.png
new file mode 100755
index 000000000..dd8042267
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/file_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/file_g_s.png
new file mode 100755
index 000000000..e72c909d9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/file_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating.png b/TMessagesProj/src/main/res/drawable-mdpi/floating.png
index 4f11fc264..465b28eb7 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/floating.png and b/TMessagesProj/src/main/res/drawable-mdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating_m.png b/TMessagesProj/src/main/res/drawable-mdpi/floating_m.png
index 6d1b38184..650c4626e 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/floating_m.png and b/TMessagesProj/src/main/res/drawable-mdpi/floating_m.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png
index 0ff85c17d..d013320f1 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png and b/TMessagesProj/src/main/res/drawable-mdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png
old mode 100644
new mode 100755
index 7f4ec885e..992a34f5b
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png and b/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_new.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_new.png
index 1f55ff56f..5d8ee2cc9 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_new.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_new.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png
index e245bb9c5..7e81edf28 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_kb.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_kb.png
old mode 100644
new mode 100755
index 44b4285c5..57919b9ac
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_kb.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_kb.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_send.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_send.png
index 64dd4c8e3..312ce750d 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_send.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_send.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/igvideo.png b/TMessagesProj/src/main/res/drawable-mdpi/igvideo.png
deleted file mode 100644
index e7b93b3b7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/igvideo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png
index 9acf06791..8ea2807b8 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/link.png b/TMessagesProj/src/main/res/drawable-mdpi/link.png
old mode 100644
new mode 100755
index 24125b57e..96b098fff
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/link.png and b/TMessagesProj/src/main/res/drawable-mdpi/link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/load_big.png b/TMessagesProj/src/main/res/drawable-mdpi/load_big.png
index ea86a8760..6cc2fabe4 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/load_big.png and b/TMessagesProj/src/main/res/drawable-mdpi/load_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/location2.png b/TMessagesProj/src/main/res/drawable-mdpi/location2.png
new file mode 100644
index 000000000..3f0abf8b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/location2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/location_b.9.png b/TMessagesProj/src/main/res/drawable-mdpi/location_b.9.png
index 3f0abf8b4..c3f9b2417 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/location_b.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/location_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/location_g.9.png b/TMessagesProj/src/main/res/drawable-mdpi/location_g.9.png
index d77aa911d..b84039f32 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/location_g.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/location_g.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_pause.png b/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_pause.png
index 9f4edcc7d..295f9addc 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_pause.png and b/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_play.png b/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_play.png
index 088f15e25..10b948e60 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_play.png and b/TMessagesProj/src/main/res/drawable-mdpi/miniplayer_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_in.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_in.9.png
index f9a0267b6..979a146be 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_in.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_in.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo.9.png
index c5c6aa595..5ac724e54 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo_selected.9.png
index 0658e94ae..324c65671 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_selected.9.png
index cd1118061..7425774ea 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_out.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_out.9.png
index f22c541f7..4e1c17bae 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_out.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_out.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo.9.png
index ad4ad9ce2..1a759a33e 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo_selected.9.png
index 734f94360..030a8a0a1 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_selected.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_selected.9.png
index 7e29c8128..388972c22 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_selected.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/newmsg_divider.png b/TMessagesProj/src/main/res/drawable-mdpi/newmsg_divider.png
index 81afcd30e..61510e887 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/newmsg_divider.png and b/TMessagesProj/src/main/res/drawable-mdpi/newmsg_divider.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/notification.png b/TMessagesProj/src/main/res/drawable-mdpi/notification.png
index 675c75020..5c3525d2a 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/notification.png and b/TMessagesProj/src/main/res/drawable-mdpi/notification.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/passcode_logo.png b/TMessagesProj/src/main/res/drawable-mdpi/passcode_logo.png
old mode 100644
new mode 100755
index 865cb4c97..b9c3d9754
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/passcode_logo.png and b/TMessagesProj/src/main/res/drawable-mdpi/passcode_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_b.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_b.png
index 4d74e901d..8608ecd68 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_b.png and b/TMessagesProj/src/main/res/drawable-mdpi/pause_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_b_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_b_pressed.png
deleted file mode 100755
index e300fbbca..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_b_s.png
index e29d3cf41..80fafabb3 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_b_s.png and b/TMessagesProj/src/main/res/drawable-mdpi/pause_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_g.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_g.png
index a95855259..081279359 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_g.png and b/TMessagesProj/src/main/res/drawable-mdpi/pause_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_g_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_g_pressed.png
deleted file mode 100755
index 82e15e54d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_g_s.png
index 020a2499c..b711a3138 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_g_s.png and b/TMessagesProj/src/main/res/drawable-mdpi/pause_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_w.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_w.png
deleted file mode 100755
index a6416a69e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_w2.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_w2.png
deleted file mode 100755
index a5d419e71..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_w2_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_w2_pressed.png
deleted file mode 100755
index 03dad7468..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/pause_w_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/pause_w_pressed.png
deleted file mode 100755
index b12e36df9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/pause_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/phone_activate.png b/TMessagesProj/src/main/res/drawable-mdpi/phone_activate.png
new file mode 100755
index 000000000..62dcc7aee
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/phone_activate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png
old mode 100644
new mode 100755
index e3e7a3595..6014372e5
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b.png
new file mode 100755
index 000000000..be189093f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b_s.png
new file mode 100755
index 000000000..2d4328698
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g.png
new file mode 100755
index 000000000..9493aa821
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g_s.png
new file mode 100755
index 000000000..7d4af0439
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png
new file mode 100755
index 000000000..491b3d434
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photocancel_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photogif.png b/TMessagesProj/src/main/res/drawable-mdpi/photogif.png
old mode 100644
new mode 100755
index 1241d8f5a..2ee7a49d2
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-mdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png
new file mode 100755
index 000000000..64af18ac8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photogif_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload.png
old mode 100644
new mode 100755
index 18b75497e..1f320b2d8
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-mdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_b.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_b.png
new file mode 100755
index 000000000..fb97fc7c9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photoload_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_b_s.png
new file mode 100755
index 000000000..be2dfb74f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photoload_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_g.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_g.png
new file mode 100755
index 000000000..7321550e4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photoload_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_g_s.png
new file mode 100755
index 000000000..2411e380e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photoload_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png
new file mode 100755
index 000000000..87810072f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/photoload_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/photopause.png b/TMessagesProj/src/main/res/drawable-mdpi/photopause.png
deleted file mode 100644
index e3051be70..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/photopause.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/phototime2.9.png b/TMessagesProj/src/main/res/drawable-mdpi/phototime2.9.png
new file mode 100755
index 000000000..584a253b0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/phototime2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/phototime2_b.9.png b/TMessagesProj/src/main/res/drawable-mdpi/phototime2_b.9.png
new file mode 100755
index 000000000..59f83e02f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/phototime2_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_b.png b/TMessagesProj/src/main/res/drawable-mdpi/play_b.png
new file mode 100755
index 000000000..247246ed3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/play_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_b_s.png b/TMessagesProj/src/main/res/drawable-mdpi/play_b_s.png
new file mode 100755
index 000000000..c3e88682f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/play_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_big.png b/TMessagesProj/src/main/res/drawable-mdpi/play_big.png
index 1424f1301..341bcac7f 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/play_big.png and b/TMessagesProj/src/main/res/drawable-mdpi/play_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_g.png b/TMessagesProj/src/main/res/drawable-mdpi/play_g.png
new file mode 100755
index 000000000..10f5caf0d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/play_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_g_s.png b/TMessagesProj/src/main/res/drawable-mdpi/play_g_s.png
new file mode 100755
index 000000000..761fa5188
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/play_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_w.png b/TMessagesProj/src/main/res/drawable-mdpi/play_w.png
deleted file mode 100755
index ca0df62f6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/play_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_w2.png b/TMessagesProj/src/main/res/drawable-mdpi/play_w2.png
deleted file mode 100755
index 5fba3f1b9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/play_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_w2_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/play_w2_pressed.png
deleted file mode 100755
index 7b9fc05b3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/play_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/play_w_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/play_w_pressed.png
deleted file mode 100755
index b8b601b8a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/play_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png
old mode 100644
new mode 100755
index e77608feb..f3a3a6c7e
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-mdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png
new file mode 100755
index 000000000..5a361fe42
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/playvideo_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/reply.png b/TMessagesProj/src/main/res/drawable-mdpi/reply.png
index 7d71990f7..8e718b4f3 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/reply.png and b/TMessagesProj/src/main/res/drawable-mdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/share_arrow.png b/TMessagesProj/src/main/res/drawable-mdpi/share_arrow.png
new file mode 100755
index 000000000..b42481c86
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/share_arrow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/share_round.png b/TMessagesProj/src/main/res/drawable-mdpi/share_round.png
new file mode 100755
index 000000000..abdb1a8b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/share_round.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/shareblack.png b/TMessagesProj/src/main/res/drawable-mdpi/shareblack.png
deleted file mode 100644
index 815e157dc..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/shareblack.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/shareblack_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/shareblack_pressed.png
deleted file mode 100644
index 4bb5e13ed..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/shareblack_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/shareblue.png b/TMessagesProj/src/main/res/drawable-mdpi/shareblue.png
deleted file mode 100644
index 12a1c6ca5..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/shareblue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/shareblue_pressed.png b/TMessagesProj/src/main/res/drawable-mdpi/shareblue_pressed.png
deleted file mode 100644
index 12a52ff43..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/shareblue_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/stickercounter.9.png b/TMessagesProj/src/main/res/drawable-mdpi/stickercounter.9.png
new file mode 100755
index 000000000..217e9f16c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/stickercounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system.9.png b/TMessagesProj/src/main/res/drawable-mdpi/system.9.png
new file mode 100755
index 000000000..5ffd21af6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/system.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_black.9.png b/TMessagesProj/src/main/res/drawable-mdpi/system_black.9.png
deleted file mode 100644
index fcb08a14c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/system_black.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png
deleted file mode 100755
index c1ce3b4f6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_loader.png b/TMessagesProj/src/main/res/drawable-mdpi/system_loader.png
new file mode 100755
index 000000000..79c6aab98
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/system_loader.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_loader1.png b/TMessagesProj/src/main/res/drawable-mdpi/system_loader1.png
deleted file mode 100755
index 357688593..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/system_loader1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_loader2.png b/TMessagesProj/src/main/res/drawable-mdpi/system_loader2.png
deleted file mode 100755
index 6c319058a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/system_loader2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/video_actions.png b/TMessagesProj/src/main/res/drawable-mdpi/video_actions.png
new file mode 100755
index 000000000..84aee2f58
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/video_actions.png differ
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
deleted file mode 100644
index 7c7941ef9..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff45658d">
-</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml
deleted file mode 100644
index fc4dddc7f..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_audio.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#2f000000">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
deleted file mode 100644
index 34512df87..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_blue.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff3f76a8">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
deleted file mode 100644
index 64d8697d3..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_cyan.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff39849d">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
deleted file mode 100644
index 49c5a35ea..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_green.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff48953d">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_grey.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_grey.xml
deleted file mode 100644
index fc4dddc7f..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_grey.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#2f000000">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
deleted file mode 100644
index 386d01cee..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_mode.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#fff0f0f0">
-</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
deleted file mode 100644
index 2d5c96c84..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_orange.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffe67429">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
deleted file mode 100644
index 8c28f1d3f..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_picker.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff3d3d3d">
-</ripple>
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
deleted file mode 100644
index 72f764054..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_pink.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffd44e7b">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
deleted file mode 100644
index 4badd6870..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_red.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffbc4b41">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
deleted file mode 100644
index ee31ab7fe..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_violet.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ff735fbe">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
deleted file mode 100644
index f0ee5a20f..000000000
--- a/TMessagesProj/src/main/res/drawable-v21/bar_selector_yellow.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<ripple xmlns:android="http://schemas.android.com/apk/res/android"
-    android:color="#ffef9f09">
-</ripple>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/abc_ic_menu_share_mtrl_alpha.png b/TMessagesProj/src/main/res/drawable-xhdpi/abc_ic_menu_share_mtrl_alpha.png
new file mode 100644
index 000000000..b57ee1935
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/abc_ic_menu_share_mtrl_alpha.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png
deleted file mode 100755
index 3ba0c9c35..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png
deleted file mode 100755
index 5beefa1c3..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/addcontact_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/admin_star.png b/TMessagesProj/src/main/res/drawable-xhdpi/admin_star.png
new file mode 100755
index 000000000..370787e2f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/admin_star.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/admin_star2.png b/TMessagesProj/src/main/res/drawable-xhdpi/admin_star2.png
new file mode 100755
index 000000000..6afc194ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/admin_star2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png
index 5dfd67b6c..f3182c9da 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png
index d251fd69c..c932ef092 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png and b/TMessagesProj/src/main/res/drawable-xhdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_file.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_file.png
new file mode 100755
index 000000000..2191a418d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_file.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_lines.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_lines.png
new file mode 100755
index 000000000..11980a894
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_lines.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_link.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_link.png
new file mode 100755
index 000000000..024405b37
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_list.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_list.png
index 286e9644b..f8ed9caa5 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/bot_list.png and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_location.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_location.png
new file mode 100755
index 000000000..f66cdbd7b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bot_music.png b/TMessagesProj/src/main/res/drawable-xhdpi/bot_music.png
new file mode 100755
index 000000000..e1aebb69f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/bot_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/bottom_shadow.png b/TMessagesProj/src/main/res/drawable-xhdpi/bottom_shadow.png
index eeb3c8374..9e1a2a274 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/bottom_shadow.png and b/TMessagesProj/src/main/res/drawable-xhdpi/bottom_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b.png
deleted file mode 100755
index 36c6390ed..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_pressed.png
deleted file mode 100755
index 79f951727..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_s.png
deleted file mode 100755
index c8a147d5a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_big.png
index 90be05edf..843ef5eb6 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_big.png and b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g.png
deleted file mode 100755
index a77e504f2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_pressed.png
deleted file mode 100755
index dea2364da..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_s.png
deleted file mode 100755
index 8817baf23..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/cancel_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/circle_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/circle_big.png
index 7a1e10611..a661d8bae 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/circle_big.png and b/TMessagesProj/src/main/res/drawable-xhdpi/circle_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/contact_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/contact_blue.png
new file mode 100755
index 000000000..0691158e3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/contact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/contact_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/contact_green.png
new file mode 100755
index 000000000..d50586ac1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/contact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_bl.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_bl.png
new file mode 100755
index 000000000..0620792f8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_br.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_br.png
new file mode 100755
index 000000000..40e0bba75
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tl.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tl.png
new file mode 100755
index 000000000..7c75fa2ce
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tr.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tr.png
new file mode 100755
index 000000000..919358f8c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_in_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_bl.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_bl.png
new file mode 100755
index 000000000..b286218be
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_br.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_br.png
new file mode 100755
index 000000000..3e859e80c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tl.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tl.png
new file mode 100755
index 000000000..84433cf5d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tr.png b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tr.png
new file mode 100755
index 000000000..ba5b3c2dd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/corner_out_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png
index ce9fd147b..b1378a6bb 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png and b/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png
old mode 100644
new mode 100755
index 9632851cc..8dcdfe626
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge2.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge2.9.png
index ad1d30b65..6ddebe881 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge2.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/dialogs_badge2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue.png
old mode 100644
new mode 100755
index 835fec45e..6931af1d4
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue.png and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue_s.png
index aa12f8834..ae8dcf517 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue_s.png and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_blue_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/doc_green.png b/TMessagesProj/src/main/res/drawable-xhdpi/doc_green.png
old mode 100644
new mode 100755
index 7c4fba30a..05380876a
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/doc_green.png and b/TMessagesProj/src/main/res/drawable-xhdpi/doc_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_b.png
deleted file mode 100755
index 5d114b083..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_b_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_b_pressed.png
deleted file mode 100755
index 671f591b2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_b_s.png
deleted file mode 100755
index 74646e396..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_g.png
deleted file mode 100755
index 1eaf6cfcd..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_g_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_g_pressed.png
deleted file mode 100755
index 4d785fbbe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/download_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/download_g_s.png
deleted file mode 100755
index 6e244b046..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/download_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b.png
new file mode 100755
index 000000000..85c47ecf7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel.png
new file mode 100755
index 000000000..ed4c2381d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel_s.png
new file mode 100755
index 000000000..0efa019d1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load.png
new file mode 100755
index 000000000..f9412a04f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load_s.png
new file mode 100755
index 000000000..50cc62b0b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_s.png
new file mode 100755
index 000000000..da8180c03
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g.png
new file mode 100755
index 000000000..7b1911ab2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel.png
new file mode 100755
index 000000000..376d89f64
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel_s.png
new file mode 100755
index 000000000..4a8e785ff
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load.png
new file mode 100755
index 000000000..8ef2faff7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load_s.png
new file mode 100755
index 000000000..6eb2518eb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/file_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_s.png
new file mode 100755
index 000000000..aaae696a7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/file_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating.png
index 5523f817d..7333b5429 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/floating.png and b/TMessagesProj/src/main/res/drawable-xhdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating_m.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating_m.png
index 0e5daf6ac..3e00bc956 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/floating_m.png and b/TMessagesProj/src/main/res/drawable-xhdpi/floating_m.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png
index 7a28b2124..98ce443c3 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png and b/TMessagesProj/src/main/res/drawable-xhdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png
old mode 100644
new mode 100755
index 40af0d3dc..78a131b43
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png and b/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_new.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_new.png
index 700ba4271..71a5fc296 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_new.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_new.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png
index 1c307e8e1..0a8e2c508 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_kb.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_kb.png
old mode 100644
new mode 100755
index f811db00e..55722091a
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_kb.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_kb.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_send.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_send.png
index 4c42bc008..5413204cf 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_send.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_send.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/igvideo.png b/TMessagesProj/src/main/res/drawable-xhdpi/igvideo.png
deleted file mode 100644
index bad393640..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/igvideo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png
index 526e860d9..6c26a10c3 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/link.png b/TMessagesProj/src/main/res/drawable-xhdpi/link.png
old mode 100644
new mode 100755
index ba82f35b9..d526eee2c
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/link.png and b/TMessagesProj/src/main/res/drawable-xhdpi/link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/load_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/load_big.png
index c405336a0..747d9aff9 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/load_big.png and b/TMessagesProj/src/main/res/drawable-xhdpi/load_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/location2.png b/TMessagesProj/src/main/res/drawable-xhdpi/location2.png
new file mode 100644
index 000000000..ade7b9ef9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/location2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/location_b.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/location_b.9.png
old mode 100644
new mode 100755
index ade7b9ef9..3a59e9579
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/location_b.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/location_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/location_g.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/location_g.9.png
old mode 100644
new mode 100755
index bbaeb93c4..893499109
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/location_g.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/location_g.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_pause.png b/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_pause.png
index 38746874f..556aec500 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_pause.png and b/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_play.png b/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_play.png
index e4e14c38a..fd6c00ec9 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_play.png and b/TMessagesProj/src/main/res/drawable-xhdpi/miniplayer_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in.9.png
index f5db8372d..42b96820b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo.9.png
index 248b9ba2b..2e6c9da23 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo_selected.9.png
index 91dabc475..a6a5f615a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_selected.9.png
index e61ca03bf..3137acd52 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_selected.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out.9.png
index d7c2816f1..306d56769 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo.9.png
index c452372f3..1018fe16a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo_selected.9.png
index faa2daa55..c76a79c92 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_selected.9.png
index 65e00a868..7f7551686 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_selected.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/newmsg_divider.png b/TMessagesProj/src/main/res/drawable-xhdpi/newmsg_divider.png
index 555f2bf13..935c3fb0f 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/newmsg_divider.png and b/TMessagesProj/src/main/res/drawable-xhdpi/newmsg_divider.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/notification.png b/TMessagesProj/src/main/res/drawable-xhdpi/notification.png
index fb9787589..daee0a15a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/notification.png and b/TMessagesProj/src/main/res/drawable-xhdpi/notification.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_off.png b/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_off.png
index 41dcd5a94..7fcaef929 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_off.png and b/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_on.png b/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_on.png
index 56a18f14a..74270aae7 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_on.png and b/TMessagesProj/src/main/res/drawable-xhdpi/notify_members_on.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/passcode_logo.png b/TMessagesProj/src/main/res/drawable-xhdpi/passcode_logo.png
old mode 100644
new mode 100755
index 92c5f2d5b..d9288e0e5
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/passcode_logo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/passcode_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_b.png
index 851500ecd..ae9b03813 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b.png and b/TMessagesProj/src/main/res/drawable-xhdpi/pause_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_pressed.png
deleted file mode 100755
index ab048657c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_s.png
index 6bbce886f..6c796c011 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_s.png and b/TMessagesProj/src/main/res/drawable-xhdpi/pause_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_g.png
index 0708a5ede..ec2d1ed05 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g.png and b/TMessagesProj/src/main/res/drawable-xhdpi/pause_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_pressed.png
deleted file mode 100755
index c6d72f73e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_s.png
index c2736a5d2..a7bb4434a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_s.png and b/TMessagesProj/src/main/res/drawable-xhdpi/pause_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_w.png
deleted file mode 100755
index 9228d6e52..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2.png
deleted file mode 100755
index bcb65abfa..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2_pressed.png
deleted file mode 100755
index 7b7e39079..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/pause_w_pressed.png
deleted file mode 100755
index 214572b3e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/pause_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/phone_activate.png b/TMessagesProj/src/main/res/drawable-xhdpi/phone_activate.png
new file mode 100755
index 000000000..f97ecc3bf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/phone_activate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png
old mode 100644
new mode 100755
index 4dc4b06be..fccbbd7f3
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b.png
new file mode 100755
index 000000000..7fef9dc1d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b_s.png
new file mode 100755
index 000000000..81fcc3a97
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g.png
new file mode 100755
index 000000000..e61452ac4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g_s.png
new file mode 100755
index 000000000..6600032fc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png
new file mode 100755
index 000000000..99ff3c7ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photocancel_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png b/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png
old mode 100644
new mode 100755
index 067b09c22..cfa6ce735
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png
new file mode 100755
index 000000000..4c9032569
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photogif_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png
old mode 100644
new mode 100755
index fb4eaec18..e214790e2
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b.png
new file mode 100755
index 000000000..08d8ba1e1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b_s.png
new file mode 100755
index 000000000..9b860d1ee
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g.png
new file mode 100755
index 000000000..9ffbdfdd4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g_s.png
new file mode 100755
index 000000000..c22b11e89
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png
new file mode 100755
index 000000000..3fc49d398
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/photoload_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/photopause.png b/TMessagesProj/src/main/res/drawable-xhdpi/photopause.png
deleted file mode 100644
index 8c6463d64..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/photopause.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/phototime2.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/phototime2.9.png
new file mode 100755
index 000000000..8ccee4710
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/phototime2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/phototime2_b.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/phototime2_b.9.png
new file mode 100755
index 000000000..504d8397a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/phototime2_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_b.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_b.png
new file mode 100755
index 000000000..c2f1803c7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/play_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_b_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_b_s.png
new file mode 100755
index 000000000..9ab9ba848
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/play_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_big.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_big.png
index 77bccc78b..37409d865 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/play_big.png and b/TMessagesProj/src/main/res/drawable-xhdpi/play_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_g.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_g.png
new file mode 100755
index 000000000..6c442666b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/play_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_g_s.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_g_s.png
new file mode 100755
index 000000000..95b40bc0e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/play_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_w.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_w.png
deleted file mode 100755
index 77d1a292d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/play_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_w2.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_w2.png
deleted file mode 100755
index 580da8336..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/play_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_w2_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_w2_pressed.png
deleted file mode 100755
index 9bdc7f202..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/play_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/play_w_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/play_w_pressed.png
deleted file mode 100755
index 11b12a54c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/play_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png
old mode 100644
new mode 100755
index d590b0f66..91825e84f
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png
new file mode 100755
index 000000000..1f3374c2e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/playvideo_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/reply.png b/TMessagesProj/src/main/res/drawable-xhdpi/reply.png
index ee23fc6b6..c7226c4f5 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/reply.png and b/TMessagesProj/src/main/res/drawable-xhdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/share_arrow.png b/TMessagesProj/src/main/res/drawable-xhdpi/share_arrow.png
new file mode 100755
index 000000000..f77b129c4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/share_arrow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/share_round.png b/TMessagesProj/src/main/res/drawable-xhdpi/share_round.png
new file mode 100755
index 000000000..78cf5a523
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/share_round.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/shareblack.png b/TMessagesProj/src/main/res/drawable-xhdpi/shareblack.png
deleted file mode 100644
index 6f7d9fffb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/shareblack.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/shareblack_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/shareblack_pressed.png
deleted file mode 100644
index 2d555afca..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/shareblack_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/shareblue.png b/TMessagesProj/src/main/res/drawable-xhdpi/shareblue.png
deleted file mode 100644
index 5d249505c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/shareblue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/shareblue_pressed.png b/TMessagesProj/src/main/res/drawable-xhdpi/shareblue_pressed.png
deleted file mode 100644
index acdc51fbb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/shareblue_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/stickercounter.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/stickercounter.9.png
new file mode 100755
index 000000000..7f1f17fbd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/stickercounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/system.9.png
new file mode 100755
index 000000000..2d50ef794
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/system.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_black.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_black.9.png
deleted file mode 100644
index b9df0b89c..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/system_black.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png
deleted file mode 100755
index 68c398416..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_loader.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_loader.png
new file mode 100755
index 000000000..fe0a9e49d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/system_loader.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_loader1.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_loader1.png
deleted file mode 100755
index 37bef2be0..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/system_loader1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_loader2.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_loader2.png
deleted file mode 100755
index 5bb6c3b1b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/system_loader2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/video_actions.png b/TMessagesProj/src/main/res/drawable-xhdpi/video_actions.png
new file mode 100755
index 000000000..f692c3008
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/video_actions.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/abc_ic_menu_share_mtrl_alpha.png b/TMessagesProj/src/main/res/drawable-xxhdpi/abc_ic_menu_share_mtrl_alpha.png
new file mode 100644
index 000000000..a1866ba45
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/abc_ic_menu_share_mtrl_alpha.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png
deleted file mode 100755
index a592549b2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_blue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png
deleted file mode 100755
index fd4bada3d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/addcontact_green.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star.png b/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star.png
new file mode 100755
index 000000000..8724c05b1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star2.png
new file mode 100755
index 000000000..6dac9318e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/admin_star2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png
index fd4e0ce8e..0572bb47d 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png
index 292a0c3d5..edee8cc91 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/attach_video_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_file.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_file.png
new file mode 100755
index 000000000..3fdbe9907
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_file.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_lines.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_lines.png
new file mode 100755
index 000000000..e5d26151c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_lines.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_link.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_link.png
new file mode 100755
index 000000000..411dc89d8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_list.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_list.png
index a42a691ba..3391bb61a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_list.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_list.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_location.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_location.png
new file mode 100755
index 000000000..6c75f1deb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_location.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bot_music.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_music.png
new file mode 100755
index 000000000..16bf5bc9e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/bot_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/bottom_shadow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/bottom_shadow.png
index cf81b6c14..36ba70346 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/bottom_shadow.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/bottom_shadow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b.png
deleted file mode 100755
index 2fa1d0c12..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_pressed.png
deleted file mode 100755
index 8f3b4c08d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_s.png
deleted file mode 100755
index 908de523f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_big.png
index 87537b0ba..96a6c3d71 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_big.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g.png
deleted file mode 100755
index 34c23a830..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_pressed.png
deleted file mode 100755
index a8585f32d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_s.png
deleted file mode 100755
index 8aefeae63..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/cancel_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/circle_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/circle_big.png
index 40750ead3..8b0cd9fd1 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/circle_big.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/circle_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/contact_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/contact_blue.png
new file mode 100755
index 000000000..aa2f30e37
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/contact_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/contact_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/contact_green.png
new file mode 100755
index 000000000..1fb42bf40
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/contact_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_bl.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_bl.png
new file mode 100755
index 000000000..feb15efe0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_br.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_br.png
new file mode 100755
index 000000000..fa742b3b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tl.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tl.png
new file mode 100755
index 000000000..5db9f5ce6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tr.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tr.png
new file mode 100755
index 000000000..a2c058a0b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_in_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_bl.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_bl.png
new file mode 100755
index 000000000..64b85cc32
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_bl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_br.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_br.png
new file mode 100755
index 000000000..50ae092c0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_br.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tl.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tl.png
new file mode 100755
index 000000000..1e3f529ed
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tl.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tr.png b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tr.png
new file mode 100755
index 000000000..8b7f95fe8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/corner_out_tr.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png
index 3cfc6883e..f2f98a68e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png
old mode 100644
new mode 100755
index 5de08904f..1c07f6c9c
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge2.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge2.9.png
index 05816fe12..7facfe30e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge2.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/dialogs_badge2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue.png
old mode 100644
new mode 100755
index f8a4f5b75..ac033bc15
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue_s.png
index 38910b121..466b3cb3d 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue_s.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_blue_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_green.png b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_green.png
old mode 100644
new mode 100755
index e8bb7431b..33f1a5315
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/doc_green.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/doc_green.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_b.png
deleted file mode 100755
index 0199ccc17..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_pressed.png
deleted file mode 100755
index ba3e4dab4..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_s.png
deleted file mode 100755
index 8e8a25943..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_b_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_g.png
deleted file mode 100755
index edc1b88e9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_pressed.png
deleted file mode 100755
index 4a258462a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_s.png
deleted file mode 100755
index 900581fcb..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/download_g_s.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b.png
new file mode 100755
index 000000000..1c8598cd7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel.png
new file mode 100755
index 000000000..9d48270d9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel_s.png
new file mode 100755
index 000000000..5e323f926
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load.png
new file mode 100755
index 000000000..dc4dae1fb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load_s.png
new file mode 100755
index 000000000..044304d96
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_s.png
new file mode 100755
index 000000000..925351b02
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g.png
new file mode 100755
index 000000000..7dd85a3b5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel.png
new file mode 100755
index 000000000..1ccbe9d93
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel_s.png
new file mode 100755
index 000000000..de91f9158
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_cancel_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load.png
new file mode 100755
index 000000000..bcddac3bc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load_s.png
new file mode 100755
index 000000000..174947d79
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_load_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_s.png
new file mode 100755
index 000000000..8395b5ac8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/file_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png
index 65abfe39f..76ea18c93 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_m.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_m.png
index 6a353103a..598b8953a 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_m.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_m.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png
index 26d91f198..0904520c9 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/floating_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png
old mode 100644
new mode 100755
index 075a4f7f7..44c2b085a
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_new.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_new.png
index 4a5f91710..57e0563e3 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_new.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_new.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png
index d48a051a8..3b599b29f 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_kb.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_kb.png
old mode 100644
new mode 100755
index 98b58eef5..863d5e384
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_kb.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_kb.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send.png
index eec17c547..c64dbb21d 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_send.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/igvideo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/igvideo.png
deleted file mode 100644
index d13eab929..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/igvideo.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png
index b8633f749..ff3f14ae6 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/link.png b/TMessagesProj/src/main/res/drawable-xxhdpi/link.png
old mode 100644
new mode 100755
index 655dc9e9a..c3edde91b
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/link.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/link.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/load_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/load_big.png
index 3b1f44819..cbf60bc07 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/load_big.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/load_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/location2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/location2.png
new file mode 100644
index 000000000..01ea9f4dd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/location2.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/location_b.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/location_b.9.png
old mode 100644
new mode 100755
index 01ea9f4dd..ab744516b
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/location_b.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/location_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/location_g.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/location_g.9.png
old mode 100644
new mode 100755
index 7343d9636..09fc04cd9
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/location_g.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/location_g.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_pause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_pause.png
index 1fb43f08b..b3e388b96 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_pause.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_pause.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_play.png b/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_play.png
index ee163892d..e8a04810e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_play.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/miniplayer_play.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in.9.png
index 3db9979cf..54475d909 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo.9.png
index 7ca493f77..f1d14e0b5 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo_selected.9.png
index 350b66faf..2f3076fc2 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_selected.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_selected.9.png
index 09abd80eb..0502f0dd7 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_selected.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out.9.png
index b7aa02377..ee6f2df36 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo.9.png
index 02e3ad804..6498fa28c 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png
index 67713607b..8c8d11d0d 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_selected.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_selected.9.png
index 6ce8fda0e..64cf8e69d 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_selected.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/newmsg_divider.png b/TMessagesProj/src/main/res/drawable-xxhdpi/newmsg_divider.png
index 5b8d2eaf7..e9c1a24b7 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/newmsg_divider.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/newmsg_divider.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/notification.png b/TMessagesProj/src/main/res/drawable-xxhdpi/notification.png
index 6ed95b8fd..32de21b0b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/notification.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/notification.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_off.png b/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_off.png
index 64b6e2e83..3097e16f1 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_off.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_on.png b/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_on.png
index d7f1b935c..b468befd5 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_on.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/notify_members_on.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/passcode_logo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/passcode_logo.png
old mode 100644
new mode 100755
index af2428a20..adec246d1
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/passcode_logo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/passcode_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b.png
index fa34156e3..091b06c67 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_pressed.png
deleted file mode 100755
index 14417454f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_s.png
index dadb88073..3b056929b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_s.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g.png
index 58230127c..d2ed392ad 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_pressed.png
deleted file mode 100755
index 6afeea45e..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_s.png
index ae9b96dea..ce7328a18 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_s.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w.png
deleted file mode 100755
index 31bdd7380..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2.png
deleted file mode 100755
index d4be9ec78..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2_pressed.png
deleted file mode 100755
index 94ce677c2..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w_pressed.png
deleted file mode 100755
index 0f81862fe..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/pause_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/phone_activate.png b/TMessagesProj/src/main/res/drawable-xxhdpi/phone_activate.png
new file mode 100755
index 000000000..d422603db
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/phone_activate.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png
old mode 100644
new mode 100755
index 774066fe0..2a9105b14
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b.png
new file mode 100755
index 000000000..80d4d9032
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b_s.png
new file mode 100755
index 000000000..6d29a2681
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g.png
new file mode 100755
index 000000000..d42899e9c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g_s.png
new file mode 100755
index 000000000..bfa63bb48
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png
new file mode 100755
index 000000000..1477b2476
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photocancel_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png
old mode 100644
new mode 100755
index efc3a64d2..ad4cd9c65
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png
new file mode 100755
index 000000000..365f8f595
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photogif_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png
old mode 100644
new mode 100755
index b720d6d37..efae871de
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b.png
new file mode 100755
index 000000000..314b02410
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b_s.png
new file mode 100755
index 000000000..8b30d79ef
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g.png
new file mode 100755
index 000000000..5f85ecced
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g_s.png
new file mode 100755
index 000000000..fdd610942
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png
new file mode 100755
index 000000000..df021f024
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/photoload_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/photopause.png b/TMessagesProj/src/main/res/drawable-xxhdpi/photopause.png
deleted file mode 100644
index 62f9d3f8b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/photopause.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2.9.png
new file mode 100755
index 000000000..2f52ccc15
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2_b.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2_b.9.png
new file mode 100755
index 000000000..6ce439aa2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/phototime2_b.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_b.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_b.png
new file mode 100755
index 000000000..99e2c15c3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/play_b.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_b_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_b_s.png
new file mode 100755
index 000000000..c5c551054
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/play_b_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_big.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_big.png
index 12ae35019..b04acefb6 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/play_big.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/play_big.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_g.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_g.png
new file mode 100755
index 000000000..d4461d657
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/play_g.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_g_s.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_g_s.png
new file mode 100755
index 000000000..d471364b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/play_g_s.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_w.png
deleted file mode 100755
index be2cb867f..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2.png
deleted file mode 100755
index 263f27db6..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2_pressed.png
deleted file mode 100755
index 96e0e1276..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w2_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/play_w_pressed.png
deleted file mode 100755
index 48aa6b658..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/play_w_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png
old mode 100644
new mode 100755
index c32d8f270..e056d93f8
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png
new file mode 100755
index 000000000..6d98bdf7f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/playvideo_pressed.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png b/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png
index d08e72b82..d7b1f3354 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/share_arrow.png b/TMessagesProj/src/main/res/drawable-xxhdpi/share_arrow.png
new file mode 100755
index 000000000..4360f9638
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/share_arrow.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/share_round.png b/TMessagesProj/src/main/res/drawable-xxhdpi/share_round.png
new file mode 100755
index 000000000..64fe260ba
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/share_round.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack.png b/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack.png
deleted file mode 100644
index 2331b1ff1..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack_pressed.png
deleted file mode 100644
index 960261dd7..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblack_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue.png
deleted file mode 100644
index 217a889ec..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue_pressed.png b/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue_pressed.png
deleted file mode 100644
index 8bba0c980..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/shareblue_pressed.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/stickercounter.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/stickercounter.9.png
new file mode 100755
index 000000000..a9ff07a7f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/stickercounter.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system.9.png
new file mode 100755
index 000000000..f4b4f35ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/system.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_black.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_black.9.png
deleted file mode 100644
index 0aebf3cee..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/system_black.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png
deleted file mode 100755
index 1321d3c15..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader.png
new file mode 100755
index 000000000..d2c6ec3a3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader1.png
deleted file mode 100755
index 26c828f24..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader1.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader2.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader2.png
deleted file mode 100755
index dcf5caf47..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/system_loader2.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/video_actions.png b/TMessagesProj/src/main/res/drawable-xxhdpi/video_actions.png
new file mode 100755
index 000000000..bfc2dbadd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/video_actions.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png
old mode 100644
new mode 100755
index e3bcba53c..cafa8d9d4
Binary files a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector.xml b/TMessagesProj/src/main/res/drawable/bar_selector.xml
deleted file mode 100644
index 961d245f2..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff45658d" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff45658d" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff45658d" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml b/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml
deleted file mode 100644
index f311824b8..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_audio.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml b/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
deleted file mode 100644
index 83e879474..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_blue.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3f76a8" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3f76a8" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3f76a8" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml b/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
deleted file mode 100644
index e9fb9cc20..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_cyan.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff39849d" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff39849d" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff39849d" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_green.xml b/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
deleted file mode 100644
index 2e88b9f42..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_green.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff48953d" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff48953d" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff48953d" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_grey.xml b/TMessagesProj/src/main/res/drawable/bar_selector_grey.xml
deleted file mode 100644
index f311824b8..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_grey.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#0f000000" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml b/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
deleted file mode 100644
index f3319e321..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_mode.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <inset android:insetBottom="2dp">
-            <shape android:shape="rectangle">
-                <solid android:color="#fff0f0f0" />
-            </shape>
-        </inset>
-    </item>
-    <item android:state_focused="true">
-        <inset android:insetBottom="2dp">
-            <shape android:shape="rectangle">
-                <solid android:color="#fff0f0f0" />
-            </shape>
-        </inset>
-    </item>
-    <item android:state_selected="true">
-        <inset android:insetBottom="2dp">
-            <shape android:shape="rectangle">
-                <solid android:color="#fff0f0f0" />
-            </shape>
-        </inset>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml b/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
deleted file mode 100644
index e1880b1e0..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_orange.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffe67429" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffe67429" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffe67429" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml b/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml
deleted file mode 100644
index 658f21444..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_picker.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<!--
-  ~ This is the source code of Telegram for Android v. 3.x.x.
-  ~ It is licensed under GNU GPL v. 2 or later.
-  ~ You should have received a copy of the license in this archive (see LICENSE).
-  ~
-  ~ Copyright Nikolai Kudashov, 2013-2016.
-  -->
-
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3d3d3d" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3d3d3d" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff3d3d3d" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml b/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
deleted file mode 100644
index 9d81d09dc..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_pink.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffd44e7b" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffd44e7b" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffd44e7b" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_red.xml b/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
deleted file mode 100644
index c00e47a4e..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_red.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffbc4b41" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffbc4b41" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffbc4b41" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml b/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
deleted file mode 100644
index 405397c10..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_violet.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff735fbe" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff735fbe" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ff735fbe" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml b/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
deleted file mode 100644
index 98da9c127..000000000
--- a/TMessagesProj/src/main/res/drawable/bar_selector_yellow.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<selector
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffef9f09" />
-        </shape>
-    </item>
-    <item android:state_focused="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffef9f09" />
-        </shape>
-    </item>
-    <item android:state_selected="true">
-        <shape android:shape="rectangle">
-            <solid android:color="#ffef9f09" />
-        </shape>
-    </item>
-    <item android:drawable="@drawable/transparent" />
-</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable/field_carret.xml b/TMessagesProj/src/main/res/drawable/field_carret.xml
new file mode 100644
index 000000000..a19003262
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/field_carret.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <solid android:color="#ff54a1db" />
+    <size android:width="2dp" android:height="6dp" />
+</shape>
diff --git a/TMessagesProj/src/main/res/drawable/search_carret.xml b/TMessagesProj/src/main/res/drawable/search_carret.xml
index a07ec56d7..3c44cd870 100644
--- a/TMessagesProj/src/main/res/drawable/search_carret.xml
+++ b/TMessagesProj/src/main/res/drawable/search_carret.xml
@@ -2,7 +2,5 @@
 
 <shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
     <solid android:color="#ffffffff" />
-    <size
-        android:width="1dp"
-        android:height="6dp" />
+    <size android:width="1dp" android:height="6dp" />
 </shape>
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
deleted file mode 100644
index 8f1bb60c8..000000000
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--Translation by Khalid Alaraifi-->
-
-<resources>
-    <string name="AppName">تيليجرام</string>
-    <string name="AppNameBeta">نسخة تيليجرام التجريبية</string>
-    <string name="LanguageName">العربية</string>
-    <string name="LanguageNameInEnglish">Arabic</string>
-    <string name="LanguageCode">ar</string>
-    <!--signin view-->
-    <string name="YourPhone">رقم هاتفك المحمول</string>
-    <string name="StartText">يرجى التحقق من صحة رمز بلدك وإدخال رقم هاتفك المحمول.</string>
-    <string name="ChooseCountry">اختر دولة</string>
-    <string name="WrongCountry">رمز البلد خاطئ</string>
-    <!--code enter view-->
-    <string name="YourCode">رمز التفعيل</string>
-    <string name="SentSmsCode">تم إرسال رسالة قصيرة تحتوي على رمز التفعيل الخاص بك</string>
-    <string name="CallText">سنتصل بك خلال %1$d:%2$02d</string>
-    <string name="Calling">جاري الاتصال بك ...</string>
-    <string name="Code">رمز التفعيل</string>
-    <string name="WrongNumber">الرقم خاطئ؟</string>
-    <string name="DidNotGetTheCode">هل استقبلت الرمز؟</string>
-    <!--signup view-->
-    <string name="YourName">اسمك</string>
-    <string name="RegisterText">اختر الاسم الأول واسم العائلة</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">الاسم الأول</string>
-    <string name="LastName">اسم العائلة</string>
-    <string name="CancelRegistration">إلغاء التسجيل</string>
-    <!--chats view-->
-    <string name="Settings">الإعدادات</string>
-    <string name="Contacts">جهات الاتصال</string>
-    <string name="NewGroup">مجموعة جديدة</string>
-    <string name="Yesterday">أمس</string>
-    <string name="NoResult">لا توجد نتائج</string>
-    <string name="NoChats">...لا توجد محادثات بعد</string>
-    <string name="NoChatsHelp">إبدأ المراسلة بالضغط على\nأيقونة النقاط في أعلى يمين الشاشة\nأو اذهب لقسم جهات الاتصال.</string>
-    <string name="WaitingForNetwork">في إنتظار الشبكة...</string>
-    <string name="Connecting">جاري الاتصال...</string>
-    <string name="Updating">جاري التحديث...</string>
-    <string name="NewSecretChat">محادثة سرية جديدة</string>
-    <string name="AwaitingEncryption">في إنتظار اتصال %s … </string>
-    <string name="EncryptionRejected">تم إلغاء المحادثة السرية</string>
-    <string name="EncryptionProcessing">جاري إرسال المفاتيح المشفرة...</string>
-    <string name="EncryptedChatStartedOutgoing">%s قام بالدخول للمحادثة السرية.</string>
-    <string name="EncryptedChatStartedIncoming">لقد قمت بالدخول للمحادثة السرية.</string>
-    <string name="ClearHistory">مسح سجل المحادثات</string>
-    <string name="ClearHistoryCache">حذف من الذاكرة المخبئية</string>
-    <string name="DeleteChat">حذف وخروج</string>
-    <string name="DeleteChatUser">حذف المحادثة</string>
-    <string name="HiddenName">حساب محذوف</string>
-    <string name="SelectChat">اختر محادثة</string>
-    <string name="PhotoTip">اضغط بإستمرار على المستخدم العرض</string>
-    <string name="CompatibilityChat">%1$s يستخدم إصدار قديم من تيليجرام، لذلك، الصور السرية ستظهر في وضع الموافقة.\n\nعندما يقوم %2$s بتحديث تيليجرام، الصور التي بها عداد دقيقة أو أقل ستعمل بطريقة \"الاستمرار بالضغط للإستعراض\"، وسيتم إخبارك عندما يلتقط المستقبل صورة من شاشته.</string>
-    <string name="SearchMessages">الرسائل</string>
-    <string name="Search">بحث</string>
-    <string name="MuteNotifications">كتم الإشعارات</string>
-    <string name="MuteFor">ضعه على الصامت لمدة %1$s</string>
-    <string name="UnmuteNotifications">إزالة كتم الصوت</string>
-    <string name="WillUnmuteIn">خلال %1$s</string>
-    <string name="MuteDisable">تعطيل</string>
-    <string name="Hashtags">الأوسمة</string>
-    <string name="Recent">حديث</string>
-    <string name="LinkPreview">معاينة الرابط</string>
-    <!--channels-->
-    <string name="SetAsAdmin">ترقية ليكون مشرف</string>
-    <string name="DescriptionInfoMega">يمكنك كتابة وصف اختياري لمجموعتك.</string>
-    <string name="LeaveMega">مغادرة المجموعة</string>
-    <string name="DeleteMega">حذف المجموعة</string>
-    <string name="LeaveMegaMenu">مغادرة المجموعة</string>
-    <string name="DeleteMegaMenu">حذف المجموعة</string>
-    <string name="MegaDeleteInfo">ستخسر كافة الرسائل في هذه المجموعة.</string>
-    <string name="MegaAdminsInfo">يمكنك إضافة إداريّين لمساعدتك في إدارة المجموعة. اضغط باستمرار لحذف الإداريين.</string>
-    <string name="MegaDeleteAlert">لحظة! حذف هذه المجموعة سيزيل كافة الأعضاء والرسائل سيتم حذفها. هل أنت متأكد من رغبتك في حذف المجموعة؟</string>
-    <string name="ActionCreateMega">تم إنشاء مجموعة</string>
-    <string name="MegaAddedBy">un1 قام بإضافتك لهذه المجموعة</string>
-    <string name="MegaLeaveAlert">هل أنت متأكد من أنك تريد الخروج من المجموعة؟</string>
-    <string name="GroupUserCantAdd">المعذرة، لا يمكنك إضافة هذا المستخدم للمجموعات.</string>
-    <string name="GroupUserAddLimit">المعذرة، المجموعة ممتلئة.</string>
-    <string name="GroupUserLeftError">المعذرة, هذا المستخدم قرر مغادرة المجموعة, لا يمكنك دعوته مرة أخرى للمجموعة.</string>
-    <string name="GroupUserCantAdmin">المعذرة، يوجد الكثير من المشرفين في هذه المجموعة.</string>
-    <string name="GroupUserCantBot">المعذرة، يوجد الكثير من حسابات البوت في هذه المجموعة.</string>
-    <string name="ActionMigrateFromGroup">تم ترقية هذه المجموعة لتصبح مجموعة خارقة</string>
-    <string name="ActionMigrateFromGroupNotify">تم ترقية المجموعة %1$s لتصبح مجموعة خارقة</string>
-    <string name="NoBlockedGroup">أعضاء القائمة السوداء هم أعضاء تم حذفهم من المجموعة ولا يمكنهم العودة لها إلى بدعوة من المشرف. روابط الدعوة لن تمكنهم من العودة للمجموعة.</string>
-    <string name="NewChannel">قناة جديدة</string>
-    <string name="EnterChannelName">اسم القناة</string>
-    <string name="Comments">التعليقات</string>
-    <string name="CommentsInfo">إذا قمت بتفعيل التعليقات، الأعضاء سيتمكنون من مناقشة ما تنشره في قناتك.</string>
-    <string name="AddMutual">إضافة جهات اتصال لقناتك</string>
-    <string name="ChannelUsernameHelp">يستطيع الناس مشاركة هذا الرابط مع غيرهم ويمكنهم إيجاد قناتك من خلال البحث في تيليجرام.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">الرابط</string>
-    <string name="ChannelPrivateLinkHelp">يستطيع الناس الدخول إلى قناتك فقط من خلال الرابط أدناه. يمكنك تعطيل هذا الرابط في أي وقت.</string>
-    <string name="DescriptionPlaceholder">الوصف</string>
-    <string name="DescriptionInfo">يمكنك كتابة وصف اختياري لقناتك.</string>
-    <string name="ChannelPublic">قناة عامة</string>
-    <string name="ChannelPublicInfo">القنوات العامة يمكن إيجادها من الخلال البحث، أي شخص يستطيع الدخول إليها.</string>
-    <string name="ChannelPrivate">قناة خاصة</string>
-    <string name="ChannelPrivateInfo">القنوات الخاصة يمكن الدخول إليها فقط عن طريق رابط الدعوة.</string>
-    <string name="ChannelLinkTitle">الرابط</string>
-    <string name="ChannelInviteLinkTitle">رابط دعوة</string>
-    <string name="ChannelAddMembers">إضافة مشارك</string>
-    <string name="LeaveChannel">غادر القناة</string>
-    <string name="LeaveChannelMenu">غادر القناة</string>
-    <string name="ChannelSettings">الإعدادات</string>
-    <string name="ChannelJoin">اشترك</string>
-    <string name="OpenChannelProfile">معلومات القناة</string>
-    <string name="ChannelBroadcast">رسالة جماعية</string>
-    <string name="ChannelComment">تعليق</string>
-    <string name="ShowDiscussion">إظهار التعليقات</string>
-    <string name="ChannelAlertTitle">ما هي القنوات؟</string>
-    <string name="ChannelAlertText">القنوات هي أداة جديدة للرسائل الجماعية لمجموعة كبيرة من المستقبلين.</string>
-    <string name="ChannelAlertCreate">أنشاء قناة</string>
-    <string name="LinkInUse">المعذرة، هذا الاسم تم اختياره مسبقًا.</string>
-    <string name="LinkInvalid">المعذرة، الاسم غير مقبول.</string>
-    <string name="LinkInvalidShort">اسم القناة يجب أن يتكوّن من ٥ حروف على الأقل.</string>
-    <string name="LinkInvalidLong">الاسم يجب ألا يتخطى ٣٢ حرف كحد أقصى.</string>
-    <string name="LinkInvalidStartNumber">أسماء القنوات لا يمكن أن تبدأ برقم.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">جاري مراجعة الاسم...</string>
-    <string name="LinkAvailable">%1$s متاح.</string>
-    <string name="ChannelMembers">أعضاء</string>
-    <string name="ChannelBlockedUsers">جهات الاتصال المحظورة</string>
-    <string name="ChannelAdministrators">الإداريون</string>
-    <string name="ChannelDelete">حذف القناة</string>
-    <string name="ChannelDeleteMenu">حذف القناة</string>
-    <string name="ChannelDeleteAlert">لحظة! حذف هذه القناة سيزيل كافة الأعضاء والرسائل سيتم حذفها. هل أنت متأكد من رغبتك في حذف القناة؟</string>
-    <string name="ChannelLeaveAlert">هل أنت متأكد من رغبتك في مغادرة القناة؟</string>
-    <string name="ChannelDeleteInfo">ستخسر كافة الرسائل في هذه القناة.</string>
-    <string name="ChannelEdit">تعديل</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">يرجى ملاحظة أنه في حال اخترت رابط عام لقناتك، سيستطيع أي شخص إيجادها من خلال البحث والدخول إليها.\n\nلا تقم بإنشاء هذا الرابط إذا رغبت في أن تستمر قناتك خاصة.</string>
-    <string name="ChannelPublicEmptyUsername">فضلًا اختر رابط لقناتك العامة ليتمكن الناس من إيجادها من خلال البحث ومشاركتها مع غيرهم.\n\nإلى لم ترغب بذلك، يفضّل إنشاء قناة خاصة بدلًا من العامة.</string>
-    <string name="ActionCreateChannel">تم إنشاء القناة</string>
-    <string name="ActionChannelChangedPhoto">تم تغيير صورة القناة</string>
-    <string name="ActionChannelRemovedPhoto">تم حذف صورة القناة</string>
-    <string name="ActionChannelChangedTitle">تم تغيير اسم القناة إلى un2</string>
-    <string name="ChannelPublicLimitReached">المعذرة، قمت بإنشاء قنوات عامة كثيرة. يمكنك إنشاء قناة خاصة أو حذف أحد القنوات العامة أولًا.</string>
-    <string name="ChannelModerator">المراقب</string>
-    <string name="ChannelCreator">المنشئ</string>
-    <string name="ChannelEditor">إداري</string>
-    <string name="ChannelMute">الصامت</string>
-    <string name="ChannelUnmute">إلغاء الصامت</string>
-    <string name="ChannelAddAdmin">إضافة إداري</string>
-    <string name="ChannelInviteViaLink">استخدم رابط دعوة</string>
-    <string name="ChannelAddUserAdminAlert">هل أنت متأكد من رغبتك في تعيين %1$s كإداري؟</string>
-    <string name="ChannelRemoveUserAdmin">حذف</string>
-    <string name="ChannelMembersInfo">فقط الإداريّون يمكنهم مشاهدة هذه القائمة.</string>
-    <string name="ChannelAdminNotParticipant">هذا المستخدم لم يقم بالدخول إلى القناة بعد. فضلًا، هل ترغب في دعوتهم؟</string>
-    <string name="ChannelLinkInfo">أي شخص يمتلك تيليجرام على جهازه سيمكنه الدخول لقناتك باستخدام هذا الرابط.</string>
-    <string name="ChannelAdminsInfo">يمكنك إضافة إداريّون لمساعدتك في إدارة القناة. اضغط باستمرار لحذف الإداريين.</string>
-    <string name="ChannelJoinTo">هل ترغب في الدخول لقناة \'%1$s\'؟</string>
-    <string name="ChannelCantOpenPrivate">المعذرة، هذه المحادثة لم تعد متاحة.</string>
-    <string name="ChannelAddTo">هل ترغب بإضافة %1$s للقناة؟</string>
-    <string name="ChannelUserLeftError">المعذرة، هذا المستخدم قرر مغادرة القناة, لا يمكنك دعوته مرة أخرى للقناة.</string>
-    <string name="ChannelUserCantAdd">المعذرة، لا يمكنك إضافة هذا المستخدم للقنوات.</string>
-    <string name="ChannelUserCantAdmin">المعذرة، يوجد الكثير من الإداريين في هذه القناة.</string>
-    <string name="ChannelUserCantBot">المعذرة، يوجد الكثير من حسابات البوت في هذه القناة.</string>
-    <string name="ChannelUserAddLimit">المعذرة، يمكنك إضافة أول ٢٠٠ عضو للقناة فقط. يمكن لعدد غير محدود من الأعضاء الدخول للقناة عن طريق رابط القناة.</string>
-    <string name="ChannelAddedBy">un1 قام بإضافتك لهذه القناة</string>
-    <string name="ChannelJoined">لقد قمت بالدخول للقناة.</string>
-    <string name="ChannelRemoveUser">حذف من القناة</string>
-    <string name="ChannelCantSendMessage">المعذرة، لا يمكنك إرسال رسائل لهذه القناة.</string>
-    <string name="ChannelAddedByNotification">%1$s قام بإضافتك لقناة %2$s </string>
-    <string name="ChannelPhotoEditNotification">تم تحديث صورة القناة %1$s</string>
-    <string name="ChannelMessageGroupNoText">%1$s  قام بإرسال رسالة للقناة %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s  قام بإرسال صورة للقناة %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s  قام بإرسال مقطع مرئي للقناة %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s قام بمشاركة جهة اتصال للقناة %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s  قام بإرسال مكان للقناة %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s  قام بإرسال ملف للقناة %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s أرسل صورة متحركة للقناة %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s أرسل رسالة صوتية للقناة %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s  قام بإرسال ملصق للقناة %2$s</string>
-    <string name="ChannelMessageNoText">%1$s أرسل رسالة</string>
-    <string name="ChannelMessagePhoto">%1$s أرسل صورة</string>
-    <string name="ChannelMessageVideo">%1$s أرسل مقطع مرئي</string>
-    <string name="ChannelMessageContact">%1$s أرسل جهة اتصال</string>
-    <string name="ChannelMessageMap">%1$s قام بإرسال موقع</string>
-    <string name="ChannelMessageDocument">%1$s أرسل ملف</string>
-    <string name="ChannelMessageGIF">%1$s قام بنشر صورة متحركة</string>
-    <string name="ChannelMessageAudio">%1$s أرسل رسالة صوتية</string>
-    <string name="ChannelMessageSticker">%1$s أرسل ملصق</string>
-    <string name="WhoCanAddMembers">من يستطيع إضافة أعضاء؟</string>
-    <string name="WhoCanAddMembersAllMembers">جميع الأعضاء</string>
-    <string name="WhoCanAddMembersAdmins">فقط المشرفون</string>
-    <string name="ChannelNotifyMembersInfoOn">سيتم إشعار الأعضاء عند إرسال الرسائل.</string>
-    <string name="ChannelNotifyMembersInfoOff">لن يتم إشعار الأعضاء عند إرسال الرسائل.</string>
-    <string name="ChannelSignMessages">وقّع الرسائل</string>
-    <string name="ChannelSignMessagesInfo">قم بإضافة أسماء المشرفين للرسائل التي يرسلونها.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">رسالة جماعية جديدة</string>
-    <string name="EnterListName">أدخل اسم القائمة</string>
-    <string name="YouCreatedBroadcastList">أنت قمت بإنشاء قائمة رسالة جماعية</string>
-    <string name="AddRecipient">إضافة مستلم</string>
-    <string name="KickFromBroadcast">إزالة من قائمة الرسالة الجماعية</string>
-    <!--audio view-->
-    <string name="NoAudio">فضلًا قم بإضافة ملفات لمكتبتك الموسيقية على جهازك لتتمكن من مشاهدتها هنا.</string>
-    <string name="AttachMusic">موسيقى</string>
-    <string name="AudioUnknownArtist">الفنان غير معروف</string>
-    <string name="AudioUnknownTitle">العنوان غير معروف</string>
-    <!--documents view-->
-    <string name="SelectFile">اختر ملف</string>
-    <string name="FreeOfTotal">متاح %1$s من %2$s</string>
-    <string name="UnknownError">حدث خطأ غير معروف</string>
-    <string name="AccessError">خطأ في الوصول</string>
-    <string name="NoFiles">لا يوجد ملفات بعد...</string>
-    <string name="FileUploadLimit">حجم الملف لا يمكن أن يكون أكبر من %1$s</string>
-    <string name="NotMounted">الذاكرة غير مثبتة</string>
-    <string name="UsbActive">نقل USB مفعل</string>
-    <string name="InternalStorage">الذاكرة الداخلية</string>
-    <string name="ExternalStorage">الذاكرة الخارجية</string>
-    <string name="SystemRoot">جذر النظام</string>
-    <string name="SdCard">بطاقة الذاكرة</string>
-    <string name="Folder">مجلد</string>
-    <string name="GalleryInfo">أرسل الصورة بدون ضغطها</string>
-    <!--chat view-->
-    <string name="Invisible">مخفي</string>
-    <string name="Typing">جاري الكتابة… </string>
-    <string name="IsTyping">يكتب… </string>
-    <string name="AreTyping">يكتبون… </string>
-    <string name="IsRecordingAudio">%1$s يقوم بتسجيل رسالة صوتية...</string>
-    <string name="IsSendingPhoto">%1$s يقوم بإرسال صورة...</string>
-    <string name="IsSendingVideo">%1$s يقوم بإرسال مقطع مرئي...</string>
-    <string name="IsSendingFile">%1$s يقوم بإرسال ملف...</string>
-    <string name="RecordingAudio">جاري تسجيل الرسالة الصوتية...</string>
-    <string name="SendingPhoto">جاري إرسال الصورة...</string>
-    <string name="SendingVideoStatus">جاري إرسال المقطع المرئي...</string>
-    <string name="SendingFile">جاري إرسال الملف...</string>
-    <string name="GotAQuestion">هل يوجد لديك سؤال\nحول تيليجرام؟</string>
-    <string name="ChatTakePhoto">التقط صورة</string>
-    <string name="ChatGallery">صورة</string>
-    <string name="ChatLocation"> موقع</string>
-    <string name="ChatVideo">مقطع مرئي</string>
-    <string name="ChatDocument">ملف</string>
-    <string name="ChatCamera">الكاميرا</string>
-    <string name="NoMessages">...لا توجد رسائل بعد</string>
-    <string name="ForwardedMessage">الرسالة المعاد توجيهها</string>
-    <string name="From">من</string>
-    <string name="NoRecent">لا توجد رسائل أحدث</string>
-    <string name="Message">الرسالة</string>
-    <string name="TypeMessage">الرسالة</string>
-    <string name="ShareMyContactInfo">قم بمشاركة جهة الاتصال الخاصة بي</string>
-    <string name="AddToContacts">أضف لجهات الاتصال</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s قام بدعوتك لمحادثة سرية</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">لقد قمت بدعوة %s لمحادثة سرية.</string>
-    <string name="EncryptedDescriptionTitle">المحادثات السرية:</string>
-    <string name="EncryptedDescription1">استخدم التشفير من البداية للنهاية</string>
-    <string name="EncryptedDescription2">لا تترك أثرًا في خوادمنا</string>
-    <string name="EncryptedDescription3">تمتلك عداد للتدمير الذاتي</string>
-    <string name="EncryptedDescription4">لا تسمح بتحويل الرسائل</string>
-    <string name="YouWereKicked">لقد تم إخراجك من هذه المجموعة</string>
-    <string name="YouLeft">لقد قمت بمغادرة المجموعة</string>
-    <string name="DeleteThisGroup">حذف هذه المجموعة</string>
-    <string name="DeleteThisChat">حذف هذه الدردشة</string>
-    <string name="SlideToCancel">قم بالسحب للإلغاء</string>
-    <string name="SaveToDownloads">حفظ في الجهاز</string>
-    <string name="SaveToGIFs">حفظ في الصور المتحركة</string>
-    <string name="DeleteGif">هل ترغب بحذف الصورة المتحركة؟</string>
-    <string name="SaveToMusic">احفظ في الموسيقى</string>
-    <string name="ShareFile">مشاركة</string>
-    <string name="ApplyLocalizationFile">تطبيق ملف التعريب</string>
-    <string name="UnsupportedAttachment">المرفق غير مدعوم</string>
-    <string name="SetTimer">عداد التدمير الذاتي</string>
-    <string name="ServiceNotifications">إشعارات الخدمة</string>
-    <string name="GettingLinkInfo">جاري جلب معلومات الرابط...</string>
-    <string name="OpenInBrowser">فتح في المتصفح</string>
-    <string name="CopyUrl">انسخ الرابط</string>
-    <string name="SendItems">أرسل %1$s</string>
-    <string name="OpenUrlAlert">هل ترغب في فتح الرابط باستخدام %1$s ؟</string>
-    <string name="ReportSpam">الإبلاغ عن الرسائل الغير مرغوب فيها</string>
-    <string name="AddContactChat">إضافة جهة اتصال</string>
-    <string name="ReportSpamAlert">هل أنت متأكد من رغبتك في الإبلاغ عن هذا المستخدم كغير مرغوب به؟</string>
-    <string name="ReportSpamAlertGroup">هل أنت متأكد من رغبتك في الإبلاغ عن هذه المجموعة كغير مرغوب بها؟</string>
-    <string name="NobodyLikesSpam1">المعذرة، يمكنك فقط إرسال رسائل لمن يمتلك رقمك وتمتلك رقمه في الوقت الحالي.</string>
-    <string name="NobodyLikesSpam2">المعذرة، يمكنك فقط إضافة من يمتلك رقمك وتمتلك رقمه للمجموعة في الوقت الحالي.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/can-39t-send-messages-to-non-contacts</string>
-    <string name="MoreInfo">ملعومات إضافية</string>
-    <string name="ShareSendTo">أرسل إلى...</string>
-    <string name="TapHereGifs">اضغط هنا للوصول للصور المتحركة المحفوظة</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s قام بتعيين عداد التدمير الذاتي إلى to %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">لقد قمت بتعيين التدمير الذاتي إلى %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s قام بإيقاف عداد التدمير الذاتي</string>
-    <string name="MessageLifetimeYouRemoved">لقد قمت بتعطيل عداد التدمير الذاتي</string>
-    <string name="YouHaveNewMessage">لديك رسالة جديدة</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s قام بإرسال رسالة لك</string>
-    <string name="NotificationMessagePhoto">%1$s قام بإرسال صورة لك</string>
-    <string name="NotificationMessageVideo">%1$s قام بإرسال مقطع مرئي لك</string>
-    <string name="NotificationMessageContact">%1$s قام بإرسال جهة اتصال لك</string>
-    <string name="NotificationMessageMap">%1$s قام بإرسال موقع لك</string>
-    <string name="NotificationMessageDocument">%1$s قام بإرسال ملف لك</string>
-    <string name="NotificationMessageGif">%1$s أرسل لك صورة متحركة</string>
-    <string name="NotificationMessageAudio">%1$s قام بإرسال رسالة صوتية</string>
-    <string name="NotificationMessageSticker">%1$s قام بإرسال ملصق</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s  قام بإرسال رسالة للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s قام بإرسال صورة للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s قام بإرسال مقطع مرئي للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s قام بإرسال جهة اتصال للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s قام بإرسال موقع للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s قام بإرسال ملف للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s أرسل صورة متحركة للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s أرسل رسالة صوتية للمجموعة %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s قام بإرسال ملصق للمجموعة %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s قام بدعوتك للمجموعة %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s قام بتعديل اسم المجموعة %2$s</string>
-    <string name="NotificationEditedGroupPhoto">%1$s قام بتغيير صورة المجموعة %2$s</string>
-    <string name="NotificationGroupAddMember">%1$s قام بدعوة %3$s للمجموعة %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s عاد إلى المجموعة %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s قام بإخراج %3$s من المجموعة %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s قام بإخراجك من المجموعة %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s قام بمغادرة المجموعة %2$s</string>
-    <string name="NotificationContactJoined">%1$s قام بالتسجيل في تيليجرام!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nتم تسجيل الدخول لحسابك من جهاز جديد يوم %2$s\n\nالجهاز: %3$s\nالموقع: %4$s\n\nإذا لم يكن أنت من سجل الدخول، يمكنك الذهاب للإعدادات ثم تسجيل الخروج من كافة الأجهزة الأخرى. كما يمكنك تفعيل التحقق بخطوتين إذا رغبت بذلك عن طريق إعدادات الخصوصية.\n\nشكرًا,\nفريق عمل تيليجرام</string>
-    <string name="NotificationContactNewPhoto">%1$s قام بتغيير صورته الشخصية</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s قام بالدخول للمجموعة %2$s باستخدام رابط الدعوة</string>
-    <string name="Reply">الرد</string>
-    <string name="ReplyToGroup">الرد على %1$s</string>
-    <string name="ReplyToUser">الرد على %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">اختر جهة اتصال</string>
-    <string name="NoContacts">لا توجد جهات اتصال بعد</string>
-    <string name="InviteText">https://telegram.org/dl مرحبا! هيا نستخدم تيليجرام: </string>
-    <string name="TodayAt">في</string>
-    <string name="YesterdayAt">أمس الساعة</string>
-    <string name="Online">متصل</string>
-    <string name="LastSeen">آخر ظهور</string>
-    <string name="LastSeenDate">آخر ظهور</string>
-    <string name="LastSeenNow">آخر ظهور قبل قليل</string>
-    <string name="InviteFriends">قم بدعوة صديق</string>
-    <string name="GlobalSearch">بحث شامل</string>
-    <string name="Lately">آخر ظهور كان قريب</string>
-    <string name="WithinAWeek">آخر ظهور خلال أسبوع</string>
-    <string name="WithinAMonth">آخر ظهور خلال شهر</string>
-    <string name="ALongTimeAgo">آخر ظهور خلال فترة طويلة</string>
-    <string name="NewMessageTitle">رسالة جديدة</string>
-    <!--group create view-->
-    <string name="SendMessageTo">إرسال الرسالة إلى...</string>
-    <string name="SoftUserLimitAlert">ستتمكن من إضافة أعضاء أكثر إذا انتهيت من إنشاء المجموعة وقمت بتحويلها إلى مجموعة خارقة.</string>
-    <string name="EnterGroupNamePlaceholder">أدخل اسم للمجموعة</string>
-    <string name="GroupName">اسم المجموعة</string>
-    <string name="MembersCount">%1$d/%2$d عضو</string>
-    <string name="JoinToGroup">هل ترغب في الدخول للمحادثة \'%1$s\'؟</string>
-    <string name="JoinToGroupErrorFull">المعذرة، هذه المجموعة ممتلئة.</string>
-    <string name="JoinToGroupErrorNotExist">المعذرة، هذه المحادثة غير موجودة.</string>
-    <string name="LinkCopied">تم نسخ الرابط إلى الحافظة</string>
-    <string name="InviteToGroupByLink">قم بدعوة للمجموعة باستخدام رابط</string>
-    <string name="InviteLink">رابط دعوة</string>
-    <string name="RevokeAlert">هل أنت متأكد من رغبتك في إلغاء الرابط؟ اذا قمت بذلك، لن يستطيع أحد الدخول باستخدامه.</string>
-    <string name="RevokeAlertNewLink">رابط الدعوة السابق لا يعمل الآن. سيتم إنشاء رابط جديد.</string>
-    <string name="RevokeButton">إلغاء الرابط</string>
-    <string name="RevokeLink">إلغاء الرابط</string>
-    <string name="CopyLink">نسخ الرابط</string>
-    <string name="ShareLink">شارك الرابط</string>
-    <string name="LinkInfo">أي شخص يمتلك تيليجرام على جهازه سيسطيع الدخول لمجموعتك باستخدام الرابط التالي.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">مشرفو المحادثة</string>
-    <string name="SetAdminsAll">جميع الأعضاء مشرفين</string>
-    <string name="SetAdminsAllInfo">جميع أعضاء القناة يستطيعون إضافة وحذف الأعضاء، والتعديل على اسم وصورة المجموعة.</string>
-    <string name="SetAdminsNotAllInfo">فقط مشرفو القناة يستطيعون حذف الأعضاء، والتعديل على اسم وصورة المجموعة.</string>
-    <!--group info view-->
-    <string name="SharedMedia">عدد الوسائط المشتركة</string>
-    <string name="SETTINGS">الإعدادات</string>
-    <string name="AddMember">إضافة مشارك</string>
-    <string name="SetAdmins">تعيين كمشرف</string>
-    <string name="DeleteAndExit">مغادرة المجموعة وحذفها</string>
-    <string name="Notifications">الإشعارات</string>
-    <string name="KickFromGroup">إخراج من المجموعة</string>
-    <string name="ConvertGroup">قم بالتحديث لمجموعة خارقة</string>
-    <string name="ConvertGroupAlert">فضلًا تذكر أن أعضاء هذه المجموعة يلزمهم تحديث تطبيقات تيليجرام لأحدث النسخ ليتمكنوا من الإستفادة من المجموعات الخارقة. هل أنت متأكد من رغبتك في ترقية المجموعة؟</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>تم الوصول للحد الأعلى للأعضاء<![CDATA[</b>]]>\n\nيمكنك ترقية مجموعتك لتصبح مجموعة خارقة لتتمكن من إضافة أعضاء أكثر من الحد الأعلى وخصائص مثل:\n\n• الحد الأعلى للأعضاء يصبح %1$s عضو\n• الأعضاء الجدد يرون تاريخ محادثات المجموعة بشكل كامل\n• المشرفون يمكنهم حذف رسائل كافة الأعضاء\n• الإشعارات على وضع الصامت بشكل تلقائي</string>
-    <!--contact info view-->
-    <string name="ShareContact">مشاركة</string>
-    <string name="AddContact">إضافة</string>
-    <string name="AddContactTitle">قم بإضافة جهة اتصال</string>
-    <string name="BlockContact">حظر</string>
-    <string name="EditContact">تعديل</string>
-    <string name="DeleteContact">حذف</string>
-    <string name="PhoneHome">منزل</string>
-    <string name="PhoneMobile">الهاتف المحمول</string>
-    <string name="PhoneWork">العمل</string>
-    <string name="PhoneOther">آخر</string>
-    <string name="PhoneMain">الرئيسية</string>
-    <string name="StartEncryptedChat">إبدأ محادثة سرية</string>
-    <string name="CreateEncryptedChatError">حدث خطأ.</string>
-    <string name="EncryptionKey">مفتاح التشفير</string>
-    <string name="MessageLifetime">عداد التدمير الذاتي</string>
-    <string name="ShortMessageLifetimeForever">إيقاف</string>
-    <string name="EncryptionKeyDescription">هذه الصورة والنص تم اشتقاقهم من مفتاح التشفير لهذه المحادثة السرية مع <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>إذا كانت مطابقة لما يظهر على جهاز <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> ، التشفير من البداية للنهاية مضمون.<![CDATA[<br><br>]]>للإستزادة، إطلع على telegram.org </string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
-    <string name="NumberUnknown">غير معروف</string>
-    <string name="Info">معلومات</string>
-    <string name="Phone">هاتف</string>
-    <!--usernames-->
-    <string name="Username">اسم مستخدم</string>
-    <string name="UsernamePlaceholder">معرّفك</string>
-    <string name="UsernameInUse">المعذرة، اسم المستخدم تم اختياره مسبقًا.</string>
-    <string name="UsernameInvalid">المعذرة، اسم المستخدم غير مقبول.</string>
-    <string name="UsernameInvalidShort">سم المستخدم يجب أن يتكوّن من ٥ حروف على الأقل.</string>
-    <string name="UsernameInvalidLong">اسم المستخدم يجب ألا يتخطى ٣٢ حرف كحد أقصى.</string>
-    <string name="UsernameInvalidStartNumber">المعذرة، اسم المستخدم لا يمكن أن يبدأ برقم.</string>
-    <string name="UsernameHelp">يمكنك اختيار اسم مستخدم في <![CDATA[<b>]]>تيليجرام<![CDATA[</b>]]>. إذا قمت بذلك، سيستطيع الناس إيجادك باستخدام الاسم المستخدم والتواصل معك من دون معرفة رقمك.<![CDATA[<br><br>]]>يمكنك استخدام <![CDATA[<b>]]>حروف اللغة الإنجليزية<![CDATA[</b>]]>, <![CDATA[<b>]]>وأرقامها<![CDATA[</b>]]> و كذلك الخط. لا بد من استخدام <![CDATA[<b>]]>٥<![CDATA[</b>]]> حروف على الأقل.</string>
-    <string name="UsernameChecking">جارٍ مراجعة اسم المستخدم...</string>
-    <string name="UsernameAvailable">%1$s متاح.</string>
-    <string name="UsernameEmpty">لا يوجد</string>
-    <string name="ErrorOccurred">حدث خطأ.</string>
-    <!--stickers view-->
-    <string name="Stickers">ملصقات</string>
-    <string name="StickersInfo">الرسامون مرحب بهم ليصنعوا حزم ملصقات عن طريق مراسلة @stickers .\n\nيمكن إضافة هذه الحزم بالضغط مرتين على الملصق واختيار \"معلومات\" — \"إضافة الملصقات\".</string>
-    <string name="AddStickers">إضافة ملصق</string>
-    <string name="AddToStickers">إضافة إلى الملصقات</string>
-    <string name="AddStickersNotFound">لا يوجد ملصقات</string>
-    <string name="StickersRemoved">تم حذف الملصقات</string>
-    <string name="AddStickersInstalled">تم إضافة ملصقات جديدة</string>
-    <string name="StickersHide">إخفاء</string>
-    <string name="StickersShow">إظهار</string>
-    <string name="StickersShare">مشاركة</string>
-    <string name="StickersCopy">نسخ الرابط</string>
-    <string name="StickersRemove">حذف</string>
-    <string name="NoStickers">لا يوجد ملصقات بعد</string>
-    <string name="TooMuchStickersets">المعذرة، لقد وصلت الحد الأعلى لحزم الملصقات.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">تم تعيين كافة الإشعارات افتراضيا</string>
-    <string name="TextSize">حجم نص الرسائل</string>
-    <string name="AskAQuestion">اسأل سؤالًا</string>
-    <string name="EnableAnimations">تفعيل التأثيرات المتحركة</string>
-    <string name="Unblock">إلغاء الحظر</string>
-    <string name="UnblockText">اضغط بإستمرار على المستخدم لإلغاء الحظر</string>
-    <string name="NoBlocked">لا توجد جهات اتصال محظورة</string>
-    <string name="MessageNotifications">إشعارات الرسائل</string>
-    <string name="Alert">التنبيه</string>
-    <string name="MessagePreview">معاينة الرسالة</string>
-    <string name="GroupNotifications">إشعارات المجموعات</string>
-    <string name="Sound">الصوت</string>
-    <string name="InAppNotifications">الإشعارات داخل التطبيق</string>
-    <string name="InAppSounds">أصوات داخل التطبيق</string>
-    <string name="InAppVibrate">اهتزاز داخل التطبيق</string>
-    <string name="Vibrate">اهتزاز</string>
-    <string name="InAppPreview">معاينة داخل التطبيق</string>
-    <string name="Reset">إعادة تعيين</string>
-    <string name="ResetAllNotifications">إعادة تعيين كافة الإشعارات</string>
-    <string name="UndoAllCustom">إعادة تعيين كافة إعدادات الإشعارات لجميع جهات الاتصال والمجموعات</string>
-    <string name="NotificationsAndSounds">الإشعارات والأصوات</string>
-    <string name="BlockedUsers">جهات الاتصال المحظورة</string>
-    <string name="LogOut">تسجيل خروج</string>
-    <string name="NoSound">لا يوجد صوت</string>
-    <string name="Default">افتراضي</string>
-    <string name="Support">الدعم</string>
-    <string name="OnlyIfSilent">فقط في وضع الصامت</string>
-    <string name="ChatBackground">خلفية الدردشة</string>
-    <string name="MessagesSettings">الرسائل</string>
-    <string name="SendByEnter">أرسل بزر الإدخال</string>
-    <string name="TerminateAllSessions">سجل الخروج من كافة الأجهزة الأخرى</string>
-    <string name="Events">الأحداث</string>
-    <string name="ContactJoined">اشترك صديق في تيليجرام</string>
-    <string name="Language">اللغة</string>
-    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحن نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]> <![CDATA[<a href=\"https://telegram.org/faq/ar\">صفحة الأسئلة الأكثر شيوعًا</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
-    <string name="AskButton">اسأل أحد المتطوعين</string>
-    <string name="TelegramFaq">الأسئلة الشائعة عن تيليجرام</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq/ar</string>
-    <string name="DeleteLocalization">حذف التعريب؟</string>
-    <string name="IncorrectLocalization">ملف التعريب غير صحيح</string>
-    <string name="Enabled">تمكين</string>
-    <string name="Disabled">تعطيل</string>
-    <string name="NotificationsService">خدمة الإشعارات</string>
-    <string name="NotificationsServiceDisableInfo">إذا كانت خدمات Google play كافية بالنسبة لك لتلقي الإشعارات ، يمكنك تعطيل \" خدمة الإشعارات \" . ومع ذلك نحن نوصي بترك هذه الخدمة مفعلة للحفاظ على تشغيل التطبيق في الخلفية ، ولتلقي إشعارات الدردشة .</string>
-    <string name="SortBy">فرز حسب</string>
-    <string name="ImportContacts">استيراد جهات الاتصال</string>
-    <string name="SortFirstName">الاسم الأول</string>
-    <string name="SortLastName">اسم العائلة</string>
-    <string name="LedColor">لون إضاءة الـ LED</string>
-    <string name="PopupNotification">الإشعارات المنبثقة</string>
-    <string name="NoPopup">بدون إشعارات منبثقة</string>
-    <string name="OnlyWhenScreenOn">فقط عندما تكون الشاشة تعمل</string>
-    <string name="OnlyWhenScreenOff">فقط عندما تكون الشاشة مطفأة</string>
-    <string name="AlwaysShowPopup">دائمًا أظهر الإشعارات المنبثقة</string>
-    <string name="BadgeNumber">عداد الشارات</string>
-    <string name="Short">قصير</string>
-    <string name="Long">طويل</string>
-    <string name="SystemDefault">النظام الإفتراضي</string>
-    <string name="SettingsDefault">الإعدادات الإفتراضية</string>
-    <string name="AutomaticMediaDownload">تنزيل تلقائي للوسائط</string>
-    <string name="WhenUsingMobileData">عند استخدام البيانات الخلوية</string>
-    <string name="WhenConnectedOnWiFi">عند الاتصال بالشبكة اللاسلكية</string>
-    <string name="WhenRoaming">عند تواجدك خارج البلاد</string>
-    <string name="NoMediaAutoDownload">لا يوجد وسائط</string>
-    <string name="AutoplayGifs">تشغيل تلقائي للصور المتحركة</string>
-    <string name="RaiseToSpeak">ارفع الجهاز للتحدث</string>
-    <string name="SaveToGallerySettings">حفظ في الجهاز</string>
-    <string name="EditName">تعديل الاسم</string>
-    <string name="NotificationsPriority">الأولوية</string>
-    <string name="NotificationsPriorityDefault">افتراضي</string>
-    <string name="NotificationsPriorityLow">منخفض</string>
-    <string name="NotificationsPriorityHigh">مرتفع</string>
-    <string name="NotificationsPriorityMax">القصوى</string>
-    <string name="RepeatNotificationsNever">للأبد</string>
-    <string name="RepeatNotifications">إعادة الإشعارات</string>
-    <string name="PhoneNumberHelp">يمكنك تغيير رقم تيليجرام الخاص بك هنا. حسابك وجميع بياناتك التي في السحاب بما فيها رسائلك، الوسائط، جهات الاتصال وغيرها سيتم نقلها للرقم الجديد.<![CDATA[<b>هام:</b>]]> جميع جهات الاتصال الخاصة بك في تيليجرام سيضاف لها <![CDATA[<b>رقمك الجديد</b>]]>، في حال تواجد بها رقمك القديم ولم تقم بحظره في تيليجرام.</string>
-    <string name="PhoneNumberAlert">جميع جهات الاتصال الخاصة بك في تيليجرام سيضاف لها رقمك الجديد، في حال تواجد بها رقمك القديم ولم تقم بحظره في تيليجرام.</string>
-    <string name="PhoneNumberChange">تغيير الرقم</string>
-    <string name="ChangePhoneNewNumber">الرقم الجديد</string>
-    <string name="ChangePhoneHelp">سيتم إرسال رسالة قصيرة تحتوي على رمز التفعيل الخاص إلى رقمك الجديد.</string>
-    <string name="ChangePhoneNumberOccupied">الرقم %1$s لديه حساب تيليجرام مسبقًا. يرجى حذف هذا الحساب قبل محاولة تغيير رقمك.</string>
-    <string name="NotificationsOther">آخر</string>
-    <string name="NotificationsDisabled">تعطيل</string>
-    <string name="VibrationDisabled">تعطيل</string>
-    <string name="LedDisabled">تعطيل</string>
-    <string name="RepeatDisabled">إيقاف</string>
-    <string name="InChatSound">الأصوات داخل المحادثات</string>
-    <string name="SoundDefault">افتراضي</string>
-    <string name="VibrationDefault">تلقائي</string>
-    <string name="SmartNotifications">إشعارات ذكية</string>
-    <string name="SmartNotificationsDisabled">تعطيل</string>
-    <string name="SmartNotificationsInfo">أعلى صوت %1$s خلال %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">أعلى صوت</string>
-    <string name="SmartNotificationsTimes">الأوقات</string>
-    <string name="SmartNotificationsWithin">خلال</string>
-    <string name="SmartNotificationsMinutes">دقائق</string>
-    <string name="SecretWebPage">معاينة الرابط</string>
-    <string name="SecretChat">المحادثات السرية</string>
-    <!--cache view-->
-    <string name="CacheSettings">إعدادات الذاكرة المخبئية</string>
-    <string name="LocalDatabase">قاعدة البيانات على الجهاز</string>
-    <string name="LocalDatabaseClear">هل ترغب في مسح الرسائل المحفوظة في الذاكرة المخبئية؟</string>
-    <string name="LocalDatabaseInfo">مسح قاعدة البيانات على الجهاز سيحذف الرسائل التي تم تنزيلها على جهازك ويقوم بضغط قاعدة البيانات لتوفير مساحة على جهازك. تيليجرام يحتاج لبعض البيانات ليعمل، لذلك حجم قاعدة البيانات لن يصل إلى صفر.\n\nهذه العملية ربما تأخذ عدة دقائق لتتم.</string>
-    <string name="ClearMediaCache">مسح الذاكرة المخبئية</string>
-    <string name="CacheClear">مسح</string>
-    <string name="CalculatingSize">جاري الحساب...</string>
-    <string name="LocalDocumentCache">المستندات</string>
-    <string name="LocalPhotoCache">الصور</string>
-    <string name="LocalAudioCache">الرسائل الصوتية</string>
-    <string name="LocalVideoCache">المقاطع المرئية</string>
-    <string name="LocalMusicCache">الموسيقى</string>
-    <string name="LocalCache">الملفات الأخرى</string>
-    <string name="CacheEmpty">إفراغ</string>
-    <string name="KeepMedia">الإحتفاظ بالوسائط</string>
-    <string name="KeepMediaInfo">الصور، المقاطع المرئية، وجميع الملفات المحفوظة في خوادمنا التي لم <![CDATA[<b> تستخدمها </b>]]> خلال هذه المدة سيتم حذفها لتوفير المساحة. ملفات الوسائط ستبقى في خوادم تيليجرام ويمكنك إعادة تنزيلها متى ما احتجتها مرة أخرى.</string>
-    <string name="KeepMediaForever">إلى الأبد</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">الأجهزة المسجّل دخول منها</string>
-    <string name="CurrentSession">الجهاز الحالي</string>
-    <string name="NoOtherSessions">لا يوجد أجهزة مسجّل دخول منها أخرى</string>
-    <string name="NoOtherSessionsInfo">يمكنك تسجيل الدخول لحسابك في تيليجرام من جوال آخر، جهاز لوحي، أو أجهزة الكمبيوتر، باستخدام نفس رقم الهاتف. تيليجرام سيقوم بمزامنة كافة بياناتك بشكل لحظي.</string>
-    <string name="OtherSessions">الأجهزة المسجّل دخول منها</string>
-    <string name="SessionsInfo">قم بالتحكم بالأجهزة المسجل دخول منها.</string>
-    <string name="TerminateSessionInfo">اضغط على الجهاز لتسجيل الخروج منه.</string>
-    <string name="TerminateSessionQuestion">هل ترغب في تسجيل الخروج من هذا الجهاز؟</string>
-    <string name="UnofficialApp">تطبيق غير رسمي</string>
-    <!--passcode view-->
-    <string name="Passcode">قفل رمز المرور</string>
-    <string name="ChangePasscode">غيًر رمز المرور</string>
-    <string name="ChangePasscodeInfo">عندما تختار رمز مرور، ستظهر علامة قفل في صفحة المحادثات. اضغط عليها لقفل أو فتح تيليجرام.\n\nملاحظة: إذا نسيت رمز المرور، ستحتاج لحذف وإعادة تنزيل التطبيق. وستخسر كافة محادثاتك السرية وستعود المحادثات العادية فور إعادة تسجيل الدخول.</string>
-    <string name="ChangePasscodeAlert">سوف ترى الآن أيقونة قفل في صفحة المحادثات. اضغط عليها لقفل تطبيق تيليجرام برمز المرور الجديد الخاص بك.</string>
-    <string name="PasscodePIN">الرمز</string>
-    <string name="PasscodePassword">كلمة المرور</string>
-    <string name="EnterCurrentPasscode">قم بإدخال رمز المرور الخاص بك الحالي</string>
-    <string name="EnterNewFirstPasscode">قم بإدخال رمز مرور</string>
-    <string name="EnterNewPasscode">قم بإدخال رمز المرور الخاص بك الجديد</string>
-    <string name="EnterYourPasscode">قم بإدخال رمز المرور الخاص بك</string>
-    <string name="ReEnterYourPasscode">قم بإعادة إدخال رمز المرور الخاص بك الجديدة</string>
-    <string name="InvalidPasscode">رمز مرور غير صحيح</string>
-    <string name="PasscodeDoNotMatch">رموز المرور غير متطابقة</string>
-    <string name="AutoLock">قفل تلقائي</string>
-    <string name="AutoLockInfo">اطلب رمز المرور إذا غبت فترة محددة من الزمن.</string>
-    <string name="AutoLockInTime">خلال %1$s</string>
-    <string name="AutoLockDisabled">معطّل</string>
-    <string name="UnlockFingerprint">قم بالفتح بالبصمة</string>
-    <string name="FingerprintInfo">قم بتأكيد البصمة للإستمرار</string>
-    <string name="FingerprintHelp">حساس اللمس</string>
-    <string name="FingerprintNotRecognized">لم يتم التعرف على البصمة. حاول مرة أخرى</string>
-    <!--media view-->
-    <string name="NoMedia">شارك المقاطع المرئية والصور في هذه المحادثة لتستطيع الوصول إليها من أية جهاز من أجهزتك</string>
-    <string name="DocumentsTitle">الملفات المشاركة</string>
-    <string name="SharedMediaTitle">الوسائط المشتركة</string>
-    <string name="LinksTitle">الروابط المشاركة</string>
-    <string name="AudioTitle">الموسيقى المشتركة</string>
-    <string name="NoSharedAudio">قم بإرسال مقاطع موسيقية لهذه المحادثة ليمكنك الوصول إليها من أجهزتك الأخرى.</string>
-    <string name="NoSharedFiles">شارك الملفات والمستندات في هذه المحادثة لتستطيع الوصول إليها من أية جهاز من أجهزتك</string>
-    <string name="NoSharedLinks">شارك الروابط في هذه المحادثة لتستطيع الوصول إليها من أية جهاز من أجهزتك</string>
-    <!--map view-->
-    <string name="Map">الخريطة</string>
-    <string name="Satellite">قمر صناعي</string>
-    <string name="Hybrid">هجين</string>
-    <string name="MetersAway">متر يبعد</string>
-    <string name="KMetersAway">كيلومتر يبعد</string>
-    <string name="SendLocation">أرسل مكانك الحالي</string>
-    <string name="SendSelectedLocation">أرسل المكان المختار</string>
-    <string name="ShareLocation">المكان</string>
-    <string name="AccurateTo">دقيق لدرجة %1$s</string>
-    <string name="NearbyPlaces">أو اختر مكان</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">عرض كافة الوسائط</string>
-    <string name="SaveToGallery">حفظ في الجهاز</string>
-    <string name="Of">%1$d من %2$d</string>
-    <string name="Gallery">الألبوم</string>
-    <string name="AllPhotos">جميع الصور</string>
-    <string name="AllVideo">كافة المقاطع المرئية</string>
-    <string name="NoPhotos">لا توجد صور حتى الآن</string>
-    <string name="NoVideo">لا يوجد مقاطع مرئية بعد</string>
-    <string name="PleaseDownload">فضلًا، قم بتنزيل الوسائط أولًا</string>
-    <string name="NoRecentPhotos">لا توجد صور حديثة</string>
-    <string name="NoRecentGIFs">لا يوجد صور متحركة حديثة</string>
-    <string name="SearchImages">ابحث عن صور</string>
-    <string name="SearchImagesInfo">البحث على الإنترنت</string>
-    <string name="SearchGifs">ابحث عن صور متحركة</string>
-    <string name="SearchImagesTitle">البحث على الإنترنت</string>
-    <string name="SearchGifsTitle">البحث عن صور متحركة</string>
-    <string name="CropImage">قص الصورة</string>
-    <string name="EditImage">تعديل الصورة</string>
-    <string name="Enhance">تحسين</string>
-    <string name="Highlights">التفتيح</string>
-    <string name="Contrast">التباين</string>
-    <string name="Exposure">التعريض</string>
-    <string name="Warmth">الدفء</string>
-    <string name="Saturation">التشبع</string>
-    <string name="Vignette">النقش</string>
-    <string name="Shadows">الظل</string>
-    <string name="Grain">الحبوب</string>
-    <string name="Sharpen">زيادة الحدة</string>
-    <string name="Fade">تلاشي</string>
-    <string name="Tint">تظليل</string>
-    <string name="TintShadows">الظلال</string>
-    <string name="TintHighlights">الإضاءات</string>
-    <string name="Curves">المنحنيات</string>
-    <string name="CurvesAll">الكل</string>
-    <string name="CurvesRed">أحمر</string>
-    <string name="CurvesGreen">أخضر</string>
-    <string name="CurvesBlue">أزرق</string>
-    <string name="Blur">الطمس</string>
-    <string name="BlurOff">إيقاف</string>
-    <string name="BlurLinear">طولي</string>
-    <string name="BlurRadial">قطري</string>
-    <string name="AreYouSureDeletePhoto">هل أنت متأكد من رغبتك في حذف هذه الصورة؟</string>
-    <string name="AreYouSureDeleteVideo">هل أنت متأكد من رغبتك في حذف هذا المقطع المرئي؟</string>
-    <string name="DiscardChanges">تجاهل التغييرات؟</string>
-    <string name="ClearSearch">هل ترغب في مسح سجل البحث؟</string>
-    <string name="ClearButton">مسح</string>
-    <string name="PickerPhotos">صور</string>
-    <string name="PickerVideo">مقطع مرئي</string>
-    <string name="AddCaption">أضف تعليق...</string>
-    <string name="PhotoCaption">تعليق الصورة</string>
-    <string name="VideoCaption">تعليق المقطع المرئي</string>
-    <string name="Caption">تعليق</string>
-    <!--password view-->
-    <string name="TwoStepVerification">التحقق بخطوتين</string>
-    <string name="SetAdditionalPassword">تعيين كلمة مرور إضافية</string>
-    <string name="SetAdditionalPasswordInfo">يمكنك تعيين كلمة مرور يتم طلبها عند محاولة تسجيل الدخول من جهاز جديد بالإضافة إلى الرمز الذي يأتيك في رسالة قصيرة.</string>
-    <string name="YourPassword">كلمة المرور الخاصة بك</string>
-    <string name="PleaseEnterCurrentPassword">يرجى إعادة إدخال كلمة المرور الخاصة بك:</string>
-    <string name="PleaseEnterFirstPassword">قم بإدخال كلمة مرور</string>
-    <string name="PleaseEnterPassword">يرجى إدخال كلمة المرور الجديدة الخاصة بك:</string>
-    <string name="PleaseReEnterPassword">يرجى إعادة إدخال كلمة المرور الخاصة بك:</string>
-    <string name="RecoveryEmail">بريد إسترداد الحساب</string>
-    <string name="YourEmail">بريدك الإلكتروني</string>
-    <string name="YourEmailInfo">فضلًا أضف بريد إلكتروني صحيح. هذه هي الطريقة الوحيدة لإستعادة كلمة المرور بعد نسيانها.</string>
-    <string name="YourEmailSkip">تخطّي</string>
-    <string name="YourEmailSkipWarning">تحذير</string>
-    <string name="YourEmailSkipWarningText">الموضوع جدّيّ.\n\nإذا نسيت كلمة المرور الخاصة بك، لن تستطيع الدخول على حساب تيليجرام الخاص بك. لن يكون هناك طريقة لإستعادته.</string>
-    <string name="YourEmailAlmostThere">تقريبًا انتهينا!</string>
-    <string name="YourEmailAlmostThereText">يرجى الذهاب لبريدك الإلكتروني والضغط على رابط التأكيد لإنهاء إعدادات التحقق بخطوتين. تأكد من الإطّلاع على مجلد الرسائل الغير مرغوب بها أيضًا.</string>
-    <string name="YourPasswordSuccess">تم بنجاح!</string>
-    <string name="YourPasswordSuccessText">تم تفعيل كلمة المرور الخاصة بالتحقق بخطوتين.</string>
-    <string name="ChangePassword">تغيير كلة المرور</string>
-    <string name="TurnPasswordOff">إيقاف كلمة المرور</string>
-    <string name="SetRecoveryEmail">اختر بريد إلكتروني لإسترداد الحساب</string>
-    <string name="ChangeRecoveryEmail">غيّر البريد الإلكتروني لإسترداد الحساب</string>
-    <string name="TurnPasswordOffQuestion">هل أنت متأكد من رغبتك في تعطيل كلمة المرور؟</string>
-    <string name="PasswordHint">تلميحة كلمة المرور</string>
-    <string name="PasswordHintText">فضلًا اختر تلميحة لكلمة المرور الخاصة بك:</string>
-    <string name="PasswordDoNotMatch">كلمتي المرور غير متطابقة</string>
-    <string name="AbortPassword">إنهاء عملية إعداد التحقق بخطوتين</string>
-    <string name="EmailPasswordConfirmText">فضلًا اتّبع هذه الخطوات لإكمال إعدادات التحقق بخطوتين:\n\n١. قم بالإطلاع على بريدة الإلكتروني بما فيه مجلد الرسائل الغير مرغوب بها\n%1$s\n\n٢. اضغط على رابط التأكيد</string>
-    <string name="PasswordAsHintError">التلميحة يجب أن تكون مختلفة عن كلمة المرور ذاتها</string>
-    <string name="PasswordEmailInvalid">بريد إلكتروني غير صحيح</string>
-    <string name="RestorePasswordNoEmailTitle">عذرًا</string>
-    <string name="RestorePasswordNoEmailText">لم تقم بإضافة بريد إلكتروني لإستعادة كلمة المرور عند اختيارها، لذلك خياراتك المتبقية هي تذكّر كلمة المرور أو إعادة تعيين حسابك.</string>
-    <string name="RestoreEmailSent">لقد قمنا بإرسال رمز الإستعادة إلى بريدك الإلكتروني الذي اخترته مسبقًا:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">يرجى الإطلاع على بريدك الإلكتروني وإدخال الرمز المكون من ٦ أرقام الذي قمنا بإرساله هنا.</string>
-    <string name="RestoreEmailTrouble">هل تواجه صعوبات في الدخول على بريدك الإلكتروني %1$s؟</string>
-    <string name="RestoreEmailTroubleText">إذا لم تستطع الدخول على بريد الإسترداد الخاص بك، خياراتك المتبقية هي تذكّر كلمة المرور أو إعادة تعيين حسابك.</string>
-    <string name="ResetMyAccount">إعادة تعيين حسابي</string>
-    <string name="ResetMyAccountText">إذا قمت بإعادة تعيين حسابك، ستفقد كافّة محادثاتك ورسائلك، بالإضافة إلى الوسائط والملفات التي تمت مشاركتها.</string>
-    <string name="ResetMyAccountWarning">تحذير</string>
-    <string name="ResetMyAccountWarningText">لا يمكن الرجوع عن هذا الخيار.\n\nإذا قمت بإعادة تعيين حسابك، كافة رسائلك ومحادثاتك سيتم حذفها.</string>
-    <string name="ResetMyAccountWarningReset">إعادة تعيين</string>
-    <string name="LoginPassword">كلمة المرور</string>
-    <string name="LoginPasswordText">تم تفعيل التحقق بخطوتين، لذلك حسابك محميّ بكلمة مرور إضافية.</string>
-    <string name="ForgotPassword">هل نسيت كلمة المرور؟</string>
-    <string name="PasswordRecovery">كلمة مرور الإسترداد</string>
-    <string name="PasswordCode">الرمز</string>
-    <string name="PasswordReset">تم تعطيل كلمة المرور</string>
-    <string name="EnabledPasswordText">لقد قمت بتفعيل التحقق بخطوتين.\nعند محاولة تسجيل الدخول على حساب تيليجرام الخاص بك من جهاز جديد، سيتم طلب كلمة المرور التي اخترتها هنا منك.</string>
-    <string name="PendingEmailText">البريد الإلكتروني لإسترداد الحساب %1$s غير فعّال بعد ويلزم تفعيله</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">الخصوصية والأمان</string>
-    <string name="PrivacyTitle">الخصوصية</string>
-    <string name="PrivacyLastSeen">آخر ظهور</string>
-    <string name="LastSeenEverybody">الجميع</string>
-    <string name="LastSeenContacts">جهات الاتصال الخاصة بي</string>
-    <string name="LastSeenNobody">لا أحد</string>
-    <string name="LastSeenEverybodyMinus">الجميع (-%1$d)</string>
-    <string name="LastSeenContactsPlus">جهات الاتصال الخاصة بي (+%1$d)</string>
-    <string name="LastSeenContactsMinus">جهات الاتصال الخاصة بي (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">جهات الاتصال الخاصة بي (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">لا أحد (+%1$d)</string>
-    <string name="SecurityTitle">الأمان</string>
-    <string name="DeleteAccountTitle">تدمير ذاتي للحساب</string>
-    <string name="DeleteAccountIfAwayFor">إذا كنت غائب لمدة</string>
-    <string name="DeleteAccountHelp">إذا لم تقم بتسجيل الدخول خلال هذه الفترة، سيتم حذف حسابك بالإضافة إلى مجموعاتك، رسائلك، وجهات الاتصال الخاصة بك في تيليجرام.</string>
-    <string name="DeleteAccountNowConfirmation">هل ترغب في حذف حسابك؟</string>
-    <string name="LastSeenHelp">قم بتغيير من يستطيع رؤية آخر ظهور خاص بك.</string>
-    <string name="LastSeenTitle">من يستطيع رؤية آخر ظهور خاص بك؟</string>
-    <string name="AddExceptions">إضافة استثناءات</string>
-    <string name="CustomHelp">هام: لن تستطيع رؤية آخر ظهور للأشخاص اللذين اخترت ألا يروا آخر ظهور لك. سيتم عرض آخر ظهور تقريبي كبديل (قريبًا، خلال أسبوع، خلال شهر).</string>
-    <string name="AlwaysShareWith">دائمًا شارك معه</string>
-    <string name="NeverShareWith">لا تشارك أبدًا مع</string>
-    <string name="CustomShareSettingsHelp">هذه الإعدادات ستستبدل الإعدادات المختارة أعلاه.</string>
-    <string name="AlwaysShareWithTitle">دائمُا شارك</string>
-    <string name="AlwaysShareWithPlaceholder">دائمًا شارك مع جهات الاتصال...</string>
-    <string name="NeverShareWithTitle">لا تشارك أبدًا</string>
-    <string name="NeverShareWithPlaceholder">لا تشارك أبدًا مع جهات الاتصال...</string>
-    <string name="EmpryUsersPlaceholder">إضافة جهات اتصال</string>
-    <string name="PrivacyFloodControlError">المعذرة، يوجد الكثير من الطلبات حاليًا. لا نستطيع تغيير إعدادات الخصوصية الآن، يرجى الإنتظار.</string>
-    <string name="ClearOtherSessionsHelp">قم بتسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز</string>
-    <string name="RemoveFromListText">إضغط بإستمرار على المستخدم لحذفه</string>
-    <string name="GroupsAndChannels">المجموعات</string>
-    <string name="WhoCanAddMe">من يستطيع إضافتي للمجموعات؟</string>
-    <string name="WhoCanAddMeInfo">بإمكانك تحديد من يستطيع إضافتك للمجموعات والقنوات كيفما تشاء.</string>
-    <string name="AlwaysAllow">دائمًا اسمح</string>
-    <string name="NeverAllow">لا تسمح أبدًا</string>
-    <string name="AlwaysAllowPlaceholder">دائمًا اسمح...</string>
-    <string name="NeverAllowPlaceholder">لا تسمح أبدًا...</string>
-    <string name="CustomShareInfo">هؤلاء المستخدمين يمكنهم أو لا يمكنهم إضافتك للمجموعات والقنوات بغض النظر عن الأعدادات أعلاه.</string>
-    <string name="GroupsAndChannelsHelp">غيّر من يستطيع إضافتك للمجموعات والقنوات.</string>
-    <string name="InviteToGroupError">المعذرة، لا يمكنك إضافة هذا المستخدم للمجموعات بسبب إعدادات الخصوصية المتعلقة به.</string>
-    <string name="InviteToChannelError">المعذرة، لا يمكنك إضافة هذا المستخدم للقنوات بسبب إعدادات الخصوصية المتعلقة به.</string>
-    <string name="CreateGroupError">المعذرة، لا يمكنك إنشاء مجموعة مع هؤلاء المستخدمين نظرًا لإعدادات الخصوصية المتعلقة بهم.</string>
-    <!--edit video view-->
-    <string name="EditVideo">تحرير الفيديو</string>
-    <string name="OriginalVideo">الفيديو الأصلي</string>
-    <string name="EditedVideo">تم تحرير الفيديو</string>
-    <string name="SendingVideo">جارٍ إرسال المقطع المرئي...</string>
-    <string name="CompressVideo">اضغط المقطع المرئي</string>
-    <!--bot-->
-    <string name="Bot">بوت</string>
-    <string name="BotShare">مشاركة</string>
-    <string name="BotInvite">إضافة إلى المجموعة</string>
-    <string name="BotSettings">الإعدادات</string>
-    <string name="BotHelp">مساعدة</string>
-    <string name="BotStatusRead">يستطيع الوصول للرسائل</string>
-    <string name="BotStatusCantRead">لا يستطيع الوصول للرسائل</string>
-    <string name="BotInfoTitle">ماذا يستطيع هذا البوت عمله؟</string>
-    <string name="BotStart">إبدأ</string>
-    <string name="BotUnblock">إعادة تشغيل</string>
-    <string name="BotStop">إيقاف البوت</string>
-    <string name="BotRestart">إعادة تعيين البوت</string>
-    <!--button titles-->
-    <string name="Next">التالي</string>
-    <string name="Back">رجوع</string>
-    <string name="Done">تم</string>
-    <string name="Open">فتح</string>
-    <string name="Save">حفظ</string>
-    <string name="Cancel">إلغاء</string>
-    <string name="Close">إغلاق</string>
-    <string name="Add">إضافة</string>
-    <string name="Edit">تعديل</string>
-    <string name="Send">إرسال</string>
-    <string name="Call">اتصال</string>
-    <string name="Copy">نسخ</string>
-    <string name="Delete">حذف</string>
-    <string name="DeleteAndStop">حذف وإيقاف</string>
-    <string name="Forward">إعادة توجيه</string>
-    <string name="Retry">إعادة المحاولة</string>
-    <string name="FromCamera">من الكاميرا</string>
-    <string name="FromGalley">من الجهاز</string>
-    <string name="DeletePhoto">حذف الصورة</string>
-    <string name="Set">تعيين</string>
-    <string name="OK">موافق</string>
-    <string name="Crop">قطع</string>
-    <!--messages-->
-    <string name="ActionInviteYou">لقد قمت بالدخول للمجموعة باستخدام رابط الدعوة</string>
-    <string name="ActionInviteUser">un1 قام بالدخول للمجموعة باستخدام رابط الدعوة</string>
-    <string name="ActionKickUser">un1 أزال un2</string>
-    <string name="ActionLeftUser">un1 غادر المجموعة</string>
-    <string name="ActionAddUser">un1 قام بإضافة un2</string>
-    <string name="ActionRemovedPhoto">تمت إزالة صورة المجموعة من قِبَل un1</string>
-    <string name="ActionChangedPhoto">تم تغيير صورة المجموعة من قِبَل un1</string>
-    <string name="ActionChangedTitle">un1 قام بتغيير اسم المجموعة إلى un2</string>
-    <string name="ActionCreateGroup">تم إنشاء مجموعة جديدة من قِبَل un1</string>
-    <string name="ActionYouKickUser">لقد قمت بإخراج un2</string>
-    <string name="ActionYouLeftUser">أنت غادرت المجموعة</string>
-    <string name="ActionYouAddUser">لقد قمت بإضافة un2</string>
-    <string name="ActionYouRemovedPhoto">لقد قمت بإزالة صورة المجموعة</string>
-    <string name="ActionYouChangedPhoto">لقد قمت بتغيير صورة المجموعة</string>
-    <string name="ActionYouChangedTitle">لقد قمت بتغيير اسم المجموعة إلى un2</string>
-    <string name="ActionYouCreateGroup">لقد قمت بإنشاء المجموعة</string>
-    <string name="ActionKickUserYou">un1 قام بإخراجك</string>
-    <string name="ActionAddUserYou">un1 قام بإضافتك</string>
-    <string name="ActionAddUserSelf">un1 عاد إلى المجموعة</string>
-    <string name="ActionAddUserSelfYou">لقد عدت إلى المجموعة</string>
-    <string name="UnsupportedMedia">نسخة تيليجرام الموجودة لديك لا تدعم هذه الرسالة. الرجاء التحديث لأحدث نسخة: https://telegram.org/update</string>
-    <string name="AttachPhoto">صورة</string>
-    <string name="AttachVideo">مقطع مرئي</string>
-    <string name="AttachGif">صورة متحركة</string>
-    <string name="AttachLocation">موقع</string>
-    <string name="AttachContact">جهة اتصال</string>
-    <string name="AttachDocument">ملف</string>
-    <string name="AttachSticker">ملصق</string>
-    <string name="AttachAudio">رسالة صوتية</string>
-    <string name="FromYou">أنت</string>
-    <string name="ActionTakeScreenshootYou">أنت أخذت لقطة للشاشة !</string>
-    <string name="ActionTakeScreenshoot">un1 أخذ لقطة للشاشة !</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">رقم الهاتف غير صحيح</string>
-    <string name="CodeExpired">انتهت صلاحية الرمز الخاص بك، يرجى تسجيل الدخول مرة أخرى</string>
-    <string name="FloodWait">محاولات كثيرة خاطئة، نرجو المحاولة لاحقًا</string>
-    <string name="FloodWaitTime">محاولات كثيرة خاطئة، يرجى المحاولة خلال %1$s</string>
-    <string name="InvalidCode">الرمز غير صحيح</string>
-    <string name="InvalidFirstName">الاسم الأول غير صحيح</string>
-    <string name="InvalidLastName">اسم العائلة غير صحيح</string>
-    <string name="Loading">جاري التحميل ...</string>
-    <string name="NoPlayerInstalled">ليس لديك أي مشغل مقاطع مرئية، يرجى تنزيل أية مشغل</string>
-    <string name="NoMailInstalled">يرجى إرسال رسالة بواسطة البريد الإلكتروني إلى sms@stel.com لتخبرنا عن مشكلتك.</string>
-    <string name="NoHandleAppInstalled">لا يوجد لديك تطبيق يمكنه فتح \'%1$s\'، يرجى تنزيل تطبيق مناسب للإستمرار</string>
-    <string name="InviteUser">هذا المستخدم ليس لديه تيليجرام بعد ، هل ترغب في دعوته الآن؟</string>
-    <string name="AreYouSure">هل أنت متأكد؟</string>
-    <string name="AddToTheGroupTitle">هل ترغب بإضافة %1$s للمحادثة %2$s؟</string>
-    <string name="AddToTheGroupForwardCount">عدد الرسائل الحديثة المراد إعادة تحويلها:</string>
-    <string name="AddToTheGroup">إضافة %1$s للمجموعة؟</string>
-    <string name="UserAlreadyInGroup">هذا المستخدم عضو مسبق في هذه المجموعة</string>
-    <string name="ForwardMessagesTo">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
-    <string name="SendMessagesTo">هل ترغب في إرسال رسالة إلى %1$s؟</string>
-    <string name="SendContactTo">أرسل جهة الاتصال إلى %1$s؟</string>
-    <string name="AreYouSureLogout">نرجو الأخذ بالعلم أنه يمكنك استخدام تيليجرام على أجهزتك المتعددة بسهولة تامة وفي وقت واحد.\n\nوتذكر، تسجيل الخروج يحذف كافة محادثاتك السرية.</string>
-    <string name="AreYouSureSessions">هل أنت متأكد من تسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز؟</string>
-    <string name="AreYouSureDeleteAndExit">هل أنت متأكد من أنك تريد حذف المجموعة والخروج منها؟</string>
-    <string name="AreYouSureDeleteThisChat">هل أنت متأكد من رغبتك في حذف المحادثة؟</string>
-    <string name="AreYouSureShareMyContactInfo">هل أنت متأكد من أنك تريد مشاركة معلومات جهة الاتصال الخاصة بك؟</string>
-    <string name="AreYouSureBlockContact">هل أنت متأكد من رغبتك في حظر جهة الاتصال هذه؟</string>
-    <string name="AreYouSureUnblockContact">هل أنت متأكد من رغبتك في إزالة الحظر عن جهة الاتصال هذه؟</string>
-    <string name="AreYouSureDeleteContact">هل أنت متأكد من رغبتك في حذف جهة الاتصال هذه؟</string>
-    <string name="AreYouSureSecretChat">هل أنت متأكد من أنك تريد بدء محادثة سرية؟</string>
-    <string name="AreYouSureRegistration">هل أنت متأكد من رغبتك في إلغاء التسجيل؟</string>
-    <string name="AreYouSureClearHistory">هل أنت متأكد من رغبتك في حذف سجل المحادثات؟</string>
-    <string name="AreYouSureClearHistoryChannel">حذف كافة المحادثات والوسائط المتعلقة بهذه القناة من الذاكرة المخبئية؟</string>
-    <string name="AreYouSureClearHistorySuper">حذف كافة المحادثات والوسائط المتعلقة بهذه المجموعة الخارقة من الذاكرة المخبئية؟</string>
-    <string name="AreYouSureDeleteMessages">هل أنت متأكد من رغبتك في حذف %1$s؟</string>
-    <string name="SendMessagesToGroup">هل ترغب في إرسال رسالة إلى %1$s؟</string>
-    <string name="SendContactToGroup">أرسل جهة الاتصال إلى %1$s؟</string>
-    <string name="ForwardMessagesToGroup">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
-    <string name="FeatureUnavailable">.Sorry, this feature is currently not available in your country</string>
-    <string name="NoUsernameFound">لا يوجد حساب تيليجرام بهذا الاسم.</string>
-    <string name="BotCantJoinGroups">هذا البوت لا يستطيع الدخول للمجموعات.</string>
-    <string name="SecretLinkPreviewAlert">هل ترغب في تفعيل معاينة الروابط المطولة في المحادثات السرية؟ تذكر أن هذه المعاينات يتم إنشاؤها في خوادم تيليجرام.</string>
-    <string name="SecretChatContextBotAlert">يرجى ملاحظة أن البوتات أثناء الكتابة يتم تطويرها من مطورين مستقلين. لكي تعمل هذه البوتات، ما تكتبه بعد معرف البوت يذهب لمطور البوت.</string>
-    <string name="RaiseToSpeakAlert">هل ترغب في تفعيل خاصية رفع الجهاز لإرسال الرسائل الصوتية؟</string>
-    <string name="EditMessageError">المعذرة، لا يمكنك التعديل على هذه الرسالة.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">تيليجرام يحتاج للسماح له بالوصول لجهات الاتصال الخاصة بك لتتمكن من محادثة أصدقائك من كافة أجهزتك.</string>
-    <string name="PermissionStorage">تيليجرام يحتاج للسماح له بالوصول للذاكرة الخاصة بك لتتمكن من إرسال وحفظ الصور، المقاطع المرئية، الموسيقى وغيرها من الوسائط.</string>
-    <string name="PermissionNoAudio">تيليجرام يحتاج للسماح له بالوصول للمايكروفون الخاص بك لتتمكن من إرسال رسائل صوتية.</string>
-    <string name="PermissionNoLocation">تيليجرام يحتاج للسماح له بالوصول لمكانك لتتمكن من مشاركته مع أصدقائك من خلاله.</string>
-    <string name="PermissionOpenSettings">الإعدادات</string>
-    <!--Intro view-->
-    <string name="Page1Title">تيليجرام</string>
-    <string name="Page2Title">سريع</string>
-    <string name="Page3Title">مجاني</string>
-    <string name="Page4Title">آمن</string>
-    <string name="Page5Title">قوي</string>
-    <string name="Page6Title">مرتبط بالسحاب</string>
-    <string name="Page7Title">خصوصي</string>
-    <string name="Page1Message">أسرع تطبيق مراسلة في العالم. <![CDATA[<br/>]]>كما أنه مجاني و آمن.</string>
-    <string name="Page2Message"><![CDATA[<b>تيليجرام</b>]]> يوصل الرسائل أسرع من أي تطبيق آخر.</string>
-    <string name="Page3Message"><![CDATA[<b>تيليجرام</b>]]> مجاني للأبد. بدون أية إعلانات. وبدون رسوم إشتراك.</string>
-    <string name="Page4Message"><![CDATA[<b>تيليجرام</b>]]>  يحمي الرسائل الخاصة بك من هجمات المخترقين.</string>
-    <string name="Page5Message"><![CDATA[<b>تيليجرام</b>]]>  لا يفرض عليك حدود لحجم الوسائط والمحادثات.</string>
-    <string name="Page6Message"><![CDATA[<b>تيليجرام</b>]]> يمكنك الوصول إلى الرسائل الخاصة بك من أجهزة متعددة.</string>
-    <string name="Page7Message"><![CDATA[<b>تيليجرام</b>]]> الرسائل مشفرة بشكل قوي وتستطيع تدمير ذاتها</string>
-    <string name="StartMessaging">إبدأ المراسلة</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d متصل</string>
-    <string name="Online_one">%1$d متصل</string>
-    <string name="Online_two">%1$d متصل</string>
-    <string name="Online_few">%1$d متصل</string>
-    <string name="Online_many">%1$d متصل</string>
-    <string name="Online_other">%1$d متصل</string>
-    <string name="Members_zero">%1$d أعضاء</string>
-    <string name="Members_one">%1$d عضو</string>
-    <string name="Members_two">%1$d عضوان</string>
-    <string name="Members_few">%1$d أعضاء</string>
-    <string name="Members_many">%1$d عضو</string>
-    <string name="Members_other">%1$d عضو</string>
-    <string name="AndMoreTyping_zero">كذلك %1$d عضو آخر يقوب بالكتابة</string>
-    <string name="AndMoreTyping_one">كذلك %1$d عضو آخر يقوم بالكتابة</string>
-    <string name="AndMoreTyping_two">كذلك %1$d عضوان آخران يقومان بالكتابة</string>
-    <string name="AndMoreTyping_few">كذلك %1$d أعضاء آخرون يقومون بالكتابة</string>
-    <string name="AndMoreTyping_many">كذلك %1$d عضو آخرون يقومون بالكتابة</string>
-    <string name="AndMoreTyping_other">كذلك %1$d عضو آخرون يقومون بالكتابة</string>
-    <string name="NewMessages_zero">لا يوجد رسائل جديدة</string>
-    <string name="NewMessages_one">%1$d رسالة جديدة</string>
-    <string name="NewMessages_two">%1$d رسالتان جديدتان</string>
-    <string name="NewMessages_few">%1$d رسائل جديدة</string>
-    <string name="NewMessages_many">%1$d رسالة جديدة</string>
-    <string name="NewMessages_other">%1$d رسالة جديدة</string>
-    <string name="messages_zero">لا يوجد رسائل</string>
-    <string name="messages_one">%1$d رسالة</string>
-    <string name="messages_two">%1$d رسالتان</string>
-    <string name="messages_few">%1$d رسائل</string>
-    <string name="messages_many">%1$d رسالة</string>
-    <string name="messages_other">%1$d رسالة</string>
-    <string name="comments_zero">%1$d تعليقات</string>
-    <string name="comments_one">%1$d تعليق</string>
-    <string name="comments_two">%1$d تعليقان</string>
-    <string name="comments_few">%1$d تعليقات</string>
-    <string name="comments_many">%1$d تعليق</string>
-    <string name="comments_other">%1$d تعليق</string>
-    <string name="items_zero">لا يوجد ملفات</string>
-    <string name="items_one">%1$d ملف</string>
-    <string name="items_two">%1$d ملف</string>
-    <string name="items_few">%1$d ملفات</string>
-    <string name="items_many">%1$d ملف</string>
-    <string name="items_other">%1$d ملف</string>
-    <string name="FromChats_zero">من ولا محادثة</string>
-    <string name="FromChats_one">من %1$d محادثة</string>
-    <string name="FromChats_two">من %1$d محادثة</string>
-    <string name="FromChats_few">من %1$d محادثات</string>
-    <string name="FromChats_many">من %1$d محادثة</string>
-    <string name="FromChats_other">من %1$d محادثة</string>
-    <string name="Seconds_zero">%1$d ثانية</string>
-    <string name="Seconds_one">%1$d ثانية</string>
-    <string name="Seconds_two">%1$d ثانيتان</string>
-    <string name="Seconds_few">%1$d ثوانٍ</string>
-    <string name="Seconds_many">%1$d ثانية</string>
-    <string name="Seconds_other">%1$d ثانية</string>
-    <string name="Minutes_zero">%1$d دقيقة</string>
-    <string name="Minutes_one">%1$d دقيقة</string>
-    <string name="Minutes_two">%1$d دقيقتان</string>
-    <string name="Minutes_few">%1$d دقائق</string>
-    <string name="Minutes_many">%1$d دقيقة</string>
-    <string name="Minutes_other">%1$d دقيقة</string>
-    <string name="Hours_zero">%1$d ساعة</string>
-    <string name="Hours_one">%1$d ساعة</string>
-    <string name="Hours_two">%1$d ساعتان</string>
-    <string name="Hours_few">%1$d ساعات</string>
-    <string name="Hours_many">%1$d ساعة</string>
-    <string name="Hours_other">%1$d ساعة</string>
-    <string name="Days_zero">%1$d يوم</string>
-    <string name="Days_one">%1$d يوم</string>
-    <string name="Days_two">%1$d يومان</string>
-    <string name="Days_few">%1$d أيام</string>
-    <string name="Days_many">%1$d يوم</string>
-    <string name="Days_other">%1$d يوم</string>
-    <string name="Weeks_zero">%1$d أسبوع</string>
-    <string name="Weeks_one">%1$d أسبوع</string>
-    <string name="Weeks_two">%1$d أسبوعان</string>
-    <string name="Weeks_few">%1$d أسابيع</string>
-    <string name="Weeks_many">%1$d أسبوع</string>
-    <string name="Weeks_other">%1$d أسبوع</string>
-    <string name="Months_zero">%1$d شهر</string>
-    <string name="Months_one">%1$d شهر</string>
-    <string name="Months_two">%1$d شهران</string>
-    <string name="Months_few">%1$d أشهر</string>
-    <string name="Months_many">%1$d شهر</string>
-    <string name="Months_other">%1$d شهر</string>
-    <string name="Years_zero">%1$d سنة</string>
-    <string name="Years_one">%1$d سنة</string>
-    <string name="Years_two">%1$d سنتان</string>
-    <string name="Years_few">%1$d سنوات</string>
-    <string name="Years_many">%1$d سنة</string>
-    <string name="Years_other">%1$d سنة</string>
-    <string name="Users_zero">%1$d مستخدم</string>
-    <string name="Users_one">%1$d مستخدم</string>
-    <string name="Users_two">%1$d مستخدمان</string>
-    <string name="Users_few">%1$d مستخدمون</string>
-    <string name="Users_many">%1$d مستخدم</string>
-    <string name="Users_other">%1$d مستخدم</string>
-    <string name="Times_zero">%1$d مرات</string>
-    <string name="Times_one">%1$d مرة</string>
-    <string name="Times_two">%1$d مرة</string>
-    <string name="Times_few">%1$d مرة</string>
-    <string name="Times_many">%1$d مرة</string>
-    <string name="Times_other">%1$d مرة</string>
-    <string name="Meters_zero">%1$d أمتار</string>
-    <string name="Meters_one">%1$d متر</string>
-    <string name="Meters_two">%1$d متر</string>
-    <string name="Meters_few">%1$d متر</string>
-    <string name="Meters_many">%1$d متر</string>
-    <string name="Meters_other">%1$d متر</string>
-    <string name="Stickers_zero">%1$d ملصقات</string>
-    <string name="Stickers_one">%1$d ملصق</string>
-    <string name="Stickers_two">%1$d ملصق</string>
-    <string name="Stickers_few">%1$d ملصقات</string>
-    <string name="Stickers_many">%1$d ملصق</string>
-    <string name="Stickers_other">%1$d ملصق</string>
-    <string name="Photos_zero">%1$d صور</string>
-    <string name="Photos_one">%1$d صورة</string>
-    <string name="Photos_two">%1$d صور</string>
-    <string name="Photos_few">%1$d صور</string>
-    <string name="Photos_many">%1$d صور</string>
-    <string name="Photos_other">%1$d صور</string>
-    <string name="LastSeenMinutes_zero">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenMinutes_one">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenMinutes_two">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenMinutes_few">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenMinutes_many">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenMinutes_other">آخر ظهور قبل %1$d دقيقة</string>
-    <string name="LastSeenHours_zero">آخر ظهور قبل %1$d ساعة</string>
-    <string name="LastSeenHours_one">آخر ظهور قبل %1$d ساعة</string>
-    <string name="LastSeenHours_two">آخر ظهور قبل %1$d ساعة</string>
-    <string name="LastSeenHours_few">آخر ظهور قبل %1$d ساعة</string>
-    <string name="LastSeenHours_many">آخر ظهور قبل %1$d ساعة</string>
-    <string name="LastSeenHours_other">آخر ظهور قبل %1$d ساعة</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d رسالة معاد توجيهها</string>
-    <string name="ForwardedMessage_one">الرسالة المعاد توجيهها</string>
-    <string name="ForwardedMessage_two">%1$d رسالة معاد توجيهها</string>
-    <string name="ForwardedMessage_few">%1$d رسالة معاد توجيهها</string>
-    <string name="ForwardedMessage_many">%1$d رسالة معاد توجيهها</string>
-    <string name="ForwardedMessage_other">%1$d رسالة معاد توجيهها</string>
-    <string name="ForwardedFile_zero">%1$d ملف معاد توجيهه</string>
-    <string name="ForwardedFile_one">ملف معاد توجيهه</string>
-    <string name="ForwardedFile_two">%1$d ملف معاد توجيهه</string>
-    <string name="ForwardedFile_few">%1$d ملف معاد توجيهه</string>
-    <string name="ForwardedFile_many">%1$d ملف معاد توجيهه</string>
-    <string name="ForwardedFile_other">%1$d ملف معاد توجيهه</string>
-    <string name="ForwardedPhoto_zero">%1$d صورة معاد توجيهها</string>
-    <string name="ForwardedPhoto_one">صورة معاد توجيهها</string>
-    <string name="ForwardedPhoto_two">%1$d صورة معاد توجيهها</string>
-    <string name="ForwardedPhoto_few">%1$d صورة معاد توجيهها</string>
-    <string name="ForwardedPhoto_many">%1$d صورة معاد توجيهها</string>
-    <string name="ForwardedPhoto_other">%1$d صورة معاد توجيهها</string>
-    <string name="ForwardedVideo_zero">%1$d مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedVideo_one">مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedVideo_two">%1$d مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedVideo_few">%1$d مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedVideo_many">%1$d مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedVideo_other">%1$d مقطع مرئي معاد توجيهه</string>
-    <string name="ForwardedMusic_zero">%1$d مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedMusic_one">مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedMusic_two">%1$d مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedMusic_few">%1$d مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedMusic_many">%1$d مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedMusic_other">%1$d مقاطع صوتية معاد إرسالها</string>
-    <string name="ForwardedAudio_zero">%1$d رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedAudio_one">رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedAudio_two">%1$d رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedAudio_few">%1$d رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedAudio_many">%1$d رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedAudio_other">%1$d رسالة صوتية معاد توجيهها</string>
-    <string name="ForwardedLocation_zero">%1$d موقع معاد توجيهه</string>
-    <string name="ForwardedLocation_one">موقع معاد توجيهه</string>
-    <string name="ForwardedLocation_two">%1$d موقع معاد توجيهه</string>
-    <string name="ForwardedLocation_few">%1$d موقع معاد توجيهه</string>
-    <string name="ForwardedLocation_many">%1$d موقع معاد توجيهه</string>
-    <string name="ForwardedLocation_other">%1$d موقع معاد توجيهه</string>
-    <string name="ForwardedContact_zero">%1$d جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedContact_one">جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedContact_two">%1$d جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedContact_few">%1$d جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedContact_many">%1$d جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedContact_other">%1$d جهة اتصال معاد توجيهها</string>
-    <string name="ForwardedSticker_zero">%1$d ملصق معاد توجيهها</string>
-    <string name="ForwardedSticker_one">ملصق معاد توجيهه</string>
-    <string name="ForwardedSticker_two">%1$d ملصق معاد توجيهه</string>
-    <string name="ForwardedSticker_few">%1$d ملصق معاد توجيهه</string>
-    <string name="ForwardedSticker_many">%1$d ملصق معاد توجيهه</string>
-    <string name="ForwardedSticker_other">%1$d ملصق معاد توجيهه</string>
-    <string name="AndOther_zero">و %1$d غيرهم</string>
-    <string name="AndOther_one">و %1$d غيره</string>
-    <string name="AndOther_two">و %1$d غيرهم</string>
-    <string name="AndOther_few">و %1$d غيرهم</string>
-    <string name="AndOther_many">و %1$d غيرهم</string>
-    <string name="AndOther_other">و %1$d غيرهم</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">MMM dd</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">MMMM d</string>
-    <string name="chatFullDate">MMMM d, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s الساعة %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
deleted file mode 100644
index 7868b705f..000000000
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--Translation by iLLogical2007, DanielGroeger and everyone from https://github.com/DrKLO/Telegram/pull/129 whom I didn't notice -->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">Deutsch</string>
-    <string name="LanguageNameInEnglish">German</string>
-    <string name="LanguageCode">de</string>
-    <!--signin view-->
-    <string name="YourPhone">Dein Telefon</string>
-    <string name="StartText">Bitte bestätige deine Landesvorwahl und deine Telefonnummer.</string>
-    <string name="ChooseCountry">Wähle ein Land</string>
-    <string name="WrongCountry">Falsche Landesvorwahl</string>
-    <!--code enter view-->
-    <string name="YourCode">Dein Code</string>
-    <string name="SentSmsCode">Wir haben dir eine SMS mit einem Aktivierungscode zugeschickt</string>
-    <string name="CallText">Wir rufen dich an in %1$d:%2$02d</string>
-    <string name="Calling">Wir rufen dich an…</string>
-    <string name="Code">Code</string>
-    <string name="WrongNumber">Falsche Nummer?</string>
-    <string name="DidNotGetTheCode">Code nicht erhalten?</string>
-    <!--signup view-->
-    <string name="YourName">Dein Name</string>
-    <string name="RegisterText">Gib deinen Vor- und Nachnamen ein</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Vorname (erforderlich)</string>
-    <string name="LastName">Nachname (optional)</string>
-    <string name="CancelRegistration">Registrierung abbrechen</string>
-    <!--chats view-->
-    <string name="Settings">Einstellungen</string>
-    <string name="Contacts">Kontakte</string>
-    <string name="NewGroup">Neue Gruppe</string>
-    <string name="Yesterday">gestern</string>
-    <string name="NoResult">Keine Ergebnisse</string>
-    <string name="NoChats">Noch keine Chats…</string>
-    <string name="NoChatsHelp">Tippe unten auf den Stift für deine erste\nChatnachricht oder auf den Menüknopf\num die restlichen Optionen zu öffnen.</string>
-    <string name="WaitingForNetwork">Warte auf Netzwerk...</string>
-    <string name="Connecting">Verbinde…</string>
-    <string name="Updating">Aktualisiere…</string>
-    <string name="NewSecretChat">Neuer Geheimer Chat</string>
-    <string name="AwaitingEncryption">Warte, bis %s online geht…</string>
-    <string name="EncryptionRejected">Geheimer Chat beendet</string>
-    <string name="EncryptionProcessing">Tausche Schlüssel aus…</string>
-    <string name="EncryptedChatStartedOutgoing">%s ist deinem geheimen Chat beigetreten.</string>
-    <string name="EncryptedChatStartedIncoming">Du bist dem geheimen Chat beigetreten.</string>
-    <string name="ClearHistory">Verlauf löschen</string>
-    <string name="ClearHistoryCache">Cache leeren</string>
-    <string name="DeleteChat">Löschen und beenden</string>
-    <string name="DeleteChatUser">Chat löschen</string>
-    <string name="HiddenName">Gelöschtes Konto</string>
-    <string name="SelectChat">Chat auswählen</string>
-    <string name="PhotoTip">Tippen und Halten</string>
-    <string name="CompatibilityChat">%1$s benutzt eine ältere Version von Telegram, sodass Fotos in Geheimen Chats im Kompatibilitätsmodus angezeigt werden.\n\nSobald %2$s Telegram aktualisiert, werden Fotos mit Timern von 1 Minute und kürzer per \"Tippen und Halten\" angezeigt. Du wirst benachrichtigt, sobald dein Chatpartner ein Bildschirmfoto macht.</string>
-    <string name="SearchMessages">NACHRICHTEN</string>
-    <string name="Search">Suche</string>
-    <string name="MuteNotifications">Stummschalten</string>
-    <string name="MuteFor">Stumm für %1$s</string>
-    <string name="UnmuteNotifications">Stumm aus</string>
-    <string name="WillUnmuteIn">In %1$s</string>
-    <string name="MuteDisable">Dauerhaft Stumm</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">LETZTE</string>
-    <string name="LinkPreview">Linkvorschau</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Zum Admin machen</string>
-    <string name="DescriptionInfoMega">Beschreibe deine Gruppe (optional).</string>
-    <string name="LeaveMega">Gruppe verlassen</string>
-    <string name="DeleteMega">Gruppe Löschen</string>
-    <string name="LeaveMegaMenu">Gruppe verlassen</string>
-    <string name="DeleteMegaMenu">Gruppe löschen</string>
-    <string name="MegaDeleteInfo">Du verlierst alle Nachrichten der Gruppe.</string>
-    <string name="MegaAdminsInfo">Administratoren helfen dir, deinen Kanal zu verwalten. Tippen und halten um sie zu löschen.</string>
-    <string name="MegaDeleteAlert">Wenn du diese Gruppe löschst, werden alle Mitglieder und alle Nachrichten entfernt. Wirklich löschen?</string>
-    <string name="ActionCreateMega">Gruppe erstellt</string>
-    <string name="MegaAddedBy">un1 hat dich hinzugefügt</string>
-    <string name="MegaLeaveAlert">Möchtest du wirklich diese Gruppe verlassen?</string>
-    <string name="GroupUserCantAdd">Du kannst diesen Nutzer nicht hinzufügen.</string>
-    <string name="GroupUserAddLimit">Leider ist diese Gruppe schon voll.</string>
-    <string name="GroupUserLeftError">Dieser Nutzer hat die Gruppe zu verlassen, deshalb kannst du ihn nicht wieder einladen.</string>
-    <string name="GroupUserCantAdmin">Es gibt bereits zu viele Administratoren.</string>
-    <string name="GroupUserCantBot">Es gibt bereits zu viele Bots.</string>
-    <string name="ActionMigrateFromGroup">Gruppe wurde in eine Supergruppe geändert</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s wurde in eine Supergruppe geändert</string>
-    <string name="NoBlockedGroup">Blockierte Nutzer können nur durch Admins erneut hinzugefügt werden. Einladungslinks funktionieren nicht.</string>
-    <string name="NewChannel">Neuer Kanal</string>
-    <string name="EnterChannelName">Kanalname</string>
-    <string name="Comments">Kommentare</string>
-    <string name="CommentsInfo">Wenn du Kommentare aktivierst, können sich alle an der Diskussion beteiligen.</string>
-    <string name="AddMutual">Kontakte zum Kanal hinzufügen</string>
-    <string name="ChannelUsernameHelp">Jeder kann diesen Link teilen und deinen Kanal in der Telegramsuche finden.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">Link</string>
-    <string name="ChannelPrivateLinkHelp">Alle Telegramnutzer können mit diesem Link deinem Kanal beitreten, du kannst ihn aber jederzeit widerrufen.</string>
-    <string name="DescriptionPlaceholder">Beschreibung</string>
-    <string name="DescriptionInfo">Beschreibe deinen Kanal (optional).</string>
-    <string name="ChannelPublic">öffentlich</string>
-    <string name="ChannelPublicInfo">Kann jeder über die Suche finden</string>
-    <string name="ChannelPrivate">privat</string>
-    <string name="ChannelPrivateInfo">Kann man nur per Einladungslink finden</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Einladungslink</string>
-    <string name="ChannelAddMembers">Mitglieder hinzufügen</string>
-    <string name="LeaveChannel">Kanal verlassen</string>
-    <string name="LeaveChannelMenu">Kanal verlassen</string>
-    <string name="ChannelSettings">Einstellungen</string>
-    <string name="ChannelJoin">BEITRETEN</string>
-    <string name="OpenChannelProfile">Info</string>
-    <string name="ChannelBroadcast">Broadcast</string>
-    <string name="ChannelComment">Kommentar</string>
-    <string name="ShowDiscussion">Kommentare zeigen</string>
-    <string name="ChannelAlertTitle">Was ist ein Kanal?</string>
-    <string name="ChannelAlertText">In einem Kanal kannst du deine Nachrichten an ein großes Publikum schicken.</string>
-    <string name="ChannelAlertCreate">KANAL ERSTELLEN</string>
-    <string name="LinkInUse">Leider ist der Name schon belegt.</string>
-    <string name="LinkInvalid">Der Name ist ungültig.</string>
-    <string name="LinkInvalidShort">Kanalnamen benötigen mindestens 5 Zeichen.</string>
-    <string name="LinkInvalidLong">Der Name darf maximal 32 Zeichen haben.</string>
-    <string name="LinkInvalidStartNumber">Kanalnamen dürfen nicht mit einer Zahl anfangen.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Überprüfe Namen...</string>
-    <string name="LinkAvailable">%1$s ist verfügbar.</string>
-    <string name="ChannelMembers">Mitglieder</string>
-    <string name="ChannelBlockedUsers">Blockierte Nutzer</string>
-    <string name="ChannelAdministrators">Administratoren</string>
-    <string name="ChannelDelete">Kanal löschen</string>
-    <string name="ChannelDeleteMenu">Kanal löschen</string>
-    <string name="ChannelDeleteAlert">Wenn du diesen Kanal löschst, werden alle Mitglieder und alle Nachrichten entfernt. Wirklich löschen?</string>
-    <string name="ChannelLeaveAlert">Möchtest du wirklich diesen Kanal verlassen?</string>
-    <string name="ChannelDeleteInfo">Du verlierst dadurch alle Nachrichten des Kanals.</string>
-    <string name="ChannelEdit">Bearbeiten</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Wenn du einen öffentlichen Link für deinen Kanal festlegst, kann ihn jeder über die Suche finden und beitreten.\n\nWenn du das nicht möchtest, erstelle besser keinen Link.</string>
-    <string name="ChannelPublicEmptyUsername">Bitte wähle einen Link für deinen öffentlichen Kanal, damit andere ihn finden und weiter verbreiten können.\n\nWenn du das nicht möchtest, empfehlen wir dir einen privaten Kanal.</string>
-    <string name="ActionCreateChannel">Kanal erstellt</string>
-    <string name="ActionChannelChangedPhoto">Bild geändert</string>
-    <string name="ActionChannelRemovedPhoto">Bild gelöscht</string>
-    <string name="ActionChannelChangedTitle">Kanalname zu un2 geändert</string>
-    <string name="ChannelPublicLimitReached">Du hast zu viele öffentliche Kanäle erstellt. Du kannst entweder einen privaten Kanal erstellen oder einen bestehenden Kanal löschen.</string>
-    <string name="ChannelModerator">Moderator</string>
-    <string name="ChannelCreator">Gründer</string>
-    <string name="ChannelEditor">Administrator</string>
-    <string name="ChannelMute">STUMM</string>
-    <string name="ChannelUnmute">STUMM AUS</string>
-    <string name="ChannelAddAdmin">Administrator hinzufügen</string>
-    <string name="ChannelInviteViaLink">Per Link einladen</string>
-    <string name="ChannelAddUserAdminAlert">Sicher, dass %1$s ein Administrator werden soll?</string>
-    <string name="ChannelRemoveUserAdmin">Entfernen</string>
-    <string name="ChannelMembersInfo">Nur Administratoren sehen diese Liste.</string>
-    <string name="ChannelAdminNotParticipant">Dieser Nutzer ist noch nicht im Kanal; willst du ihn einladen?</string>
-    <string name="ChannelLinkInfo">Jeder, der Telegram installiert hat, kann anhand dieses Links in deinen Kanal.</string>
-    <string name="ChannelAdminsInfo">Administratoren helfen dir, deinen Kanal zu verwalten. Tippen und halten um sie zu löschen.</string>
-    <string name="ChannelJoinTo">Möchtest du dem Kanal \'%1$s\' beitreten?</string>
-    <string name="ChannelCantOpenPrivate">Dieser Chat ist nicht mehr zugänglich.</string>
-    <string name="ChannelAddTo">%1$s zum Kanal hinzufügen?</string>
-    <string name="ChannelUserLeftError">Dieser Nutzer hat die Gruppe zu verlassen, deshalb kannst du ihn nicht wieder einladen.</string>
-    <string name="ChannelUserCantAdd">Du kannst diesen Nutzer nicht einladen.</string>
-    <string name="ChannelUserCantAdmin">Es gibt bereits zu viele Administratoren in diesem Kanal.</string>
-    <string name="ChannelUserCantBot">Es gibt bereits zu viele Bots.</string>
-    <string name="ChannelUserAddLimit">Du kannst nur die ersten 200 Leute einladen, aber unbegrenzt viele können dem Kanal über den Einladungslink beitreten. </string>
-    <string name="ChannelAddedBy">un1 hat dich hinzugefügt</string>
-    <string name="ChannelJoined">Du bist dem Kanal beigetreten</string>
-    <string name="ChannelRemoveUser">Aus Kanal entfernen</string>
-    <string name="ChannelCantSendMessage">Du darfst in diesem Kanal nichts schreiben.</string>
-    <string name="ChannelAddedByNotification">%1$s hat dich dem Kanal %2$s hinzugefügt</string>
-    <string name="ChannelPhotoEditNotification">Kanal %1$s hat das Bild geändert</string>
-    <string name="ChannelMessageGroupNoText">%1$s hat eine Nachricht an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupPhoto">%1$s hat ein Bild an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupVideo">%1$s hat ein Video an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupContact">%1$s hat einen Kontakt an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupMap">%1$s hat einen Standort an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupDocument">%1$s hat eine Datei an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupGif">%1$s hat ein GIF an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupAudio">%1$s hat eine Sprachnachricht an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageGroupSticker">%1$s hat einen Sticker an den Kanal %2$s gesendet</string>
-    <string name="ChannelMessageNoText">%1$s hat eine Nachricht gesendet</string>
-    <string name="ChannelMessagePhoto">%1$s hat ein Bild gesendet</string>
-    <string name="ChannelMessageVideo">%1$s hat ein Video gesendet</string>
-    <string name="ChannelMessageContact">%1$s hat einen Kontakt gesendet</string>
-    <string name="ChannelMessageMap">%1$s hat einen Standort gesendet</string>
-    <string name="ChannelMessageDocument">%1$s hat eine Datei gesendet</string>
-    <string name="ChannelMessageGIF">%1$s hat ein GIF gesendet</string>
-    <string name="ChannelMessageAudio">%1$s hat eine Sprachnachricht gesendet</string>
-    <string name="ChannelMessageSticker">%1$s hat einen Sticker gesendet</string>
-    <string name="WhoCanAddMembers">Wer kann Mitglieder einladen?</string>
-    <string name="WhoCanAddMembersAllMembers">Alle Mitglieder</string>
-    <string name="WhoCanAddMembersAdmins">Nur Admins</string>
-    <string name="ChannelNotifyMembersInfoOn">Mitglieder werden benachrichtigt</string>
-    <string name="ChannelNotifyMembersInfoOff">Mitglieder werden nicht benachrichtigt</string>
-    <string name="ChannelSignMessages">Nachrichten unterschreiben</string>
-    <string name="ChannelSignMessagesInfo">Zeigt für neue Nachrichten an, welcher Admin die Nachricht gesendet hat.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Neue Broadcast Liste</string>
-    <string name="EnterListName">Listenname</string>
-    <string name="YouCreatedBroadcastList">Du hast eine Broadcast Liste erstellt</string>
-    <string name="AddRecipient">Empfänger hinzufügen</string>
-    <string name="KickFromBroadcast">Aus Broadcast Liste entfernen</string>
-    <!--audio view-->
-    <string name="NoAudio">Bitte füge Musikdateien einfach deiner Android Musikbibliothek hinzu, um sie hier zu sehen.</string>
-    <string name="AttachMusic">Musik</string>
-    <string name="AudioUnknownArtist">Unbekannter Künstler</string>
-    <string name="AudioUnknownTitle">Unbekannter Titel</string>
-    <!--documents view-->
-    <string name="SelectFile">Datei auswählen</string>
-    <string name="FreeOfTotal">Freier Speicher: %1$s von %2$s</string>
-    <string name="UnknownError">Unbekannter Fehler</string>
-    <string name="AccessError">Zugriffsfehler</string>
-    <string name="NoFiles">Noch keine Dateien…</string>
-    <string name="FileUploadLimit">Die Datei darf nicht größer als %1$s sein</string>
-    <string name="NotMounted">Speicher nicht eingebunden</string>
-    <string name="UsbActive">USB-Transfer aktiv</string>
-    <string name="InternalStorage">Interner Speicher</string>
-    <string name="ExternalStorage">Externer Speicher</string>
-    <string name="SystemRoot">Systemverzeichnis</string>
-    <string name="SdCard">SD-Karte</string>
-    <string name="Folder">Ordner</string>
-    <string name="GalleryInfo">Bilder ohne Komprimierung senden</string>
-    <!--chat view-->
-    <string name="Invisible">unsichtbar</string>
-    <string name="Typing">schreibt…</string>
-    <string name="IsTyping">schreibt...</string>
-    <string name="AreTyping">tippen…</string>
-    <string name="IsRecordingAudio">%1$s nimmt etwas auf...</string>
-    <string name="IsSendingPhoto">%1$s schickt Bild...</string>
-    <string name="IsSendingVideo">%1$s schickt Video...</string>
-    <string name="IsSendingFile">%1$s schickt Datei...</string>
-    <string name="RecordingAudio">nimmt etwas auf...</string>
-    <string name="SendingPhoto">schickt Bild...</string>
-    <string name="SendingVideoStatus">schickt Video...</string>
-    <string name="SendingFile">schickt Datei...</string>
-    <string name="GotAQuestion">Hast du eine Frage\nzu Telegram?</string>
-    <string name="ChatTakePhoto">Foto aufnehmen</string>
-    <string name="ChatGallery">Galerie</string>
-    <string name="ChatLocation">Standort</string>
-    <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">Datei</string>
-    <string name="ChatCamera">Kamera</string>
-    <string name="NoMessages">Noch keine Nachrichten…</string>
-    <string name="ForwardedMessage">Weitergeleitete Nachricht</string>
-    <string name="From">Von</string>
-    <string name="NoRecent">Keine aktuellen</string>
-    <string name="Message">Nachricht</string>
-    <string name="TypeMessage">Nachricht</string>
-    <string name="ShareMyContactInfo">Meine Nummer teilen</string>
-    <string name="AddToContacts">Zu Kontakten hinzufügen</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s hat dich zu einem\nEnde-zu-Ende verschlüsselten\nGeheimen Chat eingeladen.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Du hast %s zu einem\nEnde-zu-Ende verschlüsselten\nGeheimen Chat eingeladen.</string>
-    <string name="EncryptedDescriptionTitle">Geheime Chats in Kürze:</string>
-    <string name="EncryptedDescription1">Keine Serverspeicherung</string>
-    <string name="EncryptedDescription2">Selbstzerstörungs-Timer</string>
-    <string name="EncryptedDescription3">Verbieten Weiterleitung</string>
-    <string name="EncryptedDescription4">Löschen sich bei Abmeldung</string>
-    <string name="YouWereKicked">Du wurdest aus der Gruppe entfernt</string>
-    <string name="YouLeft">Du hast die Gruppe verlassen</string>
-    <string name="DeleteThisGroup">Diese Gruppe löschen</string>
-    <string name="DeleteThisChat">Diesen Chat löschen</string>
-    <string name="SlideToCancel">WISCHEN UM ABZUBRECHEN</string>
-    <string name="SaveToDownloads">In Downloads speichern</string>
-    <string name="SaveToGIFs">GIF hinzufügen</string>
-    <string name="DeleteGif">GIF löschen?</string>
-    <string name="SaveToMusic">Musik speichern</string>
-    <string name="ShareFile">Teilen</string>
-    <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
-    <string name="UnsupportedAttachment">Nicht unterstützte Datei</string>
-    <string name="SetTimer">Selbstzerstörungs-Timer setzen</string>
-    <string name="ServiceNotifications">Servicemeldungen</string>
-    <string name="GettingLinkInfo">Lade Linkvorschau...</string>
-    <string name="OpenInBrowser">Im Browser öffnen</string>
-    <string name="CopyUrl">URL kopieren</string>
-    <string name="SendItems">%1$s senden</string>
-    <string name="OpenUrlAlert">URL %1$s öffnen?</string>
-    <string name="ReportSpam">SPAM MELDEN</string>
-    <string name="AddContactChat">KONTAKT HINZUFÜGEN</string>
-    <string name="ReportSpamAlert">Sicher, dass du Spam von diesem Nutzer melden willst?</string>
-    <string name="ReportSpamAlertGroup">Sicher, dass du Spam von dieser Gruppe melden willst?</string>
-    <string name="NobodyLikesSpam1">Derzeit kannst du nur Kontakten schreiben, die auch deine Nummer haben.</string>
-    <string name="NobodyLikesSpam2">Derzeit kannst du nur Kontakte hinzufügen, die auch deine Nummer haben.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/de#kann-keine-nachrichten-an-nicht-kontakte-senden</string>
-    <string name="MoreInfo">Mehr Infos</string>
-    <string name="ShareSendTo">Sende an...</string>
-    <string name="TapHereGifs">Hier tippen um gespeicherte GIFs zu sehen</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s hat den Selbstzerstörungs-Timer auf %2$s gesetzt</string>
-    <string name="MessageLifetimeChangedOutgoing">Du hast den Selbstzerstörungs-Timer auf %1$s gesetzt</string>
-    <string name="MessageLifetimeRemoved">%1$s hat den Selbstzerstörungs-Timer deaktiviert</string>
-    <string name="MessageLifetimeYouRemoved">Du hast den Selbstzerstörungs-Timer deaktiviert</string>
-    <string name="YouHaveNewMessage">Du hast eine neue Nachricht</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s hat dir eine Nachricht gesendet</string>
-    <string name="NotificationMessagePhoto">%1$s hat dir ein Foto gesendet</string>
-    <string name="NotificationMessageVideo">%1$s hat dir ein Video gesendet</string>
-    <string name="NotificationMessageContact">%1$s hat dir einen Kontakt gesendet</string>
-    <string name="NotificationMessageMap">%1$s hat dir einen Standort gesendet</string>
-    <string name="NotificationMessageDocument">%1$s hat dir eine Datei gesendet</string>
-    <string name="NotificationMessageGif">%1$s hat dir ein GIF gesendet</string>
-    <string name="NotificationMessageAudio">%1$s hat dir eine Sprachnachricht gesendet</string>
-    <string name="NotificationMessageSticker">%1$s hat dir einen Sticker gesendet</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s hat eine Nachricht an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupPhoto">%1$s hat ein Foto an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupVideo">%1$s hat ein Video an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupContact">%1$s hat einen Kontakt an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupMap">%1$s hat einen Standort an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupDocument">%1$s hat eine Datei an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupGif">%1$s hat ein GIF an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupAudio">%1$s hat eine Sprachnachricht an die Gruppe %2$s gesendet</string>
-    <string name="NotificationMessageGroupSticker">%1$s hat einen Sticker an die Gruppe %2$s gesendet</string>
-    <string name="NotificationInvitedToGroup">%1$s hat dich in die Gruppe %2$s eingeladen</string>
-    <string name="NotificationEditedGroupName">%1$s hat den Namen der Gruppe %2$s geändert</string>
-    <string name="NotificationEditedGroupPhoto">%1$s hat das Bild der Gruppe %2$s geändert</string>
-    <string name="NotificationGroupAddMember">%1$s hat %3$s in die Gruppe %2$s eingeladen</string>
-    <string name="NotificationGroupAddSelf">%1$s ist in die Gruppe %2$s zurückgekehrt</string>
-    <string name="NotificationGroupKickMember">%1$s hat %3$s aus der Gruppe %2$s entfernt</string>
-    <string name="NotificationGroupKickYou">%1$s hat dich aus der Gruppe %2$s entfernt</string>
-    <string name="NotificationGroupLeftMember">%1$s hat die Gruppe %2$s verlassen</string>
-    <string name="NotificationContactJoined">%1$s benutzt jetzt Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nWir haben eine Anmeldung von einem neuen Gerät am %2$s festgestellt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du das nicht selbst gewesen bist, melde die entsprechende Sitzung in den Telegram Einstellungen unter Privatsphäre und Sicherheit - Sitzungen unverzüglich ab.\n\nKennst du schon unsere zweistufige Bestätigung? Diese kannst du in den Telegram Einstellungen unter Privatsphäre und Sicherheit optional aktivieren.\n\nDein Telegram Team</string>
-    <string name="NotificationContactNewPhoto">%1$s hat das Profilbild geändert</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s ist per Einladungslink der Gruppe %2$s beigetreten</string>
-    <string name="Reply">Antworten</string>
-    <string name="ReplyToGroup">%1$s antworten</string>
-    <string name="ReplyToUser">%1$s antworten</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Kontakt auswählen</string>
-    <string name="NoContacts">Noch keine Kontakte</string>
-    <string name="InviteText">Hey, komm auch zu Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">um</string>
-    <string name="YesterdayAt">gestern um</string>
-    <string name="Online">online</string>
-    <string name="LastSeen">zul. online</string>
-    <string name="LastSeenDate">zul. online</string>
-    <string name="LastSeenNow">zul. online gerade eben</string>
-    <string name="InviteFriends">Freunde einladen</string>
-    <string name="GlobalSearch">GLOBALE SUCHE</string>
-    <string name="Lately">zuletzt kürzlich gesehen</string>
-    <string name="WithinAWeek">innerhalb einer Woche</string>
-    <string name="WithinAMonth">innerhalb eines Monats</string>
-    <string name="ALongTimeAgo">vor langer Zeit gesehen</string>
-    <string name="NewMessageTitle">Neue Nachricht</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Sende Nachricht an…</string>
-    <string name="SoftUserLimitAlert">Sobald du diese Gruppe zu einer Supergruppe erweitert hast, kannst du mehr Nutzer einladen.</string>
-    <string name="EnterGroupNamePlaceholder">Gruppenname</string>
-    <string name="GroupName">Gruppenname</string>
-    <string name="MembersCount">%1$d/%2$d Mitglieder</string>
-    <string name="JoinToGroup">Möchtest du dem Chat \'%1$s\' beitreten?</string>
-    <string name="JoinToGroupErrorFull">Leider ist diese Gruppe schon voll.</string>
-    <string name="JoinToGroupErrorNotExist">Leider gibt es diesen Chat nicht.</string>
-    <string name="LinkCopied">Link in die Zwischenablage kopiert</string>
-    <string name="InviteToGroupByLink">Per Link zur Gruppe einladen</string>
-    <string name="InviteLink">Einladungslink</string>
-    <string name="RevokeAlert">Bist du sicher, dass du diesen Link widerrufen willst? Dadurch kann ihn niemand mehr nutzen.</string>
-    <string name="RevokeAlertNewLink">Der vorige Link ist nun inaktiv. Ein neuer Einladungslink wurde gerade erstellt.</string>
-    <string name="RevokeButton">Widerrufen</string>
-    <string name="RevokeLink">Link widerrufen</string>
-    <string name="CopyLink">Link kopieren</string>
-    <string name="ShareLink">Link teilen</string>
-    <string name="LinkInfo">Jeder, der Telegram installiert hat, kann anhand dieses Links in deine Gruppe.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Administratoren</string>
-    <string name="SetAdminsAll">Alle Mitglieder sind Admins</string>
-    <string name="SetAdminsAllInfo">Gruppenmitglieder können neue Leute hinzufügen sowie den Gruppennamen und das Bild ändern.</string>
-    <string name="SetAdminsNotAllInfo">Nur Admins können neue Leute hinzufügen und entfernen, den Gruppennamen und das Bild ändern.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Geteilte Medien</string>
-    <string name="SETTINGS">Einstellungen</string>
-    <string name="AddMember">Mitglied hinzufügen</string>
-    <string name="SetAdmins">Administratoren</string>
-    <string name="DeleteAndExit">Löschen und Gruppe verlassen</string>
-    <string name="Notifications">Mitteilungen</string>
-    <string name="KickFromGroup">Aus der Gruppe entfernen</string>
-    <string name="ConvertGroup">In Supergruppe ändern</string>
-    <string name="ConvertGroupAlert">Gruppenmitglieder müssen ihre Telegram-App aktualisieren um diese Supergruppe benutzen zu können. Wirklich diese Gruppe in eine Supergruppe ändern?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Gruppenlimit erreicht.<![CDATA[</b>]]>\n\nFür weitere Funktionen und um das Limit aufzuheben in Supergruppe ändern:\n\n• Bis zu %1$s sind nun möglich\n• Neue Mitglieder sehen gesamten Verlauf\n• Mitteilungen sind standardmäßig stumm\n• Admins können alle Nachrichten löschen</string>
-    <!--contact info view-->
-    <string name="ShareContact">Teilen</string>
-    <string name="AddContact">Hinzufügen</string>
-    <string name="AddContactTitle">Kontakt hinzufügen</string>
-    <string name="BlockContact">Blockieren</string>
-    <string name="EditContact">Bearbeiten</string>
-    <string name="DeleteContact">Löschen</string>
-    <string name="PhoneHome">Festnetz</string>
-    <string name="PhoneMobile">Mobil</string>
-    <string name="PhoneWork">Arbeit</string>
-    <string name="PhoneOther">Sonstiges</string>
-    <string name="PhoneMain">Hauptnummer</string>
-    <string name="StartEncryptedChat">Geheimen Chat starten</string>
-    <string name="CreateEncryptedChatError">Es ist ein Fehler aufgetreten.</string>
-    <string name="EncryptionKey">Geheimer Schlüssel</string>
-    <string name="MessageLifetime">Selbstzerstörungs-Timer</string>
-    <string name="ShortMessageLifetimeForever">Aus</string>
-    <string name="EncryptionKeyDescription">Bild und Text zeigen den aktuellen Schlüssen dieses geheimen Chats mit <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Sehen sie auf dem Gerät von <![CDATA[<b>]]>%2$s<![CDATA[</b>]]> genau so aus, ist eure Sicherheit garantiert.<![CDATA[<br><br>]]>Erfahre mehr unter telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq/de#geheime-chats</string>
-    <string name="NumberUnknown">Unbekannt</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Telefon</string>
-    <!--usernames-->
-    <string name="Username">Benutzername</string>
-    <string name="UsernamePlaceholder">Dein Benutzername</string>
-    <string name="UsernameInUse">Leider ist dieser Benutzername vergeben.</string>
-    <string name="UsernameInvalid">Benutzername leider nicht erlaubt.</string>
-    <string name="UsernameInvalidShort">Ein Benutzername benötigt mindestens 5 Zeichen.</string>
-    <string name="UsernameInvalidLong">Ein Benutzername darf maximal 32 Zeichen haben.</string>
-    <string name="UsernameInvalidStartNumber">Benutzernamen dürfen leider nicht mit einer Zahl anfangen.</string>
-    <string name="UsernameHelp">Wähle einen öffentlichen Benutzernamen, wenn du von anderen bei <![CDATA[<b>]]>Telegram<![CDATA[</b>]]> gefunden werden willst — ohne, dass sie deine Nummer kennen müssen.<![CDATA[<br><br>]]>Erlaubt sind <![CDATA[<b>]]>a-z<![CDATA[</b>]]>, <![CDATA[<b>]]>0-9<![CDATA[</b>]]> und Unterstriche. Die Mindestlänge beträgt <![CDATA[<b>]]>5<![CDATA[</b>]]> Zeichen.</string>
-    <string name="UsernameChecking">Prüfe Benutzername...</string>
-    <string name="UsernameAvailable">%1$s ist verfügbar.</string>
-    <string name="UsernameEmpty">Keiner</string>
-    <string name="ErrorOccurred">Es ist ein Fehler aufgetreten.</string>
-    <!--stickers view-->
-    <string name="Stickers">Sticker</string>
-    <string name="StickersInfo">Künstler können eigene Sticker-Pakete über unseren Sticker Bot (@stickers) einstellen.\n\nNutzer fügen neue Sticker durch Antippen eines Stickers und dann \"Hinzufügen\" hinzu.</string>
-    <string name="AddStickers">Sticker hinzufügen</string>
-    <string name="AddToStickers">Sticker hinzufügen</string>
-    <string name="AddStickersNotFound">Sticker nicht gefunden</string>
-    <string name="StickersRemoved">Sticker entfernt</string>
-    <string name="AddStickersInstalled">Neue Sticker hinzugefügt</string>
-    <string name="StickersHide">Verstecken</string>
-    <string name="StickersShow">Zeigen</string>
-    <string name="StickersShare">Teilen</string>
-    <string name="StickersCopy">Link kopieren</string>
-    <string name="StickersRemove">Entfernen</string>
-    <string name="NoStickers">Noch keine Sticker</string>
-    <string name="TooMuchStickersets">Leider hast du die maximale Anzahl an Stickerpaketen erreicht.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Alle Einstellungen für Mitteilungen zurücksetzen</string>
-    <string name="TextSize">Textgröße für Nachrichten</string>
-    <string name="AskAQuestion">Eine Frage stellen</string>
-    <string name="EnableAnimations">Animationen aktivieren</string>
-    <string name="Unblock">Freigeben</string>
-    <string name="UnblockText">Gedrückt halten um freizugeben.</string>
-    <string name="NoBlocked">Keine blockierten Benutzer</string>
-    <string name="MessageNotifications">Nachrichten</string>
-    <string name="Alert">Benachrichtigung</string>
-    <string name="MessagePreview">Vorschau</string>
-    <string name="GroupNotifications">Gruppen</string>
-    <string name="Sound">Nachrichtenton auswählen</string>
-    <string name="InAppNotifications">In-App </string>
-    <string name="InAppSounds">In-App-Töne</string>
-    <string name="InAppVibrate">In-App-Vibration</string>
-    <string name="Vibrate">Vibrieren</string>
-    <string name="InAppPreview">In-App-Vorschau</string>
-    <string name="Reset">Zurücksetzen</string>
-    <string name="ResetAllNotifications">Mitteilungseinstellungen zurücksetzen</string>
-    <string name="UndoAllCustom">Setzt alle benutzerdefinierten Einstellungen für Mitteilungen zurück</string>
-    <string name="NotificationsAndSounds">Mitteilungen und Töne</string>
-    <string name="BlockedUsers">Blockierte Benutzer</string>
-    <string name="LogOut">Abmelden</string>
-    <string name="NoSound">Kein Ton</string>
-    <string name="Default">Standard</string>
-    <string name="Support">Support</string>
-    <string name="OnlyIfSilent">Wenn lautlos</string>
-    <string name="ChatBackground">Chat-Hintergrundbild</string>
-    <string name="MessagesSettings">Nachrichten</string>
-    <string name="SendByEnter">Mit Enter senden</string>
-    <string name="TerminateAllSessions">Alle anderen Geräte abmelden</string>
-    <string name="Events">Ereignisse</string>
-    <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
-    <string name="Language">Sprache</string>
-    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von ehrenamtlichen Helfern betreut wird. Wir versuchen so schnell wie möglich zu antworten, dies kann jedoch manchmal ein bisschen dauern.<![CDATA[<br><br>]]>Bitte schau auch in den <![CDATA[<a href=\"https://telegram.org/faq/de\">Fragen und Antworten </a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href=\"https://telegram.org/faq/de#problembehandlung\">Problembehandlung</a>]]>.</string>
-    <string name="AskButton">Eine Frage stellen</string>
-    <string name="TelegramFaq">Fragen und Antworten</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq/de</string>
-    <string name="DeleteLocalization">Lokalisierung löschen?</string>
-    <string name="IncorrectLocalization">Falsche Sprachdatei</string>
-    <string name="Enabled">Aktiviert</string>
-    <string name="Disabled">Deaktiviert</string>
-    <string name="NotificationsService">Mitteilungsdienst</string>
-    <string name="NotificationsServiceDisableInfo">Sofern Google Play Dienste ausreichend für deine Mitteilungen sind, kannst du unseren Mitteilungsdienst abschalten. Wir empfehlen allerdings, unseren Dienst dauerhaft aktiviert zu lassen, um über neue Nachrichten in Echtzeit informiert zu werden.</string>
-    <string name="SortBy">sortiert nach</string>
-    <string name="ImportContacts">Kontakte importieren</string>
-    <string name="SortFirstName">Vorname</string>
-    <string name="SortLastName">Nachname</string>
-    <string name="LedColor">LED-Farbe</string>
-    <string name="PopupNotification">Popup Mitteilungen</string>
-    <string name="NoPopup">Kein Popup</string>
-    <string name="OnlyWhenScreenOn">Nur wenn Bildschirm „an“</string>
-    <string name="OnlyWhenScreenOff">Nur wenn Bildschirm „aus“</string>
-    <string name="AlwaysShowPopup">Popups immer anzeigen</string>
-    <string name="BadgeNumber">Kennzeichensymbol</string>
-    <string name="Short">Kurz</string>
-    <string name="Long">Lang</string>
-    <string name="SystemDefault">Systemvorgabe</string>
-    <string name="SettingsDefault">Telegramvorgabe</string>
-    <string name="AutomaticMediaDownload">Automatischer Mediendownload</string>
-    <string name="WhenUsingMobileData">Über Mobilfunk</string>
-    <string name="WhenConnectedOnWiFi">Über W-LAN</string>
-    <string name="WhenRoaming">Bei Roaming</string>
-    <string name="NoMediaAutoDownload">kein automatischer Download</string>
-    <string name="AutoplayGifs">GIFs autom. Abspielen</string>
-    <string name="RaiseToSpeak">Zum Sprechen ans Ohr</string>
-    <string name="SaveToGallerySettings">In der Galerie speichern</string>
-    <string name="EditName">Name bearbeiten</string>
-    <string name="NotificationsPriority">Priorität</string>
-    <string name="NotificationsPriorityDefault">Standard</string>
-    <string name="NotificationsPriorityLow">Niedrig</string>
-    <string name="NotificationsPriorityHigh">Hoch</string>
-    <string name="NotificationsPriorityMax">Max.</string>
-    <string name="RepeatNotificationsNever">Niemals</string>
-    <string name="RepeatNotifications">Erneut benachrichtigen</string>
-    <string name="PhoneNumberHelp">Du kannst deine Telefonnummer hier ändern. Dein Konto und alle Daten in der Telegram-Cloud, also Nachrichten, Medien, Kontakte, etc. werden auf das neue Konto übertragen.\n\n<![CDATA[<b>Wichtig:</b>]]> Alle deine Kontakte erhalten deine  <![CDATA[<b>neue Nummer</b>]]> ihrem Telefonbuch hinzugefügt, sofern sie deine alte Nummer gespeichert hatten und du sie nicht blockiert hattest.</string>
-    <string name="PhoneNumberAlert">Deinen Kontakten wird deine neue Nummer ihrem Telefonbuch hinzugefügt, sofern sie deine alte Nummer gespeichert hatten und du sie nicht blockiert hattest.</string>
-    <string name="PhoneNumberChange">NUMMER ÄNDERN</string>
-    <string name="ChangePhoneNewNumber">Neue Nummer</string>
-    <string name="ChangePhoneHelp">Der Bestätigungscode kommt per SMS an deine neue Nummer.</string>
-    <string name="ChangePhoneNumberOccupied">Die Telefonnummer %1$s ist bereits ein Telegram Konto. Bitte lösche es, bevor du mit der Übertragung auf das neue Konto startest.</string>
-    <string name="NotificationsOther">Sonstige</string>
-    <string name="NotificationsDisabled">Deaktiviert</string>
-    <string name="VibrationDisabled">Deaktiviert</string>
-    <string name="LedDisabled">Deaktiviert</string>
-    <string name="RepeatDisabled">Aus</string>
-    <string name="InChatSound">In-Chat-Töne</string>
-    <string name="SoundDefault">Standard</string>
-    <string name="VibrationDefault">Standard</string>
-    <string name="SmartNotifications">Intelligente Benachrichtigungen</string>
-    <string name="SmartNotificationsDisabled">Deaktiviert</string>
-    <string name="SmartNotificationsInfo">Höchstens %1$s innerhalb von %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Höchstens</string>
-    <string name="SmartNotificationsTimes">Mal</string>
-    <string name="SmartNotificationsWithin">innerhalb von</string>
-    <string name="SmartNotificationsMinutes">Minuten</string>
-    <string name="SecretWebPage">Linkvorschau</string>
-    <string name="SecretChat">Geheime Chats</string>
-    <!--cache view-->
-    <string name="CacheSettings">Cache-Einstellungen</string>
-    <string name="LocalDatabase">Lokale Datenbank</string>
-    <string name="LocalDatabaseClear">Textnachrichten-Cache leeren?</string>
-    <string name="LocalDatabaseInfo">Zwischengespeicherte Textnachrichten werden entfernt und die Datenbank optimiert um Speicherplatz zurückzuerhalten. Auf Null lässt sich die Größe jedoch nicht reduzieren, da die App einige Daten für den laufenden Betrieb benötigt.\n\nHinweis: Der Vorgang kann mehrere Minuten dauern.</string>
-    <string name="ClearMediaCache">Cache Leeren</string>
-    <string name="CacheClear">Leeren</string>
-    <string name="CalculatingSize">Berechne...</string>
-    <string name="LocalDocumentCache">Dateien</string>
-    <string name="LocalPhotoCache">Bilder</string>
-    <string name="LocalAudioCache">Sprachnachrichten</string>
-    <string name="LocalVideoCache">Videos</string>
-    <string name="LocalMusicCache">Musik</string>
-    <string name="LocalCache">Sonstige Dateien</string>
-    <string name="CacheEmpty">Leer</string>
-    <string name="KeepMedia">Medien behalten</string>
-    <string name="KeepMediaInfo">Bilder, Videos und andere Dateien, auf die du während dieser Zeit <![CDATA[<b>nicht zugegriffen</b>]]> hast, werden von diesem Gerät gelöscht, um Speicherplatz zu sparen.\n\nAlle Medien bleiben in der Telegram Cloud gespeichert und können jederzeit wieder heruntergeladen werden.</string>
-    <string name="KeepMediaForever">Dauerhaft</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Sitzungen</string>
-    <string name="CurrentSession">Aktuelles Gerät</string>
-    <string name="NoOtherSessions">Keine anderen Geräte</string>
-    <string name="NoOtherSessionsInfo">Du kannst dich von jedem Handy, Tablet und Computer bei Telegram mit derselben Telefonnummer anmelden. Alles wird immer sofort synchronisiert.</string>
-    <string name="OtherSessions">Andere Geräte</string>
-    <string name="SessionsInfo">Überprüfe alle deine angemeldeten Geräte.</string>
-    <string name="TerminateSessionInfo">Tippe auf eine Sitzung um sie zu beenden.</string>
-    <string name="TerminateSessionQuestion">Dieses Gerät abmelden?</string>
-    <string name="UnofficialApp">inoffizielle Version</string>
-    <!--passcode view-->
-    <string name="Passcode">Pincode-Sperre</string>
-    <string name="ChangePasscode">Pincode ändern</string>
-    <string name="ChangePasscodeInfo">Wenn du die Code-Sperre aktivierst, erscheint ein Schloss ganz oben über der Chatliste. Tippe auf das Schloss, um deine Chats zu sperren und zu entsperren.\n\nÜbrigens: Wenn du den Pincode vergisst, musst du Telegram löschen und neu installieren. Dadurch verlierst du alle Geheimen Chats.</string>
-    <string name="ChangePasscodeAlert">Du wirst nun ein Schloss über der Chatliste sehen. Tippe darauf um deine Chats mit dem neuen Pincode zu sperren.</string>
-    <string name="PasscodePIN">Pincode</string>
-    <string name="PasscodePassword">Kennwort</string>
-    <string name="EnterCurrentPasscode">Aktuellen Pincode eingeben</string>
-    <string name="EnterNewFirstPasscode">Pincode eingeben</string>
-    <string name="EnterNewPasscode">Neuen Pincode eingeben</string>
-    <string name="EnterYourPasscode">Deinen Pincode eingeben</string>
-    <string name="ReEnterYourPasscode">Neuen Pincode erneut eingben</string>
-    <string name="InvalidPasscode">Ungültiger Pincode</string>
-    <string name="PasscodeDoNotMatch">Pincode falsch</string>
-    <string name="AutoLock">Auto-Sperre</string>
-    <string name="AutoLockInfo">Sperrt App bei Inaktivität automatisch.</string>
-    <string name="AutoLockInTime">in %1$s</string>
-    <string name="AutoLockDisabled">Deaktiviert</string>
-    <string name="UnlockFingerprint">Per Fingerabdruck entsperren</string>
-    <string name="FingerprintInfo">Fingerabdruck bestätigen </string>
-    <string name="FingerprintHelp">Berührungssensor</string>
-    <string name="FingerprintNotRecognized">Abdruck nicht erkannt; erneut versuchen </string>
-    <!--media view-->
-    <string name="NoMedia">Die hier geteilten Bilder und Videos kannst du von jedem deiner Geräte aufrufen.</string>
-    <string name="DocumentsTitle">Geteilte Dateien</string>
-    <string name="SharedMediaTitle">Geteilte Medien</string>
-    <string name="LinksTitle">Geteilte Links</string>
-    <string name="AudioTitle">Geteilte Musik</string>
-    <string name="NoSharedAudio">Die hier geteilten Lieder kannst du von jedem deiner Geräte aufrufen.</string>
-    <string name="NoSharedFiles">Die hier geteilten Dateien kannst du von jedem deiner Geräte aufrufen.</string>
-    <string name="NoSharedLinks">Die hier geteilten Links kannst du von jedem deiner Geräte aufrufen.</string>
-    <!--map view-->
-    <string name="Map">Karte</string>
-    <string name="Satellite">Satellit</string>
-    <string name="Hybrid">Hybrid</string>
-    <string name="MetersAway">m entfernt</string>
-    <string name="KMetersAway">km entfernt</string>
-    <string name="SendLocation">Meinen Standort senden</string>
-    <string name="SendSelectedLocation">Diesen Standort senden</string>
-    <string name="ShareLocation">Standort</string>
-    <string name="AccurateTo">Auf %1$s genau</string>
-    <string name="NearbyPlaces">Oder wähle einen Ort</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Zeige alle Medien</string>
-    <string name="SaveToGallery">In der Galerie speichern</string>
-    <string name="Of">%1$d von %2$d</string>
-    <string name="Gallery">Galerie</string>
-    <string name="AllPhotos">Alle Fotos</string>
-    <string name="AllVideo">Alle Videos</string>
-    <string name="NoPhotos">Noch keine Fotos</string>
-    <string name="NoVideo">Noch keine Videos</string>
-    <string name="PleaseDownload">Medien bitte zuerst herunterladen</string>
-    <string name="NoRecentPhotos">Suchverlauf</string>
-    <string name="NoRecentGIFs">Suchverlauf</string>
-    <string name="SearchImages">BILDERSUCHE</string>
-    <string name="SearchImagesInfo">BILDERSUCHE</string>
-    <string name="SearchGifs">GIF-SUCHE</string>
-    <string name="SearchImagesTitle">Suche Bilder</string>
-    <string name="SearchGifsTitle">Suche GIFs</string>
-    <string name="CropImage">Bild zuschneiden</string>
-    <string name="EditImage">Bild bearbeiten</string>
-    <string name="Enhance">Verbessern</string>
-    <string name="Highlights">Lichter</string>
-    <string name="Contrast">Kontrast</string>
-    <string name="Exposure">Belichtung</string>
-    <string name="Warmth">Wärme</string>
-    <string name="Saturation">Sättigung</string>
-    <string name="Vignette">Vignette</string>
-    <string name="Shadows">Schatten</string>
-    <string name="Grain">Körnung</string>
-    <string name="Sharpen">Schärfe</string>
-    <string name="Fade">Verblassen</string>
-    <string name="Tint">Tönung</string>
-    <string name="TintShadows">TIEFEN</string>
-    <string name="TintHighlights">LICHTER</string>
-    <string name="Curves">Kurven</string>
-    <string name="CurvesAll">ALLE</string>
-    <string name="CurvesRed">ROT</string>
-    <string name="CurvesGreen">GRÜN</string>
-    <string name="CurvesBlue">BLAU</string>
-    <string name="Blur">Unschärfe</string>
-    <string name="BlurOff">Aus</string>
-    <string name="BlurLinear">Linear</string>
-    <string name="BlurRadial">Radial</string>
-    <string name="AreYouSureDeletePhoto">Möchtest du wirklich dieses Bild löschen?</string>
-    <string name="AreYouSureDeleteVideo">Möchtest du wirklich dieses Video löschen?</string>
-    <string name="DiscardChanges">Änderungen verwerfen?</string>
-    <string name="ClearSearch">Suchverlauf löschen?</string>
-    <string name="ClearButton">Löschen</string>
-    <string name="PickerPhotos">Bilder</string>
-    <string name="PickerVideo">Video</string>
-    <string name="AddCaption">Beschriftung...</string>
-    <string name="PhotoCaption">Bildbeschriftung</string>
-    <string name="VideoCaption">Videobeschriftung</string>
-    <string name="Caption">Beschriftung</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Zweistufige Bestätigung</string>
-    <string name="SetAdditionalPassword">Zusätzliches Kennwort festlegen</string>
-    <string name="SetAdditionalPasswordInfo">Du kannst ein eigenes Kennwort festlegen, um dich an einem neuen Gerät anzumelden, zusätzlich zum SMS-Code.</string>
-    <string name="YourPassword">Dein Kennwort</string>
-    <string name="PleaseEnterCurrentPassword">Bitte aktuelles Kennwort eingeben</string>
-    <string name="PleaseEnterFirstPassword">Kennwort eingeben</string>
-    <string name="PleaseEnterPassword">Bitte neues Kennwort eingeben</string>
-    <string name="PleaseReEnterPassword">Bitte erneut dein Kennwort eingeben</string>
-    <string name="RecoveryEmail">Wiederherstellung</string>
-    <string name="YourEmail">Deine E-Mail</string>
-    <string name="YourEmailInfo">Falls du dein Kennwort vergisst, benötigen wir deine richtige Email Adresse.</string>
-    <string name="YourEmailSkip">Überspringen</string>
-    <string name="YourEmailSkipWarning">Warnung</string>
-    <string name="YourEmailSkipWarningText">Keine gute Idee.\n\nWenn du dein Passwort vergisst, verlierst du den Zugang zu deinem Telegram Konto. Für immer, ohne Ausnahme.</string>
-    <string name="YourEmailAlmostThere">Fast geschafft!</string>
-    <string name="YourEmailAlmostThereText">Bitte überprüfe deine Mails (auch den Spam-Ordner) um die zweistufige Bestätigung abzuschließen.</string>
-    <string name="YourPasswordSuccess">Geschafft!</string>
-    <string name="YourPasswordSuccessText">Dein Kennwort für die zweistufige Bestätigung ist jetzt aktiv.</string>
-    <string name="ChangePassword">Kennwort ändern</string>
-    <string name="TurnPasswordOff">Kennwort deaktivieren</string>
-    <string name="SetRecoveryEmail">E-Mailadresse festlegen</string>
-    <string name="ChangeRecoveryEmail">E‑Mail-Adresse zur Wiederherstellung ändern</string>
-    <string name="TurnPasswordOffQuestion">Sicher, dass du dein Kennwort deaktivieren willst?</string>
-    <string name="PasswordHint">Kennwort-Erinnerung</string>
-    <string name="PasswordHintText">Bitte Hinweis auf dein Kennwort eingeben</string>
-    <string name="PasswordDoNotMatch">Kennwörter stimmen nicht überein</string>
-    <string name="AbortPassword">Einrichten abbrechen</string>
-    <string name="EmailPasswordConfirmText">Bitte folge diesen Schritten um die zweistufige Bestätigung abzuschließen:\n\n1. Überprüfe deine Mails (auch den Spam-Ordner)\n%1$s\n\n2. Auf den Link klicken.</string>
-    <string name="PasswordAsHintError">Der Hinweis darf nicht das Kennwort sein.</string>
-    <string name="PasswordEmailInvalid">Ungültige E-Mail</string>
-    <string name="RestorePasswordNoEmailTitle">Tut uns leid</string>
-    <string name="RestorePasswordNoEmailText">Da du für diesen Fall keine Email Adresse hinterlegt hast, kannst du nur noch hoffen, dass dir dein Kennwort wieder einfällt oder du musst dein Telegram Konto zurückzusetzen.</string>
-    <string name="RestoreEmailSent">Wir haben den Wiederherstellungscode an diese Adresse geschickt:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Überprüfe deine Mails und gib den 6-stelligen Code aus userer Email ein.</string>
-    <string name="RestoreEmailTrouble">Du hast keinen Zugang zu deiner Adresse %1$s?</string>
-    <string name="RestoreEmailTroubleText">Wenn du nicht in deine Emails kommst, kannst du nur hoffen, dass dir dein Kennwort wieder einfällt oder du musst dein Telegram Konto zurückzusetzen.</string>
-    <string name="ResetMyAccount">KONTO ZURÜCKSETZEN</string>
-    <string name="ResetMyAccountText">Wenn du dein Konto zurücksetzt, verlierst du alle Chats und Nachrichten, ebenso deine geteilten Bilder und Videos.</string>
-    <string name="ResetMyAccountWarning">Warnung</string>
-    <string name="ResetMyAccountWarningText">Dies kann nicht rückgängig gemacht werden.\n\nWenn du dein Konto zurücksetzt, sind alle Chats gelöscht.</string>
-    <string name="ResetMyAccountWarningReset">Zurücksetzen</string>
-    <string name="LoginPassword">Kennwort</string>
-    <string name="LoginPasswordText">Du hast die zweistufige Bestätigung aktiviert. Dein Konto ist mit einem zusätzlichem Kennwort geschützt.</string>
-    <string name="ForgotPassword">Kennwort vergessen?</string>
-    <string name="PasswordRecovery">Kennwort zurücksetzen</string>
-    <string name="PasswordCode">Code</string>
-    <string name="PasswordReset">Kennwort deaktiviert</string>
-    <string name="EnabledPasswordText">Du hast die zweistufige Bestätigung aktiviert.\nWenn du dich bei Telegram anmeldest, brauchst du dein Kennwort.</string>
-    <string name="PendingEmailText">Deine E-Mail Adresse %1$s wurde noch verifiziert und ist daher noch nicht aktiv.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privatsphäre und Sicherheit</string>
-    <string name="PrivacyTitle">Privatsphäre</string>
-    <string name="PrivacyLastSeen">Zuletzt gesehen</string>
-    <string name="LastSeenEverybody">Jeder</string>
-    <string name="LastSeenContacts">Meine Kontakte</string>
-    <string name="LastSeenNobody">Niemand</string>
-    <string name="LastSeenEverybodyMinus">Jeder (-%1$d)</string>
-    <string name="LastSeenContactsPlus">Meine Kontakte (+%1$d)</string>
-    <string name="LastSeenContactsMinus">Meine Kontakte (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">Meine Kontakte (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Niemand (+%1$d)</string>
-    <string name="SecurityTitle">Sicherheit</string>
-    <string name="DeleteAccountTitle">Automatische Kontolöschung</string>
-    <string name="DeleteAccountIfAwayFor">Wenn inaktiv für</string>
-    <string name="DeleteAccountHelp">Wenn du dich innerhalb dieser Zeit nicht anmeldest, wird dein Konto mit allen Nachrichten, Gruppen und Kontakten gelöscht.</string>
-    <string name="DeleteAccountNowConfirmation">Dein Konto löschen?</string>
-    <string name="LastSeenHelp">Bearbeite wer deinen Online Status sieht.</string>
-    <string name="LastSeenTitle">Wer kann deinen Online Status sehen?</string>
-    <string name="AddExceptions">Ausnahmen hinzufügen</string>
-    <string name="CustomHelp">Wichtig: Du kannst den \"zuletzt gesehen\" Status nur von Personen sehen, mit denen du auch deinen teilst. Ansonsten wird die ungefähre Zeit angezeigt (kürzlich, innerhalb einer Woche, innerhalb eines Monats).</string>
-    <string name="AlwaysShareWith">Immer teilen mit</string>
-    <string name="NeverShareWith">Niemals teilen mit</string>
-    <string name="CustomShareSettingsHelp">Hier kannst du Kontakte hinzufügen, für die eine Ausnahme gemacht werden soll.</string>
-    <string name="AlwaysShareWithTitle">Immer teilen</string>
-    <string name="AlwaysShareWithPlaceholder">Immer teilen mit...</string>
-    <string name="NeverShareWithTitle">Niemals teilen</string>
-    <string name="NeverShareWithPlaceholder">Niemals teilen mit...</string>
-    <string name="EmpryUsersPlaceholder">Hinzufügen</string>
-    <string name="PrivacyFloodControlError">Du hast zu oft probiert, deine Einstellungen zu ändern; bitte warte kurz.</string>
-    <string name="ClearOtherSessionsHelp">Alle Geräte außer diesem werden abgemeldet.</string>
-    <string name="RemoveFromListText">Auf Nutzer tippen und halten um zu löschen.</string>
-    <string name="GroupsAndChannels">Gruppen</string>
-    <string name="WhoCanAddMe">Wer kann mich in Gruppen einladen?</string>
-    <string name="WhoCanAddMeInfo">Du kannst bestimmen, wer dich in Gruppen oder Kanäle einladen darf.</string>
-    <string name="AlwaysAllow">Immer erlauben</string>
-    <string name="NeverAllow">Niemals erlauben</string>
-    <string name="AlwaysAllowPlaceholder">Immer erlauben...</string>
-    <string name="NeverAllowPlaceholder">Niemals erlauben...</string>
-    <string name="CustomShareInfo">Hier kannst du Nutzer hinzufügen, für die eine Ausnahme gemacht werden soll.</string>
-    <string name="GroupsAndChannelsHelp">Ändere, wer dich in Gruppen und Kanäle einladen kann.</string>
-    <string name="InviteToGroupError">Du kannst diesen Nutzer nicht hinzufügen, weil er das nicht erlaubt.</string>
-    <string name="InviteToChannelError">Du kannst diesen Nutzer nicht hinzufügen, weil er das nicht erlaubt.</string>
-    <string name="CreateGroupError">Du kannst mit diesen Nutzern keine Gruppe erstellen, weil sie es nicht erlauben.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Video bearbeiten</string>
-    <string name="OriginalVideo">Originalvideo</string>
-    <string name="EditedVideo">Bearbeitetes Video</string>
-    <string name="SendingVideo">Sende Video...</string>
-    <string name="CompressVideo">Video komprimieren</string>
-    <!--bot-->
-    <string name="Bot">Bot</string>
-    <string name="BotShare">Teilen</string>
-    <string name="BotInvite">Zu einer Gruppe hinzufügen</string>
-    <string name="BotSettings">Einstellungen</string>
-    <string name="BotHelp">Hilfe</string>
-    <string name="BotStatusRead">Zugriff auf Nachrichten</string>
-    <string name="BotStatusCantRead">kein Zugriff auf Nachrichten</string>
-    <string name="BotInfoTitle">Was kann dieser Bot?</string>
-    <string name="BotStart">STARTEN</string>
-    <string name="BotUnblock">NEU STARTEN</string>
-    <string name="BotStop">Bot Anhalten</string>
-    <string name="BotRestart">Bot Neu Starten</string>
-    <!--button titles-->
-    <string name="Next">Weiter</string>
-    <string name="Back">Zurück</string>
-    <string name="Done">Fertig</string>
-    <string name="Open">Öffnen</string>
-    <string name="Save">Speichern</string>
-    <string name="Cancel">Abbrechen</string>
-    <string name="Close">Schließen</string>
-    <string name="Add">Hinzufügen</string>
-    <string name="Edit">Bearbeiten</string>
-    <string name="Send">Senden</string>
-    <string name="Call">Anrufen</string>
-    <string name="Copy">Kopieren</string>
-    <string name="Delete">Löschen</string>
-    <string name="DeleteAndStop">Löschen und Anhalten</string>
-    <string name="Forward">Weiterleiten</string>
-    <string name="Retry">Erneut versuchen</string>
-    <string name="FromCamera">Von der Kamera</string>
-    <string name="FromGalley">Aus der Galerie</string>
-    <string name="DeletePhoto">Foto löschen</string>
-    <string name="Set">Wählen</string>
-    <string name="OK">OK</string>
-    <string name="Crop">SCHNEIDEN</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Du bist der Gruppe per Link beigetreten</string>
-    <string name="ActionInviteUser">un1 ist der Gruppe per Link beigetreten</string>
-    <string name="ActionKickUser">un1 hat un2 aus der Gruppe entfernt</string>
-    <string name="ActionLeftUser">un1 hat die Gruppe verlassen</string>
-    <string name="ActionAddUser">un1 hat un2 hinzugefügt</string>
-    <string name="ActionRemovedPhoto">un1 hat das Gruppenbild entfernt</string>
-    <string name="ActionChangedPhoto">un1 hat das Gruppenbild geändert</string>
-    <string name="ActionChangedTitle">un1 hat den Namen der Gruppe in un2 geändert</string>
-    <string name="ActionCreateGroup">un1 hat die Gruppe erstellt</string>
-    <string name="ActionYouKickUser">Du hast un2 aus der Gruppe entfernt</string>
-    <string name="ActionYouLeftUser">Du hast die Gruppe verlassen</string>
-    <string name="ActionYouAddUser">Du hast un2 hinzugefügt</string>
-    <string name="ActionYouRemovedPhoto">Du hast das Gruppenbild entfernt</string>
-    <string name="ActionYouChangedPhoto">Du hast das Gruppenbild geändert</string>
-    <string name="ActionYouChangedTitle">Du hast den Gruppennamen in un2 geändert</string>
-    <string name="ActionYouCreateGroup">Du hast die Gruppe erstellt</string>
-    <string name="ActionKickUserYou">un1 hat dich aus der Gruppe entfernt</string>
-    <string name="ActionAddUserYou">un1 hat dich hinzugefügt</string>
-    <string name="ActionAddUserSelf">un1 ist in die Gruppe zurückgekehrt</string>
-    <string name="ActionAddUserSelfYou">Du bist in die Gruppe zurückgekehrt</string>
-    <string name="UnsupportedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstützt. Bitte aktualisiere Telegram um sie zu sehen: https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Video</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Standort</string>
-    <string name="AttachContact">Kontakt</string>
-    <string name="AttachDocument">Datei</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Sprachnachricht</string>
-    <string name="FromYou">Du</string>
-    <string name="ActionTakeScreenshootYou">Du hast ein Bildschirmfoto gemacht!</string>
-    <string name="ActionTakeScreenshoot">un1 hat ein Bildschirmfoto gemacht!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Ungültige Telefonnummer</string>
-    <string name="CodeExpired">Code ist abgelaufen, bitte melde dich erneut an</string>
-    <string name="FloodWait">Zu viele Versuche in zu kurzer Zeit, versuche es bitte später erneut.</string>
-    <string name="FloodWaitTime">Zu viele Versuche, bitte erneut in %1$s versuchen</string>
-    <string name="InvalidCode">Ungültiger Code</string>
-    <string name="InvalidFirstName">Ungültiger Vorname</string>
-    <string name="InvalidLastName">Ungültiger Nachname</string>
-    <string name="Loading">Lädt…</string>
-    <string name="NoPlayerInstalled">Du hast keinen Videoplayer. Bitte installiere einen um fortzufahren.</string>
-    <string name="NoMailInstalled">Bitte sende eine Email an sms@stel.com mit einer Beschreibung des Problems.</string>
-    <string name="NoHandleAppInstalled">Du hast keine Applikationen, die den Dateityp \'%1$s\' öffnen könnten. Bitte installiere eine entsprechende Anwendung um fortzufahren.</string>
-    <string name="InviteUser">Dieser Benutzer hat noch kein Telegram. Möchtest du ihn einladen?</string>
-    <string name="AreYouSure">Bist du sicher?</string>
-    <string name="AddToTheGroupTitle">%1$s dem Chat %2$s hinzufügen?</string>
-    <string name="AddToTheGroupForwardCount">Wieviele der letzten Nachrichten willst du weiterleiten?</string>
-    <string name="AddToTheGroup">%1$s zur Gruppe hinzufügen?</string>
-    <string name="UserAlreadyInGroup">Nutzer befindet sich schon in der Gruppe</string>
-    <string name="ForwardMessagesTo">Nachrichten an %1$s weiterleiten?</string>
-    <string name="SendMessagesTo">Nachricht an %1$s senden?</string>
-    <string name="SendContactTo">Kontakt senden an %1$s?</string>
-    <string name="AreYouSureLogout">Wirklich abmelden?\n\nDu kannst Telegram von all deinen Geräten gleichzeitig nutzen.\n\nWichtig: Abmelden löscht deine Geheimen Chats.</string>
-    <string name="AreYouSureSessions">Sicher, dass du alle anderen Geräte abmelden möchtest?</string>
-    <string name="AreYouSureDeleteAndExit">Gruppe löschen und verlassen?</string>
-    <string name="AreYouSureDeleteThisChat">Möchtest du wirklich diesen Chat löschen?</string>
-    <string name="AreYouSureShareMyContactInfo">Wirklich die eigenen Kontaktinformationen teilen?</string>
-    <string name="AreYouSureBlockContact">Diesen Kontakt wirklich blockieren?</string>
-    <string name="AreYouSureUnblockContact">Blockierung für diesen Kontakt wirklich aufheben?</string>
-    <string name="AreYouSureDeleteContact">Diesen Kontakt wirklich löschen?</string>
-    <string name="AreYouSureSecretChat">Geheimen Chat starten?</string>
-    <string name="AreYouSureRegistration">Bist du dir sicher, dass du die Registrierung abbrechen willst?</string>
-    <string name="AreYouSureClearHistory">Möchtest du wirklich den Verlauf löschen?</string>
-    <string name="AreYouSureClearHistoryChannel">Cache des Kanals wirklich löschen?</string>
-    <string name="AreYouSureClearHistorySuper">Cache der Supergruppe wirklich löschen?</string>
-    <string name="AreYouSureDeleteMessages">Sicher, dass du %1$s löschen willst?</string>
-    <string name="SendMessagesToGroup">Nachricht an %1$s senden?</string>
-    <string name="SendContactToGroup">Kontakt senden an %1$s?</string>
-    <string name="ForwardMessagesToGroup">Weiterleiten an %1$s?</string>
-    <string name="FeatureUnavailable">Verzeihung, diese Funktion ist derzeit in deinem Land nicht verfügbar.</string>
-    <string name="NoUsernameFound">Kein Konto mit diesem Benutzernamen</string>
-    <string name="BotCantJoinGroups">Keine Gruppen mit diesem Bot möglich</string>
-    <string name="SecretLinkPreviewAlert">Möchtest du die erweitere Linkvorschau in Geheimen Chats aktivieren? Die Vorschau wird auf den Telegram Servern generiert.</string>
-    <string name="SecretChatContextBotAlert">Inline Bots werden von Drittentwicklern erstellt. Symbole, die du nach dem Botnamen eingibst, werden an den jeweiligen Entwickler geschickt, damit der Bot funktioniert.</string>
-    <string name="RaiseToSpeakAlert">Möchtest du \"Zum Sprechen ans Ohr\" für Sprachnachrichten aktivieren?</string>
-    <string name="EditMessageError">Du kannst diese Nachricht nicht bearbeiten.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram benötigt Zugriff auf deine Kontakte um dich auf all denen Geräten mit deinen Freunden zu verbinden. </string>
-    <string name="PermissionStorage">Telegram benötigt Zugriff auf deinen Speicher, damit du Bilder, Videos und Musik senden und speichern kannst.</string>
-    <string name="PermissionNoAudio">Telegram benötigt Zugriff auf dein Mikrofon, damit du Sprachnachrichten senden kannst. </string>
-    <string name="PermissionNoLocation">Telegram benötigt Zugriff auf deinen Standort, damit du ihn mit Freunden teilen kannst. </string>
-    <string name="PermissionOpenSettings">EINSTELLUNGEN</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Schnell</string>
-    <string name="Page3Title">Kostenlos</string>
-    <string name="Page4Title">Sicher</string>
-    <string name="Page5Title">Leistungsstark</string>
-    <string name="Page6Title">Cloud-Basiert</string>
-    <string name="Page7Title">Vertraulich</string>
-    <string name="Page1Message">Die <![CDATA[<b>schnellste</b>]]> Messaging App der Welt.<![CDATA[<br/><b>Kostenlos</b>]]> und <![CDATA[<b>sicher</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> stellt Nachrichten schneller<![CDATA[<br/>]]>zu als andere Anwendungen.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> ist für immer kostenlos.<![CDATA[<br/>]]>Keine Werbung. Keine Abo-Gebühr.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> schützt deine Nachrichten <![CDATA[<br/>]]>vor Hacker-Angriffen.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> unterstützt unbegrenzt große <![CDATA[<br/>]]>Chats und Mediendateien.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lässt sich von verschiedenen Geräten<![CDATA[<br/>]]>gleichzeitig nutzen.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]>-Nachrichten sind stark verschlüsselt<![CDATA[<br/>]]>und können sich selbst zerstören.</string>
-    <string name="StartMessaging">Jetzt beginnen</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d online</string>
-    <string name="Online_one">%1$d online</string>
-    <string name="Online_two">%1$d online</string>
-    <string name="Online_few">%1$d online</string>
-    <string name="Online_many">%1$d online</string>
-    <string name="Online_other">%1$d online</string>
-    <string name="Members_zero">%1$d Mitglieder</string>
-    <string name="Members_one">%1$d Mitglied</string>
-    <string name="Members_two">%1$d Mitglieder</string>
-    <string name="Members_few">%1$d Mitglieder</string>
-    <string name="Members_many">%1$d Mitglieder</string>
-    <string name="Members_other">%1$d Mitglieder</string>
-    <string name="AndMoreTyping_zero">und %1$d weitere schreiben</string>
-    <string name="AndMoreTyping_one">und %1$d weitere tippen</string>
-    <string name="AndMoreTyping_two">und %1$d weitere schreiben</string>
-    <string name="AndMoreTyping_few">und %1$d weitere schreiben</string>
-    <string name="AndMoreTyping_many">und %1$d weitere schreiben</string>
-    <string name="AndMoreTyping_other">und %1$d weitere schreiben</string>
-    <string name="NewMessages_zero">keine neuen Nachrichten</string>
-    <string name="NewMessages_one">%1$d neue Nachricht</string>
-    <string name="NewMessages_two">%1$d neue Nachrichten</string>
-    <string name="NewMessages_few">%1$d neue Nachrichten</string>
-    <string name="NewMessages_many">%1$d neue Nachrichten</string>
-    <string name="NewMessages_other">%1$d neue Nachrichten</string>
-    <string name="messages_zero">keine Nachrichten</string>
-    <string name="messages_one">%1$d Nachricht</string>
-    <string name="messages_two">%1$d Nachrichten</string>
-    <string name="messages_few">%1$d Nachrichten</string>
-    <string name="messages_many">%1$d Nachrichten</string>
-    <string name="messages_other">%1$d Nachrichten</string>
-    <string name="comments_zero">%1$d Kommentare</string>
-    <string name="comments_one">%1$d Kommentar</string>
-    <string name="comments_two">%1$d Kommentare</string>
-    <string name="comments_few">%1$d Kommentare</string>
-    <string name="comments_many">%1$d Kommentare</string>
-    <string name="comments_other">%1$d Kommentare</string>
-    <string name="items_zero">keine Objekte</string>
-    <string name="items_one">%1$d Objekt</string>
-    <string name="items_two">%1$d Objekte</string>
-    <string name="items_few">%1$d Objekte</string>
-    <string name="items_many">%1$d Objekte</string>
-    <string name="items_other">%1$d Objekte</string>
-    <string name="FromChats_zero">von keinen Chats</string>
-    <string name="FromChats_one">von %1$d Chat</string>
-    <string name="FromChats_two">von %1$d Chats</string>
-    <string name="FromChats_few">von %1$d Chats</string>
-    <string name="FromChats_many">von %1$d Chats</string>
-    <string name="FromChats_other">von %1$d Chats</string>
-    <string name="Seconds_zero">%1$d Sekunden</string>
-    <string name="Seconds_one">%1$d Sekunde</string>
-    <string name="Seconds_two">%1$d Sekunden</string>
-    <string name="Seconds_few">%1$d Sekunden</string>
-    <string name="Seconds_many">%1$d Sekunden</string>
-    <string name="Seconds_other">%1$d Sekunden</string>
-    <string name="Minutes_zero">%1$d Minuten</string>
-    <string name="Minutes_one">%1$d Minute</string>
-    <string name="Minutes_two">%1$d Minuten</string>
-    <string name="Minutes_few">%1$d Minuten</string>
-    <string name="Minutes_many">%1$d Minuten</string>
-    <string name="Minutes_other">%1$d Minuten</string>
-    <string name="Hours_zero">%1$d Stunden</string>
-    <string name="Hours_one">%1$d Stunde</string>
-    <string name="Hours_two">%1$d Stunden</string>
-    <string name="Hours_few">%1$d Stunden</string>
-    <string name="Hours_many">%1$d Stunden</string>
-    <string name="Hours_other">%1$d Stunden</string>
-    <string name="Days_zero">%1$d Tage</string>
-    <string name="Days_one">%1$d Tag</string>
-    <string name="Days_two">%1$d Tage</string>
-    <string name="Days_few">%1$d Tage</string>
-    <string name="Days_many">%1$d Tage</string>
-    <string name="Days_other">%1$d Tage</string>
-    <string name="Weeks_zero">%1$d Wochen</string>
-    <string name="Weeks_one">%1$d Woche</string>
-    <string name="Weeks_two">%1$d Wochen</string>
-    <string name="Weeks_few">%1$d Wochen</string>
-    <string name="Weeks_many">%1$d Wochen</string>
-    <string name="Weeks_other">%1$d Wochen</string>
-    <string name="Months_zero">%1$d Monate</string>
-    <string name="Months_one">%1$d Monat</string>
-    <string name="Months_two">%1$d Monate</string>
-    <string name="Months_few">%1$d Monate</string>
-    <string name="Months_many">%1$d Monate</string>
-    <string name="Months_other">%1$d Monate</string>
-    <string name="Years_zero">%1$d Jahre</string>
-    <string name="Years_one">%1$d Jahr</string>
-    <string name="Years_two">%1$d Jahre</string>
-    <string name="Years_few">%1$d Jahre</string>
-    <string name="Years_many">%1$d Jahre</string>
-    <string name="Years_other">%1$d Jahre</string>
-    <string name="Users_zero">%1$d Nutzer</string>
-    <string name="Users_one">%1$d Nutzer</string>
-    <string name="Users_two">%1$d Nutzer</string>
-    <string name="Users_few">%1$d Nutzer</string>
-    <string name="Users_many">%1$d Nutzer</string>
-    <string name="Users_other">%1$d Nutzer</string>
-    <string name="Times_zero">%1$d Mal</string>
-    <string name="Times_one">%1$d Mal</string>
-    <string name="Times_two">%1$d Mal</string>
-    <string name="Times_few">%1$d Mal</string>
-    <string name="Times_many">%1$d Mal</string>
-    <string name="Times_other">%1$d Mal</string>
-    <string name="Meters_zero">%1$d Meter</string>
-    <string name="Meters_one">%1$d Meter</string>
-    <string name="Meters_two">%1$d Meter</string>
-    <string name="Meters_few">%1$d Meter</string>
-    <string name="Meters_many">%1$d Meter</string>
-    <string name="Meters_other">%1$d Meter</string>
-    <string name="Stickers_zero">%1$d Sticker</string>
-    <string name="Stickers_one">%1$d Sticker</string>
-    <string name="Stickers_two">%1$d Sticker</string>
-    <string name="Stickers_few">%1$d Sticker</string>
-    <string name="Stickers_many">%1$d Sticker</string>
-    <string name="Stickers_other">%1$d Sticker</string>
-    <string name="Photos_zero">%1$d Bilder</string>
-    <string name="Photos_one">%1$d Bild</string>
-    <string name="Photos_two">%1$d Bilder</string>
-    <string name="Photos_few">%1$d Bilder</string>
-    <string name="Photos_many">%1$d Bilder</string>
-    <string name="Photos_other">%1$d Bilder</string>
-    <string name="LastSeenMinutes_zero">zul. online vor %1$d Minuten</string>
-    <string name="LastSeenMinutes_one">zul. online vor %1$d Minute</string>
-    <string name="LastSeenMinutes_two">zul. online vor %1$d Minuten</string>
-    <string name="LastSeenMinutes_few">zul. online vor %1$d Minuten</string>
-    <string name="LastSeenMinutes_many">zul. online vor %1$d Minuten</string>
-    <string name="LastSeenMinutes_other">zul. online vor %1$d Minuten</string>
-    <string name="LastSeenHours_zero">zul. online vor %1$d Stunden</string>
-    <string name="LastSeenHours_one">zul. online vor %1$d Stunde</string>
-    <string name="LastSeenHours_two">zul. online vor %1$d Stunden</string>
-    <string name="LastSeenHours_few">zul. online vor %1$d Stunden</string>
-    <string name="LastSeenHours_many">zul. online vor %1$d Stunden</string>
-    <string name="LastSeenHours_other">zul. online vor %1$d Stunden</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d angehängten Nachrichten</string>
-    <string name="ForwardedMessage_one">Angehängte Nachricht</string>
-    <string name="ForwardedMessage_two">%1$d angehängte Nachrichten</string>
-    <string name="ForwardedMessage_few">%1$d angehängte Nachrichten</string>
-    <string name="ForwardedMessage_many">%1$d angehängte Nachrichten</string>
-    <string name="ForwardedMessage_other">%1$d angehängte Nachrichten</string>
-    <string name="ForwardedFile_zero">%1$d angehängten Dateien</string>
-    <string name="ForwardedFile_one">Angehängte Datei</string>
-    <string name="ForwardedFile_two">%1$d angehängte Dateien</string>
-    <string name="ForwardedFile_few">%1$d angehängte Dateien</string>
-    <string name="ForwardedFile_many">%1$d angehängte Dateien</string>
-    <string name="ForwardedFile_other">%1$d angehängte Dateien</string>
-    <string name="ForwardedPhoto_zero">%1$d angehängten Bilder</string>
-    <string name="ForwardedPhoto_one">Angehängtes Bild</string>
-    <string name="ForwardedPhoto_two">%1$d angehängte Bilder</string>
-    <string name="ForwardedPhoto_few">%1$d angehängte Bilder</string>
-    <string name="ForwardedPhoto_many">%1$d angehängte Bilder</string>
-    <string name="ForwardedPhoto_other">%1$d angehängte Bilder</string>
-    <string name="ForwardedVideo_zero">%1$d angehängten Videos</string>
-    <string name="ForwardedVideo_one">Angehängtes Video</string>
-    <string name="ForwardedVideo_two">%1$d angehängte Videos</string>
-    <string name="ForwardedVideo_few">%1$d angehängte Videos</string>
-    <string name="ForwardedVideo_many">%1$d angehängte Videos</string>
-    <string name="ForwardedVideo_other">%1$d angehängte Videos</string>
-    <string name="ForwardedMusic_zero">%1$d angehängte Musikstücke</string>
-    <string name="ForwardedMusic_one">Angehängtes Musikstück</string>
-    <string name="ForwardedMusic_two">%1$d angehängte Musikstücke</string>
-    <string name="ForwardedMusic_few">%1$d angehängte Musikstücke</string>
-    <string name="ForwardedMusic_many">%1$d angehängte Musikstücke</string>
-    <string name="ForwardedMusic_other">%1$d angehängte Musikstücke</string>
-    <string name="ForwardedAudio_zero">%1$d weitergeleitete Sprachnachrichten</string>
-    <string name="ForwardedAudio_one">Weitergeleitete Sprachnachricht</string>
-    <string name="ForwardedAudio_two">%1$d weitergeleitete Sprachnachrichten</string>
-    <string name="ForwardedAudio_few">%1$d weitergeleitete Sprachnachrichten</string>
-    <string name="ForwardedAudio_many">%1$d weitergeleitete Sprachnachrichten</string>
-    <string name="ForwardedAudio_other">%1$d weitergeleitete Sprachnachrichten</string>
-    <string name="ForwardedLocation_zero">%1$d weitergeleiteten Standorte</string>
-    <string name="ForwardedLocation_one">Angehängter Standort</string>
-    <string name="ForwardedLocation_two">%1$d angehängte Standorte</string>
-    <string name="ForwardedLocation_few">%1$d angehängte Standorte</string>
-    <string name="ForwardedLocation_many">%1$d angehängte Standorte</string>
-    <string name="ForwardedLocation_other">%1$d angehängte Standorte</string>
-    <string name="ForwardedContact_zero">%1$d weitergeleiteten Kontakt</string>
-    <string name="ForwardedContact_one">Angehängter Kontakt</string>
-    <string name="ForwardedContact_two">%1$d angehängte Kontakte</string>
-    <string name="ForwardedContact_few">%1$d angehängte Kontakte</string>
-    <string name="ForwardedContact_many">%1$d angehängte Kontakte</string>
-    <string name="ForwardedContact_other">%1$d angehängte Kontakte</string>
-    <string name="ForwardedSticker_zero">%1$d angehängten Sticker</string>
-    <string name="ForwardedSticker_one">Angehängter Sticker</string>
-    <string name="ForwardedSticker_two">%1$d angehängte Sticker</string>
-    <string name="ForwardedSticker_few">%1$d angehängte Sticker</string>
-    <string name="ForwardedSticker_many">%1$d angehängte Sticker</string>
-    <string name="ForwardedSticker_other">%1$d angehängte Sticker</string>
-    <string name="AndOther_zero">und %1$d andere</string>
-    <string name="AndOther_one">und %1$d anderer</string>
-    <string name="AndOther_two">und %1$d andere</string>
-    <string name="AndOther_few">und %1$d andere</string>
-    <string name="AndOther_many">und %1$d andere</string>
-    <string name="AndOther_other">und %1$d andere</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">dd MMM</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s um %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
deleted file mode 100644
index 74d816424..000000000
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--Translation by Borja Campina, Edited by Victor Espinoza and Francisco Vila-->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">Español</string>
-    <string name="LanguageNameInEnglish">Spanish</string>
-    <string name="LanguageCode">es</string>
-    <!--signin view-->
-    <string name="YourPhone">Tu teléfono</string>
-    <string name="StartText">Por favor, confirma tu código de país y pon tu número de teléfono.</string>
-    <string name="ChooseCountry">Elige un país</string>
-    <string name="WrongCountry">Código de país incorrecto</string>
-    <!--code enter view-->
-    <string name="YourCode">Tu código</string>
-    <string name="SentSmsCode">Enviamos un SMS con el código de activación al número</string>
-    <string name="CallText">Te llamaremos en %1$d:%2$02d</string>
-    <string name="Calling">Llamándote...</string>
-    <string name="Code">Código</string>
-    <string name="WrongNumber">¿Número incorrecto?</string>
-    <string name="DidNotGetTheCode">¿No recibiste el código?</string>
-    <!--signup view-->
-    <string name="YourName">Tu nombre</string>
-    <string name="RegisterText">Ingresa tu nombre y apellidos</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Nombre (requerido)</string>
-    <string name="LastName">Apellidos (opcional)</string>
-    <string name="CancelRegistration">Cancelar registro</string>
-    <!--chats view-->
-    <string name="Settings">Ajustes</string>
-    <string name="Contacts">Contactos</string>
-    <string name="NewGroup">Nuevo grupo</string>
-    <string name="Yesterday">ayer</string>
-    <string name="NoResult">Sin resultados</string>
-    <string name="NoChats">Aún sin chats...</string>
-    <string name="NoChatsHelp">Envía mensajes pulsando el botón para\nredactar, en la parte inferior derecha,\no pulsa el botón menú para más opciones.</string>
-    <string name="WaitingForNetwork">Esperando red...</string>
-    <string name="Connecting">Conectando...</string>
-    <string name="Updating">Actualizando...</string>
-    <string name="NewSecretChat">Nuevo chat secreto</string>
-    <string name="AwaitingEncryption">Esperando que %s se conecte...</string>
-    <string name="EncryptionRejected">Chat secreto cancelado</string>
-    <string name="EncryptionProcessing">Intercambiando claves de cifrado...</string>
-    <string name="EncryptedChatStartedOutgoing">%s se unió a tu chat secreto.</string>
-    <string name="EncryptedChatStartedIncoming">Te uniste al chat secreto.</string>
-    <string name="ClearHistory">Borrar historial</string>
-    <string name="ClearHistoryCache">Eliminar de la caché</string>
-    <string name="DeleteChat">Eliminar y salir</string>
-    <string name="DeleteChatUser">Eliminar chat</string>
-    <string name="HiddenName">Cuenta eliminada</string>
-    <string name="SelectChat">Elige el chat</string>
-    <string name="PhotoTip">Mantén pulsado para ver</string>
-    <string name="CompatibilityChat">%1$s usa una versión antigua de Telegram, así que las fotos secretas serán mostradas en un modo de compatibilidad.\n\nCuando %2$s actualice Telegram, las fotos con autodestrucción de 1 minuto o menos funcionarán con el modo \'Mantén pulsado para ver\', y te notificaremos siempre que la otra parte haga una captura de pantalla.</string>
-    <string name="SearchMessages">MENSAJES</string>
-    <string name="Search">Buscar</string>
-    <string name="MuteNotifications">Silenciar notificaciones</string>
-    <string name="MuteFor">Silenciar %1$s</string>
-    <string name="UnmuteNotifications">No silenciar</string>
-    <string name="WillUnmuteIn">En %1$s</string>
-    <string name="MuteDisable">Desactivar</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">RECIENTES</string>
-    <string name="LinkPreview">Vista previa del enlace</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Nombrar como administrador</string>
-    <string name="DescriptionInfoMega">Puedes poner una descripción para tu grupo.</string>
-    <string name="LeaveMega">Dejar el grupo</string>
-    <string name="DeleteMega">Eliminar grupo</string>
-    <string name="LeaveMegaMenu">Dejar el grupo</string>
-    <string name="DeleteMegaMenu">Eliminar grupo</string>
-    <string name="MegaDeleteInfo">Perderás todos los mensajes en este grupo.</string>
-    <string name="MegaAdminsInfo">Puedes añadir administradores para que te ayuden a dirigir el canal. Mantén pulsado para eliminarlos.</string>
-    <string name="MegaDeleteAlert">¡Espera! Al eliminar este grupo, todos los miembros y los mensajes se perderán. ¿Quieres eliminarlo?</string>
-    <string name="ActionCreateMega">Grupo creado</string>
-    <string name="MegaAddedBy">un1 te añadió a este grupo</string>
-    <string name="MegaLeaveAlert">¿Quieres dejar el grupo?</string>
-    <string name="GroupUserCantAdd">Lo sentimos, no puedes añadir este usuario a grupos.</string>
-    <string name="GroupUserAddLimit">Lo sentimos, el grupo está lleno.</string>
-    <string name="GroupUserLeftError">Lo sentimos, este usuario decidió dejar el grupo, así que no puedes invitarlo otra vez.</string>
-    <string name="GroupUserCantAdmin">Lo sentimos, hay demasiados administradores en el grupo.</string>
-    <string name="GroupUserCantBot">Lo sentimos, hay demasiados bots en el grupo.</string>
-    <string name="ActionMigrateFromGroup">Este grupo fue convertido en un supergrupo</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s fue convertido en un supergrupo</string>
-    <string name="NoBlockedGroup">Los usuarios bloqueados son eliminados del grupo y sólo pueden volver si son invitados por un administrador. Los enlaces de invitación no funcionan para ellos.</string>
-    <string name="NewChannel">Nuevo canal</string>
-    <string name="EnterChannelName">Nombre del canal</string>
-    <string name="Comments">Comentarios</string>
-    <string name="CommentsInfo">Si activas los comentarios, las personas podrán hablar de tus mensajes en el canal.</string>
-    <string name="AddMutual">Añadir contactos a tu canal</string>
-    <string name="ChannelUsernameHelp">Las personas pueden compartir este enlace con los demás y encontrar tu canal usando la búsqueda de Telegram.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">Enlace</string>
-    <string name="ChannelPrivateLinkHelp">Las personas pueden unirse a tu canal siguiendo este enlace. Puedes anular el enlace en cualquier momento.</string>
-    <string name="DescriptionPlaceholder">Descripción</string>
-    <string name="DescriptionInfo">Puedes poner una descripción para tu canal.</string>
-    <string name="ChannelPublic">Canal público</string>
-    <string name="ChannelPublicInfo">Cualquiera puede unirse a los canales públicos, tras encontrarlos en la búsqueda.</string>
-    <string name="ChannelPrivate">Canal privado</string>
-    <string name="ChannelPrivateInfo">Puedes unirte a canales privados sólo con enlaces de invitación.</string>
-    <string name="ChannelLinkTitle">Enlace</string>
-    <string name="ChannelInviteLinkTitle">Enlace de invitación</string>
-    <string name="ChannelAddMembers">Añadir miembros</string>
-    <string name="LeaveChannel">Dejar canal</string>
-    <string name="LeaveChannelMenu">Dejar el canal</string>
-    <string name="ChannelSettings">Ajustes</string>
-    <string name="ChannelJoin">UNIRSE</string>
-    <string name="OpenChannelProfile">Información</string>
-    <string name="ChannelBroadcast">Difundir</string>
-    <string name="ChannelComment">Comentario</string>
-    <string name="ShowDiscussion">mostrar comentarios</string>
-    <string name="ChannelAlertTitle">¿Qué es un canal?</string>
-    <string name="ChannelAlertText">Los canales son una nueva herramienta para difundir tus mensajes a grandes audiencias.</string>
-    <string name="ChannelAlertCreate">CREAR CANAL</string>
-    <string name="LinkInUse">Lo sentimos, este nombre ya está ocupado.</string>
-    <string name="LinkInvalid">Lo sentimos, este nombre es inválido.</string>
-    <string name="LinkInvalidShort">El nombre del canal debe tener al menos 5 caracteres.</string>
-    <string name="LinkInvalidLong">El nombre no debe exceder los 32 caracteres.</string>
-    <string name="LinkInvalidStartNumber">El nombre del canal no puede comenzar con un número.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Verificando nombre...</string>
-    <string name="LinkAvailable">%1$s está disponible.</string>
-    <string name="ChannelMembers">Miembros</string>
-    <string name="ChannelBlockedUsers">Bloqueados</string>
-    <string name="ChannelAdministrators">Administradores</string>
-    <string name="ChannelDelete">Eliminar canal</string>
-    <string name="ChannelDeleteMenu">Eliminar canal</string>
-    <string name="ChannelDeleteAlert">¡Espera! Al eliminar este canal, todos los miembros y los mensajes se perderán. ¿Quieres eliminarlo?</string>
-    <string name="ChannelLeaveAlert">¿Quieres dejar este canal?</string>
-    <string name="ChannelDeleteInfo">Perderás todos los mensajes en este canal.</string>
-    <string name="ChannelEdit">Editar</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Por favor, ten en cuenta que si eliges un enlace público para tu canal, cualquiera podrá encontrarlo en la búsqueda y unirse.\n\nNo crees este enlace si quieres que tu canal sea privado.</string>
-    <string name="ChannelPublicEmptyUsername">Por favor, elige un enlace para tu canal público. Así, las personas podrán encontrarlo en la búsqueda y compartirlo con otros.\n\nSi no estás interesado, te sugerimos crear un canal privado.</string>
-    <string name="ActionCreateChannel">Canal creado</string>
-    <string name="ActionChannelChangedPhoto">Foto del canal cambiada</string>
-    <string name="ActionChannelRemovedPhoto">Foto del canal eliminada</string>
-    <string name="ActionChannelChangedTitle">Nombre del canal cambiado a un2</string>
-    <string name="ChannelPublicLimitReached">Lo sentimos, has creado demasiados canales públicos. Puedes crear un canal privado o eliminar uno de tus canales existentes primero.</string>
-    <string name="ChannelModerator">Moderador</string>
-    <string name="ChannelCreator">Creador</string>
-    <string name="ChannelEditor">Administrador</string>
-    <string name="ChannelMute">SILENCIAR</string>
-    <string name="ChannelUnmute">NO SILENCIAR</string>
-    <string name="ChannelAddAdmin">Añadir administrador</string>
-    <string name="ChannelInviteViaLink">Invitar con un enlace</string>
-    <string name="ChannelAddUserAdminAlert">¿Quieres nombrar a %1$s como administrador?</string>
-    <string name="ChannelRemoveUserAdmin">Eliminar</string>
-    <string name="ChannelMembersInfo">Sólo los administradores del canal pueden ver esta lista.</string>
-    <string name="ChannelAdminNotParticipant">Este usuario aún no se ha unido al canal. ¿Quieres invitarlo?</string>
-    <string name="ChannelLinkInfo">Cualquiera que tenga Telegram instalada podrá unirse a tu canal siguiendo este enlace.</string>
-    <string name="ChannelAdminsInfo">Puedes añadir administradores para que te ayuden en el canal. Mantén pulsado para eliminar un administrador.</string>
-    <string name="ChannelJoinTo">¿Quieres unirte al canal \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Lo sentimos, este canal ya no es accesible.</string>
-    <string name="ChannelAddTo">¿Añadir a %1$s al canal?</string>
-    <string name="ChannelUserLeftError">Lo sentimos, este usuario decidió dejar el canal, así que no puedes invitarlo otra vez.</string>
-    <string name="ChannelUserCantAdd">Lo sentimos, no puedes añadir a este usuario a canales.</string>
-    <string name="ChannelUserCantAdmin">Lo sentimos, hay demasiados administradores en el canal.</string>
-    <string name="ChannelUserCantBot">Lo sentimos, hay demasiados bots en el canal.</string>
-    <string name="ChannelUserAddLimit">Lo sentimos, sólo puedes añadir a los primeros 200 miembros a un canal. Sin embargo, una cantidad ilimitada de personas pueden unirse por el enlace del canal.</string>
-    <string name="ChannelAddedBy">un1 te añadió a este canal</string>
-    <string name="ChannelJoined">Te uniste al canal</string>
-    <string name="ChannelRemoveUser">Eliminar del canal</string>
-    <string name="ChannelCantSendMessage">Lo sentimos, no puedes enviar mensajes en este canal.</string>
-    <string name="ChannelAddedByNotification">%1$s te añadió al canal %2$s</string>
-    <string name="ChannelPhotoEditNotification">El canal %1$s actualizó su foto</string>
-    <string name="ChannelMessageGroupNoText">%1$s envió un mensaje al canal %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s envió una foto al canal %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s envió un vídeo al canal %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s compartió un contacto en el canal %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s envió una ubicación al canal %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s envió un archivo al canal %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s envió un GIF al canal %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s envió un mensaje de voz al canal %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s envió un sticker al canal %2$s</string>
-    <string name="ChannelMessageNoText">%1$s publicó un mensaje</string>
-    <string name="ChannelMessagePhoto">%1$s publicó una foto</string>
-    <string name="ChannelMessageVideo">%1$s publicó un vídeo</string>
-    <string name="ChannelMessageContact">%1$s publicó un contacto</string>
-    <string name="ChannelMessageMap">%1$s publicó una ubicación</string>
-    <string name="ChannelMessageDocument">%1$s publicó un archivo</string>
-    <string name="ChannelMessageGIF">%1$s publicó un GIF</string>
-    <string name="ChannelMessageAudio">%1$s publicó un mensaje de voz</string>
-    <string name="ChannelMessageSticker">%1$s publicó un sticker</string>
-    <string name="WhoCanAddMembers">¿Quién puede invitar?</string>
-    <string name="WhoCanAddMembersAllMembers">Todos</string>
-    <string name="WhoCanAddMembersAdmins">Administradores</string>
-    <string name="ChannelNotifyMembersInfoOn">Tu publicación será notificada</string>
-    <string name="ChannelNotifyMembersInfoOff">Tu publicación no será notificada</string>
-    <string name="ChannelSignMessages">Firmar los mensajes</string>
-    <string name="ChannelSignMessagesInfo">Añadir los nombres de los administradores a sus publicaciones.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Nueva difusión</string>
-    <string name="EnterListName">Nombre de la lista</string>
-    <string name="YouCreatedBroadcastList">Creaste una lista de difusión</string>
-    <string name="AddRecipient">Añadir destinatario</string>
-    <string name="KickFromBroadcast">Eliminar de la lista de difusión</string>
-    <!--audio view-->
-    <string name="NoAudio">Por favor, añade archivos a la carpeta de música en tu dispositivo para verlos aquí.</string>
-    <string name="AttachMusic">Música</string>
-    <string name="AudioUnknownArtist">Artista desconocido</string>
-    <string name="AudioUnknownTitle">Título desconocido</string>
-    <!--documents view-->
-    <string name="SelectFile">Elegir archivo</string>
-    <string name="FreeOfTotal">%1$s de %2$s libres</string>
-    <string name="UnknownError">Error desconocido</string>
-    <string name="AccessError">Error de acceso</string>
-    <string name="NoFiles">Aún sin archivos...</string>
-    <string name="FileUploadLimit">El archivo no debe superar los %1$s</string>
-    <string name="NotMounted">Almacenamiento no montado</string>
-    <string name="UsbActive">Transferencia USB activa</string>
-    <string name="InternalStorage">Almacenamiento Interno</string>
-    <string name="ExternalStorage">Almacenamiento Externo</string>
-    <string name="SystemRoot">Raíz del Sistema</string>
-    <string name="SdCard">Tarjeta SD</string>
-    <string name="Folder">Carpeta</string>
-    <string name="GalleryInfo">Para enviar imágenes sin compresión</string>
-    <!--chat view-->
-    <string name="Invisible">invisible</string>
-    <string name="Typing">escribiendo...</string>
-    <string name="IsTyping">está escribiendo...</string>
-    <string name="AreTyping">están escribiendo...</string>
-    <string name="IsRecordingAudio">%1$s está grabando un mensaje de voz...</string>
-    <string name="IsSendingPhoto">%1$s está enviando una foto...</string>
-    <string name="IsSendingVideo">%1$s está enviando un vídeo...</string>
-    <string name="IsSendingFile">%1$s está enviando un archivo...</string>
-    <string name="RecordingAudio">grabando mensaje de voz...</string>
-    <string name="SendingPhoto">enviando foto...</string>
-    <string name="SendingVideoStatus">enviando vídeo...</string>
-    <string name="SendingFile">enviando archivo...</string>
-    <string name="GotAQuestion">¿Tienes preguntas\nsobre Telegram?</string>
-    <string name="ChatTakePhoto">Hacer foto</string>
-    <string name="ChatGallery">Galería</string>
-    <string name="ChatLocation">Ubicación</string>
-    <string name="ChatVideo">Vídeo</string>
-    <string name="ChatDocument">Archivo</string>
-    <string name="ChatCamera">Cámara</string>
-    <string name="NoMessages">Aún sin mensajes...</string>
-    <string name="ForwardedMessage">Mensaje reenviado</string>
-    <string name="From">De</string>
-    <string name="NoRecent">No hay recientes</string>
-    <string name="Message">Mensaje</string>
-    <string name="TypeMessage">Mensaje</string>
-    <string name="ShareMyContactInfo">Compartir mi número</string>
-    <string name="AddToContacts">Añadir a contactos</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s te invitó a un chat secreto.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Invitaste a %s a un chat secreto.</string>
-    <string name="EncryptedDescriptionTitle">Los chats secretos:</string>
-    <string name="EncryptedDescription1">Usan cifrado end-to-end</string>
-    <string name="EncryptedDescription2">No dejan rastro en el servidor</string>
-    <string name="EncryptedDescription3">Tienen autodestrucción de mensajes</string>
-    <string name="EncryptedDescription4">Impiden reenviar mensajes</string>
-    <string name="YouWereKicked">Te eliminaron de este grupo</string>
-    <string name="YouLeft">Dejaste este grupo</string>
-    <string name="DeleteThisGroup">Eliminar este grupo</string>
-    <string name="DeleteThisChat">Eliminar este chat</string>
-    <string name="SlideToCancel">DESLIZA PARA CANCELAR</string>
-    <string name="SaveToDownloads">Guardar en descargas</string>
-    <string name="SaveToGIFs">Guardar GIF</string>
-    <string name="DeleteGif">¿Eliminar GIF?</string>
-    <string name="SaveToMusic">Guardar en música</string>
-    <string name="ShareFile">Compartir</string>
-    <string name="ApplyLocalizationFile">Aplicar traducción</string>
-    <string name="UnsupportedAttachment">Adjunto no soportado</string>
-    <string name="SetTimer">Establecer autodestrucción</string>
-    <string name="ServiceNotifications">Servicio de notificaciones</string>
-    <string name="GettingLinkInfo">Obteniendo información...</string>
-    <string name="OpenInBrowser">Abrir en el navegador</string>
-    <string name="CopyUrl">Copiar URL</string>
-    <string name="SendItems">Enviar %1$s</string>
-    <string name="OpenUrlAlert">¿Abrir %1$s?</string>
-    <string name="ReportSpam">REPORTAR SPAM</string>
-    <string name="AddContactChat">AÑADIR CONTACTO</string>
-    <string name="ReportSpamAlert">¿Quieres reportar a este usuario como spam?</string>
-    <string name="ReportSpamAlertGroup">¿Quieres reportar a este grupo como spam?</string>
-    <string name="NobodyLikesSpam1">Lo sentimos, por ahora puedes enviar mensajes sólo a contactos mutuos.</string>
-    <string name="NobodyLikesSpam2">Lo sentimos, por ahora sólo puedes añadir contactos mutuos a un grupo.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/es#no-puedo-enviar-mensajes-a-quienes-no-son-mis-contactos</string>
-    <string name="MoreInfo">Más información</string>
-    <string name="ShareSendTo">Enviar a...</string>
-    <string name="TapHereGifs">Pulsa y ve los GIF guardados</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s activó la autodestrucción en %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">Activaste la autodestrucción en %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s desactivó la autodestrucción</string>
-    <string name="MessageLifetimeYouRemoved">Desactivaste la autodestrucción</string>
-    <string name="YouHaveNewMessage">Tienes un nuevo mensaje</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s te envió un mensaje</string>
-    <string name="NotificationMessagePhoto">%1$s te envió una foto</string>
-    <string name="NotificationMessageVideo">%1$s te envió un vídeo</string>
-    <string name="NotificationMessageContact">%1$s compartió un contacto contigo</string>
-    <string name="NotificationMessageMap">%1$s te envió una ubicación</string>
-    <string name="NotificationMessageDocument">%1$s te envió un archivo</string>
-    <string name="NotificationMessageGif">%1$s te envió un GIF</string>
-    <string name="NotificationMessageAudio">%1$s te envió un mensaje de voz</string>
-    <string name="NotificationMessageSticker">%1$s te envió un sticker</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s envió un mensaje al grupo %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s envió una foto al grupo %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s envió un vídeo al grupo %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s compartió un contacto en el grupo %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s envió una ubicación al grupo %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s envió un archivo al grupo %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s envió un GIF al grupo %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s envió un mensaje de voz al grupo %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s envió un sticker al grupo %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s te invitó al grupo %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s cambió el nombre del grupo %2$s</string>
-    <string name="NotificationEditedGroupPhoto">%1$s cambió la foto del grupo %2$s</string>
-    <string name="NotificationGroupAddMember">%1$s invitó a %3$s al grupo %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s volvió al grupo %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s eliminó a %3$s del grupo %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s te eliminó del grupo %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s dejó el grupo %2$s</string>
-    <string name="NotificationContactJoined">¡%1$s se unió a Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nDetectamos un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Privacidad y seguridad - Sesiones activas y cerrar esa sesión.\n\nSi crees que alguien ha iniciado la sesión sin tu consentimiento, puedes activar la verificación en dos pasos, en los ajustes de privacidad y seguridad.\n\nAtentamente,\nEl equipo de Telegram</string>
-    <string name="NotificationContactNewPhoto">%1$s actualizó su foto de perfil</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s se unió al grupo %2$s con un enlace de invitación</string>
-    <string name="Reply">Responder</string>
-    <string name="ReplyToGroup">Responder a %1$s</string>
-    <string name="ReplyToUser">Responder a %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Elegir contacto</string>
-    <string name="NoContacts">Aún sin contactos</string>
-    <string name="InviteText">¡Oye! Cambiémonos a Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">a las</string>
-    <string name="YesterdayAt">ayer a las</string>
-    <string name="Online">en línea</string>
-    <string name="LastSeen">últ. vez</string>
-    <string name="LastSeenDate">últ. vez el</string>
-    <string name="LastSeenNow">últ. vez hace un momento</string>
-    <string name="InviteFriends">Invitar a amigos</string>
-    <string name="GlobalSearch">BÚSQUEDA GLOBAL</string>
-    <string name="Lately">últ. vez recientemente</string>
-    <string name="WithinAWeek">últ. vez hace unos días</string>
-    <string name="WithinAMonth">últ. vez hace unas semanas</string>
-    <string name="ALongTimeAgo">últ. vez hace mucho tiempo</string>
-    <string name="NewMessageTitle">Nuevo mensaje</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Invitar a...</string>
-    <string name="SoftUserLimitAlert">Podrás añadir más usuarios después de crear el grupo y convertirlo en un supergrupo.</string>
-    <string name="EnterGroupNamePlaceholder">Nombre del grupo</string>
-    <string name="GroupName">Nombre del grupo</string>
-    <string name="MembersCount">%1$d/%2$d miembros</string>
-    <string name="JoinToGroup">¿Quieres unirte al chat \'%1$s\'?</string>
-    <string name="JoinToGroupErrorFull">Lo sentimos. Este grupo está lleno.</string>
-    <string name="JoinToGroupErrorNotExist">Lo sentimos, este chat no existe.</string>
-    <string name="LinkCopied">Enlace copiado al portapapeles</string>
-    <string name="InviteToGroupByLink">Invitar al grupo con un enlace</string>
-    <string name="InviteLink">Enlace de invitación</string>
-    <string name="RevokeAlert">¿Quieres anular este enlace? Una vez anulado, nadie podrá unirse a través de él.</string>
-    <string name="RevokeAlertNewLink">El enlace de invitación anterior está inactivo. Ha sido creado uno nuevo.</string>
-    <string name="RevokeButton">Anular</string>
-    <string name="RevokeLink">Anular enlace</string>
-    <string name="CopyLink">Copiar enlace</string>
-    <string name="ShareLink">Compartir enlace</string>
-    <string name="LinkInfo">Cualquiera que tenga Telegram instalada podrá unirse a tu grupo siguiendo este enlace.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Administradores</string>
-    <string name="SetAdminsAll">Todos son administradores</string>
-    <string name="SetAdminsAllInfo">Todos pueden añadir nuevos miembros, editar el nombre y la foto del grupo.</string>
-    <string name="SetAdminsNotAllInfo">Sólo los administradores pueden añadir y eliminar miembros, editar el nombre y la foto del grupo.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Multimedia</string>
-    <string name="SETTINGS">Ajustes</string>
-    <string name="AddMember">Añadir miembro</string>
-    <string name="SetAdmins">Nombrar administradores</string>
-    <string name="DeleteAndExit">Eliminar y dejar el grupo</string>
-    <string name="Notifications">Notificaciones</string>
-    <string name="KickFromGroup">Eliminar del grupo</string>
-    <string name="ConvertGroup">Convertir en supergrupo</string>
-    <string name="ConvertGroupAlert">Por favor, ten en cuenta que los miembros del grupo tendrán que actualizar Telegram a la última versión para ver tu supergrupo. ¿Quieres convertir el grupo?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Límite de miembros alcanzado.<![CDATA[</b>]]>\n\nPara superar el límite y tener características adicionales, conviértelo en un supergrupo:\n\n• Permiten hasta %1$s\n• Nuevos miembros ven todo el historial\n• Un admin. borra mensajes para todos\n• Notificaciones silenciadas por defecto</string>
-    <!--contact info view-->
-    <string name="ShareContact">Compartir</string>
-    <string name="AddContact">Añadir</string>
-    <string name="AddContactTitle">Añadir contacto</string>
-    <string name="BlockContact">Bloquear</string>
-    <string name="EditContact">Editar</string>
-    <string name="DeleteContact">Eliminar</string>
-    <string name="PhoneHome">Casa</string>
-    <string name="PhoneMobile">Móvil</string>
-    <string name="PhoneWork">Trabajo</string>
-    <string name="PhoneOther">Otro</string>
-    <string name="PhoneMain">Principal</string>
-    <string name="StartEncryptedChat">Iniciar chat secreto</string>
-    <string name="CreateEncryptedChatError">Ocurrió un error.</string>
-    <string name="EncryptionKey">Clave de cifrado</string>
-    <string name="MessageLifetime">Autodestrucción</string>
-    <string name="ShortMessageLifetimeForever">Apagada</string>
-    <string name="EncryptionKeyDescription">El texto e imagen derivan de la clave de cifrado para el chat secreto creado con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Si se ven igual en el dispositivo de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, el cifrado end-to-end está garantizado.<![CDATA[<br><br>]]>Conoce más en telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq/es#chats-secretos</string>
-    <string name="NumberUnknown">Desconocido</string>
-    <string name="Info">Información</string>
-    <string name="Phone">Teléfono</string>
-    <!--usernames-->
-    <string name="Username">Alias</string>
-    <string name="UsernamePlaceholder">Tu alias</string>
-    <string name="UsernameInUse">Lo sentimos, este alias ya está ocupado.</string>
-    <string name="UsernameInvalid">Lo sentimos, este alias es inválido.</string>
-    <string name="UsernameInvalidShort">Un alias debe tener al menos 5 caracteres.</string>
-    <string name="UsernameInvalidLong">El alias no debe exceder los 32 caracteres.</string>
-    <string name="UsernameInvalidStartNumber">Lo sentimos, un alias no puede comenzar con un número.</string>
-    <string name="UsernameHelp">Puedes elegir un alias en <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Si lo haces, otras personas te podrán encontrar por ese alias y contactarte sin saber tu número de teléfono.<![CDATA[<br><br>]]>Puedes usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> y guiones bajos. La longitud mínima es de <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
-    <string name="UsernameChecking">Verificando alias...</string>
-    <string name="UsernameAvailable">%1$s está disponible.</string>
-    <string name="UsernameEmpty">Ninguno</string>
-    <string name="ErrorOccurred">Ocurrió un error.</string>
-    <!--stickers view-->
-    <string name="Stickers">Stickers</string>
-    <string name="StickersInfo">Los artistas pueden añadir sus propios packs de stickers usando el bot @stickers.\n\nLos usuarios pueden añadir stickers pulsando y eligiendo \"Añadir stickers\".</string>
-    <string name="AddStickers">Añadir stickers</string>
-    <string name="AddToStickers">Añadir a stickers</string>
-    <string name="AddStickersNotFound">Stickers no encontrados</string>
-    <string name="StickersRemoved">Stickers eliminados</string>
-    <string name="AddStickersInstalled">Nuevos stickers añadidos</string>
-    <string name="StickersHide">Ocultar</string>
-    <string name="StickersShow">Mostrar</string>
-    <string name="StickersShare">Compartir</string>
-    <string name="StickersCopy">Copiar enlace</string>
-    <string name="StickersRemove">Eliminar</string>
-    <string name="NoStickers">Sin stickers aún</string>
-    <string name="TooMuchStickersets">Lo sentimos, alcanzaste el número máximo de packs de stickers.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Restablecer las notificaciones</string>
-    <string name="TextSize">Tamaño del texto</string>
-    <string name="AskAQuestion">Hacer una pregunta</string>
-    <string name="EnableAnimations">Activar animaciones</string>
-    <string name="Unblock">Desbloquear</string>
-    <string name="UnblockText">Mantén pulsado sobre un usuario para desbloquearlo.</string>
-    <string name="NoBlocked">Sin usuarios bloqueados</string>
-    <string name="MessageNotifications">Notificación de mensajes</string>
-    <string name="Alert">Alerta</string>
-    <string name="MessagePreview">Vista previa del mensaje</string>
-    <string name="GroupNotifications">Notificaciones de grupo</string>
-    <string name="Sound">Sonido</string>
-    <string name="InAppNotifications">Notificaciones en la app</string>
-    <string name="InAppSounds">Sonidos en la app</string>
-    <string name="InAppVibrate">Vibración en la app</string>
-    <string name="Vibrate">Vibraciones</string>
-    <string name="InAppPreview">Vista previa en la app</string>
-    <string name="Reset">Restablecer</string>
-    <string name="ResetAllNotifications">Restablecer las notificaciones</string>
-    <string name="UndoAllCustom">Deshacer las notificaciones personalizadas para todos tus usuarios y grupos</string>
-    <string name="NotificationsAndSounds">Notificaciones y sonidos</string>
-    <string name="BlockedUsers">Usuarios bloqueados</string>
-    <string name="LogOut">Cerrar sesión</string>
-    <string name="NoSound">Sin sonido</string>
-    <string name="Default">Por defecto</string>
-    <string name="Support">Soporte</string>
-    <string name="OnlyIfSilent">Sólo si está silenciado</string>
-    <string name="ChatBackground">Fondo de chat</string>
-    <string name="MessagesSettings">Mensajes</string>
-    <string name="SendByEnter">Enviar con \'Intro\'</string>
-    <string name="TerminateAllSessions">Cerrar todas las otras sesiones</string>
-    <string name="Events">Eventos</string>
-    <string name="ContactJoined">Un contacto se unió a Telegram</string>
-    <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor, considera que el soporte de Telegram está hecho por voluntarios. Respondemos lo antes posible, pero puede tomar tiempo.<![CDATA[<br><br>]]>Por favor, mira las <![CDATA[<a href=\"https://telegram.org/faq/es\">preguntas frecuentes de Telegram</a>]]>: tienen respuestas para la mayoría de las preguntas y <![CDATA[<a href=\"https://telegram.org/faq/es#solucin-de-problemas\">soluciones a problemas</a>]]>.</string>
-    <string name="AskButton">Preguntar</string>
-    <string name="TelegramFaq">Preguntas frecuentes</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq/es</string>
-    <string name="DeleteLocalization">¿Eliminar traducción?</string>
-    <string name="IncorrectLocalization">Archivo de traducción incorrecto</string>
-    <string name="Enabled">Activadas</string>
-    <string name="Disabled">Desactivadas</string>
-    <string name="NotificationsService">Servicio de notificaciones</string>
-    <string name="NotificationsServiceDisableInfo">Si tus notificaciones funcionan bien con los Servicios de Google Play, puedes desactivar el Servicio de notificaciones. Sin embargo, recomendamos que lo dejes activo para mantener la app en segundo plano y recibir notificaciones al instante.</string>
-    <string name="SortBy">Ordenar por</string>
-    <string name="ImportContacts">Importar contactos</string>
-    <string name="SortFirstName">Nombre</string>
-    <string name="SortLastName">Apellidos</string>
-    <string name="LedColor">Color del LED</string>
-    <string name="PopupNotification">Notificaciones emergentes</string>
-    <string name="NoPopup">Desactivadas</string>
-    <string name="OnlyWhenScreenOn">Con pantalla encendida</string>
-    <string name="OnlyWhenScreenOff">Con pantalla apagada</string>
-    <string name="AlwaysShowPopup">Mostrar siempre </string>
-    <string name="BadgeNumber">Globo en el ícono</string>
-    <string name="Short">Cortas</string>
-    <string name="Long">Largas</string>
-    <string name="SystemDefault">Según el sistema</string>
-    <string name="SettingsDefault">Según Telegram</string>
-    <string name="AutomaticMediaDownload">Descarga automática de multimedia</string>
-    <string name="WhenUsingMobileData">Con uso de datos móviles</string>
-    <string name="WhenConnectedOnWiFi">Con conexión a Wi-Fi</string>
-    <string name="WhenRoaming">Con itinerancia de datos</string>
-    <string name="NoMediaAutoDownload">Ningún contenido multimedia</string>
-    <string name="AutoplayGifs">Autorreproducción de GIF</string>
-    <string name="RaiseToSpeak">Elevar para hablar</string>
-    <string name="SaveToGallerySettings">Guardar en galería</string>
-    <string name="EditName">Editar nombre</string>
-    <string name="NotificationsPriority">Prioridad</string>
-    <string name="NotificationsPriorityDefault">Por defecto</string>
-    <string name="NotificationsPriorityLow">Baja</string>
-    <string name="NotificationsPriorityHigh">Alta</string>
-    <string name="NotificationsPriorityMax">Máxima</string>
-    <string name="RepeatNotificationsNever">Nunca</string>
-    <string name="RepeatNotifications">Repetir notificaciones</string>
-    <string name="PhoneNumberHelp">Puedes cambiar tu número de Telegram aquí. Tu cuenta y todos tus datos de la nube — mensajes, archivos, grupos, contactos, etc., se moverán al nuevo número.\n\n<![CDATA[<b>Importante:</b>]]> Todos tus contactos de Telegram tendrán tu <![CDATA[<b>nuevo número</b>]]> añadido a sus agendas de contactos, siempre que hayan tenido tu número viejo y no los hayas bloqueado en Telegram.</string>
-    <string name="PhoneNumberAlert">Todos tus contactos de Telegram tendrán tu número nuevo añadido a sus agendas de contactos, siempre que hayan tenido tu número viejo y no los hayas bloqueado en Telegram.</string>
-    <string name="PhoneNumberChange">CAMBIAR NÚMERO</string>
-    <string name="ChangePhoneNewNumber">Nuevo número</string>
-    <string name="ChangePhoneHelp">Enviaremos un SMS con el código de confirmación a tu nuevo número.</string>
-    <string name="ChangePhoneNumberOccupied">El número %1$s ya está vinculado a una cuenta de Telegram. Por favor, elimina esa cuenta antes de migrar al nuevo número.</string>
-    <string name="NotificationsOther">Otras</string>
-    <string name="NotificationsDisabled">Desactivadas</string>
-    <string name="VibrationDisabled">Desactivadas</string>
-    <string name="LedDisabled">Desactivado</string>
-    <string name="RepeatDisabled">Apagado</string>
-    <string name="InChatSound">Sonidos en el chat</string>
-    <string name="SoundDefault">Por defecto</string>
-    <string name="VibrationDefault">Por defecto</string>
-    <string name="SmartNotifications">Notificaciones inteligentes</string>
-    <string name="SmartNotificationsDisabled">Desactivadas</string>
-    <string name="SmartNotificationsInfo">Sonar como máximo %1$s en %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Sonar como máximo</string>
-    <string name="SmartNotificationsTimes">veces</string>
-    <string name="SmartNotificationsWithin">en</string>
-    <string name="SmartNotificationsMinutes">minutos</string>
-    <string name="SecretWebPage">Vistas previas de enlaces</string>
-    <string name="SecretChat">Chats secretos</string>
-    <!--cache view-->
-    <string name="CacheSettings">Ajustes de caché</string>
-    <string name="LocalDatabase">Base de datos local</string>
-    <string name="LocalDatabaseClear">¿Borrar los mensajes en la caché?</string>
-    <string name="LocalDatabaseInfo">Al borrar la base de datos se eliminarán los mensajes en la caché y se comprimirá la base de datos para liberar espacio de almacenamiento. Telegram requiere algunos datos para funcionar, así que la base de datos nunca podrá llegar a cero.\n\nEsto puede tardar algunos minutos.</string>
-    <string name="ClearMediaCache">Borrar caché</string>
-    <string name="CacheClear">Borrar</string>
-    <string name="CalculatingSize">Calculando...</string>
-    <string name="LocalDocumentCache">Archivos</string>
-    <string name="LocalPhotoCache">Fotos</string>
-    <string name="LocalAudioCache">Mensajes de voz</string>
-    <string name="LocalVideoCache">Vídeos</string>
-    <string name="LocalMusicCache">Música</string>
-    <string name="LocalCache">Otros archivos</string>
-    <string name="CacheEmpty">Vacío</string>
-    <string name="KeepMedia">Conservar multimedia</string>
-    <string name="KeepMediaInfo">Las fotos, los vídeos y los archivos de los chats en la nube a los que <![CDATA[<b>no accedas</b>]]> durante ese periodo de tiempo se eliminarán del dispositivo para liberar espacio.\n\nToda la multimedia permanecerá en la nube de Telegram y podrás volver a descargarla si la necesitas.</string>
-    <string name="KeepMediaForever">Siempre</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Sesiones activas</string>
-    <string name="CurrentSession">Sesión actual</string>
-    <string name="NoOtherSessions">Sin otras sesiones activas</string>
-    <string name="NoOtherSessionsInfo">Puedes iniciar sesión en Telegram desde otro móvil, tablet o computador, usando el mismo número de teléfono. Todos tus datos se sincronizarán al instante.</string>
-    <string name="OtherSessions">Sesiones activas</string>
-    <string name="SessionsInfo">Controla tus sesiones en otros dispositivos.</string>
-    <string name="TerminateSessionInfo">Pulsa una sesión para cerrarla.</string>
-    <string name="TerminateSessionQuestion">¿Cerrar esta sesión?</string>
-    <string name="UnofficialApp">aplicación no oficial</string>
-    <!--passcode view-->
-    <string name="Passcode">Código de acceso</string>
-    <string name="ChangePasscode">Cambiar código de acceso</string>
-    <string name="ChangePasscodeInfo">Cuando configuras un código, aparece un candado en la pantalla de chats. Toca sobre él para bloquear y desbloquear la aplicación.\n\nNota: si olvidas el código, tendrás que eliminar y reinstalar la aplicación. Perderás todos los chats secretos.</string>
-    <string name="ChangePasscodeAlert">Ahora verás un candado en la pantalla de chats. Púlsalo para bloquear tu Telegram con tu nuevo código.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Contraseña</string>
-    <string name="EnterCurrentPasscode">Pon tu código de acceso actual</string>
-    <string name="EnterNewFirstPasscode">Pon un código de acceso</string>
-    <string name="EnterNewPasscode">Pon tu nuevo código de acceso</string>
-    <string name="EnterYourPasscode">Pon tu código de acceso</string>
-    <string name="ReEnterYourPasscode">Pon, otra vez, tu nuevo código</string>
-    <string name="InvalidPasscode">Código de acceso inválido</string>
-    <string name="PasscodeDoNotMatch">Los códigos de acceso no coinciden</string>
-    <string name="AutoLock">Bloqueo automático</string>
-    <string name="AutoLockInfo">El bloqueo se activará transcurrido este tiempo.</string>
-    <string name="AutoLockInTime">en %1$s</string>
-    <string name="AutoLockDisabled">Desactivado</string>
-    <string name="UnlockFingerprint">Desbloquear con la huella digital</string>
-    <string name="FingerprintInfo">Confirma la huella digital para continuar</string>
-    <string name="FingerprintHelp">Sensor táctil</string>
-    <string name="FingerprintNotRecognized">Huella digital no reconocida. Reinténtalo</string>
-    <!--media view-->
-    <string name="NoMedia">Comparte fotos y vídeos en este chat y accede a ellos desde cualquier dispositivo.</string>
-    <string name="DocumentsTitle">Archivos</string>
-    <string name="SharedMediaTitle">Multimedia</string>
-    <string name="LinksTitle">Enlaces</string>
-    <string name="AudioTitle">Música</string>
-    <string name="NoSharedAudio">Comparte música en este chat y accede a ella desde cualquier dispositivo.</string>
-    <string name="NoSharedFiles">Comparte archivos en este chat y accede a ellos desde cualquier dispositivo.</string>
-    <string name="NoSharedLinks">Comparte enlaces en este chat y accede a ellos desde cualquiera de tus dispositivos.</string>
-    <!--map view-->
-    <string name="Map">Mapa</string>
-    <string name="Satellite">Satélite</string>
-    <string name="Hybrid">Híbrido</string>
-    <string name="MetersAway">m de distancia</string>
-    <string name="KMetersAway">km de distancia</string>
-    <string name="SendLocation">Enviar tu ubicación actual</string>
-    <string name="SendSelectedLocation">Enviar la ubicación seleccionada</string>
-    <string name="ShareLocation">Ubicación</string>
-    <string name="AccurateTo">Exacto a %1$s</string>
-    <string name="NearbyPlaces">O ELIGE UN LUGAR</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Ir a Multimedia</string>
-    <string name="SaveToGallery">Guardar en galería</string>
-    <string name="Of">%1$d de %2$d</string>
-    <string name="Gallery">Galería</string>
-    <string name="AllPhotos">Todas las fotos</string>
-    <string name="AllVideo">Todos los vídeos</string>
-    <string name="NoPhotos">Aún sin fotos</string>
-    <string name="NoVideo">Sin vídeos aún</string>
-    <string name="PleaseDownload">Por favor, primero descarga la multimedia</string>
-    <string name="NoRecentPhotos">No hay fotos recientes</string>
-    <string name="NoRecentGIFs">No hay GIF recientes</string>
-    <string name="SearchImages">BUSCA FOTOS</string>
-    <string name="SearchImagesInfo">BÚSQUEDA WEB</string>
-    <string name="SearchGifs">BUSCA GIF</string>
-    <string name="SearchImagesTitle">Buscar foto</string>
-    <string name="SearchGifsTitle">Buscar GIF</string>
-    <string name="CropImage">Recortar imagen</string>
-    <string name="EditImage">Editar imagen</string>
-    <string name="Enhance">Realzar</string>
-    <string name="Highlights">Iluminación</string>
-    <string name="Contrast">Contraste</string>
-    <string name="Exposure">Exposición</string>
-    <string name="Warmth">Temperatura</string>
-    <string name="Saturation">Saturación</string>
-    <string name="Vignette">Viñeta</string>
-    <string name="Shadows">Sombras</string>
-    <string name="Grain">Grano</string>
-    <string name="Sharpen">Nitidez</string>
-    <string name="Fade">Desvanecer</string>
-    <string name="Tint">Matiz</string>
-    <string name="TintShadows">SOMBRAS</string>
-    <string name="TintHighlights">ILUMINACIÓN</string>
-    <string name="Curves">Curvas</string>
-    <string name="CurvesAll">TODO</string>
-    <string name="CurvesRed">ROJO</string>
-    <string name="CurvesGreen">VERDE</string>
-    <string name="CurvesBlue">AZUL</string>
-    <string name="Blur">Desenfoque</string>
-    <string name="BlurOff">Apagado</string>
-    <string name="BlurLinear">Lineal</string>
-    <string name="BlurRadial">Radial</string>
-    <string name="AreYouSureDeletePhoto">¿Quieres eliminar esta foto?</string>
-    <string name="AreYouSureDeleteVideo">¿Quieres eliminar este vídeo?</string>
-    <string name="DiscardChanges">¿Descartar cambios?</string>
-    <string name="ClearSearch">¿Quieres borrar el historial de búsqueda?</string>
-    <string name="ClearButton">Borrar</string>
-    <string name="PickerPhotos">Fotos</string>
-    <string name="PickerVideo">Vídeo</string>
-    <string name="AddCaption">Añadir un comentario...</string>
-    <string name="PhotoCaption">Comentario de foto</string>
-    <string name="VideoCaption">Comentario de vídeo</string>
-    <string name="Caption">Comentario</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Verificación en dos pasos</string>
-    <string name="SetAdditionalPassword">Poner contraseña adicional</string>
-    <string name="SetAdditionalPasswordInfo">Puedes poner una contraseña, que será requerida cuando inicies sesión en un nuevo dispositivo, además del código que recibes vía SMS.</string>
-    <string name="YourPassword">Tu contraseña</string>
-    <string name="PleaseEnterCurrentPassword">Por favor, pon tu contraseña</string>
-    <string name="PleaseEnterFirstPassword">Pon una contraseña</string>
-    <string name="PleaseEnterPassword">Por favor, pon tu nueva contraseña</string>
-    <string name="PleaseReEnterPassword">Pon, otra vez, tu contraseña</string>
-    <string name="RecoveryEmail">E-mail de recuperación</string>
-    <string name="YourEmail">Tu e-mail</string>
-    <string name="YourEmailInfo">Por favor, añade un e-mail válido. Es la única forma de recuperar una contraseña olvidada.</string>
-    <string name="YourEmailSkip">Omitir</string>
-    <string name="YourEmailSkipWarning">Advertencia</string>
-    <string name="YourEmailSkipWarningText">En serio.\n\nSi olvidas tu contraseña, perderás el acceso a tu cuenta de Telegram. No habrá manera de recuperarla.</string>
-    <string name="YourEmailAlmostThere">¡Ya casi!</string>
-    <string name="YourEmailAlmostThereText">Por favor, revisa tu e-mail (no olvides la carpeta de spam) para completar la configuración de la verificación en dos pasos.</string>
-    <string name="YourPasswordSuccess">¡Listo!</string>
-    <string name="YourPasswordSuccessText">Tu contraseña para la verificación en dos pasos está activada.</string>
-    <string name="ChangePassword">Cambiar contraseña</string>
-    <string name="TurnPasswordOff">Desactivar la contraseña</string>
-    <string name="SetRecoveryEmail">Poner e-mail de recuperación</string>
-    <string name="ChangeRecoveryEmail">Cambiar e-mail de recuperación</string>
-    <string name="TurnPasswordOffQuestion">¿Quieres desactivar tu contraseña?</string>
-    <string name="PasswordHint">Pista para la contraseña</string>
-    <string name="PasswordHintText">Por favor, crea una pista para tu contraseña</string>
-    <string name="PasswordDoNotMatch">Las contraseñas no coinciden</string>
-    <string name="AbortPassword">Anular la configuración de la verificación en dos pasos</string>
-    <string name="EmailPasswordConfirmText">Por favor, sigue estos pasos para completar la configuración de la verificación en dos pasos:\n\n1. Revisa tu e-mail (no olvides la carpeta de spam).\n%1$s\n\n2. Haz click en el enlace de validación.</string>
-    <string name="PasswordAsHintError">La pista debe ser diferente de tu contraseña</string>
-    <string name="PasswordEmailInvalid">E-mail inválido</string>
-    <string name="RestorePasswordNoEmailTitle">Lo sentimos</string>
-    <string name="RestorePasswordNoEmailText">Como no estableciste un e-mail de recuperación cuando configuraste tu contraseña, las opciones restantes son recordar tu contraseña o restablecer tu cuenta.</string>
-    <string name="RestoreEmailSent">Enviamos un código de recuperación al e-mail que nos diste:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Por favor, revisa tu e-mail y pon el código de 6 dígitos que te enviamos ahí.</string>
-    <string name="RestoreEmailTrouble">¿Tienes problemas para acceder a tu e-mail %1$s?</string>
-    <string name="RestoreEmailTroubleText">Si no puedes acceder a tu e-mail, las opciones restantes son recordar tu contraseña o restablecer tu cuenta.</string>
-    <string name="ResetMyAccount">RESTABLECER MI CUENTA</string>
-    <string name="ResetMyAccountText">Si continúas con el reinicio de tu cuenta, perderás todos tus chats y mensajes, junto con toda la multimedia y archivos que compartiste.</string>
-    <string name="ResetMyAccountWarning">Advertencia</string>
-    <string name="ResetMyAccountWarningText">Esta acción no puede deshacerse.\n\nSi reinicias tu cuenta, todos tus mensajes y chats se eliminarán.</string>
-    <string name="ResetMyAccountWarningReset">Restablecer</string>
-    <string name="LoginPassword">Contraseña</string>
-    <string name="LoginPasswordText">Activaste la verificación en dos pasos, así que tu cuenta está protegida con una contraseña adicional.</string>
-    <string name="ForgotPassword">¿Olvidaste la contraseña?</string>
-    <string name="PasswordRecovery">Recuperar contraseña</string>
-    <string name="PasswordCode">Código</string>
-    <string name="PasswordReset">Contraseña desactivada</string>
-    <string name="EnabledPasswordText">Tienes activada la verificación en dos pasos.\nNecesitarás la contraseña que configuraste para iniciar tu sesión en Telegram.</string>
-    <string name="PendingEmailText">Tu e-mail de recuperación %1$s aún no está activo y su confirmación está pendiente.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacidad y seguridad</string>
-    <string name="PrivacyTitle">Privacidad</string>
-    <string name="PrivacyLastSeen">Última conexión</string>
-    <string name="LastSeenEverybody">Todos</string>
-    <string name="LastSeenContacts">Mis contactos</string>
-    <string name="LastSeenNobody">Nadie</string>
-    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
-    <string name="LastSeenContactsPlus">Mis contactos (+%1$d)</string>
-    <string name="LastSeenContactsMinus">Mis contactos (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">Mis contactos (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Nadie (+%1$d)</string>
-    <string name="SecurityTitle">Seguridad</string>
-    <string name="DeleteAccountTitle">Autodestrucción de la cuenta</string>
-    <string name="DeleteAccountIfAwayFor">Si estoy fuera</string>
-    <string name="DeleteAccountHelp">Si no inicias sesión durante este tiempo, al menos una vez, tu cuenta se eliminará con todos tus grupos, mensajes y contactos.</string>
-    <string name="DeleteAccountNowConfirmation">¿Queres eliminar tu cuenta?</string>
-    <string name="LastSeenHelp">Elige quién puede ver tu última conexión.</string>
-    <string name="LastSeenTitle">¿Quién puede ver tu última conexión?</string>
-    <string name="AddExceptions">Añadir excepciones</string>
-    <string name="CustomHelp">Importante: No podrás ver la última conexión de las personas con las que no compartes la tuya. En su lugar, se mostrarán conexiones indeterminadas (recientemente, hace unos días, hace unas semanas).</string>
-    <string name="AlwaysShareWith">Compartir siempre con</string>
-    <string name="NeverShareWith">Nunca compartir con</string>
-    <string name="CustomShareSettingsHelp">Estos ajustes anularán los valores de arriba.</string>
-    <string name="AlwaysShareWithTitle">Siempre compartir</string>
-    <string name="AlwaysShareWithPlaceholder">Siempre compartir con...</string>
-    <string name="NeverShareWithTitle">Nunca compartir</string>
-    <string name="NeverShareWithPlaceholder">Nunca compartir con...</string>
-    <string name="EmpryUsersPlaceholder">Añadir usuarios</string>
-    <string name="PrivacyFloodControlError">Lo sentimos, hay demasiadas solicitudes. Es imposible cambiar los ajustes de privacidad ahora. Por favor, espera.</string>
-    <string name="ClearOtherSessionsHelp">Salir de todos los dispositivos, excepto este.</string>
-    <string name="RemoveFromListText">Mantén pulsado sobre un usuario para eliminarlo.</string>
-    <string name="GroupsAndChannels">Grupos</string>
-    <string name="WhoCanAddMe">¿Quién puede añadirme a grupos?</string>
-    <string name="WhoCanAddMeInfo">Puedes restringir quién puede añadirte a grupos o canales con gran precisión.</string>
-    <string name="AlwaysAllow">Permitir</string>
-    <string name="NeverAllow">No permitir</string>
-    <string name="AlwaysAllowPlaceholder">Permitir...</string>
-    <string name="NeverAllowPlaceholder">No permitir...</string>
-    <string name="CustomShareInfo">Estos usuarios podrán o no añadirte a grupos y canales, independiente de los ajustes de arriba.</string>
-    <string name="GroupsAndChannelsHelp">Cambia quiénes pueden añadirte a grupos o canales.</string>
-    <string name="InviteToGroupError">No puedes añadir este usuario a grupos debido a sus ajustes de privacidad.</string>
-    <string name="InviteToChannelError">No puedes añadir este usuario a canales debido a sus ajustes de privacidad.</string>
-    <string name="CreateGroupError">No puedes crear un grupo con estos usuarios debido a sus ajustes de privacidad.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Editar vídeo</string>
-    <string name="OriginalVideo">Vídeo original</string>
-    <string name="EditedVideo">Vídeo editado</string>
-    <string name="SendingVideo">Enviando vídeo...</string>
-    <string name="CompressVideo">Comprimir Vídeo</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Compartir</string>
-    <string name="BotInvite">Añadir a un grupo</string>
-    <string name="BotSettings">Ajustes</string>
-    <string name="BotHelp">Ayuda</string>
-    <string name="BotStatusRead">tiene acceso a los mensajes</string>
-    <string name="BotStatusCantRead">no tiene acceso a los mensajes</string>
-    <string name="BotInfoTitle">¿Qué puede hacer este bot?</string>
-    <string name="BotStart">INICIAR</string>
-    <string name="BotUnblock">REINICIAR</string>
-    <string name="BotStop">Detener bot</string>
-    <string name="BotRestart">Reiniciar bot</string>
-    <!--button titles-->
-    <string name="Next">Siguiente</string>
-    <string name="Back">Atrás</string>
-    <string name="Done">Hecho</string>
-    <string name="Open">Abrir</string>
-    <string name="Save">Guardar</string>
-    <string name="Cancel">Cancelar</string>
-    <string name="Close">Cerrar</string>
-    <string name="Add">Añadir</string>
-    <string name="Edit">Editar</string>
-    <string name="Send">Enviar</string>
-    <string name="Call">Llamar</string>
-    <string name="Copy">Copiar</string>
-    <string name="Delete">Eliminar</string>
-    <string name="DeleteAndStop">Eliminar y detener</string>
-    <string name="Forward">Reenviar</string>
-    <string name="Retry">Reintentar</string>
-    <string name="FromCamera">Desde la cámara</string>
-    <string name="FromGalley">Desde la galería</string>
-    <string name="DeletePhoto">Eliminar foto</string>
-    <string name="Set">Establecer</string>
-    <string name="OK">OK</string>
-    <string name="Crop">RECORTAR</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Te uniste al grupo con un enlace de invitación</string>
-    <string name="ActionInviteUser">un1 se unió al grupo con un enlace de invitación</string>
-    <string name="ActionKickUser">un1 eliminó a un2</string>
-    <string name="ActionLeftUser">un1 dejó el grupo</string>
-    <string name="ActionAddUser">un1 añadió a un2</string>
-    <string name="ActionRemovedPhoto">un1 eliminó la foto del grupo</string>
-    <string name="ActionChangedPhoto">un1 cambió la foto del grupo</string>
-    <string name="ActionChangedTitle">un1 cambió el nombre del grupo a un2</string>
-    <string name="ActionCreateGroup">un1 creó el grupo</string>
-    <string name="ActionYouKickUser">Eliminaste a un2</string>
-    <string name="ActionYouLeftUser">Dejaste el grupo</string>
-    <string name="ActionYouAddUser">Añadiste a un2</string>
-    <string name="ActionYouRemovedPhoto">Eliminaste la foto del grupo</string>
-    <string name="ActionYouChangedPhoto">Cambiaste la foto del grupo</string>
-    <string name="ActionYouChangedTitle">Cambiaste el nombre del grupo a un2</string>
-    <string name="ActionYouCreateGroup">Creaste el grupo</string>
-    <string name="ActionKickUserYou">un1 te eliminó</string>
-    <string name="ActionAddUserYou">un1 te añadió</string>
-    <string name="ActionAddUserSelf">un1 volvió al grupo</string>
-    <string name="ActionAddUserSelfYou">Volviste al grupo</string>
-    <string name="UnsupportedMedia">Tu versión de Telegram no soporta este mensaje. Por favor, actualiza tu app para verlo: https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Vídeo</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Ubicación</string>
-    <string name="AttachContact">Contacto</string>
-    <string name="AttachDocument">Archivo</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Mensaje de voz</string>
-    <string name="FromYou">Tú</string>
-    <string name="ActionTakeScreenshootYou">¡Hiciste una captura de pantalla!</string>
-    <string name="ActionTakeScreenshoot">¡un1 hizo una captura de pantalla!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Número de teléfono inválido</string>
-    <string name="CodeExpired">Código expirado. Por favor, vuelve a iniciar sesión.</string>
-    <string name="FloodWait">Muchos intentos. Por favor, prueba de nuevo más tarde.</string>
-    <string name="FloodWaitTime">Demasiados intentos. Por favor, reinténtalo en %1$s</string>
-    <string name="InvalidCode">Código inválido</string>
-    <string name="InvalidFirstName">Nombre inválido</string>
-    <string name="InvalidLastName">Apellidos inválidos</string>
-    <string name="Loading">Cargando...</string>
-    <string name="NoPlayerInstalled">No tienes reproductor de vídeo. Por favor, instala uno para continuar.</string>
-    <string name="NoMailInstalled">Por favor, envía un correo electrónico a sms@stel.com y cuéntanos tu problema.</string>
-    <string name="NoHandleAppInstalled">No tienes aplicaciones que puedan manejar el tipo de archivo \'%1$s\'. Por favor, instala una para continuar.</string>
-    <string name="InviteUser">Este usuario aún no tiene Telegram. ¿Enviarle una invitación?</string>
-    <string name="AreYouSure">¿Quieres hacerlo?</string>
-    <string name="AddToTheGroupTitle">¿Añadir a %1$s al chat %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Cantidad de últimos mensajes para reenviar:</string>
-    <string name="AddToTheGroup">¿Añadir a %1$s al grupo?</string>
-    <string name="UserAlreadyInGroup">Este usuario ya está en el grupo</string>
-    <string name="ForwardMessagesTo">¿Reenviar mensajes a %1$s?</string>
-    <string name="SendMessagesTo">¿Enviar mensajes a %1$s?</string>
-    <string name="SendContactTo">¿Enviar contacto a %1$s?</string>
-    <string name="AreYouSureLogout">¿Quieres cerrar sesión?\n\nConsidera que puedes usar Telegram en todos tus dispositivos a la vez.\n\nRecuerda que, al cerrar sesión, eliminas todos tus chats secretos.</string>
-    <string name="AreYouSureSessions">¿Quieres terminar todas las otras sesiones?</string>
-    <string name="AreYouSureDeleteAndExit">¿Quieres eliminar y dejar el grupo?</string>
-    <string name="AreYouSureDeleteThisChat">¿Quieres eliminar este chat?</string>
-    <string name="AreYouSureShareMyContactInfo">¿Quieres compartir tu número?</string>
-    <string name="AreYouSureBlockContact">¿Quieres bloquear este contacto?</string>
-    <string name="AreYouSureUnblockContact">¿Quieres desbloquear este contacto?</string>
-    <string name="AreYouSureDeleteContact">¿Quieres eliminar este contacto?</string>
-    <string name="AreYouSureSecretChat">¿Quieres iniciar un chat secreto?</string>
-    <string name="AreYouSureRegistration">¿Quieres cancelar el registro?</string>
-    <string name="AreYouSureClearHistory">¿Quieres eliminar el historial?</string>
-    <string name="AreYouSureClearHistoryChannel">¿Eliminar de la caché los mensajes y multimedia de este canal?</string>
-    <string name="AreYouSureClearHistorySuper">¿Eliminar de la caché los mensajes y multimedia de este supergrupo?</string>
-    <string name="AreYouSureDeleteMessages">¿Quieres eliminar %1$s?</string>
-    <string name="SendMessagesToGroup">¿Enviar mensajes a %1$s?</string>
-    <string name="SendContactToGroup">¿Enviar contacto a %1$s?</string>
-    <string name="ForwardMessagesToGroup">¿Reenviar mensajes a %1$s?</string>
-    <string name="FeatureUnavailable">Lo sentimos, esta característica no está disponible en tu país actualmente.</string>
-    <string name="NoUsernameFound">No hay ninguna cuenta de Telegram con este alias.</string>
-    <string name="BotCantJoinGroups">Este bot no puede unirse a grupos.</string>
-    <string name="SecretLinkPreviewAlert">¿Quieres permitir las vistas previas ampliadas en chats secretos? Ten en cuenta que son generadas en los servidores de Telegram.</string>
-    <string name="SecretChatContextBotAlert">Ten en cuenta que los bots integrados son hechos por terceros. Para que funcione, los símbolos escritos después del alias del bot, son enviados al desarrollador respectivo.</string>
-    <string name="RaiseToSpeakAlert">¿Quieres habilitar \"Elevar para hablar\" para mensajes de voz?</string>
-    <string name="EditMessageError">No puedes editar este mensaje.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram necesita el acceso a tus contactos, para que puedas comunicarte con ellos en todos tus dispositivos.</string>
-    <string name="PermissionStorage">Telegram necesita acceso a tu almacenamiento, para que puedas enviar y guardar fotos, vídeos, música y otros archivos.</string>
-    <string name="PermissionNoAudio">Telegram necesita acceso a tu micrófono, para que puedas enviar mensajes de voz.</string>
-    <string name="PermissionNoLocation">Telegram necesita acceso a tu ubicación, para que puedas compartirla con tus amigos.</string>
-    <string name="PermissionOpenSettings">AJUSTES</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Rápida</string>
-    <string name="Page3Title">Gratis</string>
-    <string name="Page4Title">Segura</string>
-    <string name="Page5Title">Poderosa</string>
-    <string name="Page6Title">Basada en la nube</string>
-    <string name="Page7Title">Privada</string>
-    <string name="Page1Message">La aplicación de mensajería más<![CDATA[<br/><b>veloz</b>]]> del mundo. Es <![CDATA[<b>gratis</b>]]> y <![CDATA[<b>segura</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> entrega mensajes más<![CDATA[<br/>]]>rápido que cualquier otra aplicación.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> es gratis para siempre.<![CDATA[<br/>]]>Sin publicidad ni suscripciones.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> mantiene tus mensajes<![CDATA[<br/>]]>a salvo del ataque de hackers.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> no tiene límites en<![CDATA[<br/>]]>el tamaño de tus chats y archivos.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> te permite acceder a tus<![CDATA[<br/>]]>mensajes desde múltiples dispositivos.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> posee mensajes fuertemente<![CDATA[<br/>]]>cifrados y se pueden autodestruir.</string>
-    <string name="StartMessaging">Empieza a conversar</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d en línea</string>
-    <string name="Online_one">%1$d en línea</string>
-    <string name="Online_two">%1$d en línea</string>
-    <string name="Online_few">%1$d en línea</string>
-    <string name="Online_many">%1$d en línea</string>
-    <string name="Online_other">%1$d en línea</string>
-    <string name="Members_zero">%1$d miembros</string>
-    <string name="Members_one">%1$d miembro</string>
-    <string name="Members_two">%1$d miembros</string>
-    <string name="Members_few">%1$d miembros</string>
-    <string name="Members_many">%1$d miembros</string>
-    <string name="Members_other">%1$d miembros</string>
-    <string name="AndMoreTyping_zero">y %1$d personas más están escribiendo</string>
-    <string name="AndMoreTyping_one">y %1$d más están escribiendo</string>
-    <string name="AndMoreTyping_two">y %1$d personas más están escribiendo</string>
-    <string name="AndMoreTyping_few">y %1$d personas más están escribiendo</string>
-    <string name="AndMoreTyping_many">y %1$d personas más están escribiendo</string>
-    <string name="AndMoreTyping_other">y %1$d personas más están escribiendo</string>
-    <string name="NewMessages_zero">Sin mensajes nuevos</string>
-    <string name="NewMessages_one">%1$d nuevo mensaje</string>
-    <string name="NewMessages_two">%1$d nuevos mensajes</string>
-    <string name="NewMessages_few">%1$d nuevos mensajes</string>
-    <string name="NewMessages_many">%1$d nuevos mensajes</string>
-    <string name="NewMessages_other">%1$d nuevos mensajes</string>
-    <string name="messages_zero">Sin mensajes</string>
-    <string name="messages_one">%1$d mensaje</string>
-    <string name="messages_two">%1$d mensajes</string>
-    <string name="messages_few">%1$d mensajes</string>
-    <string name="messages_many">%1$d mensajes</string>
-    <string name="messages_other">%1$d mensajes</string>
-    <string name="comments_zero">%1$d comentarios</string>
-    <string name="comments_one">%1$d comentario</string>
-    <string name="comments_two">%1$d comentarios</string>
-    <string name="comments_few">%1$d comentarios</string>
-    <string name="comments_many">%1$d comentarios</string>
-    <string name="comments_other">%1$d comentarios</string>
-    <string name="items_zero">Sin ítems</string>
-    <string name="items_one">%1$d ítem</string>
-    <string name="items_two">%1$d ítems</string>
-    <string name="items_few">%1$d ítems</string>
-    <string name="items_many">%1$d ítems</string>
-    <string name="items_other">%1$d ítems</string>
-    <string name="FromChats_zero">desde ningún chat</string>
-    <string name="FromChats_one">desde %1$d chat</string>
-    <string name="FromChats_two">desde %1$d chats</string>
-    <string name="FromChats_few">desde %1$d chats</string>
-    <string name="FromChats_many">desde %1$d chats</string>
-    <string name="FromChats_other">desde %1$d chats</string>
-    <string name="Seconds_zero">%1$d segundos</string>
-    <string name="Seconds_one">%1$d segundo</string>
-    <string name="Seconds_two">%1$d segundos</string>
-    <string name="Seconds_few">%1$d segundos</string>
-    <string name="Seconds_many">%1$d segundos</string>
-    <string name="Seconds_other">%1$d segundos</string>
-    <string name="Minutes_zero">%1$d minutos</string>
-    <string name="Minutes_one">%1$d minuto</string>
-    <string name="Minutes_two">%1$d minutos</string>
-    <string name="Minutes_few">%1$d minutos</string>
-    <string name="Minutes_many">%1$d minutos</string>
-    <string name="Minutes_other">%1$d minutos</string>
-    <string name="Hours_zero">%1$d horas</string>
-    <string name="Hours_one">%1$d hora</string>
-    <string name="Hours_two">%1$d horas</string>
-    <string name="Hours_few">%1$d horas</string>
-    <string name="Hours_many">%1$d horas</string>
-    <string name="Hours_other">%1$d horas</string>
-    <string name="Days_zero">%1$d días</string>
-    <string name="Days_one">%1$d día</string>
-    <string name="Days_two">%1$d días</string>
-    <string name="Days_few">%1$d días</string>
-    <string name="Days_many">%1$d días</string>
-    <string name="Days_other">%1$d días</string>
-    <string name="Weeks_zero">%1$d semanas</string>
-    <string name="Weeks_one">%1$d semana</string>
-    <string name="Weeks_two">%1$d semanas</string>
-    <string name="Weeks_few">%1$d semanas</string>
-    <string name="Weeks_many">%1$d semanas</string>
-    <string name="Weeks_other">%1$d semanas</string>
-    <string name="Months_zero">%1$d meses</string>
-    <string name="Months_one">%1$d mes</string>
-    <string name="Months_two">%1$d meses</string>
-    <string name="Months_few">%1$d meses</string>
-    <string name="Months_many">%1$d meses</string>
-    <string name="Months_other">%1$d meses</string>
-    <string name="Years_zero">%1$d años</string>
-    <string name="Years_one">%1$d año</string>
-    <string name="Years_two">%1$d años</string>
-    <string name="Years_few">%1$d años</string>
-    <string name="Years_many">%1$d años</string>
-    <string name="Years_other">%1$d años</string>
-    <string name="Users_zero">%1$d usuarios</string>
-    <string name="Users_one">%1$d usuario</string>
-    <string name="Users_two">%1$d usuarios</string>
-    <string name="Users_few">%1$d usuarios</string>
-    <string name="Users_many">%1$d usuarios</string>
-    <string name="Users_other">%1$d usuarios</string>
-    <string name="Times_zero">%1$d veces</string>
-    <string name="Times_one">%1$d vez</string>
-    <string name="Times_two">%1$d veces</string>
-    <string name="Times_few">%1$d veces</string>
-    <string name="Times_many">%1$d veces</string>
-    <string name="Times_other">%1$d veces</string>
-    <string name="Meters_zero">%1$d metros</string>
-    <string name="Meters_one">%1$d metro</string>
-    <string name="Meters_two">%1$d metros</string>
-    <string name="Meters_few">%1$d metros</string>
-    <string name="Meters_many">%1$d metros</string>
-    <string name="Meters_other">%1$d metros</string>
-    <string name="Stickers_zero">%1$d stickers</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d stickers</string>
-    <string name="Stickers_few">%1$d stickers</string>
-    <string name="Stickers_many">%1$d stickers</string>
-    <string name="Stickers_other">%1$d stickers</string>
-    <string name="Photos_zero">%1$d fotos</string>
-    <string name="Photos_one">%1$d foto</string>
-    <string name="Photos_two">%1$d fotos</string>
-    <string name="Photos_few">%1$d fotos</string>
-    <string name="Photos_many">%1$d fotos</string>
-    <string name="Photos_other">%1$d fotos</string>
-    <string name="LastSeenMinutes_zero">últ. vez hace %1$d minutos</string>
-    <string name="LastSeenMinutes_one">últ. vez hace %1$d minuto</string>
-    <string name="LastSeenMinutes_two">últ. vez hace %1$d minutos</string>
-    <string name="LastSeenMinutes_few">últ. vez hace %1$d minutos</string>
-    <string name="LastSeenMinutes_many">últ. vez hace %1$d minutos</string>
-    <string name="LastSeenMinutes_other">últ. vez hace %1$d minutos</string>
-    <string name="LastSeenHours_zero">últ. vez hace %1$d horas</string>
-    <string name="LastSeenHours_one">últ. vez hace %1$d hora</string>
-    <string name="LastSeenHours_two">últ. vez hace %1$d horas</string>
-    <string name="LastSeenHours_few">últ. vez hace %1$d horas</string>
-    <string name="LastSeenHours_many">últ. vez hace %1$d horas</string>
-    <string name="LastSeenHours_other">últ. vez hace %1$d horas</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d mensajes adjuntos</string>
-    <string name="ForwardedMessage_one">Mensaje adjunto</string>
-    <string name="ForwardedMessage_two">%1$d mensajes adjuntos</string>
-    <string name="ForwardedMessage_few">%1$d mensajes adjuntos</string>
-    <string name="ForwardedMessage_many">%1$d mensajes adjuntos</string>
-    <string name="ForwardedMessage_other">%1$d mensajes adjuntos</string>
-    <string name="ForwardedFile_zero">%1$d archivos adjuntos</string>
-    <string name="ForwardedFile_one">Archivo adjunto</string>
-    <string name="ForwardedFile_two">%1$d archivos adjuntos</string>
-    <string name="ForwardedFile_few">%1$d archivos adjuntos</string>
-    <string name="ForwardedFile_many">%1$d archivos adjuntos</string>
-    <string name="ForwardedFile_other">%1$d archivos adjuntos</string>
-    <string name="ForwardedPhoto_zero">%1$d fotos adjuntas</string>
-    <string name="ForwardedPhoto_one">Foto adjunta</string>
-    <string name="ForwardedPhoto_two">%1$d fotos adjuntas</string>
-    <string name="ForwardedPhoto_few">%1$d fotos adjuntas</string>
-    <string name="ForwardedPhoto_many">%1$d fotos adjuntas</string>
-    <string name="ForwardedPhoto_other">%1$d fotos adjuntas</string>
-    <string name="ForwardedVideo_zero">%1$d vídeos adjuntos</string>
-    <string name="ForwardedVideo_one">Vídeo adjunto</string>
-    <string name="ForwardedVideo_two">%1$d vídeos adjuntos</string>
-    <string name="ForwardedVideo_few">%1$d vídeos adjuntos</string>
-    <string name="ForwardedVideo_many">%1$d vídeos adjuntos</string>
-    <string name="ForwardedVideo_other">%1$d vídeos adjuntos</string>
-    <string name="ForwardedMusic_zero">%1$d pistas reenviadas</string>
-    <string name="ForwardedMusic_one">Pista reenviada</string>
-    <string name="ForwardedMusic_two">%1$d pistas reenviadas</string>
-    <string name="ForwardedMusic_few">%1$d pistas reenviadas</string>
-    <string name="ForwardedMusic_many">%1$d pistas reenviadas</string>
-    <string name="ForwardedMusic_other">%1$d pistas reenviadas</string>
-    <string name="ForwardedAudio_zero">%1$d mensajes de voz reenviados</string>
-    <string name="ForwardedAudio_one">Mensaje de voz reenviado</string>
-    <string name="ForwardedAudio_two">%1$d mensajes de voz reenviados</string>
-    <string name="ForwardedAudio_few">%1$d mensajes de voz reenviados</string>
-    <string name="ForwardedAudio_many">%1$d mensajes de voz reenviados</string>
-    <string name="ForwardedAudio_other">%1$d mensajes de voz reenviados</string>
-    <string name="ForwardedLocation_zero">%1$d ubicaciones adjuntas</string>
-    <string name="ForwardedLocation_one">Ubicación adjunta</string>
-    <string name="ForwardedLocation_two">%1$d ubicaciones adjuntas</string>
-    <string name="ForwardedLocation_few">%1$d ubicaciones adjuntas</string>
-    <string name="ForwardedLocation_many">%1$d ubicaciones adjuntas</string>
-    <string name="ForwardedLocation_other">%1$d ubicaciones adjuntas</string>
-    <string name="ForwardedContact_zero">%1$d contactos adjuntos</string>
-    <string name="ForwardedContact_one">Contacto adjunto</string>
-    <string name="ForwardedContact_two">%1$d contactos adjuntos</string>
-    <string name="ForwardedContact_few">%1$d contactos adjuntos</string>
-    <string name="ForwardedContact_many">%1$d contactos adjuntos</string>
-    <string name="ForwardedContact_other">%1$d contactos adjuntos</string>
-    <string name="ForwardedSticker_zero">%1$d stickers adjuntos</string>
-    <string name="ForwardedSticker_one">Sticker adjunto</string>
-    <string name="ForwardedSticker_two">%1$d stickers adjuntos</string>
-    <string name="ForwardedSticker_few">%1$d stickers adjuntos</string>
-    <string name="ForwardedSticker_many">%1$d stickers adjuntos</string>
-    <string name="ForwardedSticker_other">%1$d stickers adjuntos</string>
-    <string name="AndOther_zero">y %1$d otros</string>
-    <string name="AndOther_one">and %1$d más</string>
-    <string name="AndOther_two">y otros %1$d</string>
-    <string name="AndOther_few">y otros %1$d</string>
-    <string name="AndOther_many">y otros %1$d</string>
-    <string name="AndOther_other">y otros %1$d</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM \'de\' yyyy</string>
-    <string name="formatterMonth">dd \'de\' MMM</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d \'de\' MMMM</string>
-    <string name="chatFullDate">d \'de\' MMMM \'de\' yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s a las %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
deleted file mode 100644
index bcae59fba..000000000
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--https://www.transifex.com/projects/p/telegram/language/it/members/-->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">Italiano</string>
-    <string name="LanguageNameInEnglish">Italian</string>
-    <string name="LanguageCode">it</string>
-    <!--signin view-->
-    <string name="YourPhone">Il tuo telefono</string>
-    <string name="StartText">Conferma il prefisso nazionale e inserisci il tuo numero di telefono.</string>
-    <string name="ChooseCountry">Scegli una nazione</string>
-    <string name="WrongCountry">Prefisso errato</string>
-    <!--code enter view-->
-    <string name="YourCode">Il tuo codice</string>
-    <string name="SentSmsCode">Abbiamo inviato un SMS con il codice di attivazione al tuo telefono</string>
-    <string name="CallText">Ti telefoneremo tra %1$d:%2$02d</string>
-    <string name="Calling">Ti stiamo chiamando…</string>
-    <string name="Code">Codice</string>
-    <string name="WrongNumber">Numero errato?</string>
-    <string name="DidNotGetTheCode">Non hai ricevuto il codice?</string>
-    <!--signup view-->
-    <string name="YourName">Il tuo nome</string>
-    <string name="RegisterText">Inserisci il tuo nome e cognome</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Nome (richiesto)</string>
-    <string name="LastName">Cognome (facoltativo)</string>
-    <string name="CancelRegistration">Annulla registrazione</string>
-    <!--chats view-->
-    <string name="Settings">Impostazioni</string>
-    <string name="Contacts">Contatti</string>
-    <string name="NewGroup">Nuovo gruppo</string>
-    <string name="Yesterday">ieri</string>
-    <string name="NoResult">Nessun risultato</string>
-    <string name="NoChats">Ancora nessuna chat…</string>
-    <string name="NoChatsHelp">Inizia a scrivere premendo il tasto\nnuovo messaggio nell\'angolo in basso a destra\no apri il menu per avere più opzioni.</string>
-    <string name="WaitingForNetwork">Attendo la rete...</string>
-    <string name="Connecting">Connetto…</string>
-    <string name="Updating">Aggiorno…</string>
-    <string name="NewSecretChat">Nuova chat segreta</string>
-    <string name="AwaitingEncryption">Aspettando che %s si colleghi…</string>
-    <string name="EncryptionRejected">Chat segreta annullata</string>
-    <string name="EncryptionProcessing">Scambio delle chiavi di cifratura...</string>
-    <string name="EncryptedChatStartedOutgoing">%s si è unito alla tua chat segreta.</string>
-    <string name="EncryptedChatStartedIncoming">Sei entrato nella chat segreta.</string>
-    <string name="ClearHistory">Cancella cronologia</string>
-    <string name="ClearHistoryCache">Elimina dalla cache</string>
-    <string name="DeleteChat">Elimina ed esci</string>
-    <string name="DeleteChatUser">Elimina chat</string>
-    <string name="HiddenName">Account eliminato</string>
-    <string name="SelectChat">Seleziona chat</string>
-    <string name="PhotoTip">Tieni premuto per vedere</string>
-    <string name="CompatibilityChat">%1$s sta usando una versione vecchia di Telegram, quindi le foto segrete verranno visualizzate in modalità di compatibilità.\n\nUna volta che %2$s avrà aggiornato Telegram, le foto con il timer minore di 1 minuto funzioneranno in modalità \'Tieni premuto per vedere\' , e verrai notificato ogni volta che l\'altro esegue uno screenshot.</string>
-    <string name="SearchMessages">MESSAGGI</string>
-    <string name="Search">Cerca</string>
-    <string name="MuteNotifications">Silenzia notifiche</string>
-    <string name="MuteFor">Silenzia per %1$s</string>
-    <string name="UnmuteNotifications">Suona</string>
-    <string name="WillUnmuteIn">Tra %1$s</string>
-    <string name="MuteDisable">Disabilita</string>
-    <string name="Hashtags">HASHTAG</string>
-    <string name="Recent">RECENTI</string>
-    <string name="LinkPreview">Anteprima link</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Rendi amministratore</string>
-    <string name="DescriptionInfoMega">Puoi inserire una descrizione opzionale per il tuo gruppo.</string>
-    <string name="LeaveMega">Lascia il gruppo</string>
-    <string name="DeleteMega">Elimina gruppo</string>
-    <string name="LeaveMegaMenu">Lascia il gruppo</string>
-    <string name="DeleteMegaMenu">Elimina gruppo</string>
-    <string name="MegaDeleteInfo">Perderai tutti i messaggi in questo gruppo.</string>
-    <string name="MegaAdminsInfo">Puoi aggiungere amministratori per farti aiutare a gestire il tuo gruppo. Tieni premuto per rimuoverli.</string>
-    <string name="MegaDeleteAlert">Aspetta! Eliminando il gruppo rimuoverai tutti i membri e tutti i messaggi saranno persi. Vuoi comunque eliminare il gruppo?</string>
-    <string name="ActionCreateMega">Gruppo creato</string>
-    <string name="MegaAddedBy">un1 ti ha aggiunto a questo gruppo</string>
-    <string name="MegaLeaveAlert">Sei sicuro di voler lasciare il gruppo?</string>
-    <string name="GroupUserCantAdd">Spiacenti, non puoi aggiungere questo utente ai gruppi.</string>
-    <string name="GroupUserAddLimit">Spiacenti, questo gruppo è pieno.</string>
-    <string name="GroupUserLeftError">Spiacenti, questo utente ha deciso di lasciare il gruppo, quindi non puoi reinvitarlo.</string>
-    <string name="GroupUserCantAdmin">Spiacenti, troppi amministratori in questo gruppo.</string>
-    <string name="GroupUserCantBot">Spiacenti, troppi bot in questo gruppo.</string>
-    <string name="ActionMigrateFromGroup">Questo gruppo è stato aggiornato a supergruppo</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s è stato aggiornato a supergruppo.</string>
-    <string name="NoBlockedGroup">Gli utenti in lista nera sono rimossi dal gruppo e possono tornare solo se invitati da un amministratore. I link di invito non funzionano per loro.</string>
-    <string name="NewChannel">Nuovo canale</string>
-    <string name="EnterChannelName">Nome canale</string>
-    <string name="Comments">Commenti</string>
-    <string name="CommentsInfo">Se attivi i commenti, i membri potranno discutere quello che pubblichi nel canale.</string>
-    <string name="AddMutual">Aggiungi contatti al tuo canale</string>
-    <string name="ChannelUsernameHelp">Le persone possono condividere questo link con gli altri e trovare il tuo canale usando la ricerca di Telegram.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">link</string>
-    <string name="ChannelPrivateLinkHelp">Le persone possono unirsi al tuo canale tramite questo link. Puoi revocare il link in ogni momento.</string>
-    <string name="DescriptionPlaceholder">Descrizione</string>
-    <string name="DescriptionInfo">Puoi inserire una descrizione opzionale per il tuo canale.</string>
-    <string name="ChannelPublic">Canale pubblico</string>
-    <string name="ChannelPublicInfo">I canali pubblici possono essere trovati nella ricerca, chiunque può unirsi.</string>
-    <string name="ChannelPrivate">Canale privato</string>
-    <string name="ChannelPrivateInfo">Ci si può unire ai canali privati solo via link di invito.</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Link di invito</string>
-    <string name="ChannelAddMembers">Aggiungi membri</string>
-    <string name="LeaveChannel">Lascia il canale</string>
-    <string name="LeaveChannelMenu">Lascia il canale</string>
-    <string name="ChannelSettings">Impostazioni</string>
-    <string name="ChannelJoin">UNISCITI</string>
-    <string name="OpenChannelProfile">Info canale</string>
-    <string name="ChannelBroadcast">Broadcast</string>
-    <string name="ChannelComment">Commento</string>
-    <string name="ShowDiscussion">mostra commenti</string>
-    <string name="ChannelAlertTitle">Cos\'è un canale?</string>
-    <string name="ChannelAlertText">I canali sono un nuovo strumento per diffondere i tuoi messaggi a un grande pubblico.</string>
-    <string name="ChannelAlertCreate">CREA CANALE</string>
-    <string name="LinkInUse">Spiacenti, questo nome è già stato preso.</string>
-    <string name="LinkInvalid">Spiacenti, questo nome non è valido.</string>
-    <string name="LinkInvalidShort">I nomi devi canali devono avere almeno 5 caratteri.</string>
-    <string name="LinkInvalidLong">Il nome non può superare i 32 caratteri.</string>
-    <string name="LinkInvalidStartNumber">I nomi dei canali non possono iniziare con un numero.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Controllo il nome...</string>
-    <string name="LinkAvailable">%1$s è disponibile.</string>
-    <string name="ChannelMembers">Membri</string>
-    <string name="ChannelBlockedUsers">Utenti bloccati</string>
-    <string name="ChannelAdministrators">Amministratori</string>
-    <string name="ChannelDelete">Elimina canale</string>
-    <string name="ChannelDeleteMenu">Elimina canale</string>
-    <string name="ChannelDeleteAlert">Aspetta! Eliminando il canale rimuoverai tutti i membri e tutti i messaggi saranno persi. Vuoi comunque eliminare il canale?</string>
-    <string name="ChannelLeaveAlert">Sei sicuro di voler lasciare il canale?</string>
-    <string name="ChannelDeleteInfo">Perderai tutti i messaggi in questo canale.</string>
-    <string name="ChannelEdit">Modifica</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Per favore ricorda che se scegli un link pubblico per il tuo canale, chiunque sarà in grado di trovarlo nella ricerca e unirsi.\n\nNon creare questo link se vuoi che il tuo canale rimanga privato.</string>
-    <string name="ChannelPublicEmptyUsername">Per favore scegli un link per il tuo canale pubblico, in modo che possa essere trovato nella ricerca e condiviso con altri.\n\nSe non sei interessato, ti consigliamo di creare un canale privato.</string>
-    <string name="ActionCreateChannel">Canale creato</string>
-    <string name="ActionChannelChangedPhoto">Foto del canale cambiata</string>
-    <string name="ActionChannelRemovedPhoto">Foto del canale rimossa</string>
-    <string name="ActionChannelChangedTitle">Nome del canale cambiato in un2</string>
-    <string name="ChannelPublicLimitReached">Spiacenti, hai creato troppi canali pubblici. Puoi creare un canale privato o eliminare un tuo canale pubblico.</string>
-    <string name="ChannelModerator">Moderatore</string>
-    <string name="ChannelCreator">Creatore</string>
-    <string name="ChannelEditor">Amministratore</string>
-    <string name="ChannelMute">SILENZIA</string>
-    <string name="ChannelUnmute">SUONA</string>
-    <string name="ChannelAddAdmin">Aggiungi amministratore</string>
-    <string name="ChannelInviteViaLink">Invita via link</string>
-    <string name="ChannelAddUserAdminAlert">Sei sicuro di voler rendere %1$s un amministratore?</string>
-    <string name="ChannelRemoveUserAdmin">Rimuovi</string>
-    <string name="ChannelMembersInfo">Solo gli amministratori del canale possono vedere questa lista.</string>
-    <string name="ChannelAdminNotParticipant">Questo utente non si è ancora unito al canale. Vuoi invitarlo?</string>
-    <string name="ChannelLinkInfo">Chiunque abbia Telegram installato sarà in grado di aggiungersi al tuo canale seguendo questo link.</string>
-    <string name="ChannelAdminsInfo">Puoi aggiungere amministratori per farti aiutare a gestire il tuo canale. Tieni premuto per rimuovere gli amministratori.</string>
-    <string name="ChannelJoinTo">Vuoi unirti al canale \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Spiacenti, questa chat non è più accessibile.</string>
-    <string name="ChannelAddTo">Aggiungere %1$s al canale?</string>
-    <string name="ChannelUserLeftError">Spiacenti, questo utente ha deciso di lasciare il canale, quindi non puoi reinvitarlo.</string>
-    <string name="ChannelUserCantAdd">Spiacenti, non puoi aggiungere questo utente ai canali.</string>
-    <string name="ChannelUserCantAdmin">Spiacenti, troppi amministratori in questo canale.</string>
-    <string name="ChannelUserCantBot">Spiacenti, troppi bot in questo canale.</string>
-    <string name="ChannelUserAddLimit">Spiacenti, puoi aggiungere solo i primi 200 membri a un canale. Ricorda che un numero illimitato di persone potrebbe unirsi tramite il link del canale.</string>
-    <string name="ChannelAddedBy">un1 ti ha aggiunto a questo canale</string>
-    <string name="ChannelJoined">Ti sei unito al canale</string>
-    <string name="ChannelRemoveUser">Rimuovi dal canale</string>
-    <string name="ChannelCantSendMessage">Spiacenti, non puoi inviare messaggi in questo canale</string>
-    <string name="ChannelAddedByNotification">%1$s ti ha aggiunto al canale %2$s</string>
-    <string name="ChannelPhotoEditNotification">Il canale %1$s ha aggiornato la foto</string>
-    <string name="ChannelMessageGroupNoText">%1$s ha inviato un messaggio al canale %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s ha inviato una foto al canale %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s ha inviato un video al canale %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s ha condiviso un contatto con il canale%2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s ha inviato una posizione al canale %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s ha inviato un file al canale %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s ha inviato una GIF al canale %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s ha inviato un messaggio vocale al canale %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s ha inviato uno sticker al canale %2$s</string>
-    <string name="ChannelMessageNoText">%1$s ha pubblicato un messaggio</string>
-    <string name="ChannelMessagePhoto">%1$s ha pubblicato una foto</string>
-    <string name="ChannelMessageVideo">%1$s ha pubblicato un video</string>
-    <string name="ChannelMessageContact">%1$s ha pubblicato un contatto</string>
-    <string name="ChannelMessageMap">%1$s ha pubblicato una posizione</string>
-    <string name="ChannelMessageDocument">%1$s ha pubblicato un file</string>
-    <string name="ChannelMessageGIF">%1$s ha pubblicato una GIF</string>
-    <string name="ChannelMessageAudio">%1$s ha pubblicato un messaggio vocale</string>
-    <string name="ChannelMessageSticker">%1$s ha pubblicato uno sticker</string>
-    <string name="WhoCanAddMembers">Chi può aggiungere nuovi membri?</string>
-    <string name="WhoCanAddMembersAllMembers">Tutti i membri</string>
-    <string name="WhoCanAddMembersAdmins">Solo gli amministratori</string>
-    <string name="ChannelNotifyMembersInfoOn">Notifica i membri quando pubblichi</string>
-    <string name="ChannelNotifyMembersInfoOff">Non notifica i membri quando pubblichi</string>
-    <string name="ChannelSignMessages">Firma messaggi</string>
-    <string name="ChannelSignMessagesInfo">Aggiungi i nomi degli amministratori nei messaggi che pubblicano.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Nuova lista broadcast</string>
-    <string name="EnterListName">Inserisci il nome della lista</string>
-    <string name="YouCreatedBroadcastList">Hai creato una lista broadcast</string>
-    <string name="AddRecipient">Aggiungi destinatario</string>
-    <string name="KickFromBroadcast">Rimuovi dalla lista broadcast</string>
-    <!--audio view-->
-    <string name="NoAudio">Aggiungi file nella libreria musicale del tuo dispositivo per vederli qui.</string>
-    <string name="AttachMusic">Musica</string>
-    <string name="AudioUnknownArtist">Artista sconosciuto</string>
-    <string name="AudioUnknownTitle">Titolo sconosciuto</string>
-    <!--documents view-->
-    <string name="SelectFile">Seleziona file</string>
-    <string name="FreeOfTotal">Liberi %1$s di %2$s</string>
-    <string name="UnknownError">Errore sconosciuto</string>
-    <string name="AccessError">Errore durante l\'accesso</string>
-    <string name="NoFiles">Ancora nessun file...</string>
-    <string name="FileUploadLimit">La dimensione del file non dovrebbe superare i %1$s</string>
-    <string name="NotMounted">Archiviazione non montata</string>
-    <string name="UsbActive">Trasferimento USB attivo</string>
-    <string name="InternalStorage">Archiviazione interna</string>
-    <string name="ExternalStorage">Archiviazione esterna</string>
-    <string name="SystemRoot">Root di sistema</string>
-    <string name="SdCard">Scheda SD</string>
-    <string name="Folder">Cartella</string>
-    <string name="GalleryInfo">Per inviare immagini senza compressione</string>
-    <!--chat view-->
-    <string name="Invisible">invisibile</string>
-    <string name="Typing">sta scrivendo…</string>
-    <string name="IsTyping">sta scrivendo…</string>
-    <string name="AreTyping">stanno scrivendo…</string>
-    <string name="IsRecordingAudio">%1$s sta registrando un messaggio vocale...</string>
-    <string name="IsSendingPhoto">%1$s sta inviando una foto...</string>
-    <string name="IsSendingVideo">%1$s sta inviando un video...</string>
-    <string name="IsSendingFile">%1$s sta inviando un file...</string>
-    <string name="RecordingAudio">registrando un messaggio vocale...</string>
-    <string name="SendingPhoto">inviando una foto...</string>
-    <string name="SendingVideoStatus">inviando un video...</string>
-    <string name="SendingFile">inviando un file...</string>
-    <string name="GotAQuestion">Hai una domanda\nsu Telegram?</string>
-    <string name="ChatTakePhoto">Scatta una foto</string>
-    <string name="ChatGallery">Galleria</string>
-    <string name="ChatLocation">Posizione</string>
-    <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">File</string>
-    <string name="ChatCamera">Foto</string>
-    <string name="NoMessages">Ancora nessun messaggio qui…</string>
-    <string name="ForwardedMessage">Messaggio inoltrato</string>
-    <string name="From">Da</string>
-    <string name="NoRecent">Nessun recente</string>
-    <string name="Message">Messaggio</string>
-    <string name="TypeMessage">Messaggi</string>
-    <string name="ShareMyContactInfo">Condividi il mio contatto</string>
-    <string name="AddToContacts">Aggiungi ai contatti</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s ti ha invitato ad entrare in una chat segreta.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Hai invitato %s a entrare in una chat segreta.</string>
-    <string name="EncryptedDescriptionTitle">Chat segrete:</string>
-    <string name="EncryptedDescription1">Utilizzano la crittografia end-to-end</string>
-    <string name="EncryptedDescription2">Non lasciano traccia sui nostri server</string>
-    <string name="EncryptedDescription3">Hanno un timer di autodistruzione</string>
-    <string name="EncryptedDescription4">Non permettono l’inoltro</string>
-    <string name="YouWereKicked">Sei stato rimosso da questo gruppo</string>
-    <string name="YouLeft">Hai lasciato il gruppo</string>
-    <string name="DeleteThisGroup">Elimina questo gruppo</string>
-    <string name="DeleteThisChat">Elimina questa chat</string>
-    <string name="SlideToCancel">ANNULLA</string>
-    <string name="SaveToDownloads">Salva nei download</string>
-    <string name="SaveToGIFs">Salva nelle GIF</string>
-    <string name="DeleteGif">Eliminare GIF?</string>
-    <string name="SaveToMusic">Salva nella musica</string>
-    <string name="ShareFile">Condividi</string>
-    <string name="ApplyLocalizationFile">Applica traduzione</string>
-    <string name="UnsupportedAttachment">Allegato non supportato</string>
-    <string name="SetTimer">Timer di autodistruzione</string>
-    <string name="ServiceNotifications">Notifiche di servizio</string>
-    <string name="GettingLinkInfo">Recupero le info del link...</string>
-    <string name="OpenInBrowser">Apri nel Browser</string>
-    <string name="CopyUrl">Copia URL</string>
-    <string name="SendItems">Invia %1$s</string>
-    <string name="OpenUrlAlert">Aprire url %1$s?</string>
-    <string name="ReportSpam">SEGNALA SPAM</string>
-    <string name="AddContactChat">AGGIUNGI CONTATTO</string>
-    <string name="ReportSpamAlert">Sei sicuro di voler segnalare questo utente come spam?</string>
-    <string name="ReportSpamAlertGroup">Sei sicuro di voler segnalare dello spam in questo gruppo?</string>
-    <string name="NobodyLikesSpam1">Spiacenti, ma al momento puoi scrivere solo contatti in comune.</string>
-    <string name="NobodyLikesSpam2">Spiacenti, ma al momento puoi aggiungere ai gruppi solo contatti in comune.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/it#non-posso-inviare-messaggi-a-chi-non-far-parte-dei-miei-contatti</string>
-    <string name="MoreInfo">Più info</string>
-    <string name="ShareSendTo">Invia a...</string>
-    <string name="TapHereGifs">Premi qui per accedere alle GIF salvate</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s ha impostato il timer di autodistruzione a %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">Hai impostato il timer di autodistruzione a %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s ha disattivato il timer di autodistruzione</string>
-    <string name="MessageLifetimeYouRemoved">Hai disattivato il timer di autodistruzione</string>
-    <string name="YouHaveNewMessage">Hai un nuovo messaggio</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s ti ha inviato un messaggio</string>
-    <string name="NotificationMessagePhoto">%1$s ti ha inviato una foto</string>
-    <string name="NotificationMessageVideo">%1$s ti ha inviato un video</string>
-    <string name="NotificationMessageContact">%1$s ha condiviso un contatto con te</string>
-    <string name="NotificationMessageMap">%1$s ti ha inviato una posizione</string>
-    <string name="NotificationMessageDocument">%1$s ti ha inviato un file</string>
-    <string name="NotificationMessageGif">%1$s ti ha inviato una GIF</string>
-    <string name="NotificationMessageAudio">%1$s ti ha inviato un messaggio vocale</string>
-    <string name="NotificationMessageSticker">%1$s ti ha inviato uno sticker</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s ha inviato un messaggio al gruppo %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s ha inviato una foto al gruppo %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s ha inviato un video al gruppo %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s ha condiviso un contatto con il gruppo %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s ha inviato una posizione al gruppo %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s ha inviato un file al gruppo %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s ha inviato una GIF al gruppo %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s ha inviato un messaggio vocale al gruppo %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s ha inviato uno sticker al gruppo %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s ti ha invitato nel gruppo %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s ha modificato il nome del gruppo %2$s</string>
-    <string name="NotificationEditedGroupPhoto">%1$s ha modificato la foto del gruppo %2$s</string>
-    <string name="NotificationGroupAddMember">%1$s ha invitato %3$s nel gruppo %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s è tornato nel gruppo %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s ha rimosso %3$s dal gruppo %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s ti ha rimosso dal gruppo %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s ha lasciato il gruppo %2$s</string>
-    <string name="NotificationContactJoined">%1$s si è unito a Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo il %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Privacy e sicurezza - Sessioni - Termina tutte le sessioni.\n\nSe pensi che qualcuno si sia collegato al tuo account contro il tuo volere, ti raccomandiamo di attivare la verifica in due passaggi nelle impostazioni di Privacy e Sicurezza.\n\nGrazie,\nil team di Telegram</string>
-    <string name="NotificationContactNewPhoto">%1$s ha aggiornato la foto del profilo</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s si è unito al gruppo %2$s via link di invito</string>
-    <string name="Reply">Rispondi</string>
-    <string name="ReplyToGroup">Rispondi a %1$s</string>
-    <string name="ReplyToUser">Rispondi a %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Seleziona contatto</string>
-    <string name="NoContacts">Ancora nessun contatto</string>
-    <string name="InviteText">Ehi, è il momento di passare a Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">alle</string>
-    <string name="YesterdayAt">ieri alle</string>
-    <string name="Online">in linea</string>
-    <string name="LastSeen">ultimo accesso</string>
-    <string name="LastSeenDate">ultimo accesso</string>
-    <string name="LastSeenNow">ultimo accesso adesso</string>
-    <string name="InviteFriends">Invita amici</string>
-    <string name="GlobalSearch">RICERCA GLOBALE</string>
-    <string name="Lately">ultimo accesso di recente</string>
-    <string name="WithinAWeek">ultimo accesso entro una settimana</string>
-    <string name="WithinAMonth">ultimo accesso entro un mese</string>
-    <string name="ALongTimeAgo">ultimo accesso molto tempo fa</string>
-    <string name="NewMessageTitle">Nuovo messaggio</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Invia messaggio a...</string>
-    <string name="SoftUserLimitAlert">Sarai in grado di aggiungere più utenti dopo aver creato il gruppo e averlo convertito in supergruppo.</string>
-    <string name="EnterGroupNamePlaceholder">Immetti il nome del gruppo</string>
-    <string name="GroupName">Nome gruppo</string>
-    <string name="MembersCount">%1$d/%2$d membri</string>
-    <string name="JoinToGroup">Vuoi unirti alla chat \'%1$s\'?</string>
-    <string name="JoinToGroupErrorFull">Spiacenti, questo gruppo è già pieno.</string>
-    <string name="JoinToGroupErrorNotExist">Spiacenti, sembra che questa chat non esista.</string>
-    <string name="LinkCopied">Link copiato negli appunti</string>
-    <string name="InviteToGroupByLink">Invita nel gruppo via link</string>
-    <string name="InviteLink">Link di invito</string>
-    <string name="RevokeAlert">Sei sicuro di voler revocare questo link? Una volta fatto, nessuno potrà unirsi utilizzandolo.</string>
-    <string name="RevokeAlertNewLink">Il precedente link di invito è inattivo. Ne è appena stato creato uno nuovo.</string>
-    <string name="RevokeButton">Revoca</string>
-    <string name="RevokeLink">Revoca link</string>
-    <string name="CopyLink">Copia link</string>
-    <string name="ShareLink">Condividi link</string>
-    <string name="LinkInfo">Chiunque abbia Telegram installato, sarà in grado di aggiungersi al tuo gruppo aprendo il link.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Amministratori</string>
-    <string name="SetAdminsAll">Tutti sono amministratori</string>
-    <string name="SetAdminsAllInfo">Tutti i membri possono aggiungere nuovi membri, modificare nome e foto del gruppo.</string>
-    <string name="SetAdminsNotAllInfo">Solo gli amministratori possono aggiungere e rimuovere membri e modificare nome e foto del gruppo.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Media condivisi</string>
-    <string name="SETTINGS">Impostazioni</string>
-    <string name="AddMember">Aggiungi membro</string>
-    <string name="SetAdmins">Imposta amministratori</string>
-    <string name="DeleteAndExit">Elimina e lascia il gruppo</string>
-    <string name="Notifications">Notifiche</string>
-    <string name="KickFromGroup">Rimuovi dal gruppo</string>
-    <string name="ConvertGroup">Aggiorna a supergruppo</string>
-    <string name="ConvertGroupAlert">Per favore ricorda che i membri del gruppo dovranno aggiornare Telegram all\'ultima versione per vedere il tuo supergruppo. Sei sicuro di voler aggiornare questo gruppo?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Limite di membri raggiunto.<![CDATA[</b>]]>\n\nPer superare il limite ed avere ulteriori funzioni, aggiorna a un supergruppo:\n\n• I supergruppi hanno massimo %1$s\n• I nuovi membri vedono tutta la cronologia\n• Gli amministratori eliminano i messaggi per tutti\n• Le notifiche saranno silenziate di default.</string>
-    <!--contact info view-->
-    <string name="ShareContact">Condividi</string>
-    <string name="AddContact">Aggiungi</string>
-    <string name="AddContactTitle">Aggiungi contatto</string>
-    <string name="BlockContact">Blocca</string>
-    <string name="EditContact">Modifica</string>
-    <string name="DeleteContact">Elimina</string>
-    <string name="PhoneHome">Home</string>
-    <string name="PhoneMobile">Mobile</string>
-    <string name="PhoneWork">Lavoro</string>
-    <string name="PhoneOther">Altro</string>
-    <string name="PhoneMain">Principale</string>
-    <string name="StartEncryptedChat">Inizia chat segreta</string>
-    <string name="CreateEncryptedChatError">Si è verificato un errore.</string>
-    <string name="EncryptionKey">Chiave di cifratura</string>
-    <string name="MessageLifetime">Timer di autodistruzione</string>
-    <string name="ShortMessageLifetimeForever">Spento</string>
-    <string name="EncryptionKeyDescription">Questa immagine e il testo sono derivati dalla chiave di crittografia per questa chat segreta con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se sono uguali sul dispositivo di <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, la crittografia end-to-end è garantita.<![CDATA[<br><br>]]>Ulteriori informazioni su telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
-    <string name="NumberUnknown">Sconosciuto</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Telefono</string>
-    <!--usernames-->
-    <string name="Username">Username</string>
-    <string name="UsernamePlaceholder">Il tuo Username</string>
-    <string name="UsernameInUse">Spiacenti, questo username è già stato preso.</string>
-    <string name="UsernameInvalid">Spiacenti, questo username non valido.</string>
-    <string name="UsernameInvalidShort">Un username deve avere almeno 5 caratteri.</string>
-    <string name="UsernameInvalidLong">Il massimo per un username è 32 caratteri.</string>
-    <string name="UsernameInvalidStartNumber">Spiacenti, un username non può iniziare con un numero.</string>
-    <string name="UsernameHelp">Puoi scegliere un username su <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Se lo fai, le altre persone potranno trovarti tramite questo username e contattarti senza conoscere il tuo numero di telefono.<![CDATA[<br><br>]]>Puoi usare <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underscore. La lunghezza minima è di <![CDATA[<b>]]>5<![CDATA[</b>]]>  caratteri.</string>
-    <string name="UsernameChecking">Controllo l\'username...</string>
-    <string name="UsernameAvailable">%1$s è disponibile.</string>
-    <string name="UsernameEmpty">Nessuno</string>
-    <string name="ErrorOccurred">Si è verificato un errore.</string>
-    <!--stickers view-->
-    <string name="Stickers">Sticker</string>
-    <string name="StickersInfo">Gli artisti sono invitati ad aggiungere i loro set di sticker usando il nostro bot @stickers.\n\nGli utenti possono aggiungere sticker premendo su di loro e scegliendo \"Aggiungi agli sticker\".</string>
-    <string name="AddStickers">Aggiungi sticker</string>
-    <string name="AddToStickers">Aggiungi agli sticker</string>
-    <string name="AddStickersNotFound">Sticker non trovati</string>
-    <string name="StickersRemoved">Sticker rimossi</string>
-    <string name="AddStickersInstalled">Nuovi sticker aggiunti</string>
-    <string name="StickersHide">Nascondi</string>
-    <string name="StickersShow">Mostra</string>
-    <string name="StickersShare">Condividi</string>
-    <string name="StickersCopy">Copia link</string>
-    <string name="StickersRemove">Rimuovi</string>
-    <string name="NoStickers">Ancora nessuno sticker</string>
-    <string name="TooMuchStickersets">Spiacenti, hai raggiunto il numero massimo di set di sticker.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Ripristina tutte le impostazioni di notifica predefinite</string>
-    <string name="TextSize">Dimensione testo messaggi</string>
-    <string name="AskAQuestion">Fai una domanda</string>
-    <string name="EnableAnimations">Abilita animazioni</string>
-    <string name="Unblock">Sblocca</string>
-    <string name="UnblockText">Tieni premuto sull’utente per sbloccarlo.</string>
-    <string name="NoBlocked">Ancora nessun utente bloccato</string>
-    <string name="MessageNotifications">Notifiche messaggio</string>
-    <string name="Alert">Avviso</string>
-    <string name="MessagePreview">Anteprima messaggio</string>
-    <string name="GroupNotifications">Notifiche di gruppo</string>
-    <string name="Sound">Suono</string>
-    <string name="InAppNotifications">Notifiche in-app</string>
-    <string name="InAppSounds">Suoni in-app</string>
-    <string name="InAppVibrate">Vibrazione in-app</string>
-    <string name="Vibrate">Vibrazione</string>
-    <string name="InAppPreview">Anteprima in-app</string>
-    <string name="Reset">Ripristina</string>
-    <string name="ResetAllNotifications">Ripristina tutte le notifiche</string>
-    <string name="UndoAllCustom">Annulla tutte le impostazioni di notifica personalizzate per tutti i tuoi contatti e gruppi</string>
-    <string name="NotificationsAndSounds">Notifiche e suoni</string>
-    <string name="BlockedUsers">Utenti bloccati</string>
-    <string name="LogOut">Disconnetti</string>
-    <string name="NoSound">Nessun suono</string>
-    <string name="Default">Predefinite</string>
-    <string name="Support">Supporto</string>
-    <string name="OnlyIfSilent">Solo se silenzioso</string>
-    <string name="ChatBackground">Sfondo chat</string>
-    <string name="MessagesSettings">Messaggi</string>
-    <string name="SendByEnter">Spedisci con invio</string>
-    <string name="TerminateAllSessions">Termina le altre sessioni</string>
-    <string name="Events">Eventi</string>
-    <string name="ContactJoined">Un contatto si è unito a Telegram</string>
-    <string name="Language">Lingua</string>
-    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe volerci un pò.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">FAQ di Telegram</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]></string>
-    <string name="AskButton">Chiedi a un volontario</string>
-    <string name="TelegramFaq">FAQ di Telegram</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq/it</string>
-    <string name="DeleteLocalization">Eliminare la traduzione?</string>
-    <string name="IncorrectLocalization">File di traduzione non valido</string>
-    <string name="Enabled">Abilitate</string>
-    <string name="Disabled">Disabilitata</string>
-    <string name="NotificationsService">Servizio notifiche</string>
-    <string name="NotificationsServiceDisableInfo">Se i Google Play Services ti bastano per ricevere le notifiche, puoi disabilitare il servizio notifiche. Ti consigliamo comunque di lasciarlo abilitato per lasciare l\'app attiva in background e ricevere notifiche istantanee.</string>
-    <string name="SortBy">Ordina per</string>
-    <string name="ImportContacts">Importa contatti</string>
-    <string name="SortFirstName">Nome</string>
-    <string name="SortLastName">Cognome</string>
-    <string name="LedColor">Colore LED</string>
-    <string name="PopupNotification">Notifiche popup</string>
-    <string name="NoPopup">Nessun popup</string>
-    <string name="OnlyWhenScreenOn">Solo con schermo acceso</string>
-    <string name="OnlyWhenScreenOff">Solo con schermo spento</string>
-    <string name="AlwaysShowPopup">Mostra sempre i popup</string>
-    <string name="BadgeNumber">Contatore badge</string>
-    <string name="Short">Breve</string>
-    <string name="Long">Lunga</string>
-    <string name="SystemDefault">Predefinito di sistema</string>
-    <string name="SettingsDefault">Impostazioni predefinite</string>
-    <string name="AutomaticMediaDownload">Download automatico media</string>
-    <string name="WhenUsingMobileData">Quando utilizzi la rete mobile</string>
-    <string name="WhenConnectedOnWiFi">Quando connesso tramite Wi-Fi</string>
-    <string name="WhenRoaming">In roaming</string>
-    <string name="NoMediaAutoDownload">Nessun media</string>
-    <string name="AutoplayGifs">Autoriproduzione GIF</string>
-    <string name="RaiseToSpeak">Alza per parlare</string>
-    <string name="SaveToGallerySettings">Salva nella galleria</string>
-    <string name="EditName">Modifica nome</string>
-    <string name="NotificationsPriority">Priorità</string>
-    <string name="NotificationsPriorityDefault">Predefinita</string>
-    <string name="NotificationsPriorityLow">Bassa</string>
-    <string name="NotificationsPriorityHigh">Alta</string>
-    <string name="NotificationsPriorityMax">Massima</string>
-    <string name="RepeatNotificationsNever">Mai</string>
-    <string name="RepeatNotifications">Ripeti notifiche</string>
-    <string name="PhoneNumberHelp">Puoi cambiare il tuo numero di telefono qui. Il tuo account e tutti i tuoi dati cloud — messaggi, file, contatti, etc. saranno trasferiti sul nuovo numero.\n\n<![CDATA[<b>Importante:</b>]]> a tutti i tuoi contatti di Telegram verrà aggiunto il tuo <![CDATA[<b>nuovo numero</b>]]> ai contatti, purché abbiano il tuo vecchio numero e tu non li abbia bloccati su Telegram.</string>
-    <string name="PhoneNumberAlert">Tutti i tuoi contatti Telegram avranno il tuo nuovo numero tra i loro contatti, purché abbiano il tuo vecchio numero e tu non li abbia bloccati su Telegram.</string>
-    <string name="PhoneNumberChange">CAMBIA NUMERO</string>
-    <string name="ChangePhoneNewNumber">Nuovo numero</string>
-    <string name="ChangePhoneHelp">Invieremo un SMS con un codice di conferma al tuo nuovo numero.</string>
-    <string name="ChangePhoneNumberOccupied">Il numero %1$s è già connesso a un account Telegram. Per favore elimina quell\'account prima di migrare ad un nuovo numero.</string>
-    <string name="NotificationsOther">Altro</string>
-    <string name="NotificationsDisabled">Disabilitate</string>
-    <string name="VibrationDisabled">Disabilitata</string>
-    <string name="LedDisabled">Disabilitato</string>
-    <string name="RepeatDisabled">No</string>
-    <string name="InChatSound">Suoni in-chat</string>
-    <string name="SoundDefault">Predefinito</string>
-    <string name="VibrationDefault">Predefinita</string>
-    <string name="SmartNotifications">Notifiche intelligenti</string>
-    <string name="SmartNotificationsDisabled">Disabilitate</string>
-    <string name="SmartNotificationsInfo">Suona al massimo %1$s in %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Suona al massimo</string>
-    <string name="SmartNotificationsTimes">volte</string>
-    <string name="SmartNotificationsWithin">in</string>
-    <string name="SmartNotificationsMinutes">minuti</string>
-    <string name="SecretWebPage">Anteprime link</string>
-    <string name="SecretChat">Chat segrete</string>
-    <!--cache view-->
-    <string name="CacheSettings">Impostazioni cache</string>
-    <string name="LocalDatabase">Database locale</string>
-    <string name="LocalDatabaseClear">Eliminare i messaggi salvati nella cache?</string>
-    <string name="LocalDatabaseInfo">Eliminando il database locale, verranno cancellati i messaggi nella cache e il database verrà compresso per risparmiare spazio. Telegram ha bisogno di alcuni dati per funzionare, quindi il database non sarà azzerato.\n\nQuesta operazione può richiedere alcuni minuti.</string>
-    <string name="ClearMediaCache">Pulisci cache</string>
-    <string name="CacheClear">Pulisci</string>
-    <string name="CalculatingSize">Calcolando...</string>
-    <string name="LocalDocumentCache">Documenti</string>
-    <string name="LocalPhotoCache">Foto</string>
-    <string name="LocalAudioCache">Messaggi vocali</string>
-    <string name="LocalVideoCache">Video</string>
-    <string name="LocalMusicCache">Musica</string>
-    <string name="LocalCache">Altri file</string>
-    <string name="CacheEmpty">Vuota</string>
-    <string name="KeepMedia">Mantieni media</string>
-    <string name="KeepMediaInfo">Foto, video e altri file dalle chat nel cloud che non hai <![CDATA[<b>aperto</b>]]>  in questo periodo verranno eliminati dal dispositivo per preservare la spazio sul disco.\n\nTutti i media rimarranno nel cloud di Telegram e potranno essere riscaricati ogni volta che ne avrai bisogno.</string>
-    <string name="KeepMediaForever">Per sempre</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Sessioni attive</string>
-    <string name="CurrentSession">Sessione corrente</string>
-    <string name="NoOtherSessions">Nessun\'altra sessione attiva</string>
-    <string name="NoOtherSessionsInfo">Ti puoi connettere a Telegram da altri dispositivi mobili, tablet e desktop usando lo stesso numero. Tutti i tuoi dati saranno sincronizzati istantaneamente.</string>
-    <string name="OtherSessions">Sessioni attive</string>
-    <string name="SessionsInfo">Controlla le tue sessioni sugli altri dispositivi.</string>
-    <string name="TerminateSessionInfo">Premi su una sessione per terminarla.</string>
-    <string name="TerminateSessionQuestion">Terminare questa sessione?</string>
-    <string name="UnofficialApp">app non ufficiale</string>
-    <!--passcode view-->
-    <string name="Passcode">Blocco con codice</string>
-    <string name="ChangePasscode">Cambia codice</string>
-    <string name="ChangePasscodeInfo">Quando imposti un codice, un\'icona col lucchetto apparirà nella pagina delle chat. Premi su di essa per bloccare e sbloccare l\'app.\n\nNota: se ti dimentichi il codice, dovrai disinstallare e reinstallare l\'app. Tutte le chat segrete verranno perse.</string>
-    <string name="ChangePasscodeAlert">Ora visualizzerai un\'icona col lucchetto nella pagina delle chat. Premi su di essa per bloccare la tua app Telegram con il codice.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Password</string>
-    <string name="EnterCurrentPasscode">Inserisci il tuo codice</string>
-    <string name="EnterNewFirstPasscode">Inserisci un codice</string>
-    <string name="EnterNewPasscode">Inserisci il nuovo codice</string>
-    <string name="EnterYourPasscode">Inserisci il tuo codice</string>
-    <string name="ReEnterYourPasscode">Reinserisci il nuovo codice</string>
-    <string name="InvalidPasscode">Codice non valido</string>
-    <string name="PasscodeDoNotMatch">I codici non corrispondono</string>
-    <string name="AutoLock">Blocco automatico</string>
-    <string name="AutoLockInfo">Richiede il codice se lontano per del tempo.</string>
-    <string name="AutoLockInTime">tra %1$s</string>
-    <string name="AutoLockDisabled">Disabilitato</string>
-    <string name="UnlockFingerprint">Sblocca con impronta digitale</string>
-    <string name="FingerprintInfo">Conferma impronta digitale per continuare</string>
-    <string name="FingerprintHelp">Sensore touch</string>
-    <string name="FingerprintNotRecognized">Impronta digitale non riconosciuta. Riprova</string>
-    <!--media view-->
-    <string name="NoMedia">Condividi foto e video in questa chat e accedi ad essi da ogni tuo dispositivo.</string>
-    <string name="DocumentsTitle">File condivisi</string>
-    <string name="SharedMediaTitle">Media condivisi</string>
-    <string name="LinksTitle">Link condivisi</string>
-    <string name="AudioTitle">Musica condivisa</string>
-    <string name="NoSharedAudio">Condividi musica in questa chat e accedi ad essa da ogni tuo dispositivo.</string>
-    <string name="NoSharedFiles">Condividi file e documenti in questa chat e accedi ad essi da ogni tuo dispositivo.</string>
-    <string name="NoSharedLinks">Condividi link in questa chat ed accedi ad essi da ogni tuo dispositivo.</string>
-    <!--map view-->
-    <string name="Map">Mappa</string>
-    <string name="Satellite">Satellite</string>
-    <string name="Hybrid">Ibrido</string>
-    <string name="MetersAway">m di distanza</string>
-    <string name="KMetersAway">km di distanza</string>
-    <string name="SendLocation">Invia la tua posizione attuale</string>
-    <string name="SendSelectedLocation">Invia la posizione selezionata</string>
-    <string name="ShareLocation">Posizione</string>
-    <string name="AccurateTo">Precisione di %1$s</string>
-    <string name="NearbyPlaces">O SELEZIONA UN LUOGO</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Mostra tutti i file media</string>
-    <string name="SaveToGallery">Salva nella galleria</string>
-    <string name="Of">%1$d di %2$d</string>
-    <string name="Gallery">Galleria</string>
-    <string name="AllPhotos">Tutte le foto</string>
-    <string name="AllVideo">Tutti i video</string>
-    <string name="NoPhotos">Ancora nessuna foto</string>
-    <string name="NoVideo">Ancora nessun video</string>
-    <string name="PleaseDownload">Scarica prima il file</string>
-    <string name="NoRecentPhotos">Nessuna foto recente</string>
-    <string name="NoRecentGIFs">Nessuna GIF recente</string>
-    <string name="SearchImages">CERCA IMMAGINI</string>
-    <string name="SearchImagesInfo">RICERCA WEB</string>
-    <string name="SearchGifs">CERCA GIF</string>
-    <string name="SearchImagesTitle">Cerca su web</string>
-    <string name="SearchGifsTitle">Cerca GIF</string>
-    <string name="CropImage">Ritaglia immagine</string>
-    <string name="EditImage">Modifica immagine</string>
-    <string name="Enhance">Migliora</string>
-    <string name="Highlights">Alte luci</string>
-    <string name="Contrast">Contrasto</string>
-    <string name="Exposure">Esposizione</string>
-    <string name="Warmth">Calore</string>
-    <string name="Saturation">Saturazione</string>
-    <string name="Vignette">Vignettatura</string>
-    <string name="Shadows">Ombre</string>
-    <string name="Grain">Grana</string>
-    <string name="Sharpen">Nitidezza</string>
-    <string name="Fade">Sfumatura</string>
-    <string name="Tint">Colore</string>
-    <string name="TintShadows">OMBRE</string>
-    <string name="TintHighlights">ALTE LUCI</string>
-    <string name="Curves">Curve</string>
-    <string name="CurvesAll">TUTTO</string>
-    <string name="CurvesRed">ROSSO</string>
-    <string name="CurvesGreen">VERDE</string>
-    <string name="CurvesBlue">BLU</string>
-    <string name="Blur">Sfocatura</string>
-    <string name="BlurOff">No</string>
-    <string name="BlurLinear">Lineare</string>
-    <string name="BlurRadial">Radiale</string>
-    <string name="AreYouSureDeletePhoto">Sei sicuro di voler eliminare questa foto?</string>
-    <string name="AreYouSureDeleteVideo">Sei sicuro di voler eliminare questo video?</string>
-    <string name="DiscardChanges">Annullare le modifiche?</string>
-    <string name="ClearSearch">Cancellare la cronologia di ricerca?</string>
-    <string name="ClearButton">Pulisci</string>
-    <string name="PickerPhotos">Foto</string>
-    <string name="PickerVideo">Video</string>
-    <string name="AddCaption">Aggiungi una didascalia...</string>
-    <string name="PhotoCaption">Didascalia foto</string>
-    <string name="VideoCaption">Didascalia video</string>
-    <string name="Caption">Didascalia</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Verifica in due passaggi</string>
-    <string name="SetAdditionalPassword">Imposta password aggiuntiva</string>
-    <string name="SetAdditionalPasswordInfo">Puoi impostare una password che ti verrà richiesta quando ti connetti da un nuovo dispositivo in aggiunta al codice che riceverai via SMS.</string>
-    <string name="YourPassword">La tua password</string>
-    <string name="PleaseEnterCurrentPassword">Inserisci la tua password</string>
-    <string name="PleaseEnterFirstPassword">Inserisci una password</string>
-    <string name="PleaseEnterPassword">Inserisci la tua nuova password</string>
-    <string name="PleaseReEnterPassword">Reinserisci la tua password</string>
-    <string name="RecoveryEmail">E-mail di recupero</string>
-    <string name="YourEmail">La tua e-mail</string>
-    <string name="YourEmailInfo">Inserisci un\'e-mail valida. È l\'unico modo di recuperare una password dimenticata.</string>
-    <string name="YourEmailSkip">Salta</string>
-    <string name="YourEmailSkipWarning">Attenzione</string>
-    <string name="YourEmailSkipWarningText">No, seriamente.\n\nSe dimentichi la tua password, perderai l\'accesso al tuo account Telegram. Non ci sarà modo di ripristinarlo.</string>
-    <string name="YourEmailAlmostThere">Ci siamo quasi!</string>
-    <string name="YourEmailAlmostThereText">Controlla la tua e-mail (anche lo spam) per completare la configurazione della verifica in due passaggi.</string>
-    <string name="YourPasswordSuccess">Fatto!</string>
-    <string name="YourPasswordSuccessText">La password per la verifica in due passaggi è ora attiva.</string>
-    <string name="ChangePassword">Cambia password</string>
-    <string name="TurnPasswordOff">Disattiva password</string>
-    <string name="SetRecoveryEmail">Imposta e-mail di recupero</string>
-    <string name="ChangeRecoveryEmail">Cambia e-mail di recupero</string>
-    <string name="TurnPasswordOffQuestion">Sei sicuro di voler disabilitare la tua password?</string>
-    <string name="PasswordHint">Suggerimento password</string>
-    <string name="PasswordHintText">Crea un suggerimento per la tua password</string>
-    <string name="PasswordDoNotMatch">Le password non corrispondono</string>
-    <string name="AbortPassword">Annulla configurazione della verifica in due passaggi</string>
-    <string name="EmailPasswordConfirmText">Segui questi step per completare la configurazione della verifica in due passaggi:\n\n1. Controlla la tua e-mail (anche lo spam)\n%1$s\n\n2. Clicca sul link di conferma.</string>
-    <string name="PasswordAsHintError">Il suggerimento deve essere diverso dalla password</string>
-    <string name="PasswordEmailInvalid">E-mail non valida</string>
-    <string name="RestorePasswordNoEmailTitle">Spiacenti</string>
-    <string name="RestorePasswordNoEmailText">Siccome non hai fornito un\'email di recupero quando hai impostato la  tua password, non ti resta che ricordarti la password o ripristinare il tuo account.</string>
-    <string name="RestoreEmailSent">Abbiamo inviato un codice di ripristino alla e-mail che ci hai fornito:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Controlla la tua e-mail e inserisci il codice a 6 cifre che ti abbiamo inviato.</string>
-    <string name="RestoreEmailTrouble">Hai problemi ad accedere alla tua e-mail %1$s?</string>
-    <string name="RestoreEmailTroubleText">Se non puoi ripristinare l\'accesso alla tua e-mail, non ti resta che ricordarti la password o ripristinare il tuo account.</string>
-    <string name="ResetMyAccount">RIPRISTINA IL MIO ACCOUNT</string>
-    <string name="ResetMyAccountText">Perderai tutte le chat e i messaggi, insieme ai media e ai file condivisi, se procederai a ripristinare il tuo account.</string>
-    <string name="ResetMyAccountWarning">Attenzione</string>
-    <string name="ResetMyAccountWarningText">Questa azione non può essere annullata.\n\n Se ripristini il tuo account, tutti i tuoi messaggi e chat saranno eliminati.</string>
-    <string name="ResetMyAccountWarningReset">Ripristina</string>
-    <string name="LoginPassword">Password</string>
-    <string name="LoginPasswordText">Hai attivato la verifica in due passaggi, così il tuo account è protetto con una password aggiuntiva.</string>
-    <string name="ForgotPassword">Password dimenticata?</string>
-    <string name="PasswordRecovery">Recupero password</string>
-    <string name="PasswordCode">Codice</string>
-    <string name="PasswordReset">Password disattivata</string>
-    <string name="EnabledPasswordText">Hai attivato la verifica in due passaggi.\nAvrai bisogno della password che hai impostato per accedere al tuo account Telegram.</string>
-    <string name="PendingEmailText">La tua e-mail di recupero %1$s non è ancora attiva e attende la conferma.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacy e sicurezza</string>
-    <string name="PrivacyTitle">Privacy</string>
-    <string name="PrivacyLastSeen">Ultimo accesso</string>
-    <string name="LastSeenEverybody">Tutti</string>
-    <string name="LastSeenContacts">I miei contatti</string>
-    <string name="LastSeenNobody">Nessuno</string>
-    <string name="LastSeenEverybodyMinus">Tutti (-%1$d)</string>
-    <string name="LastSeenContactsPlus">I miei contatti (+%1$d)</string>
-    <string name="LastSeenContactsMinus">I miei contatti (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">I miei contatti (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Nessuno (+%1$d)</string>
-    <string name="SecurityTitle">Sicurezza</string>
-    <string name="DeleteAccountTitle">Elimina il mio account</string>
-    <string name="DeleteAccountIfAwayFor">Se lontano per</string>
-    <string name="DeleteAccountHelp">Se non ti connetti almeno una volta in questo periodo, il tuo account verrà eliminato insieme a tutti i gruppi, messaggi e contatti.</string>
-    <string name="DeleteAccountNowConfirmation">Eliminare il tuo account?</string>
-    <string name="LastSeenHelp">Cambia chi può vedere il tuo ultimo accesso.</string>
-    <string name="LastSeenTitle">Chi può vedere il tuo ultimo accesso?</string>
-    <string name="AddExceptions">Aggiungi eccezioni</string>
-    <string name="CustomHelp">Importante: non sarai in grado di vedere l\'ultimo accesso delle persone con le quali non condividi l\'ultimo accesso. Verrà mostrato un orario approssimativo (di recente, entro una settimana, entro un mese).</string>
-    <string name="AlwaysShareWith">Condividi con</string>
-    <string name="NeverShareWith">Non condividere con</string>
-    <string name="CustomShareSettingsHelp">Queste impostazioni annulleranno i valori precedenti.</string>
-    <string name="AlwaysShareWithTitle">Condividi</string>
-    <string name="AlwaysShareWithPlaceholder">Condividi con gli utenti...</string>
-    <string name="NeverShareWithTitle">Non condividere</string>
-    <string name="NeverShareWithPlaceholder">Non condividere con gli utenti...</string>
-    <string name="EmpryUsersPlaceholder">Aggiungi utenti</string>
-    <string name="PrivacyFloodControlError">Spiacenti, troppe richieste. Impossibile cambiare le impostazioni di privacy ora, attendi.</string>
-    <string name="ClearOtherSessionsHelp">Disconnette tutti i dispositivi tranne questo.</string>
-    <string name="RemoveFromListText">Tieni premuto sull\'utente per eliminarlo.</string>
-    <string name="GroupsAndChannels">Gruppo</string>
-    <string name="WhoCanAddMe">Chi può aggiungermi ai gruppi?</string>
-    <string name="WhoCanAddMeInfo">Puoi decidere chi può aggiungerti a gruppi e canali con precisione granulare.</string>
-    <string name="AlwaysAllow">Consenti sempre</string>
-    <string name="NeverAllow">Non consentire mai</string>
-    <string name="AlwaysAllowPlaceholder">Consenti sempre...</string>
-    <string name="NeverAllowPlaceholder">Non consentire mai...</string>
-    <string name="CustomShareInfo">Questi utenti saranno o non saranno in grado di aggiungerti a gruppi e canali indipendentemente dalle impostazioni precedenti.</string>
-    <string name="GroupsAndChannelsHelp">Cambia chi può aggiungerti a gruppi e canali.</string>
-    <string name="InviteToGroupError">Spiacenti, non puoi aggiungere questo utente al gruppo a causa delle sue impostazioni di privacy.</string>
-    <string name="InviteToChannelError">Spiacenti, non puoi aggiungere questo utente al canale a causa delle sue impostazioni di privacy.</string>
-    <string name="CreateGroupError">Spiacenti, non puoi creare un gruppo con questi utenti a causa delle loro impostazioni di privacy.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Modifica video</string>
-    <string name="OriginalVideo">Video originale</string>
-    <string name="EditedVideo">Video modificato</string>
-    <string name="SendingVideo">Inviando un video...</string>
-    <string name="CompressVideo">Comprimi video</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Condividi</string>
-    <string name="BotInvite">Aggiungi a un gruppo</string>
-    <string name="BotSettings">Impostazioni</string>
-    <string name="BotHelp">Aiuto</string>
-    <string name="BotStatusRead">ha accesso ai messaggi</string>
-    <string name="BotStatusCantRead">non ha accesso ai messaggi</string>
-    <string name="BotInfoTitle">Cosa può fare questo bot?</string>
-    <string name="BotStart">AVVIA</string>
-    <string name="BotUnblock">RIAVVIA</string>
-    <string name="BotStop">Arresta bot</string>
-    <string name="BotRestart">Riavvia bot</string>
-    <!--button titles-->
-    <string name="Next">Avanti</string>
-    <string name="Back">Indietro</string>
-    <string name="Done">Fatto</string>
-    <string name="Open">Apri</string>
-    <string name="Save">Salva</string>
-    <string name="Cancel">Annulla</string>
-    <string name="Close">Chiudi</string>
-    <string name="Add">Aggiungi</string>
-    <string name="Edit">Modifica</string>
-    <string name="Send">Invia</string>
-    <string name="Call">Chiama</string>
-    <string name="Copy">Copia</string>
-    <string name="Delete">Elimina</string>
-    <string name="DeleteAndStop">Elimina e arresta</string>
-    <string name="Forward">Inoltra</string>
-    <string name="Retry">Riprova</string>
-    <string name="FromCamera">Dalla fotocamera</string>
-    <string name="FromGalley">Dalla galleria</string>
-    <string name="DeletePhoto">Elimina foto</string>
-    <string name="Set">Imposta</string>
-    <string name="OK">OK</string>
-    <string name="Crop">RITAGLIA</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Ti sei unito al gruppo via link di invito</string>
-    <string name="ActionInviteUser">un1 si è unito al gruppo via link di invito</string>
-    <string name="ActionKickUser">un1 ha rimosso un2</string>
-    <string name="ActionLeftUser">un1 ha lasciato il gruppo</string>
-    <string name="ActionAddUser">un1 ha aggiunto un2</string>
-    <string name="ActionRemovedPhoto">un1 ha rimosso la foto del gruppo</string>
-    <string name="ActionChangedPhoto">un1 ha cambiato la foto del gruppo</string>
-    <string name="ActionChangedTitle">un1 ha cambiato il nome del gruppo in un2</string>
-    <string name="ActionCreateGroup">un1 ha creato il gruppo</string>
-    <string name="ActionYouKickUser">Hai rimosso un2</string>
-    <string name="ActionYouLeftUser">Hai lasciato il gruppo</string>
-    <string name="ActionYouAddUser">Hai aggiunto un2</string>
-    <string name="ActionYouRemovedPhoto">Hai rimosso la foto del gruppo</string>
-    <string name="ActionYouChangedPhoto">Hai cambiato la foto del gruppo</string>
-    <string name="ActionYouChangedTitle">Hai cambiato il nome del gruppo in un2</string>
-    <string name="ActionYouCreateGroup">Hai creato il gruppo</string>
-    <string name="ActionKickUserYou">un1 ti ha rimosso</string>
-    <string name="ActionAddUserYou">un1 ti ha aggiunto</string>
-    <string name="ActionAddUserSelf">un1 è tornato nel gruppo</string>
-    <string name="ActionAddUserSelfYou">Sei tornato nel gruppo</string>
-    <string name="UnsupportedMedia">Questo messaggio non è supportato dalla tua versione di Telegram. Aggiorna l\'app per visualizzarlo: https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Video</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Posizione</string>
-    <string name="AttachContact">Contatto</string>
-    <string name="AttachDocument">File</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Messaggio vocale</string>
-    <string name="FromYou">Tu</string>
-    <string name="ActionTakeScreenshootYou">Hai fatto uno screenshot!</string>
-    <string name="ActionTakeScreenshoot">un1 ha fatto uno screenshot!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Numero di telefono non valido</string>
-    <string name="CodeExpired">Codice scaduto, effettua di nuovo l\'accesso</string>
-    <string name="FloodWait">Troppi tentativi, riprova più tardi</string>
-    <string name="FloodWaitTime">Troppi tentativi, per favore riprova di nuova tra %1$s</string>
-    <string name="InvalidCode">Codice non valido</string>
-    <string name="InvalidFirstName">Nome non valido</string>
-    <string name="InvalidLastName">Cognome non valido</string>
-    <string name="Loading">Caricamento…</string>
-    <string name="NoPlayerInstalled">Non hai un lettore video, per favore installane uno per continuare</string>
-    <string name="NoMailInstalled">Invia un’email a sms@stel.com spiegandoci il problema.</string>
-    <string name="NoHandleAppInstalled">Non hai applicazioni che possono gestire il tipo di file \'%1$s\': installane una per proseguire</string>
-    <string name="InviteUser">Questo utente non ha ancora Telegram, vuoi invitarlo?</string>
-    <string name="AreYouSure">Sei sicuro?</string>
-    <string name="AddToTheGroupTitle">Aggiungere %1$s alla chat %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Numero di ultimi messaggi da inoltrare:</string>
-    <string name="AddToTheGroup">Aggiungere %1$s al gruppo?</string>
-    <string name="UserAlreadyInGroup">Questo utente è già membro del gruppo</string>
-    <string name="ForwardMessagesTo">Vuoi inoltrare i messaggi a %1$s?</string>
-    <string name="SendMessagesTo">Inviare i messaggi a %1$s?</string>
-    <string name="SendContactTo">Inviare contatto a %1$s?</string>
-    <string name="AreYouSureLogout">Sei sicuro di volerti disconnettere?\n\nRicorda che puoi usare Telegram su tutti i tuoi dispositivi contemporaneamente.\n\nRicorda, quando ti disconnetti, elimini tutte le Chat Segrete.</string>
-    <string name="AreYouSureSessions">Terminare tutte le altre sessioni?</string>
-    <string name="AreYouSureDeleteAndExit">Sei sicuro di voler uscire ed eliminare il gruppo?</string>
-    <string name="AreYouSureDeleteThisChat">Sei sicuro di voler eliminare questa chat?</string>
-    <string name="AreYouSureShareMyContactInfo">Vuoi condividere il tuo contatto?</string>
-    <string name="AreYouSureBlockContact">Vuoi bloccare questo contatto?</string>
-    <string name="AreYouSureUnblockContact">Vuoi sbloccare questo contatto?</string>
-    <string name="AreYouSureDeleteContact">Sei sicuro di voler eliminare questo contatto?</string>
-    <string name="AreYouSureSecretChat">Iniziare una chat segreta?</string>
-    <string name="AreYouSureRegistration">Sei sicuro di volere eliminare questa registrazione?</string>
-    <string name="AreYouSureClearHistory">Sei sicuro di volere eliminare la cronologia?</string>
-    <string name="AreYouSureClearHistoryChannel">Eliminare tutti i messaggi e i media salvati nella cache per questo canale?</string>
-    <string name="AreYouSureClearHistorySuper">Eliminare tutti i messaggi e i media salvati nella cache per questo supergruppo?</string>
-    <string name="AreYouSureDeleteMessages">Sei sicuro di voler eliminare %1$s?</string>
-    <string name="SendMessagesToGroup">Inviare messaggi a %1$s?</string>
-    <string name="SendContactToGroup">Inviare contatto a %1$s?</string>
-    <string name="ForwardMessagesToGroup">Inoltra messaggi a %1$s?</string>
-    <string name="FeatureUnavailable">Spiacenti, questa funzione non è disponibile nel tuo paese.</string>
-    <string name="NoUsernameFound">Non esiste alcun account Telegram con questo username.</string>
-    <string name="BotCantJoinGroups">Questo bot non può unirsi ai gruppi.</string>
-    <string name="SecretLinkPreviewAlert">Vuoi attivare le anteprime estese per i link nelle Chat Segrete? Ricorda che le anteprime dei link sono generate sui server di Telegram.</string>
-    <string name="SecretChatContextBotAlert">Per favore ricorda che i bot inline sono forniti da sviluppatori di terze parti. Per far funzionare il bot, i simboli che digiti dopo l\'username del bot sono inviati al rispettivo sviluppatore.</string>
-    <string name="RaiseToSpeakAlert">Vuoi attivare \"Alza per parlare\" per i messaggi vocali?</string>
-    <string name="EditMessageError">Spiacenti, non puoi modificare questo messaggio.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram deve accedere ai tuoi contatti per poterti connettere con i tuoi amici su tutti i tuoi dispositivi.</string>
-    <string name="PermissionStorage">Telegram deve accedere alla tua memoria per poter inviare e salvare foto,video, musica e altri media.</string>
-    <string name="PermissionNoAudio">Telegram deve accedere al microfono per poter inviare messaggi vocali.</string>
-    <string name="PermissionNoLocation">Telegram deve accedere alla tua posizione per poterla condividere con i tuoi amici.</string>
-    <string name="PermissionOpenSettings">IMPOSTAZIONI</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Veloce</string>
-    <string name="Page3Title">Gratuito</string>
-    <string name="Page4Title">Sicuro</string>
-    <string name="Page5Title">Potente</string>
-    <string name="Page6Title">Basato sul cloud</string>
-    <string name="Page7Title">Privato</string>
-    <string name="Page1Message">L\'app di messaggi <![CDATA[<b>più veloce</b>]]> al mondo.<![CDATA[<br/>]]>È <![CDATA[<b>gratuita</b>]]> e <![CDATA[<b>sicura</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> consegna i messaggi più<![CDATA[<br/>]]>velocemente di qualsiasi altra app.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> sarà sempre gratuito.<![CDATA[<br/>]]>Nessuna pubblicità. Nessun abbonamento.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> protegge i tuoi messaggi<![CDATA[<br/>]]>dagli attacchi degli hacker.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> non ha limiti di dimensione<![CDATA[<br/>]]>per le tue chat e i file multimediali.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> ti consente di accedere<![CDATA[<br/>]]>ai tuoi messaggi da più dispositivi.</string>
-    <string name="Page7Message">I messaggi di <![CDATA[<b>Telegram</b>]]> sono fortemente<![CDATA[<br/>]]>criptati e possono autodistruggersi.</string>
-    <string name="StartMessaging">Inizia a inviare messaggi</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d in linea</string>
-    <string name="Online_one">%1$d in linea</string>
-    <string name="Online_two">%1$d in linea</string>
-    <string name="Online_few">%1$d in linea</string>
-    <string name="Online_many">%1$d in linea</string>
-    <string name="Online_other">%1$d in linea</string>
-    <string name="Members_zero">%1$d membri</string>
-    <string name="Members_one">%1$d membro</string>
-    <string name="Members_two">%1$d membri</string>
-    <string name="Members_few">%1$d membri</string>
-    <string name="Members_many">%1$d membri</string>
-    <string name="Members_other">%1$d membri</string>
-    <string name="AndMoreTyping_zero">e %1$d altre persone stanno scrivendo</string>
-    <string name="AndMoreTyping_one">e %1$d altre persone stanno scrivendo</string>
-    <string name="AndMoreTyping_two">e %1$d altre persone stanno scrivendo</string>
-    <string name="AndMoreTyping_few">e %1$d altre persone stanno scrivendo</string>
-    <string name="AndMoreTyping_many">e %1$d altre persone stanno scrivendo</string>
-    <string name="AndMoreTyping_other">e %1$d altre persone stanno scrivendo</string>
-    <string name="NewMessages_zero">nessun nuovo messaggio</string>
-    <string name="NewMessages_one">%1$d nuovo messaggio</string>
-    <string name="NewMessages_two">%1$d nuovi messaggi</string>
-    <string name="NewMessages_few">%1$d nuovi messaggi</string>
-    <string name="NewMessages_many">%1$d nuovi messaggi</string>
-    <string name="NewMessages_other">%1$d nuovi messaggi</string>
-    <string name="messages_zero">nessun messaggio</string>
-    <string name="messages_one">%1$d messaggio</string>
-    <string name="messages_two">%1$d messaggi</string>
-    <string name="messages_few">%1$d messaggi</string>
-    <string name="messages_many">%1$d messaggi</string>
-    <string name="messages_other">%1$d messaggi</string>
-    <string name="comments_zero">%1$d commenti</string>
-    <string name="comments_one">%1$d commento</string>
-    <string name="comments_two">%1$d commenti</string>
-    <string name="comments_few">%1$d commenti</string>
-    <string name="comments_many">%1$d commenti</string>
-    <string name="comments_other">%1$d commenti</string>
-    <string name="items_zero">nessun oggetto</string>
-    <string name="items_one">%1$d oggetto</string>
-    <string name="items_two">%1$d oggetti</string>
-    <string name="items_few">%1$d oggetti</string>
-    <string name="items_many">%1$d oggetti</string>
-    <string name="items_other">%1$d oggetti</string>
-    <string name="FromChats_zero">da nessuna chat</string>
-    <string name="FromChats_one">da %1$d chat</string>
-    <string name="FromChats_two">da %1$d chat</string>
-    <string name="FromChats_few">da %1$d chat</string>
-    <string name="FromChats_many">da %1$d chat</string>
-    <string name="FromChats_other">da %1$d chat</string>
-    <string name="Seconds_zero">%1$d secondi</string>
-    <string name="Seconds_one">%1$d secondo</string>
-    <string name="Seconds_two">%1$d secondi</string>
-    <string name="Seconds_few">%1$d secondi</string>
-    <string name="Seconds_many">%1$d secondi</string>
-    <string name="Seconds_other">%1$d secondi</string>
-    <string name="Minutes_zero">%1$d minuti</string>
-    <string name="Minutes_one">%1$d minuto</string>
-    <string name="Minutes_two">%1$d minuti</string>
-    <string name="Minutes_few">%1$d minuti</string>
-    <string name="Minutes_many">%1$d minuti</string>
-    <string name="Minutes_other">%1$d minuti</string>
-    <string name="Hours_zero">%1$d ore</string>
-    <string name="Hours_one">%1$d ora</string>
-    <string name="Hours_two">%1$d ore</string>
-    <string name="Hours_few">%1$d ore</string>
-    <string name="Hours_many">%1$d ore</string>
-    <string name="Hours_other">%1$d ore</string>
-    <string name="Days_zero">%1$d giorni</string>
-    <string name="Days_one">%1$d giorno</string>
-    <string name="Days_two">%1$d giorni</string>
-    <string name="Days_few">%1$d giorni</string>
-    <string name="Days_many">%1$d giorni</string>
-    <string name="Days_other">%1$d giorni</string>
-    <string name="Weeks_zero">%1$d settimane</string>
-    <string name="Weeks_one">%1$d settimana</string>
-    <string name="Weeks_two">%1$d settimane</string>
-    <string name="Weeks_few">%1$d settimane</string>
-    <string name="Weeks_many">%1$d settimane</string>
-    <string name="Weeks_other">%1$d settimane</string>
-    <string name="Months_zero">%1$d mesi</string>
-    <string name="Months_one">%1$d mese</string>
-    <string name="Months_two">%1$d mesi</string>
-    <string name="Months_few">%1$d mesi</string>
-    <string name="Months_many">%1$d mesi</string>
-    <string name="Months_other">%1$d mesi</string>
-    <string name="Years_zero">%1$d anni</string>
-    <string name="Years_one">%1$d anno</string>
-    <string name="Years_two">%1$d anni</string>
-    <string name="Years_few">%1$d anni</string>
-    <string name="Years_many">%1$d ann</string>
-    <string name="Years_other">%1$d anni</string>
-    <string name="Users_zero">%1$d utenti</string>
-    <string name="Users_one">%1$d utente</string>
-    <string name="Users_two">%1$d utenti</string>
-    <string name="Users_few">%1$d utenti</string>
-    <string name="Users_many">%1$d utenti</string>
-    <string name="Users_other">%1$d utenti</string>
-    <string name="Times_zero">%1$d volte</string>
-    <string name="Times_one">%1$d volta</string>
-    <string name="Times_two">%1$d volte</string>
-    <string name="Times_few">%1$d volte</string>
-    <string name="Times_many">%1$d volte</string>
-    <string name="Times_other">%1$d volte</string>
-    <string name="Meters_zero">%1$d metri</string>
-    <string name="Meters_one">%1$d metro</string>
-    <string name="Meters_two">%1$d metri</string>
-    <string name="Meters_few">%1$d metri</string>
-    <string name="Meters_many">%1$d metri</string>
-    <string name="Meters_other">%1$d metri</string>
-    <string name="Stickers_zero">%1$d sticker</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d sticker</string>
-    <string name="Stickers_few">%1$d sticker</string>
-    <string name="Stickers_many">%1$d sticker</string>
-    <string name="Stickers_other">%1$d sticker</string>
-    <string name="Photos_zero">%1$d foto</string>
-    <string name="Photos_one">%1$d foto</string>
-    <string name="Photos_two">%1$d foto</string>
-    <string name="Photos_few">%1$d foto</string>
-    <string name="Photos_many">%1$d foto</string>
-    <string name="Photos_other">%1$d foto</string>
-    <string name="LastSeenMinutes_zero">ultimo accesso %1$d minuti fa</string>
-    <string name="LastSeenMinutes_one">ultimo accesso %1$d minuto fa</string>
-    <string name="LastSeenMinutes_two">ultimo accesso %1$d minuti fa</string>
-    <string name="LastSeenMinutes_few">ultimo accesso %1$d minuti fa</string>
-    <string name="LastSeenMinutes_many">ultimo accesso %1$d minuti fa</string>
-    <string name="LastSeenMinutes_other">ultimo accesso %1$d minuti fa</string>
-    <string name="LastSeenHours_zero">ultimo accesso %1$d ore fa</string>
-    <string name="LastSeenHours_one">ultimo accesso %1$d ora fa</string>
-    <string name="LastSeenHours_two">ultimo accesso %1$d ore fa</string>
-    <string name="LastSeenHours_few">ultimo accesso %1$d ore fa</string>
-    <string name="LastSeenHours_many">ultimo accesso %1$d ore fa</string>
-    <string name="LastSeenHours_other">ultimo accesso %1$d ore fa</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d messaggi inoltrati</string>
-    <string name="ForwardedMessage_one">Messaggio inoltrato</string>
-    <string name="ForwardedMessage_two">%1$d messaggi inoltrati</string>
-    <string name="ForwardedMessage_few">%1$d messaggi inoltrati</string>
-    <string name="ForwardedMessage_many">%1$d messaggi inoltrati</string>
-    <string name="ForwardedMessage_other">%1$d messaggi inoltrati</string>
-    <string name="ForwardedFile_zero">%1$d file inoltrati</string>
-    <string name="ForwardedFile_one">FIle inoltrato</string>
-    <string name="ForwardedFile_two">%1$d file inoltrati</string>
-    <string name="ForwardedFile_few">%1$d file inoltrati</string>
-    <string name="ForwardedFile_many">%1$d file inoltrati</string>
-    <string name="ForwardedFile_other">%1$d file inoltrati</string>
-    <string name="ForwardedPhoto_zero">%1$d foto inoltrate</string>
-    <string name="ForwardedPhoto_one">Foto inoltrata</string>
-    <string name="ForwardedPhoto_two">%1$d foto inoltrate</string>
-    <string name="ForwardedPhoto_few">%1$d foto inoltrate</string>
-    <string name="ForwardedPhoto_many">%1$d foto inoltrate</string>
-    <string name="ForwardedPhoto_other">%1$d foto inoltrate</string>
-    <string name="ForwardedVideo_zero">%1$d video inoltrati</string>
-    <string name="ForwardedVideo_one">Video inoltrato</string>
-    <string name="ForwardedVideo_two">%1$d video inoltrati</string>
-    <string name="ForwardedVideo_few">%1$d video inoltrati</string>
-    <string name="ForwardedVideo_many">%1$d video inoltrati</string>
-    <string name="ForwardedVideo_other">%1$d video inoltrati</string>
-    <string name="ForwardedMusic_zero">%1$d tracce inoltrate</string>
-    <string name="ForwardedMusic_one">Traccia inoltrata</string>
-    <string name="ForwardedMusic_two">%1$d tracce inoltrate</string>
-    <string name="ForwardedMusic_few">%1$d tracce inoltrate</string>
-    <string name="ForwardedMusic_many">%1$d tracce inoltrate</string>
-    <string name="ForwardedMusic_other">%1$d tracce inoltrate</string>
-    <string name="ForwardedAudio_zero">%1$d messaggi vocali inoltrati</string>
-    <string name="ForwardedAudio_one">Messaggio vocale inoltrato</string>
-    <string name="ForwardedAudio_two">%1$d messaggi vocali inoltrati</string>
-    <string name="ForwardedAudio_few">%1$d messaggi vocali inoltrati</string>
-    <string name="ForwardedAudio_many">%1$d messaggi vocali inoltrati</string>
-    <string name="ForwardedAudio_other">%1$d messaggi vocali inoltrati</string>
-    <string name="ForwardedLocation_zero">%1$d posizioni inoltrate</string>
-    <string name="ForwardedLocation_one">Posizione inoltrata</string>
-    <string name="ForwardedLocation_two">%1$d posizione inoltrate</string>
-    <string name="ForwardedLocation_few">%1$d posizione inoltrate</string>
-    <string name="ForwardedLocation_many">%1$d posizione inoltrate</string>
-    <string name="ForwardedLocation_other">%1$d posizione inoltrate</string>
-    <string name="ForwardedContact_zero">%1$d contatti inoltrati</string>
-    <string name="ForwardedContact_one">Contatto inoltrato</string>
-    <string name="ForwardedContact_two">%1$d contatti inoltrati</string>
-    <string name="ForwardedContact_few">%1$d contatti inoltrati</string>
-    <string name="ForwardedContact_many">%1$d contatti inoltrati</string>
-    <string name="ForwardedContact_other">%1$d contatti inoltrati</string>
-    <string name="ForwardedSticker_zero">%1$d sticker inoltrati</string>
-    <string name="ForwardedSticker_one">Sticker inoltrato</string>
-    <string name="ForwardedSticker_two">%1$d sticker inoltrati</string>
-    <string name="ForwardedSticker_few">%1$d sticker inoltrati</string>
-    <string name="ForwardedSticker_many">%1$d sticker inoltrati</string>
-    <string name="ForwardedSticker_other">%1$d sticker inoltrati</string>
-    <string name="AndOther_zero">e altri %1$d</string>
-    <string name="AndOther_one">e %1$d altro</string>
-    <string name="AndOther_two">e altri %1$d</string>
-    <string name="AndOther_few">e altri %1$d</string>
-    <string name="AndOther_many">e altri %1$d</string>
-    <string name="AndOther_other">e altri %1$d</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">dd MMM</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s alle %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
deleted file mode 100644
index 12ce89add..000000000
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--https://www.transifex.com/projects/p/telegram/language/ko/members/-->
-
-<resources>
-    <string name="AppName">텔레그램</string>
-    <string name="AppNameBeta">텔레그램 베타</string>
-    <string name="LanguageName">한국어</string>
-    <string name="LanguageNameInEnglish">Korean</string>
-    <string name="LanguageCode">ko</string>
-    <!--signin view-->
-    <string name="YourPhone">전화번호 입력</string>
-    <string name="StartText">국가번호와 전화번호를 입력하세요. (대한민국 국가번호: 82)</string>
-    <string name="ChooseCountry">국가를 선택하세요</string>
-    <string name="WrongCountry">올바른 국가번호를 입력하세요</string>
-    <!--code enter view-->
-    <string name="YourCode">인증코드 입력</string>
-    <string name="SentSmsCode">인증코드 메시지를 아래 번호로 전송했습니다</string>
-    <string name="CallText">텔레그램이 %1$d:%2$02d 후에는 전화를 겁니다.</string>
-    <string name="Calling">텔레그램이 전화 거는 중...</string>
-    <string name="Code">코드</string>
-    <string name="WrongNumber">전화번호가 틀렸나요?</string>
-    <string name="DidNotGetTheCode">코드를 받지 못하셨나요?</string>
-    <!--signup view-->
-    <string name="YourName">이름 입력</string>
-    <string name="RegisterText">이름을 입력하세요</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">이름(필수)</string>
-    <string name="LastName">성(선택)</string>
-    <string name="CancelRegistration">가입 취소</string>
-    <!--chats view-->
-    <string name="Settings">설정</string>
-    <string name="Contacts">주소록</string>
-    <string name="NewGroup">새 그룹</string>
-    <string name="Yesterday">어제</string>
-    <string name="NoResult">결과 없음</string>
-    <string name="NoChats">채팅방이 없습니다...</string>
-    <string name="NoChatsHelp">대화를 시작하려면 우측 상단의\n초대하기 버튼을 누르거나\n메뉴 버튼을 눌러 보세요.</string>
-    <string name="WaitingForNetwork">연결 대기 중...</string>
-    <string name="Connecting">연결 중...</string>
-    <string name="Updating">업데이트 중...</string>
-    <string name="NewSecretChat">비밀대화 시작</string>
-    <string name="AwaitingEncryption">%s님을 기다리는 중...</string>
-    <string name="EncryptionRejected">비밀대화가 끝났습니다</string>
-    <string name="EncryptionProcessing">암호키 교환중...</string>
-    <string name="EncryptedChatStartedOutgoing">%s님이 비밀대화에 참여했습니다.</string>
-    <string name="EncryptedChatStartedIncoming">비밀대화에 참여했습니다.</string>
-    <string name="ClearHistory">대화내용 지우기</string>
-    <string name="ClearHistoryCache">캐시에서 삭제</string>
-    <string name="DeleteChat">채팅방 나가기</string>
-    <string name="DeleteChatUser">이 대화 삭제</string>
-    <string name="HiddenName">탈퇴한 계정</string>
-    <string name="SelectChat">채팅방 선택</string>
-    <string name="PhotoTip">꾹 눌러서 보기</string>
-    <string name="CompatibilityChat">%1$s님의 텔레그램 버전이 낮아 비밀 사진을 호환성 모드로 표시합니다.\n\n%2$s님이 텔레그램을 업데이트하고 나면, 자동삭제 시간이 1분 이하인 사진은 \"탭하고 누르고 있어야 보임\" 상태가 되며, 상대방이 화면을 캡처할 때 마다 알림을 받습니다.</string>
-    <string name="SearchMessages">메시지</string>
-    <string name="Search">검색</string>
-    <string name="MuteNotifications">알림 음소거</string>
-    <string name="MuteFor">%1$s 동안 음소거</string>
-    <string name="UnmuteNotifications">음소거 해제</string>
-    <string name="WillUnmuteIn">%1$s 후</string>
-    <string name="MuteDisable">비활성화</string>
-    <string name="Hashtags">해시태그</string>
-    <string name="Recent">최신</string>
-    <string name="LinkPreview">링크 미리복</string>
-    <!--channels-->
-    <string name="SetAsAdmin">관리자로 지명</string>
-    <string name="DescriptionInfoMega">그룹에 추가 설명을 제공 할 수 있습니다.</string>
-    <string name="LeaveMega">그룹 나가기</string>
-    <string name="DeleteMega">그룹 삭제</string>
-    <string name="LeaveMegaMenu">그룹 나각</string>
-    <string name="DeleteMegaMenu">그룹 삭제</string>
-    <string name="MegaDeleteInfo">그룹에 있는 모든 메시지가 삭제됩니다.</string>
-    <string name="MegaAdminsInfo">그룹방 관리를 도울 수 있는 관리자를 추가 할 수 있습니다. 길게 탭을하면 관리자 삭제가 가능합니다.</string>
-    <string name="MegaDeleteAlert">이 그룹방을 삭제하실 경우 모든 구성원과 메시지를 삭제를 하게되며 복구가 안됩니다. 그래도 그룹방을 삭제하시겠습니까?</string>
-    <string name="ActionCreateMega">그룹 생성됨</string>
-    <string name="MegaAddedBy">이 그룹방에 un1님이 초대하였습니다.</string>
-    <string name="MegaLeaveAlert">정말 그룹방에서 나가겠습니까?</string>
-    <string name="GroupUserCantAdd">죄송합니다, 이 유저를 그룹에 초대할 수 없습니다.</string>
-    <string name="GroupUserAddLimit">죄송합니다, 그룹방의 인원이 최대치입니다.</string>
-    <string name="GroupUserLeftError">해당 유저가 스스로 그룹방에서 퇴장을 하여 다시 초대할 수 없습니다.</string>
-    <string name="GroupUserCantAdmin">죄송합니다, 그룹방에 너무 많은 관리자가 있습니다.</string>
-    <string name="GroupUserCantBot">죄송합니다, 그룹방에 너무 많은 봇이 있습니다.</string>
-    <string name="ActionMigrateFromGroup">이 그룹방은 슈퍼그룹방으로 업그레이드 되었습니다.</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s 그룹방은 슈퍼그룹방으로 업그레이드 되었습니다.</string>
-    <string name="NoBlockedGroup">그룹방에서 차단되어 퇴장당한 사용자는 관리자가 초대해야지만 그룹방에 입장이 가능합니다. 초대링크로는 초대가 되지 않습니다.</string>
-    <string name="NewChannel">새 채널</string>
-    <string name="EnterChannelName">채널명</string>
-    <string name="Comments">코멘트들</string>
-    <string name="CommentsInfo">코멘트를 허용할 경우, 유저들이 회원님 글에 대하여 코멘트 등록이 가능합니다.</string>
-    <string name="AddMutual">채널에 친구 추가</string>
-    <string name="ChannelUsernameHelp">텔레그램 검색을 통하여 다른 유저들이 채널을 찾을 수 있습니다.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">링크</string>
-    <string name="ChannelPrivateLinkHelp">이 링크를 통하여 다른 유저들이 채널에 입장 할 수 있습니다. 이 링크는 언제든지 폐기 가능합니다.</string>
-    <string name="DescriptionPlaceholder">설명</string>
-    <string name="DescriptionInfo">채널에 추가 설명을 제공 할 수 있습니다.</string>
-    <string name="ChannelPublic">공개 채널</string>
-    <string name="ChannelPublicInfo">공개 채널은 검색이 가능하며, 누구나 입장 가능합니다</string>
-    <string name="ChannelPrivate">비공개 채널</string>
-    <string name="ChannelPrivateInfo">비공개 채널은 초대 링크로만 입장 가능합니다.</string>
-    <string name="ChannelLinkTitle">링크</string>
-    <string name="ChannelInviteLinkTitle">초대링크</string>
-    <string name="ChannelAddMembers">구성원 추가</string>
-    <string name="LeaveChannel">채널 나가기</string>
-    <string name="LeaveChannelMenu">채널 나가기</string>
-    <string name="ChannelSettings">설정</string>
-    <string name="ChannelJoin">입장</string>
-    <string name="OpenChannelProfile">채널 정보</string>
-    <string name="ChannelBroadcast">모두에게 메시지 전달</string>
-    <string name="ChannelComment">코멘트 </string>
-    <string name="ShowDiscussion">코멘트 보기</string>
-    <string name="ChannelAlertTitle">채널이 무엇인가요?</string>
-    <string name="ChannelAlertText">채널은 많은 유저들에게 메시지를 한번에 전송 할 수 있는 새로운 기능입니다.</string>
-    <string name="ChannelAlertCreate">채널 생성</string>
-    <string name="LinkInUse">이미 사용 중인 이름입니다.</string>
-    <string name="LinkInvalid">올바르지 않은 이름입니다.</string>
-    <string name="LinkInvalidShort">채널명은 최소 5 글자 이상 입력해야 합니다.</string>
-    <string name="LinkInvalidLong">이름은 최대 32자까지만 가능합니다.</string>
-    <string name="LinkInvalidStartNumber">채널명은 숫자로 시작 할 수 없습니다.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">이름 확인 중..</string>
-    <string name="LinkAvailable">%1$s은 사용 가능합니다.</string>
-    <string name="ChannelMembers">구성원</string>
-    <string name="ChannelBlockedUsers">차단된 사용자</string>
-    <string name="ChannelAdministrators">관리자</string>
-    <string name="ChannelDelete">채널 삭제</string>
-    <string name="ChannelDeleteMenu">채널 삭제</string>
-    <string name="ChannelDeleteAlert">이 채널을 삭제하실 경우 모든 구성원과 메시지를 삭제를 하게되며 복구가 안됩니다. 그래도 채널을 삭제하시겠습니까?</string>
-    <string name="ChannelLeaveAlert">채널에서 나가시겠습니까?</string>
-    <string name="ChannelDeleteInfo">채널에 있는 모든 메시지가 삭제됩니다.</string>
-    <string name="ChannelEdit">편집</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">채널에 대한 공개링크를 선택하신 경우, 누구나 검색을 통하여 입장 가능합니다.\n\n비공개 채널로 유지를 하시고 싶으실 경우 링크 생성을 하지 말아주세요</string>
-    <string name="ChannelPublicEmptyUsername">유저들이 공개 채널에 대하여 검색 및 공유가 가능하도록 링크를 선택하여 주세요.\n\n채널을 공개하시지 싫으실 경우, 비공개 채널을 추천드립니다.</string>
-    <string name="ActionCreateChannel">채널 생성됨</string>
-    <string name="ActionChannelChangedPhoto">채널 사진 업데이트됨</string>
-    <string name="ActionChannelRemovedPhoto">채널 사진 삭제됨</string>
-    <string name="ActionChannelChangedTitle">채널명이 un2로 변경됨</string>
-    <string name="ChannelPublicLimitReached">죄송하지만, 너무 많은 공개 채널을 생성하였습니다. 기존 공개 채널을 삭제하시거나 비공개 채널을 생성할 수 있습니다.</string>
-    <string name="ChannelModerator">관리자</string>
-    <string name="ChannelCreator">생성자</string>
-    <string name="ChannelEditor">관리자</string>
-    <string name="ChannelMute">음소거</string>
-    <string name="ChannelUnmute">음소거 취소</string>
-    <string name="ChannelAddAdmin">관리자 추가</string>
-    <string name="ChannelInviteViaLink">링크를 통해 초대</string>
-    <string name="ChannelAddUserAdminAlert">%1$s님을 관리자로 추가하시겠습니까?</string>
-    <string name="ChannelRemoveUserAdmin">삭제</string>
-    <string name="ChannelMembersInfo">채널 관리자만 리스트를 볼 수 있습니다.</string>
-    <string name="ChannelAdminNotParticipant">아직 이 유저가 채널에 입장하지 않았습니다. 초대하시겠습니까?</string>
-    <string name="ChannelLinkInfo">텔레그램이 설치된 분들은 링크를 타고 채널에 참여가 가능합니다.</string>
-    <string name="ChannelAdminsInfo">채널 관리를 도울 수 있는 관리자를 추가 할 수 있습니다. 길게 탭을하면 관리자 삭제가 가능합니다.</string>
-    <string name="ChannelJoinTo">\'%1$s\'채널에 참여하시겠습니까?</string>
-    <string name="ChannelCantOpenPrivate">죄송합니다, 이 채팅방에 더 이상 접근이 불가능 합니다.</string>
-    <string name="ChannelAddTo">%1$s 님을 이 채널에 추가할까요</string>
-    <string name="ChannelUserLeftError">해당 사용자가 스스로 채널에서 퇴장을 하여 다시 초대할 수 없습니다.</string>
-    <string name="ChannelUserCantAdd">죄송합니다, 이 유저를 채널에 추가 할 수 없습니다.</string>
-    <string name="ChannelUserCantAdmin">죄송합니다, 채널에 너무 많은 관리자가 있습니다.</string>
-    <string name="ChannelUserCantBot">죄송합니다, 채널에 너무 많은 봇이 있습니다.</string>
-    <string name="ChannelUserAddLimit">죄송합니다, 채널에는 첫 200명까지만 초대가 가능합니다. 채널 링크를 통하여 무제한 입장이 가능합니다.</string>
-    <string name="ChannelAddedBy">이 채널에 un1님이 초대하였습니다.</string>
-    <string name="ChannelJoined">채널에 참여하였습니다.</string>
-    <string name="ChannelRemoveUser">채널에서 내보내기</string>
-    <string name="ChannelCantSendMessage">채널에 글을 쓸 수 없습니다.</string>
-    <string name="ChannelAddedByNotification">%1$s님이 %2$s 채널에 초대했습니다</string>
-    <string name="ChannelPhotoEditNotification">%1$s님이 사진을 업데이트 하였습니다</string>
-    <string name="ChannelMessageGroupNoText">%1$s님이 %2$s 채널에 메시지를 보냈습니다</string>
-    <string name="ChannelMessageGroupPhoto">%1$s님이 %2$s 채널에 사진을 보냈습니다</string>
-    <string name="ChannelMessageGroupVideo">%1$s님이 %2$s 채널에 비디오를 보냈습니다</string>
-    <string name="ChannelMessageGroupContact">%1$s님이 %2$s 채널에 연락처를 공유했습니다</string>
-    <string name="ChannelMessageGroupMap">%1$s님이 %2$s 채널에 위치를 보냈습니다</string>
-    <string name="ChannelMessageGroupDocument">%1$s님이 %2$s 채널에 파일을 보냈습니다</string>
-    <string name="ChannelMessageGroupGif">%1$s님이 %2$s 채널에 GIF파일을 보냈습니다</string>
-    <string name="ChannelMessageGroupAudio">%1$s님이 %2$s 채널에 음성메시지를 보냈습니다</string>
-    <string name="ChannelMessageGroupSticker">%1$s님이 %2$s 채널에 스티커를 보냈습니다</string>
-    <string name="ChannelMessageNoText">%1$s 님이 메시지를 보냈습니다</string>
-    <string name="ChannelMessagePhoto">%1$s 님이 사진을 보냈습니다</string>
-    <string name="ChannelMessageVideo">%1$s 님이 동영상을 보냈습니다</string>
-    <string name="ChannelMessageContact">%1$s님이 연락처를 공유했습니다</string>
-    <string name="ChannelMessageMap">%1$s님이 위치를 보냈습니다</string>
-    <string name="ChannelMessageDocument">%1$s 님이 파일을 보냈습니다</string>
-    <string name="ChannelMessageGIF">%1$s 님이 GIF파일을 보냈습니다</string>
-    <string name="ChannelMessageAudio">%1$s님이 음성메시지를 보냈습니다</string>
-    <string name="ChannelMessageSticker">%1$s님이 스티커를 보냈습니다</string>
-    <string name="WhoCanAddMembers">초대가 가능한 구성원</string>
-    <string name="WhoCanAddMembersAllMembers">모든 구성원</string>
-    <string name="WhoCanAddMembersAdmins">관리자만 가능</string>
-    <string name="ChannelNotifyMembersInfoOn">메시지 알림 대상</string>
-    <string name="ChannelNotifyMembersInfoOff">메시지 미알림 대상</string>
-    <string name="ChannelSignMessages">메시지 서명</string>
-    <string name="ChannelSignMessagesInfo">메시지 작성하는 관리자 추가</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">새 단체 메시지 리스트</string>
-    <string name="EnterListName">리스트 이름을 입력하세요</string>
-    <string name="YouCreatedBroadcastList">단체 메시지 리스트를 만들었습니다</string>
-    <string name="AddRecipient">받는 사람 추가</string>
-    <string name="KickFromBroadcast">리스트에서 제외</string>
-    <!--audio view-->
-    <string name="NoAudio">음악 라이브러리에 파일을 추가하셔야지만 볼 수 있습니다.</string>
-    <string name="AttachMusic">음악</string>
-    <string name="AudioUnknownArtist">알수 없는 아티스트</string>
-    <string name="AudioUnknownTitle">알 수 없는 제목</string>
-    <!--documents view-->
-    <string name="SelectFile">파일 선택</string>
-    <string name="FreeOfTotal">%2$s 중 %1$s 남음</string>
-    <string name="UnknownError">알 수 없는 오류</string>
-    <string name="AccessError">접근 오류</string>
-    <string name="NoFiles">파일이 없습니다</string>
-    <string name="FileUploadLimit">파일 크기는 %1$s보다 작아야 합니다</string>
-    <string name="NotMounted">스토리지가 마운트되지 않음</string>
-    <string name="UsbActive">USB 전송 활성</string>
-    <string name="InternalStorage">내부 저장소</string>
-    <string name="ExternalStorage">외부 저장소</string>
-    <string name="SystemRoot">시스템 루트</string>
-    <string name="SdCard">SD 카드</string>
-    <string name="Folder">폴더</string>
-    <string name="GalleryInfo">압축 없이 사진 보내기</string>
-    <!--chat view-->
-    <string name="Invisible">숨김</string>
-    <string name="Typing">입력 중...</string>
-    <string name="IsTyping">님이 입력 중...</string>
-    <string name="AreTyping">님이 입력 중...</string>
-    <string name="IsRecordingAudio">%1$s님이 음성메시지를 녹음중입니다...</string>
-    <string name="IsSendingPhoto">%1$s님이 사진 보내는 중...</string>
-    <string name="IsSendingVideo">%1$s님이 동영상 보내는 중...</string>
-    <string name="IsSendingFile">%1$s님이 파일 보내는 중...</string>
-    <string name="RecordingAudio">음성메시지를 녹음 중입니다..</string>
-    <string name="SendingPhoto">사진 전송 중..</string>
-    <string name="SendingVideoStatus">동영상 전송 중..</string>
-    <string name="SendingFile">파일 전송 중...</string>
-    <string name="GotAQuestion">텔레그램에 관해\n궁금한 사항이 있나요?</string>
-    <string name="ChatTakePhoto">사진 촬영</string>
-    <string name="ChatGallery">앨범</string>
-    <string name="ChatLocation">위치</string>
-    <string name="ChatVideo">동영상</string>
-    <string name="ChatDocument">파일</string>
-    <string name="ChatCamera">카메라</string>
-    <string name="NoMessages">메시지가 없습니다...</string>
-    <string name="ForwardedMessage">전달된 메시지</string>
-    <string name="From">보낸 사람</string>
-    <string name="NoRecent">최근에 사용한 이모티콘</string>
-    <string name="Message">메시지</string>
-    <string name="TypeMessage">메시지</string>
-    <string name="ShareMyContactInfo">내 연락처 공유</string>
-    <string name="AddToContacts">주소록에 추가</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s님이 비밀대화에 초대했습니다.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">%s님을 비밀대화에 초대했습니다.</string>
-    <string name="EncryptedDescriptionTitle">비밀대화는</string>
-    <string name="EncryptedDescription1">단대단 암호화를 사용합니다</string>
-    <string name="EncryptedDescription2">서버에 어떤 흔적도 남기지 않습니다</string>
-    <string name="EncryptedDescription3">일정 시간 후에 자동삭제가 가능합니다</string>
-    <string name="EncryptedDescription4">전달 기능이 허용되지 않습니다</string>
-    <string name="YouWereKicked">그룹에서 퇴장당했습니다.</string>
-    <string name="YouLeft">그룹을 떠났습니다</string>
-    <string name="DeleteThisGroup">이 그룹 삭제</string>
-    <string name="DeleteThisChat">이 채팅방 삭제</string>
-    <string name="SlideToCancel">밀어서 취소</string>
-    <string name="SaveToDownloads">다운로드 폴더에 저장</string>
-    <string name="SaveToGIFs">GIF파일로 저장</string>
-    <string name="DeleteGif">GIF파일을 삭제하겠습니까?</string>
-    <string name="SaveToMusic">음악으로 저장</string>
-    <string name="ShareFile">공유</string>
-    <string name="ApplyLocalizationFile">언어 파일 적용</string>
-    <string name="UnsupportedAttachment">지원하지 않는 형식입니다</string>
-    <string name="SetTimer">자동삭제 타이머 설정</string>
-    <string name="ServiceNotifications">서비스 알림</string>
-    <string name="GettingLinkInfo">링크 정보를 가져오는 중...</string>
-    <string name="OpenInBrowser">브라우져에서 열기</string>
-    <string name="CopyUrl">URL 복사</string>
-    <string name="SendItems">%1$s 전송</string>
-    <string name="OpenUrlAlert">%1$s 링크를 여시겠습니까?</string>
-    <string name="ReportSpam">스팸 신고</string>
-    <string name="AddContactChat">주소록에 추가</string>
-    <string name="ReportSpamAlert">이 유저 메시지를 스팸신고 하시겠습니까?</string>
-    <string name="ReportSpamAlertGroup">이 그룹 메시지를 스팸신고 하시겠습니까?</string>
-    <string name="NobodyLikesSpam1">죄송합니다, 서로 연락처가 추가된 경우에만 메시지 전송이 가능합니다.</string>
-    <string name="NobodyLikesSpam2">죄송합니다, 서로 연락처가 추가된 경우에만 그룹에 구성원을 추가 할 수 있습니다.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq#can-39t-send-messages-to-non-contacts</string>
-    <string name="MoreInfo">더 보기</string>
-    <string name="ShareSendTo">다음에게 보내기..</string>
-    <string name="TapHereGifs">저장된 GIF 파일을 보려면 탭하세요.</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s님이 자동삭제를 %2$s 후로 설정했습니다</string>
-    <string name="MessageLifetimeChangedOutgoing">자동삭제를 %1$s 후로 설정했습니다</string>
-    <string name="MessageLifetimeRemoved">%1$s님이 자동삭제를 해제했습니다</string>
-    <string name="MessageLifetimeYouRemoved">자동삭제를 해제했습니다</string>
-    <string name="YouHaveNewMessage">새 메시지가 있습니다</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s님이 메시지를 보냈습니다</string>
-    <string name="NotificationMessagePhoto">%1$s님이 사진을 보냈습니다</string>
-    <string name="NotificationMessageVideo">%1$s님이 동영상을 보냈습니다</string>
-    <string name="NotificationMessageContact">%1$s님이 연락처를 공유했습니다</string>
-    <string name="NotificationMessageMap">%1$s님이 위치를 보냈습니다</string>
-    <string name="NotificationMessageDocument">%1$s님이 파일을 보냈습니다</string>
-    <string name="NotificationMessageGif">%1$s 님께서 GIF파일을 보내셨습니다</string>
-    <string name="NotificationMessageAudio">%1$s님이 음성메시지를 보냈습니다</string>
-    <string name="NotificationMessageSticker">%1$s님이 스티커를 보냈습니다</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s님이 %2$s 그룹에 메시지를 보냈습니다</string>
-    <string name="NotificationMessageGroupPhoto">%1$s님이 %2$s 그룹에 사진을 보냈습니다</string>
-    <string name="NotificationMessageGroupVideo">%1$s님이 %2$s 그룹에 동영상을 보냈습니다</string>
-    <string name="NotificationMessageGroupContact">%1$s님이 %2$s 그룹에 연락처를 공유했습니다</string>
-    <string name="NotificationMessageGroupMap">%1$s님이 %2$s 그룹에 위치를 보냈습니다</string>
-    <string name="NotificationMessageGroupDocument">%1$s님이 %2$s 그룹에 파일을 보냈습니다</string>
-    <string name="NotificationMessageGroupGif">%1$s 님께서 %2$s 그룹에 GIF파일을 보냈습니다</string>
-    <string name="NotificationMessageGroupAudio">%1$s님이 %2$s 그룹에 음성메시지를 보냈습니다</string>
-    <string name="NotificationMessageGroupSticker">%1$s님이 %2$s 그룹에 스티커를 보냈습니다</string>
-    <string name="NotificationInvitedToGroup">%1$s님이 %2$s 그룹에 초대했습니다</string>
-    <string name="NotificationEditedGroupName">%1$s님이 그룹 이름을 %2$s 그룹으로 변경했습니다</string>
-    <string name="NotificationEditedGroupPhoto">%1$s님이 %2$s 그룹 사진을 변경했습니다</string>
-    <string name="NotificationGroupAddMember">%1$s님이 %3$s님을 %2$s 그룹에 초대했습니다</string>
-    <string name="NotificationGroupAddSelf">%1$s 님이 %2$s 그룹으로 되돌아왔습니다</string>
-    <string name="NotificationGroupKickMember">%1$s님이 %3$s님을 %2$s 그룹에서 퇴장당했습니다.</string>
-    <string name="NotificationGroupKickYou">%1$s님이 %2$s 그룹에서 퇴장당했습니다.</string>
-    <string name="NotificationGroupLeftMember">%1$s님이 %2$s 그룹을 떠났습니다</string>
-    <string name="NotificationContactJoined">%1$s님이 텔레그램에 가입했습니다!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s님,\n%2$s에 새 기기에서 회원님의 계정 로그인이 감지되었습니다. \n\n기기: %3$s\n위치: %4$s\n\n본인의 접속이 아니라면  \'설정\' 창에서 \'모든 세션 종료\' 기능을 실행하세요.\n\n만약 강제접속 의심이 되신다면 2단계 인증을 설정 - 개인정보 및 보안에서 설정할 수 있습니다.\n\n감사합니다.\n텔레그램 팀</string>
-    <string name="NotificationContactNewPhoto">%1$s님이 프로필 사진을 변경했습니다</string>
-    <string name="NotificationInvitedToGroupByLink">초대링크를 타고 %1$s님께서 %2$s 그룹에 참여하셨습니다.</string>
-    <string name="Reply">답장</string>
-    <string name="ReplyToGroup">%1$s 그룹에 답장하기</string>
-    <string name="ReplyToUser">%1$s님에게 답장하기</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%2$s %1$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">대화상대 선택</string>
-    <string name="NoContacts">대화상대가 없습니다</string>
-    <string name="InviteText">Telegram을 사용해 보세요!: https://telegram.org/dl</string>
-    <string name="TodayAt">오늘</string>
-    <string name="YesterdayAt">어제</string>
-    <string name="Online">온라인</string>
-    <string name="LastSeen">마지막 접속: </string>
-    <string name="LastSeenDate">마지막 접속: </string>
-    <string name="LastSeenNow">방금 전에 확인</string>
-    <string name="InviteFriends">친구 초대</string>
-    <string name="GlobalSearch">전체 검색</string>
-    <string name="Lately">최근에 접속</string>
-    <string name="WithinAWeek">일주일 이내 마지막으로 접속</string>
-    <string name="WithinAMonth">한 달 이내 마지막으로 접속</string>
-    <string name="ALongTimeAgo">마지막으로 접속한 지 오래됨</string>
-    <string name="NewMessageTitle">새 메시지</string>
-    <!--group create view-->
-    <string name="SendMessageTo">메시지 보내기...</string>
-    <string name="SoftUserLimitAlert">이 그룹 생성을 완료하시고 슈퍼그룹으로 전환하시면 더 많은 구성원을 추가 할 수 있습니다.</string>
-    <string name="EnterGroupNamePlaceholder">그룹 이름 입력</string>
-    <string name="GroupName">그룹 이름</string>
-    <string name="MembersCount">대화상대 %1$d/%2$d</string>
-    <string name="JoinToGroup">\'%1$s\' 채널에 참여하시겠습니까?</string>
-    <string name="JoinToGroupErrorFull">죄송합니다, 그룹방의 인원이 최대치입니다.</string>
-    <string name="JoinToGroupErrorNotExist">죄송합니다, 채팅방이 더이상 존재하지 않습니다.</string>
-    <string name="LinkCopied">클립보드로 링크가 복사되었습니다.</string>
-    <string name="InviteToGroupByLink">링크를 통하여 그룹방에 초대하기</string>
-    <string name="InviteLink">초대링크</string>
-    <string name="RevokeAlert">초대링크를 폐지하시겠습니까? 진행하실 경우 해당 링크로 방에 참여할 수 없게 됩니다.</string>
-    <string name="RevokeAlertNewLink">기존 초대링크는 비활성화 되었습니다. 새로운 링크가 생성되었습니다.</string>
-    <string name="RevokeButton">폐지하기</string>
-    <string name="RevokeLink">링크 폐지</string>
-    <string name="CopyLink">링크 복사</string>
-    <string name="ShareLink">링크 공유</string>
-    <string name="LinkInfo">텔레그램이 설치된 분들은 링크를 타고 그룹방에 참여가 가능합니다.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">관리자 대화</string>
-    <string name="SetAdminsAll">모든 구성원이 관리자입니다.</string>
-    <string name="SetAdminsAllInfo">그룹에 있는 모든 구성원은 상대 초대, 이름 및 사진을 수정할 수 있습니다.</string>
-    <string name="SetAdminsNotAllInfo">그룹방에 있는 관리자만 구성원을 초대, 퇴장, 이름 편집 및 사진 수정할 수 있습니다.</string>
-    <!--group info view-->
-    <string name="SharedMedia">공유한 미디어</string>
-    <string name="SETTINGS">설정</string>
-    <string name="AddMember">대화상대 추가</string>
-    <string name="SetAdmins">관리자 설정</string>
-    <string name="DeleteAndExit">그룹에서 나가기</string>
-    <string name="Notifications">알림</string>
-    <string name="KickFromGroup">그룹에서 내보내기</string>
-    <string name="ConvertGroup">슈퍼그룹방으로 업그레이드하기</string>
-    <string name="ConvertGroupAlert">슈퍼그룹방을 보려면 구성원들이 최신 텔레그램 버전으로 업데이트 해야합니다. 저암ㄹ로 그룹방을 업그레이드 하시겠습니까?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>구성원이 최대치입니다.<![CDATA[</b>]]>\n\n추가 기능 및 더 많은 구성원을 추가하려면 슈퍼그룹방으로 업그레이드하세요:\n\n• 슈퍼그룹방은 %1$s명까지 초대가능합니다.\n• 새로운 구성원은 모든 대화내역을 볼 수 있습니다.\n• 관리자는 모두에게 메시지 삭제를 할 수 있습니다.\n• 기본값으로 알림이 음소거 됩니다.</string>
-    <!--contact info view-->
-    <string name="ShareContact">공유</string>
-    <string name="AddContact">추가</string>
-    <string name="AddContactTitle">대화상대 추가</string>
-    <string name="BlockContact">차단</string>
-    <string name="EditContact">편집</string>
-    <string name="DeleteContact">삭제</string>
-    <string name="PhoneHome">집</string>
-    <string name="PhoneMobile">휴대전화</string>
-    <string name="PhoneWork">직장</string>
-    <string name="PhoneOther">기타</string>
-    <string name="PhoneMain">주</string>
-    <string name="StartEncryptedChat">비밀대화 시작</string>
-    <string name="CreateEncryptedChatError">오류가 발생했습니다.</string>
-    <string name="EncryptionKey">암호화 키</string>
-    <string name="MessageLifetime">자동삭제 타이머</string>
-    <string name="ShortMessageLifetimeForever">해제</string>
-    <string name="EncryptionKeyDescription">이 이미지와 텍스트는 <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]> 님과의 현재 비밀대화에 대한 비밀키에서 파생된 것입니다. 이 이미지와 텍스트가 <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>  님의 휴대전화와 동일하다면 단말기간(end-to-end)의 암호화가 정상적으로 진행되고 있음을 보장합니다.<![CDATA[<br><br>]]> 자세한 사항은 telegram.org를 참고해 주세요.</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
-    <string name="NumberUnknown">알 수 없음</string>
-    <string name="Info">정보</string>
-    <string name="Phone">전화번호</string>
-    <!--usernames-->
-    <string name="Username">아이디</string>
-    <string name="UsernamePlaceholder">아이디</string>
-    <string name="UsernameInUse">이미 사용 중인 아이디입니다.</string>
-    <string name="UsernameInvalid">올바른 아이디를 입력하세요.</string>
-    <string name="UsernameInvalidShort">아이디는 최소 다섯 글자 이상 입력해야 합니다.</string>
-    <string name="UsernameInvalidLong">아이디는 최대 32자까지만 가능합니다.</string>
-    <string name="UsernameInvalidStartNumber">아이디는 숫자로 시작할 수 없습니다.</string>
-    <string name="UsernameHelp">텔레그램 아이디를 설정할 수 있습니다. 아이디를 설정하면 회원님의 전화번호를 몰라도 아이디로 회원님을 찾아 대화를 나눌 수 있습니다.<![CDATA[<br><br>]]>아이디는 영문, 밑줄, 숫자로 (<![CDATA[<b>]]>a~z<![CDATA[</b>]]>, <![CDATA[<b>]]>_<![CDATA[</b>]]>, <![CDATA[<b>]]>0~9<![CDATA[</b>]]>) <![CDATA[<b>]]>다섯 글자<![CDATA[</b>]]> 이상으로 설정해 주세요.</string>
-    <string name="UsernameChecking">아이디 확인 중...</string>
-    <string name="UsernameAvailable">%1$s: 사용 가능합니다.</string>
-    <string name="UsernameEmpty">없음</string>
-    <string name="ErrorOccurred">오류가 발생했습니다.</string>
-    <!--stickers view-->
-    <string name="Stickers">스티커</string>
-    <string name="StickersInfo">/@stickers 봇을 통하여 누구든지 스스로 제작한 스티커를 등록 할 수 있습니다.\n\n스티커는  더블탭하여 \"스티커 추가\" 를 통하여 추가할 수 있습니다.</string>
-    <string name="AddStickers">스티커 추가</string>
-    <string name="AddToStickers">스티커 추가</string>
-    <string name="AddStickersNotFound">스티커를 찾을 수 없음</string>
-    <string name="StickersRemoved">스티커 제거됨</string>
-    <string name="AddStickersInstalled">새로운 스티커가 추가되었습니다.</string>
-    <string name="StickersHide">숨김</string>
-    <string name="StickersShow">보기</string>
-    <string name="StickersShare">공유</string>
-    <string name="StickersCopy">링크 복사</string>
-    <string name="StickersRemove">삭제</string>
-    <string name="NoStickers">스티커가 아직 없음</string>
-    <string name="TooMuchStickersets">죄송합니다, 스티커 세트수가 최대치입니다.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">모든 알림 설정이 초기화되었습니다</string>
-    <string name="TextSize">채팅 글자 크기</string>
-    <string name="AskAQuestion">질문하기</string>
-    <string name="EnableAnimations">화면 전환 효과 사용</string>
-    <string name="Unblock">차단 해제</string>
-    <string name="UnblockText">차단을 해제하려면 대화상대를 길게 누르세요.</string>
-    <string name="NoBlocked">차단한 친구가 없습니다</string>
-    <string name="MessageNotifications">메시지 알림</string>
-    <string name="Alert">알림 사용</string>
-    <string name="MessagePreview">메시지 미리보기</string>
-    <string name="GroupNotifications">그룹 알림</string>
-    <string name="Sound">알림음</string>
-    <string name="InAppNotifications">앱 내 알림</string>
-    <string name="InAppSounds">실행 중일 때 알림음</string>
-    <string name="InAppVibrate">실행 중일 때 진동</string>
-    <string name="Vibrate">진동</string>
-    <string name="InAppPreview">실행 중일 때 미리보기</string>
-    <string name="Reset">초기화</string>
-    <string name="ResetAllNotifications">모든 알림 설정 초기화</string>
-    <string name="UndoAllCustom">연락처와 그룹에 대한 모든 알림 설정을 처음 상태로 되돌립니다.</string>
-    <string name="NotificationsAndSounds">알림 및 소리</string>
-    <string name="BlockedUsers">차단 목록</string>
-    <string name="LogOut">로그아웃</string>
-    <string name="NoSound">알림음 없음</string>
-    <string name="Default">기본값</string>
-    <string name="Support">지원</string>
-    <string name="OnlyIfSilent">음소거일 중에만</string>
-    <string name="ChatBackground">채팅방 배경화면</string>
-    <string name="MessagesSettings">메시지</string>
-    <string name="SendByEnter">엔터키로 메시지 전송</string>
-    <string name="TerminateAllSessions">다른 모든 세션 종료</string>
-    <string name="Events">이벤트</string>
-    <string name="ContactJoined">친구의 텔레그램 가입 알림</string>
-    <string name="Language">언어</string>
-    <string name="AskAQuestionInfo">텔레그램에 관한 질문은 자원봉사자들이 답변해 드립니다. 신속한 답변을 위해 노력하지만 답변이 다소 늦을 수 있습니다.<![CDATA[<br><br>]]>일반적인 문제와 <![CDATA[<a href=\"https://telegram.org/faq/ko#g\">해결방법</a>]]>에 대해서는 \'<![CDATA[<a href=\"https://telegram.org/faq/ko#a\">자주 묻는 질문</a>]]>\'을 확인해 보세요.</string>
-    <string name="AskButton">질문하기</string>
-    <string name="TelegramFaq">자주 묻는 질문</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq/ko</string>
-    <string name="DeleteLocalization">언어를 삭제할까요?</string>
-    <string name="IncorrectLocalization">언어 파일이 올바르지 않습니다.</string>
-    <string name="Enabled">켜기</string>
-    <string name="Disabled">끄기</string>
-    <string name="NotificationsService">알림 서비스</string>
-    <string name="NotificationsServiceDisableInfo">알림 서비스를 비활성화 하면 새로운 메시지의 알림이 다소 늦을 수 있습니다.<![CDATA[\n]]>텔레그램이 백그라운드에서 작동하며 알림을 바로 알릴 수 있도록 활성화 하는것을 권장합니다.</string>
-    <string name="SortBy">정렬</string>
-    <string name="ImportContacts">연락처 가져오기</string>
-    <string name="SortFirstName">이름</string>
-    <string name="SortLastName">성</string>
-    <string name="LedColor">LED 색상</string>
-    <string name="PopupNotification">알림 팝업</string>
-    <string name="NoPopup">사용 안 함</string>
-    <string name="OnlyWhenScreenOn">화면이 켜져 있을 때만</string>
-    <string name="OnlyWhenScreenOff">화면이 꺼져 있을 때만</string>
-    <string name="AlwaysShowPopup">항상 표시</string>
-    <string name="BadgeNumber">앱 아이콘에 알림 개수 표시</string>
-    <string name="Short">짧게</string>
-    <string name="Long">길게</string>
-    <string name="SystemDefault">시스템 기본값</string>
-    <string name="SettingsDefault">설정 기본값</string>
-    <string name="AutomaticMediaDownload">사진/동영상 자동 다운로드</string>
-    <string name="WhenUsingMobileData">모바일 데이터를 사용 중일 때</string>
-    <string name="WhenConnectedOnWiFi">Wi-Fi에 연결 중일 때</string>
-    <string name="WhenRoaming">로밍 중일 때</string>
-    <string name="NoMediaAutoDownload">다운로드 안함</string>
-    <string name="AutoplayGifs">GIF 자동재생</string>
-    <string name="RaiseToSpeak">기기를 들어 말하기</string>
-    <string name="SaveToGallerySettings">앨범에 자동 저장</string>
-    <string name="EditName">이름 편집</string>
-    <string name="NotificationsPriority">우선순위</string>
-    <string name="NotificationsPriorityDefault">기본</string>
-    <string name="NotificationsPriorityLow">낮음</string>
-    <string name="NotificationsPriorityHigh">높음</string>
-    <string name="NotificationsPriorityMax">최우선</string>
-    <string name="RepeatNotificationsNever">사용 안 함</string>
-    <string name="RepeatNotifications">알림 반복</string>
-    <string name="PhoneNumberHelp">텔레그램 가입 번호를 여기서 변경할 수 있습니다. 계정 및 클라우드에 저장된 메시지나 사진/동영상, 대화상대 등이 새 번호로 이동됩니다.\n\n<![CDATA[<b>주의:</b>]]> 회원님의 옛 전화번호를 알고 있으며 회원님이 차단한 대화상대가 아니라면, 텔레그램 대화상대 모두의 연락처에 회원님의 <![CDATA[<b>새 전화번호</b>]]>가 추가됩니다.</string>
-    <string name="PhoneNumberAlert">회원님의 옛 전화번호를 알고 있으며 회원님이 차단한 대화상대가 아니라면, 텔레그램 대화상대 모두의 연락처에 회원님의 새 전화번호가 추가됩니다.</string>
-    <string name="PhoneNumberChange">번호 변경</string>
-    <string name="ChangePhoneNewNumber">새 번호</string>
-    <string name="ChangePhoneHelp">인증코드 메시지를 새 번호로 전송하겠습니다.</string>
-    <string name="ChangePhoneNumberOccupied">그 번호는 이미 텔레그램 계정에 연결되어 있습니다. 새 번호로 이동하기 전에 %1$s 계정에서 탈퇴해 주세요.</string>
-    <string name="NotificationsOther">기타</string>
-    <string name="NotificationsDisabled">비활성화됨</string>
-    <string name="VibrationDisabled">비활성화됨</string>
-    <string name="LedDisabled">비활성화됨</string>
-    <string name="RepeatDisabled">끔</string>
-    <string name="InChatSound">채팅중 소리 설정</string>
-    <string name="SoundDefault">기본값</string>
-    <string name="VibrationDefault">기본값</string>
-    <string name="SmartNotifications">스마트 알림</string>
-    <string name="SmartNotificationsDisabled">비활성화됨</string>
-    <string name="SmartNotificationsInfo">최대 %1$s번, %2$s번 이내 알림</string>
-    <string name="SmartNotificationsSoundAtMost">알림 최대치</string>
-    <string name="SmartNotificationsTimes">번</string>
-    <string name="SmartNotificationsWithin">이내</string>
-    <string name="SmartNotificationsMinutes">분</string>
-    <string name="SecretWebPage">링크 프리뷰</string>
-    <string name="SecretChat">비밀대화</string>
-    <!--cache view-->
-    <string name="CacheSettings">캐시 설정</string>
-    <string name="LocalDatabase">로컬 데이터베이스</string>
-    <string name="LocalDatabaseClear">캐시된 텍스트 메시지를 삭제하시겠습니까?</string>
-    <string name="LocalDatabaseInfo">압축된 데이터베이스 및 캐시에 저장된 메시지를 로컬 데이터베이스에서 삭제하면 내부 저장공간이 증가합니다. 데이터베이스는 Telegram이 작동하는데 어느정도 필요함으로 완전히 삭제가 되지는 않습니다.\n\n이 작업은 완료되기까지 몇분정도 소요가 될 수 있습니다.</string>
-    <string name="ClearMediaCache">캐시 삭제</string>
-    <string name="CacheClear">삭제</string>
-    <string name="CalculatingSize">계산중...</string>
-    <string name="LocalDocumentCache">문서</string>
-    <string name="LocalPhotoCache">사진</string>
-    <string name="LocalAudioCache">음성 메시지</string>
-    <string name="LocalVideoCache">동영상</string>
-    <string name="LocalMusicCache">음악</string>
-    <string name="LocalCache">다른 파일</string>
-    <string name="CacheEmpty">없음</string>
-    <string name="KeepMedia">미디어 저장</string>
-    <string name="KeepMediaInfo">이 기간 동안 클라우드 채팅방에서  <![CDATA[<b>접근하지 않은</b>]]> 사진이나 동영상, 기타 파일 등은 공간 절약을 위해 이 기기에서 삭제됩니다.\n\n모든 파일은 Telegram 클라우드에 여전히 남으며 필요하시면 언제든 다시 다운로드하실 수 있습니다.</string>
-    <string name="KeepMediaForever">영원히</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">활성화된 세션</string>
-    <string name="CurrentSession">현재 세션</string>
-    <string name="NoOtherSessions">활성화된 세션이 없음</string>
-    <string name="NoOtherSessionsInfo">동일한 휴대번호로 다른 휴대기기,태블릿과 데스크탑에서 텔레그램 로그인이 가능합니다. 모든 데이터는 즉시 동기화 됩니다.</string>
-    <string name="OtherSessions">활성화된 세션</string>
-    <string name="SessionsInfo">다른 기기 세션 관리</string>
-    <string name="TerminateSessionInfo">탭하여 세션 종료</string>
-    <string name="TerminateSessionQuestion">해당 세션을 종료하시겠습니까?</string>
-    <string name="UnofficialApp">비공식앱</string>
-    <!--passcode view-->
-    <string name="Passcode">잠금코드 잠금</string>
-    <string name="ChangePasscode">잠금번호 변경</string>
-    <string name="ChangePasscodeInfo">잠금코드를 설정하셨을 경우, 대화방에 잠금 아이콘이 표시됩니다. 해당 아이콘을 클릭하여 텔레그램 잠금 설정을 할 수 있습니다.\n\n주의: 잠금코드를 잊어버렸을 경우 앱 삭제후 재설치를 해주셔야합니다. 이 경우 비밀대화 내용은 삭제가 됩니다.</string>
-    <string name="ChangePasscodeAlert">대화방에 잠금아이콘이 표시가 됩니다. 해당 아이콘을 클릭하여 새로운 잠금코드를 설정하여 텔레그램을 잠글수 있습니다.</string>
-    <string name="PasscodePIN">핀코드</string>
-    <string name="PasscodePassword">잠금번호</string>
-    <string name="EnterCurrentPasscode">현재 잠금코드 입력</string>
-    <string name="EnterNewFirstPasscode">잠금코드 입력</string>
-    <string name="EnterNewPasscode">새로운 잠금코드 입력</string>
-    <string name="EnterYourPasscode">잠금코드를 입력해주세요</string>
-    <string name="ReEnterYourPasscode">잠금코드 재입력</string>
-    <string name="InvalidPasscode">올바르지 않은 잠금코드</string>
-    <string name="PasscodeDoNotMatch">잠금코드가 정확하지 않습니다</string>
-    <string name="AutoLock">자동 잠금</string>
-    <string name="AutoLockInfo">일정 시간 후에 잠금코드 활성화</string>
-    <string name="AutoLockInTime">%1$s 후에</string>
-    <string name="AutoLockDisabled">비활성화됨</string>
-    <string name="UnlockFingerprint">지문으로 언락하기</string>
-    <string name="FingerprintInfo">지문인식 후 진행해주세요</string>
-    <string name="FingerprintHelp">터치 센서</string>
-    <string name="FingerprintNotRecognized">지문인식이 실패하였습니다. 다시 시도해주세요.</string>
-    <!--media view-->
-    <string name="NoMedia">이 채팅방에서 사진이나 동영상을 공유하면 다른 기기에서도 보실 수 있습니다.</string>
-    <string name="DocumentsTitle">공유한 파일</string>
-    <string name="SharedMediaTitle">공유된 미디어</string>
-    <string name="LinksTitle">공유한 링크</string>
-    <string name="AudioTitle">공유된 음악</string>
-    <string name="NoSharedAudio">이 채팅방에서 음악을 공유하면 다른 기기에서도 보실 수 있습니다.</string>
-    <string name="NoSharedFiles">이 채팅방에서 파일이나 문서를 공유하면 다른 기기에서도 보실 수 있습니다.</string>
-    <string name="NoSharedLinks">이 채팅방에서 파일이나 문서를 공유하면 다른 기기에서도 보실 수 있습니다.</string>
-    <!--map view-->
-    <string name="Map">지도</string>
-    <string name="Satellite">위성</string>
-    <string name="Hybrid">혼합</string>
-    <string name="MetersAway">m 떨어짐</string>
-    <string name="KMetersAway">km 떨어짐</string>
-    <string name="SendLocation">현재 위치 전송</string>
-    <string name="SendSelectedLocation">선택한 위치 전송</string>
-    <string name="ShareLocation">위치</string>
-    <string name="AccurateTo">%1$s 반경 내 정확함</string>
-    <string name="NearbyPlaces">혹은 위치를 선택</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">모든 미디어 보기</string>
-    <string name="SaveToGallery">앨범에 저장</string>
-    <string name="Of">%1$d / %2$d</string>
-    <string name="Gallery">앨범</string>
-    <string name="AllPhotos">모든 사진</string>
-    <string name="AllVideo">모든 동영상</string>
-    <string name="NoPhotos">사진이 없습니다.</string>
-    <string name="NoVideo">동영상이 아직 없음</string>
-    <string name="PleaseDownload">사진/동영상을 먼저 다운로드하세요</string>
-    <string name="NoRecentPhotos">최근 사진 없음</string>
-    <string name="NoRecentGIFs">최근에 검색한 GIF</string>
-    <string name="SearchImages">이미지 검색</string>
-    <string name="SearchImagesInfo">웹 검색</string>
-    <string name="SearchGifs">GIF 검색</string>
-    <string name="SearchImagesTitle">웹 검색</string>
-    <string name="SearchGifsTitle">GIF 검색</string>
-    <string name="CropImage">사진 자르기</string>
-    <string name="EditImage">이미지 편집</string>
-    <string name="Enhance">향상</string>
-    <string name="Highlights">하이라이트</string>
-    <string name="Contrast">대비</string>
-    <string name="Exposure">노출</string>
-    <string name="Warmth">온기</string>
-    <string name="Saturation">채도</string>
-    <string name="Vignette">비네팅</string>
-    <string name="Shadows">그림자</string>
-    <string name="Grain">그레인</string>
-    <string name="Sharpen">선명</string>
-    <string name="Fade">흐리기</string>
-    <string name="Tint">색조</string>
-    <string name="TintShadows">새도우</string>
-    <string name="TintHighlights">하이라이트</string>
-    <string name="Curves">커브</string>
-    <string name="CurvesAll">모두</string>
-    <string name="CurvesRed">빨강</string>
-    <string name="CurvesGreen">초록</string>
-    <string name="CurvesBlue">파랑</string>
-    <string name="Blur">흐림</string>
-    <string name="BlurOff">끔</string>
-    <string name="BlurLinear">선형</string>
-    <string name="BlurRadial">방사형</string>
-    <string name="AreYouSureDeletePhoto">이 사진을 삭제하시겠습니까?</string>
-    <string name="AreYouSureDeleteVideo">이 동영상을 삭제하시겠습니까?</string>
-    <string name="DiscardChanges">변경을 취소하시겠습니까?</string>
-    <string name="ClearSearch">검색기록을 지우시겠습니까?</string>
-    <string name="ClearButton">지우기</string>
-    <string name="PickerPhotos">사진</string>
-    <string name="PickerVideo">동영상</string>
-    <string name="AddCaption">설명 추가...</string>
-    <string name="PhotoCaption">사진 설명</string>
-    <string name="VideoCaption">동영상 설명</string>
-    <string name="Caption">설명</string>
-    <!--password view-->
-    <string name="TwoStepVerification">2단계 인증</string>
-    <string name="SetAdditionalPassword">개별 비밀번호 설정</string>
-    <string name="SetAdditionalPasswordInfo">새로운 기기에 로그인시 수신되는 SMS와는 별도로 개별 비밀번호를 설정 할 수 있습니다.</string>
-    <string name="YourPassword">비밀번호</string>
-    <string name="PleaseEnterCurrentPassword">비밀번호를 입력해주세요</string>
-    <string name="PleaseEnterFirstPassword">비밀번호 입력</string>
-    <string name="PleaseEnterPassword">새로운 비밀번호 입력</string>
-    <string name="PleaseReEnterPassword">비밀번호 재입력</string>
-    <string name="RecoveryEmail">복구 이메일</string>
-    <string name="YourEmail">이메일</string>
-    <string name="YourEmailInfo">올바른 이메일을 입력해주세요. 비밀번호 분실시 유일하게 복구가 가능한 수단입니다.</string>
-    <string name="YourEmailSkip">건너뛰기</string>
-    <string name="YourEmailSkipWarning">경고</string>
-    <string name="YourEmailSkipWarningText">비밀번호 분실시\n\n텔레그램에 대한 모든 접속 권한을 상실하시게 됩니다.\n비밀번호 분실시 복구는 불가능 합니다.</string>
-    <string name="YourEmailAlmostThere">거의 마무리 되었습니다!</string>
-    <string name="YourEmailAlmostThereText">2단계 인증을 완료하시려면 이메일(스팸 폴더도 확인)을 확인해주세요.</string>
-    <string name="YourPasswordSuccess">성공!</string>
-    <string name="YourPasswordSuccessText">2단계 인증 비밀번호가 활성화 되었습니다.</string>
-    <string name="ChangePassword">비밀번호 변경</string>
-    <string name="TurnPasswordOff">비밀번호 끄기</string>
-    <string name="SetRecoveryEmail">복구 이메일 설정</string>
-    <string name="ChangeRecoveryEmail">복구 이메일 변경</string>
-    <string name="TurnPasswordOffQuestion">비밀번호를 정말로 삭제하시겠습니까?</string>
-    <string name="PasswordHint">비밀번호 힌트</string>
-    <string name="PasswordHintText">비밀번호 힌트를 생성해주세요</string>
-    <string name="PasswordDoNotMatch">비밀번호가 정확하지 않습니다.</string>
-    <string name="AbortPassword">2단계 인증 설정 끝내기</string>
-    <string name="EmailPasswordConfirmText">2단계 인증 설정을 완료하시려면 아래의 절차대로 진행해주세요:\n\n1.이메일 확인(스팸 폴더 확인)\n%1$s\n\n2.인증 링크 클릭</string>
-    <string name="PasswordAsHintError">힌트는 비밀번호와 다르게 설정해주세요.</string>
-    <string name="PasswordEmailInvalid">올바르지 않은 이메일</string>
-    <string name="RestorePasswordNoEmailTitle">죄송합니다.</string>
-    <string name="RestorePasswordNoEmailText">비밀번호 복구 이메일을 설정하지 않았기때문에, 비밀번호를 기억해내시거나 계정 초기화를 진행해주셔야합니다.</string>
-    <string name="RestoreEmailSent">다음 복구 이메일 주소로 복구 코드를 전송하였습니다:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">이메일을 확인하여 수신받은 6자리 코드를 입력해주세요.</string>
-    <string name="RestoreEmailTrouble">이메일 %1$s 접근에 문제가 있으신가요?</string>
-    <string name="RestoreEmailTroubleText">이메일 접근을 하실 수 없을 경우, 비밀번호를 기억해내시거나 계정 초기화를 진행해주셔야 합니다.</string>
-    <string name="ResetMyAccount">계정 초기화</string>
-    <string name="ResetMyAccountText">계정 초기화 진행시 모든 대화,메시지 및 공유받은 미디어와 파일이 삭제가 됩니다.</string>
-    <string name="ResetMyAccountWarning">경고</string>
-    <string name="ResetMyAccountWarningText">진행하실 경우 취소가 불가능합니다.\n\n계정 초기화 진행시 모든 대화 및 메시지가 삭제됩니다.</string>
-    <string name="ResetMyAccountWarningReset">초기화</string>
-    <string name="LoginPassword">비밀번호</string>
-    <string name="LoginPasswordText">2단계 인증이 활성화되어 회원님 계정이 개별 비밀번호로 보안됩니다.</string>
-    <string name="ForgotPassword">비밀번호를 잊어버리셨나요?</string>
-    <string name="PasswordRecovery">비밀번호 복구</string>
-    <string name="PasswordCode">코드</string>
-    <string name="PasswordReset">비밀번호 비활성화</string>
-    <string name="EnabledPasswordText">2단계 인증을 활성화 하였습니다.\n설정된 개별 비밀번호를 사용하여 텔레그램 계정에 로그인 할 수 있습니다.</string>
-    <string name="PendingEmailText">복구 이메일 %1$s 이 아직 활성화 되지 않았으며 미승인 상태입니다.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">개인정보 및 보안</string>
-    <string name="PrivacyTitle">개인정보</string>
-    <string name="PrivacyLastSeen">마지막 접속</string>
-    <string name="LastSeenEverybody">전체 공개</string>
-    <string name="LastSeenContacts">내 대화상대</string>
-    <string name="LastSeenNobody">비공개</string>
-    <string name="LastSeenEverybodyMinus">전체 공개 (-%1$d)</string>
-    <string name="LastSeenContactsPlus">내 대화상대 (+%1$d)</string>
-    <string name="LastSeenContactsMinus">내 대화상대 (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">내 대화상대 (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">비공개 (+%1$d)</string>
-    <string name="SecurityTitle">보안</string>
-    <string name="DeleteAccountTitle">회원 탈퇴</string>
-    <string name="DeleteAccountIfAwayFor">자동 회원 탈퇴</string>
-    <string name="DeleteAccountHelp">이 기간 동안 최소 한 번 이상 로그인을 하지 않으면 자동으로 모든 메시지와 대화상대를 삭제하고 텔레그램을 탈퇴합니다.</string>
-    <string name="DeleteAccountNowConfirmation">텔레그램을 탈퇴할까요?</string>
-    <string name="LastSeenHelp">누가 마지막 접속 시간을 볼 수 있는지 변경</string>
-    <string name="LastSeenTitle">마지막 접속 시간을 누구에게 공개할까요?</string>
-    <string name="AddExceptions">예외 추가</string>
-    <string name="CustomHelp">주의: 회원님의 마지막 접속 시간을 공유받지 않는 사람의 마지막 접속 시간은 확인할 수 없습니다. 대신 일주일 이내, 한달 이내 등으로 간략하게 표시됩니다.</string>
-    <string name="AlwaysShareWith">항상 공유할 대화상대</string>
-    <string name="NeverShareWith">절대 공유하지 않을 대화 상대</string>
-    <string name="CustomShareSettingsHelp">이 설정은 위의 내용을 무시하고 작동합니다.</string>
-    <string name="AlwaysShareWithTitle">항상 공유</string>
-    <string name="AlwaysShareWithPlaceholder">항상 공유할 대화상대...</string>
-    <string name="NeverShareWithTitle">절대 공유하지 않음</string>
-    <string name="NeverShareWithPlaceholder">절대 공유하지 않을 대화상대...</string>
-    <string name="EmpryUsersPlaceholder">대화상대 추가</string>
-    <string name="PrivacyFloodControlError">죄송합니다. 너무 많이 변경하셨습니다. 개인정보 설정을 변경할 수 없으니 잠시 기다려 주세요.</string>
-    <string name="ClearOtherSessionsHelp">이 기기를 제외한 다른 기기에서 로그아웃합니다.</string>
-    <string name="RemoveFromListText">사용자를 탭하고 눌러서 삭제하세요.</string>
-    <string name="GroupsAndChannels">그룹</string>
-    <string name="WhoCanAddMe">나를 그룹에 초대가능한 사용자</string>
-    <string name="WhoCanAddMeInfo">회원님을 그룹 및 채널에 초대할 수 있는 상대방을 세세하게 설정 가능합니다.</string>
-    <string name="AlwaysAllow">항상 허용</string>
-    <string name="NeverAllow">항상 거부</string>
-    <string name="AlwaysAllowPlaceholder">항상 허용..</string>
-    <string name="NeverAllowPlaceholder">항상 거부..</string>
-    <string name="CustomShareInfo">위의 설정과 무관하게 해당 사용자는 회원님을 그룹 및 채널에 초대 할 수 없습니다.</string>
-    <string name="GroupsAndChannelsHelp">그룹 및 채널에 초대가능한 사용자 변경</string>
-    <string name="InviteToGroupError">죄송합니다,  이 이용자는 개인 설정으로 인하여 그룹에 초대 할 수 없습니다.</string>
-    <string name="InviteToChannelError">죄송합니다,  이 이용자는 개인 설정으로 인하여 채널에 초대 할 수 없습니다.</string>
-    <string name="CreateGroupError">죄송합니다,  이 이용자들의 개인 설정으로 인하여 그룹을 생성 할 수 없습니다.</string>
-    <!--edit video view-->
-    <string name="EditVideo">동영상 편집</string>
-    <string name="OriginalVideo">동영상 원본</string>
-    <string name="EditedVideo">편집한 동영상</string>
-    <string name="SendingVideo">동영상 보내는 중...</string>
-    <string name="CompressVideo">동영상 크기 줄이기</string>
-    <!--bot-->
-    <string name="Bot">봇</string>
-    <string name="BotShare">공유</string>
-    <string name="BotInvite">그룹에 추가</string>
-    <string name="BotSettings">설정</string>
-    <string name="BotHelp">도움말</string>
-    <string name="BotStatusRead">메시지 접근 권한이 있습니다.</string>
-    <string name="BotStatusCantRead">메시지 접근 권한이 없습니다</string>
-    <string name="BotInfoTitle">이 봇은 무엇을 할 수 있나요?</string>
-    <string name="BotStart">시작</string>
-    <string name="BotUnblock">재시작</string>
-    <string name="BotStop">봇 정지</string>
-    <string name="BotRestart">봇 재시작</string>
-    <!--button titles-->
-    <string name="Next">다음</string>
-    <string name="Back">뒤로</string>
-    <string name="Done">완료</string>
-    <string name="Open">열기</string>
-    <string name="Save">저장</string>
-    <string name="Cancel">취소</string>
-    <string name="Close">닫기</string>
-    <string name="Add">추가</string>
-    <string name="Edit">편집</string>
-    <string name="Send">보내기</string>
-    <string name="Call">전화 걸기</string>
-    <string name="Copy">복사</string>
-    <string name="Delete">삭제</string>
-    <string name="DeleteAndStop">삭제 및 정지</string>
-    <string name="Forward">전달</string>
-    <string name="Retry">재전송</string>
-    <string name="FromCamera">사진 촬영</string>
-    <string name="FromGalley">앨범</string>
-    <string name="DeletePhoto">사진 삭제</string>
-    <string name="Set">설정</string>
-    <string name="OK">확인</string>
-    <string name="Crop">자르기</string>
-    <!--messages-->
-    <string name="ActionInviteYou">초대링크를 타고 그룹에 참여하였습니다.</string>
-    <string name="ActionInviteUser">초대링크를 타고 그룹에 un1님이 참여하였습니다.</string>
-    <string name="ActionKickUser">un1님이 un2님을 퇴장시켰습니다.</string>
-    <string name="ActionLeftUser">un1님이 그룹에서 나갔습니다.</string>
-    <string name="ActionAddUser">un1님이 un2님을 초대했습니다</string>
-    <string name="ActionRemovedPhoto">un1님이 그룹 사진을 삭제했습니다</string>
-    <string name="ActionChangedPhoto">un1님이 그룹 사진을 변경했습니다</string>
-    <string name="ActionChangedTitle">un1님이 그룹 이름을 un2 그룹으로 변경했습니다</string>
-    <string name="ActionCreateGroup">un1님이 그룹을 만들었습니다</string>
-    <string name="ActionYouKickUser">un2님을 퇴장시켰습니다.</string>
-    <string name="ActionYouLeftUser">그룹에서 나갔습니다.</string>
-    <string name="ActionYouAddUser">un2님을 초대했습니다</string>
-    <string name="ActionYouRemovedPhoto">그룹 사진을 삭제했습니다</string>
-    <string name="ActionYouChangedPhoto">그룹 사진을 변경했습니다</string>
-    <string name="ActionYouChangedTitle">그룹 이름을 un2 그룹으로 변경했습니다</string>
-    <string name="ActionYouCreateGroup">그룹을 만들었습니다</string>
-    <string name="ActionKickUserYou">un1님이 퇴장당했습니다.</string>
-    <string name="ActionAddUserYou">un1님이 그룹에 초대했습니다</string>
-    <string name="ActionAddUserSelf">un1 님께서 그룹에 돌아오셨습니다</string>
-    <string name="ActionAddUserSelfYou">그룹에 돌아오셨습니다.</string>
-    <string name="UnsupportedMedia">이 메시지는 현재 사용 중인 버전의 Telegram에서 지원되지 않습니다. 메시지를 보려면 http://telegram.org/update에서 앱을 업데이트하세요.</string>
-    <string name="AttachPhoto">사진</string>
-    <string name="AttachVideo">동영상</string>
-    <string name="AttachGif">GIF파일</string>
-    <string name="AttachLocation">위치</string>
-    <string name="AttachContact">연락처</string>
-    <string name="AttachDocument">파일</string>
-    <string name="AttachSticker">스티커</string>
-    <string name="AttachAudio">음성 메시지</string>
-    <string name="FromYou">나</string>
-    <string name="ActionTakeScreenshootYou">화면을 캡처했습니다!</string>
-    <string name="ActionTakeScreenshoot">un1님이 화면을 캡처했습니다!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">올바른 전화번호를 입력해 주세요</string>
-    <string name="CodeExpired">코드가 만료되었습니다. 다시 로그인하세요</string>
-    <string name="FloodWait">너무 많이 시도하셨습니다. 나중에 다시 시도하세요</string>
-    <string name="FloodWaitTime">너무 많이 시도하셨습니다. %1$s 초 후에 다시 시도하세요.</string>
-    <string name="InvalidCode">올바른 코드를 입력해 주세요</string>
-    <string name="InvalidFirstName">올바른 이름을 입력해 주세요</string>
-    <string name="InvalidLastName">올바른 성을 입력해 주세요</string>
-    <string name="Loading">불러오는 중...</string>
-    <string name="NoPlayerInstalled">동영상 재생 앱이 없습니다. 계속하려면 앱을 설치해 주세요.</string>
-    <string name="NoMailInstalled">발생한 문제에 대하여 sms@stel.com 주소로 이메일을 보내주세요.</string>
-    <string name="NoHandleAppInstalled">\'%1$s\' 파일 형식을 처리할 앱이 없습니다. 계속하려면 앱을 설치해 주세요.</string>
-    <string name="InviteUser">친구가 아직 텔레그램을 사용하지 않네요. 초대해 보세요!</string>
-    <string name="AreYouSure">확실합니까?</string>
-    <string name="AddToTheGroupTitle">%2$s 채팅방에 %1$s님을 추가할까요?</string>
-    <string name="AddToTheGroupForwardCount">전달할 마지막 대화내용 개수:</string>
-    <string name="AddToTheGroup">%1$s 님을 그룹에 추가할까요?</string>
-    <string name="UserAlreadyInGroup">이 사용자는 이미 그룹에 추가되었습니다.</string>
-    <string name="ForwardMessagesTo">%1$s님에게 메시지를 전달할까요?</string>
-    <string name="SendMessagesTo">%1$s님에게 메시지를 보낼까요?</string>
-    <string name="SendContactTo">%1$s에게 연락처를 보내시겠습니까?</string>
-    <string name="AreYouSureLogout">정말로 로그아웃하시겠습니까?\n\n텔레그램은 여러 기기에서 동시에 사용이 가능합니다.\n\n로그아웃하시면 비밀대화가 삭제되는 점 유의해주세요.</string>
-    <string name="AreYouSureSessions">현재 기기를 제외하고 다른 기기에 로그인된 세션을 모두 종료시킬까요?</string>
-    <string name="AreYouSureDeleteAndExit">그룹에서 나갈까요?</string>
-    <string name="AreYouSureDeleteThisChat">채팅방을 삭제할까요?</string>
-    <string name="AreYouSureShareMyContactInfo">연락처를 공유할까요?</string>
-    <string name="AreYouSureBlockContact">대화상대를 차단할까요?</string>
-    <string name="AreYouSureUnblockContact">차단을 해제할까요?</string>
-    <string name="AreYouSureDeleteContact">대화상대를 삭제할까요?</string>
-    <string name="AreYouSureSecretChat">비밀대화를 시작할까요?</string>
-    <string name="AreYouSureRegistration">정말로 가입을 취소하시겠습니까?</string>
-    <string name="AreYouSureClearHistory">정말로 대화내용을 지우시겠습니까?</string>
-    <string name="AreYouSureClearHistoryChannel">채널에서 캐시된 모든 텍스트 및 미디어를 삭제하시겠습니까?</string>
-    <string name="AreYouSureClearHistorySuper">슈커그룹에서 캐시된 모든 텍스트 및 미디어를 삭제하시겠습니까?</string>
-    <string name="AreYouSureDeleteMessages">%1$s: 정말로 삭제하시겠습니까?</string>
-    <string name="SendMessagesToGroup">%1$s 그룹에 메시지를 보낼까요?</string>
-    <string name="SendContactToGroup">%1$s에게 연락처를 보내시겠습니까?</string>
-    <string name="ForwardMessagesToGroup">%1$s 그룹에 메시지를 전달할까요?</string>
-    <string name="FeatureUnavailable">이 기능은 회원님의 국가에서는 사용할 수 없습니다.</string>
-    <string name="NoUsernameFound">입력된 아이디와 일치하는 텔레그램 계정이 없습니다.</string>
-    <string name="BotCantJoinGroups">이 봇은 그룹에 참여 할 수 없습니다.</string>
-    <string name="SecretLinkPreviewAlert">비밀대화에서 링크 미리보기를 활성화하시겠습니까? 링크 프리뷰는 텔레그램 서버에서 생성이 됩니다.</string>
-    <string name="SecretChatContextBotAlert">인라인 봇은 제3자 개발자로 부터 제공이 됩니다. 봇이 작동을 하려면 봇의 아이디 및 뒤의 메시지가 담당 개발자에게 전송이 됩니다.</string>
-    <string name="RaiseToSpeakAlert">\"기기를 들어 말하기\"기능을 음성 메시지에 활성화 하시겠습니까?</string>
-    <string name="EditMessageError">죄송합니다, 메시지 수정을 할 수 없습니다.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram은 여러 기기에서 친구와 메시지를 주고받을 수 있도록 회원님의 연락처 접근이 필요합니다.</string>
-    <string name="PermissionStorage">Telegram은 사진, 비디오, 음악 및 다양한 미디어를 공유 및 저장하기 위하여 스토리지 접근이 필요합니다.</string>
-    <string name="PermissionNoAudio">Telegram이 음성 메시지를 보내기 위하여 마이크에 대한 접근이 필요합니다.</string>
-    <string name="PermissionNoLocation">Telegram이 위치를 친구분들과 공유하기 위해 위치에 대한 접근 권한을 필요로 합니다.</string>
-    <string name="PermissionOpenSettings">설정</string>
-    <!--Intro view-->
-    <string name="Page1Title">텔레그램</string>
-    <string name="Page2Title">눈부신 속도</string>
-    <string name="Page3Title">완전 무료</string>
-    <string name="Page4Title">보안성</string>
-    <string name="Page5Title">강력함</string>
-    <string name="Page6Title">클라우드 기반</string>
-    <string name="Page7Title">사생활 보호</string>
-    <string name="Page1Message">세상에서 가장 <![CDATA[<b>빠르고 안전한</b><br/><b>무료</b>]]> 메신저입니다.</string>
-    <string name="Page2Message"><![CDATA[<b>텔레그램</b>]]>은 어떤 메신저보다도<![CDATA[<br/>]]>빠르게 메시지를 전송합니다.</string>
-    <string name="Page3Message"><![CDATA[<b>텔레그램</b>]]>은 영원히 무료입니다.<![CDATA[<br/>]]>광고도 없고 이용료도 없습니다.</string>
-    <string name="Page4Message"><![CDATA[<b>텔레그램</b>]]>은 그 어떤 누구로부터도<![CDATA[<br/>]]>메시지를 안전하게 보호합니다.</string>
-    <string name="Page5Message"><![CDATA[<b>텔레그램</b>]]>은 대화나 미디어의<![CDATA[<br/>]]>용량에 제한이 없습니다.</string>
-    <string name="Page6Message"><![CDATA[<b>텔레그램</b>]]>은 다른 기기에서도<![CDATA[<br/>]]>동시에 사용할 수 있습니다.</string>
-    <string name="Page7Message"><![CDATA[<b>텔레그램</b>]]>은 메시지를 강력하게 암호화하며<![CDATA[<br/>]]>자동으로 삭제되게 할 수 있습니다.</string>
-    <string name="StartMessaging">시작하기</string>
-    <!--plural-->
-    <string name="Online_zero">온라인 %1$d명</string>
-    <string name="Online_one">온라인 %1$d명</string>
-    <string name="Online_two">온라인 %1$d명</string>
-    <string name="Online_few">온라인 %1$d명</string>
-    <string name="Online_many">온라인 %1$d명</string>
-    <string name="Online_other">온라인 %1$d명</string>
-    <string name="Members_zero">대화상대 %1$d명</string>
-    <string name="Members_one">대화상대 %1$d명</string>
-    <string name="Members_two">대화상대 %1$d명</string>
-    <string name="Members_few">대화상대 %1$d명</string>
-    <string name="Members_many">대화상대 %1$d명</string>
-    <string name="Members_other">대화상대 %1$d명</string>
-    <string name="AndMoreTyping_zero">외 %1$d명이 입력 중</string>
-    <string name="AndMoreTyping_one">외 %1$d명이 입력 중</string>
-    <string name="AndMoreTyping_two">외 %1$d명이 입력 중</string>
-    <string name="AndMoreTyping_few">외 %1$d명이 입력 중</string>
-    <string name="AndMoreTyping_many">외 %1$d명이 입력 중</string>
-    <string name="AndMoreTyping_other">외 %1$d명이 입력 중</string>
-    <string name="NewMessages_zero">새 메시지 없음</string>
-    <string name="NewMessages_one">새 메시지 %1$d건</string>
-    <string name="NewMessages_two">새 메시지 %1$d건</string>
-    <string name="NewMessages_few">새 메시지 %1$d건</string>
-    <string name="NewMessages_many">새 메시지 %1$d건</string>
-    <string name="NewMessages_other">새 메시지 %1$d건</string>
-    <string name="messages_zero">메시지 없음</string>
-    <string name="messages_one">메시지 %1$d건</string>
-    <string name="messages_two">메시지 %1$d건</string>
-    <string name="messages_few">메시지 %1$d건</string>
-    <string name="messages_many">메시지 %1$d건</string>
-    <string name="messages_other">메시지 %1$d건</string>
-    <string name="comments_zero">%1$d 코멘트</string>
-    <string name="comments_one">%1$d 코멘트</string>
-    <string name="comments_two">%1$d 코멘트</string>
-    <string name="comments_few">%1$d 코멘트</string>
-    <string name="comments_many">%1$d 코멘트</string>
-    <string name="comments_other">%1$d 코멘트</string>
-    <string name="items_zero">아이템이 없습니다.</string>
-    <string name="items_one">%1$d개 아이템</string>
-    <string name="items_two">%1$d개 아이템</string>
-    <string name="items_few">%1$d개 아이템</string>
-    <string name="items_many">%1$d개 아이템</string>
-    <string name="items_other">%1$d개 아이템</string>
-    <string name="FromChats_zero">받은 대화 없음</string>
-    <string name="FromChats_one">%1$d개의 대화로부터 받음</string>
-    <string name="FromChats_two">%1$d개의 대화로부터 받음</string>
-    <string name="FromChats_few">%1$d개의 대화로부터 받음</string>
-    <string name="FromChats_many">%1$d개의 대화로부터 받음</string>
-    <string name="FromChats_other">%1$d개의 대화로부터 받음</string>
-    <string name="Seconds_zero">%1$d초</string>
-    <string name="Seconds_one">%1$d초</string>
-    <string name="Seconds_two">%1$d초</string>
-    <string name="Seconds_few">%1$d초</string>
-    <string name="Seconds_many">%1$d초</string>
-    <string name="Seconds_other">%1$d초</string>
-    <string name="Minutes_zero">%1$d분</string>
-    <string name="Minutes_one">%1$d분</string>
-    <string name="Minutes_two">%1$d분</string>
-    <string name="Minutes_few">%1$d분</string>
-    <string name="Minutes_many">%1$d분</string>
-    <string name="Minutes_other">%1$d분</string>
-    <string name="Hours_zero">%1$d시간</string>
-    <string name="Hours_one">%1$d시간</string>
-    <string name="Hours_two">%1$d시간</string>
-    <string name="Hours_few">%1$d시간</string>
-    <string name="Hours_many">%1$d시간</string>
-    <string name="Hours_other">%1$d시간</string>
-    <string name="Days_zero">%1$d일</string>
-    <string name="Days_one">%1$d일</string>
-    <string name="Days_two">%1$d일</string>
-    <string name="Days_few">%1$d일</string>
-    <string name="Days_many">%1$d일</string>
-    <string name="Days_other">%1$d일</string>
-    <string name="Weeks_zero">%1$d주</string>
-    <string name="Weeks_one">%1$d주</string>
-    <string name="Weeks_two">%1$d주</string>
-    <string name="Weeks_few">%1$d주</string>
-    <string name="Weeks_many">%1$d주</string>
-    <string name="Weeks_other">%1$d주</string>
-    <string name="Months_zero">%1$d개월</string>
-    <string name="Months_one">%1$d개월</string>
-    <string name="Months_two">%1$d개월</string>
-    <string name="Months_few">%1$d개월</string>
-    <string name="Months_many">%1$d개월</string>
-    <string name="Months_other">%1$d개월</string>
-    <string name="Years_zero">%1$d년</string>
-    <string name="Years_one">%1$d년</string>
-    <string name="Years_two">%1$d년</string>
-    <string name="Years_few">%1$d년</string>
-    <string name="Years_many">%1$d년</string>
-    <string name="Years_other">%1$d년</string>
-    <string name="Users_zero">%1$d명의 대화상대</string>
-    <string name="Users_one">%1$d명의 대화상대</string>
-    <string name="Users_two">%1$d명의 대화상대</string>
-    <string name="Users_few">%1$d명의 대화상대</string>
-    <string name="Users_many">%1$d명의 대화상대</string>
-    <string name="Users_other">%1$d명의 대화상대</string>
-    <string name="Times_zero">%1$d 번</string>
-    <string name="Times_one">%1$d 번</string>
-    <string name="Times_two">%1$d 번</string>
-    <string name="Times_few">%1$d 번</string>
-    <string name="Times_many">%1$d 번</string>
-    <string name="Times_other">%1$d 번</string>
-    <string name="Meters_zero">%1$d 미터</string>
-    <string name="Meters_one">%1$d 미터</string>
-    <string name="Meters_two">%1$d 미터</string>
-    <string name="Meters_few">%1$d 미터</string>
-    <string name="Meters_many">%1$d 미터</string>
-    <string name="Meters_other">%1$d 미터</string>
-    <string name="Stickers_zero">스티커 %1$d개</string>
-    <string name="Stickers_one">스티커 %1$d개</string>
-    <string name="Stickers_two">스티커 %1$d개</string>
-    <string name="Stickers_few">스티커 %1$d개</string>
-    <string name="Stickers_many">스티커 %1$d개</string>
-    <string name="Stickers_other">스티커 %1$d개</string>
-    <string name="Photos_zero">%1$d 개의 사진</string>
-    <string name="Photos_one">%1$d 개의 사진</string>
-    <string name="Photos_two">%1$d 개의 사진</string>
-    <string name="Photos_few">%1$d 개의 사진</string>
-    <string name="Photos_many">%1$d 개의 사진</string>
-    <string name="Photos_other">%1$d 개의 사진</string>
-    <string name="LastSeenMinutes_zero">%1$d 분 전에 확인</string>
-    <string name="LastSeenMinutes_one">%1$d 분 전에 확인</string>
-    <string name="LastSeenMinutes_two">%1$d 분 전에 확인</string>
-    <string name="LastSeenMinutes_few">%1$d 분 전에 확인</string>
-    <string name="LastSeenMinutes_many">%1$d 분 전에 확인</string>
-    <string name="LastSeenMinutes_other">%1$d 분 전에 확인</string>
-    <string name="LastSeenHours_zero">%1$d 시간 전에 확인</string>
-    <string name="LastSeenHours_one">%1$d 시간 전에 확인</string>
-    <string name="LastSeenHours_two">%1$d 시간 전에 확인</string>
-    <string name="LastSeenHours_few">%1$d 시간 전에 확인</string>
-    <string name="LastSeenHours_many">%1$d 시간 전에 확인</string>
-    <string name="LastSeenHours_other">%1$d 시간 전에 확인</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedMessage_one">전달된 메시지</string>
-    <string name="ForwardedMessage_two">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedMessage_few">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedMessage_many">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedMessage_other">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedFile_zero">%1$d 개의 전달된 파일</string>
-    <string name="ForwardedFile_one">전달된 파일</string>
-    <string name="ForwardedFile_two">%1$d 개의 전달된 파일</string>
-    <string name="ForwardedFile_few">%1$d 개의 전달된 파일</string>
-    <string name="ForwardedFile_many">%1$d 개의 전달된 파일</string>
-    <string name="ForwardedFile_other">%1$d 개의 전달된 파일</string>
-    <string name="ForwardedPhoto_zero">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedPhoto_one">전달된 사진</string>
-    <string name="ForwardedPhoto_two">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedPhoto_few">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedPhoto_many">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedPhoto_other">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedVideo_zero">%1$d 개의 전달된 사진</string>
-    <string name="ForwardedVideo_one">전달된 비디오</string>
-    <string name="ForwardedVideo_two">%1$d 개의 전달된 비디오</string>
-    <string name="ForwardedVideo_few">%1$d 개의 전달된 비디오</string>
-    <string name="ForwardedVideo_many">%1$d 개의 전달된 비디오</string>
-    <string name="ForwardedVideo_other">%1$d 개의 전달된 비디오</string>
-    <string name="ForwardedMusic_zero">%1$d개의 전달된 트랙</string>
-    <string name="ForwardedMusic_one">전달된 트랙</string>
-    <string name="ForwardedMusic_two">%1$d개의 전달된 트랙</string>
-    <string name="ForwardedMusic_few">%1$d 전달된 트랙%</string>
-    <string name="ForwardedMusic_many">%1$d 전달된 트랙</string>
-    <string name="ForwardedMusic_other">%1$d 전달된 트랙</string>
-    <string name="ForwardedAudio_zero">%1$d 개의 전달된 메시지</string>
-    <string name="ForwardedAudio_one">전달된 음성메시지</string>
-    <string name="ForwardedAudio_two">%1$d 개의 전달된 음성메시지</string>
-    <string name="ForwardedAudio_few">%1$d 개의 전달된 음성메시지</string>
-    <string name="ForwardedAudio_many">%1$d 개의 전달된 음성메시지</string>
-    <string name="ForwardedAudio_other">%1$d 개의 전달된 음성 메시지</string>
-    <string name="ForwardedLocation_zero">%1$d 개의 전달된 위치</string>
-    <string name="ForwardedLocation_one">전달된 위치</string>
-    <string name="ForwardedLocation_two">%1$d 개의 전달된 위치</string>
-    <string name="ForwardedLocation_few">%1$d 개의 전달된 위치</string>
-    <string name="ForwardedLocation_many">%1$d 개의 전달된 위치</string>
-    <string name="ForwardedLocation_other">%1$d 개의 전달된 위치</string>
-    <string name="ForwardedContact_zero">%1$d 개의 전달된 연락처</string>
-    <string name="ForwardedContact_one">전달된 연락처</string>
-    <string name="ForwardedContact_two">%1$d 개의 전달된 연락처</string>
-    <string name="ForwardedContact_few">%1$d 개의 전달된 연락처</string>
-    <string name="ForwardedContact_many">%1$d 개의 전달된 연락처</string>
-    <string name="ForwardedContact_other">%1$d 개의 전달된 연락처</string>
-    <string name="ForwardedSticker_zero">%1$d 개의 전달된 스티커</string>
-    <string name="ForwardedSticker_one">전달된 스티커</string>
-    <string name="ForwardedSticker_two">%1$d 개의 전달된 스티커</string>
-    <string name="ForwardedSticker_few">%1$d 개의 전달된 스티커</string>
-    <string name="ForwardedSticker_many">%1$d 개의 전달된 스티커</string>
-    <string name="ForwardedSticker_other">%1$d 개의 전달된 스티커</string>
-    <string name="AndOther_zero">및 %1$d 개</string>
-    <string name="AndOther_one">및 %1$d 개</string>
-    <string name="AndOther_two">및 %1$d 개</string>
-    <string name="AndOther_few">및 %1$d 개</string>
-    <string name="AndOther_many">및 %1$d 개</string>
-    <string name="AndOther_other">및 %1$d 개</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">M\'월\' d\'일\'</string>
-    <string name="formatterYear">yyyy.MM.dd.</string>
-    <string name="formatterYearMax">yyyy. MM. dd.</string>
-    <string name="chatDate">M\'월\' d\'일\' EEEE</string>
-    <string name="chatFullDate">yyyy\'년\' M\'월\' d\'일\' EEEE</string>
-    <string name="formatterWeek">EEEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">a h:mm</string>
-    <string name="formatDateAtTime">%1$s %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
deleted file mode 100644
index b0b9bd761..000000000
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--https://www.transifex.com/projects/p/telegram/language/nl/members/-->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram-bèta</string>
-    <string name="LanguageName">Nederlands</string>
-    <string name="LanguageNameInEnglish">Dutch</string>
-    <string name="LanguageCode">nl</string>
-    <!--signin view-->
-    <string name="YourPhone">Je telefoon</string>
-    <string name="StartText">Bevestig je landnummer en voer je telefoonnummer in.</string>
-    <string name="ChooseCountry">Kies een land</string>
-    <string name="WrongCountry">Onjuist landnummer</string>
-    <!--code enter view-->
-    <string name="YourCode">Je code</string>
-    <string name="SentSmsCode">We hebben een sms-bericht met een activatiecode verzonden naar je telefoon</string>
-    <string name="CallText">We bellen je over %1$d:%2$02d</string>
-    <string name="Calling">We bellen je</string>
-    <string name="Code">Code</string>
-    <string name="WrongNumber">Verkeerd nummer?</string>
-    <string name="DidNotGetTheCode">Geen code ontvangen?</string>
-    <!--signup view-->
-    <string name="YourName">Je naam</string>
-    <string name="RegisterText">Voer je voor- en achternaam in</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Voornaam (verplicht)</string>
-    <string name="LastName">Achternaam (optioneel)</string>
-    <string name="CancelRegistration">Registratie annuleren</string>
-    <!--chats view-->
-    <string name="Settings">Instellingen</string>
-    <string name="Contacts">Contacten</string>
-    <string name="NewGroup">Nieuwe groep</string>
-    <string name="Yesterday">gisteren</string>
-    <string name="NoResult">Geen resultaten</string>
-    <string name="NoChats">Nog geen chats</string>
-    <string name="NoChatsHelp">Begin een gesprek door op de\nopstelknop rechtsonder te drukken\nof druk op de menuknop voor meer opties.</string>
-    <string name="WaitingForNetwork">Wachten op netwerk</string>
-    <string name="Connecting">Verbinden</string>
-    <string name="Updating">Bijwerken</string>
-    <string name="NewSecretChat">Nieuwe geheime chat</string>
-    <string name="AwaitingEncryption">Wachten tot %s online komt</string>
-    <string name="EncryptionRejected">Geheime chat geannuleerd</string>
-    <string name="EncryptionProcessing">Encryptiesleutels uitwisselen</string>
-    <string name="EncryptedChatStartedOutgoing">%s neemt deel aan je geheime chat.</string>
-    <string name="EncryptedChatStartedIncoming">Toegevoegd aan de geheime chat.</string>
-    <string name="ClearHistory">Geschiedenis wissen</string>
-    <string name="ClearHistoryCache">Cache opschonen</string>
-    <string name="DeleteChat">Verwijder en verlaat</string>
-    <string name="DeleteChatUser">Chat verwijderen</string>
-    <string name="HiddenName">Verwijderd account</string>
-    <string name="SelectChat">Kies een chat</string>
-    <string name="PhotoTip">Druk en houd ingedrukt</string>
-    <string name="CompatibilityChat">%1$s gebruikt een oudere versie van Telegram, dus worden geheime foto\'s weergegeven in de compatibiliteitsmodus.\n\nZodra %2$s Telegram updatet werken foto\'s met timers voor 1 minuut of minder in de \'Druk en houd ingedrukt\'-modus en krijg je een bericht wanneer de andere partij een schermafdruk maakt.</string>
-    <string name="SearchMessages">BERICHTEN</string>
-    <string name="Search">Zoeken</string>
-    <string name="MuteNotifications">Meldingen stil</string>
-    <string name="MuteFor">%1$s stil</string>
-    <string name="UnmuteNotifications">Stil uitschakelen</string>
-    <string name="WillUnmuteIn">Over %1$s</string>
-    <string name="MuteDisable">Uitschakelen</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">RECENT</string>
-    <string name="LinkPreview">Link-voorvertoning</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Promoveren tot beheerder</string>
-    <string name="DescriptionInfoMega">Optioneel kun je een groepsbeschrijving geven.</string>
-    <string name="LeaveMega">Groep verlaten</string>
-    <string name="DeleteMega">Groep verwijderen</string>
-    <string name="LeaveMegaMenu">Groep verlaten</string>
-    <string name="DeleteMegaMenu">Groep verwijderen</string>
-    <string name="MegaDeleteInfo">Je raakt alle berichten in deze groep kwijt.</string>
-    <string name="MegaAdminsInfo">Je kunt beheerders toevoegen om je te helpen je groep te beheren. Druk en houd ingedrukt om beheerders te verwijderen.</string>
-    <string name="MegaDeleteAlert">Groep echt verwijderen? Berichten worden gewist en alle deelnemers verwijderd.</string>
-    <string name="ActionCreateMega">Groep gemaakt</string>
-    <string name="MegaAddedBy">un1 heeft je toegevoegd aan deze groep</string>
-    <string name="MegaLeaveAlert">Groep echt verlaten?</string>
-    <string name="GroupUserCantAdd">Je kunt deze gebruiker niet toevoegen aan groepen.</string>
-    <string name="GroupUserAddLimit">Sorry, deze groep is vol.</string>
-    <string name="GroupUserLeftError">Deze gebruiker heeft de groep verlaten. Je kunt hem/haar niet meer uitnodigen.</string>
-    <string name="GroupUserCantAdmin">Maximaal aantal beheerders bereikt.</string>
-    <string name="GroupUserCantBot">Maximaal aantal bots bereikt.</string>
-    <string name="ActionMigrateFromGroup">De groep is opgewaardeerd naar een supergroep</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s is opgewaardeerd naar een supergroep</string>
-    <string name="NoBlockedGroup">Geblokkeerde gebruikers kunnen alleen worden uitgenodigd door beheerders, uitnodigingslinks werken niet voor hen.</string>
-    <string name="NewChannel">Nieuw kanaal</string>
-    <string name="EnterChannelName">Kanaalnaam</string>
-    <string name="Comments">Reacties</string>
-    <string name="CommentsInfo">Als je reacties inschakelt kunnen deelnemers reageren op je bericht in het kanaal.</string>
-    <string name="AddMutual">Contacten aan je kanaal toevoegen</string>
-    <string name="ChannelUsernameHelp">Deze link kan gedeeld worden met anderen en je kanaal kan worden gevonden via de zoekfunctie.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">link</string>
-    <string name="ChannelPrivateLinkHelp">Deelnemen aan je kanaal kan door deze link te volgen, je kunt de link altijd intrekken.</string>
-    <string name="DescriptionPlaceholder">Beschrijving</string>
-    <string name="DescriptionInfo">Optioneel kun je een kanaalbeschrijving geven.</string>
-    <string name="ChannelPublic">Publiek kanaal</string>
-    <string name="ChannelPublicInfo">Publieke kanalen zijn te vinden via de zoekfunctie, iedereen kan eraan deelnemen.</string>
-    <string name="ChannelPrivate">Privé-kanaal</string>
-    <string name="ChannelPrivateInfo">Deelnemen aan privé-kanalen kan alleen via de uitnodigingslink.</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Uitnodigingslink</string>
-    <string name="ChannelAddMembers">Deelnemers toevoegen</string>
-    <string name="LeaveChannel">Kanaal verlaten</string>
-    <string name="LeaveChannelMenu">Kanaal verlaten</string>
-    <string name="ChannelSettings">Instellingen</string>
-    <string name="ChannelJoin">DEELNEMEN</string>
-    <string name="OpenChannelProfile">Kanaalinformatie</string>
-    <string name="ChannelBroadcast">Massabericht</string>
-    <string name="ChannelComment">Reactie</string>
-    <string name="ShowDiscussion">reacties weergeven</string>
-    <string name="ChannelAlertTitle">Wat is een kanaal?</string>
-    <string name="ChannelAlertText">Kanalen zijn een nieuwe functie om berichten naar een groot publiek te sturen.</string>
-    <string name="ChannelAlertCreate">MAAK KANAAL</string>
-    <string name="LinkInUse">Deze naam is bezet.</string>
-    <string name="LinkInvalid">Deze naam is ongeldig.</string>
-    <string name="LinkInvalidShort">Een kanaalnaam moet minimaal 5 tekens hebben.</string>
-    <string name="LinkInvalidLong">De naam mag niet langer zijn dan 32 tekens.</string>
-    <string name="LinkInvalidStartNumber">Sorry, begincijfers zijn niet toegestaan.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Naam controleren...</string>
-    <string name="LinkAvailable">%1$s is beschikbaar.</string>
-    <string name="ChannelMembers">Deelnemers</string>
-    <string name="ChannelBlockedUsers">Geblokkeerde gebruikers</string>
-    <string name="ChannelAdministrators">Beheerders</string>
-    <string name="ChannelDelete">Kanaal verwijderen</string>
-    <string name="ChannelDeleteMenu">Kanaal verwijderen</string>
-    <string name="ChannelDeleteAlert">Kanaal echt verwijderen? Berichten worden gewist en alle deelnemers verwijderd.</string>
-    <string name="ChannelLeaveAlert">Kanaal echt verlaten?</string>
-    <string name="ChannelDeleteInfo">Je raakt alle berichten in dit kanaal kwijt.</string>
-    <string name="ChannelEdit">Wijzig</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Als je een publieke link voor je kanaal instelt kan iedereen deze vinden en deelnemen via de zoekfunctie.\n\nStel geen link in als je je kanaal privé wilt houden.</string>
-    <string name="ChannelPublicEmptyUsername">Stel een link in voor je publieke kanaal, om deze vindbaar te maken via de zoekfunctie en te delen met anderen.\n\nWil je dit niet dan kun je een privé-kanaal aanmaken.</string>
-    <string name="ActionCreateChannel">Kanaal gemaakt</string>
-    <string name="ActionChannelChangedPhoto">Kanaalfoto bijgewerkt</string>
-    <string name="ActionChannelRemovedPhoto">Kanaalfoto verwijderd</string>
-    <string name="ActionChannelChangedTitle">Kanaalnaam gewijzigd naar un2</string>
-    <string name="ChannelPublicLimitReached">Het maximale aantal publieke kanalen is bereikt. Je kunt een privé-kanaal maken of een kanaal verwijderen om een nieuwe te maken.</string>
-    <string name="ChannelModerator">Moderator</string>
-    <string name="ChannelCreator">Maker</string>
-    <string name="ChannelEditor">Beheerder</string>
-    <string name="ChannelMute">GELUID UIT</string>
-    <string name="ChannelUnmute">GELUID AAN</string>
-    <string name="ChannelAddAdmin">Beheerder toevoegen</string>
-    <string name="ChannelInviteViaLink">Uitnodigen via link</string>
-    <string name="ChannelAddUserAdminAlert">%1$s echt als beheerder toevoegen?</string>
-    <string name="ChannelRemoveUserAdmin">Verwijder</string>
-    <string name="ChannelMembersInfo">Alleen kanaal-beheerders zien deze lijst.</string>
-    <string name="ChannelAdminNotParticipant">Deze gebruiker is nog geen deelnemer, uitnodigen?</string>
-    <string name="ChannelLinkInfo">Andere Telegram-gebruikers kunnen aan je groep deelnemen door deze link te openen.</string>
-    <string name="ChannelAdminsInfo">Je kunt beheerders toevoegen om je te helpen je kanaal te beheren. Druk en houd ingedrukt om beheerders te verwijderen.</string>
-    <string name="ChannelJoinTo">Deelnemen aan kanaal \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Sorry, deze chat is niet beschikbaar.</string>
-    <string name="ChannelAddTo">%1$s toevoegen aan het kanaal?</string>
-    <string name="ChannelUserLeftError">Deze gebruiker heeft het kanaal verlaten. Je kunt hem/haar niet meer uitnodigen.</string>
-    <string name="ChannelUserCantAdd">Je kunt deze gebruiker niet toevoegen aan kanalen.</string>
-    <string name="ChannelUserCantAdmin">Maximaal aantal beheerders bereikt.</string>
-    <string name="ChannelUserCantBot">Maximaal aantal bots bereikt.</string>
-    <string name="ChannelUserAddLimit">Je kunt  200 deelnemers handmatig toevoegen aan een kanaal. Een ongelimiteerd aantal mensen kan deelnemen via de link van het kanaal.</string>
-    <string name="ChannelAddedBy">un1 heeft je toegevoegd aan dit kanaal</string>
-    <string name="ChannelJoined">Je neemt deel aan het kanaal</string>
-    <string name="ChannelRemoveUser">Verwijderen uit kanaal</string>
-    <string name="ChannelCantSendMessage">Je hebt alleen leesrechten in dit kanaal.</string>
-    <string name="ChannelAddedByNotification">%1$s heeft je toegevoegd aan het kanaal %2$s</string>
-    <string name="ChannelPhotoEditNotification">Kanaalfoto van %1$s bijgewerkt</string>
-    <string name="ChannelMessageGroupNoText">%1$s heeft een bericht gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s heeft een foto gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s heeft een video gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s heeft een contact gedeeld met het kanaal %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s heeft een locatie gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s heeft een bestand gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s heeft een GIF gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s heeft een spraakbericht gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s heeft een sticker gestuurd naar het kanaal %2$s</string>
-    <string name="ChannelMessageNoText">%1$s plaatste een bericht</string>
-    <string name="ChannelMessagePhoto">%1$s plaatste een foto</string>
-    <string name="ChannelMessageVideo">%1$s plaatste een video</string>
-    <string name="ChannelMessageContact">%1$s plaatste een contact</string>
-    <string name="ChannelMessageMap">%1$s plaatste een locatie</string>
-    <string name="ChannelMessageDocument">%1$s plaatste een bestand</string>
-    <string name="ChannelMessageGIF">%1$s plaatste een GIF</string>
-    <string name="ChannelMessageAudio">%1$s plaatste een spraakbericht</string>
-    <string name="ChannelMessageSticker">%1$s plaatste een sticker</string>
-    <string name="WhoCanAddMembers">Wie kan deelnemers toevoegen?</string>
-    <string name="WhoCanAddMembersAllMembers">Alle deelnemers</string>
-    <string name="WhoCanAddMembersAdmins">Alleen beheerders</string>
-    <string name="ChannelNotifyMembersInfoOn">Berichtgeving voor deelnemers</string>
-    <string name="ChannelNotifyMembersInfoOff">Geen berichtgeving voor deelnemers</string>
-    <string name="ChannelSignMessages">Ondertekenen</string>
-    <string name="ChannelSignMessagesInfo">Beheerdersnaam bij alle uitgaande berichten.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Nieuwe verzendlijst</string>
-    <string name="EnterListName">Naam van lijst</string>
-    <string name="YouCreatedBroadcastList">Je hebt een verzendlijst gemaakt</string>
-    <string name="AddRecipient">Ontvanger toevoegen</string>
-    <string name="KickFromBroadcast">Verwijder van verzendlijst</string>
-    <!--audio view-->
-    <string name="NoAudio">Voeg bestanden toe aan de muziekbibliotheek op je apparaat om ze hier te zien.</string>
-    <string name="AttachMusic">Muziek</string>
-    <string name="AudioUnknownArtist">Onbekende artiest</string>
-    <string name="AudioUnknownTitle">Onbekende titel</string>
-    <!--documents view-->
-    <string name="SelectFile">Kies een bestand</string>
-    <string name="FreeOfTotal">Vrij: %1$s van %2$s</string>
-    <string name="UnknownError">Onbekende fout</string>
-    <string name="AccessError">Toegangsfout</string>
-    <string name="NoFiles">Nog geen bestanden</string>
-    <string name="FileUploadLimit">Bestanden mogen maximaal %1$s zijn</string>
-    <string name="NotMounted">Geen opslagmedium gevonden</string>
-    <string name="UsbActive">USB-overdracht actief</string>
-    <string name="InternalStorage">Interne opslag</string>
-    <string name="ExternalStorage">Externe opslag</string>
-    <string name="SystemRoot">Systeemmap</string>
-    <string name="SdCard">SD-kaart</string>
-    <string name="Folder">Map</string>
-    <string name="GalleryInfo">Om bestanden ongecomprimeerd te versturen</string>
-    <!--chat view-->
-    <string name="Invisible">onzichtbaar</string>
-    <string name="Typing">aan het typen</string>
-    <string name="IsTyping">is aan het typen</string>
-    <string name="AreTyping">zijn aan het typen</string>
-    <string name="IsRecordingAudio">%1$s neemt een spraakbericht op...</string>
-    <string name="IsSendingPhoto">%1$s verstuurt een foto</string>
-    <string name="IsSendingVideo">%1$s verstuurt een video</string>
-    <string name="IsSendingFile">%1$s verstuurt een bestand</string>
-    <string name="RecordingAudio">neemt een spraakbericht op...</string>
-    <string name="SendingPhoto">foto versturen</string>
-    <string name="SendingVideoStatus">video versturen</string>
-    <string name="SendingFile">bestand versturen</string>
-    <string name="GotAQuestion">Heb je een vraag\nover Telegram?</string>
-    <string name="ChatTakePhoto">Foto maken</string>
-    <string name="ChatGallery">Galerij</string>
-    <string name="ChatLocation">Locatie</string>
-    <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">Bestand</string>
-    <string name="ChatCamera">Camera</string>
-    <string name="NoMessages">Nog geen berichten</string>
-    <string name="ForwardedMessage">Doorgestuurd bericht</string>
-    <string name="From">Van</string>
-    <string name="NoRecent">Niets recents</string>
-    <string name="Message">Bericht</string>
-    <string name="TypeMessage">Bericht</string>
-    <string name="ShareMyContactInfo">Mijn contactgegevens delen</string>
-    <string name="AddToContacts">Toevoegen aan contacten</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s heeft je uitgenodigd voor een geheime chat.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Je hebt %s uitgenodigd voor een geheime chat.</string>
-    <string name="EncryptedDescriptionTitle">Geheime chat functies:</string>
-    <string name="EncryptedDescription1">End-to-end-encryptie</string>
-    <string name="EncryptedDescription2">Geen serveropslag</string>
-    <string name="EncryptedDescription3">Zelfvernietigingstimers</string>
-    <string name="EncryptedDescription4">Doorstuurbescherming</string>
-    <string name="YouWereKicked">Je bent verwijderd uit deze groep</string>
-    <string name="YouLeft">Je hebt deze groep verlaten</string>
-    <string name="DeleteThisGroup">Deze groep verwijderen</string>
-    <string name="DeleteThisChat">Chat verwijderen</string>
-    <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
-    <string name="SaveToDownloads">Opslaan in Downloads</string>
-    <string name="SaveToGIFs">GIF opslaan</string>
-    <string name="DeleteGif">GIF verwijderen?</string>
-    <string name="SaveToMusic">Opslaan in muziek</string>
-    <string name="ShareFile">Delen</string>
-    <string name="ApplyLocalizationFile">Vertaling toepassen</string>
-    <string name="UnsupportedAttachment">Bestandstype niet ondersteund</string>
-    <string name="SetTimer">Zelfvernietigingstimer instellen</string>
-    <string name="ServiceNotifications">Servicemeldingen</string>
-    <string name="GettingLinkInfo">Link-preview ophalen...</string>
-    <string name="OpenInBrowser">Openen in browser</string>
-    <string name="CopyUrl">Link kopiëren</string>
-    <string name="SendItems">%1$s versturen</string>
-    <string name="OpenUrlAlert">URL %1$s openen?</string>
-    <string name="ReportSpam">SPAM MELDEN</string>
-    <string name="AddContactChat">CONTACT TOEVOEGEN</string>
-    <string name="ReportSpamAlert">Spam van deze gebruiker echt melden? </string>
-    <string name="ReportSpamAlertGroup">Spam van deze groep echt melden? </string>
-    <string name="NobodyLikesSpam1">Je kunt momenteel alleen berichten sturen aan onderlingen contacten.</string>
-    <string name="NobodyLikesSpam2">Je kunt momenteel alleen onderlinge contacten aan groepen toevoegen</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq#can-39t-send-messages-to-non-contacts</string>
-    <string name="MoreInfo">Meer informatie</string>
-    <string name="ShareSendTo">Versturen naar...</string>
-    <string name="TapHereGifs">Tik hier om opgeslagen GIF\'s te bekijken</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s heeft de zelfvernietigingstimer ingesteld op %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">Je hebt de zelfvernietigingstimer ingesteld op %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s heeft de zelfvernietigingstimer uitgeschakeld</string>
-    <string name="MessageLifetimeYouRemoved">Je hebt de zelfvernietigingstimer uitgeschakeld</string>
-    <string name="YouHaveNewMessage">Je hebt een nieuw bericht</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s heeft je een bericht gestuurd</string>
-    <string name="NotificationMessagePhoto">%1$s heeft je een foto gestuurd</string>
-    <string name="NotificationMessageVideo">%1$s heeft je een video gestuurd</string>
-    <string name="NotificationMessageContact">%1$s heeft een contact met je gedeeld</string>
-    <string name="NotificationMessageMap">%1$s heeft je een locatie gestuurd</string>
-    <string name="NotificationMessageDocument">%1$s heeft je een bestand gestuurd</string>
-    <string name="NotificationMessageGif">%1$s heeft je een GIF gestuurd</string>
-    <string name="NotificationMessageAudio">%1$s heeft je een spraakbericht gestuurd</string>
-    <string name="NotificationMessageSticker">%1$s heeft je een sticker gestuurd</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s heeft een bericht gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s heeft een foto gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s heeft een video gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s heeft een contact gedeeld met de groep %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s heeft een locatie gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s heeft een bestand gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s heeft een GIF gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s heeft een spraakbericht gestuurd naar de groep %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s heeft een sticker gestuurd naar de groep %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s heeft je uitgenodigd voor de groep %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s heeft de naam van de groep %2$s gewijzigd</string>
-    <string name="NotificationEditedGroupPhoto">%1$s heeft de afbeelding van de groep %2$s gewijzigd</string>
-    <string name="NotificationGroupAddMember">%1$s heeft %3$s uitgenodigd voor de groep %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s is terug in de groep %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s heeft %3$s verwijderd uit de groep %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s heeft je verwijderd uit de groep %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s heeft de groep %2$s verlaten</string>
-    <string name="NotificationContactJoined">%1$s heeft nu Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nEr is op je account ingelogd vanaf een nieuw apparaat op %2$s\n\nApparaat: %3$s\nLocatie: %4$s\n\nAls jij dit niet was, kun je die sessie beëindigen via Instellingen - Privacy en veiligheid - Sessies.\n\nAls je dat denkt dat iemand anders zonder jouw toestemming is ingelogd kun je twee-staps-verificatie activeren via instellingen - privacy en veiligheid.\n\nBedankt,\nHet Telegram-team</string>
-    <string name="NotificationContactNewPhoto">%1$s heeft zijn/haar profielfoto gewijzigd</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s neemt deel aan de groep %2$s via uitnodigingslink</string>
-    <string name="Reply">Antwoord</string>
-    <string name="ReplyToGroup">Antwoord op %1$s</string>
-    <string name="ReplyToUser">Antwoord op %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Contact kiezen</string>
-    <string name="NoContacts">Nog geen contacten</string>
-    <string name="InviteText">Hey, zullen we overstappen op Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">om</string>
-    <string name="YesterdayAt">gisteren om</string>
-    <string name="Online">online</string>
-    <string name="LastSeen">gezien</string>
-    <string name="LastSeenDate">gezien</string>
-    <string name="LastSeenNow">laatst gezien zojuist</string>
-    <string name="InviteFriends">Vrienden uitnodigen</string>
-    <string name="GlobalSearch">WERELDWIJD ZOEKEN</string>
-    <string name="Lately">recent gezien</string>
-    <string name="WithinAWeek">afgelopen week gezien</string>
-    <string name="WithinAMonth">afgelopen maand gezien</string>
-    <string name="ALongTimeAgo">lang geleden gezien</string>
-    <string name="NewMessageTitle">Nieuw bericht</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Bericht versturen naar</string>
-    <string name="SoftUserLimitAlert">Nadat je de groep hebt aangemaakt kun je meer gebruikers toevoegen en omzetten naar een supergroep.</string>
-    <string name="EnterGroupNamePlaceholder">Groepsnaam</string>
-    <string name="GroupName">Groepsnaam</string>
-    <string name="MembersCount">%1$d/%2$d deelnemers</string>
-    <string name="JoinToGroup">Wil je deelnemen aan de groep \"%1$s\"?</string>
-    <string name="JoinToGroupErrorFull">Sorry, deze groep is al vol.</string>
-    <string name="JoinToGroupErrorNotExist">Sorry, deze groep bestaat niet.</string>
-    <string name="LinkCopied">Link gekopieerd naar klembord.</string>
-    <string name="InviteToGroupByLink">Uitnodigingslink sturen</string>
-    <string name="InviteLink">Uitnodigingslink</string>
-    <string name="RevokeAlert">Deze link echt intrekken? Na intrekken kan niemand meer lid worden met de oude link.</string>
-    <string name="RevokeAlertNewLink">De oude link is nu inactief. Een nieuwe link is aangemaakt.</string>
-    <string name="RevokeButton">Intrekken</string>
-    <string name="RevokeLink">Link intrekken</string>
-    <string name="CopyLink">Link kopiëren</string>
-    <string name="ShareLink">Link delen</string>
-    <string name="LinkInfo">Andere Telegram-gebruikers kunnen aan je groep deelnemen door deze link te openen.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Beheerders</string>
-    <string name="SetAdminsAll">Iedereen is beheerder</string>
-    <string name="SetAdminsAllInfo">Iedereen mag deelnemers toevoegen en de groepsfoto of naam wijzigen.</string>
-    <string name="SetAdminsNotAllInfo">Beheerders mogen deelnemers beheren en de groepsfoto of naam wijzigen.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Gedeelde media</string>
-    <string name="SETTINGS">Instellingen</string>
-    <string name="AddMember">Deelnemer toevoegen</string>
-    <string name="SetAdmins">Beheerders instellen</string>
-    <string name="DeleteAndExit">Groep verwijderen en verlaten</string>
-    <string name="Notifications">Meldingen</string>
-    <string name="KickFromGroup">Verwijderen uit groep</string>
-    <string name="ConvertGroup">Opwaarderen naar supergroep</string>
-    <string name="ConvertGroupAlert">Groepsdeelnemers moeten updaten naar de meest recente Telegram om je supergroep te kunnen zien. Groep echt opwaarderen?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Deelnemerslimiet bereikt.<![CDATA[</b>]]>\n\nWil je extra functies en een hogere limiet? Waardeer op naar een supergroep:\n\n• Supergroepen hebben tot %1$s\n• Nieuwe leden zien de hele geschiedenis\n• Beheerder wist berichten voor iedereen\n• Meldingen staan standaard uit</string>
-    <!--contact info view-->
-    <string name="ShareContact">Delen</string>
-    <string name="AddContact">Toevoegen</string>
-    <string name="AddContactTitle">Contact toevoegen</string>
-    <string name="BlockContact">Blokkeer</string>
-    <string name="EditContact">Wijzig</string>
-    <string name="DeleteContact">Verwijder</string>
-    <string name="PhoneHome">Thuis</string>
-    <string name="PhoneMobile">Mobiel</string>
-    <string name="PhoneWork">Werk</string>
-    <string name="PhoneOther">Overig</string>
-    <string name="PhoneMain">Hoofd</string>
-    <string name="StartEncryptedChat">Geheime chat starten</string>
-    <string name="CreateEncryptedChatError">Er is een fout opgetreden.</string>
-    <string name="EncryptionKey">Encryptiesleutel</string>
-    <string name="MessageLifetime">Zelfvernietigingstimer</string>
-    <string name="ShortMessageLifetimeForever">Uit</string>
-    <string name="EncryptionKeyDescription">Deze afbeelding en tekst zijn afgeleid van de encryptiesleutel voor deze geheime chat met <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Als dit er hetzelfde uitziet op het apparaat van <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, dan is end-to-end-encryptie gegarandeerd.<![CDATA[<br><br>]]>Lees meer op telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
-    <string name="NumberUnknown">Onbekend</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Telefoon</string>
-    <!--usernames-->
-    <string name="Username">Gebruikersnaam</string>
-    <string name="UsernamePlaceholder">Kies een naam</string>
-    <string name="UsernameInUse">Sorry, deze gebruikersnaam is al bezet.</string>
-    <string name="UsernameInvalid">Sorry, deze gebruikersnaam is ongeldig.</string>
-    <string name="UsernameInvalidShort">Je naam moet minimaal 5 tekens hebben.</string>
-    <string name="UsernameInvalidLong">Je naam mag niet langer zijn dan 32 tekens.</string>
-    <string name="UsernameInvalidStartNumber">Sorry, begincijfers zijn niet toegestaan.</string>
-    <string name="UsernameHelp">Je kan een gebruikersnaam kiezen voor <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Hiermee kunnen anderen je vinden en contact met je opnemen zonder je telefoonnummer te weten.<![CDATA[<br><br>]]>Je mag <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> en liggend streepje gebruiken. De minimale lengte is <![CDATA[<b>]]>5<![CDATA[</b>]]> tekens.</string>
-    <string name="UsernameChecking">Gebruikersnaam controleren.</string>
-    <string name="UsernameAvailable">%1$s is beschikbaar.</string>
-    <string name="UsernameEmpty">Geen</string>
-    <string name="ErrorOccurred">Er is een fout opgetreden.</string>
-    <!--stickers view-->
-    <string name="Stickers">Stickers</string>
-    <string name="StickersInfo">Ontwerpers kunnen stickerbundels toevoegen via onze bot: @stickers.\n\nGebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".</string>
-    <string name="AddStickers">Stickers toevoegen</string>
-    <string name="AddToStickers">Toevoegen aan stickers</string>
-    <string name="AddStickersNotFound">Stickers niet gevonden</string>
-    <string name="StickersRemoved">Stickers verwijderd</string>
-    <string name="AddStickersInstalled">Nieuwe stickers toegevoegd</string>
-    <string name="StickersHide">Verbergen</string>
-    <string name="StickersShow">Weergeven</string>
-    <string name="StickersShare">Delen</string>
-    <string name="StickersCopy">Link kopiëren</string>
-    <string name="StickersRemove">Verwijder</string>
-    <string name="NoStickers">Nog geen stickers</string>
-    <string name="TooMuchStickersets">Je hebt het maximale aantal stickerbundels bereikt.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Meldingen gereset</string>
-    <string name="TextSize">Tekstgrootte berichten</string>
-    <string name="AskAQuestion">Een vraag stellen</string>
-    <string name="EnableAnimations">Animaties</string>
-    <string name="Unblock">Deblokkeer</string>
-    <string name="UnblockText">Gebruiker vasthouden om te deblokkeren.</string>
-    <string name="NoBlocked">Geen geblokkeerde gebruikers</string>
-    <string name="MessageNotifications">Berichtmeldingen</string>
-    <string name="Alert">Waarschuwing</string>
-    <string name="MessagePreview">Voorvertoning</string>
-    <string name="GroupNotifications">Groepsmeldingen</string>
-    <string name="Sound">Geluid</string>
-    <string name="InAppNotifications">In-app meldingen</string>
-    <string name="InAppSounds">Geluiden</string>
-    <string name="InAppVibrate">Trillen</string>
-    <string name="Vibrate">Trillen</string>
-    <string name="InAppPreview">Voorvertoningen</string>
-    <string name="Reset">Resetten</string>
-    <string name="ResetAllNotifications">Meldingen resetten</string>
-    <string name="UndoAllCustom">Aangepaste meldingsinstellingen wissen voor contacten en groepen.</string>
-    <string name="NotificationsAndSounds">Meldingen en geluiden</string>
-    <string name="BlockedUsers">Geblokkeerd</string>
-    <string name="LogOut">Uitloggen</string>
-    <string name="NoSound">Geen geluid</string>
-    <string name="Default">Standaard</string>
-    <string name="Support">Ondersteuning</string>
-    <string name="OnlyIfSilent">Alleen indien stil</string>
-    <string name="ChatBackground">Achtergrond kiezen</string>
-    <string name="MessagesSettings">Berichten</string>
-    <string name="SendByEnter">Versturen met Enter</string>
-    <string name="TerminateAllSessions">Beëindig alle andere sessies</string>
-    <string name="Events">Gebeurtenissen</string>
-    <string name="ContactJoined">Contact lid van Telegram</string>
-    <string name="Language">Taal</string>
-    <string name="AskAQuestionInfo">De ondersteuning van Telegram wordt gedaan door vrijwilligers. We doen ons best om zo snel mogelijk te antwoorden.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href=\"https://telegram.org/faq#general\">veelgestelde vragen</a>]]>: Hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">het oplossen van problemen</a>]]>.</string>
-    <string name="AskButton">Vraag een vrijwilliger</string>
-    <string name="TelegramFaq">Veelgestelde vragen</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
-    <string name="DeleteLocalization">Vertaling verwijderen?</string>
-    <string name="IncorrectLocalization">Ongeldig vertalingsbestand</string>
-    <string name="Enabled">Inschakelen</string>
-    <string name="Disabled">Uitgeschakeld</string>
-    <string name="NotificationsService">Meldingenservice</string>
-    <string name="NotificationsServiceDisableInfo">Als Google Play Services genoeg voor je is om meldingen te ontvangen kun je de meldingenservice uitschakelen. We raden echter aan dit ingeschakeld te laten om de app in de achtergrond te laten draaien en directe meldingen te ontvangen.</string>
-    <string name="SortBy">Sorteren op</string>
-    <string name="ImportContacts">Importeer contacten</string>
-    <string name="SortFirstName">Voornaam</string>
-    <string name="SortLastName">Achternaam</string>
-    <string name="LedColor">LED-kleur</string>
-    <string name="PopupNotification">Pop-up meldingen</string>
-    <string name="NoPopup">Geen pop-up</string>
-    <string name="OnlyWhenScreenOn">Alleen bij scherm aan</string>
-    <string name="OnlyWhenScreenOff">Alleen bij scherm uit</string>
-    <string name="AlwaysShowPopup">Altijd pop-up tonen</string>
-    <string name="BadgeNumber">Badgenummer</string>
-    <string name="Short">Kort</string>
-    <string name="Long">Lang</string>
-    <string name="SystemDefault">Systeeminstelling</string>
-    <string name="SettingsDefault">Standaardinstelling</string>
-    <string name="AutomaticMediaDownload">Automatisch media downloaden</string>
-    <string name="WhenUsingMobileData">Bij mobiele verbinding</string>
-    <string name="WhenConnectedOnWiFi">Bij Wi-Fi-verbinding</string>
-    <string name="WhenRoaming">Bij roaming</string>
-    <string name="NoMediaAutoDownload">Geen media</string>
-    <string name="AutoplayGifs">GIF\'s automatisch afspelen</string>
-    <string name="RaiseToSpeak">Houd bij oor</string>
-    <string name="SaveToGallerySettings">Opslaan in galerij</string>
-    <string name="EditName">Naam wijzigen</string>
-    <string name="NotificationsPriority">Prioriteit</string>
-    <string name="NotificationsPriorityDefault">Standaard</string>
-    <string name="NotificationsPriorityLow">Laag</string>
-    <string name="NotificationsPriorityHigh">Hoog</string>
-    <string name="NotificationsPriorityMax">Max</string>
-    <string name="RepeatNotificationsNever">Nooit</string>
-    <string name="RepeatNotifications">Meldingen herhalen</string>
-    <string name="PhoneNumberHelp">Je kan je telefoonnummer hier wijzigen. Al je clouddata — berichten, bestanden, groepen, contacten, etc. zullen worden gekopieërd naar je nieuwe nummer.\n\n<![CDATA[<b>Let op:</b>]]> al je Telegram-contacten krijgen je  <![CDATA[<b>nieuwe nummer</b>]]> in hun adresboek, ervan uitgaande dat ze je oude nummer hadden en je hen niet had geblokkeerd in Telegram.</string>
-    <string name="PhoneNumberAlert">Al je Telegram-contacten krijgen je nieuwe nummer in hun adresboek, ervan uitgaande dat ze je oude nummer hadden en je hen niet had geblokkeerd in Telegram.</string>
-    <string name="PhoneNumberChange">NUMMER WIJZIGEN</string>
-    <string name="ChangePhoneNewNumber">Nieuw nummer</string>
-    <string name="ChangePhoneHelp">We sturen een sms-bericht met verificatiecode naar je nieuwe nummer.</string>
-    <string name="ChangePhoneNumberOccupied">Aan telefoonnummer %1$s is al een Telegram-account gekoppeld. Verwijder het account om te kunnen migreren naar het nieuwe nummer.</string>
-    <string name="NotificationsOther">Overig</string>
-    <string name="NotificationsDisabled">Uitgeschakeld</string>
-    <string name="VibrationDisabled">Uitgeschakeld</string>
-    <string name="LedDisabled">Uitgeschakeld</string>
-    <string name="RepeatDisabled">Uit</string>
-    <string name="InChatSound">Chatgeluiden</string>
-    <string name="SoundDefault">Standaard</string>
-    <string name="VibrationDefault">Standaard</string>
-    <string name="SmartNotifications">Slimme meldingen</string>
-    <string name="SmartNotificationsDisabled">Uitgeschakeld</string>
-    <string name="SmartNotificationsInfo">Geluid maximaal %1$s per %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Geluid maximaal</string>
-    <string name="SmartNotificationsTimes">keer</string>
-    <string name="SmartNotificationsWithin">binnen</string>
-    <string name="SmartNotificationsMinutes">minuten</string>
-    <string name="SecretWebPage">Linkvoorvertoningen</string>
-    <string name="SecretChat">Geheime chats</string>
-    <!--cache view-->
-    <string name="CacheSettings">Cache-instellingen</string>
-    <string name="LocalDatabase">Lokale database</string>
-    <string name="LocalDatabaseClear">Gecachet tekstberichten wissen?</string>
-    <string name="LocalDatabaseInfo">Het opschonen van de lokale database zal de tekst van gecachet berichten verwijderen en de database comprimeren om ruimte te besparen. Telegram heeft wat ruimte nodig om te kunnen functioneren, dus de databasegrootte zal nooit nul worden.\n\nDit kan enkele minuten duren.</string>
-    <string name="ClearMediaCache">Cache opschonen</string>
-    <string name="CacheClear">Opschonen</string>
-    <string name="CalculatingSize">Berekenen...</string>
-    <string name="LocalDocumentCache">Bestanden</string>
-    <string name="LocalPhotoCache">Foto\'s</string>
-    <string name="LocalAudioCache">Spraakberichten</string>
-    <string name="LocalVideoCache">Video\'s</string>
-    <string name="LocalMusicCache">Muziek</string>
-    <string name="LocalCache">Overige bestanden</string>
-    <string name="CacheEmpty">Leeg</string>
-    <string name="KeepMedia">Media bewaren</string>
-    <string name="KeepMediaInfo">Foto\'s, video\'s en andere bestanden uit cloudchats die je gedurende deze periode niet hebt  <![CDATA[<b>geopend</b>]]> zullen worden verwijderd van dit apparaat om ruimte te besparen.\n\nAlle media zal in de Telegram-cloud bewaard blijven en kan opnieuw worden gedownload als je het weer nodig hebt.</string>
-    <string name="KeepMediaForever">Voor altijd</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Actieve sessies</string>
-    <string name="CurrentSession">Huidige sessie</string>
-    <string name="NoOtherSessions">Geen andere actieve sessies</string>
-    <string name="NoOtherSessionsInfo">Je kunt in Telegram inloggen vanaf andere apparaten (mobiel, tablet, desktop) met hetzelfde telefoonnummer. Al je data zal direct worden gesynchroniseerd.</string>
-    <string name="OtherSessions">Actieve sessies</string>
-    <string name="SessionsInfo">Beheer je sessies van andere apparaten.</string>
-    <string name="TerminateSessionInfo">Tik op een sessie om deze te beëindigen.</string>
-    <string name="TerminateSessionQuestion">Deze sessie beëindigen?</string>
-    <string name="UnofficialApp">onofficiële app</string>
-    <!--passcode view-->
-    <string name="Passcode">Toegangscode-vergrendeling</string>
-    <string name="ChangePasscode">Toegangscode wijzigen</string>
-    <string name="ChangePasscodeInfo">Als je een toegangscode instelt verschijnt er een slotje op de chatspagina. Tik erop om Telegram te vergrendelen of te ontgrendelen.\n\nLet op: vergeet je de toegangscode dan zul je de app moeten verwijderen en herinstalleren. Alle geheime chats gaan daarbij verloren.</string>
-    <string name="ChangePasscodeAlert">Je zult nu een slotje op de chatspagina zien. Tik erop om Telegram te vergrendelen met je nieuwe toegangscode.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Wachtwoord</string>
-    <string name="EnterCurrentPasscode">Huidige toegangscode invoeren</string>
-    <string name="EnterNewFirstPasscode">Toegangscode invoeren</string>
-    <string name="EnterNewPasscode">Nieuwe toegangscode invoeren</string>
-    <string name="EnterYourPasscode">Toegangscode invoeren</string>
-    <string name="ReEnterYourPasscode">Toegangscode opnieuw invoeren</string>
-    <string name="InvalidPasscode">Ongeldige toegangscode</string>
-    <string name="PasscodeDoNotMatch">Toegangscodes komen niet overeen</string>
-    <string name="AutoLock">Automatisch vergrendelen</string>
-    <string name="AutoLockInfo">Vraag om toegangscode indien afwezig</string>
-    <string name="AutoLockInTime">over %1$s</string>
-    <string name="AutoLockDisabled">Uitgeschakeld</string>
-    <string name="UnlockFingerprint">Ontgrendel met vingerafdruk</string>
-    <string name="FingerprintInfo">Vingerafdruk bevestigen</string>
-    <string name="FingerprintHelp">Vingerafdruksensor</string>
-    <string name="FingerprintNotRecognized">Vingerafdruk niet herkend,  probeer opnieuw</string>
-    <!--media view-->
-    <string name="NoMedia">Deel foto\'s en video\'s in deze chat om ze op al je apparaten te kunnen benaderen.</string>
-    <string name="DocumentsTitle">Gedeelde bestanden</string>
-    <string name="SharedMediaTitle">Gedeelde media</string>
-    <string name="LinksTitle">Gedeelde links</string>
-    <string name="AudioTitle">Gedeelde muziek</string>
-    <string name="NoSharedAudio">Deel muziek in deze chat om ze op al je apparaten te kunnen benaderen.</string>
-    <string name="NoSharedFiles">Deel bestanden en documenten in deze chat om ze op al je apparaten te kunnen benaderen.</string>
-    <string name="NoSharedLinks">Deel links in deze chat om ze op al je apparaten te kunnen benaderen.</string>
-    <!--map view-->
-    <string name="Map">Kaart</string>
-    <string name="Satellite">Satelliet</string>
-    <string name="Hybrid">Hybride</string>
-    <string name="MetersAway">m hiervandaan</string>
-    <string name="KMetersAway">km hiervandaan</string>
-    <string name="SendLocation">Huidige locatie sturen</string>
-    <string name="SendSelectedLocation">Geselecteerde locatie sturen</string>
-    <string name="ShareLocation">Locatie</string>
-    <string name="AccurateTo">Nauwkeurig tot op %1$s</string>
-    <string name="NearbyPlaces">OF KIES EEN PLEK</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Alle media weergeven</string>
-    <string name="SaveToGallery">Opslaan in galerij</string>
-    <string name="Of">%1$d van %2$d</string>
-    <string name="Gallery">Galerij</string>
-    <string name="AllPhotos">Alle foto\'s</string>
-    <string name="AllVideo">Alle video\'s</string>
-    <string name="NoPhotos">Nog geen foto\'s</string>
-    <string name="NoVideo">Nog geen video\'s</string>
-    <string name="PleaseDownload">Download media eerst</string>
-    <string name="NoRecentPhotos">Niets recents</string>
-    <string name="NoRecentGIFs">Niets recents</string>
-    <string name="SearchImages">ONLINE ZOEKEN</string>
-    <string name="SearchImagesInfo">ZOEK OP HET WEB</string>
-    <string name="SearchGifs">GIF\'S ZOEKEN </string>
-    <string name="SearchImagesTitle">Online zoeken</string>
-    <string name="SearchGifsTitle">GIF\'s zoeken</string>
-    <string name="CropImage">Foto bijsnijden</string>
-    <string name="EditImage">Foto bewerken</string>
-    <string name="Enhance">Verbeteren</string>
-    <string name="Highlights">Accent</string>
-    <string name="Contrast">Contrast</string>
-    <string name="Exposure">Belichting</string>
-    <string name="Warmth">Warmte</string>
-    <string name="Saturation">Verzadiging</string>
-    <string name="Vignette">Vignet</string>
-    <string name="Shadows">Schaduwen</string>
-    <string name="Grain">Korrel</string>
-    <string name="Sharpen">Scherper</string>
-    <string name="Fade">Vervagen</string>
-    <string name="Tint">Tint</string>
-    <string name="TintShadows">SCHADUWEN</string>
-    <string name="TintHighlights">ACCENTUEREN</string>
-    <string name="Curves">Curven</string>
-    <string name="CurvesAll">ALLE</string>
-    <string name="CurvesRed">ROOD</string>
-    <string name="CurvesGreen">GROEN</string>
-    <string name="CurvesBlue">BLAUW</string>
-    <string name="Blur">Vager</string>
-    <string name="BlurOff">Uit</string>
-    <string name="BlurLinear">Lineair</string>
-    <string name="BlurRadial">Radiaal</string>
-    <string name="AreYouSureDeletePhoto">Foto echt verwijderen?</string>
-    <string name="AreYouSureDeleteVideo">Video echt verwijderen?</string>
-    <string name="DiscardChanges">Wijzigingen negeren?</string>
-    <string name="ClearSearch">Zoekgeschiedenis wissen?</string>
-    <string name="ClearButton">Wissen</string>
-    <string name="PickerPhotos">Foto\'s</string>
-    <string name="PickerVideo">Video</string>
-    <string name="AddCaption">Onderschrift toevoegen</string>
-    <string name="PhotoCaption">Foto-onderschrift</string>
-    <string name="VideoCaption">Video-onderschrift</string>
-    <string name="Caption">Onderschrift</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Twee-staps-verificatie</string>
-    <string name="SetAdditionalPassword">Extra wachtwoord instellen</string>
-    <string name="SetAdditionalPasswordInfo">Naast de code die je per SMS ontvangt kun je een extra wachtwoord instellen voor als je inlogt op een nieuw apparaat.</string>
-    <string name="YourPassword">Je wachtwoord</string>
-    <string name="PleaseEnterCurrentPassword">Wachtwoord invoeren</string>
-    <string name="PleaseEnterFirstPassword">Wachtwoord invoeren</string>
-    <string name="PleaseEnterPassword">Nieuw wachtwoord invoeren</string>
-    <string name="PleaseReEnterPassword">Wachtwoord opnieuw invoeren</string>
-    <string name="RecoveryEmail">Herstel-e-mailadres</string>
-    <string name="YourEmail">Je e-mailadres</string>
-    <string name="YourEmailInfo">Voeg je geldige e-mailadres toe. Het is de enige manier om je wachtwoord te herstellen.</string>
-    <string name="YourEmailSkip">Overslaan</string>
-    <string name="YourEmailSkipWarning">Waarschuwing</string>
-    <string name="YourEmailSkipWarningText">Let op:\n\nAls je je wachtwoord vergeet verlies je toegang tot je Telegram-account. Er is geen optie om dit te herstellen.</string>
-    <string name="YourEmailAlmostThere">Bijna klaar!</string>
-    <string name="YourEmailAlmostThereText">Controleer je e-mail en klik op de bevestigingslink om de twee-staps-verificatie in te schakelen. Kijk voor de zekerheid ook in de ongewenste post.</string>
-    <string name="YourPasswordSuccess">Gelukt!</string>
-    <string name="YourPasswordSuccessText">Je wachtwoord voor twee-staps-verificatie is nu actief.</string>
-    <string name="ChangePassword">Wachtwoord wijzigen</string>
-    <string name="TurnPasswordOff">Wachtwoord uitschakelen</string>
-    <string name="SetRecoveryEmail">Herstel-e-mailadres instellen</string>
-    <string name="ChangeRecoveryEmail">Herstel-e-mailadres wijzigen</string>
-    <string name="TurnPasswordOffQuestion">Weet je zeker dat je je wachtwoord wilt uitschakelen?</string>
-    <string name="PasswordHint">Wachtwoordhint</string>
-    <string name="PasswordHintText">Stel een hint voor je wachtwoord in</string>
-    <string name="PasswordDoNotMatch">Wachtwoorden komen niet overeen</string>
-    <string name="AbortPassword">Twee-staps-verificatie annuleren</string>
-    <string name="EmailPasswordConfirmText">Volg deze stappen om twee-staps-verificatie in te schakelen:\n\n1.Controleer je e-mail (kijk voor de zekerheid ook in de ongewenste post)\n%1$s\n\n2.n klik op de bevestigingslink.</string>
-    <string name="PasswordAsHintError">De hint moet anders zijn dan je wachtwoord</string>
-    <string name="PasswordEmailInvalid">Ongeldig e-mailadres</string>
-    <string name="RestorePasswordNoEmailTitle">Sorry</string>
-    <string name="RestorePasswordNoEmailText">Omdat je geen herstel-e-mailadres hebt opgegeven voor je wachtwoord zul je bij verlies van je wachtwoord je account moeten resetten.</string>
-    <string name="RestoreEmailSent">We hebben een herstelcode naar je opgegeven e-mailadres gestuurd:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Controleer je e-mail en geef de 6-cijferige code in die we je hebben gestuurd.</string>
-    <string name="RestoreEmailTrouble">Kun je je e-mail niet benaderen %1$s?</string>
-    <string name="RestoreEmailTroubleText">Bij verlies van je wachtwoord zul je je account moeten resetten.</string>
-    <string name="ResetMyAccount">ACCOUNT RESETTEN</string>
-    <string name="ResetMyAccountText">Al je chats, berichten en alle andere data gaan verloren als je verder gaat met de account-reset.</string>
-    <string name="ResetMyAccountWarning">Waarschuwing</string>
-    <string name="ResetMyAccountWarningText">Deze actie kan niet worden hersteld.\n\nAl je chats, berichten en data gaan verloren als je je account reset.</string>
-    <string name="ResetMyAccountWarningReset">Resetten</string>
-    <string name="LoginPassword">Wachtwoord</string>
-    <string name="LoginPasswordText">Twee-staps-verificatie ingeschakeld. Je account is met een extra wachtwoord beveiligd.</string>
-    <string name="ForgotPassword">Wachtwoord vergeten?</string>
-    <string name="PasswordRecovery">Wachtwoordherstel</string>
-    <string name="PasswordCode">Code</string>
-    <string name="PasswordReset">Wachtwoord uitgeschakeld</string>
-    <string name="EnabledPasswordText">Je hebt twee-staps-verificatie ingeschakeld.\nAls je inlogt op je Telegram-account heb je het ingestelde wachtwoord nodig.</string>
-    <string name="PendingEmailText">Je herstel-e-mailadres %1$s is nog niet actief en in afwachting van bevestiging.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacy en veiligheid</string>
-    <string name="PrivacyTitle">Privacy</string>
-    <string name="PrivacyLastSeen">Laatst gezien</string>
-    <string name="LastSeenEverybody">Iedereen</string>
-    <string name="LastSeenContacts">Mijn contacten</string>
-    <string name="LastSeenNobody">Niemand</string>
-    <string name="LastSeenEverybodyMinus">Iedereen (-%1$d)</string>
-    <string name="LastSeenContactsPlus">Mijn contacten (+%1$d)</string>
-    <string name="LastSeenContactsMinus">Mijn contacten (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">Mijn contacten (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Niemand (+%1$d)</string>
-    <string name="SecurityTitle">Veiligheid</string>
-    <string name="DeleteAccountTitle">Account verwijderen</string>
-    <string name="DeleteAccountIfAwayFor">Indien afwezig voor</string>
-    <string name="DeleteAccountHelp">Als je binnen deze periode niet minimaal één keer ingelogd bent geweest zal je account worden verwijderd, inclusief alle data.</string>
-    <string name="DeleteAccountNowConfirmation">Je account verwijderen?</string>
-    <string name="LastSeenHelp">Wijzig wie je laatst gezien tijd kan zien.</string>
-    <string name="LastSeenTitle">Wie kan mijn laatst gezien tijd zien?</string>
-    <string name="AddExceptions">Uitzonderingen toevoegen</string>
-    <string name="CustomHelp">Let op: van mensen waarmee je je laatst gezien tijd niet deelt is deze voor jou ook niet zichtbaar. In plaats daarvan krijg je tijden bij benadering te zien (recent, afgelopen week, afgelopen maand).</string>
-    <string name="AlwaysShareWith">Altijd delen met</string>
-    <string name="NeverShareWith">Nooit delen met</string>
-    <string name="CustomShareSettingsHelp">Deze instelling overschrijft de bovenstaande.</string>
-    <string name="AlwaysShareWithTitle">Altijd delen</string>
-    <string name="AlwaysShareWithPlaceholder">Altijd delen met gebruikers</string>
-    <string name="NeverShareWithTitle">Nooit delen</string>
-    <string name="NeverShareWithPlaceholder">Nooit delen met gebruikers</string>
-    <string name="EmpryUsersPlaceholder">Toevoegen</string>
-    <string name="PrivacyFloodControlError">Sorry, te veel verzoeken. Momenteel is het niet mogelijk om de privacyinstellingen te wijzigen, even geduld alsjeblieft.</string>
-    <string name="ClearOtherSessionsHelp">Logt alle apparaten behalve deze uit.</string>
-    <string name="RemoveFromListText">Gebruiker vasthouden om te verwijderen.</string>
-    <string name="GroupsAndChannels">Groepen</string>
-    <string name="WhoCanAddMe">Wie kan me toevoegen aan groepchats?</string>
-    <string name="WhoCanAddMeInfo">Je kunt met precisie bepalen wie je aan groepen en kanalen mag toevoegen.</string>
-    <string name="AlwaysAllow">Altijd toestaan</string>
-    <string name="NeverAllow">Nooit toestaan</string>
-    <string name="AlwaysAllowPlaceholder">Altijd toestaan...</string>
-    <string name="NeverAllowPlaceholder">Nooit toestaan...</string>
-    <string name="CustomShareInfo">Deze gebruikers altijd toestaan of verbieden je aan groepen en kanalen toe te voegen.</string>
-    <string name="GroupsAndChannelsHelp">Wijzig wie je aan groepen en kanalen kan toevoegen.</string>
-    <string name="InviteToGroupError">Je kunt deze gebruiker niet toevoegen aan groepen vanwege de privacyinstellingen van deze gebruiker.</string>
-    <string name="InviteToChannelError">Je kunt deze gebruiker niet toevoegen aan kanalen vanwege de privacyinstellingen van deze gebruiker.</string>
-    <string name="CreateGroupError">Je kan geen groep maken met deze gebruikers vanwege de privacyinstellingen van deze gebruikers.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Video bewerken</string>
-    <string name="OriginalVideo">Originele video</string>
-    <string name="EditedVideo">Bewerkte video</string>
-    <string name="SendingVideo">Video versturen</string>
-    <string name="CompressVideo">Video comprimeren</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Delen</string>
-    <string name="BotInvite">Groepslid maken</string>
-    <string name="BotSettings">Instellingen</string>
-    <string name="BotHelp">Help</string>
-    <string name="BotStatusRead">toegang tot berichten</string>
-    <string name="BotStatusCantRead">geen toegang tot berichten</string>
-    <string name="BotInfoTitle">Wat kan deze bot?</string>
-    <string name="BotStart">BEGIN</string>
-    <string name="BotUnblock">HERSTART</string>
-    <string name="BotStop">Bot stoppen</string>
-    <string name="BotRestart">Bot herstarten</string>
-    <!--button titles-->
-    <string name="Next">Volgende</string>
-    <string name="Back">Vorige</string>
-    <string name="Done">Gereed</string>
-    <string name="Open">Openen</string>
-    <string name="Save">Opslaan</string>
-    <string name="Cancel">Annuleren</string>
-    <string name="Close">Sluit</string>
-    <string name="Add">Toevoegen</string>
-    <string name="Edit">Wijzig</string>
-    <string name="Send">Stuur</string>
-    <string name="Call">Bellen</string>
-    <string name="Copy">Kopieer</string>
-    <string name="Delete">Verwijder</string>
-    <string name="DeleteAndStop">Verwijderen en stoppen</string>
-    <string name="Forward">Doorsturen</string>
-    <string name="Retry">Opnieuw proberen</string>
-    <string name="FromCamera">Van camera</string>
-    <string name="FromGalley">Uit galerij</string>
-    <string name="DeletePhoto">Foto verwijderen</string>
-    <string name="Set">Stel in</string>
-    <string name="OK">OK</string>
-    <string name="Crop">BIJSNIJDEN</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Je neemt deel aan de groep via uitnodigingslink</string>
-    <string name="ActionInviteUser">un1 neemt deel aan de groep via uitnodigingslink</string>
-    <string name="ActionKickUser">un1 heeft un2 verwijderd</string>
-    <string name="ActionLeftUser">un1 heeft de groep verlaten</string>
-    <string name="ActionAddUser">un1 heeft un2 toegevoegd</string>
-    <string name="ActionRemovedPhoto">un1 heeft de groepsafbeelding verwijderd</string>
-    <string name="ActionChangedPhoto">un1 heeft de groepsafbeelding gewijzigd</string>
-    <string name="ActionChangedTitle">un1 heeft de groepsnaam gewijzigd naar un2</string>
-    <string name="ActionCreateGroup">un1 heeft de groep gemaakt</string>
-    <string name="ActionYouKickUser">Je hebt un2 verwijderd</string>
-    <string name="ActionYouLeftUser">Je hebt de groep verlaten</string>
-    <string name="ActionYouAddUser">Je hebt un2 toegevoegd</string>
-    <string name="ActionYouRemovedPhoto">Je hebt de groepsafbeelding verwijderd</string>
-    <string name="ActionYouChangedPhoto">Je hebt de groepsafbeelding gewijzigd</string>
-    <string name="ActionYouChangedTitle">Je hebt de groepsnaam gewijzigd naar un2</string>
-    <string name="ActionYouCreateGroup">Je hebt de groep gemaakt</string>
-    <string name="ActionKickUserYou">un1 heeft je verwijderd</string>
-    <string name="ActionAddUserYou">un1 heeft je toegevoegd</string>
-    <string name="ActionAddUserSelf">un1 is terug in de groep</string>
-    <string name="ActionAddUserSelfYou">Je keerde terug naar de groep</string>
-    <string name="UnsupportedMedia">Dit bericht wordt niet ondersteund door jouw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Video</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Locatie</string>
-    <string name="AttachContact">Contact</string>
-    <string name="AttachDocument">Bestand</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Spraakbericht</string>
-    <string name="FromYou">Jij</string>
-    <string name="ActionTakeScreenshootYou">Schermafdruk gemaakt!</string>
-    <string name="ActionTakeScreenshoot">un1 heeft een schermafdruk gemaakt!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Ongeldig telefoonnummer</string>
-    <string name="CodeExpired">Code verlopen. Log opnieuw in.</string>
-    <string name="FloodWait">Te veel pogingen. Probeer het later opnieuw.</string>
-    <string name="FloodWaitTime">Te veel pogingen, probeer het over %1$s opnieuw</string>
-    <string name="InvalidCode">Ongeldige code</string>
-    <string name="InvalidFirstName">Ongeldige voornaam</string>
-    <string name="InvalidLastName">Ongeldige achternaam</string>
-    <string name="Loading">Bezig met laden</string>
-    <string name="NoPlayerInstalled">Je hebt geen mediaspeler. Installeer een mediaspeler om door te gaan.</string>
-    <string name="NoMailInstalled">E-mail ons op sms@stel.com en vertel ons over je probleem.</string>
-    <string name="NoHandleAppInstalled">Je hebt geen apps die bestandstype \'%1$s\' kunnen verwerken, gelieve een compatibele app te installeren</string>
-    <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wil je een uitnodiging sturen?</string>
-    <string name="AreYouSure">Weet je het zeker?</string>
-    <string name="AddToTheGroupTitle">%1$s toevoegen aan de groep %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Aantal recente berichten om door te sturen:</string>
-    <string name="AddToTheGroup">%1$s toevoegen aan de groep?</string>
-    <string name="UserAlreadyInGroup">Gebruiker neemt al deel aan de groep</string>
-    <string name="ForwardMessagesTo">Berichten doorsturen naar %1$s?</string>
-    <string name="SendMessagesTo">Berichten naar %1$s versturen?</string>
-    <string name="SendContactTo">Contact delen met %1$s?</string>
-    <string name="AreYouSureLogout">Weet je zeker dat je wilt uitloggen?\n\nTelegram kun je naadloos op al je apparaten tegelijkertijd gebruiken.\n\nLet op! Als je uitlogt worden al je geheime chats verwijderd.</string>
-    <string name="AreYouSureSessions">Alle apparaten behalve het huidige apparaat uitloggen?</string>
-    <string name="AreYouSureDeleteAndExit">Verwijderen en de groep verlaten?</string>
-    <string name="AreYouSureDeleteThisChat">Chat echt verwijderen?</string>
-    <string name="AreYouSureShareMyContactInfo">Weet je zeker dat je je contactinformatie wilt delen?</string>
-    <string name="AreYouSureBlockContact">Weet je zeker dat je deze persoon wilt blokkeren?</string>
-    <string name="AreYouSureUnblockContact">Weet je zeker dat je deze persoon wilt deblokkeren?</string>
-    <string name="AreYouSureDeleteContact">Contact echt verwijderen?</string>
-    <string name="AreYouSureSecretChat">Weet je zeker dat je een geheime chat wilt starten?</string>
-    <string name="AreYouSureRegistration">Weet je zeker dat je de registratie wilt annuleren?</string>
-    <string name="AreYouSureClearHistory">Geschiedenis echt wissen? </string>
-    <string name="AreYouSureClearHistoryChannel">Kanaalcache opschonen?</string>
-    <string name="AreYouSureClearHistorySuper">Supergroepcache echt opschonen?</string>
-    <string name="AreYouSureDeleteMessages">%1$s echt verwijderen?</string>
-    <string name="SendMessagesToGroup">Berichten naar %1$s versturen?</string>
-    <string name="SendContactToGroup">Contact delen met %1$s?</string>
-    <string name="ForwardMessagesToGroup">Berichten doorsturen naar %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, deze functie is momenteel niet beschikbaar in jouw land.</string>
-    <string name="NoUsernameFound">Er is geen Telegram-account met deze gebruikersnaam.</string>
-    <string name="BotCantJoinGroups">Deze bot kan geen groepslid worden.</string>
-    <string name="SecretLinkPreviewAlert">Wil je uitgebreide link-voorvertoning inschakelen voor geheime chats? Let op: deze worden gegenereerd op onze servers.</string>
-    <string name="SecretChatContextBotAlert">Let op: inline-bots worden aangeboden door externe ontwikkelaars. Voor de werking van de bot worden de karakters die je na de botnaam typt naar deze ontwikkelaar verstuurd.</string>
-    <string name="RaiseToSpeakAlert">Wil je \"Houd bij oor\" inschakelen voor spraakberichten?</string>
-    <string name="EditMessageError">Je mag dit bericht niet bewerken.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram heeft toegang tot je contacten nodig zodat je kan chatten met je vrienden vanaf al je apparaten.</string>
-    <string name="PermissionStorage">Telegram heeft toegang tot je opslaggeheugen nodig zodat je foto\'s, video\'s, muziek en andere media kunt opslaan en versturen.</string>
-    <string name="PermissionNoAudio">Telegram heeft toegang tot je microfoon nodig om spraakberichten te kunnen verzenden.</string>
-    <string name="PermissionNoLocation">Telegram heeft toegang tot je locatie nodig om deze te kunnen delen met je vrienden.</string>
-    <string name="PermissionOpenSettings">INSTELLINGEN</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Snel</string>
-    <string name="Page3Title">Gratis</string>
-    <string name="Page4Title">Veilig</string>
-    <string name="Page5Title">Krachtig</string>
-    <string name="Page6Title">In de cloud</string>
-    <string name="Page7Title">Privé</string>
-    <string name="Page1Message">\'s Werelds <![CDATA[<b>snelste</b>]]> berichtendienst.<![CDATA[<br/>]]>Het is <![CDATA[<b>gratis</b>]]> en <![CDATA[<b>veilig</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> bezorgt berichten sneller dan<![CDATA[<br/>]]>elke andere applicatie.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is altijd gratis. Geen advertenties.<![CDATA[<br/>]]>Geen abonnementskosten.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> beveiligd je berichten<![CDATA[<br/>]]>tegen aanvallen van hackers.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> beperkt je niet in de grootte van<![CDATA[<br/>]]>je media of chats.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> biedt toegang tot je berichten<![CDATA[<br/>]]>vanaf meerdere apparaten.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> berichten zijn sterk versleuteld<![CDATA[<br/>]]>en kunnen zichzelf vernietigen.</string>
-    <string name="StartMessaging">Begin met chatten</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d online</string>
-    <string name="Online_one">%1$d online</string>
-    <string name="Online_two">%1$d online</string>
-    <string name="Online_few">%1$d online</string>
-    <string name="Online_many">%1$d online</string>
-    <string name="Online_other">%1$d online</string>
-    <string name="Members_zero">%1$d deelnemers</string>
-    <string name="Members_one">%1$d deelnemer</string>
-    <string name="Members_two">%1$d deelnemers</string>
-    <string name="Members_few">%1$d deelnemers</string>
-    <string name="Members_many">%1$d deelnemers</string>
-    <string name="Members_other">%1$d deelnemers</string>
-    <string name="AndMoreTyping_zero">en nog %1$d personen zijn aan het typen</string>
-    <string name="AndMoreTyping_one">en nog %1$d persoon is aan het typen</string>
-    <string name="AndMoreTyping_two">en nog %1$d personen zijn aan het typen</string>
-    <string name="AndMoreTyping_few">en nog %1$d personen zijn aan het typen</string>
-    <string name="AndMoreTyping_many">en nog %1$d personen zijn aan het typen</string>
-    <string name="AndMoreTyping_other">en nog %1$d personen zijn aan het typen</string>
-    <string name="NewMessages_zero">geen nieuwe berichten</string>
-    <string name="NewMessages_one">%1$d nieuw bericht</string>
-    <string name="NewMessages_two">%1$d nieuwe berichten</string>
-    <string name="NewMessages_few">%1$d nieuwe berichten</string>
-    <string name="NewMessages_many">%1$d nieuwe berichten</string>
-    <string name="NewMessages_other">%1$d nieuwe berichten</string>
-    <string name="messages_zero">geen berichten</string>
-    <string name="messages_one">%1$d bericht</string>
-    <string name="messages_two">%1$d berichten</string>
-    <string name="messages_few">%1$d berichten</string>
-    <string name="messages_many">%1$d berichten</string>
-    <string name="messages_other">%1$d berichten</string>
-    <string name="comments_zero">%1$d reacties</string>
-    <string name="comments_one">%1$d reactie</string>
-    <string name="comments_two">%1$d reacties</string>
-    <string name="comments_few">%1$d reacties</string>
-    <string name="comments_many">%1$d reacties</string>
-    <string name="comments_other">%1$d reacties</string>
-    <string name="items_zero">geen items</string>
-    <string name="items_one">%1$d item</string>
-    <string name="items_two">%1$d items</string>
-    <string name="items_few">%1$d items</string>
-    <string name="items_many">%1$d items</string>
-    <string name="items_other">%1$d items</string>
-    <string name="FromChats_zero">van geen chats</string>
-    <string name="FromChats_one">van %1$d chat</string>
-    <string name="FromChats_two">van %1$d chats</string>
-    <string name="FromChats_few">van %1$d chats</string>
-    <string name="FromChats_many">van %1$d chats</string>
-    <string name="FromChats_other">van %1$d chats</string>
-    <string name="Seconds_zero">%1$d seconden</string>
-    <string name="Seconds_one">%1$d seconde</string>
-    <string name="Seconds_two">%1$d seconden</string>
-    <string name="Seconds_few">%1$d seconden</string>
-    <string name="Seconds_many">%1$d seconden</string>
-    <string name="Seconds_other">%1$d seconden</string>
-    <string name="Minutes_zero">%1$d minuten</string>
-    <string name="Minutes_one">%1$d minuut</string>
-    <string name="Minutes_two">%1$d minuten</string>
-    <string name="Minutes_few">%1$d minuten</string>
-    <string name="Minutes_many">%1$d minuten</string>
-    <string name="Minutes_other">%1$d minuten</string>
-    <string name="Hours_zero">%1$d uur</string>
-    <string name="Hours_one">%1$d uur</string>
-    <string name="Hours_two">%1$d uur</string>
-    <string name="Hours_few">%1$d uur</string>
-    <string name="Hours_many">%1$d uur</string>
-    <string name="Hours_other">%1$d uur</string>
-    <string name="Days_zero">%1$d dagen</string>
-    <string name="Days_one">%1$d dag</string>
-    <string name="Days_two">%1$d dagen</string>
-    <string name="Days_few">%1$d dagen</string>
-    <string name="Days_many">%1$d dagen</string>
-    <string name="Days_other">%1$d dagen</string>
-    <string name="Weeks_zero">%1$d weken</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weken</string>
-    <string name="Weeks_few">%1$d weken</string>
-    <string name="Weeks_many">%1$d weken</string>
-    <string name="Weeks_other">%1$d weken</string>
-    <string name="Months_zero">%1$d maanden</string>
-    <string name="Months_one">%1$d maand</string>
-    <string name="Months_two">%1$d maanden</string>
-    <string name="Months_few">%1$d maanden</string>
-    <string name="Months_many">%1$d maanden</string>
-    <string name="Months_other">%1$d maanden</string>
-    <string name="Years_zero">%1$d jaar</string>
-    <string name="Years_one">%1$d jaar</string>
-    <string name="Years_two">%1$d jaar</string>
-    <string name="Years_few">%1$d jaar</string>
-    <string name="Years_many">%1$d jaar</string>
-    <string name="Years_other">%1$d jaar</string>
-    <string name="Users_zero">%1$d gebruikers</string>
-    <string name="Users_one">%1$d gebruiker</string>
-    <string name="Users_two">%1$d gebruikers</string>
-    <string name="Users_few">%1$d gebruikers</string>
-    <string name="Users_many">%1$d gebruikers</string>
-    <string name="Users_other">%1$d gebruikers</string>
-    <string name="Times_zero">%1$d keer</string>
-    <string name="Times_one">%1$d keer</string>
-    <string name="Times_two">%1$d keer</string>
-    <string name="Times_few">%1$d keer</string>
-    <string name="Times_many">%1$d keer</string>
-    <string name="Times_other">%1$d keer</string>
-    <string name="Meters_zero">%1$d meter</string>
-    <string name="Meters_one">%1$d meter</string>
-    <string name="Meters_two">%1$d meter</string>
-    <string name="Meters_few">%1$d meter</string>
-    <string name="Meters_many">%1$d meter</string>
-    <string name="Meters_other">%1$d meter</string>
-    <string name="Stickers_zero">%1$d stickers</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d stickers</string>
-    <string name="Stickers_few">%1$d stickers</string>
-    <string name="Stickers_many">%1$d stickers</string>
-    <string name="Stickers_other">%1$d stickers</string>
-    <string name="Photos_zero">%1$d foto\'s</string>
-    <string name="Photos_one">%1$d foto</string>
-    <string name="Photos_two">%1$d foto\'s</string>
-    <string name="Photos_few">%1$d foto\'s</string>
-    <string name="Photos_many">%1$d foto\'s</string>
-    <string name="Photos_other">%1$d foto\'s</string>
-    <string name="LastSeenMinutes_zero">laatst gezien %1$d min geleden</string>
-    <string name="LastSeenMinutes_one">laatst gezien %1$d minuut geleden</string>
-    <string name="LastSeenMinutes_two">laatst gezien %1$d min geleden</string>
-    <string name="LastSeenMinutes_few">laatst gezien %1$d min geleden</string>
-    <string name="LastSeenMinutes_many">laatst gezien %1$d min geleden</string>
-    <string name="LastSeenMinutes_other">laatst gezien %1$d min geleden</string>
-    <string name="LastSeenHours_zero">laatst gezien %1$d uur geleden</string>
-    <string name="LastSeenHours_one">laatst gezien %1$d uur geleden</string>
-    <string name="LastSeenHours_two">laatst gezien %1$d uur geleden</string>
-    <string name="LastSeenHours_few">laatst gezien %1$d uur geleden</string>
-    <string name="LastSeenHours_many">laatst gezien %1$d uur geleden</string>
-    <string name="LastSeenHours_other">laatst gezien %1$d uur geleden</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">Bijlage: %1$d berichten</string>
-    <string name="ForwardedMessage_one">Bijlage: 1 bericht</string>
-    <string name="ForwardedMessage_two">Bijlage: %1$d berichten</string>
-    <string name="ForwardedMessage_few">Bijlage: %1$d berichten</string>
-    <string name="ForwardedMessage_many">Bijlage: %1$d berichten</string>
-    <string name="ForwardedMessage_other">Bijlage: %1$d berichten</string>
-    <string name="ForwardedFile_zero">Bijlage: %1$d bestanden</string>
-    <string name="ForwardedFile_one">Bijlage: 1 bestand</string>
-    <string name="ForwardedFile_two">Bijlage: %1$d bestanden</string>
-    <string name="ForwardedFile_few">Bijlage: %1$d bestanden</string>
-    <string name="ForwardedFile_many">Bijlage: %1$d bestanden</string>
-    <string name="ForwardedFile_other">Bijlage: %1$d bestanden</string>
-    <string name="ForwardedPhoto_zero">Bijlage: %1$d foto\'s</string>
-    <string name="ForwardedPhoto_one">Bijlage: 1 foto</string>
-    <string name="ForwardedPhoto_two">Bijlage: %1$d foto\'s</string>
-    <string name="ForwardedPhoto_few">Bijlage: %1$d foto\'s</string>
-    <string name="ForwardedPhoto_many">Bijlage: %1$d foto\'s</string>
-    <string name="ForwardedPhoto_other">Bijlage: %1$d foto\'s</string>
-    <string name="ForwardedVideo_zero">Bijlage: %1$d video\'s</string>
-    <string name="ForwardedVideo_one">Bijlage: 1 video</string>
-    <string name="ForwardedVideo_two">Bijlage: %1$d video\'s</string>
-    <string name="ForwardedVideo_few">Bijlage: %1$d video\'s</string>
-    <string name="ForwardedVideo_many">Bijlage: %1$d video\'s</string>
-    <string name="ForwardedVideo_other">Bijlage: %1$d video\'s</string>
-    <string name="ForwardedMusic_zero">Bijlage: %1$d muziekbestanden</string>
-    <string name="ForwardedMusic_one">Doorgestuurd muziekbestand</string>
-    <string name="ForwardedMusic_two">Bijlage: %1$d muziekbestanden</string>
-    <string name="ForwardedMusic_few">Bijlage: %1$d muziekbestanden</string>
-    <string name="ForwardedMusic_many">Bijlage: %1$d muziekbestanden</string>
-    <string name="ForwardedMusic_other">Bijlage: %1$d muziekbestanden</string>
-    <string name="ForwardedAudio_zero">Bijlage: %1$d spraakberichten</string>
-    <string name="ForwardedAudio_one">Bijlage: 1 spraakbericht</string>
-    <string name="ForwardedAudio_two">Bijlage: %1$d spraakberichten</string>
-    <string name="ForwardedAudio_few">Bijlage: %1$d spraakberichten</string>
-    <string name="ForwardedAudio_many">Bijlage: %1$d spraakberichten</string>
-    <string name="ForwardedAudio_other">Bijlage: %1$d spraakberichten</string>
-    <string name="ForwardedLocation_zero">Bijlage: %1$d locaties</string>
-    <string name="ForwardedLocation_one">Bijlage: 1 locatie</string>
-    <string name="ForwardedLocation_two">Bijlage: %1$d locaties</string>
-    <string name="ForwardedLocation_few">Bijlage: %1$d locaties</string>
-    <string name="ForwardedLocation_many">Bijlage: %1$d locaties</string>
-    <string name="ForwardedLocation_other">Bijlage: %1$d locaties</string>
-    <string name="ForwardedContact_zero">Bijlage: %1$d contacten</string>
-    <string name="ForwardedContact_one">Bijlage: 1 contact</string>
-    <string name="ForwardedContact_two">Bijlage: %1$d contacten</string>
-    <string name="ForwardedContact_few">Bijlage: %1$d contacten</string>
-    <string name="ForwardedContact_many">Bijlage: %1$d contacten</string>
-    <string name="ForwardedContact_other">Bijlage: %1$d contacten</string>
-    <string name="ForwardedSticker_zero">Bijlage: %1$d stickers</string>
-    <string name="ForwardedSticker_one">Bijlage: 1 sticker</string>
-    <string name="ForwardedSticker_two">Bijlage: %1$d stickers</string>
-    <string name="ForwardedSticker_few">Bijlage: %1$d stickers</string>
-    <string name="ForwardedSticker_many">Bijlage: %1$d stickers</string>
-    <string name="ForwardedSticker_other">Bijlage: %1$d stickers</string>
-    <string name="AndOther_zero">en %1$d anderen</string>
-    <string name="AndOther_one">en %1$d andere</string>
-    <string name="AndOther_two">en %1$d anderen</string>
-    <string name="AndOther_few">en %1$d anderen</string>
-    <string name="AndOther_many">en %1$d anderen</string>
-    <string name="AndOther_other">en %1$d anderen</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">dd MMM</string>
-    <string name="formatterYear">dd-MM-yy</string>
-    <string name="formatterYearMax">dd-MM-yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s om %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
deleted file mode 100644
index 77a6fee48..000000000
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--https://www.transifex.com/projects/p/telegram/language/pt_BR/members/-->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">Português (Brasil)</string>
-    <string name="LanguageNameInEnglish">Português (Brasil)</string>
-    <string name="LanguageCode">pt_BR</string>
-    <!--signin view-->
-    <string name="YourPhone">Seu número</string>
-    <string name="StartText">Confirme o código de seu país e preencha seu número de telefone.</string>
-    <string name="ChooseCountry">Escolha um país</string>
-    <string name="WrongCountry">Código do país incorreto</string>
-    <!--code enter view-->
-    <string name="YourCode">Seu código</string>
-    <string name="SentSmsCode">Enviamos uma SMS com um código de ativação para o seu telefone</string>
-    <string name="CallText">Vamos te ligar em %1$d:%2$02d</string>
-    <string name="Calling">Estamos te ligando...</string>
-    <string name="Code">Código</string>
-    <string name="WrongNumber">Número incorreto?</string>
-    <string name="DidNotGetTheCode">Não recebeu o código?</string>
-    <!--signup view-->
-    <string name="YourName">Seu nome</string>
-    <string name="RegisterText">Configure seu nome e sobrenome</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Nome (obrigatório)</string>
-    <string name="LastName">Sobrenome (opcional)</string>
-    <string name="CancelRegistration">Cancelar registro</string>
-    <!--chats view-->
-    <string name="Settings">Configurações</string>
-    <string name="Contacts">Contatos</string>
-    <string name="NewGroup">Novo Grupo</string>
-    <string name="Yesterday">ontem</string>
-    <string name="NoResult">Nenhum resultado</string>
-    <string name="NoChats">Ainda não há chats...</string>
-    <string name="NoChatsHelp">Comece a conversar pressionando o\nbotão \'Nova Mensagem\' no canto inferior direito\nou vá para a seção \'Contatos\'.</string>
-    <string name="WaitingForNetwork">Aguardando rede...</string>
-    <string name="Connecting">Conectando...</string>
-    <string name="Updating">Atualizando...</string>
-    <string name="NewSecretChat">Novo Chat Secreto</string>
-    <string name="AwaitingEncryption">Esperando %s se conectar...</string>
-    <string name="EncryptionRejected">Chat secreto cancelado</string>
-    <string name="EncryptionProcessing">Trocando chaves de criptografia...</string>
-    <string name="EncryptedChatStartedOutgoing">%s entrou no chat secreto</string>
-    <string name="EncryptedChatStartedIncoming">Você entrou no chat secreto</string>
-    <string name="ClearHistory">Limpar histórico</string>
-    <string name="ClearHistoryCache">Apagar do cache</string>
-    <string name="DeleteChat">Apagar e sair</string>
-    <string name="DeleteChatUser">Apagar conversa</string>
-    <string name="HiddenName">Conta Excluída</string>
-    <string name="SelectChat">Selecione um Chat</string>
-    <string name="PhotoTip">Toque e segure para ver</string>
-    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualizar o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
-    <string name="SearchMessages">MENSAGENS</string>
-    <string name="Search">Busca</string>
-    <string name="MuteNotifications">Silenciar notificações</string>
-    <string name="MuteFor">Silenciar por %1$s</string>
-    <string name="UnmuteNotifications">Restaurar Som</string>
-    <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativar</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">RECENTE</string>
-    <string name="LinkPreview">Prévia do link</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Promover a administrador</string>
-    <string name="DescriptionInfoMega">Você pode fornecer uma descrição opcional para seu grupo.</string>
-    <string name="LeaveMega">Sair do Grupo</string>
-    <string name="DeleteMega">Apagar Grupo</string>
-    <string name="LeaveMegaMenu">Sair do Grupo</string>
-    <string name="DeleteMegaMenu">Apagar Grupo</string>
-    <string name="MegaDeleteInfo">Você perderá todas as mensagens neste grupo.</string>
-    <string name="MegaAdminsInfo">Você pode adicionar administradores para ajudar você a gerenciar seu grupo. Toque e segure para removê-los.</string>
-    <string name="MegaDeleteAlert">Espere! Apagar este grupo removerá todos os membros e todas as mensagens serão perdidas. Apagar o grupo mesmo assim?</string>
-    <string name="ActionCreateMega">Grupo criado</string>
-    <string name="MegaAddedBy">un1 adicionou você ao grupo</string>
-    <string name="MegaLeaveAlert">Você tem certeza que deseja sair do grupo?</string>
-    <string name="GroupUserCantAdd">Desculpe, você não pode adicionar este usuário a grupos.</string>
-    <string name="GroupUserAddLimit">Desculpe, este grupo está cheio.</string>
-    <string name="GroupUserLeftError">Desculpe, este usuário decidiu sair deste grupo, de maneira que você não pode convidá-lo de volta.</string>
-    <string name="GroupUserCantAdmin">Desculpe, há administradores demais neste grupo.</string>
-    <string name="GroupUserCantBot">Desculpe, há bots demais neste grupo.</string>
-    <string name="ActionMigrateFromGroup">Este grupo foi atualizado para um supergrupo</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s foi atualizado para um supergrupo</string>
-    <string name="NoBlockedGroup">Usuários bloqueados são removidos do grupo e só podem voltar se convidados por um administrador. Convites por link não funcionam para eles.</string>
-    <string name="NewChannel">Novo Canal</string>
-    <string name="EnterChannelName">Nome do canal</string>
-    <string name="Comments">Comentários</string>
-    <string name="CommentsInfo">Se você habilitar comentários, pessoas poderão discutir seu post no canal.</string>
-    <string name="AddMutual">Adicionar contatos no canal</string>
-    <string name="ChannelUsernameHelp">Pessoas podem compartilhar esse link com outros e encontrar seu canal usando a busca do Telegram.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">link</string>
-    <string name="ChannelPrivateLinkHelp">Pessoas podem entrar em seu canal com este link. Você pode desativar o link quando quiser.</string>
-    <string name="DescriptionPlaceholder">Descrição</string>
-    <string name="DescriptionInfo">Você pode providenciar uma descrição opcional para o seu canal.</string>
-    <string name="ChannelPublic">Canal Público</string>
-    <string name="ChannelPublicInfo">Canais públicos podem ser encontrados na busca, qualquer um pode entrar.</string>
-    <string name="ChannelPrivate">Canal Privado</string>
-    <string name="ChannelPrivateInfo">Canais privados só podem entrar aqueles que possuírem um link de convite.</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Link de Convite</string>
-    <string name="ChannelAddMembers">Adicionar membros</string>
-    <string name="LeaveChannel">Sair do Canal</string>
-    <string name="LeaveChannelMenu">Sair do Canal</string>
-    <string name="ChannelSettings">Configurações</string>
-    <string name="ChannelJoin">ENTRAR</string>
-    <string name="OpenChannelProfile">Info do Canal</string>
-    <string name="ChannelBroadcast">Transmissão</string>
-    <string name="ChannelComment">Comentário</string>
-    <string name="ShowDiscussion">mostrar comentários</string>
-    <string name="ChannelAlertTitle">O que é um Canal?</string>
-    <string name="ChannelAlertText">Canais são uma nova ferramenta para transmissão de suas mensagens para grandes audiências.</string>
-    <string name="ChannelAlertCreate">CRIAR CANAL</string>
-    <string name="LinkInUse">Desculpe, esse nome já está em uso.</string>
-    <string name="LinkInvalid">Desculpe, esse nome é inválido.</string>
-    <string name="LinkInvalidShort">Nome do canal deve ter pelo menos 5 caracteres.</string>
-    <string name="LinkInvalidLong">O nome não pode exceder 32 caracteres.</string>
-    <string name="LinkInvalidStartNumber">Nome do canal não pode iniciar com número.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Verificando nome...</string>
-    <string name="LinkAvailable">%1$s está disponível.</string>
-    <string name="ChannelMembers">Membros</string>
-    <string name="ChannelBlockedUsers">Usuários bloqueados</string>
-    <string name="ChannelAdministrators">Administradores</string>
-    <string name="ChannelDelete">Apagar Canal</string>
-    <string name="ChannelDeleteMenu">Apagar Canal</string>
-    <string name="ChannelDeleteAlert">Espere! Apagando esse canal removerá todos os membros e todas as mensagens serão perdidas. Apagar assim mesmo?</string>
-    <string name="ChannelLeaveAlert">Você tem certeza que deseja sair do canal?</string>
-    <string name="ChannelDeleteInfo">Você perderá todas as mensagens desse canal.</string>
-    <string name="ChannelEdit">Editar</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Por favor, note que ao escolher um link público para o seu canal, qualquer um poderá encontrá-lo na busca e entrar.\n\nNão crie um link se você deseja que seu canal seja privado.</string>
-    <string name="ChannelPublicEmptyUsername">Por favor, escolha um link para o seu canal público, assim as pessoas poderão encontrá-lo na busca e compartilhar com outros.\n\nSe não estiver interessado, sugerimos que crie um canal privado.</string>
-    <string name="ActionCreateChannel">Canal criado</string>
-    <string name="ActionChannelChangedPhoto">Foto do canal alterada</string>
-    <string name="ActionChannelRemovedPhoto">Foto do canal removida</string>
-    <string name="ActionChannelChangedTitle">Nome do canal alterado para un2</string>
-    <string name="ChannelPublicLimitReached">Desculpe, você criou muitos canais públicos. Você pode criar um canal privado ou apagar um de seus canais existentes primeiro.</string>
-    <string name="ChannelModerator">Moderador</string>
-    <string name="ChannelCreator">Criador</string>
-    <string name="ChannelEditor">Administrador</string>
-    <string name="ChannelMute">SILENCIAR</string>
-    <string name="ChannelUnmute">RESTAURAR SOM</string>
-    <string name="ChannelAddAdmin">Adicionar Administrador</string>
-    <string name="ChannelInviteViaLink">Convidar via Link</string>
-    <string name="ChannelAddUserAdminAlert">Você tem certeza que deseja colocar %1$s como adiministrador?</string>
-    <string name="ChannelRemoveUserAdmin">Remover</string>
-    <string name="ChannelMembersInfo">Somente os administradores do canal podem ver essa lista.</string>
-    <string name="ChannelAdminNotParticipant">Esse usuário não entrou no seu canal ainda. Você deseja enviar um convite?</string>
-    <string name="ChannelLinkInfo">Qualquer um com Telegram instalado poderá entrar no seu canal abrindo este link.</string>
-    <string name="ChannelAdminsInfo">Você pode adicionar administradores para ajudar você a gerenciar seu canal. Aperte e segure para removê-los.</string>
-    <string name="ChannelJoinTo">Você deseja entrar no canal \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Desculpe, esta conversa não pode mais ser acessada.</string>
-    <string name="ChannelAddTo">Adicionar %1$s ao canal?</string>
-    <string name="ChannelUserLeftError">Desculpe, este usuário decidiu sair deste canal, então você não pode convidá-lo de volta.</string>
-    <string name="ChannelUserCantAdd">Desculpe, você não pode adicionar esse usuário em canais.</string>
-    <string name="ChannelUserCantAdmin">Desculpe, muitos administradores nesse canal.</string>
-    <string name="ChannelUserCantBot">Desculpe, há bots demais neste canal.</string>
-    <string name="ChannelUserAddLimit">Desculpe, você só pode adicionar os primeiros 200 membros ao canal. Note que um número ilimitado de pessoas podem entrar via link do canal.</string>
-    <string name="ChannelAddedBy">un1 adicionou você ao canal</string>
-    <string name="ChannelJoined">Você entrou no canal</string>
-    <string name="ChannelRemoveUser">Remover do canal</string>
-    <string name="ChannelCantSendMessage">Desculp, você não pode enviar mensagens para esse canal.</string>
-    <string name="ChannelAddedByNotification">%1$s adicionou você ao canal %2$s</string>
-    <string name="ChannelPhotoEditNotification">Canal %1$s atualizou a foto</string>
-    <string name="ChannelMessageGroupNoText">%1$s enviou uma mensagem ao canal %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s enviou uma foto para o canal %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s enviou um vídeo ao canal %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s enviou um contato ao canal %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s enviou uma localização ao canal %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s enviou um arquivo ao canal %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s enviou um GIF ao canal %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s enviou uma mensagem ao canal %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s enviou um sticker ao canal %2$s</string>
-    <string name="ChannelMessageNoText">%1$s postou uma mensagem</string>
-    <string name="ChannelMessagePhoto">%1$s postou uma foto</string>
-    <string name="ChannelMessageVideo">%1$s postou um vídeo</string>
-    <string name="ChannelMessageContact">%1$s postou um contato</string>
-    <string name="ChannelMessageMap">%1$s postou uma foto</string>
-    <string name="ChannelMessageDocument">%1$s postou um arquivo</string>
-    <string name="ChannelMessageGIF">%1$s postou um GIF</string>
-    <string name="ChannelMessageAudio">%1$s postou uma mensagem de voz</string>
-    <string name="ChannelMessageSticker">%1$s postou um sticker</string>
-    <string name="WhoCanAddMembers">Quem pode adicionar novos membros?</string>
-    <string name="WhoCanAddMembersAllMembers">Todos os Membros</string>
-    <string name="WhoCanAddMembersAdmins">Somente Administradores</string>
-    <string name="ChannelNotifyMembersInfoOn">Os membros serão notificados quando você postar</string>
-    <string name="ChannelNotifyMembersInfoOff">Os membros não serão notificados quando você postar</string>
-    <string name="ChannelSignMessages">Assinar Mensagens</string>
-    <string name="ChannelSignMessagesInfo">Adicionar nomes dos administradores nas mensagens postadas.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Nova Lista de Transmissão</string>
-    <string name="EnterListName">Digite o nome da lista</string>
-    <string name="YouCreatedBroadcastList">Você criou uma lista de transmissão</string>
-    <string name="AddRecipient">Adicionar destinatário</string>
-    <string name="KickFromBroadcast">Remover da lista de transmissão</string>
-    <!--audio view-->
-    <string name="NoAudio">Por favor, adicione arquivos à biblioteca de música de seu dispositivo para vê-los aqui.</string>
-    <string name="AttachMusic">Música</string>
-    <string name="AudioUnknownArtist">Artista desconhecido</string>
-    <string name="AudioUnknownTitle">Título desconhecido</string>
-    <!--documents view-->
-    <string name="SelectFile">Selecione um Arquivo</string>
-    <string name="FreeOfTotal">Disponível %1$s de %2$s</string>
-    <string name="UnknownError">Erro desconhecido</string>
-    <string name="AccessError">Erro de acesso</string>
-    <string name="NoFiles">Ainda não há arquivos</string>
-    <string name="FileUploadLimit">Tamanho do arquivo não deve ser maior que %1$s</string>
-    <string name="NotMounted">Armazenamento não está montado</string>
-    <string name="UsbActive">Transferência USB ativa</string>
-    <string name="InternalStorage">Armazenamento Interno</string>
-    <string name="ExternalStorage">Armazenamento Externo</string>
-    <string name="SystemRoot">Administrador do Sistema</string>
-    <string name="SdCard">Cartão SD</string>
-    <string name="Folder">Pasta</string>
-    <string name="GalleryInfo">Para enviar imagens sem compressão</string>
-    <!--chat view-->
-    <string name="Invisible">invisível</string>
-    <string name="Typing">escrevendo...</string>
-    <string name="IsTyping">está escrevendo...</string>
-    <string name="AreTyping">estão escrevendo...</string>
-    <string name="IsRecordingAudio">%1$s está gravando uma mensagem de voz...</string>
-    <string name="IsSendingPhoto">%1$s está enviando uma foto...</string>
-    <string name="IsSendingVideo">%1$s está enviando um vídeo...</string>
-    <string name="IsSendingFile">%1$s está enviando um arquivo...</string>
-    <string name="RecordingAudio">gravando mensagem de voz...</string>
-    <string name="SendingPhoto">enviando foto...</string>
-    <string name="SendingVideoStatus">enviando vídeo...</string>
-    <string name="SendingFile">enviando arquivo...</string>
-    <string name="GotAQuestion">Tem alguma dúvida\nsobre o Telegram?</string>
-    <string name="ChatTakePhoto">Tirar foto</string>
-    <string name="ChatGallery">Galeria</string>
-    <string name="ChatLocation">Localização</string>
-    <string name="ChatVideo">Vídeo</string>
-    <string name="ChatDocument">Arquivo</string>
-    <string name="ChatCamera">Câmera</string>
-    <string name="NoMessages">Ainda não há mensagens aqui...</string>
-    <string name="ForwardedMessage">Mensagem encaminhada</string>
-    <string name="From">De</string>
-    <string name="NoRecent">Nada recente</string>
-    <string name="Message">Mensagem</string>
-    <string name="TypeMessage">Mensagem</string>
-    <string name="ShareMyContactInfo">Compartilhar meu contato</string>
-    <string name="AddToContacts">Adicionar aos contatos</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para um chat secreto</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para um chat secreto.</string>
-    <string name="EncryptedDescriptionTitle">Chats Secretos:</string>
-    <string name="EncryptedDescription1">Criptografia de ponta-a-ponta</string>
-    <string name="EncryptedDescription2">Sem rastros nos servidores</string>
-    <string name="EncryptedDescription3">Timer de autodestruição</string>
-    <string name="EncryptedDescription4">Encaminhamento desativado</string>
-    <string name="YouWereKicked">Você foi removido deste grupo</string>
-    <string name="YouLeft">Você saiu deste grupo</string>
-    <string name="DeleteThisGroup">Apagar este grupo</string>
-    <string name="DeleteThisChat">Apagar este chat</string>
-    <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
-    <string name="SaveToDownloads">Salvar em downloads</string>
-    <string name="SaveToGIFs">Salvar em GIFs</string>
-    <string name="DeleteGif">Apagar GIF?</string>
-    <string name="SaveToMusic">Salvar em músicas</string>
-    <string name="ShareFile">Compartilhar</string>
-    <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
-    <string name="UnsupportedAttachment">Anexo não suportado</string>
-    <string name="SetTimer">Definir timer de autodestruição</string>
-    <string name="ServiceNotifications">Notificações de serviço</string>
-    <string name="GettingLinkInfo">Obtendo informações...</string>
-    <string name="OpenInBrowser">Abrir no Navegador</string>
-    <string name="CopyUrl">Copiar URL</string>
-    <string name="SendItems">Enviar %1$s</string>
-    <string name="OpenUrlAlert">Abrir URL em %1$s?</string>
-    <string name="ReportSpam">REPORTAR SPAM</string>
-    <string name="AddContactChat">ADICIONAR CONTATO</string>
-    <string name="ReportSpamAlert">Você tem certeza que deseja reportar esse usuário por spam?</string>
-    <string name="ReportSpamAlertGroup">Você tem certeza que deseja reportar esse grupo por spam?</string>
-    <string name="NobodyLikesSpam1">Desculpe, você pode enviar mensagens somente para contatos mútuos no momento.</string>
-    <string name="NobodyLikesSpam2">Desculpe, você só pode adicionar contatos mútuos à grupos no momento.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/br#no-consigo-enviar-mensagens-para-no-contatos</string>
-    <string name="MoreInfo">Mais informações</string>
-    <string name="ShareSendTo">Enviar para...</string>
-    <string name="TapHereGifs">Toque aqui para acessar os GIFs salvos</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
-    <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
-    <string name="MessageLifetimeYouRemoved">Você desativou o temporizador de autodestruição</string>
-    <string name="YouHaveNewMessage">Você tem uma nova mensagem</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s te enviou uma mensagem</string>
-    <string name="NotificationMessagePhoto">%1$s te enviou uma foto</string>
-    <string name="NotificationMessageVideo">%1$s te enviou um vídeo</string>
-    <string name="NotificationMessageContact">%1$s compartilhou um contato com você</string>
-    <string name="NotificationMessageMap">%1$s enviou uma localização</string>
-    <string name="NotificationMessageDocument">%1$s lhe enviou um arquivo</string>
-    <string name="NotificationMessageGif">%1$s te enviou um GIF</string>
-    <string name="NotificationMessageAudio">%1$s enviou uma mensagem de voz</string>
-    <string name="NotificationMessageSticker">%1$s lhe enviou um sticker</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s enviou uma mensagem para o grupo %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s enviou uma foto para o grupo %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s enviou um vídeo para o grupo %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s compartilhou um contato para o grupo %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s enviou uma localização para o grupo %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s enviou um arquivo para o grupo %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s enviou um GIF para o grupo %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s enviou uma mensagem para o grupo %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s enviou um sticker ao grupo %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s convidou você para o grupo %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s editou o nome do grupo %2$s</string>
-    <string name="NotificationEditedGroupPhoto">%1$s editou a foto do grupo %2$s</string>
-    <string name="NotificationGroupAddMember">%1$s convidou %3$s para o grupo %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s retornou ao grupo %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s removeu %3$s do grupo %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s removeu você do grupo %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s saiu do grupo %2$s</string>
-    <string name="NotificationContactJoined">%1$s entrou para o Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos que alguém acessou a sua conta a partir de um novo aparelho em %2$s\n\nAparelho: %3$s\nLocalização: %4$s\n\nSe não foi você, você pode ir em Configurações - Privacidade e Segurança - Sessões, e terminar aquela sessão.\n\nSe você acha que alguém acessou a sua conta contra a sua vontade, você pode habilitar a verificação em duas etapas nas configurações de Privacidade e Segurança.\n\nAtenciosamente,\nEquipe Telegram</string>
-    <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s entrou para o grupo %2$s via link de convite</string>
-    <string name="Reply">Responder</string>
-    <string name="ReplyToGroup">Responder para %1$s</string>
-    <string name="ReplyToUser">Responder para %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Selecionar Contato</string>
-    <string name="NoContacts">Ainda não há contatos</string>
-    <string name="InviteText">Ei, vamos mudar para o Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">às</string>
-    <string name="YesterdayAt">ontem às</string>
-    <string name="Online">online</string>
-    <string name="LastSeen">visto</string>
-    <string name="LastSeenDate">visto</string>
-    <string name="LastSeenNow">visto agora mesmo</string>
-    <string name="InviteFriends">Convidar Amigos</string>
-    <string name="GlobalSearch">BUSCA GLOBAL</string>
-    <string name="Lately">visto recentemente</string>
-    <string name="WithinAWeek">visto na última semana</string>
-    <string name="WithinAMonth">visto no último mês</string>
-    <string name="ALongTimeAgo">visto há muito tempo</string>
-    <string name="NewMessageTitle">Nova Mensagem</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Enviar mensagem para...</string>
-    <string name="SoftUserLimitAlert">Você poderá adicionar mais usuários após finalizar a criação do grupo e convertê-lo em um supergrupo.</string>
-    <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
-    <string name="GroupName">Nome do grupo</string>
-    <string name="MembersCount">%1$d/%2$d membros</string>
-    <string name="JoinToGroup">Você deseja entrar no chat \'%1$s\'?</string>
-    <string name="JoinToGroupErrorFull">Desculpe, este grupo já está lotado.</string>
-    <string name="JoinToGroupErrorNotExist">Desculpe, esse chat não existe.</string>
-    <string name="LinkCopied">Link copiado para área de transferência</string>
-    <string name="InviteToGroupByLink">Convidar para o Grupo via Link</string>
-    <string name="InviteLink">Link de Convite</string>
-    <string name="RevokeAlert">Você tem certeza que deseja desativar o link? Uma vez feito, ninguém conseguirá entrar usando-o.</string>
-    <string name="RevokeAlertNewLink">Este link de convite está inativo. Um novo link foi gerado.</string>
-    <string name="RevokeButton">Desativar</string>
-    <string name="RevokeLink">Desativar Link</string>
-    <string name="CopyLink">Copiar Link</string>
-    <string name="ShareLink">Compartilhar Link</string>
-    <string name="LinkInfo">Qualquer um com Telegram instalado poderá entrar no seu grupo abrindo este link.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Administradores de Conversas</string>
-    <string name="SetAdminsAll">Todos São Administradores</string>
-    <string name="SetAdminsAllInfo">Todos os membros podem adicionar novos membros, editar o nome e a foto do grupo.</string>
-    <string name="SetAdminsNotAllInfo">Somente administradores podem adicionar e remover membros, editar nome foto do grupo.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Mídia Compartilhada</string>
-    <string name="SETTINGS">Configurações</string>
-    <string name="AddMember">Adicionar membro</string>
-    <string name="SetAdmins">Definir administradores</string>
-    <string name="DeleteAndExit">Apagar e sair do grupo</string>
-    <string name="Notifications">Notificações</string>
-    <string name="KickFromGroup">Remover do grupo</string>
-    <string name="ConvertGroup">Atualizar para Supergrupo</string>
-    <string name="ConvertGroupAlert">Por favor note que os membros do grupo precisarão atualizar o aplicativo do Telegram até a última versão para verem seu supergrupo. Você tem certeza que deseja atualizar este grupo?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Limite de membros atingido.<![CDATA[</b>]]>\n\nPara ir além do limite e ter funções adcionais, atualize para um supergrupo:\n\n• Supergrupos podem ter até %1$s\n• Novos membros veêm todo o histórico de conversas\n• Administradores deletam mensagens para todos\n• Notificações são silenciadas por padrão</string>
-    <!--contact info view-->
-    <string name="ShareContact">Compartilhar</string>
-    <string name="AddContact">Adicionar</string>
-    <string name="AddContactTitle">Adicionar contato</string>
-    <string name="BlockContact">Bloquear</string>
-    <string name="EditContact">Editar</string>
-    <string name="DeleteContact">Apagar</string>
-    <string name="PhoneHome">Início</string>
-    <string name="PhoneMobile">Celular</string>
-    <string name="PhoneWork">Trabalho</string>
-    <string name="PhoneOther">Outro</string>
-    <string name="PhoneMain">Principal</string>
-    <string name="StartEncryptedChat">Iniciar Chat Secreto</string>
-    <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="EncryptionKey">Chave criptográfica</string>
-    <string name="MessageLifetime">Tempo de autodestruição</string>
-    <string name="ShortMessageLifetimeForever">Desativado</string>
-    <string name="EncryptionKeyDescription">Essa imagem e texto foram derivadas da chave criptográfica para este chat secreto com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se você vê o mesmo no dispositivo de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, a criptografia ponta a ponta está garantida.<![CDATA[<br><br>]]>Leia mais em telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq/br#chats-secretos</string>
-    <string name="NumberUnknown">Desconhecido</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Telefone</string>
-    <!--usernames-->
-    <string name="Username">Nome de Usuário</string>
-    <string name="UsernamePlaceholder">Seu nome de usuário</string>
-    <string name="UsernameInUse">Desculpe, este usuário já existe.</string>
-    <string name="UsernameInvalid">Desculpe, este usuário é inválido.</string>
-    <string name="UsernameInvalidShort">O nome de usuário deve ter pelo menos 5 caracteres.</string>
-    <string name="UsernameInvalidLong">O nome de usuário não pode exceder 32 caracteres.</string>
-    <string name="UsernameInvalidStartNumber">Desculpe, o nome de usuário não pode começar com um número.</string>
-    <string name="UsernameHelp">Você pode escolher um nome de usuário no <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Assim, outras pessoas poderão te encontrar pelo nome de usuário e entrar em contato sem precisar saber seu telefone. <![CDATA[<br><br>]]>Você pode usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underline. O tamanho mínimo é <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
-    <string name="UsernameChecking">Verificando nome de usuário...</string>
-    <string name="UsernameAvailable">%1$s está disponível.</string>
-    <string name="UsernameEmpty">Nenhum</string>
-    <string name="ErrorOccurred">Ocorreu um erro.</string>
-    <!--stickers view-->
-    <string name="Stickers">Stickers</string>
-    <string name="StickersInfo">Artistas são bem vindos a adicionar seus próprios pacotes de stickers usando o @stickers bot.\n\nUsuários podem adicionar stickers com um clique sobre eles e então escolher \"Adicionar aos Stickers\".</string>
-    <string name="AddStickers">Adicionar Stickers</string>
-    <string name="AddToStickers">Adicionar aos Stickers</string>
-    <string name="AddStickersNotFound">Stickers não encontrados</string>
-    <string name="StickersRemoved">Stickers removidos</string>
-    <string name="AddStickersInstalled">Novos stickers adicionados</string>
-    <string name="StickersHide">Esconder</string>
-    <string name="StickersShow">Mostrar</string>
-    <string name="StickersShare">Compartilhar</string>
-    <string name="StickersCopy">Copiar link</string>
-    <string name="StickersRemove">Remover</string>
-    <string name="NoStickers">Nenhum sticker</string>
-    <string name="TooMuchStickersets">Desculpe, você alcançou o limite máximo de pacotes de sticker.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Restaurar todas as configurações de notificação</string>
-    <string name="TextSize">Tamanho do texto nas mensagens</string>
-    <string name="AskAQuestion">Fazer uma pergunta</string>
-    <string name="EnableAnimations">Permitir Animações</string>
-    <string name="Unblock">Desbloquear</string>
-    <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
-    <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="MessageNotifications">Notificações de mensagens</string>
-    <string name="Alert">Alerta</string>
-    <string name="MessagePreview">Visualização de Mensagem</string>
-    <string name="GroupNotifications">Notificações de grupo</string>
-    <string name="Sound">Som</string>
-    <string name="InAppNotifications">Notificações no aplicativo</string>
-    <string name="InAppSounds">Sons no Aplicativo</string>
-    <string name="InAppVibrate">Vibração no Aplicativo</string>
-    <string name="Vibrate">Vibrar</string>
-    <string name="InAppPreview">Visualização no Aplicativo</string>
-    <string name="Reset">Limpar</string>
-    <string name="ResetAllNotifications">Limpar todas as notificações</string>
-    <string name="UndoAllCustom">Desfazer todas as configurações de notificação para todos os seus contatos e grupos</string>
-    <string name="NotificationsAndSounds">Notificações e Sons</string>
-    <string name="BlockedUsers">Usuários bloqueados</string>
-    <string name="LogOut">Sair</string>
-    <string name="NoSound">Sem som</string>
-    <string name="Default">Padrão</string>
-    <string name="Support">Suporte</string>
-    <string name="OnlyIfSilent">Somente no silencioso </string>
-    <string name="ChatBackground">Papel de Parede</string>
-    <string name="MessagesSettings">Mensagens</string>
-    <string name="SendByEnter">Enviar usando \'Enter\'</string>
-    <string name="TerminateAllSessions">Terminar todas as outras sessões</string>
-    <string name="Events">Eventos</string>
-    <string name="ContactJoined">Contato entrou para o Telegram</string>
-    <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor entenda que o suporte do Telegram é feito por voluntários. Tentaremos responder o mais rápido possível, mas poderemos demorar um pouco.<![CDATA[<br><br>]]>Por favor verifique a <![CDATA[<a href=\"https://telegram.org/faq#general\">página de perguntas frequentes do Telegram</a>]]>: há dicas e respostas para a maioria dos <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">problemas</a>]]>.</string>
-    <string name="AskButton">Pergunte a um voluntário</string>
-    <string name="TelegramFaq">Perguntas frequentes</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
-    <string name="DeleteLocalization">Apagar localização?</string>
-    <string name="IncorrectLocalization">Arquivo de localização incorreto</string>
-    <string name="Enabled">Ativado</string>
-    <string name="Disabled">Desativado</string>
-    <string name="NotificationsService">Serviço de Notificações</string>
-    <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play for suficiente para você, você pode desativar o \"Serviço de Notificações\". Porém, recomendamos deixá-lo ativo para manter o aplicativo executando em segundo plano e receber notificações instantaneamente.</string>
-    <string name="SortBy">Ordenar Por</string>
-    <string name="ImportContacts">Importar Contatos</string>
-    <string name="SortFirstName">Primeiro nome</string>
-    <string name="SortLastName">Sobrenome</string>
-    <string name="LedColor">Cor do LED</string>
-    <string name="PopupNotification">Notificações Pop-up</string>
-    <string name="NoPopup">Sem pop-up</string>
-    <string name="OnlyWhenScreenOn">Somente com a tela ligada</string>
-    <string name="OnlyWhenScreenOff">Somente com a tela desligada</string>
-    <string name="AlwaysShowPopup">Sempre mostrar pop-up</string>
-    <string name="BadgeNumber">Contador no Ícone</string>
-    <string name="Short">Curta</string>
-    <string name="Long">Longa</string>
-    <string name="SystemDefault">Padrão do sistema</string>
-    <string name="SettingsDefault">Configurações padrão</string>
-    <string name="AutomaticMediaDownload">Download automático de mídia</string>
-    <string name="WhenUsingMobileData">Ao usar dados móveis</string>
-    <string name="WhenConnectedOnWiFi">Quando conectado em Wi-Fi</string>
-    <string name="WhenRoaming">Quando em roaming</string>
-    <string name="NoMediaAutoDownload">Sem mídia</string>
-    <string name="AutoplayGifs">Auto-Reproduzir GIFs</string>
-    <string name="RaiseToSpeak">Levantar para Falar</string>
-    <string name="SaveToGallerySettings">Salvar na galeria</string>
-    <string name="EditName">Editar nome</string>
-    <string name="NotificationsPriority">Prioridade</string>
-    <string name="NotificationsPriorityDefault">Padrão</string>
-    <string name="NotificationsPriorityLow">Baixa</string>
-    <string name="NotificationsPriorityHigh">Alta</string>
-    <string name="NotificationsPriorityMax">Máxima</string>
-    <string name="RepeatNotificationsNever">Nunca</string>
-    <string name="RepeatNotifications">Repetir Notificações</string>
-    <string name="PhoneNumberHelp">Você pode alterar seu número do Telegram aqui. Sua conta e todos os seus dados — mensagens, mídia, contatos, etc. serão movidos para o novo número.\n\n<![CDATA[<b>Importante:</b>]]> todos os contatos do Telegram terão seu <![CDATA[<b>novo número</b>]]> adicionado às suas lista de contatos, desde que eles tenham seu número antigo e você não os tenha bloqueado no Telegram.</string>
-    <string name="PhoneNumberAlert">Todos os seus contatos do Telegram terão seu novo número adicionado às suas listas de contatos, desde que eles tenham seu antigo número e você não os tenha bloqueado no Telegram.</string>
-    <string name="PhoneNumberChange">ALTERAR NÚMERO</string>
-    <string name="ChangePhoneNewNumber">Novo número</string>
-    <string name="ChangePhoneHelp">Vamos enviar uma SMS com um código de confirmação para o seu novo número.</string>
-    <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
-    <string name="NotificationsOther">Outro</string>
-    <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativado</string>
-    <string name="LedDisabled">Desativado</string>
-    <string name="RepeatDisabled">Desativado</string>
-    <string name="InChatSound">Sons no Chat</string>
-    <string name="SoundDefault">Padrão</string>
-    <string name="VibrationDefault">Padrão</string>
-    <string name="SmartNotifications">Notificações Inteligentes</string>
-    <string name="SmartNotificationsDisabled">Desativado</string>
-    <string name="SmartNotificationsInfo">Tocar no máximo %1$s a cada %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Tocar no máximo</string>
-    <string name="SmartNotificationsTimes">vezes</string>
-    <string name="SmartNotificationsWithin">a cada</string>
-    <string name="SmartNotificationsMinutes">minutos</string>
-    <string name="SecretWebPage">Pré-visualização de Link</string>
-    <string name="SecretChat">Chats secretos</string>
-    <!--cache view-->
-    <string name="CacheSettings">Configurações de Cache</string>
-    <string name="LocalDatabase">Banco de Dados Local</string>
-    <string name="LocalDatabaseClear">Limpar todos os textos em cache?</string>
-    <string name="LocalDatabaseInfo">Limpar o banco de dados local apagará todos os textos das mensagens em cache e compactará o banco de dados para economizar espaço. O Telegram precisa de alguns dados para trabalhar, então o tamanho do banco não vai chegar a zero.\n\nEssa operação pode demorar alguns minutos para ser concluída.</string>
-    <string name="ClearMediaCache">Limpar Cache</string>
-    <string name="CacheClear">Limpar</string>
-    <string name="CalculatingSize">Calculando...</string>
-    <string name="LocalDocumentCache">Documentos</string>
-    <string name="LocalPhotoCache">Fotos</string>
-    <string name="LocalAudioCache">Mensagens de voz</string>
-    <string name="LocalVideoCache">Vídeos</string>
-    <string name="LocalMusicCache">Música</string>
-    <string name="LocalCache">Outros arquivos</string>
-    <string name="CacheEmpty">Vazio</string>
-    <string name="KeepMedia">Manter Mídias</string>
-    <string name="KeepMediaInfo">Fotos, vídeos e outros arquivos da nuvem que você <![CDATA[<b>não acessou</b>]]> durante esse período serão removidos deste dispositivo para economizar espaço em disco.\n\nTodas as mídias permanecerão na nuvem do Telegram e poderão ser baixadas novamente conforme necessário.</string>
-    <string name="KeepMediaForever">Permanentemente</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Sessões Ativas</string>
-    <string name="CurrentSession">Sessão atual</string>
-    <string name="NoOtherSessions">Nenhuma outra sessão ativa</string>
-    <string name="NoOtherSessionsInfo">Você pode entrar no Telegram a partir de outro celular, tablet ou computador usando o mesmo número de telefone. Todos os seus dados serão sincronizados instantaneamente.</string>
-    <string name="OtherSessions">Sessões Ativas</string>
-    <string name="SessionsInfo">Controle suas sessões em outros aparelhos.</string>
-    <string name="TerminateSessionInfo">Toque em uma sessão para terminá-la.</string>
-    <string name="TerminateSessionQuestion">Encerrar essa sessão?</string>
-    <string name="UnofficialApp">aplicativo não oficial</string>
-    <!--passcode view-->
-    <string name="Passcode">Senha de Bloqueio</string>
-    <string name="ChangePasscode">Alterar Senha</string>
-    <string name="ChangePasscodeInfo">Quando você define uma senha adicional, um ícone de cadeado aparece na página de chats. Clique para bloquear e desbloquear o app.\n\nNota: se você esquecer a sua senha, terá de excluir e reinstalar o app. Todos os chats secretos serão perdidos.</string>
-    <string name="ChangePasscodeAlert">Você verá o ícone do cadeado na página de chats. Clique para bloquear seu app do Telegram com a sua nova senha.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Senha</string>
-    <string name="EnterCurrentPasscode">Insira sua senha atual</string>
-    <string name="EnterNewFirstPasscode">Insira uma senha</string>
-    <string name="EnterNewPasscode">Insira sua nova senha</string>
-    <string name="EnterYourPasscode">Insira sua senha</string>
-    <string name="ReEnterYourPasscode">Re-insira sua nova senha</string>
-    <string name="InvalidPasscode">Senha inválida</string>
-    <string name="PasscodeDoNotMatch">As senhas não são iguais</string>
-    <string name="AutoLock">Auto-bloquear</string>
-    <string name="AutoLockInfo">Requisitar senha se estiver ausente por muito tempo.</string>
-    <string name="AutoLockInTime">em %1$s</string>
-    <string name="AutoLockDisabled">Desativado</string>
-    <string name="UnlockFingerprint">Desbloquear com Impressão Digital</string>
-    <string name="FingerprintInfo">Confirme a impressão digital para continuar</string>
-    <string name="FingerprintHelp">Toque o sensor</string>
-    <string name="FingerprintNotRecognized">Impressão digital não reconhecida.</string>
-    <!--media view-->
-    <string name="NoMedia">Compartilhar fotos e vídeos no chat e acessá-los em qualquer um de seus dispositivos.</string>
-    <string name="DocumentsTitle">Arquivos Compartilhados</string>
-    <string name="SharedMediaTitle">Mídia Compartilhada</string>
-    <string name="LinksTitle">Links Compartilhados</string>
-    <string name="AudioTitle">Música Compartilhada</string>
-    <string name="NoSharedAudio">Compartilhe músicas nesse chat e os acesse de qualquer um de seus dispositivos.</string>
-    <string name="NoSharedFiles">Compartilhar arquivos e documentos no chat e acessá-los de qualquer um de seus dispositivos.</string>
-    <string name="NoSharedLinks">Compartilhe links nesse chat e os acesse de qualquer um de seus dispositivos</string>
-    <!--map view-->
-    <string name="Map">Mapa</string>
-    <string name="Satellite">Satélite</string>
-    <string name="Hybrid">Híbrido</string>
-    <string name="MetersAway">m de distância</string>
-    <string name="KMetersAway">km de distância</string>
-    <string name="SendLocation">Enviar sua localização atual</string>
-    <string name="SendSelectedLocation">Enviar localização selecionada</string>
-    <string name="ShareLocation">Localização</string>
-    <string name="AccurateTo">Precisão de %1$s</string>
-    <string name="NearbyPlaces">OU ESCOLHA UM LUGAR</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Mostrar todas as mídias</string>
-    <string name="SaveToGallery">Salvar na galeria</string>
-    <string name="Of">%1$d de %2$d</string>
-    <string name="Gallery">Galeria</string>
-    <string name="AllPhotos">Todas as Fotos</string>
-    <string name="AllVideo">Todos os Vídeos</string>
-    <string name="NoPhotos">Ainda não há fotos</string>
-    <string name="NoVideo">Nenhum vídeo ainda</string>
-    <string name="PleaseDownload">Baixar o vídeo primeiro</string>
-    <string name="NoRecentPhotos">Nenhuma foto recente</string>
-    <string name="NoRecentGIFs">Nenhum GIF recente</string>
-    <string name="SearchImages">BUSCAR IMAGENS</string>
-    <string name="SearchImagesInfo">BUSCA GLOBAL</string>
-    <string name="SearchGifs">BUSCAR GIFS</string>
-    <string name="SearchImagesTitle">Procurar na web</string>
-    <string name="SearchGifsTitle">Procurar GIFs</string>
-    <string name="CropImage">Recortar imagem</string>
-    <string name="EditImage">Editar imagem</string>
-    <string name="Enhance">Realçar</string>
-    <string name="Highlights">Luzes</string>
-    <string name="Contrast">Contraste</string>
-    <string name="Exposure">Exposição</string>
-    <string name="Warmth">Calor</string>
-    <string name="Saturation">Saturação</string>
-    <string name="Vignette">Vignette</string>
-    <string name="Shadows">Sombras</string>
-    <string name="Grain">Granulado</string>
-    <string name="Sharpen">Nitidez</string>
-    <string name="Fade">Fade</string>
-    <string name="Tint">Matiz</string>
-    <string name="TintShadows">SOMBRAS</string>
-    <string name="TintHighlights">LUZES</string>
-    <string name="Curves">Curvas</string>
-    <string name="CurvesAll">TUDO</string>
-    <string name="CurvesRed">VERMELHO</string>
-    <string name="CurvesGreen">VERDE</string>
-    <string name="CurvesBlue">AZUL</string>
-    <string name="Blur">Desfoque</string>
-    <string name="BlurOff">Desativado</string>
-    <string name="BlurLinear">Linear</string>
-    <string name="BlurRadial">Radial</string>
-    <string name="AreYouSureDeletePhoto">Você tem certeza que deseja apagar esta foto?</string>
-    <string name="AreYouSureDeleteVideo">Você tem certeza que deseja apagar este vídeo?</string>
-    <string name="DiscardChanges">Descartar mudanças?</string>
-    <string name="ClearSearch">Limpar histórico de busca?</string>
-    <string name="ClearButton">Limpar</string>
-    <string name="PickerPhotos">Fotos</string>
-    <string name="PickerVideo">Vídeo</string>
-    <string name="AddCaption">Adicionar legenda...</string>
-    <string name="PhotoCaption">Legenda da Foto</string>
-    <string name="VideoCaption">Legenda do Vídeo</string>
-    <string name="Caption">Legenda</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Verificação em duas etapas</string>
-    <string name="SetAdditionalPassword">Configurar senha adicional</string>
-    <string name="SetAdditionalPasswordInfo">Você pode configurar uma senha que será requisitada quando você entrar em um novo aparelho, além do código que você receberá por SMS. </string>
-    <string name="YourPassword">Sua senha</string>
-    <string name="PleaseEnterCurrentPassword">Por favor, digite a sua senha</string>
-    <string name="PleaseEnterFirstPassword">Insira uma senha</string>
-    <string name="PleaseEnterPassword">Por favor, digite a sua nova senha</string>
-    <string name="PleaseReEnterPassword">Por favor, digite sua senha novamente</string>
-    <string name="RecoveryEmail">E-mail de recuperação</string>
-    <string name="YourEmail">Seu e-mail</string>
-    <string name="YourEmailInfo">Por favor, adicione um e-mail válido. Essa é a única forma de recuperar uma senha esquecida.</string>
-    <string name="YourEmailSkip">Pular</string>
-    <string name="YourEmailSkipWarning">Atenção</string>
-    <string name="YourEmailSkipWarningText">É sério!\n\nSe você esquecer a sua senha, você perderá o acesso a sua conta do Telegram. Não há nenhuma forma de recuperá-la.</string>
-    <string name="YourEmailAlmostThere">Quase lá!</string>
-    <string name="YourEmailAlmostThereText">Por favor, verifique o seu e-mail (não esqueça da pasta spam) para completar a configuração da verificação em duas etapas.</string>
-    <string name="YourPasswordSuccess">Pronto!</string>
-    <string name="YourPasswordSuccessText">A sua senha para a verificação em duas etapas foi ativada.</string>
-    <string name="ChangePassword">Alterar senha</string>
-    <string name="TurnPasswordOff">Desabilitar senha</string>
-    <string name="SetRecoveryEmail">Configurar e-mail de recuperação</string>
-    <string name="ChangeRecoveryEmail">Alterar e-mail de recuperação.</string>
-    <string name="TurnPasswordOffQuestion">Você tem certeza que quer desabilitar a sua senha?</string>
-    <string name="PasswordHint">Dica da senha</string>
-    <string name="PasswordHintText">Por favor, crie uma dica para a sua senha</string>
-    <string name="PasswordDoNotMatch">As senhas não são iguais</string>
-    <string name="AbortPassword">Cancelar a configuração da verificação em duas etapas</string>
-    <string name="EmailPasswordConfirmText">Por favor, siga os seguintes passos para completar a configuração da autenticação em duas etapas:\n\n1. Verifique seu e-mail ( não esqueça da pasta spam)\n%1$s\n\n2. Clique no link de validação.</string>
-    <string name="PasswordAsHintError">A dica deve ser diferente da sua senha</string>
-    <string name="PasswordEmailInvalid">E-mail inválido</string>
-    <string name="RestorePasswordNoEmailTitle">Desculpe</string>
-    <string name="RestorePasswordNoEmailText">Como você não indicou um e-mail de recuperação quando configurou a sua senha, as únicas opções restantes são lembrar a senha ou apagar a sua conta.</string>
-    <string name="RestoreEmailSent">O código de recuperação foi enviado para o e-mail fornecido: \n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Por favor, verifique o seu e-mail e digite aqui o código de 6 dígitos recebido.</string>
-    <string name="RestoreEmailTrouble">Está tendo problemas para acessar seu e-mail %1$s?</string>
-    <string name="RestoreEmailTroubleText">Se você não puder acessar o seu e-mail, as suas únicas opções são lembrar a senha ou apagar a sua conta.</string>
-    <string name="ResetMyAccount">APAGAR MINHA CONTA</string>
-    <string name="ResetMyAccountText">Se você prosseguir e apagar a sua conta, você perderá todos os seus chats e mensagens, assim como todas as suas mídias e arquivos compartilhados.</string>
-    <string name="ResetMyAccountWarning">Aviso</string>
-    <string name="ResetMyAccountWarningText">Essa ação não pode ser revertida ou desfeita.\n\nSe você apagar a sua conta, todas as suas mensagens e chats serão apagados.</string>
-    <string name="ResetMyAccountWarningReset">Apagar</string>
-    <string name="LoginPassword">Senha</string>
-    <string name="LoginPasswordText">Você habilitou a verificação em duas etapas, a sua conta está protegida com uma senha adicional.</string>
-    <string name="ForgotPassword">Esqueceu a senha?</string>
-    <string name="PasswordRecovery">Recuperação de senha</string>
-    <string name="PasswordCode">Código</string>
-    <string name="PasswordReset">Senha desativada</string>
-    <string name="EnabledPasswordText">Você habilitou a verificação em duas etapas. Toda vez que você entrar na sua conta em um novo aparelho, será preciso digitar a senha que você configurar aqui.</string>
-    <string name="PendingEmailText">O seu e-mail de recuperação %1$s ainda não está ativo e aguarda confirmação.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacidade e Segurança</string>
-    <string name="PrivacyTitle">Privacidade</string>
-    <string name="PrivacyLastSeen">Último Acesso</string>
-    <string name="LastSeenEverybody">Todos</string>
-    <string name="LastSeenContacts">Meus Contatos</string>
-    <string name="LastSeenNobody">Nenhum</string>
-    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
-    <string name="LastSeenContactsPlus">Meus Contatos (+%1$d)</string>
-    <string name="LastSeenContactsMinus">Meus Contatos (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">Meus Contatos (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Nenhum (+%1$d)</string>
-    <string name="SecurityTitle">Segurança</string>
-    <string name="DeleteAccountTitle">Auto-destruição da conta</string>
-    <string name="DeleteAccountIfAwayFor">Se você estiver inativo por</string>
-    <string name="DeleteAccountHelp">Se você não acessar sua conta ao menos uma vez neste período, sua conta será excluída com seus grupos, mensagens e contatos.</string>
-    <string name="DeleteAccountNowConfirmation">Excluir sua conta?</string>
-    <string name="LastSeenHelp">Alterar quem pode ver o seu Último Acesso.</string>
-    <string name="LastSeenTitle">Quem pode ver o seu Último Acesso?</string>
-    <string name="AddExceptions">Adicionar exceções</string>
-    <string name="CustomHelp">Importante: você não poderá ver quando foi o Último Acesso das pessoas com quem você não compartilha o seu Último Acesso. Você visualizará o Último acesso aproximado (recentemente, dentro de uma semana, dentro de um mês).</string>
-    <string name="AlwaysShareWith">Sempre Mostrar Para</string>
-    <string name="NeverShareWith">Nunca Mostrar Para</string>
-    <string name="CustomShareSettingsHelp">Estas configurações irão substituir os valores anteriores.</string>
-    <string name="AlwaysShareWithTitle">Sempre Mostrar</string>
-    <string name="AlwaysShareWithPlaceholder">Sempre compartilhar para os usuários...</string>
-    <string name="NeverShareWithTitle">Nunca Mostrar</string>
-    <string name="NeverShareWithPlaceholder">Nunca mostrar para os usuários...</string>
-    <string name="EmpryUsersPlaceholder">Adicionar Usuários</string>
-    <string name="PrivacyFloodControlError">Desculpe, muitas solicitações. Impossível alterar os ajustes de privacidade agora, por favor aguarde.</string>
-    <string name="ClearOtherSessionsHelp">Sair de todos os dispositivos, exceto este.</string>
-    <string name="RemoveFromListText">Toque e segure no usuário para remover.</string>
-    <string name="GroupsAndChannels">Grupos</string>
-    <string name="WhoCanAddMe">Quem pode me adicionar em grupos?</string>
-    <string name="WhoCanAddMeInfo">Você pode restringir quem pode te adicionar em grupos ou canais com precisão.</string>
-    <string name="AlwaysAllow">Sempre Permitir</string>
-    <string name="NeverAllow">Nunca Permitir</string>
-    <string name="AlwaysAllowPlaceholder">Sempre permitir...</string>
-    <string name="NeverAllowPlaceholder">Nunca permitir...</string>
-    <string name="CustomShareInfo">Esses usuários poderão ou não te adicionar em grupos e canais, dependendo de suas configurações.</string>
-    <string name="GroupsAndChannelsHelp">Alterar quem pode te adicionar em grupos ou canais.</string>
-    <string name="InviteToGroupError">Desculpe, você não pode adicionar esse usuário a grupos devido às configurações de privacidade dele.</string>
-    <string name="InviteToChannelError">Desculpe, você não pode adicionar esse usuário a canais devido às configurações de privacidade dele.</string>
-    <string name="CreateGroupError">Você não pode criar um grupo com esses usuários devido as configurações de privacidade deles.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Editar Vídeo</string>
-    <string name="OriginalVideo">Vídeo Original</string>
-    <string name="EditedVideo">Vídeo Editado</string>
-    <string name="SendingVideo">Enviando vídeo...</string>
-    <string name="CompressVideo">Compactar Vídeo</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Compartilhar</string>
-    <string name="BotInvite">Adicionar Ao Grupo</string>
-    <string name="BotSettings">Configurações</string>
-    <string name="BotHelp">Ajuda</string>
-    <string name="BotStatusRead">tem acesso às mensagens</string>
-    <string name="BotStatusCantRead">não tem acesso às mensagens</string>
-    <string name="BotInfoTitle">O que esse bot pode fazer?</string>
-    <string name="BotStart">COMEÇAR</string>
-    <string name="BotUnblock">REINICIAR</string>
-    <string name="BotStop">Parar bot</string>
-    <string name="BotRestart">Reiniciar bot</string>
-    <!--button titles-->
-    <string name="Next">Próximo</string>
-    <string name="Back">Voltar</string>
-    <string name="Done">Concluído</string>
-    <string name="Open">Abrir</string>
-    <string name="Save">Salvar</string>
-    <string name="Cancel">Cancelar</string>
-    <string name="Close">Fechar</string>
-    <string name="Add">Adicionar</string>
-    <string name="Edit">Editar</string>
-    <string name="Send">Enviar</string>
-    <string name="Call">Ligar</string>
-    <string name="Copy">Copiar</string>
-    <string name="Delete">Apagar</string>
-    <string name="DeleteAndStop">Apagar e parar</string>
-    <string name="Forward">Encaminhar</string>
-    <string name="Retry">Tentar novamente</string>
-    <string name="FromCamera">Câmera</string>
-    <string name="FromGalley">Galeria</string>
-    <string name="DeletePhoto">Apagar foto</string>
-    <string name="Set">Aplicar</string>
-    <string name="OK">OK</string>
-    <string name="Crop">CORTAR</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Você entrou para o grupo via link de convite</string>
-    <string name="ActionInviteUser">un1 entrou para o grupo via link de convite</string>
-    <string name="ActionKickUser">un1 removeu un2</string>
-    <string name="ActionLeftUser">un1 deixou o grupo</string>
-    <string name="ActionAddUser">un1 adicionou un2</string>
-    <string name="ActionRemovedPhoto">un1 removeu foto do grupo</string>
-    <string name="ActionChangedPhoto">un1 alterou a foto do grupo</string>
-    <string name="ActionChangedTitle">un1 alterou o nome do grupo para un2</string>
-    <string name="ActionCreateGroup">un1 criou o grupo</string>
-    <string name="ActionYouKickUser">Você removeu un2</string>
-    <string name="ActionYouLeftUser">Você deixou o grupo</string>
-    <string name="ActionYouAddUser">Você adicionou un2</string>
-    <string name="ActionYouRemovedPhoto">Você removeu a foto do grupo</string>
-    <string name="ActionYouChangedPhoto">Você alterou a foto do grupo</string>
-    <string name="ActionYouChangedTitle">Você alterou o nome do grupo para un2</string>
-    <string name="ActionYouCreateGroup">Você criou o grupo</string>
-    <string name="ActionKickUserYou">un1 removeu você</string>
-    <string name="ActionAddUserYou">un1 adicionou você</string>
-    <string name="ActionAddUserSelf">un1 retornou ao grupo</string>
-    <string name="ActionAddUserSelfYou">Você retornou ao grupo</string>
-    <string name="UnsupportedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualizá-la atualize seu aplicativo em https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Vídeo</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Localização</string>
-    <string name="AttachContact">Contato</string>
-    <string name="AttachDocument">Arquivo</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Mensagem de voz</string>
-    <string name="FromYou">Você</string>
-    <string name="ActionTakeScreenshootYou">Você realizou uma captura da tela!</string>
-    <string name="ActionTakeScreenshoot">un1 realizou uma captura da tela!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Número de telefone inválido</string>
-    <string name="CodeExpired">O código expirou. Por favor, identifique-se novamente.</string>
-    <string name="FloodWait">Muitas tentativas. Por favor, tente novamente mais tarde.</string>
-    <string name="FloodWaitTime">Muitas tentativas, por favor tente novamente em %1$s</string>
-    <string name="InvalidCode">Código inválido</string>
-    <string name="InvalidFirstName">Nome inválido</string>
-    <string name="InvalidLastName">Sobrenome inválido</string>
-    <string name="Loading">Carregando...</string>
-    <string name="NoPlayerInstalled">Você não possui um reprodutor de vídeo, instale um para continuar</string>
-    <string name="NoMailInstalled">Por favor, envie um email para sms@stel.com e conte-nos sobre seu problema.</string>
-    <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
-    <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
-    <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddToTheGroupTitle">Adcione %1$s ao chat %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Número de mensagens antigas para encaminhar:</string>
-    <string name="AddToTheGroup">Adicionar %1$s no grupo?</string>
-    <string name="UserAlreadyInGroup">Este usuário já está neste grupo</string>
-    <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
-    <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
-    <string name="SendContactTo">Enviar contato para %1$s?</string>
-    <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
-    <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
-    <string name="AreYouSureDeleteAndExit">Você tem certeza que apagar e sair do grupo?</string>
-    <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja apagar esta conversa?</string>
-    <string name="AreYouSureShareMyContactInfo">Você tem certeza que deseja compartilhar suas informações de contato?</string>
-    <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
-    <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
-    <string name="AreYouSureDeleteContact">Você tem certeza que deseja apagar este contato?</string>
-    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar um chat secreto?</string>
-    <string name="AreYouSureRegistration">Você tem certeza que deseja cancelar o registro?</string>
-    <string name="AreYouSureClearHistory">Você tem certeza que deseja limpar o histórico?</string>
-    <string name="AreYouSureClearHistoryChannel">Apagar todos os textos e mídias em cache desse canal?</string>
-    <string name="AreYouSureClearHistorySuper">Apagar todos os textos e mídias em cache desse supergrupo?</string>
-    <string name="AreYouSureDeleteMessages">Você tem certeza que deseja apagar %1$s?</string>
-    <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
-    <string name="SendContactToGroup">Enviar contato para %1$s?</string>
-    <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
-    <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
-    <string name="NoUsernameFound">Não há conta do Telegram com esse nome de usuário</string>
-    <string name="BotCantJoinGroups">Esse bot não pode entrar em grupos.</string>
-    <string name="SecretLinkPreviewAlert">Você gostaria de ativar a pré-visualização estendida de links em Chats Secretos? Note que a pré-visualização é gerada nos servidores do Telegram.</string>
-    <string name="SecretChatContextBotAlert">Os bots integrados são fornecidos por desenvolvedores terceiros. Para o bot funcionar, os símbolos que você digita depois do nome de usuário do bot são enviados para o respectivo desenvolvedor.</string>
-    <string name="RaiseToSpeakAlert">Gostaria de habilitar o \"Levantar para Falar\" para mensagens de voz?</string>
-    <string name="EditMessageError">Desculpe, você não pode editar essa mensagem.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram precisa acessar seus contatos para que você possa se conectar aos seus amigos em todos os seus dispositivos.</string>
-    <string name="PermissionStorage">Telegram precisa acessar seu armazenamento para que você possa enviar e salvar fotos, vídeos, músicas e outras mídias.</string>
-    <string name="PermissionNoAudio">Telegram precisa acessar seu microfone para que você possa enviar mensagens de voz.</string>
-    <string name="PermissionNoLocation">Telegram precisa acessar sua localização para que você possa compartilhar com seus amigos.</string>
-    <string name="PermissionOpenSettings">CONFIGURAÇÕES</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Rápido</string>
-    <string name="Page3Title">Gratuito</string>
-    <string name="Page4Title">Seguro</string>
-    <string name="Page5Title">Poderoso</string>
-    <string name="Page6Title">Baseado na nuvem</string>
-    <string name="Page7Title">Privado</string>
-    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do mundo. <![CDATA[<br/>]]>É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
-    <string name="Page2Message">O <![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido<![CDATA[<br/>]]>que qualquer outro aplicativo.</string>
-    <string name="Page3Message">O <![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
-    <string name="Page4Message">O <![CDATA[<b>Telegram</b>]]> mantém suas mensagens<![CDATA[<br/>]]>seguras de ataques de hackers.</string>
-    <string name="Page5Message">O <![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
-    <string name="Page6Message">O <![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
-    <string name="Page7Message">O <![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
-    <string name="StartMessaging">Comece a conversar</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d online</string>
-    <string name="Online_one">%1$d online</string>
-    <string name="Online_two">%1$d online</string>
-    <string name="Online_few">%1$d online</string>
-    <string name="Online_many">%1$d online</string>
-    <string name="Online_other">%1$d online</string>
-    <string name="Members_zero">%1$d membros</string>
-    <string name="Members_one">%1$d membro</string>
-    <string name="Members_two">%1$d membros</string>
-    <string name="Members_few">%1$d membros</string>
-    <string name="Members_many">%1$d membros</string>
-    <string name="Members_other">%1$d membros</string>
-    <string name="AndMoreTyping_zero">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_one">e mais %1$d estão digitando</string>
-    <string name="AndMoreTyping_two">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_few">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_many">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_other">e mais %1$d pessoas estão escrevendo</string>
-    <string name="NewMessages_zero">sem novas mensagens</string>
-    <string name="NewMessages_one">%1$d nova mensagem</string>
-    <string name="NewMessages_two">%1$d novas mensagens</string>
-    <string name="NewMessages_few">%1$d novas mensagens</string>
-    <string name="NewMessages_many">%1$d novas mensagens</string>
-    <string name="NewMessages_other">%1$d novas mensagens</string>
-    <string name="messages_zero">sem mensagens</string>
-    <string name="messages_one">%1$d mensagem</string>
-    <string name="messages_two">%1$d mensagens</string>
-    <string name="messages_few">%1$d mensagens</string>
-    <string name="messages_many">%1$d mensagens</string>
-    <string name="messages_other">%1$d mensagens</string>
-    <string name="comments_zero">%1$d comentários</string>
-    <string name="comments_one">%1$d comentário</string>
-    <string name="comments_two">%1$d comentários</string>
-    <string name="comments_few">%1$d comentários</string>
-    <string name="comments_many">%1$d comentários</string>
-    <string name="comments_other">%1$d comentários</string>
-    <string name="items_zero">nenhum item</string>
-    <string name="items_one">%1$d item</string>
-    <string name="items_two">%1$d itens</string>
-    <string name="items_few">%1$d itens</string>
-    <string name="items_many">%1$d itens</string>
-    <string name="items_other">%1$d itens</string>
-    <string name="FromChats_zero">de nenhum chat</string>
-    <string name="FromChats_one">de %1$d chat</string>
-    <string name="FromChats_two">de %1$d chats</string>
-    <string name="FromChats_few">de %1$d chats</string>
-    <string name="FromChats_many">de %1$d chats</string>
-    <string name="FromChats_other">de %1$d chats</string>
-    <string name="Seconds_zero">%1$d segundos</string>
-    <string name="Seconds_one">%1$d segundo</string>
-    <string name="Seconds_two">%1$d segundos</string>
-    <string name="Seconds_few">%1$d segundos</string>
-    <string name="Seconds_many">%1$d segundos</string>
-    <string name="Seconds_other">%1$d segundos</string>
-    <string name="Minutes_zero">%1$d minutos</string>
-    <string name="Minutes_one">%1$d minuto</string>
-    <string name="Minutes_two">%1$d minutos</string>
-    <string name="Minutes_few">%1$d minutos</string>
-    <string name="Minutes_many">%1$d minutos</string>
-    <string name="Minutes_other">%1$d minutos</string>
-    <string name="Hours_zero">%1$d horas</string>
-    <string name="Hours_one">%1$d hora</string>
-    <string name="Hours_two">%1$d horas</string>
-    <string name="Hours_few">%1$d horas</string>
-    <string name="Hours_many">%1$d horas</string>
-    <string name="Hours_other">%1$d horas</string>
-    <string name="Days_zero">%1$d dias</string>
-    <string name="Days_one">%1$d dia</string>
-    <string name="Days_two">%1$d dias</string>
-    <string name="Days_few">%1$d dias</string>
-    <string name="Days_many">%1$d dias</string>
-    <string name="Days_other">%1$d dias</string>
-    <string name="Weeks_zero">%1$d semanas</string>
-    <string name="Weeks_one">%1$d semana</string>
-    <string name="Weeks_two">%1$d semanas</string>
-    <string name="Weeks_few">%1$d semanas</string>
-    <string name="Weeks_many">%1$d semanas</string>
-    <string name="Weeks_other">%1$d semanas</string>
-    <string name="Months_zero">%1$d meses</string>
-    <string name="Months_one">%1$d mês</string>
-    <string name="Months_two">%1$d meses</string>
-    <string name="Months_few">%1$d meses</string>
-    <string name="Months_many">%1$d meses</string>
-    <string name="Months_other">%1$d meses</string>
-    <string name="Years_zero">%1$d anos</string>
-    <string name="Years_one">%1$d ano</string>
-    <string name="Years_two">%1$d anos</string>
-    <string name="Years_few">%1$d anos</string>
-    <string name="Years_many">%1$d anos</string>
-    <string name="Years_other">%1$d anos</string>
-    <string name="Users_zero">%1$d usuários</string>
-    <string name="Users_one">%1$d usuário</string>
-    <string name="Users_two">%1$d usuários</string>
-    <string name="Users_few">%1$d usuários</string>
-    <string name="Users_many">%1$d usuários</string>
-    <string name="Users_other">%1$d usuários</string>
-    <string name="Times_zero">%1$d vezes</string>
-    <string name="Times_one">%1$d vez</string>
-    <string name="Times_two">%1$d vezes</string>
-    <string name="Times_few">%1$d vezes</string>
-    <string name="Times_many">%1$d vezes</string>
-    <string name="Times_other">%1$d vezes</string>
-    <string name="Meters_zero">%1$d metros</string>
-    <string name="Meters_one">%1$d metro</string>
-    <string name="Meters_two">%1$d metros</string>
-    <string name="Meters_few">%1$d metros</string>
-    <string name="Meters_many">%1$d metros</string>
-    <string name="Meters_other">%1$d metros</string>
-    <string name="Stickers_zero">%1$d stickers</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d stickers</string>
-    <string name="Stickers_few">%1$d stickers</string>
-    <string name="Stickers_many">%1$d stickers</string>
-    <string name="Stickers_other">%1$d stickers</string>
-    <string name="Photos_zero">%1$d fotos</string>
-    <string name="Photos_one">%1$d foto</string>
-    <string name="Photos_two">%1$d fotos</string>
-    <string name="Photos_few">%1$d fotos</string>
-    <string name="Photos_many">%1$d fotos</string>
-    <string name="Photos_other">%1$d fotos</string>
-    <string name="LastSeenMinutes_zero">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_one">visto há %1$d minuto</string>
-    <string name="LastSeenMinutes_two">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_few">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_many">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_other">visto há %1$d minutos</string>
-    <string name="LastSeenHours_zero">visto há %1$d horas</string>
-    <string name="LastSeenHours_one">visto há %1$d hora</string>
-    <string name="LastSeenHours_two">visto há %1$d horas</string>
-    <string name="LastSeenHours_few">visto há %1$d horas</string>
-    <string name="LastSeenHours_many">visto há %1$d horas</string>
-    <string name="LastSeenHours_other">visto há %1$d horas</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_one">Mensagem encaminhada</string>
-    <string name="ForwardedMessage_two">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_few">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_many">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_other">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedFile_zero">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_one">Arquivo encaminhado</string>
-    <string name="ForwardedFile_two">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_few">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_many">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_other">%1$d arquivos encaminhados</string>
-    <string name="ForwardedPhoto_zero">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_one">Foto encaminhada</string>
-    <string name="ForwardedPhoto_two">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_few">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_many">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_other">%1$d fotos encaminhadas</string>
-    <string name="ForwardedVideo_zero">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_one">Vídeo encaminhado</string>
-    <string name="ForwardedVideo_two">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_few">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_many">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_other">%1$d vídeos encaminhados</string>
-    <string name="ForwardedMusic_zero">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_one">Música encaminhada</string>
-    <string name="ForwardedMusic_two">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_few">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_many">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_other">%1$d músicas encaminhadas</string>
-    <string name="ForwardedAudio_zero">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_one">Mensagem de voz encaminhada</string>
-    <string name="ForwardedAudio_two">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_few">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_many">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_other">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedLocation_zero">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_one">Localização encaminhada</string>
-    <string name="ForwardedLocation_two">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_few">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_many">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_other">%1$d localizações encaminhadas</string>
-    <string name="ForwardedContact_zero">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_one">Contato encaminhado</string>
-    <string name="ForwardedContact_two">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_few">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_many">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_other">%1$d contatos encaminhados</string>
-    <string name="ForwardedSticker_zero">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_one">Sticker encaminhado</string>
-    <string name="ForwardedSticker_two">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_few">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_many">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_other">%1$d stickers encaminhados</string>
-    <string name="AndOther_zero">e %1$d outros</string>
-    <string name="AndOther_one">e %1$d outro</string>
-    <string name="AndOther_two">e %1$d outros</string>
-    <string name="AndOther_few">e %1$d outros</string>
-    <string name="AndOther_many">e %1$d outros</string>
-    <string name="AndOther_other">e %1$d outros</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">dd MMM</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s às %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
deleted file mode 100644
index afd42f469..000000000
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ /dev/null
@@ -1,1091 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<!--https://www.transifex.com/projects/p/telegram/language/pt_PT/members/-->
-
-<resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">Português (Brasil)</string>
-    <string name="LanguageNameInEnglish">Português (Brasil)</string>
-    <string name="LanguageCode">pt_BR</string>
-    <!--signin view-->
-    <string name="YourPhone">Seu número</string>
-    <string name="StartText">Confirme o código de seu país e preencha seu número de telefone.</string>
-    <string name="ChooseCountry">Escolha um país</string>
-    <string name="WrongCountry">Código do país incorreto</string>
-    <!--code enter view-->
-    <string name="YourCode">Seu código</string>
-    <string name="SentSmsCode">Enviamos uma SMS com um código de ativação para o seu telefone</string>
-    <string name="CallText">Vamos te ligar em %1$d:%2$02d</string>
-    <string name="Calling">Estamos te ligando...</string>
-    <string name="Code">Código</string>
-    <string name="WrongNumber">Número incorreto?</string>
-    <string name="DidNotGetTheCode">Não recebeu o código?</string>
-    <!--signup view-->
-    <string name="YourName">Seu nome</string>
-    <string name="RegisterText">Configure seu nome e sobrenome</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">Nome (obrigatório)</string>
-    <string name="LastName">Sobrenome (opcional)</string>
-    <string name="CancelRegistration">Cancelar registro</string>
-    <!--chats view-->
-    <string name="Settings">Configurações</string>
-    <string name="Contacts">Contatos</string>
-    <string name="NewGroup">Novo Grupo</string>
-    <string name="Yesterday">ontem</string>
-    <string name="NoResult">Nenhum resultado</string>
-    <string name="NoChats">Ainda não há chats...</string>
-    <string name="NoChatsHelp">Comece a conversar pressionando o\nbotão \'Nova Mensagem\' no canto inferior direito\nou vá para a seção \'Contatos\'.</string>
-    <string name="WaitingForNetwork">Aguardando rede...</string>
-    <string name="Connecting">Conectando...</string>
-    <string name="Updating">Atualizando...</string>
-    <string name="NewSecretChat">Novo Chat Secreto</string>
-    <string name="AwaitingEncryption">Esperando %s se conectar...</string>
-    <string name="EncryptionRejected">Chat secreto cancelado</string>
-    <string name="EncryptionProcessing">Trocando chaves de criptografia...</string>
-    <string name="EncryptedChatStartedOutgoing">%s entrou no chat secreto</string>
-    <string name="EncryptedChatStartedIncoming">Você entrou no chat secreto</string>
-    <string name="ClearHistory">Limpar histórico</string>
-    <string name="ClearHistoryCache">Apagar do cache</string>
-    <string name="DeleteChat">Apagar e sair</string>
-    <string name="DeleteChatUser">Apagar conversa</string>
-    <string name="HiddenName">Conta Excluída</string>
-    <string name="SelectChat">Selecione um Chat</string>
-    <string name="PhotoTip">Toque e segure para ver</string>
-    <string name="CompatibilityChat">%1$s está usando uma versão mais antiga do Telegram, por isso fotos secretas serão mostradas em modo de compatibilidade.\n\nAssim que %2$s atualizar o Telegram, fotos com timers de 1 minuto ou menos passarão a funcionar no modo ‘Toque e segure para ver’, e você será notificado caso a outra pessoa salve a tela.</string>
-    <string name="SearchMessages">MENSAGENS</string>
-    <string name="Search">Busca</string>
-    <string name="MuteNotifications">Silenciar notificações</string>
-    <string name="MuteFor">Silenciar por %1$s</string>
-    <string name="UnmuteNotifications">Restaurar Som</string>
-    <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativar</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">RECENTE</string>
-    <string name="LinkPreview">Prévia do link</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Promover a administrador</string>
-    <string name="DescriptionInfoMega">Você pode fornecer uma descrição opcional para seu grupo.</string>
-    <string name="LeaveMega">Sair do Grupo</string>
-    <string name="DeleteMega">Apagar Grupo</string>
-    <string name="LeaveMegaMenu">Sair do Grupo</string>
-    <string name="DeleteMegaMenu">Apagar Grupo</string>
-    <string name="MegaDeleteInfo">Você perderá todas as mensagens neste grupo.</string>
-    <string name="MegaAdminsInfo">Você pode adicionar administradores para ajudar você a gerenciar seu grupo. Toque e segure para removê-los.</string>
-    <string name="MegaDeleteAlert">Espere! Apagar este grupo removerá todos os membros e todas as mensagens serão perdidas. Apagar o grupo mesmo assim?</string>
-    <string name="ActionCreateMega">Grupo criado</string>
-    <string name="MegaAddedBy">un1 adicionou você ao grupo</string>
-    <string name="MegaLeaveAlert">Você tem certeza que deseja sair do grupo?</string>
-    <string name="GroupUserCantAdd">Desculpe, você não pode adicionar este usuário a grupos.</string>
-    <string name="GroupUserAddLimit">Desculpe, este grupo está cheio.</string>
-    <string name="GroupUserLeftError">Desculpe, este usuário decidiu sair deste grupo, de maneira que você não pode convidá-lo de volta.</string>
-    <string name="GroupUserCantAdmin">Desculpe, há administradores demais neste grupo.</string>
-    <string name="GroupUserCantBot">Desculpe, há bots demais neste grupo.</string>
-    <string name="ActionMigrateFromGroup">Este grupo foi atualizado para um supergrupo</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s foi atualizado para um supergrupo</string>
-    <string name="NoBlockedGroup">Usuários bloqueados são removidos do grupo e só podem voltar se convidados por um administrador. Convites por link não funcionam para eles.</string>
-    <string name="NewChannel">Novo Canal</string>
-    <string name="EnterChannelName">Nome do canal</string>
-    <string name="Comments">Comentários</string>
-    <string name="CommentsInfo">Se você habilitar comentários, pessoas poderão discutir seu post no canal.</string>
-    <string name="AddMutual">Adicionar contatos no canal</string>
-    <string name="ChannelUsernameHelp">Pessoas podem compartilhar esse link com outros e encontrar seu canal usando a busca do Telegram.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">link</string>
-    <string name="ChannelPrivateLinkHelp">Pessoas podem entrar em seu canal com este link. Você pode desativar o link quando quiser.</string>
-    <string name="DescriptionPlaceholder">Descrição</string>
-    <string name="DescriptionInfo">Você pode providenciar uma descrição opcional para o seu canal.</string>
-    <string name="ChannelPublic">Canal Público</string>
-    <string name="ChannelPublicInfo">Canais públicos podem ser encontrados na busca, qualquer um pode entrar.</string>
-    <string name="ChannelPrivate">Canal Privado</string>
-    <string name="ChannelPrivateInfo">Canais privados só podem entrar aqueles que possuírem um link de convite.</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Link de Convite</string>
-    <string name="ChannelAddMembers">Adicionar membros</string>
-    <string name="LeaveChannel">Sair do Canal</string>
-    <string name="LeaveChannelMenu">Sair do Canal</string>
-    <string name="ChannelSettings">Configurações</string>
-    <string name="ChannelJoin">ENTRAR</string>
-    <string name="OpenChannelProfile">Info do Canal</string>
-    <string name="ChannelBroadcast">Transmissão</string>
-    <string name="ChannelComment">Comentário</string>
-    <string name="ShowDiscussion">mostrar comentários</string>
-    <string name="ChannelAlertTitle">O que é um Canal?</string>
-    <string name="ChannelAlertText">Canais são uma nova ferramenta para transmissão de suas mensagens para grandes audiências.</string>
-    <string name="ChannelAlertCreate">CRIAR CANAL</string>
-    <string name="LinkInUse">Desculpe, esse nome já está em uso.</string>
-    <string name="LinkInvalid">Desculpe, esse nome é inválido.</string>
-    <string name="LinkInvalidShort">Nome do canal deve ter pelo menos 5 caracteres.</string>
-    <string name="LinkInvalidLong">O nome não pode exceder 32 caracteres.</string>
-    <string name="LinkInvalidStartNumber">Nome do canal não pode iniciar com número.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Verificando nome...</string>
-    <string name="LinkAvailable">%1$s está disponível.</string>
-    <string name="ChannelMembers">Membros</string>
-    <string name="ChannelBlockedUsers">Usuários bloqueados</string>
-    <string name="ChannelAdministrators">Administradores</string>
-    <string name="ChannelDelete">Apagar Canal</string>
-    <string name="ChannelDeleteMenu">Apagar Canal</string>
-    <string name="ChannelDeleteAlert">Espere! Apagando esse canal removerá todos os membros e todas as mensagens serão perdidas. Apagar assim mesmo?</string>
-    <string name="ChannelLeaveAlert">Você tem certeza que deseja sair do canal?</string>
-    <string name="ChannelDeleteInfo">Você perderá todas as mensagens desse canal.</string>
-    <string name="ChannelEdit">Editar</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Por favor, note que ao escolher um link público para o seu canal, qualquer um poderá encontrá-lo na busca e entrar.\n\nNão crie um link se você deseja que seu canal seja privado.</string>
-    <string name="ChannelPublicEmptyUsername">Por favor, escolha um link para o seu canal público, assim as pessoas poderão encontrá-lo na busca e compartilhar com outros.\n\nSe não estiver interessado, sugerimos que crie um canal privado.</string>
-    <string name="ActionCreateChannel">Canal criado</string>
-    <string name="ActionChannelChangedPhoto">Foto do canal alterada</string>
-    <string name="ActionChannelRemovedPhoto">Foto do canal removida</string>
-    <string name="ActionChannelChangedTitle">Nome do canal alterado para un2</string>
-    <string name="ChannelPublicLimitReached">Desculpe, você criou muitos canais públicos. Você pode criar um canal privado ou apagar um de seus canais existentes primeiro.</string>
-    <string name="ChannelModerator">Moderador</string>
-    <string name="ChannelCreator">Criador</string>
-    <string name="ChannelEditor">Administrador</string>
-    <string name="ChannelMute">SILENCIAR</string>
-    <string name="ChannelUnmute">RESTAURAR SOM</string>
-    <string name="ChannelAddAdmin">Adicionar Administrador</string>
-    <string name="ChannelInviteViaLink">Convidar via Link</string>
-    <string name="ChannelAddUserAdminAlert">Você tem certeza que deseja colocar %1$s como adiministrador?</string>
-    <string name="ChannelRemoveUserAdmin">Remover</string>
-    <string name="ChannelMembersInfo">Somente os administradores do canal podem ver essa lista.</string>
-    <string name="ChannelAdminNotParticipant">Esse usuário não entrou no seu canal ainda. Você deseja enviar um convite?</string>
-    <string name="ChannelLinkInfo">Qualquer um com Telegram instalado poderá entrar no seu canal abrindo este link.</string>
-    <string name="ChannelAdminsInfo">Você pode adicionar administradores para ajudar você a gerenciar seu canal. Aperte e segure para removê-los.</string>
-    <string name="ChannelJoinTo">Você deseja entrar no canal \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Desculpe, esta conversa não pode mais ser acessada.</string>
-    <string name="ChannelAddTo">Adicionar %1$s ao canal?</string>
-    <string name="ChannelUserLeftError">Desculpe, este usuário decidiu sair deste canal, então você não pode convidá-lo de volta.</string>
-    <string name="ChannelUserCantAdd">Desculpe, você não pode adicionar esse usuário em canais.</string>
-    <string name="ChannelUserCantAdmin">Desculpe, muitos administradores nesse canal.</string>
-    <string name="ChannelUserCantBot">Desculpe, há bots demais neste canal.</string>
-    <string name="ChannelUserAddLimit">Desculpe, você só pode adicionar os primeiros 200 membros ao canal. Note que um número ilimitado de pessoas podem entrar via link do canal.</string>
-    <string name="ChannelAddedBy">un1 adicionou você ao canal</string>
-    <string name="ChannelJoined">Você entrou no canal</string>
-    <string name="ChannelRemoveUser">Remover do canal</string>
-    <string name="ChannelCantSendMessage">Desculp, você não pode enviar mensagens para esse canal.</string>
-    <string name="ChannelAddedByNotification">%1$s adicionou você ao canal %2$s</string>
-    <string name="ChannelPhotoEditNotification">Canal %1$s atualizou a foto</string>
-    <string name="ChannelMessageGroupNoText">%1$s enviou uma mensagem ao canal %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s enviou uma foto para o canal %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s enviou um vídeo ao canal %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s enviou um contato ao canal %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s enviou uma localização ao canal %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s enviou um arquivo ao canal %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s enviou um GIF ao canal %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s enviou uma mensagem ao canal %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s enviou um sticker ao canal %2$s</string>
-    <string name="ChannelMessageNoText">%1$s postou uma mensagem</string>
-    <string name="ChannelMessagePhoto">%1$s postou uma foto</string>
-    <string name="ChannelMessageVideo">%1$s postou um vídeo</string>
-    <string name="ChannelMessageContact">%1$s postou um contato</string>
-    <string name="ChannelMessageMap">%1$s postou uma foto</string>
-    <string name="ChannelMessageDocument">%1$s postou um arquivo</string>
-    <string name="ChannelMessageGIF">%1$s postou um GIF</string>
-    <string name="ChannelMessageAudio">%1$s postou uma mensagem de voz</string>
-    <string name="ChannelMessageSticker">%1$s postou um sticker</string>
-    <string name="WhoCanAddMembers">Quem pode adicionar novos membros?</string>
-    <string name="WhoCanAddMembersAllMembers">Todos os Membros</string>
-    <string name="WhoCanAddMembersAdmins">Somente Administradores</string>
-    <string name="ChannelNotifyMembersInfoOn">Os membros serão notificados quando você postar</string>
-    <string name="ChannelNotifyMembersInfoOff">Os membros não serão notificados quando você postar</string>
-    <string name="ChannelSignMessages">Assinar Mensagens</string>
-    <string name="ChannelSignMessagesInfo">Adicionar nomes dos administradores nas mensagens postadas.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">Nova Lista de Transmissão</string>
-    <string name="EnterListName">Digite o nome da lista</string>
-    <string name="YouCreatedBroadcastList">Você criou uma lista de transmissão</string>
-    <string name="AddRecipient">Adicionar destinatário</string>
-    <string name="KickFromBroadcast">Remover da lista de transmissão</string>
-    <!--audio view-->
-    <string name="NoAudio">Por favor, adicione arquivos à biblioteca de música de seu dispositivo para vê-los aqui.</string>
-    <string name="AttachMusic">Música</string>
-    <string name="AudioUnknownArtist">Artista desconhecido</string>
-    <string name="AudioUnknownTitle">Título desconhecido</string>
-    <!--documents view-->
-    <string name="SelectFile">Selecione um Arquivo</string>
-    <string name="FreeOfTotal">Disponível %1$s de %2$s</string>
-    <string name="UnknownError">Erro desconhecido</string>
-    <string name="AccessError">Erro de acesso</string>
-    <string name="NoFiles">Ainda não há arquivos</string>
-    <string name="FileUploadLimit">Tamanho do arquivo não deve ser maior que %1$s</string>
-    <string name="NotMounted">Armazenamento não está montado</string>
-    <string name="UsbActive">Transferência USB ativa</string>
-    <string name="InternalStorage">Armazenamento Interno</string>
-    <string name="ExternalStorage">Armazenamento Externo</string>
-    <string name="SystemRoot">Administrador do Sistema</string>
-    <string name="SdCard">Cartão SD</string>
-    <string name="Folder">Pasta</string>
-    <string name="GalleryInfo">Para enviar imagens sem compressão</string>
-    <!--chat view-->
-    <string name="Invisible">invisível</string>
-    <string name="Typing">escrevendo...</string>
-    <string name="IsTyping">está escrevendo...</string>
-    <string name="AreTyping">estão escrevendo...</string>
-    <string name="IsRecordingAudio">%1$s está gravando uma mensagem de voz...</string>
-    <string name="IsSendingPhoto">%1$s está enviando uma foto...</string>
-    <string name="IsSendingVideo">%1$s está enviando um vídeo...</string>
-    <string name="IsSendingFile">%1$s está enviando um arquivo...</string>
-    <string name="RecordingAudio">gravando mensagem de voz...</string>
-    <string name="SendingPhoto">enviando foto...</string>
-    <string name="SendingVideoStatus">enviando vídeo...</string>
-    <string name="SendingFile">enviando arquivo...</string>
-    <string name="GotAQuestion">Tem alguma dúvida\nsobre o Telegram?</string>
-    <string name="ChatTakePhoto">Tirar foto</string>
-    <string name="ChatGallery">Galeria</string>
-    <string name="ChatLocation">Localização</string>
-    <string name="ChatVideo">Vídeo</string>
-    <string name="ChatDocument">Arquivo</string>
-    <string name="ChatCamera">Câmera</string>
-    <string name="NoMessages">Ainda não há mensagens aqui...</string>
-    <string name="ForwardedMessage">Mensagem encaminhada</string>
-    <string name="From">De</string>
-    <string name="NoRecent">Nada recente</string>
-    <string name="Message">Mensagem</string>
-    <string name="TypeMessage">Mensagem</string>
-    <string name="ShareMyContactInfo">Compartilhar meu contato</string>
-    <string name="AddToContacts">Adicionar aos contatos</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s convidou você para um chat secreto</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">Você convidou %s para um chat secreto.</string>
-    <string name="EncryptedDescriptionTitle">Chats Secretos:</string>
-    <string name="EncryptedDescription1">Criptografia de ponta-a-ponta</string>
-    <string name="EncryptedDescription2">Sem rastros nos servidores</string>
-    <string name="EncryptedDescription3">Timer de autodestruição</string>
-    <string name="EncryptedDescription4">Encaminhamento desativado</string>
-    <string name="YouWereKicked">Você foi removido deste grupo</string>
-    <string name="YouLeft">Você saiu deste grupo</string>
-    <string name="DeleteThisGroup">Apagar este grupo</string>
-    <string name="DeleteThisChat">Apagar este chat</string>
-    <string name="SlideToCancel">DESLIZE PARA CANCELAR</string>
-    <string name="SaveToDownloads">Salvar em downloads</string>
-    <string name="SaveToGIFs">Salvar em GIFs</string>
-    <string name="DeleteGif">Apagar GIF?</string>
-    <string name="SaveToMusic">Salvar em músicas</string>
-    <string name="ShareFile">Compartilhar</string>
-    <string name="ApplyLocalizationFile">Aplicar arquivo de localização</string>
-    <string name="UnsupportedAttachment">Anexo não suportado</string>
-    <string name="SetTimer">Definir timer de autodestruição</string>
-    <string name="ServiceNotifications">Notificações de serviço</string>
-    <string name="GettingLinkInfo">Obtendo informações...</string>
-    <string name="OpenInBrowser">Abrir no Navegador</string>
-    <string name="CopyUrl">Copiar URL</string>
-    <string name="SendItems">Enviar %1$s</string>
-    <string name="OpenUrlAlert">Abrir URL em %1$s?</string>
-    <string name="ReportSpam">REPORTAR SPAM</string>
-    <string name="AddContactChat">ADICIONAR CONTATO</string>
-    <string name="ReportSpamAlert">Você tem certeza que deseja reportar esse usuário por spam?</string>
-    <string name="ReportSpamAlertGroup">Você tem certeza que deseja reportar esse grupo por spam?</string>
-    <string name="NobodyLikesSpam1">Desculpe, você pode enviar mensagens somente para contatos mútuos no momento.</string>
-    <string name="NobodyLikesSpam2">Desculpe, você só pode adicionar contatos mútuos à grupos no momento.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq/br#no-consigo-enviar-mensagens-para-no-contatos</string>
-    <string name="MoreInfo">Mais informações</string>
-    <string name="ShareSendTo">Enviar para...</string>
-    <string name="TapHereGifs">Toque aqui para acessar os GIFs salvos</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
-    <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s desativou o temporizador de autodestruição</string>
-    <string name="MessageLifetimeYouRemoved">Você desativou o temporizador de autodestruição</string>
-    <string name="YouHaveNewMessage">Você tem uma nova mensagem</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s te enviou uma mensagem</string>
-    <string name="NotificationMessagePhoto">%1$s te enviou uma foto</string>
-    <string name="NotificationMessageVideo">%1$s te enviou um vídeo</string>
-    <string name="NotificationMessageContact">%1$s compartilhou um contato com você</string>
-    <string name="NotificationMessageMap">%1$s enviou uma localização</string>
-    <string name="NotificationMessageDocument">%1$s lhe enviou um arquivo</string>
-    <string name="NotificationMessageGif">%1$s te enviou um GIF</string>
-    <string name="NotificationMessageAudio">%1$s enviou uma mensagem de voz</string>
-    <string name="NotificationMessageSticker">%1$s lhe enviou um sticker</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s enviou uma mensagem para o grupo %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s enviou uma foto para o grupo %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s enviou um vídeo para o grupo %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s compartilhou um contato para o grupo %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s enviou uma localização para o grupo %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s enviou um arquivo para o grupo %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s enviou um GIF para o grupo %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s enviou uma mensagem para o grupo %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s enviou um sticker ao grupo %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s convidou você para o grupo %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s editou o nome do grupo %2$s</string>
-    <string name="NotificationEditedGroupPhoto">%1$s editou a foto do grupo %2$s</string>
-    <string name="NotificationGroupAddMember">%1$s convidou %3$s para o grupo %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s retornou ao grupo %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s removeu %3$s do grupo %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s removeu você do grupo %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s saiu do grupo %2$s</string>
-    <string name="NotificationContactJoined">%1$s entrou para o Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nNós detectamos que alguém acessou a sua conta a partir de um novo aparelho em %2$s\n\nAparelho: %3$s\nLocalização: %4$s\n\nSe não foi você, você pode ir em Configurações - Privacidade e Segurança - Sessões, e terminar aquela sessão.\n\nSe você acha que alguém acessou a sua conta contra a sua vontade, você pode habilitar a verificação em duas etapas nas configurações de Privacidade e Segurança.\n\nAtenciosamente,\nEquipe Telegram</string>
-    <string name="NotificationContactNewPhoto">%1$s atualizou a foto do perfil</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s entrou para o grupo %2$s via link de convite</string>
-    <string name="Reply">Responder</string>
-    <string name="ReplyToGroup">Responder para %1$s</string>
-    <string name="ReplyToUser">Responder para %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Selecionar Contato</string>
-    <string name="NoContacts">Ainda não há contatos</string>
-    <string name="InviteText">Ei, vamos mudar para o Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">às</string>
-    <string name="YesterdayAt">ontem às</string>
-    <string name="Online">online</string>
-    <string name="LastSeen">visto</string>
-    <string name="LastSeenDate">visto</string>
-    <string name="LastSeenNow">visto agora mesmo</string>
-    <string name="InviteFriends">Convidar Amigos</string>
-    <string name="GlobalSearch">BUSCA GLOBAL</string>
-    <string name="Lately">visto recentemente</string>
-    <string name="WithinAWeek">visto na última semana</string>
-    <string name="WithinAMonth">visto no último mês</string>
-    <string name="ALongTimeAgo">visto há muito tempo</string>
-    <string name="NewMessageTitle">Nova Mensagem</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Enviar mensagem para...</string>
-    <string name="SoftUserLimitAlert">Você poderá adicionar mais usuários após finalizar a criação do grupo e convertê-lo em um supergrupo.</string>
-    <string name="EnterGroupNamePlaceholder">Digite o nome do grupo</string>
-    <string name="GroupName">Nome do grupo</string>
-    <string name="MembersCount">%1$d/%2$d membros</string>
-    <string name="JoinToGroup">Você deseja entrar no chat \'%1$s\'?</string>
-    <string name="JoinToGroupErrorFull">Desculpe, este grupo já está lotado.</string>
-    <string name="JoinToGroupErrorNotExist">Desculpe, esse chat não existe.</string>
-    <string name="LinkCopied">Link copiado para área de transferência</string>
-    <string name="InviteToGroupByLink">Convidar para o Grupo via Link</string>
-    <string name="InviteLink">Link de Convite</string>
-    <string name="RevokeAlert">Você tem certeza que deseja desativar o link? Uma vez feito, ninguém conseguirá entrar usando-o.</string>
-    <string name="RevokeAlertNewLink">Este link de convite está inativo. Um novo link foi gerado.</string>
-    <string name="RevokeButton">Desativar</string>
-    <string name="RevokeLink">Desativar Link</string>
-    <string name="CopyLink">Copiar Link</string>
-    <string name="ShareLink">Compartilhar Link</string>
-    <string name="LinkInfo">Qualquer um com Telegram instalado poderá entrar no seu grupo abrindo este link.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Administradores de Conversas</string>
-    <string name="SetAdminsAll">Todos São Administradores</string>
-    <string name="SetAdminsAllInfo">Todos os membros podem adicionar novos membros, editar o nome e a foto do grupo.</string>
-    <string name="SetAdminsNotAllInfo">Somente administradores podem adicionar e remover membros, editar nome foto do grupo.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Mídia Compartilhada</string>
-    <string name="SETTINGS">Configurações</string>
-    <string name="AddMember">Adicionar membro</string>
-    <string name="SetAdmins">Definir administradores</string>
-    <string name="DeleteAndExit">Apagar e sair do grupo</string>
-    <string name="Notifications">Notificações</string>
-    <string name="KickFromGroup">Remover do grupo</string>
-    <string name="ConvertGroup">Atualizar para Supergrupo</string>
-    <string name="ConvertGroupAlert">Por favor note que os membros do grupo precisarão atualizar o aplicativo do Telegram até a última versão para verem seu supergrupo. Você tem certeza que deseja atualizar este grupo?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Limite de membros atingido.<![CDATA[</b>]]>\n\nPara ir além do limite e ter funções adcionais, atualize para um supergrupo:\n\n• Supergrupos podem ter até %1$s\n• Novos membros veêm todo o histórico de conversas\n• Administradores deletam mensagens para todos\n• Notificações são silenciadas por padrão</string>
-    <!--contact info view-->
-    <string name="ShareContact">Compartilhar</string>
-    <string name="AddContact">Adicionar</string>
-    <string name="AddContactTitle">Adicionar contato</string>
-    <string name="BlockContact">Bloquear</string>
-    <string name="EditContact">Editar</string>
-    <string name="DeleteContact">Apagar</string>
-    <string name="PhoneHome">Início</string>
-    <string name="PhoneMobile">Celular</string>
-    <string name="PhoneWork">Trabalho</string>
-    <string name="PhoneOther">Outro</string>
-    <string name="PhoneMain">Principal</string>
-    <string name="StartEncryptedChat">Iniciar Chat Secreto</string>
-    <string name="CreateEncryptedChatError">Ocorreu um erro.</string>
-    <string name="EncryptionKey">Chave criptográfica</string>
-    <string name="MessageLifetime">Tempo de autodestruição</string>
-    <string name="ShortMessageLifetimeForever">Desativado</string>
-    <string name="EncryptionKeyDescription">Essa imagem e texto foram derivadas da chave criptográfica para este chat secreto com <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Se você vê o mesmo no dispositivo de <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, a criptografia ponta a ponta está garantida.<![CDATA[<br><br>]]>Leia mais em telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq/br#chats-secretos</string>
-    <string name="NumberUnknown">Desconhecido</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Telefone</string>
-    <!--usernames-->
-    <string name="Username">Nome de Usuário</string>
-    <string name="UsernamePlaceholder">Seu nome de usuário</string>
-    <string name="UsernameInUse">Desculpe, este usuário já existe.</string>
-    <string name="UsernameInvalid">Desculpe, este usuário é inválido.</string>
-    <string name="UsernameInvalidShort">O nome de usuário deve ter pelo menos 5 caracteres.</string>
-    <string name="UsernameInvalidLong">O nome de usuário não pode exceder 32 caracteres.</string>
-    <string name="UsernameInvalidStartNumber">Desculpe, o nome de usuário não pode começar com um número.</string>
-    <string name="UsernameHelp">Você pode escolher um nome de usuário no <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. Assim, outras pessoas poderão te encontrar pelo nome de usuário e entrar em contato sem precisar saber seu telefone. <![CDATA[<br><br>]]>Você pode usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> e underline. O tamanho mínimo é <![CDATA[<b>]]>5<![CDATA[</b>]]> caracteres.</string>
-    <string name="UsernameChecking">Verificando nome de usuário...</string>
-    <string name="UsernameAvailable">%1$s está disponível.</string>
-    <string name="UsernameEmpty">Nenhum</string>
-    <string name="ErrorOccurred">Ocorreu um erro.</string>
-    <!--stickers view-->
-    <string name="Stickers">Stickers</string>
-    <string name="StickersInfo">Artistas são bem vindos a adicionar seus próprios pacotes de stickers usando o @stickers bot.\n\nUsuários podem adicionar stickers com um clique sobre eles e então escolher \"Adicionar aos Stickers\".</string>
-    <string name="AddStickers">Adicionar Stickers</string>
-    <string name="AddToStickers">Adicionar aos Stickers</string>
-    <string name="AddStickersNotFound">Stickers não encontrados</string>
-    <string name="StickersRemoved">Stickers removidos</string>
-    <string name="AddStickersInstalled">Novos stickers adicionados</string>
-    <string name="StickersHide">Esconder</string>
-    <string name="StickersShow">Mostrar</string>
-    <string name="StickersShare">Compartilhar</string>
-    <string name="StickersCopy">Copiar link</string>
-    <string name="StickersRemove">Remover</string>
-    <string name="NoStickers">Nenhum sticker</string>
-    <string name="TooMuchStickersets">Desculpe, você alcançou o limite máximo de pacotes de sticker.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Restaurar todas as configurações de notificação</string>
-    <string name="TextSize">Tamanho do texto nas mensagens</string>
-    <string name="AskAQuestion">Fazer uma pergunta</string>
-    <string name="EnableAnimations">Permitir Animações</string>
-    <string name="Unblock">Desbloquear</string>
-    <string name="UnblockText">Toque e segure no usuário para desbloquear</string>
-    <string name="NoBlocked">Nenhum usuário bloqueado</string>
-    <string name="MessageNotifications">Notificações de mensagens</string>
-    <string name="Alert">Alerta</string>
-    <string name="MessagePreview">Visualização de Mensagem</string>
-    <string name="GroupNotifications">Notificações de grupo</string>
-    <string name="Sound">Som</string>
-    <string name="InAppNotifications">Notificações no aplicativo</string>
-    <string name="InAppSounds">Sons no Aplicativo</string>
-    <string name="InAppVibrate">Vibração no Aplicativo</string>
-    <string name="Vibrate">Vibrar</string>
-    <string name="InAppPreview">Visualização no Aplicativo</string>
-    <string name="Reset">Limpar</string>
-    <string name="ResetAllNotifications">Limpar todas as notificações</string>
-    <string name="UndoAllCustom">Desfazer todas as configurações de notificação para todos os seus contatos e grupos</string>
-    <string name="NotificationsAndSounds">Notificações e Sons</string>
-    <string name="BlockedUsers">Usuários bloqueados</string>
-    <string name="LogOut">Sair</string>
-    <string name="NoSound">Sem som</string>
-    <string name="Default">Padrão</string>
-    <string name="Support">Suporte</string>
-    <string name="OnlyIfSilent">Somente no silencioso </string>
-    <string name="ChatBackground">Papel de Parede</string>
-    <string name="MessagesSettings">Mensagens</string>
-    <string name="SendByEnter">Enviar usando \'Enter\'</string>
-    <string name="TerminateAllSessions">Terminar todas as outras sessões</string>
-    <string name="Events">Eventos</string>
-    <string name="ContactJoined">Contato entrou para o Telegram</string>
-    <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor entenda que o suporte do Telegram é feito por voluntários. Tentaremos responder o mais rápido possível, mas poderemos demorar um pouco.<![CDATA[<br><br>]]>Por favor verifique a <![CDATA[<a href=\"https://telegram.org/faq#general\">página de perguntas frequentes do Telegram</a>]]>: há dicas e respostas para a maioria dos <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">problemas</a>]]>.</string>
-    <string name="AskButton">Pergunte a um voluntário</string>
-    <string name="TelegramFaq">Perguntas frequentes</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
-    <string name="DeleteLocalization">Apagar localização?</string>
-    <string name="IncorrectLocalization">Arquivo de localização incorreto</string>
-    <string name="Enabled">Ativado</string>
-    <string name="Disabled">Desativado</string>
-    <string name="NotificationsService">Serviço de Notificações</string>
-    <string name="NotificationsServiceDisableInfo">Se o serviço de notificação do  Google Play for suficiente para você, você pode desativar o \"Serviço de Notificações\". Porém, recomendamos deixá-lo ativo para manter o aplicativo executando em segundo plano e receber notificações instantaneamente.</string>
-    <string name="SortBy">Ordenar Por</string>
-    <string name="ImportContacts">Importar Contatos</string>
-    <string name="SortFirstName">Primeiro nome</string>
-    <string name="SortLastName">Sobrenome</string>
-    <string name="LedColor">Cor do LED</string>
-    <string name="PopupNotification">Notificações Pop-up</string>
-    <string name="NoPopup">Sem pop-up</string>
-    <string name="OnlyWhenScreenOn">Somente com a tela ligada</string>
-    <string name="OnlyWhenScreenOff">Somente com a tela desligada</string>
-    <string name="AlwaysShowPopup">Sempre mostrar pop-up</string>
-    <string name="BadgeNumber">Contador no Ícone</string>
-    <string name="Short">Curta</string>
-    <string name="Long">Longa</string>
-    <string name="SystemDefault">Padrão do sistema</string>
-    <string name="SettingsDefault">Configurações padrão</string>
-    <string name="AutomaticMediaDownload">Download automático de mídia</string>
-    <string name="WhenUsingMobileData">Ao usar dados móveis</string>
-    <string name="WhenConnectedOnWiFi">Quando conectado em Wi-Fi</string>
-    <string name="WhenRoaming">Quando em roaming</string>
-    <string name="NoMediaAutoDownload">Sem mídia</string>
-    <string name="AutoplayGifs">Auto-Reproduzir GIFs</string>
-    <string name="RaiseToSpeak">Levantar para Falar</string>
-    <string name="SaveToGallerySettings">Salvar na galeria</string>
-    <string name="EditName">Editar nome</string>
-    <string name="NotificationsPriority">Prioridade</string>
-    <string name="NotificationsPriorityDefault">Padrão</string>
-    <string name="NotificationsPriorityLow">Baixa</string>
-    <string name="NotificationsPriorityHigh">Alta</string>
-    <string name="NotificationsPriorityMax">Máxima</string>
-    <string name="RepeatNotificationsNever">Nunca</string>
-    <string name="RepeatNotifications">Repetir Notificações</string>
-    <string name="PhoneNumberHelp">Você pode alterar seu número do Telegram aqui. Sua conta e todos os seus dados — mensagens, mídia, contatos, etc. serão movidos para o novo número.\n\n<![CDATA[<b>Importante:</b>]]> todos os contatos do Telegram terão seu <![CDATA[<b>novo número</b>]]> adicionado às suas lista de contatos, desde que eles tenham seu número antigo e você não os tenha bloqueado no Telegram.</string>
-    <string name="PhoneNumberAlert">Todos os seus contatos do Telegram terão seu novo número adicionado às suas listas de contatos, desde que eles tenham seu antigo número e você não os tenha bloqueado no Telegram.</string>
-    <string name="PhoneNumberChange">ALTERAR NÚMERO</string>
-    <string name="ChangePhoneNewNumber">Novo número</string>
-    <string name="ChangePhoneHelp">Vamos enviar uma SMS com um código de confirmação para o seu novo número.</string>
-    <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
-    <string name="NotificationsOther">Outro</string>
-    <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativado</string>
-    <string name="LedDisabled">Desativado</string>
-    <string name="RepeatDisabled">Desativado</string>
-    <string name="InChatSound">Sons no Chat</string>
-    <string name="SoundDefault">Padrão</string>
-    <string name="VibrationDefault">Padrão</string>
-    <string name="SmartNotifications">Notificações Inteligentes</string>
-    <string name="SmartNotificationsDisabled">Desativado</string>
-    <string name="SmartNotificationsInfo">Tocar no máximo %1$s a cada %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Tocar no máximo</string>
-    <string name="SmartNotificationsTimes">vezes</string>
-    <string name="SmartNotificationsWithin">a cada</string>
-    <string name="SmartNotificationsMinutes">minutos</string>
-    <string name="SecretWebPage">Pré-visualização de Link</string>
-    <string name="SecretChat">Chats secretos</string>
-    <!--cache view-->
-    <string name="CacheSettings">Configurações de Cache</string>
-    <string name="LocalDatabase">Banco de Dados Local</string>
-    <string name="LocalDatabaseClear">Limpar todos os textos em cache?</string>
-    <string name="LocalDatabaseInfo">Limpar o banco de dados local apagará todos os textos das mensagens em cache e compactará o banco de dados para economizar espaço. O Telegram precisa de alguns dados para trabalhar, então o tamanho do banco não vai chegar a zero.\n\nEssa operação pode demorar alguns minutos para ser concluída.</string>
-    <string name="ClearMediaCache">Limpar Cache</string>
-    <string name="CacheClear">Limpar</string>
-    <string name="CalculatingSize">Calculando...</string>
-    <string name="LocalDocumentCache">Documentos</string>
-    <string name="LocalPhotoCache">Fotos</string>
-    <string name="LocalAudioCache">Mensagens de voz</string>
-    <string name="LocalVideoCache">Vídeos</string>
-    <string name="LocalMusicCache">Música</string>
-    <string name="LocalCache">Outros arquivos</string>
-    <string name="CacheEmpty">Vazio</string>
-    <string name="KeepMedia">Manter Mídias</string>
-    <string name="KeepMediaInfo">Fotos, vídeos e outros arquivos da nuvem que você <![CDATA[<b>não acessou</b>]]> durante esse período serão removidos deste dispositivo para economizar espaço em disco.\n\nTodas as mídias permanecerão na nuvem do Telegram e poderão ser baixadas novamente conforme necessário.</string>
-    <string name="KeepMediaForever">Permanentemente</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Sessões Ativas</string>
-    <string name="CurrentSession">Sessão atual</string>
-    <string name="NoOtherSessions">Nenhuma outra sessão ativa</string>
-    <string name="NoOtherSessionsInfo">Você pode entrar no Telegram a partir de outro celular, tablet ou computador usando o mesmo número de telefone. Todos os seus dados serão sincronizados instantaneamente.</string>
-    <string name="OtherSessions">Sessões Ativas</string>
-    <string name="SessionsInfo">Controle suas sessões em outros aparelhos.</string>
-    <string name="TerminateSessionInfo">Toque em uma sessão para terminá-la.</string>
-    <string name="TerminateSessionQuestion">Encerrar essa sessão?</string>
-    <string name="UnofficialApp">aplicativo não oficial</string>
-    <!--passcode view-->
-    <string name="Passcode">Senha de Bloqueio</string>
-    <string name="ChangePasscode">Alterar Senha</string>
-    <string name="ChangePasscodeInfo">Quando você define uma senha adicional, um ícone de cadeado aparece na página de chats. Clique para bloquear e desbloquear o app.\n\nNota: se você esquecer a sua senha, terá de excluir e reinstalar o app. Todos os chats secretos serão perdidos.</string>
-    <string name="ChangePasscodeAlert">Você verá o ícone do cadeado na página de chats. Clique para bloquear seu app do Telegram com a sua nova senha.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Senha</string>
-    <string name="EnterCurrentPasscode">Insira sua senha atual</string>
-    <string name="EnterNewFirstPasscode">Insira uma senha</string>
-    <string name="EnterNewPasscode">Insira sua nova senha</string>
-    <string name="EnterYourPasscode">Insira sua senha</string>
-    <string name="ReEnterYourPasscode">Re-insira sua nova senha</string>
-    <string name="InvalidPasscode">Senha inválida</string>
-    <string name="PasscodeDoNotMatch">As senhas não são iguais</string>
-    <string name="AutoLock">Auto-bloquear</string>
-    <string name="AutoLockInfo">Requisitar senha se estiver ausente por muito tempo.</string>
-    <string name="AutoLockInTime">em %1$s</string>
-    <string name="AutoLockDisabled">Desativado</string>
-    <string name="UnlockFingerprint">Desbloquear com Impressão Digital</string>
-    <string name="FingerprintInfo">Confirme a impressão digital para continuar</string>
-    <string name="FingerprintHelp">Toque o sensor</string>
-    <string name="FingerprintNotRecognized">Impressão digital não reconhecida.</string>
-    <!--media view-->
-    <string name="NoMedia">Compartilhar fotos e vídeos no chat e acessá-los em qualquer um de seus dispositivos.</string>
-    <string name="DocumentsTitle">Arquivos Compartilhados</string>
-    <string name="SharedMediaTitle">Mídia Compartilhada</string>
-    <string name="LinksTitle">Links Compartilhados</string>
-    <string name="AudioTitle">Música Compartilhada</string>
-    <string name="NoSharedAudio">Compartilhe músicas nesse chat e os acesse de qualquer um de seus dispositivos.</string>
-    <string name="NoSharedFiles">Compartilhar arquivos e documentos no chat e acessá-los de qualquer um de seus dispositivos.</string>
-    <string name="NoSharedLinks">Compartilhe links nesse chat e os acesse de qualquer um de seus dispositivos</string>
-    <!--map view-->
-    <string name="Map">Mapa</string>
-    <string name="Satellite">Satélite</string>
-    <string name="Hybrid">Híbrido</string>
-    <string name="MetersAway">m de distância</string>
-    <string name="KMetersAway">km de distância</string>
-    <string name="SendLocation">Enviar sua localização atual</string>
-    <string name="SendSelectedLocation">Enviar localização selecionada</string>
-    <string name="ShareLocation">Localização</string>
-    <string name="AccurateTo">Precisão de %1$s</string>
-    <string name="NearbyPlaces">OU ESCOLHA UM LUGAR</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Mostrar todas as mídias</string>
-    <string name="SaveToGallery">Salvar na galeria</string>
-    <string name="Of">%1$d de %2$d</string>
-    <string name="Gallery">Galeria</string>
-    <string name="AllPhotos">Todas as Fotos</string>
-    <string name="AllVideo">Todos os Vídeos</string>
-    <string name="NoPhotos">Ainda não há fotos</string>
-    <string name="NoVideo">Nenhum vídeo ainda</string>
-    <string name="PleaseDownload">Baixar o vídeo primeiro</string>
-    <string name="NoRecentPhotos">Nenhuma foto recente</string>
-    <string name="NoRecentGIFs">Nenhum GIF recente</string>
-    <string name="SearchImages">BUSCAR IMAGENS</string>
-    <string name="SearchImagesInfo">BUSCA GLOBAL</string>
-    <string name="SearchGifs">BUSCAR GIFS</string>
-    <string name="SearchImagesTitle">Procurar na web</string>
-    <string name="SearchGifsTitle">Procurar GIFs</string>
-    <string name="CropImage">Recortar imagem</string>
-    <string name="EditImage">Editar imagem</string>
-    <string name="Enhance">Realçar</string>
-    <string name="Highlights">Luzes</string>
-    <string name="Contrast">Contraste</string>
-    <string name="Exposure">Exposição</string>
-    <string name="Warmth">Calor</string>
-    <string name="Saturation">Saturação</string>
-    <string name="Vignette">Vignette</string>
-    <string name="Shadows">Sombras</string>
-    <string name="Grain">Granulado</string>
-    <string name="Sharpen">Nitidez</string>
-    <string name="Fade">Fade</string>
-    <string name="Tint">Matiz</string>
-    <string name="TintShadows">SOMBRAS</string>
-    <string name="TintHighlights">LUZES</string>
-    <string name="Curves">Curvas</string>
-    <string name="CurvesAll">TUDO</string>
-    <string name="CurvesRed">VERMELHO</string>
-    <string name="CurvesGreen">VERDE</string>
-    <string name="CurvesBlue">AZUL</string>
-    <string name="Blur">Desfoque</string>
-    <string name="BlurOff">Desativado</string>
-    <string name="BlurLinear">Linear</string>
-    <string name="BlurRadial">Radial</string>
-    <string name="AreYouSureDeletePhoto">Você tem certeza que deseja apagar esta foto?</string>
-    <string name="AreYouSureDeleteVideo">Você tem certeza que deseja apagar este vídeo?</string>
-    <string name="DiscardChanges">Descartar mudanças?</string>
-    <string name="ClearSearch">Limpar histórico de busca?</string>
-    <string name="ClearButton">Limpar</string>
-    <string name="PickerPhotos">Fotos</string>
-    <string name="PickerVideo">Vídeo</string>
-    <string name="AddCaption">Adicionar legenda...</string>
-    <string name="PhotoCaption">Legenda da Foto</string>
-    <string name="VideoCaption">Legenda do Vídeo</string>
-    <string name="Caption">Legenda</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Verificação em duas etapas</string>
-    <string name="SetAdditionalPassword">Configurar senha adicional</string>
-    <string name="SetAdditionalPasswordInfo">Você pode configurar uma senha que será requisitada quando você entrar em um novo aparelho, além do código que você receberá por SMS. </string>
-    <string name="YourPassword">Sua senha</string>
-    <string name="PleaseEnterCurrentPassword">Por favor, digite a sua senha</string>
-    <string name="PleaseEnterFirstPassword">Insira uma senha</string>
-    <string name="PleaseEnterPassword">Por favor, digite a sua nova senha</string>
-    <string name="PleaseReEnterPassword">Por favor, digite sua senha novamente</string>
-    <string name="RecoveryEmail">E-mail de recuperação</string>
-    <string name="YourEmail">Seu e-mail</string>
-    <string name="YourEmailInfo">Por favor, adicione um e-mail válido. Essa é a única forma de recuperar uma senha esquecida.</string>
-    <string name="YourEmailSkip">Pular</string>
-    <string name="YourEmailSkipWarning">Atenção</string>
-    <string name="YourEmailSkipWarningText">É sério!\n\nSe você esquecer a sua senha, você perderá o acesso a sua conta do Telegram. Não há nenhuma forma de recuperá-la.</string>
-    <string name="YourEmailAlmostThere">Quase lá!</string>
-    <string name="YourEmailAlmostThereText">Por favor, verifique o seu e-mail (não esqueça da pasta spam) para completar a configuração da verificação em duas etapas.</string>
-    <string name="YourPasswordSuccess">Pronto!</string>
-    <string name="YourPasswordSuccessText">A sua senha para a verificação em duas etapas foi ativada.</string>
-    <string name="ChangePassword">Alterar senha</string>
-    <string name="TurnPasswordOff">Desabilitar senha</string>
-    <string name="SetRecoveryEmail">Configurar e-mail de recuperação</string>
-    <string name="ChangeRecoveryEmail">Alterar e-mail de recuperação.</string>
-    <string name="TurnPasswordOffQuestion">Você tem certeza que quer desabilitar a sua senha?</string>
-    <string name="PasswordHint">Dica da senha</string>
-    <string name="PasswordHintText">Por favor, crie uma dica para a sua senha</string>
-    <string name="PasswordDoNotMatch">As senhas não são iguais</string>
-    <string name="AbortPassword">Cancelar a configuração da verificação em duas etapas</string>
-    <string name="EmailPasswordConfirmText">Por favor, siga os seguintes passos para completar a configuração da autenticação em duas etapas:\n\n1. Verifique seu e-mail ( não esqueça da pasta spam)\n%1$s\n\n2. Clique no link de validação.</string>
-    <string name="PasswordAsHintError">A dica deve ser diferente da sua senha</string>
-    <string name="PasswordEmailInvalid">E-mail inválido</string>
-    <string name="RestorePasswordNoEmailTitle">Desculpe</string>
-    <string name="RestorePasswordNoEmailText">Como você não indicou um e-mail de recuperação quando configurou a sua senha, as únicas opções restantes são lembrar a senha ou apagar a sua conta.</string>
-    <string name="RestoreEmailSent">O código de recuperação foi enviado para o e-mail fornecido: \n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Por favor, verifique o seu e-mail e digite aqui o código de 6 dígitos recebido.</string>
-    <string name="RestoreEmailTrouble">Está tendo problemas para acessar seu e-mail %1$s?</string>
-    <string name="RestoreEmailTroubleText">Se você não puder acessar o seu e-mail, as suas únicas opções são lembrar a senha ou apagar a sua conta.</string>
-    <string name="ResetMyAccount">APAGAR MINHA CONTA</string>
-    <string name="ResetMyAccountText">Se você prosseguir e apagar a sua conta, você perderá todos os seus chats e mensagens, assim como todas as suas mídias e arquivos compartilhados.</string>
-    <string name="ResetMyAccountWarning">Aviso</string>
-    <string name="ResetMyAccountWarningText">Essa ação não pode ser revertida ou desfeita.\n\nSe você apagar a sua conta, todas as suas mensagens e chats serão apagados.</string>
-    <string name="ResetMyAccountWarningReset">Apagar</string>
-    <string name="LoginPassword">Senha</string>
-    <string name="LoginPasswordText">Você habilitou a verificação em duas etapas, a sua conta está protegida com uma senha adicional.</string>
-    <string name="ForgotPassword">Esqueceu a senha?</string>
-    <string name="PasswordRecovery">Recuperação de senha</string>
-    <string name="PasswordCode">Código</string>
-    <string name="PasswordReset">Senha desativada</string>
-    <string name="EnabledPasswordText">Você habilitou a verificação em duas etapas. Toda vez que você entrar na sua conta em um novo aparelho, será preciso digitar a senha que você configurar aqui.</string>
-    <string name="PendingEmailText">O seu e-mail de recuperação %1$s ainda não está ativo e aguarda confirmação.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacidade e Segurança</string>
-    <string name="PrivacyTitle">Privacidade</string>
-    <string name="PrivacyLastSeen">Último Acesso</string>
-    <string name="LastSeenEverybody">Todos</string>
-    <string name="LastSeenContacts">Meus Contatos</string>
-    <string name="LastSeenNobody">Nenhum</string>
-    <string name="LastSeenEverybodyMinus">Todos (-%1$d)</string>
-    <string name="LastSeenContactsPlus">Meus Contatos (+%1$d)</string>
-    <string name="LastSeenContactsMinus">Meus Contatos (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">Meus Contatos (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Nenhum (+%1$d)</string>
-    <string name="SecurityTitle">Segurança</string>
-    <string name="DeleteAccountTitle">Auto-destruição da conta</string>
-    <string name="DeleteAccountIfAwayFor">Se você estiver inativo por</string>
-    <string name="DeleteAccountHelp">Se você não acessar sua conta ao menos uma vez neste período, sua conta será excluída com seus grupos, mensagens e contatos.</string>
-    <string name="DeleteAccountNowConfirmation">Excluir sua conta?</string>
-    <string name="LastSeenHelp">Alterar quem pode ver o seu Último Acesso.</string>
-    <string name="LastSeenTitle">Quem pode ver o seu Último Acesso?</string>
-    <string name="AddExceptions">Adicionar exceções</string>
-    <string name="CustomHelp">Importante: você não poderá ver quando foi o Último Acesso das pessoas com quem você não compartilha o seu Último Acesso. Você visualizará o Último acesso aproximado (recentemente, dentro de uma semana, dentro de um mês).</string>
-    <string name="AlwaysShareWith">Sempre Mostrar Para</string>
-    <string name="NeverShareWith">Nunca Mostrar Para</string>
-    <string name="CustomShareSettingsHelp">Estas configurações irão substituir os valores anteriores.</string>
-    <string name="AlwaysShareWithTitle">Sempre Mostrar</string>
-    <string name="AlwaysShareWithPlaceholder">Sempre compartilhar para os usuários...</string>
-    <string name="NeverShareWithTitle">Nunca Mostrar</string>
-    <string name="NeverShareWithPlaceholder">Nunca mostrar para os usuários...</string>
-    <string name="EmpryUsersPlaceholder">Adicionar Usuários</string>
-    <string name="PrivacyFloodControlError">Desculpe, muitas solicitações. Impossível alterar os ajustes de privacidade agora, por favor aguarde.</string>
-    <string name="ClearOtherSessionsHelp">Sair de todos os dispositivos, exceto este.</string>
-    <string name="RemoveFromListText">Toque e segure no usuário para remover.</string>
-    <string name="GroupsAndChannels">Grupos</string>
-    <string name="WhoCanAddMe">Quem pode me adicionar em grupos?</string>
-    <string name="WhoCanAddMeInfo">Você pode restringir quem pode te adicionar em grupos ou canais com precisão.</string>
-    <string name="AlwaysAllow">Sempre Permitir</string>
-    <string name="NeverAllow">Nunca Permitir</string>
-    <string name="AlwaysAllowPlaceholder">Sempre permitir...</string>
-    <string name="NeverAllowPlaceholder">Nunca permitir...</string>
-    <string name="CustomShareInfo">Esses usuários poderão ou não te adicionar em grupos e canais, dependendo de suas configurações.</string>
-    <string name="GroupsAndChannelsHelp">Alterar quem pode te adicionar em grupos ou canais.</string>
-    <string name="InviteToGroupError">Desculpe, você não pode adicionar esse usuário a grupos devido às configurações de privacidade dele.</string>
-    <string name="InviteToChannelError">Desculpe, você não pode adicionar esse usuário a canais devido às configurações de privacidade dele.</string>
-    <string name="CreateGroupError">Você não pode criar um grupo com esses usuários devido as configurações de privacidade deles.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Editar Vídeo</string>
-    <string name="OriginalVideo">Vídeo Original</string>
-    <string name="EditedVideo">Vídeo Editado</string>
-    <string name="SendingVideo">Enviando vídeo...</string>
-    <string name="CompressVideo">Compactar Vídeo</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Compartilhar</string>
-    <string name="BotInvite">Adicionar Ao Grupo</string>
-    <string name="BotSettings">Configurações</string>
-    <string name="BotHelp">Ajuda</string>
-    <string name="BotStatusRead">tem acesso às mensagens</string>
-    <string name="BotStatusCantRead">não tem acesso às mensagens</string>
-    <string name="BotInfoTitle">O que esse bot pode fazer?</string>
-    <string name="BotStart">COMEÇAR</string>
-    <string name="BotUnblock">REINICIAR</string>
-    <string name="BotStop">Parar bot</string>
-    <string name="BotRestart">Reiniciar bot</string>
-    <!--button titles-->
-    <string name="Next">Próximo</string>
-    <string name="Back">Voltar</string>
-    <string name="Done">Concluído</string>
-    <string name="Open">Abrir</string>
-    <string name="Save">Salvar</string>
-    <string name="Cancel">Cancelar</string>
-    <string name="Close">Fechar</string>
-    <string name="Add">Adicionar</string>
-    <string name="Edit">Editar</string>
-    <string name="Send">Enviar</string>
-    <string name="Call">Ligar</string>
-    <string name="Copy">Copiar</string>
-    <string name="Delete">Apagar</string>
-    <string name="DeleteAndStop">Apagar e parar</string>
-    <string name="Forward">Encaminhar</string>
-    <string name="Retry">Tentar novamente</string>
-    <string name="FromCamera">Câmera</string>
-    <string name="FromGalley">Galeria</string>
-    <string name="DeletePhoto">Apagar foto</string>
-    <string name="Set">Aplicar</string>
-    <string name="OK">OK</string>
-    <string name="Crop">CORTAR</string>
-    <!--messages-->
-    <string name="ActionInviteYou">Você entrou para o grupo via link de convite</string>
-    <string name="ActionInviteUser">un1 entrou para o grupo via link de convite</string>
-    <string name="ActionKickUser">un1 removeu un2</string>
-    <string name="ActionLeftUser">un1 deixou o grupo</string>
-    <string name="ActionAddUser">un1 adicionou un2</string>
-    <string name="ActionRemovedPhoto">un1 removeu foto do grupo</string>
-    <string name="ActionChangedPhoto">un1 alterou a foto do grupo</string>
-    <string name="ActionChangedTitle">un1 alterou o nome do grupo para un2</string>
-    <string name="ActionCreateGroup">un1 criou o grupo</string>
-    <string name="ActionYouKickUser">Você removeu un2</string>
-    <string name="ActionYouLeftUser">Você deixou o grupo</string>
-    <string name="ActionYouAddUser">Você adicionou un2</string>
-    <string name="ActionYouRemovedPhoto">Você removeu a foto do grupo</string>
-    <string name="ActionYouChangedPhoto">Você alterou a foto do grupo</string>
-    <string name="ActionYouChangedTitle">Você alterou o nome do grupo para un2</string>
-    <string name="ActionYouCreateGroup">Você criou o grupo</string>
-    <string name="ActionKickUserYou">un1 removeu você</string>
-    <string name="ActionAddUserYou">un1 adicionou você</string>
-    <string name="ActionAddUserSelf">un1 retornou ao grupo</string>
-    <string name="ActionAddUserSelfYou">Você retornou ao grupo</string>
-    <string name="UnsupportedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualizá-la atualize seu aplicativo em https://telegram.org/update</string>
-    <string name="AttachPhoto">Foto</string>
-    <string name="AttachVideo">Vídeo</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Localização</string>
-    <string name="AttachContact">Contato</string>
-    <string name="AttachDocument">Arquivo</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Mensagem de voz</string>
-    <string name="FromYou">Você</string>
-    <string name="ActionTakeScreenshootYou">Você realizou uma captura da tela!</string>
-    <string name="ActionTakeScreenshoot">un1 realizou uma captura da tela!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Número de telefone inválido</string>
-    <string name="CodeExpired">O código expirou. Por favor, identifique-se novamente.</string>
-    <string name="FloodWait">Muitas tentativas. Por favor, tente novamente mais tarde.</string>
-    <string name="FloodWaitTime">Muitas tentativas, por favor tente novamente em %1$s</string>
-    <string name="InvalidCode">Código inválido</string>
-    <string name="InvalidFirstName">Nome inválido</string>
-    <string name="InvalidLastName">Sobrenome inválido</string>
-    <string name="Loading">Carregando...</string>
-    <string name="NoPlayerInstalled">Você não possui um reprodutor de vídeo, instale um para continuar</string>
-    <string name="NoMailInstalled">Por favor, envie um email para sms@stel.com e conte-nos sobre seu problema.</string>
-    <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
-    <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
-    <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddToTheGroupTitle">Adcione %1$s ao chat %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Número de mensagens antigas para encaminhar:</string>
-    <string name="AddToTheGroup">Adicionar %1$s no grupo?</string>
-    <string name="UserAlreadyInGroup">Este usuário já está neste grupo</string>
-    <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
-    <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
-    <string name="SendContactTo">Enviar contato para %1$s?</string>
-    <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
-    <string name="AreYouSureSessions">Você tem certeza que deseja terminar todas as outras sessões?</string>
-    <string name="AreYouSureDeleteAndExit">Você tem certeza que apagar e sair do grupo?</string>
-    <string name="AreYouSureDeleteThisChat">Você tem certeza que deseja apagar esta conversa?</string>
-    <string name="AreYouSureShareMyContactInfo">Você tem certeza que deseja compartilhar suas informações de contato?</string>
-    <string name="AreYouSureBlockContact">Você tem certeza que deseja bloquear este contato?</string>
-    <string name="AreYouSureUnblockContact">Você tem certeza que deseja desbloquear este contato?</string>
-    <string name="AreYouSureDeleteContact">Você tem certeza que deseja apagar este contato?</string>
-    <string name="AreYouSureSecretChat">Você tem certeza que deseja começar um chat secreto?</string>
-    <string name="AreYouSureRegistration">Você tem certeza que deseja cancelar o registro?</string>
-    <string name="AreYouSureClearHistory">Você tem certeza que deseja limpar o histórico?</string>
-    <string name="AreYouSureClearHistoryChannel">Apagar todos os textos e mídias em cache desse canal?</string>
-    <string name="AreYouSureClearHistorySuper">Apagar todos os textos e mídias em cache desse supergrupo?</string>
-    <string name="AreYouSureDeleteMessages">Você tem certeza que deseja apagar %1$s?</string>
-    <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
-    <string name="SendContactToGroup">Enviar contato para %1$s?</string>
-    <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
-    <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
-    <string name="NoUsernameFound">Não há conta do Telegram com esse nome de usuário</string>
-    <string name="BotCantJoinGroups">Esse bot não pode entrar em grupos.</string>
-    <string name="SecretLinkPreviewAlert">Você gostaria de ativar a pré-visualização estendida de links em Chats Secretos? Note que a pré-visualização é gerada nos servidores do Telegram.</string>
-    <string name="SecretChatContextBotAlert">Os bots integrados são fornecidos por desenvolvedores terceiros. Para o bot funcionar, os símbolos que você digita depois do nome de usuário do bot são enviados para o respectivo desenvolvedor.</string>
-    <string name="RaiseToSpeakAlert">Gostaria de habilitar o \"Levantar para Falar\" para mensagens de voz?</string>
-    <string name="EditMessageError">Desculpe, você não pode editar essa mensagem.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram precisa acessar seus contatos para que você possa se conectar aos seus amigos em todos os seus dispositivos.</string>
-    <string name="PermissionStorage">Telegram precisa acessar seu armazenamento para que você possa enviar e salvar fotos, vídeos, músicas e outras mídias.</string>
-    <string name="PermissionNoAudio">Telegram precisa acessar seu microfone para que você possa enviar mensagens de voz.</string>
-    <string name="PermissionNoLocation">Telegram precisa acessar sua localização para que você possa compartilhar com seus amigos.</string>
-    <string name="PermissionOpenSettings">CONFIGURAÇÕES</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Rápido</string>
-    <string name="Page3Title">Gratuito</string>
-    <string name="Page4Title">Seguro</string>
-    <string name="Page5Title">Poderoso</string>
-    <string name="Page6Title">Baseado na nuvem</string>
-    <string name="Page7Title">Privado</string>
-    <string name="Page1Message">O mais <![CDATA[<b>rápido</b>]]> aplicativo de mensagem do mundo. <![CDATA[<br/>]]>É <![CDATA[<b>gratuito</b>]]> e <![CDATA[<b>seguro</b>]]>.</string>
-    <string name="Page2Message">O <![CDATA[<b>Telegram</b>]]> envia mensagens mais rápido<![CDATA[<br/>]]>que qualquer outro aplicativo.</string>
-    <string name="Page3Message">O <![CDATA[<b>Telegram</b>]]> é grátis para sempre. <![CDATA[<br/>]]>Sem propagandas. Sem taxas.</string>
-    <string name="Page4Message">O <![CDATA[<b>Telegram</b>]]> mantém suas mensagens<![CDATA[<br/>]]>seguras de ataques de hackers.</string>
-    <string name="Page5Message">O <![CDATA[<b>Telegram</b>]]> não possui limites no tamanho<![CDATA[<br/>]]>de seus arquivos e conversas.</string>
-    <string name="Page6Message">O <![CDATA[<b>Telegram</b>]]> permite você acessar suas<![CDATA[<br/>]]> mensagens de múltiplos dispositivos.</string>
-    <string name="Page7Message">O <![CDATA[<b>Telegram</b>]]> possui mensagens fortemente<![CDATA[<br/>]]>encriptadas e podem se auto-destruir.</string>
-    <string name="StartMessaging">Comece a conversar</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d online</string>
-    <string name="Online_one">%1$d online</string>
-    <string name="Online_two">%1$d online</string>
-    <string name="Online_few">%1$d online</string>
-    <string name="Online_many">%1$d online</string>
-    <string name="Online_other">%1$d online</string>
-    <string name="Members_zero">%1$d membros</string>
-    <string name="Members_one">%1$d membro</string>
-    <string name="Members_two">%1$d membros</string>
-    <string name="Members_few">%1$d membros</string>
-    <string name="Members_many">%1$d membros</string>
-    <string name="Members_other">%1$d membros</string>
-    <string name="AndMoreTyping_zero">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_one">e mais %1$d estão digitando</string>
-    <string name="AndMoreTyping_two">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_few">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_many">e mais %1$d pessoas estão escrevendo</string>
-    <string name="AndMoreTyping_other">e mais %1$d pessoas estão escrevendo</string>
-    <string name="NewMessages_zero">sem novas mensagens</string>
-    <string name="NewMessages_one">%1$d nova mensagem</string>
-    <string name="NewMessages_two">%1$d novas mensagens</string>
-    <string name="NewMessages_few">%1$d novas mensagens</string>
-    <string name="NewMessages_many">%1$d novas mensagens</string>
-    <string name="NewMessages_other">%1$d novas mensagens</string>
-    <string name="messages_zero">sem mensagens</string>
-    <string name="messages_one">%1$d mensagem</string>
-    <string name="messages_two">%1$d mensagens</string>
-    <string name="messages_few">%1$d mensagens</string>
-    <string name="messages_many">%1$d mensagens</string>
-    <string name="messages_other">%1$d mensagens</string>
-    <string name="comments_zero">%1$d comentários</string>
-    <string name="comments_one">%1$d comentário</string>
-    <string name="comments_two">%1$d comentários</string>
-    <string name="comments_few">%1$d comentários</string>
-    <string name="comments_many">%1$d comentários</string>
-    <string name="comments_other">%1$d comentários</string>
-    <string name="items_zero">nenhum item</string>
-    <string name="items_one">%1$d item</string>
-    <string name="items_two">%1$d itens</string>
-    <string name="items_few">%1$d itens</string>
-    <string name="items_many">%1$d itens</string>
-    <string name="items_other">%1$d itens</string>
-    <string name="FromChats_zero">de nenhum chat</string>
-    <string name="FromChats_one">de %1$d chat</string>
-    <string name="FromChats_two">de %1$d chats</string>
-    <string name="FromChats_few">de %1$d chats</string>
-    <string name="FromChats_many">de %1$d chats</string>
-    <string name="FromChats_other">de %1$d chats</string>
-    <string name="Seconds_zero">%1$d segundos</string>
-    <string name="Seconds_one">%1$d segundo</string>
-    <string name="Seconds_two">%1$d segundos</string>
-    <string name="Seconds_few">%1$d segundos</string>
-    <string name="Seconds_many">%1$d segundos</string>
-    <string name="Seconds_other">%1$d segundos</string>
-    <string name="Minutes_zero">%1$d minutos</string>
-    <string name="Minutes_one">%1$d minuto</string>
-    <string name="Minutes_two">%1$d minutos</string>
-    <string name="Minutes_few">%1$d minutos</string>
-    <string name="Minutes_many">%1$d minutos</string>
-    <string name="Minutes_other">%1$d minutos</string>
-    <string name="Hours_zero">%1$d horas</string>
-    <string name="Hours_one">%1$d hora</string>
-    <string name="Hours_two">%1$d horas</string>
-    <string name="Hours_few">%1$d horas</string>
-    <string name="Hours_many">%1$d horas</string>
-    <string name="Hours_other">%1$d horas</string>
-    <string name="Days_zero">%1$d dias</string>
-    <string name="Days_one">%1$d dia</string>
-    <string name="Days_two">%1$d dias</string>
-    <string name="Days_few">%1$d dias</string>
-    <string name="Days_many">%1$d dias</string>
-    <string name="Days_other">%1$d dias</string>
-    <string name="Weeks_zero">%1$d semanas</string>
-    <string name="Weeks_one">%1$d semana</string>
-    <string name="Weeks_two">%1$d semanas</string>
-    <string name="Weeks_few">%1$d semanas</string>
-    <string name="Weeks_many">%1$d semanas</string>
-    <string name="Weeks_other">%1$d semanas</string>
-    <string name="Months_zero">%1$d meses</string>
-    <string name="Months_one">%1$d mês</string>
-    <string name="Months_two">%1$d meses</string>
-    <string name="Months_few">%1$d meses</string>
-    <string name="Months_many">%1$d meses</string>
-    <string name="Months_other">%1$d meses</string>
-    <string name="Years_zero">%1$d anos</string>
-    <string name="Years_one">%1$d ano</string>
-    <string name="Years_two">%1$d anos</string>
-    <string name="Years_few">%1$d anos</string>
-    <string name="Years_many">%1$d anos</string>
-    <string name="Years_other">%1$d anos</string>
-    <string name="Users_zero">%1$d usuários</string>
-    <string name="Users_one">%1$d usuário</string>
-    <string name="Users_two">%1$d usuários</string>
-    <string name="Users_few">%1$d usuários</string>
-    <string name="Users_many">%1$d usuários</string>
-    <string name="Users_other">%1$d usuários</string>
-    <string name="Times_zero">%1$d vezes</string>
-    <string name="Times_one">%1$d vez</string>
-    <string name="Times_two">%1$d vezes</string>
-    <string name="Times_few">%1$d vezes</string>
-    <string name="Times_many">%1$d vezes</string>
-    <string name="Times_other">%1$d vezes</string>
-    <string name="Meters_zero">%1$d metros</string>
-    <string name="Meters_one">%1$d metro</string>
-    <string name="Meters_two">%1$d metros</string>
-    <string name="Meters_few">%1$d metros</string>
-    <string name="Meters_many">%1$d metros</string>
-    <string name="Meters_other">%1$d metros</string>
-    <string name="Stickers_zero">%1$d stickers</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d stickers</string>
-    <string name="Stickers_few">%1$d stickers</string>
-    <string name="Stickers_many">%1$d stickers</string>
-    <string name="Stickers_other">%1$d stickers</string>
-    <string name="Photos_zero">%1$d fotos</string>
-    <string name="Photos_one">%1$d foto</string>
-    <string name="Photos_two">%1$d fotos</string>
-    <string name="Photos_few">%1$d fotos</string>
-    <string name="Photos_many">%1$d fotos</string>
-    <string name="Photos_other">%1$d fotos</string>
-    <string name="LastSeenMinutes_zero">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_one">visto há %1$d minuto</string>
-    <string name="LastSeenMinutes_two">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_few">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_many">visto há %1$d minutos</string>
-    <string name="LastSeenMinutes_other">visto há %1$d minutos</string>
-    <string name="LastSeenHours_zero">visto há %1$d horas</string>
-    <string name="LastSeenHours_one">visto há %1$d hora</string>
-    <string name="LastSeenHours_two">visto há %1$d horas</string>
-    <string name="LastSeenHours_few">visto há %1$d horas</string>
-    <string name="LastSeenHours_many">visto há %1$d horas</string>
-    <string name="LastSeenHours_other">visto há %1$d horas</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_one">Mensagem encaminhada</string>
-    <string name="ForwardedMessage_two">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_few">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_many">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedMessage_other">%1$d mensagens encaminhadas</string>
-    <string name="ForwardedFile_zero">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_one">Arquivo encaminhado</string>
-    <string name="ForwardedFile_two">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_few">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_many">%1$d arquivos encaminhados</string>
-    <string name="ForwardedFile_other">%1$d arquivos encaminhados</string>
-    <string name="ForwardedPhoto_zero">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_one">Foto encaminhada</string>
-    <string name="ForwardedPhoto_two">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_few">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_many">%1$d fotos encaminhadas</string>
-    <string name="ForwardedPhoto_other">%1$d fotos encaminhadas</string>
-    <string name="ForwardedVideo_zero">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_one">Vídeo encaminhado</string>
-    <string name="ForwardedVideo_two">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_few">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_many">%1$d vídeos encaminhados</string>
-    <string name="ForwardedVideo_other">%1$d vídeos encaminhados</string>
-    <string name="ForwardedMusic_zero">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_one">Música encaminhada</string>
-    <string name="ForwardedMusic_two">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_few">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_many">%1$d músicas encaminhadas</string>
-    <string name="ForwardedMusic_other">%1$d músicas encaminhadas</string>
-    <string name="ForwardedAudio_zero">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_one">Mensagem de voz encaminhada</string>
-    <string name="ForwardedAudio_two">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_few">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_many">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedAudio_other">%1$d mensagens de voz encaminhadas</string>
-    <string name="ForwardedLocation_zero">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_one">Localização encaminhada</string>
-    <string name="ForwardedLocation_two">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_few">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_many">%1$d localizações encaminhadas</string>
-    <string name="ForwardedLocation_other">%1$d localizações encaminhadas</string>
-    <string name="ForwardedContact_zero">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_one">Contato encaminhado</string>
-    <string name="ForwardedContact_two">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_few">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_many">%1$d contatos encaminhados</string>
-    <string name="ForwardedContact_other">%1$d contatos encaminhados</string>
-    <string name="ForwardedSticker_zero">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_one">Sticker encaminhado</string>
-    <string name="ForwardedSticker_two">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_few">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_many">%1$d stickers encaminhados</string>
-    <string name="ForwardedSticker_other">%1$d stickers encaminhados</string>
-    <string name="AndOther_zero">e %1$d outros</string>
-    <string name="AndOther_one">e %1$d outro</string>
-    <string name="AndOther_two">e %1$d outros</string>
-    <string name="AndOther_few">e %1$d outros</string>
-    <string name="AndOther_many">e %1$d outros</string>
-    <string name="AndOther_other">e %1$d outros</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">dd MMM</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">d MMMM</string>
-    <string name="chatFullDate">d MMMM, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s às %2$s</string>
-</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index 79d3b0f84..746ee6490 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -16,8 +16,8 @@
         <item name="android:colorBackground">@android:color/white</item>
         <item name="android:windowBackground">@android:color/white</item>
         <item name="android:windowContentOverlay">@null</item>
-        <item name="android:colorPrimaryDark">#435e7e</item>
-        <item name="android:colorPrimary">#54759e</item>
+        <item name="android:colorPrimaryDark">#426482</item>
+        <item name="android:colorPrimary">#527da3</item>
     </style>
 
     <style name="Theme.TMessages" parent="@android:style/Theme.Material.Light">
@@ -33,9 +33,9 @@
         <item name="android:editTextStyle">@style/Theme.TMessages.EditText</item>
         <item name="android:actionBarItemBackground">@drawable/bar_selector_style</item>
         <item name="android:colorPrimaryDark">#33000000</item>
-        <item name="android:colorPrimary">#54759e</item>
+        <item name="android:colorPrimary">#527da3</item>
         <item name="android:alertDialogTheme">@style/Theme.TMessages.Dialog.Alert</item>
-        <item name="android:colorControlActivated">#4d83b3</item>
+        <item name="android:colorControlActivated">#4991cc</item>
     </style>
 
     <style name="Theme.TMessages.PopupNotification" parent="Theme.TMessages">
@@ -48,13 +48,13 @@
     </style>
 
     <style name="Theme.TMessages.Dialog.Alert" parent="android:style/Theme.Material.Light.Dialog.Alert">
-        <item name="android:colorAccent">#4d83b3</item>
+        <item name="android:colorAccent">#4991cc</item>
     </style>
 
     <!--ACTION BAR-->
 
     <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Material.Light.ActionBar">
-        <item name="android:background">#ff54759e</item>
+        <item name="android:background">#ff527da3</item>
         <item name="android:logo">@drawable/transparent</item>
         <item name="android:title">""</item>
     </style>
@@ -69,7 +69,7 @@
     <!--BORDERLESS BUTTON-->
 
     <style name="Theme.TMessages.BorderLessButton" parent="android:Widget.Material.Light.ButtonBar.AlertDialog">
-        <item name="android:textColor">#54759e</item>
+        <item name="android:textColor">#4991cc</item>
     </style>
 
     <!--LIST VIEW-->
@@ -95,4 +95,18 @@
         <item name="android:windowExitAnimation">@null</item>
     </style>
 
+    <style name="TransparentDialog" parent="@android:style/Theme.Dialog">
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:background">@null</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowIsFloating">true</item>
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowFullscreen">false</item>
+
+        <item name="android:colorBackgroundCacheHint">@null</item>
+        <item name="android:windowFrame">@null</item>
+        <item name="android:backgroundDimEnabled">false</item>
+    </style>
+
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index ae8892580..eba88bd49 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,1091 +1,1198 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-
-
+<?xml version='1.0' encoding='UTF-8'?>
 <resources>
-    <string name="AppName">Telegram</string>
-    <string name="AppNameBeta">Telegram Beta</string>
-    <string name="LanguageName">English</string>
-    <string name="LanguageNameInEnglish">English</string>
-    <string name="LanguageCode">en</string>
-    <!--signin view-->
-    <string name="YourPhone">Your phone</string>
-    <string name="StartText">Please confirm your country code and enter your phone number.</string>
-    <string name="ChooseCountry">Choose a country</string>
-    <string name="WrongCountry">Wrong country code</string>
-    <!--code enter view-->
-    <string name="YourCode">Your code</string>
-    <string name="SentSmsCode">We\'ve sent an SMS with an activation code to your phone</string>
-    <string name="CallText">We will call you in %1$d:%2$02d</string>
-    <string name="Calling">Calling you...</string>
-    <string name="Code">Code</string>
-    <string name="WrongNumber">Wrong number?</string>
-    <string name="DidNotGetTheCode">Didn\'t get the code?</string>
-    <!--signup view-->
-    <string name="YourName">Your name</string>
-    <string name="RegisterText">Set up your first and last name</string>
-    <!--<string name="RegisterText">Set up your name and picture</string>-->
-    <string name="FirstName">First name (required)</string>
-    <string name="LastName">Last name (optional)</string>
-    <string name="CancelRegistration">Cancel registration</string>
-    <!--chats view-->
-    <string name="Settings">Settings</string>
-    <string name="Contacts">Contacts</string>
-    <string name="NewGroup">New Group</string>
-    <string name="Yesterday">yesterday</string>
-    <string name="NoResult">No results</string>
-    <string name="NoChats">No chats yet...</string>
-    <string name="NoChatsHelp">Start messaging by pressing the\nnew message button in the bottom right corner\nor tap the menu button for more options.</string>
-    <string name="WaitingForNetwork">Waiting for network...</string>
-    <string name="Connecting">Connecting...</string>
-    <string name="Updating">Updating...</string>
-    <string name="NewSecretChat">New Secret Chat</string>
-    <string name="AwaitingEncryption">Waiting for %s to get online...</string>
-    <string name="EncryptionRejected">Secret chat cancelled</string>
-    <string name="EncryptionProcessing">Exchanging encryption keys...</string>
-    <string name="EncryptedChatStartedOutgoing">%s joined your secret chat.</string>
-    <string name="EncryptedChatStartedIncoming">You joined the secret chat.</string>
-    <string name="ClearHistory">Clear history</string>
-    <string name="ClearHistoryCache">Delete from cache</string>
-    <string name="DeleteChat">Delete and exit</string>
-    <string name="DeleteChatUser">Delete chat</string>
-    <string name="HiddenName">Deleted Account</string>
-    <string name="SelectChat">Select Chat</string>
-    <string name="PhotoTip">Tap and hold to view</string>
-    <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
-    <string name="SearchMessages">MESSAGES</string>
-    <string name="Search">Search</string>
-    <string name="MuteNotifications">Mute notifications</string>
-    <string name="MuteFor">Mute for %1$s</string>
-    <string name="UnmuteNotifications">Unmute</string>
-    <string name="WillUnmuteIn">In %1$s</string>
-    <string name="MuteDisable">Disable</string>
-    <string name="Hashtags">HASHTAGS</string>
-    <string name="Recent">RECENT</string>
-    <string name="LinkPreview">Link preview</string>
-    <!--channels-->
-    <string name="SetAsAdmin">Promote to admin</string>
-    <string name="DescriptionInfoMega">You can provide an optional description for your group.</string>
-    <string name="LeaveMega">Leave Group</string>
-    <string name="DeleteMega">Delete Group</string>
-    <string name="LeaveMegaMenu">Leave group</string>
-    <string name="DeleteMegaMenu">Delete group</string>
-    <string name="MegaDeleteInfo">You will lose all messages in this group.</string>
-    <string name="MegaAdminsInfo">You can add administrators to help you manage your group. Tap and hold to remove them.</string>
-    <string name="MegaDeleteAlert">Wait! Deleting this group will remove all members and all messages will be lost. Delete the group anyway?</string>
-    <string name="ActionCreateMega">Group created</string>
-    <string name="MegaAddedBy">un1 added you to this group</string>
-    <string name="MegaLeaveAlert">Are you sure you want to leave the group?</string>
-    <string name="GroupUserCantAdd">Sorry, you can\'t add this user to groups.</string>
-    <string name="GroupUserAddLimit">Sorry, this group is full.</string>
-    <string name="GroupUserLeftError">Sorry, this user decided to leave this group, so you cannot invite them back here.</string>
-    <string name="GroupUserCantAdmin">Sorry, too many adminstrators in this group.</string>
-    <string name="GroupUserCantBot">Sorry, too many bots in this group.</string>
-    <string name="ActionMigrateFromGroup">This group was upgraded to a supergroup</string>
-    <string name="ActionMigrateFromGroupNotify">%1$s was upgraded to a supergroup</string>
-    <string name="NoBlockedGroup">Blocked users are removed from the group and can only come back if invited by an admin. Invite links don\'t work for them.</string>
-    <string name="NewChannel">New Channel</string>
-    <string name="EnterChannelName">Channel name</string>
-    <string name="Comments">Comments</string>
-    <string name="CommentsInfo">If you enable comments, people will be able to discuss your posts in the channel.</string>
-    <string name="AddMutual">Add contacts to your channel</string>
-    <string name="ChannelUsernameHelp">People can share this link with others and find your channel using Telegram search.</string>
-    <!--<string name="MegaUsernameHelp">People can share this link with others and find your supergroup using Telegram search.</string>-->
-    <string name="ChannelUsernamePlaceholder">link</string>
-    <string name="ChannelPrivateLinkHelp">People can join your channel by following this link. You can revoke the link any time.</string>
-    <string name="DescriptionPlaceholder">Description</string>
-    <string name="DescriptionInfo">You can provide an optional description for your channel.</string>
-    <string name="ChannelPublic">Public Channel</string>
-    <string name="ChannelPublicInfo">Public channels can be found in search, anyone can join them.</string>
-    <string name="ChannelPrivate">Private Channel</string>
-    <string name="ChannelPrivateInfo">Private channels can only be joined via an invite link.</string>
-    <string name="ChannelLinkTitle">Link</string>
-    <string name="ChannelInviteLinkTitle">Invite Link</string>
-    <string name="ChannelAddMembers">Add members</string>
-    <string name="LeaveChannel">Leave Channel</string>
-    <string name="LeaveChannelMenu">Leave channel</string>
-    <string name="ChannelSettings">Settings</string>
-    <string name="ChannelJoin">JOIN</string>
-    <string name="OpenChannelProfile">Channel info</string>
-    <string name="ChannelBroadcast">Broadcast</string>
-    <string name="ChannelComment">Comment</string>
-    <string name="ShowDiscussion">show comments</string>
-    <string name="ChannelAlertTitle">What is a Channel?</string>
-    <string name="ChannelAlertText">Channels are a new tool for broadcasting your messages to large audiences.</string>
-    <string name="ChannelAlertCreate">CREATE CHANNEL</string>
-    <string name="LinkInUse">Sorry, this name is already taken.</string>
-    <string name="LinkInvalid">Sorry, this name is invalid.</string>
-    <string name="LinkInvalidShort">Channel names must have at least 5 characters.</string>
-    <string name="LinkInvalidLong">The name must not exceed 32 characters.</string>
-    <string name="LinkInvalidStartNumber">Channel names can\'t start with a number.</string>
-    <!--<string name="LinkInvalidShortMega">Supergroup names must have at least 5 characters.</string>-->
-    <!--<string name="LinkInvalidStartNumberMega">Supergroup names can\'t start with a number.</string>-->
-    <string name="LinkChecking">Checking name…</string>
-    <string name="LinkAvailable">%1$s is available.</string>
-    <string name="ChannelMembers">Members</string>
-    <string name="ChannelBlockedUsers">Blocked users</string>
-    <string name="ChannelAdministrators">Administrators</string>
-    <string name="ChannelDelete">Delete Channel</string>
-    <string name="ChannelDeleteMenu">Delete channel</string>
-    <string name="ChannelDeleteAlert">Wait! Deleting this channel will remove all members and all messages will be lost. Delete the channel anyway?</string>
-    <string name="ChannelLeaveAlert">Are you sure you want to leave the channel?</string>
-    <string name="ChannelDeleteInfo">You will lose all messages in this channel.</string>
-    <string name="ChannelEdit">Edit</string>
-    <!--<string name="MegaWasPrivateAlert">Please note that if you choose a public link for your supergroup, anyone will be able to find it in search and join.\n\nDo not create this link if you want your supergroup to stay private.</string>-->
-    <string name="ChannelWasPrivateAlert">Please note that if you choose a public link for your channel, anyone will be able to find it in search and join.\n\nDo not create this link if you want your channel to stay private.</string>
-    <string name="ChannelPublicEmptyUsername">Please choose a link for your public channel, so that people can find it in search and share with others.\n\nIf you\'re not interested, we suggest creating a private channel instead.</string>
-    <string name="ActionCreateChannel">Channel created</string>
-    <string name="ActionChannelChangedPhoto">Channel photo changed</string>
-    <string name="ActionChannelRemovedPhoto">Channel photo removed</string>
-    <string name="ActionChannelChangedTitle">Channel name changed to un2</string>
-    <string name="ChannelPublicLimitReached">Sorry, you have created too many public channels. You can either create a private channel or delete one of your existing channels first.</string>
-    <string name="ChannelModerator">Moderator</string>
-    <string name="ChannelCreator">Creator</string>
-    <string name="ChannelEditor">Administrator</string>
-    <string name="ChannelMute">MUTE</string>
-    <string name="ChannelUnmute">UNMUTE</string>
-    <string name="ChannelAddAdmin">Add Administrator</string>
-    <string name="ChannelInviteViaLink">Invite via Link</string>
-    <string name="ChannelAddUserAdminAlert">Are you sure you want to make %1$s an administrator?</string>
-    <string name="ChannelRemoveUserAdmin">Remove</string>
-    <string name="ChannelMembersInfo">Only channel administrators can see this list.</string>
-    <string name="ChannelAdminNotParticipant">This user hasn\'t joined the channel yet. Do you want to invite them?</string>
-    <string name="ChannelLinkInfo">Anyone who has Telegram installed will be able to join your channel by following this link.</string>
-    <string name="ChannelAdminsInfo">You can add administrators to help you manage your channel. Tap and hold to remove admins.</string>
-    <string name="ChannelJoinTo">Do you want to join the channel \'%1$s\'?</string>
-    <string name="ChannelCantOpenPrivate">Sorry, this chat is no longer accessible.</string>
-    <string name="ChannelAddTo">Add %1$s to the channel?</string>
-    <string name="ChannelUserLeftError">Sorry, this user decided to leave this channel, so you cannot invite them back here.</string>
-    <string name="ChannelUserCantAdd">Sorry, you can\'t add this user to channels.</string>
-    <string name="ChannelUserCantAdmin">Sorry, too many admins in this channel.</string>
-    <string name="ChannelUserCantBot">Sorry, too many bots in this channel.</string>
-    <string name="ChannelUserAddLimit">Sorry, you can only add the first 200 members to a channel. Note that an unlimited number of people may join via the channel\'s link.</string>
-    <string name="ChannelAddedBy">un1 added you to this channel</string>
-    <string name="ChannelJoined">You joined the channel</string>
-    <string name="ChannelRemoveUser">Remove from channel</string>
-    <string name="ChannelCantSendMessage">Sorry, you can\'t send messages to this channel.</string>
-    <string name="ChannelAddedByNotification">%1$s added you to the channel %2$s</string>
-    <string name="ChannelPhotoEditNotification">Channel %1$s updated photo</string>
-    <string name="ChannelMessageGroupNoText">%1$s sent a message to the channel %2$s</string>
-    <string name="ChannelMessageGroupPhoto">%1$s sent a photo to the channel %2$s</string>
-    <string name="ChannelMessageGroupVideo">%1$s sent a video to the channel %2$s</string>
-    <string name="ChannelMessageGroupContact">%1$s shared a contact in the channel %2$s</string>
-    <string name="ChannelMessageGroupMap">%1$s sent a location to the channel %2$s</string>
-    <string name="ChannelMessageGroupDocument">%1$s sent a file to the channel %2$s</string>
-    <string name="ChannelMessageGroupGif">%1$s sent a GIF to the channel %2$s</string>
-    <string name="ChannelMessageGroupAudio">%1$s sent a voice message to the channel %2$s</string>
-    <string name="ChannelMessageGroupSticker">%1$s sent a sticker to the channel %2$s</string>
-    <string name="ChannelMessageNoText">%1$s posted a message</string>
-    <string name="ChannelMessagePhoto">%1$s posted a photo</string>
-    <string name="ChannelMessageVideo">%1$s posted a video</string>
-    <string name="ChannelMessageContact">%1$s posted a contact</string>
-    <string name="ChannelMessageMap">%1$s posted a location</string>
-    <string name="ChannelMessageDocument">%1$s posted a file</string>
-    <string name="ChannelMessageGIF">%1$s posted a GIF</string>
-    <string name="ChannelMessageAudio">%1$s posted a voice message</string>
-    <string name="ChannelMessageSticker">%1$s posted a sticker</string>
-    <string name="WhoCanAddMembers">Who can add new members?</string>
-    <string name="WhoCanAddMembersAllMembers">All Members</string>
-    <string name="WhoCanAddMembersAdmins">Only Admins</string>
-    <string name="ChannelNotifyMembersInfoOn">Members will be notified when you post</string>
-    <string name="ChannelNotifyMembersInfoOff">Members will not be notified when you post</string>
-    <string name="ChannelSignMessages">Sign Messages</string>
-    <string name="ChannelSignMessagesInfo">Add names of the admins to the messages they post.</string>
-    <!--broadcasts-->
-    <string name="NewBroadcastList">New Broadcast List</string>
-    <string name="EnterListName">Enter list name</string>
-    <string name="YouCreatedBroadcastList">You created a broadcast list</string>
-    <string name="AddRecipient">Add recipient</string>
-    <string name="KickFromBroadcast">Remove from broadcast list</string>
-    <!--audio view-->
-    <string name="NoAudio">Please add files to the music library on your device to see them here.</string>
-    <string name="AttachMusic">Music</string>
-    <string name="AudioUnknownArtist">Unknown artist</string>
-    <string name="AudioUnknownTitle">Unknown title</string>
-    <!--documents view-->
-    <string name="SelectFile">Select File</string>
-    <string name="FreeOfTotal">Free %1$s of %2$s</string>
-    <string name="UnknownError">Unknown error</string>
-    <string name="AccessError">Access error</string>
-    <string name="NoFiles">No files yet...</string>
-    <string name="FileUploadLimit">File size shouldn\'t be greater than %1$s</string>
-    <string name="NotMounted">Storage not mounted</string>
-    <string name="UsbActive">USB transfer active</string>
-    <string name="InternalStorage">Internal Storage</string>
-    <string name="ExternalStorage">External Storage</string>
-    <string name="SystemRoot">System Root</string>
-    <string name="SdCard">SD Card</string>
-    <string name="Folder">Folder</string>
-    <string name="GalleryInfo">To send images without compression</string>
-    <!--chat view-->
-    <string name="Invisible">invisible</string>
-    <string name="Typing">typing...</string>
-    <string name="IsTyping">is typing...</string>
-    <string name="AreTyping">are typing...</string>
-    <string name="IsRecordingAudio">%1$s is recording voice message...</string>
-    <string name="IsSendingPhoto">%1$s is sending photo...</string>
-    <string name="IsSendingVideo">%1$s is sending video...</string>
-    <string name="IsSendingFile">%1$s is sending file...</string>
-    <string name="RecordingAudio">recording voice message...</string>
-    <string name="SendingPhoto">sending photo...</string>
-    <string name="SendingVideoStatus">sending video...</string>
-    <string name="SendingFile">sending file...</string>
-    <string name="GotAQuestion">Got a question\nabout Telegram?</string>
-    <string name="ChatTakePhoto">Take photo</string>
-    <string name="ChatGallery">Gallery</string>
-    <string name="ChatLocation">Location</string>
-    <string name="ChatVideo">Video</string>
-    <string name="ChatDocument">File</string>
-    <string name="ChatCamera">Camera</string>
-    <string name="NoMessages">No messages here yet...</string>
-    <string name="ForwardedMessage">Forwarded message</string>
-    <string name="From">From</string>
-    <string name="NoRecent">No recent</string>
-    <string name="Message">Message</string>
-    <string name="TypeMessage">Message</string>
-    <string name="ShareMyContactInfo">Share my contact</string>
-    <string name="AddToContacts">Add to contacts</string>
-    <string name="EncryptedPlaceholderTitleIncoming">%s invited you to join a secret chat.</string>
-    <string name="EncryptedPlaceholderTitleOutgoing">You have invited %s to join a secret chat.</string>
-    <string name="EncryptedDescriptionTitle">Secret chats:</string>
-    <string name="EncryptedDescription1">Use end-to-end encryption</string>
-    <string name="EncryptedDescription2">Leave no trace on our servers</string>
-    <string name="EncryptedDescription3">Have a self-destruct timer</string>
-    <string name="EncryptedDescription4">Do not allow forwarding</string>
-    <string name="YouWereKicked">You were removed from this group</string>
-    <string name="YouLeft">You left this group</string>
-    <string name="DeleteThisGroup">Delete this group</string>
-    <string name="DeleteThisChat">Delete this chat</string>
-    <string name="SlideToCancel">SLIDE TO CANCEL</string>
-    <string name="SaveToDownloads">Save to downloads</string>
-    <string name="SaveToGIFs">Save to GIFs</string>
-    <string name="DeleteGif">Delete GIF?</string>
-    <string name="SaveToMusic">Save to music</string>
-    <string name="ShareFile">Share</string>
-    <string name="ApplyLocalizationFile">Apply localization file</string>
-    <string name="UnsupportedAttachment">Unsupported attachment</string>
-    <string name="SetTimer">Set self-destruct timer</string>
-    <string name="ServiceNotifications">Service notifications</string>
-    <string name="GettingLinkInfo">Getting Link Info...</string>
-    <string name="OpenInBrowser">Open in Browser</string>
-    <string name="CopyUrl">Copy URL</string>
-    <string name="SendItems">Send %1$s</string>
-    <string name="OpenUrlAlert">Open url %1$s?</string>
-    <string name="ReportSpam">REPORT SPAM</string>
-    <string name="AddContactChat">ADD CONTACT</string>
-    <string name="ReportSpamAlert">Are you sure you want to report spam from this user?</string>
-    <string name="ReportSpamAlertGroup">Are you sure you want to report spam from this group?</string>
-    <string name="NobodyLikesSpam1">Sorry, you can only send messages to mutual contacts at the moment.</string>
-    <string name="NobodyLikesSpam2">Sorry, you can only add mutual contacts to groups at the moment.</string>
-    <string name="NobodyLikesSpamUrl">https://telegram.org/faq#can-39t-send-messages-to-non-contacts</string>
-    <string name="MoreInfo">More info</string>
-    <string name="ShareSendTo">Send to...</string>
-    <string name="TapHereGifs">Tap here to access saved GIFs</string>
-    <!--notification-->
-    <string name="MessageLifetimeChanged">%1$s set the self-destruct timer to %2$s</string>
-    <string name="MessageLifetimeChangedOutgoing">You set the self-destruct timer to %1$s</string>
-    <string name="MessageLifetimeRemoved">%1$s disabled the self-destruct timer</string>
-    <string name="MessageLifetimeYouRemoved">You disabled the self-destruct timer</string>
-    <string name="YouHaveNewMessage">You have a new message</string>
-    <string name="NotificationMessageText">%1$s: %2$s</string>
-    <string name="NotificationMessageNoText">%1$s sent you a message</string>
-    <string name="NotificationMessagePhoto">%1$s sent you a photo</string>
-    <string name="NotificationMessageVideo">%1$s sent you a video</string>
-    <string name="NotificationMessageContact">%1$s shared a contact with you</string>
-    <string name="NotificationMessageMap">%1$s sent you a location</string>
-    <string name="NotificationMessageDocument">%1$s sent you a file</string>
-    <string name="NotificationMessageGif">%1$s sent you a GIF</string>
-    <string name="NotificationMessageAudio">%1$s sent you a voice message</string>
-    <string name="NotificationMessageSticker">%1$s sent you a sticker</string>
-    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
-    <string name="NotificationMessageGroupNoText">%1$s sent a message to the group %2$s</string>
-    <string name="NotificationMessageGroupPhoto">%1$s sent a photo to the group %2$s</string>
-    <string name="NotificationMessageGroupVideo">%1$s sent a video to the group %2$s</string>
-    <string name="NotificationMessageGroupContact">%1$s shared a contact in the group %2$s</string>
-    <string name="NotificationMessageGroupMap">%1$s sent a location to the group %2$s</string>
-    <string name="NotificationMessageGroupDocument">%1$s sent a file to the group %2$s</string>
-    <string name="NotificationMessageGroupGif">%1$s sent a GIF to the group %2$s</string>
-    <string name="NotificationMessageGroupAudio">%1$s sent a voice message to the group %2$s</string>
-    <string name="NotificationMessageGroupSticker">%1$s sent a sticker to the group %2$s</string>
-    <string name="NotificationInvitedToGroup">%1$s invited you to the group %2$s</string>
-    <string name="NotificationEditedGroupName">%1$s edited the group\'s %2$s name</string>
-    <string name="NotificationEditedGroupPhoto">%1$s edited the group\'s %2$s photo</string>
-    <string name="NotificationGroupAddMember">%1$s invited %3$s to the group %2$s</string>
-    <string name="NotificationGroupAddSelf">%1$s returned to the group %2$s</string>
-    <string name="NotificationGroupKickMember">%1$s removed %3$s from the group %2$s</string>
-    <string name="NotificationGroupKickYou">%1$s removed you from the group %2$s</string>
-    <string name="NotificationGroupLeftMember">%1$s has left the group %2$s</string>
-    <string name="NotificationContactJoined">%1$s joined Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Privacy and Security - Sessions and terminate that session.\n\nIf you think that somebody logged in to your account against your will, you can enable two-step verification in Privacy and Security settings.\n\nSincerely,\nThe Telegram Team</string>
-    <string name="NotificationContactNewPhoto">%1$s updated profile photo</string>
-    <string name="NotificationInvitedToGroupByLink">%1$s joined to the group %2$s via invite link</string>
-    <string name="Reply">Reply</string>
-    <string name="ReplyToGroup">Reply to %1$s</string>
-    <string name="ReplyToUser">Reply to %1$s</string>
-    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
-    <!--contacts view-->
-    <string name="SelectContact">Select Contact</string>
-    <string name="NoContacts">No contacts yet</string>
-    <string name="InviteText">Hey, let\'s switch to Telegram: https://telegram.org/dl</string>
-    <string name="TodayAt">at</string>
-    <string name="YesterdayAt">yesterday at</string>
-    <string name="Online">online</string>
-    <string name="LastSeen">last seen</string>
-    <string name="LastSeenDate">last seen</string>
-    <string name="LastSeenNow">last seen just now</string>
-    <string name="InviteFriends">Invite Friends</string>
-    <string name="GlobalSearch">GLOBAL SEARCH</string>
-    <string name="Lately">last seen recently</string>
-    <string name="WithinAWeek">last seen within a week</string>
-    <string name="WithinAMonth">last seen within a month</string>
-    <string name="ALongTimeAgo">last seen a long time ago</string>
-    <string name="NewMessageTitle">New Message</string>
-    <!--group create view-->
-    <string name="SendMessageTo">Send message to...</string>
-    <string name="SoftUserLimitAlert">You will be able to add more users after you finish creating the group and convert it to a supergroup.</string>
-    <string name="EnterGroupNamePlaceholder">Enter group name</string>
-    <string name="GroupName">Group name</string>
-    <string name="MembersCount">%1$d/%2$d members</string>
-    <string name="JoinToGroup">Do you want to join the chat \'%1$s\'?</string>
-    <string name="JoinToGroupErrorFull">Sorry, this group is already full.</string>
-    <string name="JoinToGroupErrorNotExist">Sorry, this chat does not seem to exist.</string>
-    <string name="LinkCopied">Link copied to clipboard</string>
-    <string name="InviteToGroupByLink">Invite to Group via Link</string>
-    <string name="InviteLink">Invite Link</string>
-    <string name="RevokeAlert">Are you sure you want to revoke this link? Once the link is revoked, no one will be able to join using it.</string>
-    <string name="RevokeAlertNewLink">The previous invite link is now inactive. A new link has been generated.</string>
-    <string name="RevokeButton">Revoke</string>
-    <string name="RevokeLink">Revoke Link</string>
-    <string name="CopyLink">Copy Link</string>
-    <string name="ShareLink">Share Link</string>
-    <string name="LinkInfo">Anyone who has Telegram installed will be able to join your group by following this link.</string>
-    <!--set admins view-->
-    <string name="SetAdminsTitle">Chat Admins</string>
-    <string name="SetAdminsAll">All Members are Admins</string>
-    <string name="SetAdminsAllInfo">All members can add new members, edit name and photo of the group.</string>
-    <string name="SetAdminsNotAllInfo">Only admins can add and remove members, edit name and photo of the group.</string>
-    <!--group info view-->
-    <string name="SharedMedia">Shared Media</string>
-    <string name="SETTINGS">Settings</string>
-    <string name="AddMember">Add member</string>
-    <string name="SetAdmins">Set admins</string>
-    <string name="DeleteAndExit">Delete and leave group</string>
-    <string name="Notifications">Notifications</string>
-    <string name="KickFromGroup">Remove from group</string>
-    <string name="ConvertGroup">Upgrade to Supergroup</string>
-    <string name="ConvertGroupAlert">Please note that group members will need to update their Telegram apps to the latest version to see your supergroup. Are you sure you want to upgrade this group?</string>
-    <string name="ConvertGroupInfo"><![CDATA[<b>]]>Members limit reached.<![CDATA[</b>]]>\n\nTo go over the limit and get additional features, upgrade to a supergroup:\n\n• Supergroups can get up to %1$s\n• New members see the entire chat history\n• Admins delete messages for everyone\n• Notifications are muted by default</string>
-    <!--contact info view-->
-    <string name="ShareContact">Share</string>
-    <string name="AddContact">Add</string>
-    <string name="AddContactTitle">Add contact</string>
-    <string name="BlockContact">Block</string>
-    <string name="EditContact">Edit</string>
-    <string name="DeleteContact">Delete</string>
-    <string name="PhoneHome">Home</string>
-    <string name="PhoneMobile">Mobile</string>
-    <string name="PhoneWork">Work</string>
-    <string name="PhoneOther">Other</string>
-    <string name="PhoneMain">Main</string>
-    <string name="StartEncryptedChat">Start Secret Chat</string>
-    <string name="CreateEncryptedChatError">An error occurred.</string>
-    <string name="EncryptionKey">Encryption Key</string>
-    <string name="MessageLifetime">Self-Destruct Timer</string>
-    <string name="ShortMessageLifetimeForever">Off</string>
-    <string name="EncryptionKeyDescription">This image and text were derived from the encryption key for this secret chat with <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>If they look the same on <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> device, end-to-end encryption is guaranteed.<![CDATA[<br><br>]]>Learn more at telegram.org</string>
-    <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
-    <string name="NumberUnknown">Unknown</string>
-    <string name="Info">Info</string>
-    <string name="Phone">Phone</string>
-    <!--usernames-->
-    <string name="Username">Username</string>
-    <string name="UsernamePlaceholder">Your Username</string>
-    <string name="UsernameInUse">Sorry, this username is already taken.</string>
-    <string name="UsernameInvalid">Sorry, this username is invalid.</string>
-    <string name="UsernameInvalidShort">A username must have at least 5 characters.</string>
-    <string name="UsernameInvalidLong">The username must not exceed 32 characters.</string>
-    <string name="UsernameInvalidStartNumber">Sorry, a username can\'t start with a number.</string>
-    <string name="UsernameHelp">You can choose a username on <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. If you do, other people will be able to find you by this username and contact you without knowing your phone number.<![CDATA[<br><br>]]>You can use <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> and underscores. Minimum length is <![CDATA[<b>]]>5<![CDATA[</b>]]> characters.</string>
-    <string name="UsernameChecking">Checking username...</string>
-    <string name="UsernameAvailable">%1$s is available.</string>
-    <string name="UsernameEmpty">None</string>
-    <string name="ErrorOccurred">An error occurred.</string>
-    <!--stickers view-->
-    <string name="Stickers">Stickers</string>
-    <string name="StickersInfo">Artists are welcome to add their own sticker packs using our @stickers bot.\n\nUsers can add stickers by tapping on them and choosing \"Add to Stickers\".</string>
-    <string name="AddStickers">Add Stickers</string>
-    <string name="AddToStickers">Add to Stickers</string>
-    <string name="AddStickersNotFound">Stickers not found</string>
-    <string name="StickersRemoved">Stickers removed</string>
-    <string name="AddStickersInstalled">New stickers added</string>
-    <string name="StickersHide">Hide</string>
-    <string name="StickersShow">Show</string>
-    <string name="StickersShare">Share</string>
-    <string name="StickersCopy">Copy link</string>
-    <string name="StickersRemove">Remove</string>
-    <string name="NoStickers">No stickers yet</string>
-    <string name="TooMuchStickersets">Sorry, you have reached the maximum number of sticker sets.</string>
-    <!--settings view-->
-    <string name="ResetNotificationsText">Reset all notification settings to default</string>
-    <string name="TextSize">Messages Text Size</string>
-    <string name="AskAQuestion">Ask a Question</string>
-    <string name="EnableAnimations">Enable Animations</string>
-    <string name="Unblock">Unblock</string>
-    <string name="UnblockText">Tap and hold on user to unblock.</string>
-    <string name="NoBlocked">No blocked users yet</string>
-    <string name="MessageNotifications">Message notifications</string>
-    <string name="Alert">Alert</string>
-    <string name="MessagePreview">Message Preview</string>
-    <string name="GroupNotifications">Group notifications</string>
-    <string name="Sound">Sound</string>
-    <string name="InAppNotifications">In-app notifications</string>
-    <string name="InAppSounds">In-App Sounds</string>
-    <string name="InAppVibrate">In-App Vibrate</string>
-    <string name="Vibrate">Vibrate</string>
-    <string name="InAppPreview">In-App Preview</string>
-    <string name="Reset">Reset</string>
-    <string name="ResetAllNotifications">Reset All Notifications</string>
-    <string name="UndoAllCustom">Undo all custom notification settings for all your contacts and groups</string>
-    <string name="NotificationsAndSounds">Notifications and Sounds</string>
-    <string name="BlockedUsers">Blocked Users</string>
-    <string name="LogOut">Log out</string>
-    <string name="NoSound">No sound</string>
-    <string name="Default">Default</string>
-    <string name="Support">Support</string>
-    <string name="OnlyIfSilent">Only if silent</string>
-    <string name="ChatBackground">Chat Background</string>
-    <string name="MessagesSettings">Messages</string>
-    <string name="SendByEnter">Send by Enter</string>
-    <string name="TerminateAllSessions">Terminate All Other Sessions</string>
-    <string name="Events">Events</string>
-    <string name="ContactJoined">Contact joined Telegram</string>
-    <string name="Language">Language</string>
-    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"https://telegram.org/faq#general\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
-    <string name="AskButton">Ask a volunteer</string>
-    <string name="TelegramFaq">Telegram FAQ</string>
-    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
-    <string name="DeleteLocalization">Delete localization?</string>
-    <string name="IncorrectLocalization">Incorrect localization file</string>
-    <string name="Enabled">Enabled</string>
-    <string name="Disabled">Disabled</string>
-    <string name="NotificationsService">Notifications Service</string>
-    <string name="NotificationsServiceDisableInfo">If Google Play Services are enough for you to receive notifications, you can disable Notifications Service. However we recommend you to leave it enabled to keep app running in background and receive instant notifications.</string>
-    <string name="SortBy">Sort By</string>
-    <string name="ImportContacts">Import Contacts</string>
-    <string name="SortFirstName">First name</string>
-    <string name="SortLastName">Last name</string>
-    <string name="LedColor">LED Color</string>
-    <string name="PopupNotification">Popup Notifications</string>
-    <string name="NoPopup">No popup</string>
-    <string name="OnlyWhenScreenOn">Only when screen \"on\"</string>
-    <string name="OnlyWhenScreenOff">Only when screen \"off\"</string>
-    <string name="AlwaysShowPopup">Always show popup</string>
-    <string name="BadgeNumber">Badge Counter</string>
-    <string name="Short">Short</string>
-    <string name="Long">Long</string>
-    <string name="SystemDefault">System default</string>
-    <string name="SettingsDefault">Settings default</string>
-    <string name="AutomaticMediaDownload">Automatic media download</string>
-    <string name="WhenUsingMobileData">When using mobile data</string>
-    <string name="WhenConnectedOnWiFi">When connected on Wi-Fi</string>
-    <string name="WhenRoaming">When roaming</string>
-    <string name="NoMediaAutoDownload">No media</string>
-    <string name="AutoplayGifs">Autoplay GIFs</string>
-    <string name="RaiseToSpeak">Raise to Speak</string>
-    <string name="SaveToGallerySettings">Save to gallery</string>
-    <string name="EditName">Edit name</string>
-    <string name="NotificationsPriority">Priority</string>
-    <string name="NotificationsPriorityDefault">Default</string>
-    <string name="NotificationsPriorityLow">Low</string>
-    <string name="NotificationsPriorityHigh">High</string>
-    <string name="NotificationsPriorityMax">Max</string>
-    <string name="RepeatNotificationsNever">Never</string>
-    <string name="RepeatNotifications">Repeat Notifications</string>
-    <string name="PhoneNumberHelp">You can change your Telegram number here. Your account and all your cloud data — messages, media, contacts, etc. will be moved to the new number.\n\n<![CDATA[<b>Important:</b>]]> all your Telegram contacts will get your <![CDATA[<b>new number</b>]]> added to their address book, provided they had your old number and you haven\'t blocked them in Telegram.</string>
-    <string name="PhoneNumberAlert">All your Telegram contacts will get your new number added to their address book, provided they had your old number and you haven\'t blocked them in Telegram.</string>
-    <string name="PhoneNumberChange">CHANGE NUMBER</string>
-    <string name="ChangePhoneNewNumber">New number</string>
-    <string name="ChangePhoneHelp">We will send an SMS with a confirmation code to your new number.</string>
-    <string name="ChangePhoneNumberOccupied">The number %1$s is already connected to a Telegram account. Please delete that account before migrating to the new number.</string>
-    <string name="NotificationsOther">Other</string>
-    <string name="NotificationsDisabled">Disabled</string>
-    <string name="VibrationDisabled">Disabled</string>
-    <string name="LedDisabled">Disabled</string>
-    <string name="RepeatDisabled">Off</string>
-    <string name="InChatSound">In-Chat Sounds</string>
-    <string name="SoundDefault">Default</string>
-    <string name="VibrationDefault">Default</string>
-    <string name="SmartNotifications">Smart Notifications</string>
-    <string name="SmartNotificationsDisabled">Disabled</string>
-    <string name="SmartNotificationsInfo">Sound at most %1$s within %2$s</string>
-    <string name="SmartNotificationsSoundAtMost">Sound at most</string>
-    <string name="SmartNotificationsTimes">times</string>
-    <string name="SmartNotificationsWithin">within</string>
-    <string name="SmartNotificationsMinutes">minutes</string>
-    <string name="SecretWebPage">Link Previews</string>
-    <string name="SecretChat">Secret chats</string>
-    <!--cache view-->
-    <string name="CacheSettings">Cache Settings</string>
-    <string name="LocalDatabase">Local Database</string>
-    <string name="LocalDatabaseClear">Clear cached text messages?</string>
-    <string name="LocalDatabaseInfo">Clearing the local database will delete the texts of cached messages and compress the database to save internal disk space. Telegram needs some data to work, so database size will not reach zero.\n\nThis operation can take a few minutes to complete.</string>
-    <string name="ClearMediaCache">Clear Cache</string>
-    <string name="CacheClear">Clear</string>
-    <string name="CalculatingSize">Calculating...</string>
-    <string name="LocalDocumentCache">Documents</string>
-    <string name="LocalPhotoCache">Photos</string>
-    <string name="LocalAudioCache">Voice messages</string>
-    <string name="LocalVideoCache">Videos</string>
-    <string name="LocalMusicCache">Music</string>
-    <string name="LocalCache">Other files</string>
-    <string name="CacheEmpty">Empty</string>
-    <string name="KeepMedia">Keep Media</string>
-    <string name="KeepMediaInfo">Photos, videos and other files from cloud chats that you have <![CDATA[<b>not accessed</b>]]> during this period will be removed from this device to save disk space.\n\nAll media will stay in the Telegram cloud and can be re-downloaded if you need it again.</string>
-    <string name="KeepMediaForever">Forever</string>
-    <!--sessions view-->
-    <string name="SessionsTitle">Active Sessions</string>
-    <string name="CurrentSession">Current session</string>
-    <string name="NoOtherSessions">No other active sessions</string>
-    <string name="NoOtherSessionsInfo">You can log in to Telegram from other mobile, tablet and desktop devices, using the same phone number. All your data will be instantly synchronized.</string>
-    <string name="OtherSessions">Active Sessions</string>
-    <string name="SessionsInfo">Control your sessions on other devices.</string>
-    <string name="TerminateSessionInfo">Tap on a session to terminate.</string>
-    <string name="TerminateSessionQuestion">Terminate this session?</string>
-    <string name="UnofficialApp">unofficial app</string>
-    <!--passcode view-->
-    <string name="Passcode">Passcode Lock</string>
-    <string name="ChangePasscode">Change Passcode</string>
-    <string name="ChangePasscodeInfo">When you set up an additional passcode, a lock icon will appear on the chats page. Tap it to lock and unlock your Telegram app.\n\nNote: if you forget the passcode, you\'ll need to delete and reinstall the app. All secret chats will be lost.</string>
-    <string name="ChangePasscodeAlert">You will now see a lock icon on the chats page. Tap it to lock your Telegram app with your new passcode.</string>
-    <string name="PasscodePIN">PIN</string>
-    <string name="PasscodePassword">Password</string>
-    <string name="EnterCurrentPasscode">Enter your current passcode</string>
-    <string name="EnterNewFirstPasscode">Enter a passcode</string>
-    <string name="EnterNewPasscode">Enter your new passcode</string>
-    <string name="EnterYourPasscode">Enter your passcode</string>
-    <string name="ReEnterYourPasscode">Re-enter your new passcode</string>
-    <string name="InvalidPasscode">Invalid passcode</string>
-    <string name="PasscodeDoNotMatch">Passcodes do not match</string>
-    <string name="AutoLock">Auto-lock</string>
-    <string name="AutoLockInfo">Require passcode if away for a time.</string>
-    <string name="AutoLockInTime">in %1$s</string>
-    <string name="AutoLockDisabled">Disabled</string>
-    <string name="UnlockFingerprint">Unlock with Fingerprint</string>
-    <string name="FingerprintInfo">Confirm fingerprint to continue</string>
-    <string name="FingerprintHelp">Touch sensor</string>
-    <string name="FingerprintNotRecognized">Fingerprint not recognized. Try again</string>
-    <!--media view-->
-    <string name="NoMedia">Share photos and videos in this chat and access them on any of your devices.</string>
-    <string name="DocumentsTitle">Shared Files</string>
-    <string name="SharedMediaTitle">Shared Media</string>
-    <string name="LinksTitle">Shared Links</string>
-    <string name="AudioTitle">Shared Music</string>
-    <string name="NoSharedAudio">Share music in this chat and access them on any of your devices.</string>
-    <string name="NoSharedFiles">Share files and documents in this chat and access them on any of your devices.</string>
-    <string name="NoSharedLinks">Share links in this chat and access them on any of your devices.</string>
-    <!--map view-->
-    <string name="Map">Map</string>
-    <string name="Satellite">Satellite</string>
-    <string name="Hybrid">Hybrid</string>
-    <string name="MetersAway">m away</string>
-    <string name="KMetersAway">km away</string>
-    <string name="SendLocation">Send your current location</string>
-    <string name="SendSelectedLocation">Send selected location</string>
-    <string name="ShareLocation">Location</string>
-    <string name="AccurateTo">Accurate to %1$s</string>
-    <string name="NearbyPlaces">OR CHOOSE A PLACE</string>
-    <!--photo gallery view-->
-    <string name="ShowAllMedia">Show all media</string>
-    <string name="SaveToGallery">Save to gallery</string>
-    <string name="Of">%1$d of %2$d</string>
-    <string name="Gallery">Gallery</string>
-    <string name="AllPhotos">All Photos</string>
-    <string name="AllVideo">All Videos</string>
-    <string name="NoPhotos">No photos yet</string>
-    <string name="NoVideo">No videos yet</string>
-    <string name="PleaseDownload">Please download media first</string>
-    <string name="NoRecentPhotos">No recent photos</string>
-    <string name="NoRecentGIFs">No recent GIFs</string>
-    <string name="SearchImages">FIND IMAGES</string>
-    <string name="SearchImagesInfo">WEB SEARCH</string>
-    <string name="SearchGifs">FIND GIFS</string>
-    <string name="SearchImagesTitle">Search web</string>
-    <string name="SearchGifsTitle">Search GIFs</string>
-    <string name="CropImage">Crop image</string>
-    <string name="EditImage">Edit image</string>
-    <string name="Enhance">Enhance</string>
-    <string name="Highlights">Highlights</string>
-    <string name="Contrast">Contrast</string>
-    <string name="Exposure">Exposure</string>
-    <string name="Warmth">Warmth</string>
-    <string name="Saturation">Saturation</string>
-    <string name="Vignette">Vignette</string>
-    <string name="Shadows">Shadows</string>
-    <string name="Grain">Grain</string>
-    <string name="Sharpen">Sharpen</string>
-    <string name="Fade">Fade</string>
-    <string name="Tint">Tint</string>
-    <string name="TintShadows">SHADOWS</string>
-    <string name="TintHighlights">HIGHLIGHTS</string>
-    <string name="Curves">Curves</string>
-    <string name="CurvesAll">ALL</string>
-    <string name="CurvesRed">RED</string>
-    <string name="CurvesGreen">GREEN</string>
-    <string name="CurvesBlue">BLUE</string>
-    <string name="Blur">Blur</string>
-    <string name="BlurOff">Off</string>
-    <string name="BlurLinear">Linear</string>
-    <string name="BlurRadial">Radial</string>
-    <string name="AreYouSureDeletePhoto">Are you sure you want to delete this photo?</string>
-    <string name="AreYouSureDeleteVideo">Are you sure you want to delete this video?</string>
-    <string name="DiscardChanges">Discard changes?</string>
-    <string name="ClearSearch">Clear search history?</string>
-    <string name="ClearButton">Clear</string>
-    <string name="PickerPhotos">Photos</string>
-    <string name="PickerVideo">Video</string>
-    <string name="AddCaption">Add a caption...</string>
-    <string name="PhotoCaption">Photo Caption</string>
-    <string name="VideoCaption">Video Caption</string>
-    <string name="Caption">Caption</string>
-    <!--password view-->
-    <string name="TwoStepVerification">Two-Step Verification</string>
-    <string name="SetAdditionalPassword">Set Additional Password</string>
-    <string name="SetAdditionalPasswordInfo">You can set a password that will be required when you log in on a new device in addition to the code you get in the SMS.</string>
-    <string name="YourPassword">Your Password</string>
-    <string name="PleaseEnterCurrentPassword">Please enter your password</string>
-    <string name="PleaseEnterFirstPassword">Enter a password</string>
-    <string name="PleaseEnterPassword">Please enter your new password</string>
-    <string name="PleaseReEnterPassword">Please re-enter your password</string>
-    <string name="RecoveryEmail">Recovery E-Mail</string>
-    <string name="YourEmail">Your E-Mail</string>
-    <string name="YourEmailInfo">Please add your valid e-mail. It is the only way to recover a forgotten password.</string>
-    <string name="YourEmailSkip">Skip</string>
-    <string name="YourEmailSkipWarning">Warning</string>
-    <string name="YourEmailSkipWarningText">No, seriously.\n\nIf you forget your password, you will lose access to your Telegram account. There will be no way to restore it.</string>
-    <string name="YourEmailAlmostThere">Almost there!</string>
-    <string name="YourEmailAlmostThereText">Please check your e-mail (don\'t forget the spam folder) to complete Two-Step Verification setup.</string>
-    <string name="YourPasswordSuccess">Success!</string>
-    <string name="YourPasswordSuccessText">Your password for Two-Step Verification is now active.</string>
-    <string name="ChangePassword">Change Password</string>
-    <string name="TurnPasswordOff">Turn Password Off</string>
-    <string name="SetRecoveryEmail">Set Recovery E-Mail</string>
-    <string name="ChangeRecoveryEmail">Change Recovery E-Mail</string>
-    <string name="TurnPasswordOffQuestion">Are you sure you want to disable your password?</string>
-    <string name="PasswordHint">Password Hint</string>
-    <string name="PasswordHintText">Please create a hint for your password</string>
-    <string name="PasswordDoNotMatch">Passwords do not match</string>
-    <string name="AbortPassword">Abort two-step verification setup</string>
-    <string name="EmailPasswordConfirmText">Please follow these steps to complete Two-Step Verification Setup:\n\n1. Check your e-mail (don\'t forget the spam folder)\n%1$s\n\n2. Click on the validation link.</string>
-    <string name="PasswordAsHintError">Hint must be different from your password</string>
-    <string name="PasswordEmailInvalid">Invalid e-mail</string>
-    <string name="RestorePasswordNoEmailTitle">Sorry</string>
-    <string name="RestorePasswordNoEmailText">Since you haven\'t provided a recovery e-mail when setting up your password, your remaining options are either to remember your password or to reset your account.</string>
-    <string name="RestoreEmailSent">We have sent a recovery code to the e-mail you provided:\n\n%1$s</string>
-    <string name="RestoreEmailSentInfo">Please check your e-mail and enter the 6-digit code we have sent here.</string>
-    <string name="RestoreEmailTrouble">Having trouble accessing your e-mail %1$s?</string>
-    <string name="RestoreEmailTroubleText">If you can\'t restore access to your e-mail, your remaining options are either to remember your password or to reset your account.</string>
-    <string name="ResetMyAccount">RESET MY ACCOUNT</string>
-    <string name="ResetMyAccountText">You will lose all your chats and messages, along with any media and files you shared, if you proceed with resetting your account.</string>
-    <string name="ResetMyAccountWarning">Warning</string>
-    <string name="ResetMyAccountWarningText">This action can not be undone.\n\nIf you reset your account, all your messages and chats will be deleted.</string>
-    <string name="ResetMyAccountWarningReset">Reset</string>
-    <string name="LoginPassword">Password</string>
-    <string name="LoginPasswordText">You have enabled Two-Step Verification, so your account is protected with an additional password.</string>
-    <string name="ForgotPassword">Forgot password?</string>
-    <string name="PasswordRecovery">Password Recovery</string>
-    <string name="PasswordCode">Code</string>
-    <string name="PasswordReset">Password deactivated</string>
-    <string name="EnabledPasswordText">You have enabled Two-Step verification.\nYou\'ll need the password you set up here to log in to your Telegram account.</string>
-    <string name="PendingEmailText">Your recovery e-mail %1$s is not yet active and pending confirmation.</string>
-    <!--privacy settings-->
-    <string name="PrivacySettings">Privacy and Security</string>
-    <string name="PrivacyTitle">Privacy</string>
-    <string name="PrivacyLastSeen">Last Seen</string>
-    <string name="LastSeenEverybody">Everybody</string>
-    <string name="LastSeenContacts">My Contacts</string>
-    <string name="LastSeenNobody">Nobody</string>
-    <string name="LastSeenEverybodyMinus">Everybody (-%1$d)</string>
-    <string name="LastSeenContactsPlus">My Contacts (+%1$d)</string>
-    <string name="LastSeenContactsMinus">My Contacts (-%1$d)</string>
-    <string name="LastSeenContactsMinusPlus">My Contacts (-%1$d, +%2$d)</string>
-    <string name="LastSeenNobodyPlus">Nobody (+%1$d)</string>
-    <string name="SecurityTitle">Security</string>
-    <string name="DeleteAccountTitle">Account self-destructs</string>
-    <string name="DeleteAccountIfAwayFor">If you\'re away for</string>
-    <string name="DeleteAccountHelp">If you do not log in at least once within this period, your account will be deleted along with all groups, messages and contacts.</string>
-    <string name="DeleteAccountNowConfirmation">Delete your account?</string>
-    <string name="LastSeenHelp">Change who can see your Last Seen time.</string>
-    <string name="LastSeenTitle">Who can see your Last Seen time?</string>
-    <string name="AddExceptions">Add exceptions</string>
-    <string name="CustomHelp">Important: you won\'t be able to see Last Seen times for people with whom you don\'t share your Last Seen time. Approximate last seen will be shown instead (recently, within a week, within a month).</string>
-    <string name="AlwaysShareWith">Always Share With</string>
-    <string name="NeverShareWith">Never Share With</string>
-    <string name="CustomShareSettingsHelp">These settings will override the values above.</string>
-    <string name="AlwaysShareWithTitle">Always Share</string>
-    <string name="AlwaysShareWithPlaceholder">Always share with users...</string>
-    <string name="NeverShareWithTitle">Never Share</string>
-    <string name="NeverShareWithPlaceholder">Never share with users...</string>
-    <string name="EmpryUsersPlaceholder">Add Users</string>
-    <string name="PrivacyFloodControlError">Sorry, too many requests. Unable to change privacy settings now, please wait.</string>
-    <string name="ClearOtherSessionsHelp">Logs out all devices except for this one.</string>
-    <string name="RemoveFromListText">Tap and hold on user to delete.</string>
-    <string name="GroupsAndChannels">Groups</string>
-    <string name="WhoCanAddMe">Who can add me to group chats?</string>
-    <string name="WhoCanAddMeInfo">You can restrict who can add you to groups and channels with granular precision.</string>
-    <string name="AlwaysAllow">Always Allow</string>
-    <string name="NeverAllow">Never Allow</string>
-    <string name="AlwaysAllowPlaceholder">Always allow...</string>
-    <string name="NeverAllowPlaceholder">Never allow...</string>
-    <string name="CustomShareInfo">These users will or will not be able to add you to groups and channels regardless of the settings above.</string>
-    <string name="GroupsAndChannelsHelp">Change who can add you to groups and channels.</string>
-    <string name="InviteToGroupError">Sorry, you can\'t add this user to groups because of user\'s privacy settings.</string>
-    <string name="InviteToChannelError">Sorry, you can\'t add this user to channels because of user\'s privacy settings.</string>
-    <string name="CreateGroupError">Sorry, you can\'t create a group with these users because of their privacy settings.</string>
-    <!--edit video view-->
-    <string name="EditVideo">Edit Video</string>
-    <string name="OriginalVideo">Original Video</string>
-    <string name="EditedVideo">Edited Video</string>
-    <string name="SendingVideo">Sending video...</string>
-    <string name="CompressVideo">Compress Video</string>
-    <!--bot-->
-    <string name="Bot">bot</string>
-    <string name="BotShare">Share</string>
-    <string name="BotInvite">Add to group</string>
-    <string name="BotSettings">Settings</string>
-    <string name="BotHelp">Help</string>
-    <string name="BotStatusRead">has access to messages</string>
-    <string name="BotStatusCantRead">has no access to messages</string>
-    <string name="BotInfoTitle">What can this bot do?</string>
-    <string name="BotStart">START</string>
-    <string name="BotUnblock">RESTART</string>
-    <string name="BotStop">Stop bot</string>
-    <string name="BotRestart">Restart bot</string>
-    <!--button titles-->
-    <string name="Next">Next</string>
-    <string name="Back">Back</string>
-    <string name="Done">Done</string>
-    <string name="Open">Open</string>
-    <string name="Save">Save</string>
-    <string name="Cancel">Cancel</string>
-    <string name="Close">Close</string>
-    <string name="Add">Add</string>
-    <string name="Edit">Edit</string>
-    <string name="Send">Send</string>
-    <string name="Call">Call</string>
-    <string name="Copy">Copy</string>
-    <string name="Delete">Delete</string>
-    <string name="DeleteAndStop">Delete and stop</string>
-    <string name="Forward">Forward</string>
-    <string name="Retry">Retry</string>
-    <string name="FromCamera">From camera</string>
-    <string name="FromGalley">From gallery</string>
-    <string name="DeletePhoto">Delete photo</string>
-    <string name="Set">Set</string>
-    <string name="OK">OK</string>
-    <string name="Crop">CROP</string>
-    <!--messages-->
-    <string name="ActionInviteYou">You joined the group via invite link</string>
-    <string name="ActionInviteUser">un1 joined the group via invite link</string>
-    <string name="ActionKickUser">un1 removed un2</string>
-    <string name="ActionLeftUser">un1 left the group</string>
-    <string name="ActionAddUser">un1 added un2</string>
-    <string name="ActionRemovedPhoto">un1 removed the group photo</string>
-    <string name="ActionChangedPhoto">un1 changed the group photo</string>
-    <string name="ActionChangedTitle">un1 changed the group name to un2</string>
-    <string name="ActionCreateGroup">un1 created the group</string>
-    <string name="ActionYouKickUser">You removed un2</string>
-    <string name="ActionYouLeftUser">You left the group</string>
-    <string name="ActionYouAddUser">You added un2</string>
-    <string name="ActionYouRemovedPhoto">You removed the group photo</string>
-    <string name="ActionYouChangedPhoto">You changed the group photo</string>
-    <string name="ActionYouChangedTitle">You changed the group name to un2</string>
-    <string name="ActionYouCreateGroup">You created the group</string>
-    <string name="ActionKickUserYou">un1 removed you</string>
-    <string name="ActionAddUserYou">un1 added you</string>
-    <string name="ActionAddUserSelf">un1 returned to the group</string>
-    <string name="ActionAddUserSelfYou">You returned to the group</string>
-    <string name="UnsupportedMedia">This message is not supported on your version of Telegram. Update the app to view: https://telegram.org/update</string>
-    <string name="AttachPhoto">Photo</string>
-    <string name="AttachVideo">Video</string>
-    <string name="AttachGif">GIF</string>
-    <string name="AttachLocation">Location</string>
-    <string name="AttachContact">Contact</string>
-    <string name="AttachDocument">File</string>
-    <string name="AttachSticker">Sticker</string>
-    <string name="AttachAudio">Voice message</string>
-    <string name="FromYou">You</string>
-    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
-    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
-    <!--Alert messages-->
-    <string name="InvalidPhoneNumber">Invalid phone number</string>
-    <string name="CodeExpired">Code expired, please login again</string>
-    <string name="FloodWait">Too many attempts, please try again later</string>
-    <string name="FloodWaitTime">Too many attempts, please try again in %1$s</string>
-    <string name="InvalidCode">Invalid code</string>
-    <string name="InvalidFirstName">Invalid first name</string>
-    <string name="InvalidLastName">Invalid last name</string>
-    <string name="Loading">Loading...</string>
-    <string name="NoPlayerInstalled">You don\'t have a video player, please install one to continue</string>
-    <string name="NoMailInstalled">Please send an email to sms@stel.com and tell us about your problem.</string>
-    <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
-    <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
-    <string name="AreYouSure">Are you sure?</string>
-    <string name="AddToTheGroupTitle">Add %1$s to the chat %2$s?</string>
-    <string name="AddToTheGroupForwardCount">Number of last messages to forward:</string>
-    <string name="AddToTheGroup">Add %1$s to the group?</string>
-    <string name="UserAlreadyInGroup">This user is already in this group</string>
-    <string name="ForwardMessagesTo">Forward messages to %1$s?</string>
-    <string name="SendMessagesTo">Send messages to %1$s?</string>
-    <string name="SendContactTo">Send contact to %1$s?</string>
-    <string name="AreYouSureLogout">Are you sure you want to log out?\n\nNote that you can seamlessly use Telegram on all your devices at once.\n\nRemember, logging out kills all your Secret Chats.</string>
-    <string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
-    <string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave the group?</string>
-    <string name="AreYouSureDeleteThisChat">Are you sure you want to delete this chat?</string>
-    <string name="AreYouSureShareMyContactInfo">Are you sure you want to share your contact info?</string>
-    <string name="AreYouSureBlockContact">Are you sure you want to block this contact?</string>
-    <string name="AreYouSureUnblockContact">Are you sure you want to unblock this contact?</string>
-    <string name="AreYouSureDeleteContact">Are you sure you want to delete this contact?</string>
-    <string name="AreYouSureSecretChat">Are you sure you want to start a secret chat?</string>
-    <string name="AreYouSureRegistration">Are you sure you want to cancel registration?</string>
-    <string name="AreYouSureClearHistory">Are you sure you want to clear history?</string>
-    <string name="AreYouSureClearHistoryChannel">Delete all cached text and media from this channel?</string>
-    <string name="AreYouSureClearHistorySuper">Delete all cached text and media from this supergroup?</string>
-    <string name="AreYouSureDeleteMessages">Are you sure you want to delete %1$s?</string>
-    <string name="SendMessagesToGroup">Send messages to %1$s?</string>
-    <string name="SendContactToGroup">Send contact to %1$s?</string>
-    <string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
-    <string name="NoUsernameFound">There is no Telegram account with this username.</string>
-    <string name="BotCantJoinGroups">This bot can\'t join groups.</string>
-    <string name="SecretLinkPreviewAlert">Would you like to enable extended link previews in Secret Chats? Note that link previews are generated on Telegram servers.</string>
-    <string name="SecretChatContextBotAlert">Please note that inline bots are provided by third-party developers. For the bot to work, the symbols you type after the bot\'s username are sent to the respective developer.</string>
-    <string name="RaiseToSpeakAlert">Would you like to enable "Raise to speak" for voice messages?</string>
-    <string name="EditMessageError">Sorry, you can\'t edit this message.</string>
-    <!--permissions-->
-    <string name="PermissionContacts">Telegram needs access to your contacts so that you can connect with your friends across all your devices.</string>
-    <string name="PermissionStorage">Telegram needs access to your storage so that you can send and save photos, videos, music and other media.</string>
-    <string name="PermissionNoAudio">Telegram needs access to your microphone so that you can send voice messages.</string>
-    <string name="PermissionNoLocation">Telegram needs access to your location so that you can share it with your friends.</string>
-    <string name="PermissionOpenSettings">SETTINGS</string>
-    <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Fast</string>
-    <string name="Page3Title">Free</string>
-    <string name="Page4Title">Secure</string>
-    <string name="Page5Title">Powerful</string>
-    <string name="Page6Title">Cloud-Based</string>
-    <string name="Page7Title">Private</string>
-    <string name="Page1Message">The world\'s <![CDATA[<b>fastest</b>]]> messaging app.<![CDATA[<br/>]]>It is <![CDATA[<b>free</b>]]> and <![CDATA[<b>secure</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> delivers messages faster than<![CDATA[<br/>]]>any other application.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is free forever. No ads.<![CDATA[<br/>]]>No subscription fees.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> keeps your messages safe<![CDATA[<br/>]]>from hacker attacks.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> has no limits on the size of<![CDATA[<br/>]]>your media and chats.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lets you access your messages<![CDATA[<br/>]]>from multiple devices.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> messages are heavily encrypted<![CDATA[<br/>]]>and can self-destruct.</string>
-    <string name="StartMessaging">Start Messaging</string>
-    <!--plural-->
-    <string name="Online_zero">%1$d online</string>
-    <string name="Online_one">%1$d online</string>
-    <string name="Online_two">%1$d online</string>
-    <string name="Online_few">%1$d online</string>
-    <string name="Online_many">%1$d online</string>
-    <string name="Online_other">%1$d online</string>
-    <string name="Members_zero">%1$d members</string>
-    <string name="Members_one">%1$d member</string>
-    <string name="Members_two">%1$d members</string>
-    <string name="Members_few">%1$d members</string>
-    <string name="Members_many">%1$d members</string>
-    <string name="Members_other">%1$d members</string>
-    <string name="AndMoreTyping_zero">and %1$d more people are typing</string>
-    <string name="AndMoreTyping_one">and %1$d more person are typing</string>
-    <string name="AndMoreTyping_two">and %1$d more people are typing</string>
-    <string name="AndMoreTyping_few">and %1$d more people are typing</string>
-    <string name="AndMoreTyping_many">and %1$d more people are typing</string>
-    <string name="AndMoreTyping_other">and %1$d more people are typing</string>
-    <string name="NewMessages_zero">no new messages</string>
-    <string name="NewMessages_one">%1$d new message</string>
-    <string name="NewMessages_two">%1$d new messages</string>
-    <string name="NewMessages_few">%1$d new messages</string>
-    <string name="NewMessages_many">%1$d new messages</string>
-    <string name="NewMessages_other">%1$d new messages</string>
-    <string name="messages_zero">no messages</string>
-    <string name="messages_one">%1$d message</string>
-    <string name="messages_two">%1$d messages</string>
-    <string name="messages_few">%1$d messages</string>
-    <string name="messages_many">%1$d messages</string>
-    <string name="messages_other">%1$d messages</string>
-    <string name="comments_zero">%1$d comments</string>
-    <string name="comments_one">%1$d comment</string>
-    <string name="comments_two">%1$d comments</string>
-    <string name="comments_few">%1$d comments</string>
-    <string name="comments_many">%1$d comments</string>
-    <string name="comments_other">%1$d comments</string>
-    <string name="items_zero">no items</string>
-    <string name="items_one">%1$d item</string>
-    <string name="items_two">%1$d items</string>
-    <string name="items_few">%1$d items</string>
-    <string name="items_many">%1$d items</string>
-    <string name="items_other">%1$d items</string>
-    <string name="FromChats_zero">from no chats</string>
-    <string name="FromChats_one">from %1$d chat</string>
-    <string name="FromChats_two">from %1$d chats</string>
-    <string name="FromChats_few">from %1$d chats</string>
-    <string name="FromChats_many">from %1$d chats</string>
-    <string name="FromChats_other">from %1$d chats</string>
-    <string name="Seconds_zero">%1$d seconds</string>
-    <string name="Seconds_one">%1$d second</string>
-    <string name="Seconds_two">%1$d seconds</string>
-    <string name="Seconds_few">%1$d seconds</string>
-    <string name="Seconds_many">%1$d seconds</string>
-    <string name="Seconds_other">%1$d seconds</string>
-    <string name="Minutes_zero">%1$d minutes</string>
-    <string name="Minutes_one">%1$d minute</string>
-    <string name="Minutes_two">%1$d minutes</string>
-    <string name="Minutes_few">%1$d minutes</string>
-    <string name="Minutes_many">%1$d minutes</string>
-    <string name="Minutes_other">%1$d minutes</string>
-    <string name="Hours_zero">%1$d hours</string>
-    <string name="Hours_one">%1$d hour</string>
-    <string name="Hours_two">%1$d hours</string>
-    <string name="Hours_few">%1$d hours</string>
-    <string name="Hours_many">%1$d hours</string>
-    <string name="Hours_other">%1$d hours</string>
-    <string name="Days_zero">%1$d days</string>
-    <string name="Days_one">%1$d day</string>
-    <string name="Days_two">%1$d days</string>
-    <string name="Days_few">%1$d days</string>
-    <string name="Days_many">%1$d days</string>
-    <string name="Days_other">%1$d days</string>
-    <string name="Weeks_zero">%1$d weeks</string>
-    <string name="Weeks_one">%1$d week</string>
-    <string name="Weeks_two">%1$d weeks</string>
-    <string name="Weeks_few">%1$d weeks</string>
-    <string name="Weeks_many">%1$d weeks</string>
-    <string name="Weeks_other">%1$d weeks</string>
-    <string name="Months_zero">%1$d months</string>
-    <string name="Months_one">%1$d month</string>
-    <string name="Months_two">%1$d months</string>
-    <string name="Months_few">%1$d months</string>
-    <string name="Months_many">%1$d months</string>
-    <string name="Months_other">%1$d months</string>
-    <string name="Years_zero">%1$d years</string>
-    <string name="Years_one">%1$d year</string>
-    <string name="Years_two">%1$d years</string>
-    <string name="Years_few">%1$d years</string>
-    <string name="Years_many">%1$d years</string>
-    <string name="Years_other">%1$d years</string>
-    <string name="Users_zero">%1$d users</string>
-    <string name="Users_one">%1$d user</string>
-    <string name="Users_two">%1$d users</string>
-    <string name="Users_few">%1$d users</string>
-    <string name="Users_many">%1$d users</string>
-    <string name="Users_other">%1$d users</string>
-    <string name="Times_zero">%1$d times</string>
-    <string name="Times_one">%1$d time</string>
-    <string name="Times_two">%1$d times</string>
-    <string name="Times_few">%1$d times</string>
-    <string name="Times_many">%1$d times</string>
-    <string name="Times_other">%1$d times</string>
-    <string name="Meters_zero">%1$d meters</string>
-    <string name="Meters_one">%1$d meter</string>
-    <string name="Meters_two">%1$d meters</string>
-    <string name="Meters_few">%1$d meters</string>
-    <string name="Meters_many">%1$d meters</string>
-    <string name="Meters_other">%1$d meters</string>
-    <string name="Stickers_zero">%1$d stickers</string>
-    <string name="Stickers_one">%1$d sticker</string>
-    <string name="Stickers_two">%1$d stickers</string>
-    <string name="Stickers_few">%1$d stickers</string>
-    <string name="Stickers_many">%1$d stickers</string>
-    <string name="Stickers_other">%1$d stickers</string>
-    <string name="Photos_zero">%1$d photos</string>
-    <string name="Photos_one">%1$d photo</string>
-    <string name="Photos_two">%1$d photos</string>
-    <string name="Photos_few">%1$d photos</string>
-    <string name="Photos_many">%1$d photos</string>
-    <string name="Photos_other">%1$d photos</string>
-    <string name="LastSeenMinutes_zero">last seen %1$d minutes ago</string>
-    <string name="LastSeenMinutes_one">last seen %1$d minute ago</string>
-    <string name="LastSeenMinutes_two">last seen %1$d minutes ago</string>
-    <string name="LastSeenMinutes_few">last seen %1$d minutes ago</string>
-    <string name="LastSeenMinutes_many">last seen %1$d minutes ago</string>
-    <string name="LastSeenMinutes_other">last seen %1$d minutes ago</string>
-    <string name="LastSeenHours_zero">last seen %1$d hours ago</string>
-    <string name="LastSeenHours_one">last seen %1$d hour ago</string>
-    <string name="LastSeenHours_two">last seen %1$d hours ago</string>
-    <string name="LastSeenHours_few">last seen %1$d hours ago</string>
-    <string name="LastSeenHours_many">last seen %1$d hours ago</string>
-    <string name="LastSeenHours_other">last seen %1$d hours ago</string>
-    <!--forwarded messages-->
-    <string name="ForwardedMessage_zero">%1$d forwarded messages</string>
-    <string name="ForwardedMessage_one">Forwarded message</string>
-    <string name="ForwardedMessage_two">%1$d forwarded messages</string>
-    <string name="ForwardedMessage_few">%1$d forwarded messages</string>
-    <string name="ForwardedMessage_many">%1$d forwarded messages</string>
-    <string name="ForwardedMessage_other">%1$d forwarded messages</string>
-    <string name="ForwardedFile_zero">%1$d forwarded files</string>
-    <string name="ForwardedFile_one">Forwarded file</string>
-    <string name="ForwardedFile_two">%1$d forwarded files</string>
-    <string name="ForwardedFile_few">%1$d forwarded files</string>
-    <string name="ForwardedFile_many">%1$d forwarded files</string>
-    <string name="ForwardedFile_other">%1$d forwarded files</string>
-    <string name="ForwardedPhoto_zero">%1$d forwarded photos</string>
-    <string name="ForwardedPhoto_one">Forwarded photo</string>
-    <string name="ForwardedPhoto_two">%1$d forwarded photos</string>
-    <string name="ForwardedPhoto_few">%1$d forwarded photos</string>
-    <string name="ForwardedPhoto_many">%1$d forwarded photos</string>
-    <string name="ForwardedPhoto_other">%1$d forwarded photos</string>
-    <string name="ForwardedVideo_zero">%1$d forwarded videos</string>
-    <string name="ForwardedVideo_one">Forwarded video</string>
-    <string name="ForwardedVideo_two">%1$d forwarded videos</string>
-    <string name="ForwardedVideo_few">%1$d forwarded videos</string>
-    <string name="ForwardedVideo_many">%1$d forwarded videos</string>
-    <string name="ForwardedVideo_other">%1$d forwarded videos</string>
-    <string name="ForwardedMusic_zero">%1$d forwarded tracks</string>
-    <string name="ForwardedMusic_one">Forwarded track</string>
-    <string name="ForwardedMusic_two">%1$d forwarded tracks</string>
-    <string name="ForwardedMusic_few">%1$d forwarded tracks</string>
-    <string name="ForwardedMusic_many">%1$d forwarded tracks</string>
-    <string name="ForwardedMusic_other">%1$d forwarded tracks</string>
-    <string name="ForwardedAudio_zero">%1$d forwarded voice messages</string>
-    <string name="ForwardedAudio_one">Forwarded voice message</string>
-    <string name="ForwardedAudio_two">%1$d forwarded voice messages</string>
-    <string name="ForwardedAudio_few">%1$d forwarded voice messages</string>
-    <string name="ForwardedAudio_many">%1$d forwarded voice messages</string>
-    <string name="ForwardedAudio_other">%1$d forwarded voice messages</string>
-    <string name="ForwardedLocation_zero">%1$d forwarded locations</string>
-    <string name="ForwardedLocation_one">Forwarded location</string>
-    <string name="ForwardedLocation_two">%1$d forwarded locations</string>
-    <string name="ForwardedLocation_few">%1$d forwarded locations</string>
-    <string name="ForwardedLocation_many">%1$d forwarded locations</string>
-    <string name="ForwardedLocation_other">%1$d forwarded locations</string>
-    <string name="ForwardedContact_zero">%1$d forwarded contacts</string>
-    <string name="ForwardedContact_one">Forwarded contact</string>
-    <string name="ForwardedContact_two">%1$d forwarded contacts</string>
-    <string name="ForwardedContact_few">%1$d forwarded contacts</string>
-    <string name="ForwardedContact_many">%1$d forwarded contacts</string>
-    <string name="ForwardedContact_other">%1$d forwarded contacts</string>
-    <string name="ForwardedSticker_zero">%1$d forwarded stickers</string>
-    <string name="ForwardedSticker_one">Forwarded sticker</string>
-    <string name="ForwardedSticker_two">%1$d forwarded stickers</string>
-    <string name="ForwardedSticker_few">%1$d forwarded stickers</string>
-    <string name="ForwardedSticker_many">%1$d forwarded stickers</string>
-    <string name="ForwardedSticker_other">%1$d forwarded stickers</string>
-    <string name="AndOther_zero">and %1$d others</string>
-    <string name="AndOther_one">and %1$d other</string>
-    <string name="AndOther_two">and %1$d others</string>
-    <string name="AndOther_few">and %1$d others</string>
-    <string name="AndOther_many">and %1$d others</string>
-    <string name="AndOther_other">and %1$d others</string>
-    <!--date formatters-->
-    <string name="formatterMonthYear">MMMM yyyy</string>
-    <string name="formatterMonth">MMM dd</string>
-    <string name="formatterYear">dd.MM.yy</string>
-    <string name="formatterYearMax">dd.MM.yyyy</string>
-    <string name="chatDate">MMMM d</string>
-    <string name="chatFullDate">MMMM d, yyyy</string>
-    <string name="formatterWeek">EEE</string>
-    <string name="formatterDay24H">HH:mm</string>
-    <string name="formatterDay12H">h:mm a</string>
-    <string name="formatDateAtTime">%1$s at %2$s</string>
-</resources>
\ No newline at end of file
+  <string name="AppName">Asturgram</string>
+  <string name="AppNameBeta">Asturgram beta</string>
+  <string name="LanguageName">Asturianu</string>
+  <string name="LanguageNameInEnglish">Asturian</string>
+  <string name="LanguageCode">ast</string>
+  <!--signin view-->
+  <string name="YourPhone">El to teléfonu</string>
+  <string name="StartText">Por favor, confirma\'l to códigu de país y pon el to númberu.</string>
+  <string name="ChooseCountry">Escueyi un país</string>
+  <string name="WrongCountry">Códigu de país incorreutu</string>
+  <!--code enter view-->
+  <string name="YourCode">Verificación tlfnica</string>
+  <string name="SentSmsCode">Unviémoste un SMS con un códigu d\'activación al to teléfonu <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.</string>
+  <string name="SentAppCode">Unviémoste\'l códigu a l\'aplicación <![CDATA[<b>]]>Telegram/Asturgram<![CDATA[</b>]]> n\'otru preséu de to.</string>
+  <string name="SentCallCode">Tamos faciendo una llamada d\'activación al to teléfonu <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.\n\nNun la cueyas, Asturgram procesarálo too automáticamente.</string>
+  <string name="SentCallOnly">Tamos llamándote al teléfonu <![CDATA[<b>]]>%1$s<![CDATA[</b>]]> pa dictar un códigu.</string>
+  <string name="CallText">Vamos llamate en %1$d:%2$02d</string>
+  <string name="SmsText">Unviarémoste un SMS en %1$d:%2$02d</string>
+  <string name="Calling">Llamándote...</string>
+  <string name="Code">Códigu</string>
+  <string name="WrongNumber">¿Númberu incorreutu?</string>
+  <string name="DidNotGetTheCode">¿Nun consiguisti\'l códigu?</string>
+  <!--signup view-->
+  <string name="YourName">El to nome</string>
+  <string name="RegisterText">Escribi\'l to nome y apellíos</string>
+  <!--<string name="RegisterText">Set up your name and picture</string>-->
+  <string name="FirstName">Nome (riquíu)</string>
+  <string name="LastName">Apellíos (opcional)</string>
+  <string name="CancelRegistration">Encaboxar rexistru</string>
+  <!--chats view-->
+  <string name="Settings">Axustes</string>
+  <string name="Contacts">Contautos</string>
+  <string name="NewGroup">Grupu nuevu</string>
+  <string name="Yesterday">ayeri</string>
+  <string name="NoResult">Ensin resultaos</string>
+  <string name="NoChats">Entá nun hai conversaciones...</string>
+  <string name="NoChatsHelp">Entama a charrar primiendo\'l\nbotón Componer na esquina superior drecha\no calca nel botón de Menú pa más opciones.</string>
+  <string name="WaitingForNetwork">Esperando pola rede...</string>
+  <string name="Connecting">Coneutando...</string>
+  <string name="Updating">Anovando...</string>
+  <string name="NewSecretChat">Charra secreta nueva</string>
+  <string name="AwaitingEncryption">Esperando que %s tea en llinia...</string>
+  <string name="EncryptionRejected">Charra secreta desaniciada</string>
+  <string name="EncryptionProcessing">Intercambiando claves de cifráu...</string>
+  <string name="EncryptedChatStartedOutgoing">%s xunióse a la to charra secreta.</string>
+  <string name="EncryptedChatStartedIncoming">Xunístite a la charra secreta.</string>
+  <string name="ClearHistory">Llimpiar historia</string>
+  <string name="ClearHistoryCache">Desaniciar de la caché</string>
+  <string name="DeleteChat">Desaniciar y colar</string>
+  <string name="DeleteChatUser">Desaniciar charra</string>
+  <string name="HiddenName">Desaniciar cuenta</string>
+  <string name="SelectChat">Escoyer charra</string>
+  <string name="PhotoTip">Ten calcáu pa velo</string>
+  <string name="CompatibilityChat">%1$s ta usando una versión vieya d\'Asturgram/Telegram, asina que les semeyes secretes amosaránse nel mou compatibilidá.\n\nCuando %2$s anueve Asturgram/Telegram, les semeyes con temporizador a 1 minutu o menos entamarán a furrular nel mou «Ten calcáu pa velo», y avisarásete cuando la otra parte faiga una captura de pantalla</string>
+  <string name="SearchMessages">MENSAXES</string>
+  <string name="Search">Guetar</string>
+  <string name="MuteNotifications">Silenciar avisos</string>
+  <string name="MuteFor">Silenciar por %1$s</string>
+  <string name="UnmuteNotifications">Nun silenciar</string>
+  <string name="WillUnmuteIn">En %1$s</string>
+  <string name="MuteDisable">Deshabilitar</string>
+  <string name="Hashtags">ETIQUETES</string>
+  <string name="Recent">RECIÉN</string>
+  <string name="LinkPreview">Previsualización d\'enllaces</string>
+  <!--channels-->
+  <string name="GroupType">Triba del grupu</string>
+  <string name="ChannelType">Triba de canal</string>
+  <string name="ChannelTypePublic">Pública</string>
+  <string name="ChannelTypePrivate">Privada</string>
+  <string name="SetAsAdmin">Facer alministrador</string>
+  <string name="DescriptionInfoMega">Pues apurrir una descripción opcional pal to grupu.</string>
+  <string name="LeaveMega">Dexar grupu</string>
+  <string name="DeleteMega">Desaniciar grupu</string>
+  <string name="LeaveMegaMenu">Dexar grupu</string>
+  <string name="DeleteMegaMenu">Desaniciar grupu</string>
+  <string name="MegaDeleteInfo">Perderás tolos mensaxes nesti grupu.</string>
+  <string name="MegaAdminsInfo">Pues amestar alministradores p\'ayudate a xestionar el to grupu. Caltén primío pa desanicialos.</string>
+  <string name="MegaDeleteAlert">¡Espera! Desaniciar esti grupu fadrá desaniciar tolos miembros y perder tolos mensaxes. ¿Desaniciar la canal de toes toes?</string>
+  <string name="ActionCreateMega">Creóse\'l grupu</string>
+  <string name="MegaAddedBy">un1 amestóte a esti grupu</string>
+  <string name="MegaLeaveAlert">¿De xuru que quies dexar el grupu?</string>
+  <string name="GroupUserCantAdd">Perdón, nun pues amestar a esti usuariu a los grupos.</string>
+  <string name="GroupUserAddLimit">Perdón, el grupu ta enllén.</string>
+  <string name="GroupUserLeftError">Perdón, esti usuariu decidió dexar esti grupu, asina que nun pues convidalu de nueves.</string>
+  <string name="GroupUserCantAdmin">Perdón, milenta alministradores nesti grupu.</string>
+  <string name="GroupUserCantBot">Perdón, milenta bots nesti grupu.</string>
+  <string name="ActionPinnedText">un1 fixó «%1$s»</string>
+  <string name="ActionPinnedNoText">un1 fixó un mensaxe</string>
+  <string name="ActionPinnedPhoto">un1 fixó una semeya</string>
+  <string name="ActionPinnedVideo">un1 fixó un videu</string>
+  <string name="ActionPinnedFile">un1 fixó un ficheru</string>
+  <string name="ActionPinnedSticker">un1 fixó una pegadiella</string>
+  <string name="ActionPinnedVoice">un1 fixó un mensaxe de voz</string>
+  <string name="ActionPinnedContact">un1 fixó un contautu</string>
+  <string name="ActionPinnedGeo">un1 fixó un mapa</string>
+  <string name="ActionPinnedGif">un1 fixó un GIF</string>
+  <string name="ActionPinnedMusic">un1 fixó una pista</string>
+  <string name="ActionMigrateFromGroup">Esti grupu anovóse a un supergrupu</string>
+  <string name="ActionMigrateFromGroupNotify">%1$s anovóse a un supergrupu</string>
+  <string name="NoBlockedGroup">Los usuarios bloquiaos tán desaniciaos del grupu y namái puen volver si los convida un alministrador. Los enllaces d\'invitación nun-yos furrularán.</string>
+  <string name="NewChannel">Canal nueva</string>
+  <string name="EnterChannelName">Nome de canal</string>
+  <string name="Comments">Comentarios</string>
+  <string name="CommentsInfo">Si habilites los comentarios, la xente podrá aldericar los tos artículos na canal.</string>
+  <string name="AddMutual">Amiesta contautos a la to canal</string>
+  <string name="ChannelUsernameHelp">La xente pue compartir esti enllaz con otros y alcontrar la to canal usando la gueta d\'Asturgram/Telegram.</string>
+  <string name="MegaUsernameHelp">La xente pue compartir esti enllaz con otros y alcontrar el to grupu usando la gueta de Telegram.</string>
+  <string name="ChannelUsernamePlaceholder">enllaz</string>
+  <string name="ChannelPrivateLinkHelp">La xente pue xunise a la to canal siguiendo esti enllaz. Pues revocar l\'enllaz en cualesquier momentu.</string>
+  <string name="MegaPrivateLinkHelp">La xente pue xunise al to grupu siguiendo esti enllaz. Pues revocar l\'enllaz en cualesquier momentu.</string>
+  <string name="DescriptionOptionalPlaceholder">Descripción (opcional)</string>
+  <string name="DescriptionPlaceholder">Descripción</string>
+  <string name="DescriptionInfo">Pues apurrir una descripción opcional pa la to canal.</string>
+  <string name="ChannelPublic">Canal pública</string>
+  <string name="MegaPublic">Grupu públicu</string>
+  <string name="ChannelPublicInfo">Les canales públiques puen alcontrase na gueta, culesquiera pue xunise a elles.</string>
+  <string name="MegaPublicInfo">Los grupos públicos puen alcontrase na gueta, tola historia de charra ta disponible y cualesquiera pue xunise.</string>
+  <string name="ChannelPrivate">Canal privada</string>
+  <string name="MegaPrivate">Grupu priváu</string>
+  <string name="ChannelPrivateInfo">La xente namái podrá xunise a les canales privaes pente un enllaz d\'invitación.</string>
+  <string name="MegaPrivateInfo">La xente namái pue xunise a los grupos privaos si se-yos convida o tienen un enllaz d\'invitación.</string>
+  <string name="ChannelLinkTitle">Enllaz</string>
+  <string name="ChannelInviteLinkTitle">Enllaz d\'invitación</string>
+  <string name="ChannelAddMembers">Amestar miembros</string>
+  <string name="LeaveChannel">Dexar canal</string>
+  <string name="LeaveChannelMenu">Dexar canal</string>
+  <string name="ChannelSettings">Axustes</string>
+  <string name="ChannelJoin">XUNISE</string>
+  <string name="OpenChannelProfile">Información de canal</string>
+  <string name="ChannelBroadcast">Tresmitir</string>
+  <string name="ChannelSilentBroadcast">Tresmisión silenciosa</string>
+  <string name="ChannelComment">Comentariu</string>
+  <string name="ShowDiscussion">amosar comentarios</string>
+  <string name="ChannelAlertTitle">¿Qué ye una Canal?</string>
+  <string name="ChannelAlertText">Les canales son una ferramienta nueva pa tresmitir los tos mensaxes a audiencies grandes.</string>
+  <string name="ChannelAlertCreate">CREAR CANAL</string>
+  <string name="LinkInUse">Perdón, esti nome yá ta coyíu.</string>
+  <string name="LinkInvalid">Perdón, esti nome nun ye válidu.</string>
+  <string name="LinkInvalidShort">Los nomes de canales tienen de tener polo menos 5 caráuteres.</string>
+  <string name="LinkInvalidLong">El nome nun pue perpasar de 32 caráuteres.</string>
+  <string name="LinkInvalidStartNumber">Los nomes de canales nun puen entamar con un númberu.</string>
+  <string name="LinkInvalidShortMega">Los nomes de grupos tienen de tener polo menos 5 caráuteres.</string>
+  <string name="LinkInvalidStartNumberMega">Los nomes de grupu nun puen entamar con un númberu.</string>
+  <string name="LinkChecking">Comprobando\'l nome...</string>
+  <string name="LinkAvailable">%1$s ta disponible.</string>
+  <string name="ChannelMembers">Miembros</string>
+  <string name="ChannelBlockedUsers">Usuarios bloquiaos</string>
+  <string name="ChannelAdministrators">Alministradores</string>
+  <string name="ChannelDelete">Desaniciar canal</string>
+  <string name="ChannelDeleteMenu">Desaniciar canal</string>
+  <string name="ChannelDeleteAlert">¡Espera! Desaniciar esta canal fadrá desaniciar tolos miembros y perder tolos mensaxes. ¿Desaniciar la canal de toes toes?</string>
+  <string name="ChannelLeaveAlert">¿De xuru que quies dexar la canal?</string>
+  <string name="ChannelDeleteInfo">Perderás tolos mensaxes nesta canal.</string>
+  <string name="ChannelEdit">Editar</string>
+  <string name="MegaWasPrivateAlert">Por favor, decátate que si escueyes un enllaz públicu pal to grupu naide sedrá a alcontralu na gueta y xunise.\n\nNun crees esti enllaz si quies caltener priváu\'l to grupu.</string>
+  <string name="ChannelWasPrivateAlert">Por favor, decátate que si escueyes un enllaz públicu pa la to canal naide podrá alcontralu na gueta y xunise.\n\nNun crees esti enllaz si quies caltener privada la to canal.</string>
+  <string name="ChannelPublicEmptyUsername">Por favor, escueyi un enllaz a la to canal pública pa qu\'asina la xente puea alcontralu na gueta y compartilu con otros.\n\nSi nun tas interesáu suxerímoste crear, d\'otru mou, una canal privada.</string>
+  <string name="ActionCreateChannel">Creóse la canal</string>
+  <string name="ActionChannelChangedPhoto">Camudóse la semeya de la canal</string>
+  <string name="ActionChannelRemovedPhoto">Desanicióse la semeya de la canal</string>
+  <string name="ActionChannelChangedTitle">Camudóse\'l nome de la canal a un2</string>
+  <string name="ChannelPublicLimitReached">Perdón, creasti permunches canales públiques. Tamién pues crear una canal privada o desaniciar primero una de les esistentes.</string>
+  <string name="ChangePublicLimitReached">Perdón, creasti milenta enllaces públicos. Intenta desaniciar o facer priváu ún de los tos grupos o canales.</string>
+  <string name="ChannelModerator">Llendador</string>
+  <string name="ChannelCreator">Creador</string>
+  <string name="ChannelEditor">Alministrador</string>
+  <string name="ChannelMute">SILENCIAR</string>
+  <string name="ChannelUnmute">DESILENCIAR</string>
+  <string name="ChannelAddAdmin">Amestar alministrador</string>
+  <string name="ChannelInviteViaLink">Convidar pente enllaz</string>
+  <string name="ChannelAddUserAdminAlert">¿De xuru que quies facer a %1$s un alministrador?</string>
+  <string name="ChannelRemoveUserAdmin">Desaniciar</string>
+  <string name="ChannelMembersInfo">Namái los alministradores de la canal puen ver esti llistáu.</string>
+  <string name="ChannelAdminNotParticipant">Esti usuariu entá nun se xunió a la canal. ¿Quies convidalu?</string>
+  <string name="ChannelLinkInfo">Cualesquiera que tenga Asturgram/Telegram instaláu podrá xunise a la to canal siguiendo esti enllaz.</string>
+  <string name="ChannelAdminsInfo">Pues amestar alministradores p\'ayudate a xestionar la to canal. Caltén primío pa desaniciar almistradores.</string>
+  <string name="ChannelJoinTo">¿Quies xunite a la canal «%1$s»?</string>
+  <string name="ChannelCantOpenPrivate">Perdón, esta charra yá nun ye accesible más.</string>
+  <string name="ChannelCantOpenBanned">Desafortunadamente torgósete de participar en grupos públicos.</string>
+  <string name="ChannelCantOpenNa">Perdón, esta charra yá nun ye accesible más.</string>
+  <string name="ChannelAddTo">¿Amestar a %1$s a la canal?</string>
+  <string name="ChannelUserLeftError">Perdón, esti usuariu decidió dexar esta canal, asina que nun pues convidalu de nueves.</string>
+  <string name="ChannelUserCantAdd">Perdón, nun pues amestar a esti usuariu a canales.</string>
+  <string name="ChannelUserCantAdmin">Perdón, hai milenta alminstradores nesta canal.</string>
+  <string name="ChannelUserCantBot">Perdón, milenta bots nesta canal.</string>
+  <string name="ChannelUserAddLimit">Perdón, namái pues amestar los primeros 200 miembros a una canal. Decátate que podríen xunise un númberu illimitáu de xente pente l\'enllaz a la canal.</string>
+  <string name="ChannelAddedBy">un1 amestóte a esta canal</string>
+  <string name="ChannelJoined">Xuniéstite a esta canal</string>
+  <string name="ChannelMegaJoined">Xuniéstite a esti grupu</string>
+  <string name="ChannelRemoveUser">Desaniciar de la canal</string>
+  <string name="ChannelCantSendMessage">Perdón, nun pues unviar mensaxes a esta canal.</string>
+  <string name="ChannelAddedByNotification">%1$s amestóte a la canal %2$s</string>
+  <string name="ChannelPhotoEditNotification">La canal %1$s xubió una semeya</string>
+  <string name="ChannelMessageGroupNoText">%1$s unvió un mensaxe a la canal %2$s</string>
+  <string name="ChannelMessageGroupPhoto">%1$s unvió una semeya a la canal %2$s</string>
+  <string name="ChannelMessageGroupVideo">%1$s unvió un videu a la canal %2$s</string>
+  <string name="ChannelMessageGroupContact">%1$s compartió un contautu na canal %2$s</string>
+  <string name="ChannelMessageGroupMap">%1$s unvió un allugamientu a la canal %2$s</string>
+  <string name="ChannelMessageGroupDocument">%1$s unvió un ficheru a la canal %2$s</string>
+  <string name="ChannelMessageGroupGif">%1$s unvió un GIF a la canal %2$s</string>
+  <string name="ChannelMessageGroupAudio">%1$s unvió un mensaxe de voz a la canal %2$s</string>
+  <string name="ChannelMessageGroupMusic">%1$s unvió una pista a la canal %2$s</string>
+  <string name="ChannelMessageGroupSticker">%1$s unvió una pegadiella a la canal %2$s</string>
+  <string name="ChannelMessageNoText">%1$s espublizó un mensaxe</string>
+  <string name="ChannelMessagePhoto">%1$s espublizó una semeya</string>
+  <string name="ChannelMessageVideo">%1$s espublizó un videu</string>
+  <string name="ChannelMessageContact">%1$s espublizó un contautu</string>
+  <string name="ChannelMessageMap">%1$s espublizó un allugamientu</string>
+  <string name="ChannelMessageDocument">%1$s espublizó un ficheru</string>
+  <string name="ChannelMessageGIF">%1$s espublizó un GIF</string>
+  <string name="ChannelMessageAudio">%1$s espublizó un mensaxe de voz</string>
+  <string name="ChannelMessageMusic">%1$s espublizó una pista</string>
+  <string name="ChannelMessageSticker">%1$s espublizó una pegadiella</string>
+  <string name="WhoCanAddMembers">¿Quién pue amestar miembros nuevos?</string>
+  <string name="WhoCanAddMembersAllMembers">Tolos miembros</string>
+  <string name="WhoCanAddMembersAdmins">Namái alministradores</string>
+  <string name="ChannelNotifyMembersInfoOn">Avisaráse a los miembros cuando espublices</string>
+  <string name="ChannelNotifyMembersInfoOff">Nun s\'avisará a los miembros cuando espublices</string>
+  <string name="ChannelSignMessages">Roblar mensaxes</string>
+  <string name="ChannelSignMessagesInfo">Amiesta los nomes de los alministradores a los mensaxes qu\'espublicen.</string>
+  <!--broadcasts-->
+  <string name="NewBroadcastList">Llista de difusión nueva</string>
+  <string name="EnterListName">Pon el nome de la llista</string>
+  <string name="YouCreatedBroadcastList">Creasti una llista de difusión</string>
+  <string name="AddRecipient">Amestar destinatariu</string>
+  <string name="KickFromBroadcast">Desaniciar de la llista de difusión</string>
+  <!--audio view-->
+  <string name="NoAudio">Por favor, amiesta ficheros a la biblioteca musical nel to preséu pa velos equí.</string>
+  <string name="AttachMusic">Música</string>
+  <string name="AudioUnknownArtist">Artista desconocíu</string>
+  <string name="AudioUnknownTitle">Títulu desconocíu</string>
+  <!--documents view-->
+  <string name="SelectFile">Escoyer ficheru</string>
+  <string name="FreeOfTotal">%1$s de %2$s llibres</string>
+  <string name="UnknownError">Fallu desconocíu</string>
+  <string name="AccessError">Fallu d\'accesu</string>
+  <string name="NoFiles">Entá nun hai ficheros...</string>
+  <string name="FileUploadLimit">El tamañu del ficheru nun tien de superar los %1$s</string>
+  <string name="NotMounted">Almacenamientu ensin montar</string>
+  <string name="UsbActive">Tresferencia USB activa</string>
+  <string name="InternalStorage">Almacenamientu internu</string>
+  <string name="ExternalStorage">Almacenamientu esternu</string>
+  <string name="SystemRoot">Raigañu del sistema</string>
+  <string name="SdCard">Tarxeta SD</string>
+  <string name="Folder">Carpeta</string>
+  <string name="GalleryInfo">Pa unviar imáxenes ensin compresión</string>
+  <!--chat view-->
+  <string name="Invisible">invisible</string>
+  <string name="Typing">teclexando...</string>
+  <string name="IsTyping">ta teclexando...</string>
+  <string name="AreTyping">tán teclexando...</string>
+  <string name="IsRecordingAudio">%1$s ta grabando\'l mensaxe de voz...</string>
+  <string name="IsSendingAudio">%1$s ta unviando audiu...</string>
+  <string name="IsSendingPhoto">%1$s ta unviando semeyes...</string>
+  <string name="IsSendingVideo">%1$s ta unviando\'l videu...</string>
+  <string name="IsSendingFile">%1$s ta unviando\'l ficheru...</string>
+  <string name="RecordingAudio">grabando\'l mensaxe de voz...</string>
+  <string name="SendingAudio">unviando audiu...</string>
+  <string name="SendingPhoto">unviando semeya...</string>
+  <string name="SendingVideoStatus">unviando videu...</string>
+  <string name="SendingFile">unviando ficheru...</string>
+  <string name="GotAQuestion">¿Tienes una entruga\ntocante a Asturgram?</string>
+  <string name="ChatTakePhoto">Facer semeya</string>
+  <string name="ChatGallery">Galería</string>
+  <string name="ChatLocation">Allugamientu</string>
+  <string name="ChatVideo">Videu</string>
+  <string name="ChatDocument">Ficheru</string>
+  <string name="ChatCamera">Cámara</string>
+  <string name="NoMessages">Entá nun hai mensaxes...</string>
+  <string name="ForwardedMessage">Mensaxe reunviáu</string>
+  <string name="From">De</string>
+  <string name="NoRecent">Nun hai recientes</string>
+  <string name="Message">Mensaxe</string>
+  <string name="TypeMessage">Mensaxe</string>
+  <string name="ShareMyContactInfo">Compartir el mio contautu</string>
+  <string name="AddToContacts">Amestar a contautos</string>
+  <string name="EncryptedPlaceholderTitleIncoming">%s convidóte a una charra secreta.</string>
+  <string name="EncryptedPlaceholderTitleOutgoing">Convidesti a %s a una charra secreta.</string>
+  <string name="EncryptedDescriptionTitle">Charres secretes:</string>
+  <string name="EncryptedDescription1">Usen cifráu de móvil-a-móvil</string>
+  <string name="EncryptedDescription2">Nun dexen rastru nos nuesos sirvidores</string>
+  <string name="EncryptedDescription3">Tienen autodestrucción de mensaxes</string>
+  <string name="EncryptedDescription4">Nun permiten reunvios de mensaxes</string>
+  <string name="YouWereKicked">Espulsáronte d\'esti grupu</string>
+  <string name="YouLeft">Colasti d\'esti grupu</string>
+  <string name="DeleteThisGroup">Desaniciar esti grupu</string>
+  <string name="DeleteThisChat">Desaniciar esta charra</string>
+  <string name="SlideToCancel">ESLIZA PA ENCABOXAR</string>
+  <string name="SaveToDownloads">Guardar en Descargues</string>
+  <string name="SaveToGIFs">Guardar en GIFs</string>
+  <string name="DeleteGif">¿Desaniciar GIF?</string>
+  <string name="SaveToMusic">Guardar a música</string>
+  <string name="ShareFile">Compartir</string>
+  <string name="ApplyLocalizationFile">Aplicar ficheru de traducción</string>
+  <string name="UnsupportedAttachment">Axuntu non sofitáu</string>
+  <string name="SetTimer">Programar autodestrucción</string>
+  <string name="ServiceNotifications">Avisos del serviciu</string>
+  <string name="GettingLinkInfo">Consiguiendo información del enllaz...</string>
+  <string name="OpenInBrowser">Abrir nel restolador</string>
+  <string name="CopyUrl">Copiar URL</string>
+  <string name="SendItems">Unviar %1$s</string>
+  <string name="OpenUrlAlert">¿Abrir l\'enllaz %1$s?</string>
+  <string name="ReportSpam">INFORMAR DE SPAM</string>
+  <string name="ReportSpamAndLeave">INFORMAR DE SPAM Y COLAR</string>
+  <string name="AddContactChat">AMESTAR CONTAUTU</string>
+  <string name="ReportSpamAlert">¿De xuru que quies informar de spam a esti usuariu?</string>
+  <string name="ReportSpamAlertGroup">¿De xuru que quies informar de spam a esti grupu?</string>
+  <string name="ReportSpamAlertChannel">¿De xuru que quies informar de spam a esta canal?</string>
+  <string name="NobodyLikesSpam1">Perdón, namái pues unviar mensaxes a contautos mutuos nesti momentu.</string>
+  <string name="NobodyLikesSpam2">Perdón, namái pues amestar contautos mutuos a los grupos nesti momentu.</string>
+  <string name="NobodyLikesSpamUrl">https://telegram.org/faq#can-39t-send-messages-to-non-contacts</string>
+  <string name="MoreInfo">Más información</string>
+  <string name="ShareSendTo">Unviar a...</string>
+  <string name="TapHereGifs">Calca equí p\'acceder a los GIFs guardaos</string>
+  <string name="PinMessage">Fixar</string>
+  <string name="PinNotify">Avisar a tolos miembros</string>
+  <string name="UnpinMessage">Desfixar</string>
+  <string name="PinMessageAlert">¿Quies fixar esti mensaxe nesti grupu?</string>
+  <string name="UnpinMessageAlert">¿Quies desfixar esti mensaxe?</string>
+  <string name="DeleteBanUser">Torgar usuariu</string>
+  <string name="DeleteReportSpam">Informar de spam</string>
+  <string name="DeleteAllFrom">Desaniciar too de %1$s</string>
+  <string name="ClearRecentEmoji">¿Llimpiar fustaxes recientes?</string>
+  <string name="ReportChat">Informar</string>
+  <string name="ReportChatSpam">Spam</string>
+  <string name="ReportChatViolence">Violencia</string>
+  <string name="ReportChatPornography">Pornografía</string>
+  <string name="ReportChatOther">Otro</string>
+  <string name="ReportChatDescription">Descripción</string>
+  <string name="PinnedMessage">Mensaxe fixáu</string>
+  <!--notification-->
+  <string name="MessageLifetimeChanged">%1$s afitó l\'autodestrucción en %2$s</string>
+  <string name="MessageLifetimeChangedOutgoing">Afitasti l\'autodestrucción en %1$s</string>
+  <string name="MessageLifetimeRemoved">%1$s deshabilitó l\'autodestrucción</string>
+  <string name="MessageLifetimeYouRemoved">Deshabilitasti l\'autodestrucción</string>
+  <string name="YouHaveNewMessage">Tienes un mensaxe nuevu</string>
+  <string name="NotificationMessageText">%1$s: %2$s</string>
+  <string name="NotificationMessageNoText">%1$s unvióte un mensaxe</string>
+  <string name="NotificationMessagePhoto">%1$s unvióte una semeya</string>
+  <string name="NotificationMessageVideo">%1$s unvióte un videu</string>
+  <string name="NotificationMessageContact">%1$s compartió un contautu contigo</string>
+  <string name="NotificationMessageMap">%1$s unvióte un mapa</string>
+  <string name="NotificationMessageDocument">%1$s unvióte un ficheru</string>
+  <string name="NotificationMessageGif">%1$s unvióte un GIF</string>
+  <string name="NotificationMessageAudio">%1$s unvióte un mensaxe de voz</string>
+  <string name="NotificationMessageMusic">%1$s unvióte una pista</string>
+  <string name="NotificationMessageSticker">%1$s unvióte un pegadiella</string>
+  <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
+  <string name="NotificationMessageGroupNoText">%1$s unvió un mensaxe al grupu %2$s</string>
+  <string name="NotificationMessageGroupPhoto">%1$s unvió una semeya al grupu %2$s</string>
+  <string name="NotificationMessageGroupVideo">%1$s unvió un videu al grupu %2$s</string>
+  <string name="NotificationMessageGroupContact">%1$s compartió un contautu nel grupu %2$s</string>
+  <string name="NotificationMessageGroupMap">%1$s unvió un mapa al grupu %2$s</string>
+  <string name="NotificationMessageGroupDocument">%1$s unvió un ficheru al grupu %2$s</string>
+  <string name="NotificationMessageGroupGif">%1$s unvió un GIF al grupu %2$s</string>
+  <string name="NotificationMessageGroupAudio">%1$s unvió un mensaxe de voz al grupu %2$s</string>
+  <string name="NotificationMessageGroupMusic">%1$s unvió una pista al grupu %2$s</string>
+  <string name="NotificationMessageGroupSticker">%1$s unvió una pegadiella al grupu %2$s</string>
+  <string name="NotificationInvitedToGroup">%1$s convidóte al grupu %2$s</string>
+  <string name="NotificationEditedGroupName">%1$s cambió\'l nome\'l grupu %2$s</string>
+  <string name="NotificationEditedGroupPhoto">%1$s cambió la semeya\'l grupu %2$s</string>
+  <string name="NotificationGroupAddMember">%1$s convidó a %3$s al grupu %2$s</string>
+  <string name="NotificationGroupAddSelf">%1$s tornó al grupu %2$s</string>
+  <string name="NotificationGroupAddSelfMega">%1$s xunióse al grupu %2$s</string>
+  <string name="NotificationGroupKickMember">%1$s espulsó a %3$s del grupu %2$s</string>
+  <string name="NotificationGroupKickYou">%1$s espulsóte del grupu %2$s</string>
+  <string name="NotificationGroupLeftMember">%1$s dexó\'l grupu %2$s</string>
+  <string name="NotificationContactJoined">¡%1$s xunióse a Asturgram/Telegram!</string>
+  <string name="NotificationUnrecognizedDevice">%1$s,\nDeteutamos un aniciu sesión a la to cuenta dende un preséu nuevu\'l %2$s\n\nPreséu: %3$s\nAllugamientu: %4$s\n\nSi nun fuesti tu, pues dir a Axustes - Privacidá y seguranza - Sesiones y finar esa sesión .\n\nSi cuides que daquién anició sesión na to cuenta ensin sabelo, pues habilitar la verificación en dos pasos en Privacidá y seguranza.\n\nAtentamente,\nL\'equipu Telegram</string>
+  <string name="NotificationContactNewPhoto">%1$s anovó la semeya de perfil</string>
+  <string name="NotificationInvitedToGroupByLink">%1$s xunióse al grupu %2$s pente l\'enllaz d\'invitación</string>
+  <string name="Reply">Responder</string>
+  <string name="ReplyToGroup">Responder a %1$s</string>
+  <string name="ReplyToUser">Responder a %1$s</string>
+  <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
+  <string name="NotificationActionPinnedText">%1$s fixó «%2$s» nel grupu %3$s</string>
+  <string name="NotificationActionPinnedNoText">%1$s fixó un mensaxe nel grupu %2$s</string>
+  <string name="NotificationActionPinnedPhoto">%1$s fixó una semeya nel grupu %2$s</string>
+  <string name="NotificationActionPinnedVideo">%1$s fixó un videu nel grupu %2$s</string>
+  <string name="NotificationActionPinnedFile">%1$s fixó un ficheru nel grupu %2$s</string>
+  <string name="NotificationActionPinnedSticker">%1$s fixó una pegadiella nel grupu %2$s</string>
+  <string name="NotificationActionPinnedVoice">%1$s fixó un mensaxe de voz nel grupu %2$s</string>
+  <string name="NotificationActionPinnedContact">%1$s fixó un contautu nel grupu %2$s</string>
+  <string name="NotificationActionPinnedGeo">%1$s fixó un mapa nel grupu %2$s</string>
+  <string name="NotificationActionPinnedGif">%1$s fixó un GIF nel grupu %2$s</string>
+  <string name="NotificationActionPinnedMusic">%1$s fixó una pista nel grupu %2$s</string>
+  <string name="NotificationActionPinnedTextChannel">%1$s fixó «%2$s»</string>
+  <string name="NotificationActionPinnedNoTextChannel">%1$s fixó un mensaxe</string>
+  <string name="NotificationActionPinnedPhotoChannel">%1$s fixó una semeya</string>
+  <string name="NotificationActionPinnedVideoChannel">%1$s fixó un videu</string>
+  <string name="NotificationActionPinnedFileChannel">%1$s fixó un ficheru</string>
+  <string name="NotificationActionPinnedStickerChannel">%1$s fixó una pegadiella</string>
+  <string name="NotificationActionPinnedVoiceChannel">%1$s fixó un mensaxe de voz</string>
+  <string name="NotificationActionPinnedContactChannel">%1$s fixó un contautu</string>
+  <string name="NotificationActionPinnedGeoChannel">%1$s fixó un mapa</string>
+  <string name="NotificationActionPinnedGifChannel">%1$s fixó un GIF</string>
+  <string name="NotificationActionPinnedMusicChannel">%1$s fixó una pista</string>
+  <!--contacts view-->
+  <string name="SelectContact">Escoyer contautu</string>
+  <string name="NoContacts">Entá nun hai contautos</string>
+  <string name="InviteText">Qué ye ho, cambiémonos a Asturgram: http://noticies.softastur.org/telegram</string>
+  <string name="TodayAt">a les</string>
+  <string name="YesterdayAt">ayeri a les</string>
+  <string name="Online">en llinia</string>
+  <string name="LastSeen">viose</string>
+  <string name="LastSeenDate">viose\'l</string>
+  <string name="LastSeenNow">viose xusto agora</string>
+  <string name="InviteFriends">Convidar a collacios</string>
+  <string name="GlobalSearch">GUETA GLOBAL</string>
+  <string name="Lately">viose apocayá</string>
+  <string name="WithinAWeek">viose hai díes</string>
+  <string name="WithinAMonth">viose hai selmanes</string>
+  <string name="ALongTimeAgo">viose cuantayá</string>
+  <string name="NewMessageTitle">Mensaxe nuevu</string>
+  <!--group create view-->
+  <string name="SendMessageTo">Unviar mensaxe a...</string>
+  <string name="SoftUserLimitAlert">Sedrás a amestar usuarios dempués que fines de crear el grupu y convertilu a un super-grupu.</string>
+  <string name="EnterGroupNamePlaceholder">Escribi\'l nome\'l grupu</string>
+  <string name="GroupName">Nome del grupu</string>
+  <string name="MembersCount">%1$d/%2$d miembros</string>
+  <string name="JoinToGroup">¿Quies xunite a la charra «%1$s»?</string>
+  <string name="JoinToGroupErrorFull">Perdón, esti grupu yá ta enllenu.</string>
+  <string name="JoinToGroupErrorNotExist">Perdón, esta charra nun paez qu\'esista.</string>
+  <string name="LinkCopied">Enllaz copiáu al cartafueyu</string>
+  <string name="InviteToGroupByLink">Convidar al grupu pente enllaz</string>
+  <string name="InviteLink">Enllaz d\'invitación</string>
+  <string name="RevokeAlert">¿De xuru que quies revocar esti enllaz? Namái facelo, naide podrá xunise usándolu.</string>
+  <string name="RevokeAlertNewLink">Agora\'l postrer enllaz d\'invitación tá inactivu. Xeneróse un enllaz nuevu.</string>
+  <string name="RevokeButton">Revocar</string>
+  <string name="RevokeLink">Revocar enllaz</string>
+  <string name="CopyLink">Copiar enllaz</string>
+  <string name="ShareLink">Compartir enllaz</string>
+  <string name="LinkInfo">Cualesquiera que tenga Asturgram/Telegram instaláu podrá xunise al to grupu siguiendo esti enllaz.</string>
+  <!--set admins view-->
+  <string name="SetAdminsTitle">Alministradores de la charra</string>
+  <string name="SetAdminsAll">Tolos miembros son alministradores</string>
+  <string name="SetAdminsAllInfo">Tolos miembros puen amestar a miembros nuevos, editar el nome y semeya del grupu.</string>
+  <string name="SetAdminsNotAllInfo">Namái los alministradores puen amestar y desaniciar miembros, editar el nome y semeya del grupu.</string>
+  <!--group info view-->
+  <string name="SharedMedia">Multimedia compartida</string>
+  <string name="SETTINGS">Axustes</string>
+  <string name="AddMember">Amestar miembru</string>
+  <string name="SetAdmins">Afitar alministradores</string>
+  <string name="DeleteAndExit">Desaniciar y colar del grupu</string>
+  <string name="Notifications">Avisos</string>
+  <string name="KickFromGroup">Espulsar del grupu</string>
+  <string name="UpgradeGroup">Anovar a supergrupu</string>
+  <string name="ConvertGroup">Convertir a supergrupu</string>
+  <string name="ConvertGroupMenu">Convertir a supergrupu</string>
+  <string name="ConvertGroupAlertWarning">Alvertencia</string>
+  <string name="ConvertGroupAlert">Esta aición ye irreversible. Nun ye posible anovar a un supergrupu y llueu volver a un grupu regular.</string>
+  <string name="ConvertGroupInfo"><![CDATA[<b>]]>Algamóse\'l llímite de miembros.<![CDATA[</b>]]>\n\nPa perpasalu y consiguir carauterístiques adicionales, anueva a un supergrupu:\n\n• Los supergrupos puen consiguir fasta %1$s\n• Los miembros nuevos puen ver tola historia de la charra\n• Los mensaxes desaniciaos desapaecerán pa tolos miembros\n• Los miembros puen editar los sos propios mensaxes\n• El creador pue afitar un enllaz públicu pal grupu</string>
+  <string name="ConvertGroupInfo2"><![CDATA[<b>]]>Nos supergrupos:<![CDATA[</b>]]>\n\n• Los miembros nuevos puen ver tola historia de mensaxes\n• Los mensaxes desaniciaos desapaecerán pa tolos miembros\n• Los miembros puen editar los sos propios mensaxes\n• El creador pue afitar un enllaz públicu pal grupu</string>
+  <string name="ConvertGroupInfo3"><![CDATA[<b>]]>Nota:<![CDATA[</b>]]> esta aición nun pue desafacese.</string>
+  <!--contact info view-->
+  <string name="ShareContact">Compartir</string>
+  <string name="AddContact">Amestar</string>
+  <string name="AddContactTitle">Amestar contautu</string>
+  <string name="BlockContact">Bloquiar</string>
+  <string name="EditContact">Editar</string>
+  <string name="DeleteContact">Desaniciar</string>
+  <string name="PhoneHome">Casa</string>
+  <string name="PhoneMobile">Móvil</string>
+  <string name="PhoneWork">Trabayu</string>
+  <string name="PhoneOther">Otru</string>
+  <string name="PhoneMain">Principal</string>
+  <string name="StartEncryptedChat">Aniciar charra secreta</string>
+  <string name="CreateEncryptedChatError">Hebo un fallu.</string>
+  <string name="EncryptionKey">Clave de cifráu</string>
+  <string name="MessageLifetime">Destrucción automática</string>
+  <string name="ShortMessageLifetimeForever">Apagáu</string>
+  <string name="EncryptionKeyDescription">Esta imaxe y testu derivaron de la clave de cifráu pa esta charra secreta con <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Si apaecen igual nel preséu de <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>, ta aseguráu\'l cifráu de puntu a puntu.<![CDATA[<br><br>]]>Depriendi más en telegram.org</string>
+  <string name="EncryptionKeyLink">https://telegram.org/faq#secret-chats</string>
+  <string name="NumberUnknown">Desconocíu</string>
+  <string name="Info">Información</string>
+  <string name="Phone">Teléfonu</string>
+  <!--usernames-->
+  <string name="Username">Nome d\'usuariu</string>
+  <string name="UsernamePlaceholder">El to nome d\'usuariu</string>
+  <string name="UsernameInUse">Perdón, esti nome d\'usuariu yá ta coyíu.</string>
+  <string name="UsernameInvalid">Perdón, esti nome d\'usuariu nun ye válidu</string>
+  <string name="UsernameInvalidShort">El nome d\'usuariu tien de tener polo menos 5 caráuteres.</string>
+  <string name="UsernameInvalidLong">El nome d\'usuariu nun pue perpasar los 32 caráuteres.</string>
+  <string name="UsernameInvalidStartNumber">Perdón, el nome d\'usuariu nun pue entamar per un númberu.</string>
+  <string name="UsernameHelp">Pues escoyer un nome d\'usuariu n\'<![CDATA[<b>]]>Asturgram<![CDATA[</b>]]>. Si lo faes, otres persones podrán alcontrate y contautate pente esi nome d\'usuariu ensin saber el to númberu teléfonu.<![CDATA[<br><br>]]>Pues usar <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> y barrabaxes. El llargor mínimu ye de <![CDATA[<b>]]>5<![CDATA[</b>]]> caráuteres.</string>
+  <string name="UsernameChecking">Comprobando nome d\'usuariu...</string>
+  <string name="UsernameAvailable">%1$s ta disponible.</string>
+  <string name="UsernameEmpty">Dengún</string>
+  <string name="ErrorOccurred">Asocedió un fallu.</string>
+  <!--stickers view-->
+  <string name="Stickers">Pegadielles</string>
+  <string name="StickersInfo">Dámos-yos l\'acoyida a los artistes pa qu\'amiesten los sos propios paquetes de pegadielles usando\'l nuesu bot @stickers.\n\nLos usuarios puen amestar pegadielles calcando nelles y escoyendo «Amestar a Pegadielles».</string>
+  <string name="AddStickers">Amestar pegadielles</string>
+  <string name="AddToStickers">Amestar a Pegadielles</string>
+  <string name="AddStickersNotFound">Nun s\'alcontraron pegadielles</string>
+  <string name="StickersRemoved">Pegadielles desaniciaes</string>
+  <string name="AddStickersInstalled">Amestáronse pegadielles nueves</string>
+  <string name="StickersHide">Anubrir</string>
+  <string name="StickersShow">Amosar</string>
+  <string name="StickersShare">Compartir</string>
+  <string name="StickersCopy">Copiar enllaz</string>
+  <string name="StickersRemove">Desaniciar</string>
+  <string name="NoStickers">Entá nun hai pegadielles</string>
+  <string name="SendSticker">UNVIAR PEGADIELLA</string>
+  <string name="TooMuchStickersets">Perdón, algamesti\'l númberu máximu de conxuntos pegadielles.</string>
+  <!--settings view-->
+  <string name="ResetNotificationsText">Reafitar tolos avisos</string>
+  <string name="TextSize">Tamañu\'l testu</string>
+  <string name="AskAQuestion">Fai una entruga</string>
+  <string name="EnableAnimations">Habilitar animaciones</string>
+  <string name="Unblock">Desbloquiar</string>
+  <string name="UnblockText">Ten calcáu un usuariu pa desbloquialu</string>
+  <string name="NoBlocked">Entá nun hai usuarios bloquiaos</string>
+  <string name="MessageNotifications">Avisos de mensaxes</string>
+  <string name="Alert">Alerta</string>
+  <string name="MessagePreview">Vista previa del mensaxe</string>
+  <string name="GroupNotifications">Avisos de grupos</string>
+  <string name="Sound">Soníu</string>
+  <string name="InAppNotifications">Avisos na aplicación</string>
+  <string name="InAppSounds">Soníos na aplicación</string>
+  <string name="InAppVibrate">Vibración na aplicación</string>
+  <string name="Vibrate">Vibración</string>
+  <string name="InAppPreview">Vista previa na aplicación</string>
+  <string name="Reset">Reafitar</string>
+  <string name="ResetAllNotifications">Reafitar tolos avisos</string>
+  <string name="UndoAllCustom">Desfái tolos axustes d\'avisos personalizaos pa tolos tos contautos y grupos</string>
+  <string name="NotificationsAndSounds">Avisos y soníos</string>
+  <string name="BlockedUsers">Usuarios bloquiaos</string>
+  <string name="LogOut">Zarrar sesión</string>
+  <string name="NoSound">Ensin soníu</string>
+  <string name="Default">Por defeutu</string>
+  <string name="Support">Sofitu</string>
+  <string name="OnlyIfSilent">Namái tando en silenciu</string>
+  <string name="ChatBackground">Fondu de la charra</string>
+  <string name="MessagesSettings">Mensaxes</string>
+  <string name="SendByEnter">Unviar al primir Enter</string>
+  <string name="TerminateAllSessions">Zarrar toles otres sesiones</string>
+  <string name="Events">Eventos</string>
+  <string name="ContactJoined">Un contautu xunióse a Asturgram/Telegram</string>
+  <string name="PinnedMessages">Mensaxes fixaos</string>
+  <string name="Language">Llingua</string>
+  <string name="AskAQuestionInfo">Por favor, decátate que\'l Sofitu d\'Asturgram/Telegram ta fechu por voluntarios. Intentamos responder tan rápido como sía posible pero podría llevamos tiempu.<![CDATA[<br><br>]]>Por favor, écha-y un güeyu a la <![CDATA[<a href=\"https://telegram.org/faq#general\">FAQ de Telegram</a>]]>: tien rempuestes a la mayoría d\'entrugues y conseyos importantes pa coles <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">igües de problemes</a>]]>.</string>
+  <string name="AskButton">Entrugar a voluntariu</string>
+  <string name="TelegramFaq">FAQ de Telegram</string>
+  <string name="TelegramFaqUrl">https://telegram.org/faq</string>
+  <string name="PrivacyPolicy">Política de privacidá</string>
+  <string name="PrivacyPolicyUrl">https://telegram.org/privacy</string>
+  <string name="DeleteLocalization">¿Desaniciar llocalización?</string>
+  <string name="IncorrectLocalization">El ficheru de llocalización nun ye válidu</string>
+  <string name="Enabled">Habilitáu</string>
+  <string name="Disabled">Deshabilitáu</string>
+  <string name="NotificationsService">Serviciu persistente</string>
+  <string name="NotificationsServiceInfo">Rellanza l\'aplicación al apagala pol usuariu o\'l sistema. Esto asegurará que l\'aplicación pue amosar avisos.</string>
+  <string name="NotificationsServiceConnection">Conexón de fondu</string>
+  <string name="NotificationsServiceConnectionInfo">Caltién una conexón d\'impautu baxu n\'Asturgram pa recibir avisos. Habilítalo p\'avisos fiables.</string>
+  <string name="SortBy">Ordenar por</string>
+  <string name="ImportContacts">Importar contautos</string>
+  <string name="SortFirstName">Nome</string>
+  <string name="SortLastName">Apellíu</string>
+  <string name="LedColor">Color del LED</string>
+  <string name="PopupNotification">Avisos emerxentes</string>
+  <string name="NoPopup">Ensin avisos emerxentes</string>
+  <string name="OnlyWhenScreenOn">Namái al tar la pantalla encesa</string>
+  <string name="OnlyWhenScreenOff">Namái al tar la pantalla apagada</string>
+  <string name="AlwaysShowPopup">Amosar avisos emerxentes siempres</string>
+  <string name="BadgeNumber">Númberu placa</string>
+  <string name="Short">Curtia</string>
+  <string name="Long">Llarga</string>
+  <string name="SystemDefault">Predetermináu del sistema</string>
+  <string name="SettingsDefault">Axustes por defeutu</string>
+  <string name="AutomaticMediaDownload">Descarga automática de multimedia</string>
+  <string name="WhenUsingMobileData">Al usar datos móviles</string>
+  <string name="WhenConnectedOnWiFi">Al tar coneutáu a la rede Wi-Fi</string>
+  <string name="WhenRoaming">Al tar en roaming</string>
+  <string name="NoMediaAutoDownload">Nun hai multimedia</string>
+  <string name="AutoplayGifs">Auto-reproducir GIFs</string>
+  <string name="RaiseToSpeak">Alzar pa falar</string>
+  <string name="SaveToGallerySettings">Guarda na Galería</string>
+  <string name="EditName">Editar nome</string>
+  <string name="NotificationsPriority">Prioridá</string>
+  <string name="NotificationsPriorityDefault">Por defeutu</string>
+  <string name="NotificationsPriorityLow">Baxa</string>
+  <string name="NotificationsPriorityHigh">Alta</string>
+  <string name="NotificationsPriorityMax">Máxima</string>
+  <string name="RepeatNotificationsNever">Enxamás</string>
+  <string name="RepeatNotifications">Repitir avisos</string>
+  <string name="PhoneNumberHelp">Equí pues cambiar el to númberu d\'Asturgram. La to cuenta y tolos tos datos na ñube — mensaxes, multimedia, contautos, etc... moveránse al númberu nuevu.\n\n<![CDATA[<b>Importante:</b>]]> a tolos tos contautos d\'Asturgram que nun bloquiares y tengan el to númberu vieyu, <![CDATA[<b>anovaráse-yos</b>]]> na so axenda</string>
+  <string name="PhoneNumberAlert">Tolos tos contautos d\'Asturgram que nun tengas bloquiaos y tengan el to númberu, anovaráse-yos el to númberu na so axenda.</string>
+  <string name="PhoneNumberChange">CAMBÉU DE NÚMBERU</string>
+  <string name="ChangePhoneNewNumber">Númberu nuevu</string>
+  <string name="ChangePhoneHelp">Unviarémoste un SMS con un códigu de confirmación al to númberu nuevu.</string>
+  <string name="ChangePhoneNumberOccupied">El númberu %1$s yá ta coneutáu a una cuenta Asturgram. Por favor, desanicia esa cuenta enantes de migrar al númberu nuevu.</string>
+  <string name="NotificationsOther">Otru</string>
+  <string name="NotificationsDisabled">Deshabilitaos</string>
+  <string name="VibrationDisabled">Deshabilitada</string>
+  <string name="LedDisabled">Deshabilitáu</string>
+  <string name="RepeatDisabled">Deshabilitada</string>
+  <string name="InChatSound">Soníos na charra</string>
+  <string name="SoundDefault">Por defeutu</string>
+  <string name="VibrationDefault">Por defeutu</string>
+  <string name="SmartNotifications">Avisos intelixentes</string>
+  <string name="SmartNotificationsDisabled">Deshabilitaos</string>
+  <string name="SmartNotificationsInfo">Sonar como máximo %1$s en %2$s</string>
+  <string name="SmartNotificationsSoundAtMost">Sonar como máximo</string>
+  <string name="SmartNotificationsTimes">vegaes</string>
+  <string name="SmartNotificationsWithin">en</string>
+  <string name="SmartNotificationsMinutes">minutos</string>
+  <string name="SecretWebPage">Previsualizaciones d\'enllaces</string>
+  <string name="SecretChat">Charres secretes</string>
+  <string name="ChromeCustomTabs">Restolador na aplicación</string>
+  <string name="ChromeCustomTabsInfo">Abre los enllaces esternos dientro l\'aplicación</string>
+  <string name="DirectShare">Compartición direuta</string>
+  <string name="DirectShareInfo">Amuesa les charres recientes nel menú de compartición</string>
+  <!--cache view-->
+  <string name="CacheSettings">Axustes de caché</string>
+  <string name="LocalDatabase">Base de datos llocal</string>
+  <string name="LocalDatabaseClear">¿Llimpiar mensaxes de testu na caché?</string>
+  <string name="LocalDatabaseInfo">Llimpiar la base de datos llocal desaniciará los testos de los mensaxes na caché y comprimirála p\'aforrar espaciu nel discu internu. Asturgram necesita dellos datos pa furrular, asina que\'l tamañu de la base de datos nun algamará\'l cero.\n\nEsta operación pue tardar dellos minutos en completase.</string>
+  <string name="ClearMediaCache">Llimpiar caché</string>
+  <string name="CacheClear">Llimpiar</string>
+  <string name="CalculatingSize">Calculando...</string>
+  <string name="LocalDocumentCache">Documentos</string>
+  <string name="LocalPhotoCache">Semeyes</string>
+  <string name="LocalAudioCache">Mensaxes de voz</string>
+  <string name="LocalVideoCache">Videos</string>
+  <string name="LocalMusicCache">Música</string>
+  <string name="LocalCache">Otros ficheros</string>
+  <string name="CacheEmpty">Balero</string>
+  <string name="KeepMedia">Caltener multimedia</string>
+  <string name="KeepMediaInfo">Desaniciaránse d\'esti preséu les semeyes, videos y otros ficheros de les charres na ñube que <![CDATA[<b>nun accedieres</b>]]> nesti periodu de tiempu p\'aforrar espaciu en discu.\n\nTola multimedia caltendráse na ñube de Telegram y pue baxase de nueves si lo precises.</string>
+  <string name="KeepMediaForever">Dafechu</string>
+  <!--sessions view-->
+  <string name="SessionsTitle">Sesiones actives</string>
+  <string name="CurrentSession">Sesión actual</string>
+  <string name="NoOtherSessions">Nun hai otres sesiones actives</string>
+  <string name="NoOtherSessionsInfo">Pues aniciar sesión n\'Asturgram dende otru móvil, tableta y ordenador usando\'l mesmu númberu teléfonu. Tolos tos datos sincronazaránse nel intre.</string>
+  <string name="OtherSessions">Sesiones actives</string>
+  <string name="SessionsInfo">Controla les tos sesiones n\'otros preseos.</string>
+  <string name="TerminateSessionInfo">Calca nuna sesión pa finala.</string>
+  <string name="TerminateSessionQuestion">¿Finar esta sesión?</string>
+  <string name="UnofficialApp">aplicación non oficial</string>
+  <!--passcode view-->
+  <string name="Passcode">Bloquéu con códigu de pasu</string>
+  <string name="ChangePasscode">Camudar códigu de pasu</string>
+  <string name="ChangePasscodeInfo">Cuando afites un códigu de pasu adicional, apaeceráte un iconu de bloquéu na páxina de charres. Calca nelli pa bloquiar y desbloquiar Asturgram.\n\nNota: si escaeces el códigu de pasu, necesitarás desaniciar y reinstalar l\'aplicación. Perderánse toles charres secretes.</string>
+  <string name="ChangePasscodeAlert">Agora verás un iconu na páxina de charres. Calca nelli pa bloquiar la to aplicación d\'Asturgram col to códigu de pasu nuevu.</string>
+  <string name="PasscodePIN">PIN</string>
+  <string name="PasscodePassword">Contraseña</string>
+  <string name="EnterCurrentPasscode">Introduz el to códigu de pasu actual</string>
+  <string name="EnterNewFirstPasscode">Introduz un códigu de pasu</string>
+  <string name="EnterNewPasscode">Introduz el to códigu de pasu</string>
+  <string name="EnterYourPasscode">Introduz el to códigu de pasu</string>
+  <string name="ReEnterYourPasscode">Reintroduz el to códigu de pasu nuevu</string>
+  <string name="InvalidPasscode">Códigu de pasu non válidu</string>
+  <string name="PasscodeDoNotMatch">Los códigos de pasu nun concasen</string>
+  <string name="AutoLock">Bloquéu automáticu</string>
+  <string name="AutoLockInfo">Rique\'l códigu de pasu si tas ausente nun tiempu.</string>
+  <string name="AutoLockInTime">en %1$s</string>
+  <string name="AutoLockDisabled">Deshabilitáu</string>
+  <string name="UnlockFingerprint">Desbloquiar cola buelga</string>
+  <string name="FingerprintInfo">Confirmar buelga pa siguir</string>
+  <string name="FingerprintHelp">Sensor táutil</string>
+  <string name="FingerprintNotRecognized">Buelga non reconocida. inténtalo de nueves</string>
+  <!--media view-->
+  <string name="DocumentsTitle">Ficheros compartíos</string>
+  <string name="SharedMediaTitle">Multimedia compartida</string>
+  <string name="LinksTitle">Enllaces compartíos</string>
+  <string name="AudioTitle">Música compartida</string>
+  <string name="NoMedia">Comparti fotos y videos nesta charra y accedi a ellos en cualesquier preséu de to.</string>
+  <string name="NoSharedAudio">Comparti música nesta charra y accedi a ella dende cualesquier preséu de to.</string>
+  <string name="NoSharedFiles">Comparti ficheros y documentos nesta charra y accedi a ellos en cualesquier preséu de to.</string>
+  <string name="NoSharedLinks">Comparti enllaces nesta charra y accedi a ellos en cualesquier preséu de to.</string>
+  <string name="NoMediaSecret">Equí amosaránse les semeyes y videos d\'esta charra.</string>
+  <string name="NoSharedAudioSecret">Equí amosaránse la música d\'esta charra.</string>
+  <string name="NoSharedFilesSecret">Equí amosaránse los ficheros y documentos d\'esta charra.</string>
+  <string name="NoSharedLinksSecret">Equí amosaránse los enllaces compartíos d\'esta charra.</string>
+  <!--map view-->
+  <string name="Map">Mapa</string>
+  <string name="Satellite">Satélite</string>
+  <string name="Hybrid">Híbridu</string>
+  <string name="MetersAway">m de distancia</string>
+  <string name="KMetersAway">km de distancia</string>
+  <string name="SendLocation">Unviar el to allugamientu actual</string>
+  <string name="SendSelectedLocation">Unviar l\'allugamientu actual</string>
+  <string name="ShareLocation">Allugamientu</string>
+  <string name="AccurateTo">Cola precisión de %1$s</string>
+  <string name="NearbyPlaces">O ESCUEYI UN LLUGAR</string>
+  <!--photo gallery view-->
+  <string name="ShowAllMedia">Amosar toles semeyes y vídeos</string>
+  <string name="SaveToGallery">Guardar na Galería</string>
+  <string name="Of">%1$d de %2$d</string>
+  <string name="Gallery">Galería</string>
+  <string name="AllPhotos">Toles semeyes</string>
+  <string name="AllVideo">Tolos videos</string>
+  <string name="NoPhotos">Entá nun hai semeyes</string>
+  <string name="NoVideo">Ensin videos entá</string>
+  <string name="PleaseDownload">Por favor, baxa primero multimedia</string>
+  <string name="NoRecentPhotos">Nun hai semeyes recientes</string>
+  <string name="NoRecentGIFs">Nun hai GIFs recientes</string>
+  <string name="SearchImages">ATOPAR SEMEYES</string>
+  <string name="SearchImagesInfo">GUETA WEB</string>
+  <string name="SearchGifs">ATOPAR GIFS</string>
+  <string name="SearchImagesTitle">Guetar na web</string>
+  <string name="SearchGifsTitle">Guetar GIFs</string>
+  <string name="CropImage">Retayar imaxe</string>
+  <string name="EditImage">Editar imaxe</string>
+  <string name="Enhance">Ameyorar</string>
+  <string name="Highlights">Destacar</string>
+  <string name="Contrast">Contraste</string>
+  <string name="Exposure">Esposición</string>
+  <string name="Warmth">Calor</string>
+  <string name="Saturation">Saturación</string>
+  <string name="Vignette">Vignette</string>
+  <string name="Shadows">Solombres</string>
+  <string name="Grain">Granu</string>
+  <string name="Sharpen">Afiláu</string>
+  <string name="Fade">Esvanecer</string>
+  <string name="Tint">Tiñir</string>
+  <string name="TintShadows">SOLOMBRES</string>
+  <string name="TintHighlights">DESTACAR</string>
+  <string name="Curves">Curves</string>
+  <string name="CurvesAll">TOO</string>
+  <string name="CurvesRed">BERMEYO</string>
+  <string name="CurvesGreen">VERDE</string>
+  <string name="CurvesBlue">AZUL</string>
+  <string name="Blur">Suavizáu</string>
+  <string name="BlurOff">Deshabilitáu</string>
+  <string name="BlurLinear">Llinial</string>
+  <string name="BlurRadial">Radial</string>
+  <string name="AreYouSureDeletePhoto">¿De xuru que quies desaniciar esta semeya?</string>
+  <string name="AreYouSureDeleteVideo">¿De xuru que quies desaniciar esti videu?</string>
+  <string name="DiscardChanges">¿Descartar camudancies?</string>
+  <string name="ClearSearch">¿Llimpiar historia de gueta?</string>
+  <string name="ClearButton">Llimpiar</string>
+  <string name="PickerPhotos">Semeyes</string>
+  <string name="PickerVideo">Videu</string>
+  <string name="AddCaption">Amiesta un comentariu...</string>
+  <string name="PhotoCaption">Comentariu d\'imaxe</string>
+  <string name="VideoCaption">Comentariu de videu</string>
+  <string name="Caption">Comentariu</string>
+  <!--password view-->
+  <string name="TwoStepVerification">Verificación en dos pasos</string>
+  <string name="SetAdditionalPassword">Afitar una contraseña adicional</string>
+  <string name="SetAdditionalPasswordInfo">Pues afitar una contraseña que se riquirá cuando anicies sesión nun preséu nuevu arriendes del códigu que t\'unviemos per SMS.</string>
+  <string name="YourPassword">La to contraseña</string>
+  <string name="PleaseEnterCurrentPassword">Por favor, introduz la to contraseña</string>
+  <string name="PleaseEnterFirstPassword">Introduz una contraseña</string>
+  <string name="PleaseEnterPassword">Por favor, introduz la to contraseña nueva</string>
+  <string name="PleaseReEnterPassword">Por favor, reintroduz la to contraseña</string>
+  <string name="RecoveryEmail">Corréu de recuperación</string>
+  <string name="YourEmail">El to corréu</string>
+  <string name="YourEmailInfo">Por favor, amiesta un corréu válidu. Ye l\'únicu mou de recuperar una contraseña escaecida.</string>
+  <string name="YourEmailSkip">Saltar</string>
+  <string name="YourEmailSkipWarning">Avisu</string>
+  <string name="YourEmailSkipWarningText">Non, nun ye broma.\n\nSi escaeces la to contraseña, perderás l\'accesu a la to cuenta Telegram. Nun habrá mou de restaurala.</string>
+  <string name="YourEmailAlmostThere">¡Yá cuasi finamos!</string>
+  <string name="YourEmailAlmostThereText">Por favor, comprueba\'l to corréu, (nun t\'escaezas de la carpeta puxarra), pa completar la configuración en dos pasos.</string>
+  <string name="YourPasswordSuccess">¡Cambéu esitosu!</string>
+  <string name="YourPasswordSuccessText">Agora la to contraseña pa la verificación en dos pasos ta activada.</string>
+  <string name="ChangePassword">Camudar contraseña</string>
+  <string name="TurnPasswordOff">Deshabilitar contraseña</string>
+  <string name="SetRecoveryEmail">Afitar corréu de recuperación</string>
+  <string name="ChangeRecoveryEmail">Camudar corréu de verificación</string>
+  <string name="TurnPasswordOffQuestion">¿De xuru que quies deshabilitar la to contraseña?</string>
+  <string name="PasswordHint">Pista de contraseña</string>
+  <string name="PasswordHintText">Por favor, crea una pista pa la to contraseña</string>
+  <string name="PasswordDoNotMatch">Les contraseñes nun concasen</string>
+  <string name="AbortPassword">Albortar verificación en dos pasos</string>
+  <string name="EmailPasswordConfirmText">Por favor, sigui los pasos pa completar la configuración de la verificación en dos pasos:\n\n1. Comprueba\'l to corréu, (nun t\'escaezas de la carpeta puxarra)\n%1$s\n\n2. Primi nel enllaz de validación.</string>
+  <string name="PasswordAsHintError">La pista tien de ser distinta de la to contraseña</string>
+  <string name="PasswordEmailInvalid">Corréu non válidu</string>
+  <string name="RestorePasswordNoEmailTitle">Perdón</string>
+  <string name="RestorePasswordNoEmailText">Darréu que nun apurriesti un corréu de recuperación al configurar la to contraseña, les opciones que te queden son recordar la to contraseña o reafitar la to cuenta.</string>
+  <string name="RestoreEmailSent">Unviámoste un códigu recuperación al corréu qu\'apurriesti:\n\n%1$s</string>
+  <string name="RestoreEmailSentInfo">Por favor, comprueba\'l to corréu ya introduz equí\'l códigu de 6 díxitos que t\'unviamos.</string>
+  <string name="RestoreEmailTrouble">¿Tienes torgues accediendo al to corréu %1$s?</string>
+  <string name="RestoreEmailTroubleText">Si nun pues acceder al to corréu, les opciones que te queden son recordar la to contraseña o reafitar la to cuenta.</string>
+  <string name="ResetMyAccount">REAFITAR LA MIO CUENTA</string>
+  <string name="ResetMyAccountText">Perderás toles tos charres y mensaxes, xunto con tolo que compartieres si sigues col reafitamientu de la to cuenta.</string>
+  <string name="ResetMyAccountWarning">Avisu</string>
+  <string name="ResetMyAccountWarningText">Esta aición nun pue desfacese.\n\nSi reafites la to cuenta, desaniciaránse toles tos charres y mensaxes.</string>
+  <string name="ResetMyAccountWarningReset">Reafitar</string>
+  <string name="LoginPassword">Contraseña</string>
+  <string name="LoginPasswordText">Habilitesti la verificación en dos pasos, asina que la to cuenta ta protexida con una contraseña adicional.</string>
+  <string name="ForgotPassword">¿Escaeciesti la contraseña?</string>
+  <string name="PasswordRecovery">Recuperación de contraseña</string>
+  <string name="PasswordCode">Códigu</string>
+  <string name="PasswordReset">Contrseña desactivada</string>
+  <string name="EnabledPasswordText">Habilitesti la verificación en dos pasos.\nNecesitarás la contraseña que configuresti equí p\'aniciar sesión na to cuenta Telegram.</string>
+  <string name="PendingEmailText">El corréu de verificación %1$s entá nun ta activu y falta por confirmalu.</string>
+  <!--privacy settings-->
+  <string name="PrivacySettings">Privacidá y seguranza</string>
+  <string name="PrivacyTitle">Privacidá</string>
+  <string name="PrivacyLastSeen">Vistu per última vegada</string>
+  <string name="LastSeenEverybody">Tol mundiu</string>
+  <string name="LastSeenContacts">Los mios contautos</string>
+  <string name="LastSeenNobody">Naide</string>
+  <string name="LastSeenEverybodyMinus">Tol mundiu (-%1$d)</string>
+  <string name="LastSeenContactsPlus">Los mios contautos (+%1$d)</string>
+  <string name="LastSeenContactsMinus">Los mios contautos (-%1$d)</string>
+  <string name="LastSeenContactsMinusPlus">Los mios contautos (-%1$d, +%2$d)</string>
+  <string name="LastSeenNobodyPlus">Naide (+%1$d)</string>
+  <string name="SecurityTitle">Seguranza</string>
+  <string name="DeleteAccountTitle">Desaniciu automáticu de cuenta</string>
+  <string name="DeleteAccountIfAwayFor">Si tas ausente</string>
+  <string name="DeleteAccountHelp">Si nun anicies sesión polo menos dientro d\'esti periodu, la to cuenta desaniciaráse xunto con tolos grupos, mensaxes y contautos.</string>
+  <string name="DeleteAccountNowConfirmation">¿Desaniciar la to cuenta?</string>
+  <string name="LastSeenHelp">Camuda quien puen ver el to «viose».</string>
+  <string name="LastSeenTitle">¿Quién puen ver el to «viose»?</string>
+  <string name="AddExceptions">Amestar esceiciones</string>
+  <string name="CustomHelp">Importante: nun podrás ver el «viose» de la xente cola que nun lu compartes. Amosaráse d\'otru mou, un «viose» más recién (apocayá, hai díes...).</string>
+  <string name="AlwaysShareWith">Compartir siempres con</string>
+  <string name="NeverShareWith">Nunca nun compartir con</string>
+  <string name="CustomShareSettingsHelp">Estos axustes sobrescribirán los valores d\'enriba.</string>
+  <string name="AlwaysShareWithTitle">Compartir siempres</string>
+  <string name="AlwaysShareWithPlaceholder">Compartir siempres colos usuarios...</string>
+  <string name="NeverShareWithTitle">Nunca nun compartir</string>
+  <string name="NeverShareWithPlaceholder">Nunca nun compartir colos usuarios...</string>
+  <string name="EmpryUsersPlaceholder">Amestar usuarios...</string>
+  <string name="PrivacyFloodControlError">Perdón, milenta peticiones. Agora nun puen camudase los axustes de privacidá, espera por favor.</string>
+  <string name="ClearOtherSessionsHelp">Zarra sesión en tolos preseos sacante nesti.</string>
+  <string name="RemoveFromListText">Ten calcáu un usuariu pa desanicialu.</string>
+  <string name="GroupsAndChannels">Grupos</string>
+  <string name="WhoCanAddMe">¿Quién pue amestame a los grupos?</string>
+  <string name="WhoCanAddMeInfo">Pues torgar quien pue amestate a los grupos y canales con una precisión al milímetru.</string>
+  <string name="AlwaysAllow">Permitir siempres</string>
+  <string name="NeverAllow">Enxamás permitir</string>
+  <string name="AlwaysAllowPlaceholder">Permitir siempres...</string>
+  <string name="NeverAllowPlaceholder">Enxamás permitir...</string>
+  <string name="CustomShareInfo">Estos usuarios sedrán o non a amestate a los grupos y canales magar los tos axustes d\'enriba.</string>
+  <string name="GroupsAndChannelsHelp">Camuda quién pue amestate a los grupos y canales.</string>
+  <string name="InviteToGroupError">Perdón, nun pues amestar esti usuariu a los grupos pola mor de los sos axustes de privacidá.</string>
+  <string name="InviteToChannelError">Perdón, nun pues amestar esti usuariu a les canales pola mor de los sos axustes de privacidá.</string>
+  <string name="CreateGroupError">Perdón, nun pues crear un grupu con estos usuarios pola mor de los sos axustes de privacidá.</string>
+  <!--edit video view-->
+  <string name="EditVideo">Editar videu</string>
+  <string name="OriginalVideo">Videu orixinal</string>
+  <string name="EditedVideo">Videu editáu</string>
+  <string name="SendingVideo">Unviando videu...</string>
+  <string name="CompressVideo">Comprimir videu</string>
+  <!--bot-->
+  <string name="Bot">bot</string>
+  <string name="BotShare">Compartir</string>
+  <string name="BotInvite">Amestar a grupu</string>
+  <string name="BotSettings">Axustes</string>
+  <string name="BotHelp">Ayuda</string>
+  <string name="BotStatusRead">tien accesu a los mensaxes</string>
+  <string name="BotStatusCantRead">nun tien accesu a los mensaxes</string>
+  <string name="BotInfoTitle">¿Qué pue facer esti bot?</string>
+  <string name="BotStart">ENTAMAR</string>
+  <string name="BotUnblock">REANICIAR</string>
+  <string name="BotStop">Parar bot</string>
+  <string name="BotRestart">Reaniciar bot</string>
+  <!--button titles-->
+  <string name="Next">Siguiente</string>
+  <string name="Back">Atrás</string>
+  <string name="Done">Fecho</string>
+  <string name="Open">Abrir</string>
+  <string name="Save">Guardar</string>
+  <string name="Cancel">Encaboxar</string>
+  <string name="Close">Zarrar</string>
+  <string name="Add">Amestar</string>
+  <string name="Edit">Editar</string>
+  <string name="Send">Unviar</string>
+  <string name="Call">Llamar</string>
+  <string name="Copy">Copiar</string>
+  <string name="Delete">Desaniciar</string>
+  <string name="DeleteAndStop">Desaniciar y colar</string>
+  <string name="Forward">Reunviar</string>
+  <string name="Retry">Reintentar</string>
+  <string name="FromCamera">Dende la Cámara</string>
+  <string name="FromGalley">Dende la Galería</string>
+  <string name="DeletePhoto">Desaniciar semeya</string>
+  <string name="Set">Afitar</string>
+  <string name="OK">OK</string>
+  <string name="Crop">RETAYAR</string>
+  <!--messages-->
+  <string name="ActionInviteYou">Xuniestite al grupu pente l\'enllaz d\'invitación</string>
+  <string name="ActionInviteUser">un1 xunióse al grupu pente l\'enllaz d\'invitación</string>
+  <string name="ActionKickUser">un1 espulsó a un2</string>
+  <string name="ActionLeftUser">un1 dexó\'l grupu</string>
+  <string name="ActionAddUser">un1 amestó a un2</string>
+  <string name="ActionRemovedPhoto">un1 desanició la semeya\'l grupu</string>
+  <string name="ActionChangedPhoto">un1 camudó la semeya\'l grupu</string>
+  <string name="ActionChangedTitle">un1 camudó\'l nome\'l grupu a un2</string>
+  <string name="ActionCreateGroup">un1 creó\'l grupu</string>
+  <string name="ActionYouKickUser">Espulsasti a un2</string>
+  <string name="ActionYouLeftUser">Dexesti\'l grupu</string>
+  <string name="ActionYouAddUser">Amestasti a un2</string>
+  <string name="ActionYouRemovedPhoto">Desaniciasti la semeya de grupu</string>
+  <string name="ActionYouChangedPhoto">Camudesti la semeya de grupu</string>
+  <string name="ActionYouChangedTitle">Camudesti\'l nome de grupu a un2</string>
+  <string name="ActionYouCreateGroup">Creasti\'l grupu</string>
+  <string name="ActionKickUserYou">un1 espulsóte</string>
+  <string name="ActionAddUserYou">un1 amestóte</string>
+  <string name="ActionAddUserSelf">un1 volvió al grupu</string>
+  <string name="ActionAddUserSelfMega">un1 xunióse al grupu</string>
+  <string name="ActionAddUserSelfYou">Tornesti al grupu</string>
+  <string name="UnsupportedMedia">Esti mensaxe nun ta sofitáu na to versión d\'Asturgram. Anueva l\'aplicación pa velu: https://play.google.com/store/apps/details?id=org.softastur.asturgram</string>
+  <string name="AttachPhoto">Semeya</string>
+  <string name="AttachVideo">Videu</string>
+  <string name="AttachGif">GIF</string>
+  <string name="AttachLocation">Allugamientu</string>
+  <string name="AttachContact">Contautu</string>
+  <string name="AttachDocument">Ficheru</string>
+  <string name="AttachSticker">Pegadiella</string>
+  <string name="AttachAudio">Mensaxe de voz</string>
+  <string name="FromYou">Tu</string>
+  <string name="ActionTakeScreenshootYou">¡Fixisti una captura de pantalla!</string>
+  <string name="ActionTakeScreenshoot">¡un1 fixo una captura de pantalla!</string>
+  <!--Alert messages-->
+  <string name="InvalidPhoneNumber">Númberu de teléfonu non válidu</string>
+  <string name="CodeExpired">Códigu caducáu. Por favor, anicia sesión otra vuelta</string>
+  <string name="FloodWait">Abondos intentos. Por favor, prueba de nueves más tarde</string>
+  <string name="FloodWaitTime">Milenta intentos, por favor inténtalo de nueves en %1$s</string>
+  <string name="InvalidCode">Códigu non válidu</string>
+  <string name="InvalidFirstName">Nome non válidu</string>
+  <string name="InvalidLastName">Apellíu/os non válidu/os</string>
+  <string name="Loading">Cargando...</string>
+  <string name="NoPlayerInstalled">Nun tienes reproductor de videu. Por favor, instala ún pa siguir.</string>
+  <string name="NoMailInstalled">Por favor, unviamos un corréu a sms@stel.com y fálamos tocante al to problema.</string>
+  <string name="NoHandleAppInstalled">Nun tienes aplicaciones que puean remanar la triba mime \'%1$s\'. Por favor, instala una pa siguir</string>
+  <string name="InviteUser">Esti usuariu entá nun tien Asturgram. ¿Quies convidalu?</string>
+  <string name="AreYouSure">¿Tas seguru?</string>
+  <string name="AddToTheGroupTitle">¿Amestar a %1$s a la charra %2$s?</string>
+  <string name="AddToTheGroupForwardCount">Númberu de mensaxes caberos pa reunviar:</string>
+  <string name="AddToTheGroup">¿Amestar a %1$s al grupu?</string>
+  <string name="UserAlreadyInGroup">L\'usuariu yá ta nesti grupu</string>
+  <string name="ForwardMessagesTo">¿Reunviar mensaxes a %1$s?</string>
+  <string name="SendMessagesTo">¿Unviar mensaxes a %1$s?</string>
+  <string name="SendContactTo">¿Unviar contautu a %1$s?</string>
+  <string name="AreYouSureLogout">¿De xuru que quies zarrar sesión?\n\nDecátate que pues usar ensin problemes Telegram en tolos tos preseos.\n\nRecuerda, zarrar sesión desanicia toles tos charres secretes.</string>
+  <string name="AreYouSureSessions">¿De xuru que quies finar toles otres sesiones?</string>
+  <string name="AreYouSureDeleteAndExit">¿De xuru que quies colar y desaniciar el grupu?</string>
+  <string name="AreYouSureDeleteThisChat">¿De xuru que quies desaniciar esta charra?</string>
+  <string name="ShareYouLocationTitle">¿Compartir el to allugamientu?</string>
+  <string name="ShareYouLocationInfo">Esto unviará\'l to allugamientu actual al bot.</string>
+  <string name="ShareYouLocationUnable">L\'aplicación nun foi a determinar el to allugamientu actual</string>
+  <string name="ShareYouLocationUnableManually">Escoyer a mano</string>
+  <string name="ShareYouLocationInline">A esti bot prestaría-y saber el to allugamientu cada vegada qu\'unvies una solicitú. Esto pue usase p\'apurrir resultaos basaos nel allugamientu.</string>
+  <string name="ShareYouPhoneNumberTitle">¿Compartir el to númberu teléfonu?</string>
+  <string name="AreYouSureShareMyContactInfoBot">El bot sabrá\'l to númberu teléfonu. Esto pue ser útil pa la integración con otros servcios.</string>
+  <string name="AreYouSureShareMyContactInfoUser">¿De xuru que quies compartir el to númberu teléfonu %1$s con <![CDATA[<b>]]>%2$s<![CDATA[</b>]]>?</string>
+  <string name="AreYouSureShareMyContactInfo">¿De xuru que quies compartir el to númberu teléfonu?</string>
+  <string name="AreYouSureBlockContact">¿De xuru que quies bloquiar a esti contautu?</string>
+  <string name="AreYouSureUnblockContact">¿De xuru que quies desbloquiar a esti usuariu?</string>
+  <string name="AreYouSureDeleteContact">¿De xuru que quies desaniciar esti contautu?</string>
+  <string name="AreYouSureSecretChat">¿De xuru que quies aniciar la charra secreta?</string>
+  <string name="AreYouSureRegistration">¿De xuru que quies encaboxar el rexistru?</string>
+  <string name="AreYouSureClearHistory">¿De xuru que quies llimpiar la to historia?</string>
+  <string name="AreYouSureClearHistoryChannel">¿Desaniciar d\'esta canal tolos testos y multimedia na caché?</string>
+  <string name="AreYouSureClearHistorySuper">¿Desaniciar tol testu y ficheros na caché d\'esti grupu?</string>
+  <string name="AreYouSureDeleteMessages">¿De xuru que quies desaniciar %1$s?</string>
+  <string name="SendMessagesToGroup">¿Unviar mensaxes a %1$s?</string>
+  <string name="SendContactToGroup">¿Unviar contautu a %1$s?</string>
+  <string name="ForwardMessagesToGroup">¿Reunviar mensaxes a %1$s?</string>
+  <string name="FeatureUnavailable">Perdón, esta carauterística nun ta disponible nel to país anguaño.</string>
+  <string name="NoUsernameFound">Nun hai cuenta Telegram dala con esti nome d\'usuariu.</string>
+  <string name="BotCantJoinGroups">Esti bot nun pue xunise a grupos</string>
+  <string name="SecretLinkPreviewAlert">¿Prestaríate habilitar les previsualizaciones estendíes d\'enllaces nes charres secretes? Decátate que se xeneren nos sirvidores de Telegram.</string>
+  <string name="SecretChatContextBotAlert">Decátate que los bots en llinia fórnense por desendolcadores de terceres partes, por favor. Pa que furrule\'l bot, únviense al so respeutivu desendolcador los símbolos que teclexes dempués del nome\'l bot.</string>
+  <string name="RaiseToSpeakAlert">¿Prestaríate habilitar «Alzar pa falar» pa los mensaxes de voz?</string>
+  <string name="EditMessageError">Perdón, nun pues editar esti mensaxe</string>
+  <string name="AllowReadSms">Da-y permisu a Asturgram pa recibir SMS y qu\'asina podamos introducir automáticamente\'l códigu por ti, por favor.</string>
+  <string name="AllowReadCall">Da-y permisu a Asturgram pa recibir llamaes y qu\'asina podamos introducir automáticamente\'l códigu por ti, por favor.</string>
+  <string name="AllowReadCallAndSms">Da-y permisu a Asturgram pa recibir SMS y llamaes pa qu\'asina podamos introducir automáticamente\'l códigu por ti, por favor.</string>
+  <string name="UserRestricted">Perdón, nun tienes permisu pa facer esto.</string>
+  <!--permissions-->
+  <string name="PermissionContacts">Asturgram necesita acceder a los tos contautos pa qu\'asina pueas coneutate colos tos collacios pente tolos tos preseos.</string>
+  <string name="PermissionStorage">Asturgram necesita acceder al to almacenamientu pa qu\'asina pueas unviar y guardar semeyes, videos, música y otros ficheros.</string>
+  <string name="PermissionNoAudio">Asturgram necesita acceder al to micrófonu pa qu\'asina pueas unviar mensaxes de voz.</string>
+  <string name="PermissionNoLocation">Asturgram necesita acceder al to allugamientu pa qu\'asina pueas compartilu colos tos collacios.</string>
+  <string name="PermissionNoLocationPosition">Asturgram precisa acceder al to allugamientu.</string>
+  <string name="PermissionOpenSettings">AXUSTES</string>
+  <!--Intro view-->
+  <string name="Page1Title">Asturgram</string>
+  <string name="Page2Title">Rápidu</string>
+  <string name="Page3Title">De baldre</string>
+  <string name="Page4Title">Seguru</string>
+  <string name="Page5Title">Poderosu</string>
+  <string name="Page6Title">Basáu na ñube</string>
+  <string name="Page7Title">Priváu</string>
+  <string name="Page1Message">L\'aplicación de mensaxería nel<![CDATA[<br/>]]>intre <![CDATA[<b>más rápida del mundiu</b>]]>.<![CDATA[<br/>]]>Ye <![CDATA[<b>llibre</b>]]> y <![CDATA[<b>segura</b>]]>.</string>
+  <string name="Page2Message"><![CDATA[<b>Asturgram</b>]]> unvia mensaxes más<![CDATA[<br/>]]>rápido qu\'otres aplicaciones.</string>
+  <string name="Page3Message"><![CDATA[<b>Asturgram</b>]]> ye llibre dafechu. Ensin<![CDATA[<br/>]]>publicidá. Ensin soscripciones.</string>
+  <string name="Page4Message"><![CDATA[<b>Asturgram</b>]]> caltien los tos mensaxes<![CDATA[<br/>]]>seguros d\'ataques de crackers.</string>
+  <string name="Page5Message"><![CDATA[<b>Asturgram</b>]]> nun tien llende de tamañu<![CDATA[<br/>]]>pa coles tos charres o multimedia.</string>
+  <string name="Page6Message"><![CDATA[<b>Asturgram</b>]]> permítete acceder a los tos<![CDATA[<br/>]]>mensaxes dende dellos preseos.</string>
+  <string name="Page7Message"><![CDATA[<b>Asturgram</b>]]> cifra los mensaxes de mou fuerte<![CDATA[<br/>]]>y puen destruyise automáticamente.</string>
+  <string name="StartMessaging">Entama a charrar</string>
+  <!--plural-->
+  <string name="Online_zero">%1$d en llinia</string>
+  <string name="Online_one">%1$d en llinia</string>
+  <string name="Online_two">%1$d en llinia</string>
+  <string name="Online_few">%1$d en llinia</string>
+  <string name="Online_many">%1$d en llinia</string>
+  <string name="Online_other">%1$d en llinia</string>
+  <string name="Members_zero">%1$d miembros</string>
+  <string name="Members_one">%1$d miembru</string>
+  <string name="Members_two">%1$d miembros</string>
+  <string name="Members_few">%1$d miembros</string>
+  <string name="Members_many">%1$d miembros</string>
+  <string name="Members_other">%1$d miembros</string>
+  <string name="AndMoreTyping_zero">y %1$d persones más tán teclexando</string>
+  <string name="AndMoreTyping_one">y %1$d persona más tán teclexando</string>
+  <string name="AndMoreTyping_two">y %1$d persones más tán teclexando</string>
+  <string name="AndMoreTyping_few">y %1$d persones más tán teclexando</string>
+  <string name="AndMoreTyping_many">y %1$d persones más tán teclexando</string>
+  <string name="AndMoreTyping_other">y %1$d persones más tán teclexando</string>
+  <string name="NewMessages_zero">nun hai mensaxes nuevos</string>
+  <string name="NewMessages_one">%1$d mensaxe nuevu</string>
+  <string name="NewMessages_two">%1$d mensaxes nuevos</string>
+  <string name="NewMessages_few">%1$d mensaxes nuevos</string>
+  <string name="NewMessages_many">%1$d mensaxes nuevos</string>
+  <string name="NewMessages_other">%1$d mensaxes nuevos</string>
+  <string name="messages_zero">nun hai mensaxes</string>
+  <string name="messages_one">%1$d mensaxe</string>
+  <string name="messages_two">%1$d mensaxes</string>
+  <string name="messages_few">%1$d mensaxes</string>
+  <string name="messages_many">%1$d mensaxes</string>
+  <string name="messages_other">%1$d mensaxes</string>
+  <string name="comments_zero">%1$d comentarios</string>
+  <string name="comments_one">%1$d comentariu</string>
+  <string name="comments_two">%1$d comentarios</string>
+  <string name="comments_few">%1$d comentarios</string>
+  <string name="comments_many">%1$d comentarios</string>
+  <string name="comments_other">%1$d comentarios</string>
+  <string name="items_zero">nun hai elementos</string>
+  <string name="items_one">%1$d elementu</string>
+  <string name="items_two">%1$d elementos</string>
+  <string name="items_few">%1$d elementos</string>
+  <string name="items_many">%1$d elementos</string>
+  <string name="items_other">%1$d elementos</string>
+  <string name="FromChats_zero">de denguna charra</string>
+  <string name="FromChats_one">de %1$d charra</string>
+  <string name="FromChats_two">de %1$d charres</string>
+  <string name="FromChats_few">de %1$d charres</string>
+  <string name="FromChats_many">de %1$d charres</string>
+  <string name="FromChats_other">de %1$d charres</string>
+  <string name="Seconds_zero">%1$d segundos</string>
+  <string name="Seconds_one">%1$d segundu</string>
+  <string name="Seconds_two">%1$d segundos</string>
+  <string name="Seconds_few">%1$d segundos</string>
+  <string name="Seconds_many">%1$d segundos</string>
+  <string name="Seconds_other">%1$d segundos</string>
+  <string name="Minutes_zero">%1$d minutos</string>
+  <string name="Minutes_one">%1$d minutu</string>
+  <string name="Minutes_two">%1$d minutos</string>
+  <string name="Minutes_few">%1$d minutos</string>
+  <string name="Minutes_many">%1$d minutos</string>
+  <string name="Minutes_other">%1$d minutos</string>
+  <string name="Hours_zero">%1$d hores</string>
+  <string name="Hours_one">%1$d hora</string>
+  <string name="Hours_two">%1$d hores</string>
+  <string name="Hours_few">%1$d hores</string>
+  <string name="Hours_many">%1$d hores</string>
+  <string name="Hours_other">%1$d hores</string>
+  <string name="Days_zero">%1$d díes</string>
+  <string name="Days_one">%1$d día</string>
+  <string name="Days_two">%1$d díes</string>
+  <string name="Days_few">%1$d díes</string>
+  <string name="Days_many">%1$d díes</string>
+  <string name="Days_other">%1$d díes</string>
+  <string name="Weeks_zero">%1$d selmanes</string>
+  <string name="Weeks_one">%1$d selmana</string>
+  <string name="Weeks_two">%1$d selmanes</string>
+  <string name="Weeks_few">%1$d selmanes</string>
+  <string name="Weeks_many">%1$d selmanes</string>
+  <string name="Weeks_other">%1$d selmanes</string>
+  <string name="Months_zero">%1$d meses</string>
+  <string name="Months_one">%1$d mes</string>
+  <string name="Months_two">%1$d meses</string>
+  <string name="Months_few">%1$d meses</string>
+  <string name="Months_many">%1$d meses</string>
+  <string name="Months_other">%1$d meses</string>
+  <string name="Years_zero">%1$d años</string>
+  <string name="Years_one">%1$d añu</string>
+  <string name="Years_two">%1$d años</string>
+  <string name="Years_few">%1$d años</string>
+  <string name="Years_many">%1$d años</string>
+  <string name="Years_other">%1$d años</string>
+  <string name="Users_zero">%1$d usuarios</string>
+  <string name="Users_one">%1$d usuariu</string>
+  <string name="Users_two">%1$d usuarios</string>
+  <string name="Users_few">%1$d usuarios</string>
+  <string name="Users_many">%1$d usuarios</string>
+  <string name="Users_other">%1$d usuarios</string>
+  <string name="Times_zero">%1$d vegaes</string>
+  <string name="Times_one">%1$d vegada</string>
+  <string name="Times_two">%1$d vegaes</string>
+  <string name="Times_few">%1$d vegaes</string>
+  <string name="Times_many">%1$d vegaes</string>
+  <string name="Times_other">%1$d vegaes</string>
+  <string name="Meters_zero">%1$d metros</string>
+  <string name="Meters_one">%1$d metru</string>
+  <string name="Meters_two">%1$d metros</string>
+  <string name="Meters_few">%1$d metros</string>
+  <string name="Meters_many">%1$d metros</string>
+  <string name="Meters_other">%1$d metros</string>
+  <string name="Stickers_zero">%1$d pegadielles</string>
+  <string name="Stickers_one">%1$d pegadiella</string>
+  <string name="Stickers_two">%1$d pegadielles</string>
+  <string name="Stickers_few">%1$d pegadielles</string>
+  <string name="Stickers_many">%1$d pegadielles</string>
+  <string name="Stickers_other">%1$d pegadielles</string>
+  <string name="Photos_zero">%1$d semeyes</string>
+  <string name="Photos_one">%1$d semeya</string>
+  <string name="Photos_two">%1$d semeyes</string>
+  <string name="Photos_few">%1$d semeyes</string>
+  <string name="Photos_many">%1$d semeyes</string>
+  <string name="Photos_other">%1$d semeyes</string>
+  <string name="LastSeenMinutes_zero">viose hai %1$d minutos</string>
+  <string name="LastSeenMinutes_one">viose hai %1$d minutu</string>
+  <string name="LastSeenMinutes_two">viose hai %1$d minutos</string>
+  <string name="LastSeenMinutes_few">viose hai %1$d minutos</string>
+  <string name="LastSeenMinutes_many">viose hai %1$d minutos</string>
+  <string name="LastSeenMinutes_other">viose hai %1$d minutos</string>
+  <string name="LastSeenHours_zero">viose hai %1$d hores</string>
+  <string name="LastSeenHours_one">viose hai %1$d hora</string>
+  <string name="LastSeenHours_two">viose hai %1$d hores</string>
+  <string name="LastSeenHours_few">viose hai %1$d hores</string>
+  <string name="LastSeenHours_many">viose hai %1$d hores</string>
+  <string name="LastSeenHours_other">viose hai %1$d hores</string>
+  <!--forwarded messages-->
+  <string name="ForwardedMessage_zero">%1$d mensaxes reunviaos</string>
+  <string name="ForwardedMessage_one">Mensaxe reunviáu</string>
+  <string name="ForwardedMessage_two">%1$d mensaxes reunviaos</string>
+  <string name="ForwardedMessage_few">%1$d mensaxes reunviaos</string>
+  <string name="ForwardedMessage_many">%1$d mensaxes reunviaos</string>
+  <string name="ForwardedMessage_other">%1$d mensaxes reunviaos</string>
+  <string name="ForwardedFile_zero">%1$d ficheros reunviaos</string>
+  <string name="ForwardedFile_one">Ficheru reunviáu</string>
+  <string name="ForwardedFile_two">%1$d ficheros reunviaos</string>
+  <string name="ForwardedFile_few">%1$d ficheros reunviaos</string>
+  <string name="ForwardedFile_many">%1$d ficheros reunviaos</string>
+  <string name="ForwardedFile_other">%1$d ficheros reunviaos</string>
+  <string name="ForwardedPhoto_zero">%1$d semeyes reunviaes</string>
+  <string name="ForwardedPhoto_one">Semeya reunviada</string>
+  <string name="ForwardedPhoto_two">%1$d semeyes reunviaes</string>
+  <string name="ForwardedPhoto_few">%1$d semeyes reunviaes</string>
+  <string name="ForwardedPhoto_many">%1$d semeyes reunviaes</string>
+  <string name="ForwardedPhoto_other">%1$d semeyes reunviaes</string>
+  <string name="ForwardedVideo_zero">%1$d videos reunviaos</string>
+  <string name="ForwardedVideo_one">Videu reunviáu</string>
+  <string name="ForwardedVideo_two">%1$d videos reunviaos</string>
+  <string name="ForwardedVideo_few">%1$d videos reunviaos</string>
+  <string name="ForwardedVideo_many">%1$d videos reunviaos</string>
+  <string name="ForwardedVideo_other">%1$d videos reunviaos</string>
+  <string name="ForwardedMusic_zero">%1$d pistes reunviaes</string>
+  <string name="ForwardedMusic_one">Pista reunviada</string>
+  <string name="ForwardedMusic_two">%1$d pistes reunviaes</string>
+  <string name="ForwardedMusic_few">%1$d pistes reunviaes</string>
+  <string name="ForwardedMusic_many">%1$d pistes reunviaes</string>
+  <string name="ForwardedMusic_other">%1$d pistes reunviaes</string>
+  <string name="ForwardedAudio_zero">%1$d mensaxes de voz reunviaos</string>
+  <string name="ForwardedAudio_one">Mensaxes de voz reunviaos</string>
+  <string name="ForwardedAudio_two">%1$d mensaxes de voz reunviaos</string>
+  <string name="ForwardedAudio_few">%1$d mensaxes de voz reunviaos</string>
+  <string name="ForwardedAudio_many">%1$d mensaxes de voz reunviaos</string>
+  <string name="ForwardedAudio_other">%1$d mensaxes de voz reunviaos</string>
+  <string name="ForwardedLocation_zero">%1$d allugamientos reunviaos</string>
+  <string name="ForwardedLocation_one">Allugamientu reunviáu</string>
+  <string name="ForwardedLocation_two">%1$d allugamientos reunviaos</string>
+  <string name="ForwardedLocation_few">%1$d allugamientos reunviaos</string>
+  <string name="ForwardedLocation_many">%1$d allugamientos reunviaos</string>
+  <string name="ForwardedLocation_other">%1$d allugamientos reunviaos</string>
+  <string name="ForwardedContact_zero">%1$d contautos reunviaos</string>
+  <string name="ForwardedContact_one">Contautu reunviáu</string>
+  <string name="ForwardedContact_two">%1$d contautos reunviaos</string>
+  <string name="ForwardedContact_few">%1$d contautos reunviaos</string>
+  <string name="ForwardedContact_many">%1$d contautos reunviaos</string>
+  <string name="ForwardedContact_other">%1$d contautos reunviaos</string>
+  <string name="ForwardedSticker_zero">%1$d pegadielles reunviaes</string>
+  <string name="ForwardedSticker_one">Pegadiella reunviada</string>
+  <string name="ForwardedSticker_two">%1$d pegadielles reunviaes</string>
+  <string name="ForwardedSticker_few">%1$d pegadielles reunviaes</string>
+  <string name="ForwardedSticker_many">%1$d pegadielles reunviaes</string>
+  <string name="ForwardedSticker_other">%1$d pegadielles reunviaes</string>
+  <string name="AndOther_zero">y otros %1$d</string>
+  <string name="AndOther_one">y %1$d más</string>
+  <string name="AndOther_two">y otros %1$d</string>
+  <string name="AndOther_few">y otros %1$d</string>
+  <string name="AndOther_many">y otros %1$d</string>
+  <string name="AndOther_other">y otros %1$d</string>
+  <!--date formatters-->
+  <string name="formatterMonthYear">MMMM yyyy</string>
+  <string name="formatterMonth">dd \'de\' MMM</string>
+  <string name="formatterYear">dd.MM.yy</string>
+  <string name="formatterYearMax">dd.MM.yyyy</string>
+  <string name="chatDate">d \'de\' MMMM</string>
+  <string name="chatFullDate">d \'de\' MMMM \'de\' yyyy</string>
+  <string name="formatterWeek">EEE</string>
+  <string name="formatterDay24H">HH:mm</string>
+  <string name="formatterDay12H">h:mm a</string>
+  <string name="formatDateAtTime">%1$s a les %2$s</string>
+</resources>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index 444570aed..84bd32693 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -42,7 +42,7 @@
     <!--ACTION BAR-->
 
     <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
-        <item name="android:background">#ff54759e</item>
+        <item name="android:background">#ff527da3</item>
         <item name="android:logo">@drawable/transparent</item>
         <item name="android:title">""</item>
     </style>
@@ -77,4 +77,14 @@
         <item name="android:windowExitAnimation">@anim/no_animation</item>
     </style>
 
+    <style name="TransparentDialog" parent="@android:style/Theme.Dialog">
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:background">@null</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowIsFloating">true</item>
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowFullscreen">false</item>
+    </style>
+
 </resources>
diff --git a/build.gradle b/build.gradle
index 26aaecfb0..7f37cedee 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,9 +1,11 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 buildscript {
     repositories {
+        jcenter()
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.5.0'
+        classpath 'com.android.tools.build:gradle:2.1.0-beta3'
+        classpath 'com.google.gms:google-services:2.1.0-alpha3'
     }
 }
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 01520498d..08f287cfb 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,19 @@
-RELEASE_STORE_PASSWORD=password
+## Project-wide Gradle settings.
+#
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+#
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+#
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+#Sat Mar 12 05:53:50 MSK 2016
+RELEASE_KEY_PASSWORD=password
 RELEASE_KEY_ALIAS=alias
-RELEASE_KEY_PASSWORD=password
\ No newline at end of file
+RELEASE_STORE_PASSWORD=password
+android.useDeprecatedNdk=true
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 89ecdcf96..b0b8557e8 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Jun 16 02:56:07 KRAT 2015
+#Fri Dec 04 13:44:40 MSK 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-all.zip
