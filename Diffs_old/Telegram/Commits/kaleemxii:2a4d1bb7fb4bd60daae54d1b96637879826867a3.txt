diff --git a/TMessagesProj/src/main/java/DataSchema/Admin.java b/TMessagesProj/src/main/java/DataSchema/Admin.java
new file mode 100644
index 000000000..85fc2458e
--- /dev/null
+++ b/TMessagesProj/src/main/java/DataSchema/Admin.java
@@ -0,0 +1,31 @@
+package DataSchema;
+
+/**
+ * Created by gaukumar on 30-01-2016.
+ */
+public class Admin {
+    private String userId;
+
+    private String userTag;
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getUserTag() {
+        return userTag;
+    }
+
+    public void setUserTag(String userTag) {
+        this.userTag = userTag;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelInfo [userId = " + userId + ", userTag = " + userTag + "]";
+    }
+}
diff --git a/TMessagesProj/src/main/java/DataSchema/ChannelInfo.java b/TMessagesProj/src/main/java/DataSchema/ChannelInfo.java
new file mode 100644
index 000000000..d1c54ec75
--- /dev/null
+++ b/TMessagesProj/src/main/java/DataSchema/ChannelInfo.java
@@ -0,0 +1,53 @@
+package DataSchema;
+
+/**
+ * Created by gaukumar on 30-01-2016.
+ */
+public class ChannelInfo {
+    private Geofence geofence;
+
+    //private User users;
+
+    private Admin admin;
+
+    private String channelID;
+
+    public Geofence getGeofence() {
+        return geofence;
+    }
+
+    public void setGeofence(Geofence geofence) {
+        this.geofence = geofence;
+    }
+
+//    public User getUsers ()
+//    {
+//        return users;
+//    }
+//
+//    public void setUsers (User users)
+//    {
+//        this.users = users;
+//    }
+
+    public Admin getAdmin() {
+        return admin;
+    }
+
+    public void setAdmin(Admin admin) {
+        this.admin = admin;
+    }
+
+    public String getChannelID() {
+        return channelID;
+    }
+
+    public void setChannelID(String channelID) {
+        this.channelID = channelID;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelInfo [geofence = " + geofence + ", admin = " + admin + ", channelID = " + channelID + "]";
+    }
+}
diff --git a/TMessagesProj/src/main/java/DataSchema/Coordinates.java b/TMessagesProj/src/main/java/DataSchema/Coordinates.java
new file mode 100644
index 000000000..9be600327
--- /dev/null
+++ b/TMessagesProj/src/main/java/DataSchema/Coordinates.java
@@ -0,0 +1,31 @@
+package DataSchema;
+
+/**
+ * Created by gaukumar on 30-01-2016.
+ */
+public class Coordinates {
+    private String longitude;
+
+    private String latitude;
+
+    public String getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(String longitude) {
+        this.longitude = longitude;
+    }
+
+    public String getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(String latitude) {
+        this.latitude = latitude;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelInfo [longitude = " + longitude + ", latitude = " + latitude + "]";
+    }
+}
diff --git a/TMessagesProj/src/main/java/DataSchema/Geofence.java b/TMessagesProj/src/main/java/DataSchema/Geofence.java
index fab1fe821..9302d8e63 100644
--- a/TMessagesProj/src/main/java/DataSchema/Geofence.java
+++ b/TMessagesProj/src/main/java/DataSchema/Geofence.java
@@ -4,15 +4,38 @@
  * Created by shverm on 1/29/2016.
  */
 public class Geofence {
-    public GeoCordinates leftBottom;
-    public GeoCordinates rightBottom;
-    public GeoCordinates leftTop;
-    public GeoCordinates rightTop;
-
-    public Geofence(GeoCordinates leftBottom, GeoCordinates rightBottom, GeoCordinates leftTop, GeoCordinates rightTop) {
-        this.leftBottom = leftBottom;
-        this.rightBottom = rightBottom;
-        this.leftTop = leftTop;
-        this.rightTop = rightTop;
+    private String[] constant;
+
+    private String[] multiple;
+
+    private Coordinates[] coordinates;
+
+    public String[] getConstant() {
+        return constant;
+    }
+
+    public void setConstant(String[] constant) {
+        this.constant = constant;
+    }
+
+    public String[] getMultiple() {
+        return multiple;
+    }
+
+    public void setMultiple(String[] multiple) {
+        this.multiple = multiple;
+    }
+
+    public Coordinates[] getCoordinates() {
+        return coordinates;
+    }
+
+    public void setCoordinates(Coordinates[] coordinates) {
+        this.coordinates = coordinates;
+    }
+
+    @Override
+    public String toString() {
+        return "ChannelInfo [constant = " + constant + ", multiple = " + multiple + ", coordinates = " + coordinates + "]";
     }
 }
diff --git a/TMessagesProj/src/main/java/DataSchema/ServerResponseData.java b/TMessagesProj/src/main/java/DataSchema/ServerResponseData.java
new file mode 100644
index 000000000..ef8dba5ab
--- /dev/null
+++ b/TMessagesProj/src/main/java/DataSchema/ServerResponseData.java
@@ -0,0 +1,16 @@
+package DataSchema;
+
+/**
+ * Created by gaukumar on 30-01-2016.
+ */
+public class ServerResponseData {
+    private ChannelInfo[] channels;
+
+    public ChannelInfo[] getChannels() {
+        return channels;
+    }
+
+    public void setChannels(ChannelInfo[] channels) {
+        this.channels = channels;
+    }
+}
diff --git a/TMessagesProj/src/main/java/DataSchema/User.java b/TMessagesProj/src/main/java/DataSchema/User.java
index 18a2df1c1..90cfc5da1 100644
--- a/TMessagesProj/src/main/java/DataSchema/User.java
+++ b/TMessagesProj/src/main/java/DataSchema/User.java
@@ -4,11 +4,28 @@
  * Created by shverm on 1/29/2016.
  */
 public class User {
-    public int userId;
-    public String userTag;
+    private String userId;
 
-    public User(int userId, String userTag) {
+    private String userTag;
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
         this.userId = userId;
+    }
+
+    public String getUserTag() {
+        return userTag;
+    }
+
+    public void setUserTag(String userTag) {
         this.userTag = userTag;
     }
+
+    @Override
+    public String toString() {
+        return "ChannelInfo [userId = " + userId + ", userTag = " + userTag + "]";
+    }
 }
diff --git a/TMessagesProj/src/main/java/Utilities/Utilities.java b/TMessagesProj/src/main/java/Utilities/Utilities.java
index dcfb52509..77daa9592 100644
--- a/TMessagesProj/src/main/java/Utilities/Utilities.java
+++ b/TMessagesProj/src/main/java/Utilities/Utilities.java
@@ -4,11 +4,6 @@
 import java.util.List;
 
 import DataSchema.Channel;
-import DataSchema.GeoCordinates;
-import DataSchema.Geofence;
-import DataSchema.User;
-
-import static java.lang.Math.*;
 
 /**
  * Created by shverm on 1/29/2016.
@@ -16,30 +11,30 @@
 public class Utilities {
 
     public List<Channel> buildDummyData() {
-        GeoCordinates microsoftLeftBottom = new GeoCordinates(17.42726335237322, 78.34141373634338);
-        GeoCordinates microsoftLeftTop = new GeoCordinates(17.429023997842013, 78.33863496780396);
-        GeoCordinates microsoftRightTop = new GeoCordinates(17.43590263591793, 78.34269046783447);
-        GeoCordinates microsoftRightBottom = new GeoCordinates(17.43414205681682, 78.34575891494751);
-
-        GeoCordinates mprLeftTop = new GeoCordinates(17.429554363369927, 78.34092993289232);
-        GeoCordinates mprLeftBottom = new GeoCordinates(17.42954476690242, 78.34095273166895);
-        GeoCordinates mprRightTop = new GeoCordinates(17.429711745365164, 78.34103118628263);
-        GeoCordinates mprRightBottom = new GeoCordinates(17.429697670558106, 78.34106404334307);
-
-
-
-        Geofence microsoftGeofence = new Geofence(microsoftLeftBottom, microsoftLeftTop, microsoftRightTop, microsoftRightBottom);
-        Geofence mprGeofence = new Geofence(mprLeftBottom, mprLeftTop, mprRightTop, mprRightBottom);
-
-        User microsoftAdmin = new User(1, "admin");
-        User mprAdmin = new User(2, "admin");
-
-        Channel microsoftChannel = new Channel(microsoftGeofence, microsoftAdmin, 1);
-        Channel mprChannel = new Channel(mprGeofence, mprAdmin, 2);
-
+//        GeoCordinates microsoftLeftBottom = new GeoCordinates(17.42726335237322, 78.34141373634338);
+//        GeoCordinates microsoftLeftTop = new GeoCordinates(17.429023997842013, 78.33863496780396);
+//        GeoCordinates microsoftRightTop = new GeoCordinates(17.43590263591793, 78.34269046783447);
+//        GeoCordinates microsoftRightBottom = new GeoCordinates(17.43414205681682, 78.34575891494751);
+//
+//        GeoCordinates mprLeftTop = new GeoCordinates(17.429554363369927, 78.34092993289232);
+//        GeoCordinates mprLeftBottom = new GeoCordinates(17.42954476690242, 78.34095273166895);
+//        GeoCordinates mprRightTop = new GeoCordinates(17.429711745365164, 78.34103118628263);
+//        GeoCordinates mprRightBottom = new GeoCordinates(17.429697670558106, 78.34106404334307);
+//
+//
+//
+//        Geofence microsoftGeofence = new Geofence(microsoftLeftBottom, microsoftLeftTop, microsoftRightTop, microsoftRightBottom);
+//        Geofence mprGeofence = new Geofence(mprLeftBottom, mprLeftTop, mprRightTop, mprRightBottom);
+//
+//        User microsoftAdmin = new User(1, "admin");
+//        User mprAdmin = new User(2, "admin");
+//
+//        Channel microsoftChannel = new Channel(microsoftGeofence, microsoftAdmin, 1);
+//        Channel mprChannel = new Channel(mprGeofence, mprAdmin, 2);
+//
         List<Channel> channelList = new ArrayList<Channel>();
-        channelList.add(microsoftChannel);
-        channelList.add(mprChannel);
+//        channelList.add(microsoftChannel);
+//        channelList.add(mprChannel);
         return channelList;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
index fbb64884f..04eb78197 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -7,18 +7,25 @@
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.support.v4.app.ActivityCompat;
 import android.util.Log;
 import android.widget.Toast;
 
+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
+import org.springframework.web.client.RestTemplate;
+
+import DataSchema.ServerResponseData;
+
 /**
  * Created by gaukumar on 30-01-2016.
  */
 public class LocationService extends Service {
     public static final String BROADCAST_ACTION = "Hello World";
     private static final int HALF_MINUTE = 1000 * 30 * 1;
+    private static String restApiUrl;
     public LocationManager locationManager;
     public MyLocationListener listener;
     public Location previousBestLocation = null;
@@ -26,6 +33,21 @@
     Intent intent;
     int counter = 0;
 
+    public static Thread performOnBackgroundThread(final Runnable runnable) {
+        final Thread t = new Thread() {
+            @Override
+            public void run() {
+                try {
+                    runnable.run();
+                } finally {
+
+                }
+            }
+        };
+        t.start();
+        return t;
+    }
+
     @Override
     public void onCreate() {
         super.onCreate();
@@ -90,7 +112,6 @@ protected boolean isBetterLocation(Location location, Location currentBestLocati
         return false;
     }
 
-
     /** Checks whether two providers are the same */
     private boolean isSameProvider(String provider1, String provider2) {
         if (provider1 == null) {
@@ -99,7 +120,6 @@ private boolean isSameProvider(String provider1, String provider2) {
         return provider1.equals(provider2);
     }
 
-
     @Override
     public void onDestroy() {
         // handler.removeCallbacks(sendUpdatesToUI);
@@ -111,21 +131,6 @@ public void onDestroy() {
         locationManager.removeUpdates(listener);
     }
 
-    public static Thread performOnBackgroundThread(final Runnable runnable) {
-        final Thread t = new Thread() {
-            @Override
-            public void run() {
-                try {
-                    runnable.run();
-                } finally {
-
-                }
-            }
-        };
-        t.start();
-        return t;
-    }
-
     public class MyLocationListener implements LocationListener
     {
 
@@ -135,10 +140,15 @@ public void onLocationChanged(final Location loc)
             if(isBetterLocation(loc, previousBestLocation)) {
                 loc.getLatitude();
                 loc.getLongitude();
-                Toast.makeText( getApplicationContext(), "Changed. Lat: "+loc.getLatitude()+", Long: "+loc.getLongitude(), Toast.LENGTH_SHORT).show();
+                int userId = UserConfig.getClientUserId();
+                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=2&lat=17.429549&long=78.3411581";
+                //"http://botchaapis.appspot.com/getchannels?userId=1&lat="+loc.getLatitude()+"&long="+loc.getLongitude();
+//                final AsyncTask<Void, Void, ServerResponseData> execute;
+//                execute = new HttpRequestTask().execute();
                 intent.putExtra("Latitude", loc.getLatitude());
                 intent.putExtra("Longitude", loc.getLongitude());
                 intent.putExtra("Provider", loc.getProvider());
+                Toast.makeText(getApplicationContext(), "Changed. UserId: " + userId + ", Lat: " + loc.getLatitude() + ", Long: " + loc.getLongitude(), Toast.LENGTH_SHORT).show();
                 sendBroadcast(intent);
             }
         }
@@ -159,4 +169,27 @@ public void onStatusChanged(String provider, int status, Bundle extras)
         }
 
     }
+
+    private class HttpRequestTask extends AsyncTask<Void, Void, ServerResponseData> {
+        @Override
+        protected ServerResponseData doInBackground(Void... params) {
+            try {
+                final String url = restApiUrl;
+                RestTemplate restTemplate = new RestTemplate();
+                restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
+                ServerResponseData greeting = restTemplate.getForObject(url, ServerResponseData.class);
+                return greeting;
+            } catch (Exception e) {
+                Log.e("Http error", e.getMessage(), e);
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(ServerResponseData greeting) {
+            Toast.makeText(getApplicationContext(), "Id: " + greeting.getChannels()[0].getAdmin(), Toast.LENGTH_SHORT).show();
+        }
+
+    }
 }
