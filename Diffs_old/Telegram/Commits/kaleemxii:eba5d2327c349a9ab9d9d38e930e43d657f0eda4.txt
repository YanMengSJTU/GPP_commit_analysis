diff --git a/TMessagesProj/src/main/java/BotchaHelper/Helpers.java b/TMessagesProj/src/main/java/BotchaHelper/Helpers.java
index bb00b6d73..1c33769c3 100644
--- a/TMessagesProj/src/main/java/BotchaHelper/Helpers.java
+++ b/TMessagesProj/src/main/java/BotchaHelper/Helpers.java
@@ -1,10 +1,18 @@
 package BotchaHelper;
 
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.AsyncTask;
 import android.util.Log;
 
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.client.RestTemplate;
+import org.telegram.messenger.ApplicationLoader;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
 
 import DataSchema.Greeting;
 import DataSchema.Response;
@@ -72,4 +80,127 @@ private static String giveChannelWithToken(long id) {
 
         return "Empty";
     }
+
+    public static boolean isChannelAllowed(long id) {
+        List<Long> allowedIDs = getAllowedIDs();
+        boolean flag1 = false;
+        boolean flag2 = false;
+        for(int i = 0; i <allowedIDs.size(); i++) {
+            if (id == allowedIDs.get(i)) {
+                flag1 = true;
+            }
+        }
+
+        List<Long> allowedIDs2 = getAllowedIDsGeoSpatial();
+        for(int i = 0; i <allowedIDs2.size(); i++) {
+            if (id == allowedIDs2.get(i)) {
+                flag2 = true;
+            }
+        }
+
+        return flag1 && flag2;
+        //return id == 135483832 || id == 171135579 || id == 149007104 || id == 192493113 || id == 175641240;
+    }
+
+    public static boolean isChannelRegistered(long channelID) {
+        List<Long> allowedIDs = getAllowedIDs();
+        boolean flag1 = false;
+        for(int i = 0; i <allowedIDs.size(); i++) {
+            if (channelID == allowedIDs.get(i)) {
+                flag1 = true;
+            }
+        }
+
+        return flag1;
+    }
+
+    public static List<Long> getAllowedIDs() {
+        List<Long> returnList = new ArrayList<Long>();
+        /*
+        saveToSharedPreference(135483832L);
+        saveToSharedPreference(171135579L);
+        saveToSharedPreference(149007104L);
+        saveToSharedPreference(192493113L);
+        saveToSharedPreference(175641240L);
+        */
+        /*returnList.add(135483832L);
+        returnList.add(171135579L);
+        returnList.add(149007104L);
+        returnList.add(192493113L);
+        returnList.add(175641240L);*/
+        SharedPreferences sharedPref = ApplicationLoader.applicationContext.getSharedPreferences("Notifications",(Context.MODE_PRIVATE));
+        String ids = sharedPref.getString("registeredIDs", "");
+        if(ids.equals("")) {
+            saveToRegisteredChannels(135483832L);
+            saveToRegisteredChannels(171135579L);
+        }
+        ids = sharedPref.getString("registeredIDs", "");
+        String array[] = ids.split(",");
+        for (String anArray : array) {
+            if (!anArray.equals("")) {
+                returnList.add(Long.parseLong(anArray, 10));
+            }
+        }
+        return returnList;
+    }
+
+
+    public static List<Long> getAllowedIDsGeoSpatial() {
+        List<Long> returnList = new ArrayList<Long>();
+        SharedPreferences sharedPref = ApplicationLoader.applicationContext.getSharedPreferences("Notifications",(Context.MODE_PRIVATE));
+        String ids = sharedPref.getString("geoAllowed2", "");
+        if(ids.equals("")) {
+            List<Long> tempList = new ArrayList<Long>();
+            tempList.add(135483832L);
+            tempList.add(171135579L);
+            tempList.add(149007104L);
+            tempList.add(192493113L);
+            tempList.add(175641240L);
+            updateGeoAllowedChannels(tempList);
+        }
+        ids = sharedPref.getString("geoAllowed2", "");
+        Log.i("Botcha debug second", ids);
+        String array[] = ids.split(",");
+        for (String anArray : array) {
+            if (!anArray.equals("")) {
+                returnList.add(Long.parseLong(anArray, 10));
+            }
+        }
+        return returnList;
+    }
+
+
+    public static void saveToRegisteredChannels(long id) {
+        SharedPreferences sharedPref = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", (Context.MODE_PRIVATE));
+        String ids = sharedPref.getString("registeredIDs", "");
+        SharedPreferences.Editor editor = sharedPref.edit();
+        if (ids.equals("")) {
+            editor.putString("registeredIDs", Long.toString(id));
+            editor.commit();
+        } else {
+            editor.putString("registeredIDs", ids + "," + Long.toString(id));
+            editor.commit();
+        }
+    }
+
+    public static void removeFromRegisteredChannels(long id) {
+        SharedPreferences sharedPref = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", (Context.MODE_PRIVATE));
+        String ids = sharedPref.getString("registeredIDs", "");
+        SharedPreferences.Editor editor = sharedPref.edit();
+        String result = ids.replaceAll(Long.toString(id), "");
+        editor.putString("registeredIDs",result);
+        editor.commit();
+    }
+
+    public static void updateGeoAllowedChannels(List<Long> ids) {
+        SharedPreferences sharedPref = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", (Context.MODE_PRIVATE));
+        SharedPreferences.Editor editor = sharedPref.edit();
+        String result="";
+        for (int i= 0; i< ids.size(); i++) {
+            result = result + ids.get(i).toString() + ",";
+        }
+        editor.putString("geoAllowed2",result);
+        Log.i("Botcha debug", result);
+        editor.commit();
+    }
 }
diff --git a/TMessagesProj/src/main/java/DataSchema/Channel.java b/TMessagesProj/src/main/java/DataSchema/Channel.java
index 4fc496ed4..61e5a3c41 100644
--- a/TMessagesProj/src/main/java/DataSchema/Channel.java
+++ b/TMessagesProj/src/main/java/DataSchema/Channel.java
@@ -11,13 +11,24 @@
     public User admin;
     public String channelID;
     public String channelTag;
-    private transient HashMap<Integer, User> usersById;
+    public String summary;
+
+    public Channel() {
+
+    }
 
     public Channel(Geofence geofence, User admin, String channelID) {
         this.geofence = geofence;
         this.admin = admin;
         this.channelID = channelID;
-        usersById = new HashMap<>();
+    }
+
+    public String getSummary() {
+        return summary;
+    }
+
+    public void setSummary(String summary) {
+        this.summary = summary;
     }
 
     public User getAdmin() {
@@ -52,15 +63,4 @@ public void setChannelTag(String channelTag) {
         this.channelTag = channelTag;
     }
 
-    public Collection<User> getUsers() {
-        return usersById.values();
-    }
-
-    public void addUser(User user) {
-        usersById.put(user.userId, user);
-    }
-
-    public void removeUser(String userId) {
-        usersById.remove(userId);
-    }
 }
diff --git a/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
index 9dd9dffda..788372c24 100644
--- a/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
+++ b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
@@ -4,6 +4,9 @@
     public double latitude;
     public double longitude;
 
+    public GeoCoordinates() {
+
+    }
     public GeoCoordinates(double latitude, double longitude) {
         this.latitude = latitude;
         this.longitude = longitude;
diff --git a/TMessagesProj/src/main/java/DataSchema/Geofence.java b/TMessagesProj/src/main/java/DataSchema/Geofence.java
index 3f66f7f5c..e67caaaca 100644
--- a/TMessagesProj/src/main/java/DataSchema/Geofence.java
+++ b/TMessagesProj/src/main/java/DataSchema/Geofence.java
@@ -8,6 +8,10 @@
     public List<GeoCoordinates> coordinates;
     private transient double[] constant, multiple;
 
+    public Geofence() {
+
+    }
+
     public Geofence(GeoCoordinates leftBottom, GeoCoordinates rightBottom, GeoCoordinates leftTop, GeoCoordinates rightTop) {
         coordinates = new ArrayList<>();
 
diff --git a/TMessagesProj/src/main/java/DataSchema/User.java b/TMessagesProj/src/main/java/DataSchema/User.java
index 6b7ceba4e..3d11ad60c 100644
--- a/TMessagesProj/src/main/java/DataSchema/User.java
+++ b/TMessagesProj/src/main/java/DataSchema/User.java
@@ -7,6 +7,10 @@
     public int userId;
     public String userTag;
 
+    public User() {
+
+    }
+
     public User(int userId, String userTag) {
         this.userId = userId;
         this.userTag = userTag;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
index b58b7faf3..b8c64c2db 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -1,5 +1,6 @@
 package org.telegram.messenger;
 
+import android.app.PendingIntent;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
@@ -7,15 +8,20 @@
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
+import android.media.AudioManager;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.IBinder;
+import android.provider.Settings;
 import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
 import android.widget.Toast;
 
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.client.RestTemplate;
+import org.telegram.ui.LaunchActivity;
 
 import java.util.Arrays;
 import java.util.List;
@@ -63,8 +69,8 @@ public void onStart(Intent intent, int startId) {
         if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
             return;
         }
-        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 4000, 5, listener);
-        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 4000, 5, listener);
+        //locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 30000, 5, listener);
+        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 30000, 5, listener);
     }
 
     @Override
@@ -140,10 +146,13 @@ public void onLocationChanged(final Location loc)
         {
 
             if(isBetterLocation(loc, previousBestLocation)) {
+                MessagesController.getInstance().isNewChannelsAvailable = false;
                 loc.getLatitude();
                 loc.getLongitude();
                 int userId = UserConfig.getClientUserId();
-                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=2&lat=17.429549&long=78.3411581";
+                String userTag = UserConfig.getCurrentUser().first_name;
+                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=" + userId + "&userTag=" + userTag + "&lat=" + loc.getLatitude() + "&long=" + loc.getLongitude();
+                //"http://botchaapis.appspot.com/getchannels?userId=186345694&userTag=Gaurav&lat=17.429549&long=78.3411581";
                 //"http://botchaapis.appspot.com/getchannels?userId=1&lat="+loc.getLatitude()+"&long="+loc.getLongitude();
                 final AsyncTask<Void, Void, List<Channel>> execute;
                 execute = new HttpRequestTask().execute();
@@ -152,6 +161,7 @@ public void onLocationChanged(final Location loc)
                 intent.putExtra("Longitude", loc.getLongitude());
                 intent.putExtra("Provider", loc.getProvider());
                 Toast.makeText(getApplicationContext(), "Changed. UserId: " + userId + ", Lat: " + loc.getLatitude() + ", Long: " + loc.getLongitude(), Toast.LENGTH_SHORT).show();
+
                 sendBroadcast(intent);
             }
         }
@@ -192,7 +202,46 @@ public void onStatusChanged(String provider, int status, Bundle extras)
         protected void onPostExecute(List<Channel> channels) {
             if (channels == null || channels.size() == 0)
                 return;
-            Toast.makeText(getApplicationContext(), "Id: " + channels.get(0).getChannelTag(), Toast.LENGTH_SHORT).show();
+            else {
+                MessagesController.getInstance().channelIds.clear();
+                MessagesController.getInstance().channelTags.clear();
+                for (int i = 0; i < channels.size(); i++) {
+                    MessagesController.getInstance().channelIds.add(channels.get(i).getChannelID());
+                    MessagesController.getInstance().channelTags.add(channels.get(i).getChannelTag());
+                }
+                showScreenNotification();
+            }
+            //Toast.makeText(getApplicationContext(), "Id: " + channels.get(0).getChannelTag(), Toast.LENGTH_SHORT).show();
+        }
+
+        public void showScreenNotification() {
+            if (MessagesController.getInstance().channelTags.size() != 0) {
+                StringBuffer channelNamesBuffer = new StringBuffer();
+                for (int i = 0; i < MessagesController.getInstance().channelTags.size(); i++) {
+                    channelNamesBuffer.append(MessagesController.getInstance().channelTags.get(i));
+                }
+                String channelNames = channelNamesBuffer.toString();
+                NotificationCompat.Builder mBuilder;
+                Intent localIntent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+                localIntent.setFlags(32768);
+                PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, localIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                        .setContentTitle("New channels found")
+                        .setSmallIcon(R.drawable.notification)
+                        .setAutoCancel(true)
+                        .setNumber(1)
+                        .setContentIntent(contentIntent)
+                        .setGroup("messages")
+                        .setGroupSummary(true)
+                        .setColor(0xff2ca5e0);
+                mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
+                mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
+                mBuilder.setContentText("New channels available: " + channelNames);
+                mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
+                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
+                notificationManager.notify(1, mBuilder.build());
+                MessagesController.getInstance().isNewChannelsAvailable = true;
+            }
         }
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 769784be6..12c7dd652 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -18,6 +18,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.util.Base64;
+import android.util.Log;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 import android.widget.Toast;
@@ -43,17 +44,27 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Semaphore;
 
-public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
-
-    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
-    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
-    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
-
-    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
+import BotchaHelper.Helpers;
 
-    private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
+public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
 
+    public static final int UPDATE_MASK_NAME = 1;
+    public static final int UPDATE_MASK_AVATAR = 2;
+    public static final int UPDATE_MASK_STATUS = 4;
+    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
+    public static final int UPDATE_MASK_CHAT_NAME = 16;
+    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
+    public static final int UPDATE_MASK_USER_PRINT = 64;
+    public static final int UPDATE_MASK_USER_PHONE = 128;
+    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
+    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
+    public static final int UPDATE_MASK_PHONE = 1024;
+    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
+    public static final int UPDATE_MASK_SEND_STATE = 4096;
+    public static final int UPDATE_MASK_CHANNEL = 8192;
+    public static final int UPDATE_MASK_CHAT_ADMINS = 16384;
+    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
+    private static volatile MessagesController Instance = null;
     public ArrayList<TLRPC.Dialog> dialogs = new ArrayList<>();
     public ArrayList<TLRPC.Dialog> dialogsServerOnly = new ArrayList<>();
     public ArrayList<TLRPC.Dialog> dialogsGroupsOnly = new ArrayList<>();
@@ -67,23 +78,40 @@
     public HashMap<Long, Integer> printingStringsTypes = new HashMap<>();
     public HashMap<Integer, HashMap<Long, Boolean>> sendingTypings = new HashMap<>();
     public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
+    public boolean isNewChannelsAvailable = false;
+    public boolean loadingBlockedUsers = false;
+    public ArrayList<Integer> blockedUsers = new ArrayList<>();
+    public ArrayList<String> channelIds = new ArrayList<>();
+    public ArrayList<String> channelTags = new ArrayList<>();
+    public boolean loadingDialogs = false;
+    public boolean dialogsEndReached = false;
+    public boolean gettingDifference = false;
+    public boolean updatingState = false;
+    public boolean firstGettingTask = false;
+    public boolean registeringForPush = false;
+    public boolean enableJoined = true;
+    public int fontSize = AndroidUtilities.dp(16);
+    public int maxGroupCount = 200;
+    public int maxBroadcastCount = 100;
+    public int maxMegagroupCount = 1000;
+    public int minGroupConvertSize = 200;
+    public int groupBigSize;
+    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
+    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
+    private HashMap<Integer, TLRPC.ExportedChatInvite> exportedChats = new HashMap<>();
     private int lastPrintingStringCount = 0;
-
     private SparseIntArray shortPollChannels = new SparseIntArray();
     private SparseIntArray needShortPollChannels = new SparseIntArray();
-
-    public boolean loadingBlockedUsers = false;
-    public ArrayList<Integer> blockedUsers = new ArrayList<>();
-
     private SparseArray<ArrayList<Integer>> channelViewsToSend = new SparseArray<>();
     private SparseArray<ArrayList<Integer>> channelViewsToReload = new SparseArray<>();
     private long lastViewsCheckTime;
-
     private HashMap<Integer, ArrayList<TLRPC.Updates>> updatesQueueChannels = new HashMap<>();
     private HashMap<Integer, Long> updatesStartWaitTimeChannels = new HashMap<>();
     private HashMap<Integer, Integer> channelsPts = new HashMap<>();
     private HashMap<Integer, Boolean> gettingDifferenceChannels = new HashMap<>();
-
     private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
     private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
     private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
@@ -96,83 +124,19 @@
     private ArrayList<Integer> loadingFullParticipants = new ArrayList<>();
     private ArrayList<Integer> loadedFullParticipants = new ArrayList<>();
     private ArrayList<Integer> loadedFullChats = new ArrayList<>();
-
     private HashMap<Long, ArrayList<Integer>> reloadingMessages = new HashMap<>();
-
     private boolean gettingNewDeleteTask = false;
     private int currentDeletingTaskTime = 0;
     private ArrayList<Integer> currentDeletingTaskMids = null;
     private Runnable currentDeleteTaskRunnable = null;
-
-    public boolean loadingDialogs = false;
     private boolean migratingDialogs = false;
-    public boolean dialogsEndReached = false;
-    public boolean gettingDifference = false;
-    public boolean updatingState = false;
-    public boolean firstGettingTask = false;
-    public boolean registeringForPush = false;
-
     private long lastStatusUpdateTime = 0;
     private int statusRequest = 0;
     private int statusSettingState = 0;
     private boolean offlineSent = false;
     private String uploadingAvatar = null;
-
-    public boolean enableJoined = true;
-    public int fontSize = AndroidUtilities.dp(16);
-    public int maxGroupCount = 200;
-    public int maxBroadcastCount = 100;
-    public int maxMegagroupCount = 1000;
-    public int minGroupConvertSize = 200;
-    public int groupBigSize;
     private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
 
-    private class UserActionUpdatesSeq extends TLRPC.Updates {
-
-    }
-
-    private class UserActionUpdatesPts extends TLRPC.Updates {
-
-    }
-
-    public static final int UPDATE_MASK_NAME = 1;
-    public static final int UPDATE_MASK_AVATAR = 2;
-    public static final int UPDATE_MASK_STATUS = 4;
-    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
-    public static final int UPDATE_MASK_CHAT_NAME = 16;
-    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
-    public static final int UPDATE_MASK_USER_PRINT = 64;
-    public static final int UPDATE_MASK_USER_PHONE = 128;
-    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
-    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
-    public static final int UPDATE_MASK_PHONE = 1024;
-    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
-    public static final int UPDATE_MASK_SEND_STATE = 4096;
-    public static final int UPDATE_MASK_CHANNEL = 8192;
-    public static final int UPDATE_MASK_CHAT_ADMINS = 16384;
-    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
-
-    public static class PrintingUser {
-        public long lastTime;
-        public int userId;
-        public TLRPC.SendMessageAction action;
-    }
-
-    private static volatile MessagesController Instance = null;
-
-    public static MessagesController getInstance() {
-        MessagesController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MessagesController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new MessagesController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
     public MessagesController() {
         ImageLoader.getInstance();
         MessagesStorage.getInstance();
@@ -210,39 +174,17 @@ public MessagesController() {
         }
     }
 
-    public void updateConfig(final TLRPC.TL_config config) {
-        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
-            @Override
-            public void run() {
-                //maxBroadcastCount = config.broadcast_size_max;
-                maxMegagroupCount = config.megagroup_size_max;
-                maxGroupCount = config.chat_size_max;
-                groupBigSize = config.chat_big_size;
-                disabledFeatures = config.disabled_features;
-
-                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putInt("maxGroupCount", maxGroupCount);
-                //editor.putInt("maxBroadcastCount", maxBroadcastCount);
-                editor.putInt("maxMegagroupCount", maxMegagroupCount);
-                editor.putInt("groupBigSize", groupBigSize);
-                try {
-                    SerializedData data = new SerializedData();
-                    data.writeInt32(disabledFeatures.size());
-                    for (TLRPC.TL_disabledFeature disabledFeature : disabledFeatures) {
-                        disabledFeature.serializeToStream(data);
-                    }
-                    String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
-                    if (string.length() != 0) {
-                        editor.putString("disabledFeatures", string);
-                    }
-                } catch (Exception e) {
-                    editor.remove("disabledFeatures");
-                    FileLog.e("tmessages", e);
+    public static MessagesController getInstance() {
+        MessagesController localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (MessagesController.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new MessagesController();
                 }
-                editor.commit();
             }
-        });
+        }
+        return localInstance;
     }
 
     public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
@@ -264,26 +206,6 @@ public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
         return true;
     }
 
-    public void addSupportUser() {
-        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
-        user.phone = "333";
-        user.id = 333000;
-        user.first_name = "Telegram";
-        user.last_name = "";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-
-        user = new TLRPC.TL_userForeign_old2();
-        user.phone = "42777";
-        user.id = 777000;
-        user.first_name = "Telegram";
-        user.last_name = "Notifications";
-        user.status = null;
-        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
-        putUser(user, true);
-    }
-
     public static TLRPC.InputUser getInputUser(TLRPC.User user) {
         if (user == null) {
             return new TLRPC.TL_inputUserEmpty();
@@ -361,6 +283,158 @@ public void addSupportUser() {
         return inputPeer;
     }
 
+    protected static void addNewGifToRecent(TLRPC.Document document, int date) {
+        ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
+        MediaController.SearchImage searchImage = new MediaController.SearchImage();
+        searchImage.type = 2;
+        searchImage.document = document;
+        searchImage.date = date;
+        searchImage.id = "" + searchImage.document.id;
+        arrayList.add(searchImage);
+        MessagesStorage.getInstance().putWebRecent(arrayList);
+    }
+
+    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
+        if (username == null || fragment == null) {
+            return;
+        }
+        TLRPC.User user = MessagesController.getInstance().getUser(username);
+        if (user != null) {
+            Bundle args = new Bundle();
+            args.putInt("user_id", user.id);
+            if (type == 0) {
+                fragment.presentFragment(new ProfileActivity(args));
+            } else {
+                fragment.presentFragment(new ChatActivity(args));
+            }
+        } else {
+            if (fragment.getParentActivity() == null) {
+                return;
+            }
+            final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
+            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+            progressDialog.setCanceledOnTouchOutside(false);
+            progressDialog.setCancelable(false);
+
+            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
+            req.username = username;
+            final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            fragment.setVisibleDialog(null);
+                            if (error == null) {
+                                TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
+                                MessagesController.getInstance().putUsers(res.users, false);
+                                MessagesController.getInstance().putChats(res.chats, false);
+                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, true);
+                                Bundle args = new Bundle();
+                                if (!res.chats.isEmpty()) {
+                                    args.putInt("chat_id", res.chats.get(0).id);
+                                } else {
+                                    args.putInt("user_id", res.users.get(0).id);
+                                }
+                                if (fragment != null) {
+                                    if (type == 0 && res.chats.isEmpty()) {
+                                        fragment.presentFragment(new ProfileActivity(args));
+                                    } else {
+                                        fragment.presentFragment(new ChatActivity(args));
+                                    }
+                                }
+                            } else {
+                                if (fragment != null && fragment.getParentActivity() != null) {
+                                    try {
+                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            }
+                        }
+                    });
+                }
+            });
+            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    ConnectionsManager.getInstance().cancelRequest(reqId, true);
+                    try {
+                        dialog.dismiss();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    if (fragment != null) {
+                        fragment.setVisibleDialog(null);
+                    }
+                }
+            });
+            fragment.setVisibleDialog(progressDialog);
+            progressDialog.show();
+        }
+    }
+
+    public void updateConfig(final TLRPC.TL_config config) {
+        AndroidUtilities.runOnUIThread(new Runnable() { //TODO use new config params
+            @Override
+            public void run() {
+                //maxBroadcastCount = config.broadcast_size_max;
+                maxMegagroupCount = config.megagroup_size_max;
+                maxGroupCount = config.chat_size_max;
+                groupBigSize = config.chat_big_size;
+                disabledFeatures = config.disabled_features;
+
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putInt("maxGroupCount", maxGroupCount);
+                //editor.putInt("maxBroadcastCount", maxBroadcastCount);
+                editor.putInt("maxMegagroupCount", maxMegagroupCount);
+                editor.putInt("groupBigSize", groupBigSize);
+                try {
+                    SerializedData data = new SerializedData();
+                    data.writeInt32(disabledFeatures.size());
+                    for (TLRPC.TL_disabledFeature disabledFeature : disabledFeatures) {
+                        disabledFeature.serializeToStream(data);
+                    }
+                    String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
+                    if (string.length() != 0) {
+                        editor.putString("disabledFeatures", string);
+                    }
+                } catch (Exception e) {
+                    editor.remove("disabledFeatures");
+                    FileLog.e("tmessages", e);
+                }
+                editor.commit();
+            }
+        });
+    }
+
+    public void addSupportUser() {
+        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
+        user.phone = "333";
+        user.id = 333000;
+        user.first_name = "Telegram";
+        user.last_name = "";
+        user.status = null;
+        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
+        putUser(user, true);
+
+        user = new TLRPC.TL_userForeign_old2();
+        user.phone = "42777";
+        user.id = 777000;
+        user.first_name = "Telegram";
+        user.last_name = "Notifications";
+        user.status = null;
+        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
+        putUser(user, true);
+    }
+
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
@@ -2471,6 +2545,15 @@ public void run() {
                         dialogsServerOnly.clear();
                         dialogsGroupsOnly.clear();
                         dialogs.addAll(dialogs_dict.values());
+                        for (int i=(dialogs.size() - 1) ; i >=0; i--) {
+                            if (!Helpers.isChannelAllowed(dialogs.get(i).id)) {
+                                dialogs.remove(i);
+                            }
+                        }
+
+                        Log.i("Botcha", "removing irrelevant dialogs");
+                        //dialogs.clear();
+
                         Collections.sort(dialogs, new Comparator<TLRPC.Dialog>() {
                             @Override
                             public int compare(TLRPC.Dialog tl_dialog, TLRPC.Dialog tl_dialog2) {
@@ -2753,6 +2836,13 @@ public void run() {
                         dialogsServerOnly.clear();
                         dialogsGroupsOnly.clear();
                         dialogs.addAll(dialogs_dict.values());
+                        Log.i("Botcha", "removing irrelevant dialogs");
+                        for (int i=(dialogs.size() - 1) ; i >=0; i--) {
+                            if (!Helpers.isChannelAllowed(dialogs.get(i).id)) {
+                                dialogs.remove(i);
+                            }
+                        }
+                        //dialogs.clear();
                         Collections.sort(dialogs, new Comparator<TLRPC.Dialog>() {
                             @Override
                             public int compare(TLRPC.Dialog dialog, TLRPC.Dialog dialog2) {
@@ -5933,17 +6023,6 @@ protected void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> me
         updateInterfaceWithMessages(uid, messages, false);
     }
 
-    protected static void addNewGifToRecent(TLRPC.Document document, int date) {
-        ArrayList<MediaController.SearchImage> arrayList = new ArrayList<>();
-        MediaController.SearchImage searchImage = new MediaController.SearchImage();
-        searchImage.type = 2;
-        searchImage.document = document;
-        searchImage.date = date;
-        searchImage.id = "" + searchImage.document.id;
-        arrayList.add(searchImage);
-        MessagesStorage.getInstance().putWebRecent(arrayList);
-    }
-
     protected void updateInterfaceWithMessages(final long uid, final ArrayList<MessageObject> messages, boolean isBroadcast) {
         if (messages == null || messages.isEmpty()) {
             return;
@@ -6008,7 +6087,12 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
                 dialog.top_message = lastMessage.getId();
                 dialog.last_message_date = lastMessage.messageOwner.date;
                 dialogs_dict.put(uid, dialog);
-                dialogs.add(dialog);
+                if (Helpers.isChannelAllowed(dialog.id)) {
+                    dialogs.add(dialog);
+                }
+
+                Log.i("Botcha", "removing irrelevant dialogs");
+                //dialogs.remove(dialog);
                 dialogMessage.put(uid, lastMessage);
                 if (lastMessage.messageOwner.to_id.channel_id == 0) {
                     dialogMessagesByIds.put(lastMessage.getId(), lastMessage);
@@ -6068,89 +6152,17 @@ public int compare(TLRPC.Dialog tl_dialog, TLRPC.Dialog tl_dialog2) {
         }
     }
 
-    public static void openByUserName(String username, final BaseFragment fragment, final int type) {
-        if (username == null || fragment == null) {
-            return;
-        }
-        TLRPC.User user = MessagesController.getInstance().getUser(username);
-        if (user != null) {
-            Bundle args = new Bundle();
-            args.putInt("user_id", user.id);
-            if (type == 0) {
-                fragment.presentFragment(new ProfileActivity(args));
-            } else {
-                fragment.presentFragment(new ChatActivity(args));
-            }
-        } else {
-            if (fragment.getParentActivity() == null) {
-                return;
-            }
-            final ProgressDialog progressDialog = new ProgressDialog(fragment.getParentActivity());
-            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
-            progressDialog.setCanceledOnTouchOutside(false);
-            progressDialog.setCancelable(false);
+    public static class PrintingUser {
+        public long lastTime;
+        public int userId;
+        public TLRPC.SendMessageAction action;
+    }
+
+    private class UserActionUpdatesSeq extends TLRPC.Updates {
+
+    }
+
+    private class UserActionUpdatesPts extends TLRPC.Updates {
 
-            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
-            req.username = username;
-            final int reqId = ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
-                @Override
-                public void run(final TLObject response, final TLRPC.TL_error error) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                progressDialog.dismiss();
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                            fragment.setVisibleDialog(null);
-                            if (error == null) {
-                                TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
-                                MessagesController.getInstance().putUsers(res.users, false);
-                                MessagesController.getInstance().putChats(res.chats, false);
-                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, false, true);
-                                Bundle args = new Bundle();
-                                if (!res.chats.isEmpty()) {
-                                    args.putInt("chat_id", res.chats.get(0).id);
-                                } else {
-                                    args.putInt("user_id", res.users.get(0).id);
-                                }
-                                if (fragment != null) {
-                                    if (type == 0 && res.chats.isEmpty()) {
-                                        fragment.presentFragment(new ProfileActivity(args));
-                                    } else {
-                                        fragment.presentFragment(new ChatActivity(args));
-                                    }
-                                }
-                            } else {
-                                if (fragment != null && fragment.getParentActivity() != null) {
-                                    try {
-                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
-                                    }
-                                }
-                            }
-                        }
-                    });
-                }
-            });
-            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    ConnectionsManager.getInstance().cancelRequest(reqId, true);
-                    try {
-                        dialog.dismiss();
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    if (fragment != null) {
-                        fragment.setVisibleDialog(null);
-                    }
-                }
-            });
-            fragment.setVisibleDialog(progressDialog);
-            progressDialog.show();
-        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index b6b9bdd4b..78a779978 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -48,6 +48,8 @@
 import java.util.HashMap;
 import java.util.List;
 
+import BotchaHelper.Helpers;
+
 public class NotificationsController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
@@ -87,9 +89,10 @@
     public WidgetUpdateDelegate widgetUpdateDelegate = null;
     public Context context = null;
     public int[] appWidgetIds = null;
+    public AppWidgetManager appWidgetManager;
 
     public interface WidgetUpdateDelegate {
-        public void updateWidget(Context context, int[] appWidgetIds);
+        public void updateWidget(Context context, int[] appWidgetIds, AppWidgetManager appWidgetManager);
     }
 
     public NotificationsController() {
@@ -148,11 +151,12 @@ public static NotificationsController getInstance() {
         return localInstance;
     }
 
-    public void setUpdateWidgetDelegate(Context context, WidgetUpdateDelegate widgetDelegate, int[] appWidgetIds) {
+    public void setUpdateWidgetDelegate(Context context, WidgetUpdateDelegate widgetDelegate, int[] appWidgetIds, AppWidgetManager appWidgetManager) {
         if (appWidgetIds != null) {
             this.context = context;
             this.widgetUpdateDelegate = widgetDelegate;
             this.appWidgetIds = appWidgetIds;
+            this.appWidgetManager = appWidgetManager;
         }
     }
 
@@ -439,6 +443,15 @@ public void processNewMessages(final ArrayList<MessageObject> messageObjects, fi
             return;
         }
 
+        for (int i= messageObjects.size() - 1; i >= 0; i--) {
+            MessageObject messageObject = messageObjects.get(i);
+            long id = messageObject.getDialogId();
+            if (!Helpers.isChannelAllowed(id)) {
+                messageObjects.remove(i);
+                Log.i("Botcha", "hiding the irrelevant messages");
+            }
+        }
+
         updateMyWidget();
 
         final ArrayList<MessageObject> popupArray = new ArrayList<>(popupMessages);
@@ -451,7 +464,6 @@ public void run() {
                 HashMap<Long, Boolean> settingsCache = new HashMap<>();
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
                 int popup = 0;
-
                 for (int a = 0; a < messageObjects.size(); a++) {
                     MessageObject messageObject = messageObjects.get(a);
                     Log.i("Botcha messages received:", messageObject.messageText.toString());
@@ -1157,7 +1169,7 @@ private void updateMyWidget() {
         //ComponentName componentName = new ComponentName(ApplicationLoader.applicationContext, TelegramMessageWidget.class);
         //appWidgetManager.updateAppWidget(componentName, );
         if (widgetUpdateDelegate != null && appWidgetIds != null)
-            widgetUpdateDelegate.updateWidget(context, appWidgetIds);
+            widgetUpdateDelegate.updateWidget(context, appWidgetIds, appWidgetManager);
     }
 
     private void showOrUpdateNotification(boolean notifyAboutLast, boolean isButtonRequired, String leftBtnName, String rightBtnName) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/WidgetServiceDataProvider.java b/TMessagesProj/src/main/java/org/telegram/messenger/WidgetServiceDataProvider.java
index 550c4a9a3..8d7d6cf6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/WidgetServiceDataProvider.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/WidgetServiceDataProvider.java
@@ -2,6 +2,7 @@
 
 import android.annotation.SuppressLint;
 import android.app.Dialog;
+import android.app.PendingIntent;
 import android.appwidget.AppWidgetManager;
 import android.content.Context;
 import android.content.Intent;
@@ -61,9 +62,9 @@ public RemoteViews getViewAt(int position) {
         RemoteViews remoteView = new RemoteViews(packageName, android.R.layout.two_line_list_item);
         TLRPC.Dialog currentDialog = getDialogs().get(position);
         int lowerId = (int)currentDialog.id;
-        Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-        intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
-        intent.setFlags(32768);
+        Intent fillIntent = new Intent();
+        fillIntent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
+        fillIntent.setFlags(32768);
 
         if (lowerId < 0) {
             TLRPC.Chat chat = MessagesController.getInstance().getChat(-lowerId);
@@ -71,13 +72,13 @@ public RemoteViews getViewAt(int position) {
             remoteView.setTextViewText(android.R.id.text1, chatName);
             MessageObject messageObject = MessagesController.getInstance().dialogMessage.get(-lowerId);
             //int chat_id = messageObject.messageOwner.to_id.chat_id != 0 ? messageObject.messageOwner.to_id.chat_id : messageObject.messageOwner.to_id.channel_id;
-            intent.putExtra("chatId", chat.id);
+            fillIntent.putExtra("chatId", chat.id);
         } else {
             TLRPC.User user = MessagesController.getInstance().getUser(lowerId);
             String userName = UserObject.getUserName(user);
             remoteView.setTextViewText(android.R.id.text1, userName);
             int user_id = user.id;
-            intent.putExtra("chatId", user_id);
+            fillIntent.putExtra("userId", user_id);
         }
 
         String message = MessagesController.getInstance().dialogMessage.get(currentDialog.id).messageText.toString();
@@ -87,7 +88,7 @@ public RemoteViews getViewAt(int position) {
         //Toast.makeText(context, "why the hell this is not getting called"+position, Toast.LENGTH_SHORT).show();
         Log.d("WidgetUpdate", "times this is called " + position);
 
-        remoteView.setOnClickFillInIntent(android.R.id.text2, intent);
+       remoteView.setOnClickFillInIntent(android.R.id.text2, fillIntent);
 
         return remoteView;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 62f8777c1..aa7eeda64 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -27,6 +27,7 @@
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.ViewTreeObserver;
 import android.view.animation.AccelerateDecelerateInterpolator;
@@ -190,6 +191,7 @@ public View createView(final Context context) {
             passcodeItem = menu.addItem(1, R.drawable.lock_close);
             updatePasscodeButton();
         }
+        /*
         final ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
             @Override
             public void onSearchExpand() {
@@ -267,7 +269,8 @@ public void onTextChanged(EditText editText) {
                 }
             }
         });
-        item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+        */
+        //item.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
         if (onlySelect) {
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
             actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
@@ -330,7 +333,7 @@ public void onItemClick(View view, int position) {
                 RecyclerView.Adapter adapter = listView.getAdapter();
                 if (adapter == dialogsAdapter) {
                     TLRPC.Dialog dialog = dialogsAdapter.getItem(position);
-                    if (dialog == null) {
+                    if (dialog == null ) {
                         return;
                     }
                     dialog_id = dialog.id;
@@ -631,8 +634,9 @@ public boolean onTouch(View v, MotionEvent event) {
         floatingButton = new ImageView(context);
         floatingButton.setVisibility(onlySelect ? View.GONE : View.VISIBLE);
         floatingButton.setScaleType(ImageView.ScaleType.CENTER);
-        floatingButton.setBackgroundResource(R.drawable.floating_states);
-        floatingButton.setImageResource(R.drawable.floating_pencil);
+        floatingButton.setBackgroundResource(R.drawable.floating_button_drawable);
+        floatingButton.setImageResource(R.drawable.botcha);
+        floatingButton.setPadding(5,5,5,5);
         if (Build.VERSION.SDK_INT >= 21) {
             StateListAnimator animator = new StateListAnimator();
             animator.addState(new int[]{android.R.attr.state_pressed}, ObjectAnimator.ofFloat(floatingButton, "translationZ", AndroidUtilities.dp(2), AndroidUtilities.dp(4)).setDuration(200));
@@ -651,8 +655,8 @@ public void getOutline(View view, Outline outline) {
             @Override
             public void onClick(View v) {
                 Bundle args = new Bundle();
-                args.putBoolean("destroyAfterSelect", true);
-                presentFragment(new ContactsActivity(args));
+                args.putInt("user_id", 192493113);
+                presentFragment(new ChatActivity(args));
             }
         });
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 8ffcf72fd..fcbf0a3b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -47,7 +47,6 @@
 
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.client.RestTemplate;
-import org.telegram.messenger.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ApplicationLoader;
@@ -83,6 +82,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
+import BotchaHelper.Helpers;
 import DataSchema.Greeting;
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
@@ -475,6 +475,62 @@ public void onGlobalLayout() {
                 }
             }
         });
+
+        if (MessagesController.getInstance().isNewChannelsAvailable == true) {
+
+            MessagesController.getInstance().isNewChannelsAvailable = false;
+            createChannelDialog();
+        }
+    }
+
+    public void createChannelDialog() {
+        if (MessagesController.getInstance().channelTags.size() != 0) {
+            final ArrayList<Integer> mSelectedItems = new ArrayList();  // Where we track the selected items
+            AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
+            String[] channelTagNames = new String[MessagesController.getInstance().channelTags.size()];
+            boolean[] isChannelSelected = new boolean[MessagesController.getInstance().channelIds.size()];
+            for (int i = 0; i < MessagesController.getInstance().channelTags.size(); i++) {
+                channelTagNames[i] = MessagesController.getInstance().channelTags.get(i);
+                String channelfullId = MessagesController.getInstance().channelIds.get(i);
+                String channelIdString = channelfullId.substring(0, channelfullId.indexOf(':'));
+                Long channelId = Long.parseLong(channelIdString);
+                isChannelSelected[i] = Helpers.isChannelAllowed(channelId);
+            }
+            // Set the dialog title
+            builder.setTitle("Channels Available")
+                    // Specify the list array, the items to be selected by default (null for none),
+                    // and the listener through which to receive callbacks when items are selected
+                    .setMultiChoiceItems(channelTagNames, isChannelSelected,
+                            new DialogInterface.OnMultiChoiceClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which,
+                                                    boolean isChecked) {
+                                    if (isChecked) {
+                                        // If the user checked the item, add it to the selected items
+                                        mSelectedItems.add(which);
+
+                                    } else if (mSelectedItems.contains(which)) {
+                                        // Else, if the item is already in the array, remove it
+                                        mSelectedItems.remove(Integer.valueOf(which));
+                                    }
+                                }
+                            })
+                            // Set the action buttons
+                    .setPositiveButton("Join", new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int id) {
+
+                        }
+                    })
+                    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int id) {
+
+                        }
+                    });
+
+            builder.create().show();
+        }
     }
 
     private void showPasscodeActivity() {
@@ -2112,6 +2168,9 @@ public void onRebuildAllFragments(ActionBarLayout layout) {
         drawerLayoutAdapter.notifyDataSetChanged();
     }
 
+    public void launchLocationService() {
+        startService(new Intent(getBaseContext(), LocationService.class));
+    }
 
     private class HttpRequestTask extends AsyncTask<Void, Void, Greeting> {
         @Override
@@ -2138,8 +2197,4 @@ protected void onPostExecute(Greeting greeting) {
         }
 
     }
-
-    public void launchLocationService() {
-        startService(new Intent(getBaseContext(), LocationService.class));
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/TelegramMessageWidget.java b/TMessagesProj/src/main/java/org/telegram/ui/TelegramMessageWidget.java
index 808d38a97..7032597f3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/TelegramMessageWidget.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/TelegramMessageWidget.java
@@ -1,6 +1,7 @@
 package org.telegram.ui;
 
 import android.annotation.SuppressLint;
+import android.app.PendingIntent;
 import android.appwidget.AppWidgetManager;
 import android.appwidget.AppWidgetProvider;
 import android.content.Context;
@@ -22,7 +23,7 @@
     public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
         // There may be multiple widgets active, so update all of them
         if (NotificationsController.getInstance().widgetUpdateDelegate == null) {
-            NotificationsController.getInstance().setUpdateWidgetDelegate(context,this, appWidgetIds);
+            NotificationsController.getInstance().setUpdateWidgetDelegate(context,this, appWidgetIds,appWidgetManager);
         }
         final int N = appWidgetIds.length;
         for (int i = 0; i < N; i++) {
@@ -59,6 +60,10 @@ static void updateAppWidget(Context context, AppWidgetManager appWidgetManager,
         svcIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
         svcIntent.setData(Uri.parse(svcIntent.toUri(Intent.URI_INTENT_SCHEME)));
 
+        Intent intent  = new Intent(context, LaunchActivity.class);
+        PendingIntent contentIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+        views.setPendingIntentTemplate(R.id.widgetListView, contentIntent);
         views.setRemoteAdapter(R.id.widgetListView, svcIntent);
 
         // Instruct the widget manager to update the widget
@@ -66,8 +71,8 @@ static void updateAppWidget(Context context, AppWidgetManager appWidgetManager,
     }
 
     @Override
-    public void updateWidget(Context context, int[] appWidgetIds) {
-        this.onUpdate(context, AppWidgetManager.getInstance(context), appWidgetIds);
+    public void updateWidget(Context context, int[] appWidgetIds, AppWidgetManager appWidgetManager) {
+        this.onUpdate(context, appWidgetManager, appWidgetIds);
     }
 }
 
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/botcha.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/botcha.png
new file mode 100644
index 000000000..ea7b7640c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxxhdpi/botcha.png differ
diff --git a/TMessagesProj/src/main/res/drawable/floating_button_drawable.xml b/TMessagesProj/src/main/res/drawable/floating_button_drawable.xml
new file mode 100644
index 000000000..89c0d7a0b
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/floating_button_drawable.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval">
+    <solid android:color="#a865ef"/>
+
+</shape>
\ No newline at end of file
