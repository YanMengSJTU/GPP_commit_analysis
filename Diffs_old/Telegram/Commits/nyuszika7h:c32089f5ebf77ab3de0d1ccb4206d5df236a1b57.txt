diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 778bc5928..b15fb74e5 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -1,11 +1,4 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.2.3'
-    }
-}
+
 apply plugin: 'com.android.application'
 
 repositories {
@@ -13,8 +6,9 @@ repositories {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:22.1.+'
+    compile 'com.android.support:support-v4:22.2.+'
     compile 'com.google.android.gms:play-services:3.2.+'
+    //compile 'com.google.android.gms:play-services:7.5.0'
     compile 'net.hockeyapp.android:HockeySDK:3.5.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
 }
@@ -88,7 +82,7 @@ android {
         applicationId "org.telegram.plus"
         minSdkVersion 8
         targetSdkVersion 22
-        versionCode 546
-        versionName "2.9.1.4"
+        versionCode 576
+        versionName "3.0.1.5"
     }
 }
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index a3a0fb862..a2cc1dfb8 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -430,7 +430,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
     
     AndroidBitmapInfo info;
     int i;
-    
+
     if ((i = AndroidBitmap_getInfo(env, bitmap, &info)) >= 0) {
         char *fileName = (*env)->GetStringUTFChars(env, path, NULL);
         FILE *infile;
@@ -438,7 +438,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jcl
         if ((infile = fopen(fileName, "rb"))) {
             struct my_error_mgr jerr;
             struct jpeg_decompress_struct cinfo;
-            
+
             cinfo.err = jpeg_std_error(&jerr.pub);
             jerr.pub.error_exit = my_error_exit;
             
@@ -557,7 +557,7 @@ JNIEXPORT jobject Java_org_telegram_messenger_Utilities_loadWebpImage(JNIEnv *en
     if (!WebPDecodeRGBAInto((uint8_t*)inputBuffer, len, (uint8_t*)bitmapPixels, bitmapInfo.height * bitmapInfo.stride, bitmapInfo.stride)) {
         AndroidBitmap_unlockPixels(env, outputBitmap);
         (*env)->DeleteLocalRef(env, outputBitmap);
-        (*env)->ThrowNew(env, jclass_RuntimeException, "Failed to unlock Bitmap pixels");
+        (*env)->ThrowNew(env, jclass_RuntimeException, "Failed to decode webp image");
         return 0;
     }
     
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so
index b73f401f3..ebbd6bff2 100644
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.8.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.8.so b/TMessagesProj/libs/armeabi/libtmessages.8.so
index b720a57b4..fdd6919ec 100644
Binary files a/TMessagesProj/libs/armeabi/libtmessages.8.so and b/TMessagesProj/libs/armeabi/libtmessages.8.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.8.so b/TMessagesProj/libs/x86/libtmessages.8.so
index 0b3e8df01..22a292919 100644
Binary files a/TMessagesProj/libs/x86/libtmessages.8.so and b/TMessagesProj/libs/x86/libtmessages.8.so differ
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
index 6335d93b8..6e78412dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
+++ b/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
@@ -8,9 +8,11 @@
 
 package org.telegram.SQLite;
 
+import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.FileLog;
 
 import java.nio.ByteBuffer;
+import java.util.HashMap;
 
 public class SQLitePreparedStatement {
 	private boolean isFinalized = false;
@@ -19,6 +21,8 @@
 	private int queryArgsCount;
 	private boolean finalizeAfterQuery = false;
 
+    private static HashMap<SQLitePreparedStatement, String> hashMap;
+
 	public int getStatementHandle() {
 		return sqliteStatementHandle;
 	}
@@ -26,6 +30,16 @@ public int getStatementHandle() {
 	public SQLitePreparedStatement(SQLiteDatabase db, String sql, boolean finalize) throws SQLiteException {
 		finalizeAfterQuery = finalize;
 		sqliteStatementHandle = prepare(db.getSQLiteHandle(), sql);
+        //if (BuildVars.DEBUG_VERSION) {
+        if (BuildConfig.DEBUG) {
+            if (hashMap == null) {
+                hashMap = new HashMap<>();
+            }
+            hashMap.put(this, sql);
+            for (HashMap.Entry<SQLitePreparedStatement, String> entry : hashMap.entrySet()) {
+                FileLog.d("tmessages", "exist entry = " + entry.getValue());
+            }
+        }
 	}
 
 
@@ -88,6 +102,10 @@ public void finalizeQuery() {
             return;
         }
 		try {
+            //if (BuildVars.DEBUG_VERSION) {
+            if (BuildConfig.DEBUG) {
+                hashMap.remove(this);
+            }
 			isFinalized = true;
 			finalize(sqliteStatementHandle);
 		} catch (SQLiteException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 4b11ce6a2..17f51edbf 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -36,6 +36,7 @@
 import android.text.Spanned;
 import android.text.style.ForegroundColorSpan;
 import android.util.DisplayMetrics;
+import android.util.Log;
 import android.util.StateSet;
 import android.view.Display;
 import android.view.Surface;
@@ -108,7 +109,6 @@
 
     public static boolean needRestart = false;
 
-    static final long delay = 7 * 24 * 60 * 60 * 1000;
     static long lastCheck = -1;
 
     static {
@@ -190,6 +190,7 @@ public static Typeface getTypeface(String assetPath) {
                     return null;
                 }
             }
+            if(ApplicationLoader.USE_DEVICE_FONT)return null;
             return typefaceCache.get(assetPath);
         }
     }
@@ -631,22 +632,31 @@ public static void clearDrawableAnimation(View view) {
         }
     }
 
+    public static final int FLAG_TAG_BR = 1;
+    public static final int FLAG_TAG_BOLD = 2;
+    public static final int FLAG_TAG_COLOR = 4;
+    public static final int FLAG_TAG_ALL = FLAG_TAG_BR | FLAG_TAG_BOLD | FLAG_TAG_COLOR;
+
     public static Spannable replaceTags(String str) {
+        return replaceTags(str, FLAG_TAG_ALL);
+    }
+
+    public static Spannable replaceTags(String str, int flag) {
         try {
             int start;
-            int startColor = -1;
             int end;
             StringBuilder stringBuilder = new StringBuilder(str);
+            if ((flag & FLAG_TAG_BR) != 0) {
             while ((start = stringBuilder.indexOf("<br>")) != -1) {
                 stringBuilder.replace(start, start + 4, "\n");
             }
             while ((start = stringBuilder.indexOf("<br/>")) != -1) {
                 stringBuilder.replace(start, start + 5, "\n");
             }
+            }
         ArrayList<Integer> bolds = new ArrayList<>();
-            ArrayList<Integer> colors = new ArrayList<>();
-            while ((start = stringBuilder.indexOf("<b>")) != -1 || (startColor = stringBuilder.indexOf("<c#")) != -1) {
-                if (start != -1) {
+            if ((flag & FLAG_TAG_BOLD) != 0) {
+                while ((start = stringBuilder.indexOf("<b>")) != -1) {
                     stringBuilder.replace(start, start + 3, "");
                     end = stringBuilder.indexOf("</b>");
                     if (end == -1) {
@@ -655,17 +665,20 @@ public static Spannable replaceTags(String str) {
                     stringBuilder.replace(end, end + 4, "");
             bolds.add(start);
             bolds.add(end);
-                } else if (startColor != -1) {
-                    stringBuilder.replace(startColor, startColor + 2, "");
-                    end = stringBuilder.indexOf(">", startColor);
-                    int color = Color.parseColor(stringBuilder.substring(startColor, end));
-                    stringBuilder.replace(startColor, end + 1, "");
+                }
+            }
+            ArrayList<Integer> colors = new ArrayList<>();
+            if ((flag & FLAG_TAG_COLOR) != 0) {
+                while ((start = stringBuilder.indexOf("<c#")) != -1) {
+                    stringBuilder.replace(start, start + 2, "");
+                    end = stringBuilder.indexOf(">", start);
+                    int color = Color.parseColor(stringBuilder.substring(start, end));
+                    stringBuilder.replace(start, end + 1, "");
                     end = stringBuilder.indexOf("</c>");
                     stringBuilder.replace(end, end + 4, "");
-                    colors.add(startColor);
+                    colors.add(start);
                     colors.add(end);
                     colors.add(color);
-                    startColor = -1;
                 }
             }
             SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(stringBuilder);
@@ -1222,6 +1235,7 @@ public static void checkForThemes(final Activity context) {
         //if (!BuildConfig.DEBUG) {
         //}
         try {
+            long myDelay = (30L * 24L * 60L * 60L * 1000L);
             String packageName = "es.rafalense.themes";
             if(BuildConfig.DEBUG)packageName = "es.rafalense.themes.beta";
             Intent intent = context.getPackageManager().getLaunchIntentForPackage(packageName);
@@ -1230,11 +1244,12 @@ public static void checkForThemes(final Activity context) {
             } else {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                 //long last = preferences.getLong("lastTimeActionDone", 0);
-                //Log.e("checkForThemes",":lastCheck:"+lastCheck);
-                //Log.e("checkForThemes", System.currentTimeMillis() - lastCheck + ":");
-                if (lastCheck < 0 || ( System.currentTimeMillis() - lastCheck < delay && lastCheck > 0 ) ) {
+                //Log.e("checkForThemes0", ":lastCheck:" + lastCheck);
+                //Log.e("checkForThemes0", System.currentTimeMillis() - lastCheck + ":" + myDelay);
+                if (lastCheck < 0 || ( System.currentTimeMillis() - lastCheck < myDelay && lastCheck > 0 ) ) {
                     //lastCheck++;
                     lastCheck = preferences.getLong("lastTime", 0);
+                    //Log.e("checkForThemes1", ":lastCheck:" + lastCheck);
                     return;
                 } else {
                     SharedPreferences.Editor editor = preferences.edit();
@@ -1250,9 +1265,15 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    Intent in = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + pck));
-                                    if (BuildConfig.DEBUG)in = new Intent(Intent.ACTION_VIEW, Uri.parse("https://rink.hockeyapp.net/apps/b5860b775ca122d3335685f39917e68f"));
-                                    context.startActivityForResult(in, 503);
+                                    try{
+                                        Intent in = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + pck));
+                                        if (BuildConfig.DEBUG)in = new Intent(Intent.ACTION_VIEW, Uri.parse("https://rink.hockeyapp.net/apps/b5860b775ca122d3335685f39917e68f"));
+                                        context.startActivityForResult(in, 503);
+                                    } catch (Exception e) {
+                                        Intent in = new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=es.rafalense.themes"));
+                                        context.startActivityForResult(in, 503);
+                                        FileLog.e("tmessages", e);
+                                    }
                                 }
                             });
                         }
@@ -1260,6 +1281,7 @@ public void run() {
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                     builder.create().show();
                     lastCheck = preferences.getLong("lastTime", 0);
+                    //Log.e("checkForThemes2", ":lastCheck:" + lastCheck);
                 }
             }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java b/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
index 18c6b12da..be5993931 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AnimationCompat/AnimatorSetProxy.java
@@ -89,6 +89,15 @@ public AnimatorSetProxy setDuration(long duration) {
         return this;
     }
 
+    public AnimatorSetProxy setStartDelay(long delay) {
+        if (View10.NEED_PROXY) {
+            ((AnimatorSet10) animatorSet).setStartDelay(delay);
+        } else {
+            ((AnimatorSet) animatorSet).setStartDelay(delay);
+        }
+        return this;
+    }
+
     public void start() {
         if (View10.NEED_PROXY) {
             ((AnimatorSet10) animatorSet).start();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index cf7014443..00bc64051 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -957,14 +957,8 @@ public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
                             public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
                                 TLRPC.User user1 = usersDict.get(tl_contact.user_id);
                                 TLRPC.User user2 = usersDict.get(tl_contact2.user_id);
-                                String name1 = user1.first_name;
-                                if (name1 == null || name1.length() == 0) {
-                                    name1 = user1.last_name;
-                                }
-                                String name2 = user2.first_name;
-                                if (name2 == null || name2.length() == 0) {
-                                    name2 = user2.last_name;
-                                }
+                                String name1 = UserObject.getFirstName(user1);
+                                String name2 = UserObject.getFirstName(user2);
                                 return name1.compareTo(name2);
                             }
                         });
@@ -990,10 +984,7 @@ public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
                                 contactsByPhonesDict.put(user.phone, value);
                             }
 
-                            String key = user.first_name;
-                            if (key == null || key.length() == 0) {
-                                key = user.last_name;
-                            }
+                            String key = UserObject.getFirstName(user);
                             if (key.length() > 1) {
                                 key = key.substring(0, 1);
                             }
@@ -1161,14 +1152,8 @@ private void buildContactsSectionsArrays(boolean sort) {
                 public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
                     TLRPC.User user1 = MessagesController.getInstance().getUser(tl_contact.user_id);
                     TLRPC.User user2 = MessagesController.getInstance().getUser(tl_contact2.user_id);
-                    String name1 = user1.first_name;
-                    if (name1 == null || name1.length() == 0) {
-                        name1 = user1.last_name;
-                    }
-                    String name2 = user2.first_name;
-                    if (name2 == null || name2.length() == 0) {
-                        name2 = user2.last_name;
-                    }
+                    String name1 = UserObject.getFirstName(user1);
+                    String name2 = UserObject.getFirstName(user2);
                     return name1.compareTo(name2);
                 }
             });
@@ -1184,10 +1169,7 @@ public int compare(TLRPC.TL_contact tl_contact, TLRPC.TL_contact tl_contact2) {
                 continue;
             }
 
-            String key = user.first_name;
-            if (key == null || key.length() == 0) {
-                key = user.last_name;
-            }
+            String key = UserObject.getFirstName(user);
             if (key.length() > 1) {
                 key = key.substring(0, 1);
             }
@@ -1639,7 +1621,7 @@ public void run() {
 
                 for (TLRPC.User user : users) {
                     if (user.phone != null && user.phone.length() > 0) {
-                        CharSequence name = ContactsController.formatName(user.first_name, user.last_name);
+                        CharSequence name = UserObject.getUserName(user);
                         MessagesStorage.getInstance().applyPhoneBookUpdates(user.phone, "");
                         Contact contact = contactsBookSPhones.get(user.phone);
                         if (contact != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
index 802ebead8..01df41ab2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/Emoji.java
@@ -16,6 +16,7 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.text.Spannable;
+import android.text.Spanned;
 import android.text.style.DynamicDrawableSpan;
 import android.text.style.ImageSpan;
 import android.view.View;
@@ -416,6 +417,14 @@ private static boolean inArray(char c, char[] a) {
         return false;
     }
 
+    private static boolean isNextCharIsColor(CharSequence cs, int i) {
+        if (i + 2 >= cs.length()) {
+            return false;
+        }
+        int value = cs.charAt(i + 1) << 16 | cs.charAt(i + 2);
+        return value == 0xd83cdffb || value == 0xd83cdffc || value == 0xd83cdffd || value == 0xd83cdffe || value == 0xd83cdfff;
+    }
+
     public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fontMetrics, int size) {
         if (cs == null || cs.length() == 0) {
             return cs;
@@ -443,12 +452,16 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                     buf |= c;
                     EmojiDrawable d = Emoji.getEmojiDrawable(buf);
                     if (d != null) {
+                        boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                         EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                         emojiCount++;
                         if (c >= 0xDDE6 && c <= 0xDDFA) {
-                            s.setSpan(span, i - 3, i + 1, 0);
+                            s.setSpan(span, i - 3, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                         } else {
-                            s.setSpan(span, i - 1, i + 1, 0);
+                            s.setSpan(span, i - 1, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        }
+                        if (nextIsSkinTone) {
+                            i += 2;
                         }
                     }
                     buf = 0;
@@ -461,9 +474,13 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                             buf |= c;
                             EmojiDrawable d = Emoji.getEmojiDrawable(buf);
                             if (d != null) {
+                                boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                                 EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                                 emojiCount++;
-                                s.setSpan(span, i - 1, i + 1, 0);
+                                s.setSpan(span, i - 1, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                                if (nextIsSkinTone) {
+                                    i += 2;
+                                }
                             }
                             buf = 0;
                         }
@@ -471,9 +488,13 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                 } else if (inArray(c, emojiChars)) {
                     EmojiDrawable d = Emoji.getEmojiDrawable(c);
                     if (d != null) {
+                        boolean nextIsSkinTone = isNextCharIsColor(cs, i);
                         EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
                         emojiCount++;
-                        s.setSpan(span, i, i + 1, 0);
+                        s.setSpan(span, i, i + (nextIsSkinTone ? 3 : 1), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        if (nextIsSkinTone) {
+                            i += 2;
+                        }
                     }
                 }
                 if (emojiCount >= 50) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 230f5d6d5..859d35598 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -26,7 +26,6 @@
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -34,6 +33,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -46,6 +46,7 @@
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
@@ -140,9 +141,13 @@ protected Boolean doInBackground(Void... voids) {
 
                 fileOutputStream = new RandomAccessFile(tempFile, "rws");
             } catch (Throwable e) {
+                if (e instanceof UnknownHostException) {
+                    canRetry = false;
+                }
                 FileLog.e("tmessages", e);
             }
 
+            if (canRetry) {
             try {
                 if (httpConnection != null && httpConnection instanceof HttpURLConnection) {
                     int code = ((HttpURLConnection) httpConnection).getResponseCode();
@@ -197,6 +202,7 @@ protected Boolean doInBackground(Void... voids) {
             } catch (Throwable e) {
                 FileLog.e("tmessages", e);
             }
+            }
 
             return done;
         }
@@ -537,7 +543,7 @@ public void run() {
             boolean canDeleteFile = true;
             boolean useNativeWebpLoaded = false;
 
-            if (Build.VERSION.SDK_INT < 18) {
+            if (Build.VERSION.SDK_INT < 19) {
                 RandomAccessFile randomAccessFile = null;
                 try {
                     randomAccessFile = new RandomAccessFile(cacheFileFinal, "r");
@@ -1905,13 +1911,6 @@ public static Bitmap loadBitmap(String path, Uri uri, float maxWidth, float maxH
                 BitmapFactory.decodeFileDescriptor(fileDescriptor, null, bmOptions);
             } catch (Throwable e) {
                 FileLog.e("tmessages", e);
-                try {
-                    if (parcelFD != null) {
-                        parcelFD.close();
-                    }
-                } catch (Throwable e2) {
-                    FileLog.e("tmessages", e2);
-                }
                 return null;
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 6ca8deba7..b73778a24 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -23,9 +23,9 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.Utilities;
 
 public class ImageReceiver implements NotificationCenter.NotificationCenterDelegate {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
index 45be103a7..7ba7ad236 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
@@ -19,11 +19,11 @@
 import android.util.Xml;
 
 import org.telegram.android.time.FastDateFormat;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.ApplicationLoader;
 import org.xmlpull.v1.XmlPullParser;
 
 import java.io.File;
@@ -203,6 +203,22 @@ public LocaleController() {
         sortedLanguages.add(localeInfo);
         languagesDict.put(localeInfo.shortName, localeInfo);
 
+        localeInfo = new LocaleInfo();
+        localeInfo.name = "پارسی";
+        localeInfo.nameEnglish = "Parsi";
+        localeInfo.shortName = "fa_IR";
+        localeInfo.pathToFile = null;
+        sortedLanguages.add(localeInfo);
+        languagesDict.put(localeInfo.shortName, localeInfo);
+
+        localeInfo = new LocaleInfo();
+        localeInfo.name = "अंग्रेजी";
+        localeInfo.nameEnglish = "Hindi";
+        localeInfo.shortName = "hi";
+        localeInfo.pathToFile = null;
+        sortedLanguages.add(localeInfo);
+        languagesDict.put(localeInfo.shortName, localeInfo);
+
         localeInfo = new LocaleInfo();
         localeInfo.name = "Català";
         localeInfo.nameEnglish = "Catalan";
@@ -883,7 +899,7 @@ public static String formatUserStatus(TLRPC.User user) {
                 return getString("Online", R.string.Online);
             }
         }
-        if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
+        if (user == null || user.status == null || user.status.expires == 0 || UserObject.isDeleted(user) || user instanceof TLRPC.TL_userEmpty) {
             return getString("ALongTimeAgo", R.string.ALongTimeAgo);
         } else {
             int currentTime = ConnectionsManager.getInstance().getCurrentTime();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index a075b5898..e6564fc61 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -41,6 +41,7 @@
 import android.os.Build;
 import android.os.Environment;
 import android.os.ParcelFileDescriptor;
+import android.os.PowerManager;
 import android.os.Vibrator;
 import android.provider.MediaStore;
 import android.view.View;
@@ -49,7 +50,6 @@
 import org.telegram.android.video.MP4Builder;
 import org.telegram.android.video.Mp4Movie;
 import org.telegram.android.video.OutputSurface;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLoader;
@@ -58,6 +58,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.Components.GifDrawable;
 
@@ -200,6 +201,7 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private SensorManager sensorManager;
     private Sensor proximitySensor;
     private boolean ignoreProximity;
+    private PowerManager.WakeLock proximityWakeLock;
 
     private ArrayList<MessageObject> videoConvertQueue = new ArrayList<>();
     private final Object videoQueueSync = new Object();
@@ -222,6 +224,8 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
 
     private boolean saveToGallery = true;
 
+    public static AlbumEntry allPhotosAlbumEntry;
+
     private HashMap<String, ArrayList<WeakReference<FileDownloadProgressListener>>> loadingFileObservers = new HashMap<>();
     private HashMap<Integer, String> observersByTag = new HashMap<>();
     private boolean listenerInProgress = false;
@@ -357,6 +361,40 @@ public void onChange(boolean selfChange) {
         }
     }
 
+    /*private class GalleryObserverInternal extends ContentObserver {
+        public GalleryObserverInternal() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    loadGalleryPhotosAlbums(0);
+                }
+            }, 2000);
+        }
+    }
+
+    private class GalleryObserverExternal extends ContentObserver {
+        public GalleryObserverExternal() {
+            super(null);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            super.onChange(selfChange);
+            AndroidUtilities.runOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    loadGalleryPhotosAlbums(0);
+                }
+            }, 2000);
+        }
+    }*/
+
     private ExternalObserver externalObserver = null;
     private InternalObserver internalObserver = null;
     private long lastSecretChatEnterTime = 0;
@@ -430,6 +468,8 @@ public MediaController() {
         try {
             sensorManager = (SensorManager) ApplicationLoader.applicationContext.getSystemService(Context.SENSOR_SERVICE);
             proximitySensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+            PowerManager powerManager = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+            proximityWakeLock = powerManager.newWakeLock(0x00000020, "proximity");
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -486,6 +526,17 @@ public void onReceive(Context context, Intent intent) {
                     MediaStore.Images.ImageColumns.TITLE
             };
         }
+
+        /*try {
+            ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, false, new GalleryObserverExternal());
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        try {
+            ApplicationLoader.applicationContext.getContentResolver().registerContentObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI, false, new GalleryObserverInternal());
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }*/
     }
 
     private void startProgressTimer() {
@@ -1193,7 +1244,10 @@ private void stopProximitySensor() {
             if (sensorManager != null && proximitySensor != null) {
                 sensorManager.unregisterListener(this);
             }
-        } catch (Exception e) {
+            if (proximityWakeLock != null && proximityWakeLock.isHeld()) {
+                proximityWakeLock.release();
+            }
+        } catch (Throwable e) {
             FileLog.e("tmessages", e);
         }
     }
@@ -1206,6 +1260,9 @@ private void startProximitySensor() {
             if (sensorManager != null && proximitySensor != null) {
                 sensorManager.registerListener(this, proximitySensor, SensorManager.SENSOR_DELAY_NORMAL);
             }
+            if (!NotificationsController.getInstance().audioManager.isWiredHeadsetOn() && proximityWakeLock != null && !proximityWakeLock.isHeld()) {
+                proximityWakeLock.acquire();
+            }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -1321,7 +1378,14 @@ public boolean playAudio(MessageObject messageObject) {
         }
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidStarted, messageObject);
         clenupPlayer(true);
-        final File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
+        File file = null;
+        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
+            file = new File(messageObject.messageOwner.attachPath);
+            if (!file.exists()) {
+                file = null;
+            }
+        }
+        final File cacheFile = file != null ? file : FileLoader.getPathToMessage(messageObject.messageOwner);
 
         if (isOpusFile(cacheFile.getAbsolutePath()) == 1) {
             synchronized (playerObjectSync) {
@@ -2096,7 +2160,7 @@ public void run() {
 
                 try {
                     albums.clear();
-                    allPhotosAlbum = null;
+                    AlbumEntry allVideosAlbum = null;
                     cursor = MediaStore.Images.Media.query(ApplicationLoader.applicationContext.getContentResolver(), MediaStore.Video.Media.EXTERNAL_CONTENT_URI, projectionVideo, "", null, MediaStore.Video.Media.DATE_TAKEN + " DESC");
                     if (cursor != null) {
                         int imageIdColumn = cursor.getColumnIndex(MediaStore.Video.Media._ID);
@@ -2118,12 +2182,12 @@ public void run() {
 
                             PhotoEntry photoEntry = new PhotoEntry(bucketId, imageId, dateTaken, path, 0, true);
 
-                            if (allPhotosAlbum == null) {
-                                allPhotosAlbum = new AlbumEntry(0, LocaleController.getString("AllVideo", R.string.AllVideo), photoEntry, true);
-                                videoAlbumsSorted.add(0, allPhotosAlbum);
+                            if (allVideosAlbum == null) {
+                                allVideosAlbum = new AlbumEntry(0, LocaleController.getString("AllVideo", R.string.AllVideo), photoEntry, true);
+                                videoAlbumsSorted.add(0, allVideosAlbum);
                             }
-                            if (allPhotosAlbum != null) {
-                                allPhotosAlbum.addPhoto(photoEntry);
+                            if (allVideosAlbum != null) {
+                                allVideosAlbum.addPhoto(photoEntry);
                             }
 
                             AlbumEntry albumEntry = albums.get(bucketId);
@@ -2155,9 +2219,11 @@ public void run() {
 
                 final Integer cameraAlbumIdFinal = cameraAlbumId;
                 final Integer cameraAlbumVideoIdFinal = cameraAlbumVideoId;
+                final AlbumEntry allPhotosAlbumFinal = allPhotosAlbum;
                 AndroidUtilities.runOnUIThread(new Runnable() {
                     @Override
                     public void run() {
+                        allPhotosAlbumEntry = allPhotosAlbumFinal;
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.albumsDidLoaded, guid, albumsSorted, cameraAlbumIdFinal, videoAlbumsSorted, cameraAlbumVideoIdFinal);
                     }
                 });
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index 8d433baee..e1ae5e253 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -23,8 +23,8 @@
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.R;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.URLSpanNoUnderline;
 import org.telegram.ui.Components.URLSpanNoUnderlineBold;
@@ -65,6 +65,8 @@
     public int textHeight;
     public int blockHeight = Integer.MAX_VALUE;
 
+    public static Pattern urlPattern;
+
     public static class TextLayoutBlock {
         public StaticLayout textLayout;
         public float textXOffset = 0;
@@ -237,7 +239,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(message.action.ttl));
                         } else {
                             if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(message.action.ttl));
+                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(message.action.ttl));
                             } else {
                                 messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(message.action.ttl));
                             }
@@ -247,7 +249,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
                         } else {
                             if (fromUser != null) {
-                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
+                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
                             } else {
                                 messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
                             }
@@ -264,20 +266,17 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                             to_user = MessagesController.getInstance().getUser(messageOwner.to_id.user_id);
                         }
                     }
-                    String name = "";
-                    if (to_user != null) {
-                        name = to_user.first_name;
-                    }
+                    String name = to_user != null ? UserObject.getFirstName(to_user) : "";
                     messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
                 } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
                     if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
+                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(fromUser));
                     } else {
                         messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, "");
                     }
                 } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
                     if (fromUser != null) {
-                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
+                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(fromUser));
                     } else {
                         messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
                     }
@@ -299,7 +298,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                                 messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(action.ttl_seconds));
                             } else {
                                 if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(action.ttl_seconds));
+                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, UserObject.getFirstName(fromUser), AndroidUtilities.formatTTLString(action.ttl_seconds));
                                 } else {
                                     messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(action.ttl_seconds));
                                 }
@@ -309,7 +308,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                                 messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
                             } else {
                                 if (fromUser != null) {
-                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
+                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, UserObject.getFirstName(fromUser));
                                 } else {
                                     messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
                                 }
@@ -509,7 +508,7 @@ public void generateThumbs(boolean update) {
     }
 
     public CharSequence replaceWithLink(CharSequence source, String param, TLRPC.User user) {
-        String name = ContactsController.formatName(user.first_name, user.last_name);
+        String name = UserObject.getUserName(user);
         int start = TextUtils.indexOf(source, param);
         URLSpanNoUnderlineBold span = new URLSpanNoUnderlineBold("" + user.id);
         SpannableStringBuilder builder = new SpannableStringBuilder(TextUtils.replace(source, new String[]{param}, new String[]{name}));
@@ -549,8 +548,8 @@ public int getFileType() {
         return FileLoader.MEDIA_DIR_CACHE;
     }
 
-    private boolean containsUrls(CharSequence message) {
-        if (message == null || message.length() < 3 || message.length() > 1024 * 20) {
+    private static boolean containsUrls(CharSequence message) {
+        if (message == null || message.length() < 2 || message.length() > 1024 * 20) {
             return false;
         }
 
@@ -575,7 +574,7 @@ private boolean containsUrls(CharSequence message) {
             } else if (!(c != ' ' && digitsInRow > 0)) {
                 digitsInRow = 0;
             }
-            if ((c == '@' || c == '#') && i == 0 || i != 0 && (message.charAt(i - 1) == ' ' || message.charAt(i - 1) == '\n')) {
+            if ((c == '@' || c == '#' || c == '/') && i == 0 || i != 0 && (message.charAt(i - 1) == ' ' || message.charAt(i - 1) == '\n')) {
                 return true;
             }
             if (c == ':') {
@@ -638,14 +637,16 @@ public void generateCaption() {
         }
     }
 
-    private void addUsernamesAndHashtags(CharSequence charSequence) {
+    private static void addUsernamesAndHashtags(CharSequence charSequence) {
             try {
-                Pattern pattern = Pattern.compile("(^|\\s)@[a-zA-Z\\d_]{5,32}|(^|\\s)#[\\w\\.]+");
-            Matcher matcher = pattern.matcher(charSequence);
+            if (urlPattern == null) {
+                urlPattern = Pattern.compile("(^|\\s)/[a-zA-Z@\\d_]{1,255}|(^|\\s)@[a-zA-Z\\d_]{5,32}|(^|\\s)#[\\w\\.]+");
+            }
+            Matcher matcher = urlPattern.matcher(charSequence);
                 while (matcher.find()) {
                     int start = matcher.start();
                     int end = matcher.end();
-                if (charSequence.charAt(start) != '@' && charSequence.charAt(start) != '#') {
+                if (charSequence.charAt(start) != '@' && charSequence.charAt(start) != '#' && charSequence.charAt(start) != '/') {
                         start++;
                     }
                 URLSpanNoUnderline url = new URLSpanNoUnderline(charSequence.subSequence(start, end).toString());
@@ -656,14 +657,7 @@ private void addUsernamesAndHashtags(CharSequence charSequence) {
             }
     }
 
-    private void generateLayout() {
-        if (type != 0 || messageOwner.to_id == null || messageText == null || messageText.length() == 0) {
-            return;
-        }
-
-        generateLinkDescription();
-        textLayoutBlocks = new ArrayList<>();
-
+    public static void addLinks(CharSequence messageText) {
         if (messageText instanceof Spannable && containsUrls(messageText)) {
             if (messageText.length() < 100) {
                 try {
@@ -680,6 +674,17 @@ private void generateLayout() {
             }
             addUsernamesAndHashtags(messageText);
         }
+    }
+
+    private void generateLayout() {
+        if (type != 0 || messageOwner.to_id == null || messageText == null || messageText.length() == 0) {
+            return;
+        }
+
+        generateLinkDescription();
+        textLayoutBlocks = new ArrayList<>();
+
+        addLinks(messageText);
 
         int maxWidth;
         if (AndroidUtilities.isTablet()) {
@@ -928,7 +933,7 @@ public boolean isSending() {
     }
 
     public boolean isSendError() {
-        return messageOwner.send_state == MESSAGE_SEND_STATE_SEND_ERROR;
+        return messageOwner.send_state == MESSAGE_SEND_STATE_SEND_ERROR && messageOwner.id < 0;
     }
 
     public boolean isSent() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index e105b6070..318b83b49 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -18,8 +18,10 @@
 import android.os.Bundle;
 import android.util.Base64;
 import android.util.SparseArray;
+import android.widget.Toast;
 
-import org.telegram.messenger.ApplicationLoader;
+import org.telegram.android.query.BotQuery;
+import org.telegram.android.query.StickersQuery;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -30,6 +32,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ChatActivity;
 import org.telegram.ui.ProfileActivity;
@@ -52,6 +55,7 @@
 
     public ArrayList<TLRPC.TL_dialog> dialogs = new ArrayList<>();
     public ArrayList<TLRPC.TL_dialog> dialogsServerOnly = new ArrayList<>();
+    public ArrayList<TLRPC.TL_dialog> dialogsGroupsOnly = new ArrayList<>();
     public ConcurrentHashMap<Long, TLRPC.TL_dialog> dialogs_dict = new ConcurrentHashMap<>(100, 1.0f, 2);
     public HashMap<Integer, MessageObject> dialogMessage = new HashMap<>();
     public ConcurrentHashMap<Long, ArrayList<PrintingUser>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
@@ -240,7 +244,7 @@ public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
     }
 
     public void addSupportUser() {
-        TLRPC.TL_userForeign user = new TLRPC.TL_userForeign();
+        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
         user.phone = "333";
         user.id = 333000;
         user.first_name = "Telegram";
@@ -249,7 +253,7 @@ public void addSupportUser() {
         user.photo = new TLRPC.TL_userProfilePhotoEmpty();
         putUser(user, true);
 
-        user = new TLRPC.TL_userForeign();
+        user = new TLRPC.TL_userForeign_old2();
         user.phone = "42777";
         user.id = 777000;
         user.first_name = "Telegram";
@@ -266,7 +270,7 @@ public void addSupportUser() {
         TLRPC.InputUser inputUser;
         if (user.id == UserConfig.getClientUserId()) {
             inputUser = new TLRPC.TL_inputUserSelf();
-        } else if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+        } else if (user.access_hash != 0) {
             inputUser = new TLRPC.TL_inputUserForeign();
             inputUser.user_id = user.id;
             inputUser.access_hash = user.access_hash;
@@ -374,11 +378,13 @@ public void cleanUp() {
         NotificationsController.getInstance().cleanup();
         SendMessagesHelper.getInstance().cleanUp();
         SecretChatHelper.getInstance().cleanUp();
+        StickersQuery.cleanup();
 
         dialogs_dict.clear();
         exportedChats.clear();
         dialogs.clear();
         dialogsServerOnly.clear();
+        dialogsGroupsOnly.clear();
         users.clear();
         usersByUsernames.clear();
         chats.clear();
@@ -597,6 +603,10 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            for (int a = 0; a < res.full_chat.bot_info.size(); a++) {
+                                TLRPC.BotInfo botInfo = res.full_chat.bot_info.get(a);
+                                BotQuery.putBotInfo(botInfo);
+                            }
                             exportedChats.put(chat_id, res.full_chat.exported_invite);
                             loadingFullChats.remove((Integer) chat_id);
                             loadedFullChats.add(chat_id);
@@ -635,10 +645,13 @@ public void run(final TLObject response, TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            TLRPC.TL_userFull userFull = (TLRPC.TL_userFull) response;
+                            if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
+                                BotQuery.putBotInfo(userFull.bot_info);
+                            }
                             loadingFullUsers.remove((Integer) user.id);
                             loadedFullUsers.add(user.id);
                             String names = user.first_name + user.last_name + user.username;
-                            TLRPC.TL_userFull userFull = (TLRPC.TL_userFull) response;
                             ArrayList<TLRPC.User> users = new ArrayList<>();
                             users.add(userFull.user);
                             putUsers(users, false);
@@ -646,6 +659,9 @@ public void run() {
                             if (!names.equals(userFull.user.first_name + userFull.user.last_name + userFull.user.username)) {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_NAME);
                             }
+                            if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.botInfoDidLoaded, userFull.bot_info, classGuid);
+                            }
                         }
                     });
                 } else {
@@ -1085,6 +1101,7 @@ public void deleteDialog(final long did, int offset, final boolean onlyHistory)
                 if (!onlyHistory) {
                     dialogs.remove(dialog);
                     dialogsServerOnly.remove(dialog);
+                    dialogsGroupsOnly.remove(dialog);
                     dialogs_dict.remove(did);
                     totalDialogsCount--;
                 } else {
@@ -1120,12 +1137,15 @@ public void run() {
         if (lower_part != 0) {
             TLRPC.TL_messages_deleteHistory req = new TLRPC.TL_messages_deleteHistory();
             req.offset = offset;
-            if (did < 0) {
+            if (lower_part < 0) {
                 req.peer = new TLRPC.TL_inputPeerChat();
                 req.peer.chat_id = -lower_part;
             } else {
                 TLRPC.User user = getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user == null) {
+                    return;
+                }
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.access_hash = user.access_hash;
                 } else {
@@ -1426,18 +1446,17 @@ public void sendTyping(final long dialog_id, final int action, int classGuid) {
                 req.peer.chat_id = -lower_part;
             } else {
                 TLRPC.User user = getUser(lower_part);
-                if (user != null) {
-                    if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
-                        req.peer = new TLRPC.TL_inputPeerForeign();
-                        req.peer.user_id = user.id;
-                        req.peer.access_hash = user.access_hash;
-                    } else {
-                        req.peer = new TLRPC.TL_inputPeerContact();
-                        req.peer.user_id = user.id;
-                    }
-                } else {
+                if (user == null) {
                     return;
                 }
+                if (user.access_hash != 0) {
+                    req.peer = new TLRPC.TL_inputPeerForeign();
+                    req.peer.user_id = user.id;
+                    req.peer.access_hash = user.access_hash;
+                } else {
+                    req.peer = new TLRPC.TL_inputPeerContact();
+                    req.peer.user_id = user.id;
+                }
             }
             if (action == 0) {
             req.action = new TLRPC.TL_sendMessageTypingAction();
@@ -1517,7 +1536,7 @@ public void loadMessages(final long dialog_id, final int count, final int max_id
                 if (user == null) {
                     return;
                 }
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.user_id = user.id;
                     req.peer.access_hash = user.access_hash;
@@ -1558,9 +1577,6 @@ public void run() {
                 if (!isCache) {
                     ImageLoader.saveMessagesThumbs(messagesRes.messages);
                 }
-                if (!isCache && allowCache) {
-                    MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
-                }
                 if (high_id != 1 && lower_id != 0 && isCache && messagesRes.messages.size() == 0 && (load_type == 0 || load_type == 2 || load_type == 3)) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
@@ -1570,15 +1586,27 @@ public void run() {
                     });
                     return;
                 }
-                final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
+                final HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
                 for (TLRPC.User u : messagesRes.users) {
-                    usersLocal.put(u.id, u);
+                    usersDict.put(u.id, u);
+                }
+                if (!isCache && allowCache) {
+                    for (int a = 0; a < messagesRes.messages.size(); a++) {
+                        TLRPC.Message message = messagesRes.messages.get(a);
+                        if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                            TLRPC.User user = usersDict.get(message.action.user_id);
+                            if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                                message.reply_markup = new TLRPC.TL_replyKeyboardHide();
+                            }
+                        }
+                    }
+                    MessagesStorage.getInstance().putMessages(messagesRes, dialog_id);
                 }
                 final ArrayList<MessageObject> objects = new ArrayList<>();
                 ArrayList<Integer> messagesToReload = null;
                 for (TLRPC.Message message : messagesRes.messages) {
                     message.dialog_id = dialog_id;
-                    objects.add(new MessageObject(message, usersLocal, true));
+                    objects.add(new MessageObject(message, usersDict, true));
                     if (isCache) {
                         if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
                         if (message.media.bytes.length == 0 || message.media.bytes.length == 1 && message.media.bytes[0] < TLRPC.LAYER) {
@@ -1752,6 +1780,7 @@ public void run() {
 
                         dialogs.clear();
                         dialogsServerOnly.clear();
+                        dialogsGroupsOnly.clear();
                         dialogs.addAll(dialogs_dict.values());
                         Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
                             @Override
@@ -1769,6 +1798,9 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             int high_id = (int) (d.id >> 32);
                             if ((int) d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
+                                if (d.id < 0) {
+                                    dialogsGroupsOnly.add(d);
+                                }
                             }
                         }
                         NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
@@ -1800,11 +1832,26 @@ public void run() {
                 }
                 final HashMap<Long, TLRPC.TL_dialog> new_dialogs_dict = new HashMap<>();
                 final HashMap<Integer, MessageObject> new_dialogMessage = new HashMap<>();
-                final HashMap<Integer, TLRPC.User> usersLocal = new HashMap<>();
+                final HashMap<Integer, TLRPC.User> usersDict = new HashMap<>();
                 int new_totalDialogsCount;
 
+                for (TLRPC.User u : dialogsRes.users) {
+                    usersDict.put(u.id, u);
+                }
+
                 if (!isCache) {
                     ImageLoader.saveMessagesThumbs(dialogsRes.messages);
+
+                    for (int a = 0; a < dialogsRes.messages.size(); a++) {
+                        TLRPC.Message message = dialogsRes.messages.get(a);
+                        if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                            TLRPC.User user = usersDict.get(message.action.user_id);
+                            if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                                message.reply_markup = new TLRPC.TL_replyKeyboardHide();
+                            }
+                        }
+                    }
+
                     MessagesStorage.getInstance().putDialogs(dialogsRes);
                 }
 
@@ -1815,12 +1862,8 @@ public void run() {
                     new_totalDialogsCount = dialogsRes.dialogs.size();
                 }
 
-                for (TLRPC.User u : dialogsRes.users) {
-                    usersLocal.put(u.id, u);
-                }
-
                 for (TLRPC.Message m : dialogsRes.messages) {
-                    new_dialogMessage.put(m.id, new MessageObject(m, usersLocal, false));
+                    new_dialogMessage.put(m.id, new MessageObject(m, usersDict, false));
                 }
                 for (TLRPC.TL_dialog d : dialogsRes.dialogs) {
                     if (d.last_message_date == 0) {
@@ -1889,6 +1932,7 @@ public void run() {
 
                         dialogs.clear();
                         dialogsServerOnly.clear();
+                        dialogsGroupsOnly.clear();
                         dialogs.addAll(dialogs_dict.values());
                         Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
                             @Override
@@ -1906,6 +1950,9 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             int high_id = (int) (d.id >> 32);
                             if ((int) d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
+                                if (d.id < 0) {
+                                    dialogsGroupsOnly.add(d);
+                                }
                             }
                         }
 
@@ -1971,7 +2018,7 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
                 if (user == null) {
                     return;
                 }
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.user_id = user.id;
                     req.peer.access_hash = user.access_hash;
@@ -2167,18 +2214,47 @@ public void run() {
         }
     }
 
-    public void addUserToChat(int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info, int count_fwd) {
+    public void sendBotStart(final TLRPC.User user, String botHash) {
+        TLRPC.TL_messages_startBot req = new TLRPC.TL_messages_startBot();
+        req.bot = getInputUser(user);
+        req.chat_id = 0;
+        req.start_param = botHash;
+        req.random_id = Utilities.random.nextLong();
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+                if (error != null) {
+                    return;
+                }
+                processUpdates((TLRPC.Updates) response, false);
+            }
+        });
+    }
+
+    public void addUserToChat(int chat_id, final TLRPC.User user, final TLRPC.ChatParticipants info, int count_fwd, String botHash) {
         if (user == null) {
             return;
         }
 
         if (chat_id > 0) {
+            TLObject request;
+
+            if (botHash == null) {
             TLRPC.TL_messages_addChatUser req = new TLRPC.TL_messages_addChatUser();
             req.chat_id = chat_id;
             req.fwd_limit = count_fwd;
             req.user_id = getInputUser(user);
+                request = req;
+            } else {
+                TLRPC.TL_messages_startBot req = new TLRPC.TL_messages_startBot();
+                req.bot = getInputUser(user);
+                req.chat_id = chat_id;
+                req.start_param = botHash;
+                req.random_id = Utilities.random.nextLong();
+                request = req;
+            }
 
-            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            ConnectionsManager.getInstance().performRpc(request, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error != null) {
@@ -2713,7 +2789,16 @@ public void run() {
                                         ImageLoader.saveMessagesThumbs(res.new_messages);
 
                                         final ArrayList<MessageObject> pushMessages = new ArrayList<>();
-                                        for (TLRPC.Message message : res.new_messages) {
+                                        for (int a = 0; a < res.new_messages.size(); a++) {
+                                            TLRPC.Message message = res.new_messages.get(a);
+
+                                            if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                                                TLRPC.User user = usersDict.get(message.action.user_id);
+                                                if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                                                    message.reply_markup = new TLRPC.TL_replyKeyboardHide();
+                                                }
+                                            }
+
                                             MessageObject obj = new MessageObject(message, usersDict, true);
 
                                             if (!obj.isOut() && obj.isUnread()) {
@@ -3313,6 +3398,9 @@ public void run() {
                         if (u.userId == update.user_id) {
                             exist = true;
                             u.lastTime = currentTime;
+                                if (u.action.getClass() != update.action.getClass()) {
+                                    printChanged = true;
+                                }
                                 u.action = update.action;
                             break;
                         }
@@ -3567,6 +3655,15 @@ public void run() {
         });
 
         if (!messagesArr.isEmpty()) {
+            for (int a = 0; a < messagesArr.size(); a++) {
+                TLRPC.Message message = messagesArr.get(a);
+                if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                    TLRPC.User user = usersDict.get(message.action.user_id);
+                    if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                        message.reply_markup = new TLRPC.TL_replyKeyboardHide();
+                    }
+                }
+            }
             MessagesStorage.getInstance().putMessages(messagesArr, true, true, false, MediaController.getInstance().getAutodownloadMask());
         }
 
@@ -3606,7 +3703,7 @@ public void run() {
                             }
                         } else if (update instanceof TLRPC.TL_updateUserName) {
                             if (currentUser != null) {
-                                if (!(currentUser instanceof TLRPC.TL_userContact)) {
+                                if (!UserObject.isContact(currentUser)) {
                                     currentUser.first_name = update.first_name;
                                     currentUser.last_name = update.last_name;
                                 }
@@ -3814,8 +3911,6 @@ public void run() {
         }
         if (!deletedMessages.isEmpty()) {
             MessagesStorage.getInstance().markMessagesAsDeleted(deletedMessages, true);
-        }
-        if (!deletedMessages.isEmpty()) {
             MessagesStorage.getInstance().updateDialogsWithDeletedMessages(deletedMessages, true);
         }
         if (!tasks.isEmpty()) {
@@ -3950,6 +4045,7 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
 
         if (changed) {
             dialogsServerOnly.clear();
+            dialogsGroupsOnly.clear();
             Collections.sort(dialogs, new Comparator<TLRPC.TL_dialog>() {
                 @Override
                 public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
@@ -3959,13 +4055,16 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         return 1;
                     } else {
                         return -1;
-                    }
+                }
                 }
             });
             for (TLRPC.TL_dialog d : dialogs) {
                 int high_id = (int) (d.id >> 32);
                 if ((int) d.id != 0 && high_id != 1) {
                     dialogsServerOnly.add(d);
+                    if (d.id < 0) {
+                        dialogsGroupsOnly.add(d);
+                    }
                 }
             }
         }
@@ -4024,6 +4123,14 @@ public void run() {
                                         fragment.presentFragment(new ChatActivity(args));
                                     }
                                 }
+                            } else {
+                                if (fragment != null && fragment.getParentActivity() != null) {
+                                    try {
+                                        Toast.makeText(fragment.getParentActivity(), LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
                             }
                         }
                     });
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index d16026dd7..b5030041b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -17,8 +17,8 @@
 import org.telegram.SQLite.SQLiteCursor;
 import org.telegram.SQLite.SQLiteDatabase;
 import org.telegram.SQLite.SQLitePreparedStatement;
+import org.telegram.android.query.BotQuery;
 import org.telegram.android.query.SharedMediaQuery;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuffersStorage;
 import org.telegram.messenger.ByteBufferDesc;
 import org.telegram.messenger.ConnectionsManager;
@@ -30,6 +30,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -121,7 +122,7 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                 database.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
                 database.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, PRIMARY KEY (id, type));").stepThis().dispose();
-                database.executeFast("CREATE TABLE stickers(id INTEGER PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
+                database.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
                 database.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
                 database.executeFast("CREATE TABLE webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
 
@@ -163,8 +164,13 @@ public void openDatabase() {
                 //kev-value
                 database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
 
+                //bots
+                database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
+                database.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
+                database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
+
                 //version
-                database.executeFast("PRAGMA user_version = 17").stepThis().dispose();
+                database.executeFast("PRAGMA user_version = 20").stepThis().dispose();
             } else {
                 try {
                     SQLiteCursor cursor = database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1");
@@ -195,7 +201,7 @@ public void openDatabase() {
                     }
                 }
                 int version = database.executeInt("PRAGMA user_version");
-                if (version < 17) {
+                if (version < 20) {
                     updateDbToLastVersion(version);
                 }
             }
@@ -349,8 +355,6 @@ public void run() {
                         version = 11;
                     }
                     if (version == 11) {
-                        database.executeFast("CREATE TABLE IF NOT EXISTS stickers(id INTEGER PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
-                        database.executeFast("PRAGMA user_version = 12").stepThis().dispose();
                         version = 12;
                     }
                     if (version == 12) {
@@ -389,7 +393,24 @@ public void run() {
                         database.executeFast("ALTER TABLE dialogs ADD COLUMN inbox_max INTEGER default 0").stepThis().dispose();
                         database.executeFast("ALTER TABLE dialogs ADD COLUMN outbox_max INTEGER default 0").stepThis().dispose();
                         database.executeFast("PRAGMA user_version = 17").stepThis().dispose();
-                        //version = 17;
+                        version = 17;
+                    }
+                    if (version == 17) {
+                        database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 18").stepThis().dispose();
+                        version = 18;
+                    }
+                    if (version == 18) {
+                        database.executeFast("DROP TABLE IF EXISTS stickers;").stepThis().dispose();
+                        database.executeFast("CREATE TABLE IF NOT EXISTS stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 19").stepThis().dispose();
+                        version = 19;
+                    }
+                    if (version == 19) {
+                        database.executeFast("CREATE TABLE IF NOT EXISTS bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
+                        database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 20").stepThis().dispose();
+                        //version = 20;
                     }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
@@ -934,8 +955,10 @@ public void run() {
 
                     database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM messages WHERE uid = " + did).stepThis().dispose();
+                    database.executeFast("DELETE FROM bot_keyboard WHERE uid = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + did).stepThis().dispose();
                     database.executeFast("DELETE FROM media_v2 WHERE uid = " + did).stepThis().dispose();
+                    BotQuery.clearBotKeyboard(did, null);
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -2762,6 +2785,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
             HashMap<Integer, Integer> mediaTypes = new HashMap<>();
             HashMap<Integer, Long> messagesIdsMap = new HashMap<>();
             HashMap<Integer, Long> messagesMediaIdsMap = new HashMap<>();
+            HashMap<Long, TLRPC.Message> botKeyboards = new HashMap<>();
             StringBuilder messageIds = new StringBuilder();
             StringBuilder messageMediaIds = new StringBuilder();
             SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
@@ -2796,6 +2820,17 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
                     messagesMediaIdsMap.put(message.id, dialog_id);
                     mediaTypes.put(message.id, SharedMediaQuery.getMediaType(message));
                 }
+
+                if (message.reply_markup != null && ((message.reply_markup.flags & 4) == 0 || (message.flags & 16) != 0)) {
+                    TLRPC.Message oldMessage = botKeyboards.get(dialog_id);
+                    if (oldMessage == null || oldMessage.id < message.id) {
+                        botKeyboards.put(dialog_id, message);
+                    }
+                }
+            }
+
+            for (HashMap.Entry<Long, TLRPC.Message> entry : botKeyboards.entrySet()) {
+                BotQuery.putBotKeyboard(entry.getKey(), entry.getValue());
             }
 
             if (messageMediaIds.length() > 0) {
@@ -2842,7 +2877,8 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
             }
 
             int downloadMediaMask = 0;
-            for (TLRPC.Message message : messages) {
+            for (int a = 0; a < messages.size(); a++) {
+                TLRPC.Message message = messages.get(a);
                 fixUnsupportedMedia(message);
 
                 long dialog_id = message.dialog_id;
@@ -3307,7 +3343,7 @@ private void updateUsersInternal(final ArrayList<TLRPC.User> users, final boolea
                     TLRPC.User updateUser = usersDict.get(user.id);
                     if (updateUser != null) {
                         if (updateUser.first_name != null && updateUser.last_name != null) {
-                            if (!(user instanceof TLRPC.TL_userContact)) {
+                            if (!UserObject.isContact(user)) {
                                 user.first_name = updateUser.first_name;
                                 user.last_name = updateUser.last_name;
                             }
@@ -3505,9 +3541,11 @@ private void markMessagesAsDeletedInternal(final ArrayList<Integer> messages) {
             cursor.dispose();
             FileLoader.getInstance().deleteFiles(filesToDelete);
             database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN(%s)", ids)).stepThis().dispose();
+            database.executeFast(String.format(Locale.US, "DELETE FROM bot_keyboard WHERE mid IN(%s)", ids)).stepThis().dispose();
             database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid IN(%s)", ids)).stepThis().dispose();
             database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid IN(%s)", ids)).stepThis().dispose();
             database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
+            BotQuery.clearBotKeyboard(0, messages);
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
@@ -3526,7 +3564,7 @@ private void updateDialogsWithDeletedMessagesInternal(final ArrayList<Integer> m
             }
             cursor.dispose();
             database.beginTransaction();
-            SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ? )) WHERE did = ?");
+            SQLitePreparedStatement state = database.executeFast("UPDATE dialogs SET unread_count = 0, last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ? )) WHERE did = ?");
             for (long did : dialogsToUpdate) {
                 state.requery();
                 state.bindLong(1, did);
@@ -3688,7 +3726,9 @@ public void run() {
                     if (!messages.messages.isEmpty()) {
                         SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
                         SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
-                        for (TLRPC.Message message : messages.messages) {
+                        TLRPC.Message botKeyboard = null;
+                        for (int a = 0; a < messages.messages.size(); a++) {
+                            TLRPC.Message message = messages.messages.get(a);
                             fixUnsupportedMedia(message);
                             state.requery();
                             ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
@@ -3714,9 +3754,18 @@ public void run() {
                                 state2.step();
                             }
                             buffersStorage.reuseFreeBuffer(data);
+
+                            if (message.reply_markup != null && ((message.reply_markup.flags & 4) == 0 || (message.flags & 16) != 0)) {
+                                if (botKeyboard == null || botKeyboard.id < message.id) {
+                                    botKeyboard = message;
+                                }
+                            }
                         }
                         state.dispose();
                         state2.dispose();
+                        if (botKeyboard != null) {
+                            BotQuery.putBotKeyboard(dialog_id, botKeyboard);
+                        }
                     }
                     putUsersInternal(messages.users);
                     putChatsInternal(messages.chats);
@@ -3853,7 +3902,8 @@ public void run() {
                 try {
                     database.beginTransaction();
                     final HashMap<Integer, TLRPC.Message> new_dialogMessage = new HashMap<>();
-                    for (TLRPC.Message message : dialogs.messages) {
+                    for (int a = 0; a < dialogs.messages.size(); a++) {
+                        TLRPC.Message message = dialogs.messages.get(a);
                         new_dialogMessage.put(message.id, message);
                     }
 
@@ -3863,7 +3913,9 @@ public void run() {
                         SQLitePreparedStatement state3 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                         SQLitePreparedStatement state4 = database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
 
-                        for (TLRPC.TL_dialog dialog : dialogs.dialogs) {
+                        for (int a = 0; a < dialogs.dialogs.size(); a++) {
+                            TLRPC.TL_dialog dialog = dialogs.dialogs.get(a);
+
                             state.requery();
                             state2.requery();
                             state4.requery();
@@ -3872,23 +3924,41 @@ public void run() {
                                 uid = -dialog.peer.chat_id;
                             }
                             TLRPC.Message message = new_dialogMessage.get(dialog.top_message);
-                            fixUnsupportedMedia(message);
-                            ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
-                            message.serializeToStream(data);
 
-                            state.bindInteger(1, message.id);
-                            state.bindInteger(2, uid);
-                            state.bindInteger(3, MessageObject.getUnreadFlags(message));
-                            state.bindInteger(4, message.send_state);
-                            state.bindInteger(5, message.date);
-                            state.bindByteBuffer(6, data.buffer);
-                            state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
-                            state.bindInteger(8, 0);
-                            state.bindInteger(9, 0);
-                            state.step();
+                            if (message != null) {
+                                if (message.reply_markup != null && ((message.reply_markup.flags & 4) == 0 || (message.flags & 16) != 0)) {
+                                    BotQuery.putBotKeyboard(uid, message);
+                                }
+
+                                fixUnsupportedMedia(message);
+                                ByteBufferDesc data = buffersStorage.getFreeBuffer(message.getObjectSize());
+                                message.serializeToStream(data);
+
+                                state.bindInteger(1, message.id);
+                                state.bindInteger(2, uid);
+                                state.bindInteger(3, MessageObject.getUnreadFlags(message));
+                                state.bindInteger(4, message.send_state);
+                                state.bindInteger(5, message.date);
+                                state.bindByteBuffer(6, data.buffer);
+                                state.bindInteger(7, (MessageObject.isOut(message) ? 1 : 0));
+                                state.bindInteger(8, 0);
+                                state.bindInteger(9, 0);
+                                state.step();
+
+                                if (SharedMediaQuery.canAddMessageToMedia(message)) {
+                                    state3.requery();
+                                    state3.bindLong(1, message.id);
+                                    state3.bindInteger(2, uid);
+                                    state3.bindInteger(3, message.date);
+                                    state3.bindInteger(4, SharedMediaQuery.getMediaType(message));
+                                    state3.bindByteBuffer(5, data.buffer);
+                                    state3.step();
+                                }
+                                buffersStorage.reuseFreeBuffer(data);
+                            }
 
                             state2.bindLong(1, uid);
-                            state2.bindInteger(2, message.date);
+                            state2.bindInteger(2, message != null ? message.date : 0);
                             state2.bindInteger(3, dialog.unread_count);
                             state2.bindInteger(4, dialog.top_message);
                             state2.bindInteger(5, dialog.read_inbox_max_id);
@@ -3898,17 +3968,6 @@ public void run() {
                             state4.bindLong(1, uid);
                             state4.bindInteger(2, dialog.notify_settings.mute_until != 0 ? 1 : 0);
                             state4.step();
-
-                            if (SharedMediaQuery.canAddMessageToMedia(message)) {
-                                state3.requery();
-                                state3.bindLong(1, message.id);
-                                state3.bindInteger(2, uid);
-                                state3.bindInteger(3, message.date);
-                                state3.bindInteger(4, SharedMediaQuery.getMediaType(message));
-                                state3.bindByteBuffer(5, data.buffer);
-                                state3.step();
-                            }
-                            buffersStorage.reuseFreeBuffer(data);
                         }
                         state.dispose();
                         state2.dispose();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 2092d378c..ffaf321a6 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -44,7 +44,6 @@
     public static final int pushMessagesUpdated = totalEvents++;
     public static final int blockedUsersDidLoaded = totalEvents++;
     public static final int openedChatChanged = totalEvents++;
-    public static final int hideEmojiKeyboard = totalEvents++;
     public static final int stopEncodingService = totalEvents++;
     public static final int didCreatedNewDeleteTask = totalEvents++;
     public static final int mainUserInfoChanged = totalEvents++;
@@ -62,6 +61,9 @@
     public static final int stickersDidLoaded = totalEvents++;
     public static final int didReplacedPhotoInMemCache = totalEvents++;
     public static final int messagesReadContent = totalEvents++;
+    public static final int botInfoDidLoaded = totalEvents++;
+    public static final int botKeyboardDidLoaded = totalEvents++;
+    public static final int chatSearchResultsAvailable = totalEvents++;
 
     public static final int httpFileDidLoaded = totalEvents++;
     public static final int httpFileDidFailedLoad = totalEvents++;
@@ -147,7 +149,7 @@ public void setAnimationInProgress(boolean value) {
 
     public void postNotificationName(int id, Object... args) {
         boolean allowDuringAnimation = false;
-        if (id == dialogsNeedReload || id == closeChats || id == messagesDidLoaded || id == mediaCountDidLoaded || id == mediaDidLoaded) {
+        if (id == dialogsNeedReload || id == closeChats || id == messagesDidLoaded || id == mediaCountDidLoaded || id == mediaDidLoaded || id == botInfoDidLoaded || id == botKeyboardDidLoaded) {
             allowDuringAnimation = true;
         }
         postNotificationNameInternal(id, allowDuringAnimation, args);
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java
deleted file mode 100644
index c47af63f3..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationDelay.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.0.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.android;
-
-import android.app.IntentService;
-import android.content.Intent;
-
-public class NotificationDelay extends IntentService {
-
-    public NotificationDelay() {
-        super("NotificationDelay");
-    }
-
-    @Override
-    protected void onHandleIntent(Intent intent) {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                NotificationsController.getInstance().notificationDelayReached();
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index e770145ed..7c0e401cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -24,6 +24,7 @@
 import android.media.SoundPool;
 import android.net.Uri;
 import android.os.Build;
+import android.os.PowerManager;
 import android.os.SystemClock;
 import android.provider.Settings;
 import android.support.v4.app.NotificationCompat;
@@ -32,7 +33,6 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.DispatchQueue;
 import org.telegram.messenger.FileLog;
@@ -41,6 +41,7 @@
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PopupNotificationActivity;
 
@@ -75,12 +76,18 @@
     private int lastBadgeCount;
     private String launcherClassName;
 
+    private Runnable notificationDelayRunnable;
+    private PowerManager.WakeLock notificationDelayWakelock;
+
     private long lastSoundPlay;
     private long lastSoundOutPlay;
     private SoundPool soundPool;
     private int soundIn;
     private int soundOut;
+    private boolean soundInLoaded;
+    private boolean soundOutLoaded;
     protected AudioManager audioManager;
+    private AlarmManager alarmManager;
 
     private static volatile NotificationsController Instance = null;
     public static NotificationsController getInstance() {
@@ -106,6 +113,37 @@ public NotificationsController() {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+        try {
+            alarmManager = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        try {
+            PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+            notificationDelayWakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "lock");
+            notificationDelayWakelock.setReferenceCounted(false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        notificationDelayRunnable = new Runnable() {
+            @Override
+            public void run() {
+                FileLog.e("tmessages", "delay reached");
+                if (!delayedPushMessages.isEmpty()) {
+                    showOrUpdateNotification(true);
+                    delayedPushMessages.clear();
+                }
+                try {
+                    if (notificationDelayWakelock.isHeld()) {
+                        notificationDelayWakelock.release();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        };
     }
 
     public void cleanup() {
@@ -118,8 +156,17 @@ public void cleanup() {
         popupMessages.clear();
         wearNotificationsIds.clear();
         autoNotificationsIds.clear();
+        delayedPushMessages.clear();
         notifyCheck = false;
         lastBadgeCount = 0;
+        try {
+            if (notificationDelayWakelock.isHeld()) {
+                notificationDelayWakelock.release();
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        setBadge(0);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         SharedPreferences.Editor editor = preferences.edit();
         editor.clear();
@@ -173,9 +220,9 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                 if (preferences.getBoolean("EnablePreviewAll", true)) {
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined) {
-                            msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                            msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                             String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long) messageObject.messageOwner.date) * 1000), LocaleController.formatterDay.format(((long) messageObject.messageOwner.date) * 1000));
                             msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.getCurrentUser().first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
@@ -184,33 +231,33 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                         if (messageObject.isMediaEmpty()) {
                             if (!shortMessage) {
                                 if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
+                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, UserObject.getUserName(user), messageObject.messageOwner.message);
                                 } else {
-                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
+                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, UserObject.getUserName(user));
                                 }
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
+                                msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, UserObject.getUserName(user));
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
-                            msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, UserObject.getUserName(user));
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
                             if (messageObject.isSticker()) {
-                                msg = LocaleController.formatString("NotificationMessageSticker", R.string.NotificationMessageSticker, ContactsController.formatName(user.first_name, user.last_name));
+                                msg = LocaleController.formatString("NotificationMessageSticker", R.string.NotificationMessageSticker, UserObject.getUserName(user));
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, ContactsController.formatName(user.first_name, user.last_name));
+                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, UserObject.getUserName(user));
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, ContactsController.formatName(user.first_name, user.last_name));
+                            msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, UserObject.getUserName(user));
                         }
                     }
                 } else {
-                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, ContactsController.formatName(user.first_name, user.last_name));
+                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, UserObject.getUserName(user));
                 }
             } else if (chat_id != 0) {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
@@ -218,35 +265,35 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                     if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
                             if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, UserObject.getUserName(user), chat.title);
                             } else {
                                 TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
                                 if (u2 == null) {
                                     return null;
                                 }
                                 if (user.id == u2.id) {
-                                    msg = LocaleController.formatString("NotificationGroupAddSelf", R.string.NotificationGroupAddSelf, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                    msg = LocaleController.formatString("NotificationGroupAddSelf", R.string.NotificationGroupAddSelf, UserObject.getUserName(user), chat.title);
                                 } else {
-                                msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
+                                    msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, UserObject.getUserName(user), chat.title, UserObject.getUserName(u2));
                             }
                             }
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatJoinedByLink) {
-                            msg = LocaleController.formatString("NotificationInvitedToGroupByLink", R.string.NotificationInvitedToGroupByLink, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationInvitedToGroupByLink", R.string.NotificationInvitedToGroupByLink, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                            msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, ContactsController.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
+                            msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, UserObject.getUserName(user), messageObject.messageOwner.action.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                            msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                             if (messageObject.messageOwner.action.user_id == UserConfig.getClientUserId()) {
-                                msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, UserObject.getUserName(user), chat.title);
                             } else if (messageObject.messageOwner.action.user_id == user.id) {
-                                msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, UserObject.getUserName(user), chat.title);
                             } else {
                                 TLRPC.User u2 = MessagesController.getInstance().getUser(messageObject.messageOwner.action.user_id);
                                 if (u2 == null) {
                                     return null;
                                 }
-                                msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, ContactsController.formatName(user.first_name, user.last_name), chat.title, ContactsController.formatName(u2.first_name, u2.last_name));
+                                msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, UserObject.getUserName(user), chat.title, UserObject.getUserName(u2));
                             }
                         } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatCreate) {
                             msg = messageObject.messageText.toString();
@@ -254,30 +301,30 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
                     } else {
                         if (messageObject.isMediaEmpty()) {
                             if (!shortMessage && messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, ContactsController.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
+                                msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, UserObject.getUserName(user), chat.title, messageObject.messageOwner.message);
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, UserObject.getUserName(user), chat.title);
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                            msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                            msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                            msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue) {
-                            msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, UserObject.getUserName(user), chat.title);
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
                             if (messageObject.isSticker()) {
-                                msg = LocaleController.formatString("NotificationMessageGroupSticker", R.string.NotificationMessageGroupSticker, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupSticker", R.string.NotificationMessageGroupSticker, UserObject.getUserName(user), chat.title);
                             } else {
-                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, UserObject.getUserName(user), chat.title);
                             }
                         } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                            msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                            msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, UserObject.getUserName(user), chat.title);
                         }
                     }
                 } else {
-                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, ContactsController.formatName(user.first_name, user.last_name), chat.title);
+                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, UserObject.getUserName(user), chat.title);
                 }
             }
         }
@@ -286,14 +333,13 @@ private String getStringForMessage(MessageObject messageObject, boolean shortMes
 
     private void scheduleNotificationRepeat() {
         try {
-            AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
             PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationRepeat.class), 0);
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
             int minutes = preferences.getInt("repeat_messages", 60);
             if (minutes > 0 && personal_count > 0) {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + minutes * 60 * 1000, pintent);
+                alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + minutes * 60 * 1000, pintent);
             } else {
-                alarm.cancel(pintent);
+                alarmManager.cancel(pintent);
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -303,32 +349,20 @@ private void scheduleNotificationRepeat() {
     private void scheduleNotificationDelay(boolean onlineReason) {
         try {
             FileLog.e("tmessages", "delay notification start, onlineReason = " + onlineReason);
-            AlarmManager alarm = (AlarmManager) ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
-            PendingIntent pintent = PendingIntent.getService(ApplicationLoader.applicationContext, 0, new Intent(ApplicationLoader.applicationContext, NotificationDelay.class), 0);
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            if (onlineReason) {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 3 * 1000, pintent);
-            } else {
-                alarm.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + 1000, pintent);
-            }
+            notificationDelayWakelock.acquire(10000);
+            AndroidUtilities.cancelRunOnUIThread(notificationDelayRunnable);
+            AndroidUtilities.runOnUIThread(notificationDelayRunnable, (onlineReason ? 3 * 1000 : 1000));
         } catch (Exception e) {
             FileLog.e("tmessages", e);
+            showOrUpdateNotification(notifyCheck);
         }
-    }
-
-    protected void notificationDelayReached() {
-        FileLog.e("tmessages", "delay reached");
-        if (!delayedPushMessages.isEmpty()) {
-        showOrUpdateNotification(true);
-            delayedPushMessages.clear();
-        }
-    }
+            }
 
     protected void repeatNotificationMaybe() {
         int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
         if (hour >= 11 && hour <= 22) {
             notificationManager.cancel(1);
-            showOrUpdateNotification(true);
+        showOrUpdateNotification(true);
         } else {
             scheduleNotificationRepeat();
         }
@@ -529,7 +563,7 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 if (chat != null) {
                     name = chat.title;
                 } else {
-                    name = ContactsController.formatName(user.first_name, user.last_name);
+                    name = UserObject.getUserName(user);
                 }
             }
 
@@ -673,9 +707,11 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
         if (Build.VERSION.SDK_INT < 19) {
             return;
         }
+
         ArrayList<Long> sortedDialogs = new ArrayList<>();
         HashMap<Long, ArrayList<MessageObject>> messagesByDialogs = new HashMap<>();
-        for (MessageObject messageObject : pushMessages) {
+        for (int a = 0; a < pushMessages.size(); a++) {
+            MessageObject messageObject = pushMessages.get(a);
             long dialog_id = messageObject.getDialogId();
             if ((int)dialog_id == 0) {
                 continue;
@@ -698,7 +734,8 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
         oldIdsAuto.putAll(autoNotificationsIds);
         autoNotificationsIds.clear();
 
-        for (long dialog_id : sortedDialogs) {
+        for (int b = 0; b < sortedDialogs.size(); b++) {
+            long dialog_id = sortedDialogs.get(b);
             ArrayList<MessageObject> messageObjects = messagesByDialogs.get(dialog_id);
             int max_id = messageObjects.get(0).getId();
             int max_date = messageObjects.get(0).messageOwner.date;
@@ -719,7 +756,7 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
             if (chat != null) {
                 name = chat.title;
             } else {
-                name = ContactsController.formatName(user.first_name, user.last_name);
+                name = UserObject.getUserName(user);
             }
 
             Integer notificationIdWear = oldIdsWear.get(dialog_id);
@@ -736,19 +773,6 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
                 oldIdsAuto.remove(dialog_id);
             }
 
-            Intent replyIntent = new Intent(ApplicationLoader.applicationContext, WearReplyReceiver.class);
-            replyIntent.putExtra("dialog_id", dialog_id);
-            replyIntent.putExtra("max_id", max_id);
-            PendingIntent replyPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdWear, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            RemoteInput remoteInputWear = new RemoteInput.Builder(EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).build();
-            String replyToString;
-            if (chat != null) {
-                replyToString = LocaleController.formatString("ReplyToGroup", R.string.ReplyToGroup, name);
-            } else {
-                replyToString = LocaleController.formatString("ReplyToUser", R.string.ReplyToUser, name);
-            }
-            NotificationCompat.Action action = new NotificationCompat.Action.Builder(R.drawable.ic_reply_icon, replyToString, replyPendingIntent).addRemoteInput(remoteInputWear).build();
-
             Intent msgHeardIntent = new Intent();
             msgHeardIntent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
             msgHeardIntent.setAction("org.telegram.messenger.ACTION_MESSAGE_HEARD");
@@ -769,6 +793,19 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
             .setReplyAction(msgReplyPendingIntent, remoteInputAuto)
             .setLatestTimestamp((long) max_date * 1000);
 
+            Intent replyIntent = new Intent(ApplicationLoader.applicationContext, WearReplyReceiver.class);
+            replyIntent.putExtra("dialog_id", dialog_id);
+            replyIntent.putExtra("max_id", max_id);
+            PendingIntent replyPendingIntent = PendingIntent.getBroadcast(ApplicationLoader.applicationContext, notificationIdWear, replyIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+            RemoteInput remoteInputWear = new RemoteInput.Builder(EXTRA_VOICE_REPLY).setLabel(LocaleController.getString("Reply", R.string.Reply)).build();
+            String replyToString;
+            if (chat != null) {
+                replyToString = LocaleController.formatString("ReplyToGroup", R.string.ReplyToGroup, name);
+            } else {
+                replyToString = LocaleController.formatString("ReplyToUser", R.string.ReplyToUser, name);
+            }
+            NotificationCompat.Action action = new NotificationCompat.Action.Builder(R.drawable.ic_reply_icon, replyToString, replyPendingIntent).addRemoteInput(remoteInputWear).build();
+
             String text = "";
             for (int a = messageObjects.size() - 1; a >= 0; a--) {
                 MessageObject messageObject = messageObjects.get(a);
@@ -789,8 +826,6 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
                 unreadConvBuilder.addMessage(message);
             }
 
-
-
             TLRPC.FileLocation photoPath = null;
             if (chat != null) {
                 if (chat.photo != null && chat.photo.photo_small != null && chat.photo.photo_small.volume_id != 0 && chat.photo.photo_small.local_id != 0) {
@@ -801,23 +836,6 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
                     photoPath = user.photo.photo_small;
                 }
             }
-            //notificationBuilder.extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()));
-            NotificationCompat.Builder builderAuto = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setSmallIcon(R.drawable.notification)
-                    .setColor(0xff2ca5e0)
-                    .setGroup("messages")
-                    .setLocalOnly(true)
-                    //.setGroupSummary(false)
-                    //.setCategory(NotificationCompat.CATEGORY_MESSAGE)
-                    .extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()));
-            if (photoPath != null) {
-                BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
-                if (img != null) {
-                    builderAuto.setLargeIcon(img.getBitmap());
-                }
-            }
-            notificationManager.notify("android_auto", notificationIdAuto, builderAuto.build());
-            autoNotificationsIds.put(dialog_id, notificationIdAuto);
 
             Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
             intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
@@ -838,6 +856,7 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
                     .setGroupSummary(false)
                     .setContentIntent(contentIntent)
                     .extend(new NotificationCompat.WearableExtender().addAction(action))
+                    .extend(new NotificationCompat.CarExtender().setUnreadConversation(unreadConvBuilder.build()))
                     .setCategory(NotificationCompat.CATEGORY_MESSAGE);
             if (photoPath != null) {
                 BitmapDrawable img = ImageLoader.getInstance().getImageFromMemory(photoPath, null, "50_50");
@@ -854,9 +873,6 @@ public void showExtraNotifications(NotificationCompat.Builder notificationBuilde
             wearNotificationsIds.put(dialog_id, notificationIdWear);
         }
 
-        for (HashMap.Entry<Long, Integer> entry : oldIdsAuto.entrySet()) {
-            notificationManager.cancel(entry.getValue());
-        }
         for (HashMap.Entry<Long, Integer> entry : oldIdsWear.entrySet()) {
             notificationManager.cancel(entry.getValue());
         }
@@ -919,6 +935,9 @@ public void processReadMessages(HashMap<Integer, Integer> inbox, long dialog_id,
                     }
                 }
             }
+            if (pushMessages.isEmpty() && !popupMessages.isEmpty()) {
+                popupMessages.clear();
+            }
         }
         if (dialog_id != 0 && (max_id != 0 || max_date != 0)) {
             for (int a = 0; a < pushMessages.size(); a++) {
@@ -952,6 +971,9 @@ public void processReadMessages(HashMap<Integer, Integer> inbox, long dialog_id,
                     }
                 }
             }
+            if (pushMessages.isEmpty() && !popupMessages.isEmpty()) {
+                popupMessages.clear();
+            }
         }
         if (oldCount != popupMessages.size()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
@@ -984,7 +1006,7 @@ public void run() {
                     }
                     try {
                         if (soundPool == null) {
-                            soundPool = new SoundPool(4, AudioManager.STREAM_SYSTEM, 0);
+                            soundPool = new SoundPool(2, AudioManager.STREAM_SYSTEM, 0);
                             soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
                                 @Override
                                 public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
@@ -994,10 +1016,13 @@ public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
                                 }
                             });
                         }
-                        if (soundIn == 0) {
+                        if (soundIn == 0 && !soundInLoaded) {
+                            soundInLoaded = true;
                             soundIn = soundPool.load(ApplicationLoader.applicationContext, R.raw.sound_in, 1);
                         }
+                        if (soundIn != 0) {
                         soundPool.play(soundIn, 1.0f, 1.0f, 1, 0, 1.0f);
+                        }
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
@@ -1028,7 +1053,7 @@ public void run() {
                     }
                     lastSoundOutPlay = System.currentTimeMillis();
                     if (soundPool == null) {
-                        soundPool = new SoundPool(4, AudioManager.STREAM_SYSTEM, 0);
+                        soundPool = new SoundPool(2, AudioManager.STREAM_SYSTEM, 0);
                         soundPool.setOnLoadCompleteListener(new SoundPool.OnLoadCompleteListener() {
                             @Override
                             public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
@@ -1038,10 +1063,13 @@ public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
                             }
                         });
                     }
-                    if (soundOut == 0) {
+                    if (soundOut == 0 && !soundOutLoaded) {
+                        soundOutLoaded = true;
                         soundOut = soundPool.load(ApplicationLoader.applicationContext, R.raw.sound_out, 1);
                     }
+                    if (soundOut != 0) {
                     soundPool.play(soundOut, 1.0f, 1.0f, 1, 0, 1.0f);
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -1071,7 +1099,8 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         int popup = 0;
 
-        for (MessageObject messageObject : messageObjects) {
+        for (int a = 0; a < messageObjects.size(); a++) {
+            MessageObject messageObject = messageObjects.get(a);
             if (pushMessagesDict.containsKey(messageObject.getId())) {
                 continue;
             }
@@ -1175,6 +1204,9 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
                         popupMessages.remove(messageObject);
                     }
                 }
+                if (pushMessages.isEmpty() && !popupMessages.isEmpty()) {
+                    popupMessages.clear();
+                }
             } else if (canAddValue) {
                 total_unread_count += newCount;
                 pushDialogs.put(dialog_id, newCount);
@@ -1190,7 +1222,7 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
         }
         notifyCheck = false;
         if (preferences.getBoolean("badgeNumber", true)) {
-            setBadge(ApplicationLoader.applicationContext, total_unread_count);
+            setBadge(total_unread_count);
         }
     }
 
@@ -1264,15 +1296,15 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
         showOrUpdateNotification(SystemClock.uptimeMillis() / 1000 < 60);
 
         if (preferences.getBoolean("badgeNumber", true)) {
-            setBadge(ApplicationLoader.applicationContext, total_unread_count);
+            setBadge(total_unread_count);
         }
     }
 
     public void setBadgeEnabled(boolean enabled) {
-        setBadge(ApplicationLoader.applicationContext, enabled ? total_unread_count : 0);
+        setBadge(enabled ? total_unread_count : 0);
     }
 
-    private void setBadge(final Context context, final int count) {
+    private void setBadge(final int count) {
         notificationsQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -1283,14 +1315,14 @@ public void run() {
                 try {
                     ContentValues cv = new ContentValues();
                     //cv.put("tag", "org.telegram.messenger/org.telegram.ui.LaunchActivity");
-                    cv.put("tag", context.getPackageName() + "/org.telegram.ui.LaunchActivity"); //Plus
+                    cv.put("tag", ApplicationLoader.applicationContext.getPackageName() + "/org.telegram.ui.LaunchActivity"); //Plus
                     cv.put("count", count);
-                    context.getContentResolver().insert(Uri.parse("content://com.teslacoilsw.notifier/unread_count"), cv);
+                    ApplicationLoader.applicationContext.getContentResolver().insert(Uri.parse("content://com.teslacoilsw.notifier/unread_count"), cv);
                 } catch (Throwable e) {
                      //ignore
                 }
                 try {
-                    launcherClassName = getLauncherClassName(context);
+                    launcherClassName = getLauncherClassName(ApplicationLoader.applicationContext);
                     if (launcherClassName == null) {
                         return;
                     }
@@ -1300,9 +1332,9 @@ public void run() {
                             try {
                     Intent intent = new Intent("android.intent.action.BADGE_COUNT_UPDATE");
                     intent.putExtra("badge_count", count);
-                    intent.putExtra("badge_count_package_name", context.getPackageName());
+                                intent.putExtra("badge_count_package_name", ApplicationLoader.applicationContext.getPackageName());
                     intent.putExtra("badge_count_class_name", launcherClassName);
-                    context.sendBroadcast(intent);
+                                ApplicationLoader.applicationContext.sendBroadcast(intent);
                             } catch (Exception e) {
                                 FileLog.e("tmessages", e);
                             }
@@ -1368,7 +1400,7 @@ public static void updateServerNotificationsSettings(long dialog_id) {
             if (user == null) {
                 return;
             }
-            if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+            if (user.access_hash != 0) {
                 ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerForeign();
                 ((TLRPC.TL_inputNotifyPeer)req.peer).peer.access_hash = user.access_hash;
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
index 6a9bdf61e..90c1e2bf1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
@@ -12,9 +12,9 @@
 import android.content.Context;
 import android.content.Intent;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
 
 public class ScreenReceiver extends BroadcastReceiver {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index 2c9b6a1ad..060d21799 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -19,7 +19,6 @@
 import android.webkit.MimeTypeMap;
 import android.widget.Toast;
 
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
@@ -29,6 +28,7 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
+import org.telegram.messenger.ApplicationLoader;
 
 import java.io.File;
 import java.io.RandomAccessFile;
@@ -449,7 +449,7 @@ public void processForwardFromMyName(MessageObject messageObject, long did) {
             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVenue || messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
                 sendMessage(messageObject.messageOwner.media, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.phone_number != null) {
-                TLRPC.User user = new TLRPC.TL_userContact();
+                TLRPC.User user = new TLRPC.TL_userContact_old2();
                 user.phone = messageObject.messageOwner.media.phone_number;
                 user.first_name = messageObject.messageOwner.media.first_name;
                 user.last_name = messageObject.messageOwner.media.last_name;
@@ -503,12 +503,14 @@ public void sendSticker(TLRPC.Document document, long peer, MessageObject replyi
                 }
             }
         }
-        for (int a = 0; a < document.attributes.size(); a++) {
-            TLRPC.DocumentAttribute attribute = document.attributes.get(a);
-            if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
-                document.attributes.remove(a);
-                document.attributes.add(new TLRPC.TL_documentAttributeSticker_old());
-                break;
+        if ((int) peer == 0) {
+            for (int a = 0; a < document.attributes.size(); a++) {
+                TLRPC.DocumentAttribute attribute = document.attributes.get(a);
+                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
+                    document.attributes.remove(a);
+                    document.attributes.add(new TLRPC.TL_documentAttributeSticker_old());
+                    break;
+                }
             }
         }
         SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, peer, replyingMessageObject);
@@ -537,7 +539,7 @@ public void sendMessage(ArrayList<MessageObject> messages, long peer) {
             if (sendToUser == null) {
                 return;
             }
-            if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
+            if (sendToUser.access_hash != 0) {
                 sendToPeer = new TLRPC.TL_inputPeerForeign();
                 sendToPeer.user_id = sendToUser.id;
                 sendToPeer.access_hash = sendToUser.access_hash;
@@ -736,6 +738,15 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
         ArrayList<TLRPC.InputUser> sendToPeers = null;
         if (lower_id == 0) {
             encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat == null) {
+                if (msgObj != null) {
+                    MessagesStorage.getInstance().markMessageAsSendError(msgObj.getId());
+                    msgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, msgObj.getId());
+                    processSentMessage(msgObj.getId());
+                }
+                return;
+            }
         }
 
         if (retry) {
@@ -766,7 +777,7 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                     video = (TLRPC.TL_video) newMsg.media.video;
                 }
             } else if (msgObj.type == 12) {
-                user = new TLRPC.TL_userRequest();
+                user = new TLRPC.TL_userRequest_old2();
                 user.phone = newMsg.media.phone_number;
                 user.first_name = newMsg.media.first_name;
                 user.last_name = newMsg.media.last_name;
@@ -862,6 +873,12 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                 newMsg.media.first_name = user.first_name;
                 newMsg.media.last_name = user.last_name;
                 newMsg.media.user_id = user.id;
+                if (newMsg.media.first_name == null) {
+                    user.first_name = newMsg.media.first_name = "";
+                }
+                if (newMsg.media.last_name == null) {
+                    user.last_name = newMsg.media.last_name = "";
+                }
                 newMsg.message = "";
                 type = 6;
             } else if (document != null) {
@@ -941,7 +958,10 @@ private void sendMessage(String message, TLRPC.MessageMedia location, TLRPC.TL_p
                         processSentMessage(newMsg.id);
                         return;
                     }
-                    if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
+                    if ((sendToUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                        newMsg.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
+                    }
+                    if (sendToUser.access_hash != 0) {
                         sendToPeer = new TLRPC.TL_inputPeerForeign();
                         sendToPeer.user_id = sendToUser.id;
                         sendToPeer.access_hash = sendToUser.access_hash;
@@ -1758,6 +1778,8 @@ private void processSentMessage(TLRPC.Message newMsg, TLRPC.Message sentMessage,
                     sentMessage.attachPath = newMsg.attachPath;
                 }
             }
+        } else if (sentMessage.media instanceof TLRPC.TL_messageMediaContact && newMsg.media instanceof TLRPC.TL_messageMediaContact) {
+            newMsg.media = sentMessage.media;
         }
     }
 
@@ -2162,15 +2184,30 @@ private static String getTrimmedString(String src) {
         return src;
     }
 
-    public static void prepareSendingText(String text, long dialog_id) {
-        text = getTrimmedString(text);
-        if (text.length() != 0) {
-            int count = (int) Math.ceil(text.length() / 4096.0f);
-            for (int a = 0; a < count; a++) {
-                String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, null, null, true);
+    public static void prepareSendingText(final String text, final long dialog_id) {
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                String textFinal = getTrimmedString(text);
+                                if (textFinal.length() != 0) {
+                                    int count = (int) Math.ceil(textFinal.length() / 4096.0f);
+                                    for (int a = 0; a < count; a++) {
+                                        String mess = textFinal.substring(a * 4096, Math.min((a + 1) * 4096, textFinal.length()));
+                                        SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, null, null, true);
+                                    }
+                                }
+                            }
+                        });
+                    }
+                });
             }
-        }
+        });
     }
 
     public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id, final MessageObject reply_to_msg, final ArrayList<String> captions) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
index 345b0e49d..f1acd0285 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/query/SharedMediaQuery.java
@@ -55,7 +55,10 @@ public static void loadMedia(final long uid, final int offset, final int count,
                 req.peer.chat_id = -lower_part;
             } else {
                 TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user == null) {
+                    return;
+                }
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.access_hash = user.access_hash;
                 } else {
@@ -98,7 +101,10 @@ public static void getMediaCount(final long uid, final int type, final int class
                 req.peer.chat_id = -lower_part;
             } else {
                 TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user == null) {
+                    return;
+                }
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.access_hash = user.access_hash;
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java
index 9b247d8e8..d4187165f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/query/StickersQuery.java
@@ -33,23 +33,31 @@
 import org.telegram.ui.Components.StickersAlert;
 
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
 
 public class StickersQuery {
 
-    private static String hash;
+    private static String loadHash;
     private static int loadDate;
-    private static ArrayList<TLRPC.Document> stickers = new ArrayList<>();
-    private static HashMap<String, ArrayList<TLRPC.Document>> allStickers = new HashMap<>();
-    private static ArrayList<TLRPC.TL_stickerPack> stickerPacks = new ArrayList<>();
-    private static ArrayList<TLRPC.TL_stickerSet> stickerSets = new ArrayList<>();
-    private static HashMap<Long, ArrayList<TLRPC.Document>> stickersBySets = new HashMap<>();
+    private static ArrayList<TLRPC.TL_messages_stickerSet> stickerSets = new ArrayList<>();
+    private static HashMap<Long, TLRPC.TL_messages_stickerSet> stickerSetsById = new HashMap<>();
     private static HashMap<Long, String> stickersByEmoji = new HashMap<>();
+    private static HashMap<Long, TLRPC.Document> stickersById = new HashMap<>();
+    private static HashMap<String, ArrayList<TLRPC.Document>> allStickers = new HashMap<>();
+
     private static boolean loadingStickers;
     private static boolean stickersLoaded;
-    private static boolean hideMainStickersPack;
+
+    public static void cleanup() {
+        loadHash = null;
+        loadDate = 0;
+        allStickers.clear();
+        stickerSets.clear();
+        stickersByEmoji.clear();
+        stickerSetsById.clear();
+        loadingStickers = false;
+        stickersLoaded = false;
+    }
 
     public static void checkStickers() {
         if (!loadingStickers && (!stickersLoaded || loadDate < (System.currentTimeMillis() / 1000 - 60 * 60))) {
@@ -61,28 +69,28 @@ public static boolean isLoadingStickers() {
         return loadingStickers;
     }
 
-    public static HashMap<String, ArrayList<TLRPC.Document>> getAllStickers() {
-        return allStickers;
-    }
-
-    public static ArrayList<TLRPC.Document> getStickersForSet(long id) {
-        return stickersBySets.get(id);
-    }
-
-    public static ArrayList<TLRPC.TL_stickerPack> getStickerPacks() {
-        return stickerPacks;
+    public static TLRPC.Document getStickerById(long id) {
+        TLRPC.Document document = stickersById.get(id);
+        if (document != null) {
+            long setId = getStickerSetId(document);
+            TLRPC.TL_messages_stickerSet stickerSet = stickerSetsById.get(setId);
+            if (stickerSet != null && (stickerSet.set.flags & 2) != 0) {
+                return null;
+            }
+        }
+        return document;
     }
 
-    public static ArrayList<TLRPC.Document> getStickers() {
-        return stickers;
+    public static HashMap<String, ArrayList<TLRPC.Document>> getAllStickers() {
+        return allStickers;
     }
 
-    public static ArrayList<TLRPC.TL_stickerSet> getStickerSets() {
+    public static ArrayList<TLRPC.TL_messages_stickerSet> getStickerSets() {
         return stickerSets;
     }
 
     public static boolean isStickerPackInstalled(long id) {
-        return stickersBySets.containsKey(id);
+        return stickerSetsById.containsKey(id);
     }
 
     public static String getEmojiForSticker(long id) {
@@ -99,43 +107,91 @@ public static void loadStickers(boolean cache, boolean force) {
             MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    TLRPC.messages_AllStickers result = null;
+                    ArrayList<TLRPC.TL_messages_stickerSet> newStickerArray = null;
                     int date = 0;
+                    String hash = null;
                     try {
-                        SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT value FROM keyvalue WHERE id = 'hide_stickers'");
-                        if (cursor.next()) {
-                            int value = Utilities.parseInt(cursor.stringValue(0));
-                            hideMainStickersPack = value == 1;
-                        }
-                        cursor.dispose();
-
-                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT data, date FROM stickers WHERE 1");
-                        ArrayList<TLRPC.User> loadedUsers = new ArrayList<>();
+                        SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT data, date, hash FROM stickers_v2 WHERE 1");
                         if (cursor.next()) {
                             ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
                             if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
-                                result = TLRPC.messages_AllStickers.TLdeserialize(data, data.readInt32(false), false);
+                                if (newStickerArray == null) {
+                                    newStickerArray = new ArrayList<>();
+                                }
+                                int count = data.readInt32(false);
+                                for (int a = 0; a < count; a++) {
+                                    TLRPC.TL_messages_stickerSet stickerSet = TLRPC.TL_messages_stickerSet.TLdeserialize(data, data.readInt32(false), false);
+                                    newStickerArray.add(stickerSet);
+                                }
                             }
                             date = cursor.intValue(1);
+                            hash = cursor.stringValue(2);
                             MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
                         }
                         cursor.dispose();
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
-                    processLoadedStickers(result, true, date);
+                    processLoadedStickers(newStickerArray, true, date, hash);
                 }
             });
         } else {
             TLRPC.TL_messages_getAllStickers req = new TLRPC.TL_messages_getAllStickers();
-            req.hash = hash == null || force ? "" : hash;
+            req.hash = loadHash == null || force ? "" : loadHash;
             ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
                 @Override
                 public void run(final TLObject response, final TLRPC.TL_error error) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            processLoadedStickers((TLRPC.messages_AllStickers) response, false, (int) (System.currentTimeMillis() / 1000));
+                            if (response instanceof TLRPC.TL_messages_allStickers) {
+                                final HashMap<Long, TLRPC.TL_messages_stickerSet> newStickerSets = new HashMap<>();
+                                final ArrayList<TLRPC.TL_messages_stickerSet> newStickerArray = new ArrayList<>();
+                                final TLRPC.TL_messages_allStickers res = (TLRPC.TL_messages_allStickers) response;
+
+                                for (int a = 0; a < res.sets.size(); a++) {
+                                    final TLRPC.StickerSet stickerSet = res.sets.get(a);
+
+                                    TLRPC.TL_messages_stickerSet oldSet = stickerSetsById.get(stickerSet.id);
+                                    if (oldSet != null && oldSet.set.hash == stickerSet.hash) {
+                                        oldSet.set.flags = stickerSet.flags;
+                                        newStickerSets.put(oldSet.set.id, oldSet);
+                                        newStickerArray.add(oldSet);
+
+                                        if (newStickerSets.size() == res.sets.size()) {
+                                            processLoadedStickers(newStickerArray, false, (int) (System.currentTimeMillis() / 1000), res.hash);
+                                        }
+                                        continue;
+                                    }
+
+                                    newStickerArray.add(null);
+                                    final int index = a;
+
+                                    TLRPC.TL_messages_getStickerSet req = new TLRPC.TL_messages_getStickerSet();
+                                    req.stickerset = new TLRPC.TL_inputStickerSetID();
+                                    req.stickerset.id = stickerSet.id;
+                                    req.stickerset.access_hash = stickerSet.access_hash;
+
+                                    ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                        @Override
+                                        public void run(final TLObject response, final TLRPC.TL_error error) {
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    TLRPC.TL_messages_stickerSet res1 = (TLRPC.TL_messages_stickerSet) response;
+                                                    newStickerArray.set(index, res1);
+                                                    newStickerSets.put(stickerSet.id, res1);
+                                                    if (newStickerSets.size() == res.sets.size()) {
+                                                        processLoadedStickers(newStickerArray, false, (int) (System.currentTimeMillis() / 1000), res.hash);
+                                                    }
+                                                }
+                                            });
+                                        }
+                                    });
+                                }
+                            } else {
+                                processLoadedStickers(null, false, (int) (System.currentTimeMillis() / 1000), error == null ? "" : null);
+                            }
                         }
                     });
                 }
@@ -143,18 +199,26 @@ public void run() {
         }
     }
 
-    private static void putStickersToCache(final TLRPC.TL_messages_allStickers stickers) {
+    private static void putStickersToCache(final ArrayList<TLRPC.TL_messages_stickerSet> stickers, final int date, final String hash) {
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
                 try {
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO stickers VALUES(?, ?, ?)");
+                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO stickers_v2 VALUES(?, ?, ?, ?)");
                     state.requery();
-                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(stickers.getObjectSize());
-                    stickers.serializeToStream(data);
+                    int size = 4;
+                    for (int a = 0; a < stickers.size(); a++) {
+                        size += stickers.get(a).getObjectSize();
+                    }
+                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(size);
+                    data.writeInt32(stickers.size());
+                    for (int a = 0; a < stickers.size(); a++) {
+                        stickers.get(a).serializeToStream(data);
+                    }
                     state.bindInteger(1, 1);
                     state.bindByteBuffer(2, data.buffer);
-                    state.bindInteger(3, (int) (System.currentTimeMillis() / 1000));
+                    state.bindInteger(3, date);
+                    state.bindString(4, hash);
                     state.step();
                     MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
                     state.dispose();
@@ -177,7 +241,7 @@ private static long getStickerSetId(TLRPC.Document document) {
         return -1;
     }
 
-    private static void processLoadedStickers(final TLRPC.messages_AllStickers res, final boolean cache, final int date) {
+    private static void processLoadedStickers(final ArrayList<TLRPC.TL_messages_stickerSet> res, final boolean cache, final int date, final String hash) {
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
@@ -188,104 +252,77 @@ public void run() {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                if ((res == null || date < (int) (System.currentTimeMillis() / 1000 - 60 * 60)) && cache) {
+                if (cache && (res == null || date < (int) (System.currentTimeMillis() / 1000 - 60 * 60)) || !cache && res == null && hash == null) {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
+                            if (res != null && cache && hash != null) {
+                                loadHash = hash;
+                            }
                             loadStickers(false, false);
                         }
-                    });
+                    }, res == null && !cache ? 1000 : 0);
                     if (res == null) {
                         return;
                     }
                 }
-                if (res instanceof TLRPC.TL_messages_allStickers) {
-                    HashMap<Long, TLRPC.Document> documents = new HashMap<>();
-                    final HashMap<Long, ArrayList<TLRPC.Document>> sets = new HashMap<>();
-                    final ArrayList<TLRPC.Document> allDocuments = new ArrayList<>();
-                    final HashMap<Long, String> stickersEmoji = new HashMap<>();
-                    for (TLRPC.Document document : res.documents) {
-                        if (document == null) {
+                if (res != null) {
+                    final ArrayList<TLRPC.TL_messages_stickerSet> stickerSetsNew = new ArrayList<>();
+                    final HashMap<Long, TLRPC.TL_messages_stickerSet> stickerSetsByIdNew = new HashMap<>();
+                    final HashMap<Long, String> stickersByEmojiNew = new HashMap<>();
+                    final HashMap<Long, TLRPC.Document> stickersByIdNew = new HashMap<>();
+                    final HashMap<String, ArrayList<TLRPC.Document>> allStickersNew = new HashMap<>();
+
+                    for (int a = 0; a < res.size(); a++) {
+                        TLRPC.TL_messages_stickerSet stickerSet = res.get(a);
+                        if (stickerSet == null) {
                             continue;
                         }
+                        stickerSetsNew.add(stickerSet);
+                        stickerSetsByIdNew.put(stickerSet.set.id, stickerSet);
 
-                        documents.put(document.id, document);
-                        long setId = getStickerSetId(document);
-                        if (setId != -1 || setId == -1 && !hideMainStickersPack) {
-                            allDocuments.add(document);
-                        }
-                        ArrayList<TLRPC.Document> docs = sets.get(setId);
-                        if (docs == null) {
-                            docs = new ArrayList<>();
-                            sets.put(setId, docs);
-                            if (setId == -1) {
-                                boolean contain = false;
-                                for (TLRPC.TL_stickerSet set : res.sets) {
-                                    if (set.id == setId) {
-                                        contain = true;
-                                        break;
-                                    }
-                                }
-                                if (!contain) {
-                                    TLRPC.TL_stickerSet set = new TLRPC.TL_stickerSet();
-                                    set.title = set.short_name = "";
-                                    set.id = -1;
-                                    res.sets.add(0, set);
-                                }
+                        for (int b = 0; b < stickerSet.documents.size(); b++) {
+                            TLRPC.Document document = stickerSet.documents.get(b);
+                            if (document == null || document instanceof TLRPC.TL_documentEmpty) {
+                                continue;
                             }
+                            stickersByIdNew.put(document.id, document);
                         }
-                        docs.add(document);
-                    }
-                    final HashMap<String, ArrayList<TLRPC.Document>> result = new HashMap<>();
-                    for (TLRPC.TL_stickerPack stickerPack : res.packs) {
-                        if (stickerPack != null && stickerPack.emoticon != null) {
-                            stickerPack.emoticon = stickerPack.emoticon.replace("\uFE0F", "");
-                            ArrayList<TLRPC.Document> arrayList = result.get(stickerPack.emoticon);
-                            for (Long id : stickerPack.documents) {
-                                if (!stickersEmoji.containsKey(id)) {
-                                    stickersEmoji.put(id, stickerPack.emoticon);
+                        if ((stickerSet.set.flags & 2) == 0) {
+                            for (int b = 0; b < stickerSet.packs.size(); b++) {
+                                TLRPC.TL_stickerPack stickerPack = stickerSet.packs.get(b);
+                                if (stickerPack == null || stickerPack.emoticon == null) {
+                                    continue;
                                 }
-                                TLRPC.Document document = documents.get(id);
-                                if (document != null) {
-                                    long setId = getStickerSetId(document);
-                                    if (setId == -1 && hideMainStickersPack) {
-                                        continue;
-                                    }
-
-                                    if (arrayList == null) {
-                                        arrayList = new ArrayList<>();
-                                        result.put(stickerPack.emoticon, arrayList);
+                                stickerPack.emoticon = stickerPack.emoticon.replace("\uFE0F", "");
+                                ArrayList<TLRPC.Document> arrayList = allStickersNew.get(stickerPack.emoticon);
+                                if (arrayList == null) {
+                                    arrayList = new ArrayList<>();
+                                    allStickersNew.put(stickerPack.emoticon, arrayList);
+                                }
+                                for (int c = 0; c < stickerPack.documents.size(); c++) {
+                                    Long id = stickerPack.documents.get(c);
+                                    if (!stickersByEmojiNew.containsKey(id)) {
+                                        stickersByEmojiNew.put(id, stickerPack.emoticon);
                                     }
-                                    arrayList.add(document);
+                                    arrayList.add(stickersByIdNew.get(id));
                                 }
                             }
                         }
                     }
-                    Collections.sort(allDocuments, new Comparator<TLRPC.Document>() {
-                        @Override
-                        public int compare(TLRPC.Document lhs, TLRPC.Document rhs) {
-                            long lid = getStickerSetId(lhs);
-                            long rid = getStickerSetId(rhs);
-                            if (lid < rid) {
-                                return -1;
-                            } else if (lid > rid) {
-                                return 1;
-                            }
-                            return 0;
-                        }
-                    });
+
                     if (!cache) {
-                        putStickersToCache((TLRPC.TL_messages_allStickers) res);
+                        putStickersToCache(stickerSetsNew, date, hash);
                     }
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            stickerSets = res.sets;
-                            allStickers = result;
-                            stickers = allDocuments;
-                            stickersBySets = sets;
-                            stickersByEmoji = stickersEmoji;
-                            hash = res.hash;
+                            stickersById = stickersByIdNew;
+                            stickerSetsById = stickerSetsByIdNew;
+                            stickerSets = stickerSetsNew;
+                            allStickers = allStickersNew;
+                            stickersByEmoji = stickersByEmojiNew;
+                            loadHash = hash;
                             loadDate = date;
                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.stickersDidLoaded);
                         }
@@ -323,7 +360,7 @@ public void run() {
                             if (error == null) {
                                 final TLRPC.TL_messages_stickerSet res = (TLRPC.TL_messages_stickerSet) response;
 
-                                StickersAlert alert = new StickersAlert(fragment.getParentActivity(), res.set, res.documents);
+                                StickersAlert alert = new StickersAlert(fragment.getParentActivity(), res);
                                 if (res.set == null || !StickersQuery.isStickerPackInstalled(res.set.id)) {
                                     alert.setButton(AlertDialog.BUTTON_POSITIVE, LocaleController.getString("AddStickers", R.string.AddStickers), new DialogInterface.OnClickListener() {
                                         @Override
@@ -354,7 +391,7 @@ public void run() {
                                     alert.setButton(AlertDialog.BUTTON_NEUTRAL, LocaleController.getString("StickersRemove", R.string.StickersRemove), new DialogInterface.OnClickListener() {
                                         @Override
                                         public void onClick(DialogInterface dialog, int which) {
-                                            removeStickersSet(fragment.getParentActivity(), res.set);
+                                            removeStickersSet(fragment.getParentActivity(), res.set, 0);
                                         }
                                     });
                                 }
@@ -385,53 +422,54 @@ public void onClick(DialogInterface dialog, int which) {
         progressDialog.show();
     }
 
-    public static void setHideMainStickersPack(final boolean value) {
-        hideMainStickersPack = value;
-        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("REPLACE INTO keyvalue VALUES(?, ?)");
-                    state.requery();
-                    state.bindString(1, "hide_stickers");
-                    state.bindString(2, value ? "1" : "0");
-                    state.step();
-                    state.dispose();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
+    public static void removeStickersSet(final Context context, TLRPC.StickerSet stickerSet, int hide) {
+        TLRPC.TL_inputStickerSetID stickerSetID = new TLRPC.TL_inputStickerSetID();
+        stickerSetID.access_hash = stickerSet.access_hash;
+        stickerSetID.id = stickerSet.id;
+        if (hide != 0) {
+            if (hide == 1) {
+                stickerSet.flags |= 2;
+            } else {
+                stickerSet.flags &= ~2;
             }
-        });
-    }
-
-    public static void removeStickersSet(final Context context, TLRPC.TL_stickerSet stickerSet) {
-        TLRPC.TL_messages_uninstallStickerSet req = new TLRPC.TL_messages_uninstallStickerSet();
-        req.stickerset = new TLRPC.TL_inputStickerSetID();
-        req.stickerset.access_hash = stickerSet.access_hash;
-        req.stickerset.id = stickerSet.id;
-        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            if (error == null) {
-                                Toast.makeText(context, LocaleController.getString("StickersRemoved", R.string.StickersRemoved), Toast.LENGTH_SHORT).show();
-                            } else {
-                                Toast.makeText(context, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.stickersDidLoaded);
+            TLRPC.TL_messages_installStickerSet req = new TLRPC.TL_messages_installStickerSet();
+            req.stickerset = stickerSetID;
+            req.disabled = hide == 1;
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            loadStickers(false, true);
+                        }
+                    }, 1000);
+                }
+            });
+        } else {
+            TLRPC.TL_messages_uninstallStickerSet req = new TLRPC.TL_messages_uninstallStickerSet();
+            req.stickerset = stickerSetID;
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                if (error == null) {
+                                    Toast.makeText(context, LocaleController.getString("StickersRemoved", R.string.StickersRemoved), Toast.LENGTH_SHORT).show();
+                                } else {
+                                    Toast.makeText(context, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred), Toast.LENGTH_SHORT).show();
+                                }
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
                             }
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
+                            loadStickers(false, true);
                         }
-                        loadStickers(false, true);
-                    }
-                });
-            }
-        });
-    }
-
-    public static boolean getHideMainStickersPack() {
-        return hideMainStickersPack;
+                    });
+                }
+            });
+        }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java b/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
index 30ec59c9f..f6a17a1d8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/support/widget/RecyclerView.java
@@ -39,6 +39,9 @@
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
 import android.support.v4.widget.EdgeEffectCompat;
 import android.support.v4.widget.ScrollerCompat;
+import static org.telegram.android.support.widget.AdapterHelper.UpdateOp;
+import static org.telegram.android.support.widget.AdapterHelper.Callback;
+
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.SparseArray;
@@ -55,13 +58,12 @@
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.Interpolator;
 
+import org.telegram.android.AndroidUtilities;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import static org.telegram.android.support.widget.AdapterHelper.Callback;
-import static org.telegram.android.support.widget.AdapterHelper.UpdateOp;
-
 /**
  * A flexible view for providing a limited window into a large data set.
  *
@@ -5028,7 +5030,7 @@ public void onDetachedFromRecyclerView(RecyclerView recyclerView) {
          * @see #notifyItemRangeInserted(int, int)
          * @see #notifyItemRangeRemoved(int, int)
          */
-        public final void notifyDataSetChanged() {
+        public void notifyDataSetChanged() {
             mObservable.notifyChanged();
         }
 
@@ -5043,7 +5045,7 @@ public final void notifyDataSetChanged() {
          *
          * @see #notifyItemRangeChanged(int, int)
          */
-        public final void notifyItemChanged(int position) {
+        public void notifyItemChanged(int position) {
             mObservable.notifyItemRangeChanged(position, 1);
         }
 
@@ -5060,7 +5062,7 @@ public final void notifyItemChanged(int position) {
          *
          * @see #notifyItemChanged(int)
          */
-        public final void notifyItemRangeChanged(int positionStart, int itemCount) {
+        public void notifyItemRangeChanged(int positionStart, int itemCount) {
             mObservable.notifyItemRangeChanged(positionStart, itemCount);
         }
 
@@ -5077,7 +5079,7 @@ public final void notifyItemRangeChanged(int positionStart, int itemCount) {
          *
          * @see #notifyItemRangeInserted(int, int)
          */
-        public final void notifyItemInserted(int position) {
+        public void notifyItemInserted(int position) {
             mObservable.notifyItemRangeInserted(position, 1);
         }
 
@@ -5092,7 +5094,7 @@ public final void notifyItemInserted(int position) {
          * @param fromPosition Previous position of the item.
          * @param toPosition New position of the item.
          */
-        public final void notifyItemMoved(int fromPosition, int toPosition) {
+        public void notifyItemMoved(int fromPosition, int toPosition) {
             mObservable.notifyItemMoved(fromPosition, toPosition);
         }
 
@@ -5111,7 +5113,7 @@ public final void notifyItemMoved(int fromPosition, int toPosition) {
          *
          * @see #notifyItemInserted(int)
          */
-        public final void notifyItemRangeInserted(int positionStart, int itemCount) {
+        public void notifyItemRangeInserted(int positionStart, int itemCount) {
             mObservable.notifyItemRangeInserted(positionStart, itemCount);
         }
 
@@ -5128,7 +5130,7 @@ public final void notifyItemRangeInserted(int positionStart, int itemCount) {
          *
          * @see #notifyItemRangeRemoved(int, int)
          */
-        public final void notifyItemRemoved(int position) {
+        public void notifyItemRemoved(int position) {
             mObservable.notifyItemRangeRemoved(position, 1);
         }
 
@@ -5145,7 +5147,7 @@ public final void notifyItemRemoved(int position) {
          * @param positionStart Previous position of the first item that was removed
          * @param itemCount Number of items removed from the data set
          */
-        public final void notifyItemRangeRemoved(int positionStart, int itemCount) {
+        public void notifyItemRangeRemoved(int positionStart, int itemCount) {
             mObservable.notifyItemRangeRemoved(positionStart, itemCount);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 8960c4dea..dd8ae6486 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -31,13 +31,13 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
+import org.telegram.android.NotificationsService;
+import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NativeLoader;
-import org.telegram.android.NotificationsService;
 import org.telegram.android.ScreenReceiver;
-import org.telegram.android.SendMessagesHelper;
 import org.telegram.ui.Components.ForegroundDetector;
 
 import java.io.File;
@@ -66,6 +66,7 @@
 
     public static boolean SHOW_ANDROID_EMOJI;
     public static boolean KEEP_ORIGINAL_FILENAME;
+    public static boolean USE_DEVICE_FONT;
 
     public static boolean isCustomTheme() {
         return isCustomTheme;
@@ -205,6 +206,7 @@ public void onCreate() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         SHOW_ANDROID_EMOJI = preferences.getBoolean("showAndroidEmoji", false);
         KEEP_ORIGINAL_FILENAME = preferences.getBoolean("keepOriginalFilename", false);
+        USE_DEVICE_FONT = preferences.getBoolean("useDeviceFont", false);
         //
         startPushService();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 658896f07..928d5e572 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Matcher;
@@ -132,7 +133,8 @@ public void run() {
             if (lastPauseTime != 0 && lastPauseTime < currentTime - nextSleepTimeout) {
                 boolean dontSleep = !pushMessagesReceived;
                 if (!dontSleep) {
-                    for (RPCRequest request : runningRequests) {
+                    for (int a = 0; a < runningRequests.size(); a++) {
+                        RPCRequest request = runningRequests.get(a);
                         if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
                             dontSleep = true;
                         } else if (request.retryCount < 10 && (request.runningStartTime + 60 > (int) (currentTime / 1000)) && ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0)) {
@@ -142,7 +144,8 @@ public void run() {
                     }
                 }
                 if (!dontSleep) {
-                    for (RPCRequest request : requestQueue) {
+                    for (int a = 0; a < requestQueue.size(); a++) {
+                        RPCRequest request = requestQueue.get(a);
                         if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
                             dontSleep = true;
                         } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0 || (request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
@@ -190,7 +193,8 @@ public void run() {
                         processRequestQueue(0, 0);
                     } else {
                         boolean notFound = true;
-                        for (Action actor : actionQueue) {
+                        for (int a = 0; a < actionQueue.size(); a++) {
+                            Action actor = actionQueue.get(a);
                             if (actor instanceof HandshakeAction) {
                                 HandshakeAction eactor = (HandshakeAction) actor;
                                 if (eactor.datacenter.datacenterId == datacenter.datacenterId) {
@@ -536,7 +540,9 @@ protected static boolean useIpv6Address() {
                         continue;
                     }
                     FileLog.e("tmessages", "valid interface: " + networkInterface);
-                    for (InterfaceAddress address : networkInterface.getInterfaceAddresses()) {
+                    List<InterfaceAddress> interfaceAddresses = networkInterface.getInterfaceAddresses();
+                    for (int a = 0; a < interfaceAddresses.size(); a++) {
+                        InterfaceAddress address = interfaceAddresses.get(a);
                         InetAddress inetAddress = address.getAddress();
                         if (BuildVars.DEBUG_VERSION) {
                             FileLog.e("tmessages", "address: " + inetAddress.getHostAddress());
@@ -553,20 +559,22 @@ protected static boolean useIpv6Address() {
                 FileLog.e("tmessages", e);
             }
         }
-        if (Build.VERSION.SDK_INT < 50) {
+        if (Build.VERSION.SDK_INT < 19) {
             return false;
         }
         try {
             NetworkInterface networkInterface;
             Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
+            boolean hasIpv4 = false;
+            boolean hasIpv6 = false;
             while (networkInterfaces.hasMoreElements()) {
                 networkInterface = networkInterfaces.nextElement();
                 if (!networkInterface.isUp() || networkInterface.isLoopback()) {
                     continue;
                 }
-                boolean hasIpv4 = false;
-                boolean hasIpv6 = false;
-                for (InterfaceAddress address : networkInterface.getInterfaceAddresses()) {
+                List<InterfaceAddress> interfaceAddresses = networkInterface.getInterfaceAddresses();
+                for (int a = 0; a < interfaceAddresses.size(); a++) {
+                    InterfaceAddress address = interfaceAddresses.get(a);
                     InetAddress inetAddress = address.getAddress();
                     if (inetAddress.isLinkLocalAddress() || inetAddress.isLoopbackAddress() || inetAddress.isMulticastAddress()) {
                         continue;
@@ -574,12 +582,15 @@ protected static boolean useIpv6Address() {
                     if (inetAddress instanceof Inet6Address) {
                         hasIpv6 = true;
                     } else if (inetAddress instanceof Inet4Address) {
-                        hasIpv4 = true;
+                        String addrr = inetAddress.getHostAddress();
+                        if (!addrr.startsWith("192.0.0.")) {
+                            hasIpv4 = true;
+                        }
                     }
                 }
-                if (!hasIpv4 && hasIpv6) {
-                    return true;
-                }
+            }
+            if (!hasIpv4 && hasIpv6) {
+                return true;
             }
         } catch (Throwable e) {
             FileLog.e("tmessages", e);
@@ -609,8 +620,8 @@ public void run() {
                         if (!sessions.isEmpty()) {
                             SerializedData data = new SerializedData(sessions.size() * 8 + 4);
                             data.writeInt32(sessions.size());
-                            for (long session : sessions) {
-                                data.writeInt64(session);
+                            for (int a = 0; a < sessions.size(); a++) {
+                                data.writeInt64(sessions.get(a));
                             }
                             editor.putString("sessionsToDestroy", Base64.encodeToString(data.toByteArray(), Base64.DEFAULT));
                             data.cleanup();
@@ -648,7 +659,8 @@ public void run() {
     }
 
     void clearRequestsForRequestClass(int requestClass, Datacenter datacenter) {
-        for (RPCRequest request : runningRequests) {
+        for (int a = 0; a < runningRequests.size(); a++) {
+            RPCRequest request = runningRequests.get(a);
             Datacenter dcenter = datacenterWithId(request.runningDatacenterId);
             if ((request.flags & requestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {
                 request.runningMessageId = 0;
@@ -736,7 +748,8 @@ public int generateClassGuid() {
     public void cancelRpcsForClassGuid(int guid) {
         ArrayList<Long> requests = requestsByGuids.get(guid);
         if (requests != null) {
-            for (Long request : requests) {
+            for (int a = 0; a < requests.size(); a++) {
+                Long request = requests.get(a);
                 cancelRpc(request, true);
             }
             requestsByGuids.remove(guid);
@@ -858,7 +871,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     lastDcUpdateTime = (int) (System.currentTimeMillis() / 1000) - DC_UPDATE_TIME + updateIn;
                     ArrayList<Datacenter> datacentersArr = new ArrayList<>();
                     HashMap<Integer, Datacenter> datacenterMap = new HashMap<>();
-                    for (TLRPC.TL_dcOption datacenterDesc : config.dc_options) {
+                    for (int a = 0; a < config.dc_options.size(); a++) {
+                        TLRPC.TL_dcOption datacenterDesc = config.dc_options.get(a);
                         Datacenter existing = datacenterMap.get(datacenterDesc.id);
                         if (existing == null) {
                             existing = new Datacenter();
@@ -870,7 +884,8 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
 
                     if (!datacentersArr.isEmpty()) {
-                        for (Datacenter datacenter : datacentersArr) {
+                        for (int a = 0; a < datacentersArr.size(); a++) {
+                            Datacenter datacenter = datacentersArr.get(a);
                             Datacenter exist = datacenterWithId(datacenter.datacenterId);
                             if (exist == null) {
                                 datacenters.put(datacenter.datacenterId, datacenter);
@@ -1281,7 +1296,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         if (genericConnection != null && genericConnection.channelToken != 0) {
             Datacenter currentDatacenter = datacenterWithId(currentDatacenterId);
 
-            for (Long it : sessionsToDestroy) {
+            for (int a = 0; a < sessionsToDestroy.size(); a++) {
+                Long it = sessionsToDestroy.get(a);
                 if (destroyingSessions.contains(it)) {
                     continue;
                 }
@@ -1304,7 +1320,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         int uploadRunningRequestCount = 0;
         int downloadRunningRequestCount = 0;
 
-        for (RPCRequest request : runningRequests) {
+        for (int a = 0; a < runningRequests.size(); a++) {
+            RPCRequest request = runningRequests.get(a);
             if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
                 genericRunningRequestCount++;
             } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
@@ -1481,7 +1498,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
 
                 boolean hasSendMessage = false;
                 ArrayList<NetworkMessage> arr = genericMessagesToDatacenters.get(iter);
-                for (NetworkMessage networkMessage : arr) {
+                for (int b = 0; b < arr.size(); b++) {
+                    NetworkMessage networkMessage = arr.get(b);
                     TLRPC.TL_protoMessage message = networkMessage.protoMessage;
 
                     Object rawRequest = networkMessage.rawRequest;
@@ -1502,7 +1520,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                             scannedPreviousRequests = true;
 
                             ArrayList<Long> currentRequests = new ArrayList<>();
-                            for (NetworkMessage currentNetworkMessage : arr) {
+                            for (int a = 0; a < arr.size(); a++) {
+                                NetworkMessage currentNetworkMessage = arr.get(a);
                                 TLRPC.TL_protoMessage currentMessage = currentNetworkMessage.protoMessage;
 
                                 Object currentRawRequest = currentNetworkMessage.rawRequest;
@@ -1519,7 +1538,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                             }
 
                             long maxRequestId = 0;
-                            for (RPCRequest request : runningRequests) {
+                            for (int a = 0; a < runningRequests.size(); a++) {
+                                RPCRequest request = runningRequests.get(a);
                                 if (request.rawRequest instanceof TLRPC.TL_messages_sendMessage ||
                                         request.rawRequest instanceof TLRPC.TL_messages_sendMedia ||
                                         request.rawRequest instanceof TLRPC.TL_messages_forwardMessages ||
@@ -1564,10 +1584,12 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
             updateDcSettings(0);
         }
 
-        for (int num : neededDatacenterIds) {
+        for (int a = 0; a < neededDatacenterIds.size(); a++) {
+            int num = neededDatacenterIds.get(a);
             if (num != movingToDatacenterId) {
                 boolean notFound = true;
-                for (Action actor : actionQueue) {
+                for (int b = 0; b < actionQueue.size(); b++) {
+                    Action actor = actionQueue.get(b);
                     if (actor instanceof HandshakeAction) {
                         HandshakeAction eactor = (HandshakeAction) actor;
                         if (eactor.datacenter.datacenterId == num) {
@@ -1584,10 +1606,12 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
             }
         }
 
-        for (int num : unauthorizedDatacenterIds) {
+        for (int a = 0; a < unauthorizedDatacenterIds.size(); a++) {
+            int num = unauthorizedDatacenterIds.get(a);
             if (num != currentDatacenterId && num != movingToDatacenterId && UserConfig.isClientActivated()) {
                 boolean notFound = true;
-                for (Action actor : actionQueue) {
+                for (int b = 0; b < actionQueue.size(); b++) {
+                    Action actor = actionQueue.get(b);
                     if (actor instanceof ExportAuthorizationAction) {
                         ExportAuthorizationAction eactor = (ExportAuthorizationAction) actor;
                         if (eactor.datacenter.datacenterId == num) {
@@ -1677,7 +1701,8 @@ void sendMessagesToTransport(ArrayList<NetworkMessage> messagesToSend, TcpConnec
                     if (reportAck && quickAckId.size() != 0) {
                         ArrayList<Long> requestIds = new ArrayList<>();
 
-                        for (NetworkMessage message : messagesToSend) {
+                        for (int b = 0; b < messagesToSend.size(); b++) {
+                            NetworkMessage message = messagesToSend.get(b);
                             if (message.requestId != 0) {
                                 requestIds.add(message.requestId);
                             }
@@ -1756,7 +1781,8 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayLis
 
             ArrayList<TLRPC.TL_protoMessage> containerMessages = new ArrayList<>(messages.size());
 
-            for (NetworkMessage networkMessage : messages) {
+            for (int a = 0; a < messages.size(); a++) {
+                NetworkMessage networkMessage = messages.get(a);
                 TLRPC.TL_protoMessage message = networkMessage.protoMessage;
                 containerMessages.add(message);
                 if (BuildVars.DEBUG_VERSION) {
@@ -1841,7 +1867,8 @@ void refillSaltSet(final Datacenter datacenter) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                for (RPCRequest request : requestQueue) {
+                for (int a = 0; a < requestQueue.size(); a++) {
+                    RPCRequest request = requestQueue.get(a);
                     if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
                         Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
                         if (requestDatacenter.datacenterId == datacenter.datacenterId) {
@@ -1850,7 +1877,8 @@ public void run() {
                     }
                 }
 
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     if (request.rawRequest instanceof TLRPC.TL_get_future_salts) {
                         Datacenter requestDatacenter = datacenterWithId(request.runningDatacenterId);
                         if (requestDatacenter.datacenterId == datacenter.datacenterId) {
@@ -1881,7 +1909,8 @@ void messagesConfirmed(final long requestMsgId) {
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     if (requestMsgId == request.runningMessageId) {
                         request.confirmed = true;
                     }
@@ -1991,7 +2020,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                 serverSaltDesc.value = serverSalt;
                 datacenter.addServerSalt(serverSaltDesc);
 
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     Datacenter dcenter = datacenterWithId(request.runningDatacenterId);
                     if (request.runningMessageId < newSession.first_msg_id && (request.flags & connection.transportRequestClass) != 0 && dcenter != null && dcenter.datacenterId == datacenter.datacenterId) {
                         request.runningMessageId = 0;
@@ -2021,7 +2051,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
             }*/
 
             TLRPC.TL_msg_container messageContainer = (TLRPC.TL_msg_container) message;
-            for (TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {
+            for (int a = 0; a < messageContainer.messages.size(); a++) {
+                TLRPC.TL_protoMessage innerMessage = messageContainer.messages.get(a);
                 long innerMessageId = innerMessage.msg_id;
                 if (innerMessage.seqno % 2 != 0) {
                     connection.addMessageToConfirm(innerMessageId);
@@ -2060,8 +2091,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                         itemsToDelete.add(pid);
                     }
                 }
-                for (Long pid : itemsToDelete) {
-                    pingIdToDate.remove(pid);
+                for (int a = 0; a < itemsToDelete.size(); a++) {
+                    pingIdToDate.remove(itemsToDelete.get(a));
                 }
             } else {
                 FileLog.e("tmessages", "received push ping");
@@ -2070,7 +2101,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
         } else if (message instanceof TLRPC.TL_futuresalts) {
             TLRPC.TL_futuresalts futureSalts = (TLRPC.TL_futuresalts) message;
             long requestMid = futureSalts.req_msg_id;
-            for (RPCRequest request : runningRequests) {
+            for (int a = 0; a < runningRequests.size(); a++) {
+                RPCRequest request = runningRequests.get(a);
                 if (request.respondsToMessageId(requestMid)) {
                     if (request.completionBlock != null) {
                         request.completionBlock.run(futureSalts, null);
@@ -2090,7 +2122,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
             ArrayList<Long> lst = new ArrayList<>();
             lst.addAll(sessionsToDestroy);
             destroyingSessions.remove(res.session_id);
-            for (long session : lst) {
+            for (int a = 0; a < lst.size(); a++) {
+                long session = lst.get(a);
                 if (session == res.session_id) {
                     sessionsToDestroy.remove(session);
                     FileLog.d("tmessages", String.format("Destroyed session %d (%s)", res.session_id, res instanceof TLRPC.TL_destroy_session_ok ? "ok" : "not found"));
@@ -2114,7 +2147,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                     migrateErrors.add("NETWORK_MIGRATE_");
                     migrateErrors.add("PHONE_MIGRATE_");
                     migrateErrors.add("USER_MIGRATE_");
-                    for (String possibleError : migrateErrors) {
+                    for (int a = 0; a < migrateErrors.size(); a++) {
+                        String possibleError = migrateErrors.get(a);
                         if (errorMessage.contains(possibleError)) {
                             String errorMsg = errorMessage.replace(possibleError, "");
 
@@ -2152,7 +2186,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
             if (!ignoreResult) {
                 boolean found = false;
 
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     if (request.respondsToMessageId(resultMid)) {
                         found = true;
 
@@ -2356,7 +2391,8 @@ public void run() {
             }
             long resultMid = ((TLRPC.TL_bad_server_salt) message).bad_msg_id;
             if (resultMid != 0) {
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) == 0) {
                         continue;
                     }
@@ -2389,7 +2425,8 @@ public void run() {
             boolean confirm = true;
 
             if (detailedInfo instanceof TLRPC.TL_msg_detailed_info) {
-                for (RPCRequest request : runningRequests) {
+                for (int a = 0; a < runningRequests.size(); a++) {
+                    RPCRequest request = runningRequests.get(a);
                     if (request.respondsToMessageId(detailedInfo.msg_id)) {
                         if (request.completed) {
                             break;
@@ -2486,8 +2523,8 @@ private ByteBufferDesc generatePingData(TcpConnection connection) {
                         itemsToDelete.add(pid);
                     }
                 }
-                for (Long pid : itemsToDelete) {
-                    pingIdToDate.remove(pid);
+                for (int a = 0; a < itemsToDelete.size(); a++) {
+                    pingIdToDate.remove(itemsToDelete.get(a));
                 }
             }
         }
@@ -2605,7 +2642,8 @@ public void tcpConnectionConnected(TcpConnection connection) {
     public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
         ArrayList<Long> arr = quickAckIdToRequestIds.get(ack);
         if (arr != null) {
-            for (RPCRequest request : runningRequests) {
+            for (int a = 0; a < runningRequests.size(); a++) {
+                RPCRequest request = runningRequests.get(a);
                 if (arr.contains(request.token)) {
                     if (request.quickAckBlock != null) {
                         request.quickAckBlock.quickAck();
@@ -2699,14 +2737,6 @@ public void run() {
             int messageSeqNo = data.readInt32(false);
             int messageLength = data.readInt32(false);
 
-            if (connection.isMessageIdProcessed(messageId)) {
-                doNotProcess = true;
-            }
-
-            if (messageSeqNo % 2 != 0) {
-                connection.addMessageToConfirm(messageId);
-            }
-
             byte[] realMessageKeyFull = Utilities.computeSHA1(data.buffer, 24, Math.min(messageLength + 32 + 24, data.limit()));
             if (realMessageKeyFull == null) {
                 return;
@@ -2720,6 +2750,14 @@ public void run() {
                 return;
             }
 
+            if (connection.isMessageIdProcessed(messageId)) {
+                doNotProcess = true;
+            }
+
+            if (messageSeqNo % 2 != 0) {
+                connection.addMessageToConfirm(messageId);
+            }
+
             if (!doNotProcess) {
                 TLObject message = deserialize(getRequestWithMessageId(messageId), data, true);
                 if (message != null) {
@@ -2776,7 +2814,8 @@ protected TLObject deserialize(TLObject request, AbsSerializedData data, boolean
     }
 
     public TLObject getRequestWithMessageId(long msgId) {
-        for (RPCRequest request : runningRequests) {
+        for (int a = 0; a < runningRequests.size(); a++) {
+            RPCRequest request = runningRequests.get(a);
             if (msgId == request.runningMessageId) {
                 return request.rawRequest;
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index d87b5c578..ba544e8be 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -8,8 +8,8 @@
 
 package org.telegram.messenger;
 
-import java.io.File;
 import java.io.RandomAccessFile;
+import java.io.File;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.Scanner;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index eb225c09c..7043dca59 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -297,6 +297,9 @@ public void run() {
             }
         } else if (message instanceof TLRPC.Server_DH_Params) {
             if (message instanceof TLRPC.TL_server_DH_params_ok) {
+                if (authNewNonce == null) {
+                    return;
+                }
                 TLRPC.TL_server_DH_params_ok serverDhParams = (TLRPC.TL_server_DH_params_ok)message;
 
                 SerializedData tmpAesKey = new SerializedData();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index 32d39df40..5de616dc4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -13,13 +13,33 @@
 @SuppressWarnings("unchecked")
 public class TLRPC {
 
-    public static final int MESSAGE_FLAG_UNREAD = 1;
-    public static final int MESSAGE_FLAG_OUT = 2;
-    public static final int MESSAGE_FLAG_FWD = 4;
-    public static final int MESSAGE_FLAG_REPLY = 8;
-    public static final int MESSAGE_FLAG_MENTION = 16;
-    public static final int MESSAGE_FLAG_CONTENT_UNREAD = 32;
-    public static final int LAYER = 30;
+    public static final int USER_FLAG_ACCESS_HASH           = 0x00000001;
+    public static final int USER_FLAG_FIRST_NAME            = 0x00000002;
+    public static final int USER_FLAG_LAST_NAME             = 0x00000004;
+    public static final int USER_FLAG_USERNAME              = 0x00000008;
+    public static final int USER_FLAG_PHONE                 = 0x00000010;
+    public static final int USER_FLAG_PHOTO                 = 0x00000020;
+    public static final int USER_FLAG_STATUS                = 0x00000040;
+    public static final int USER_FLAG_UNUSED                = 0x00000080;
+    public static final int USER_FLAG_UNUSED2               = 0x00000100;
+    public static final int USER_FLAG_UNUSED3               = 0x00000200;
+    public static final int USER_FLAG_SELF                  = 0x00000400;
+    public static final int USER_FLAG_CONTACT               = 0x00000800;
+    public static final int USER_FLAG_MUTUAL_CONTACT        = 0x00001000;
+    public static final int USER_FLAG_DELETED               = 0x00002000;
+    public static final int USER_FLAG_BOT                   = 0x00004000;
+    public static final int USER_FLAG_BOT_READING_HISTORY   = 0x00008000;
+    public static final int USER_FLAG_BOT_CANT_JOIN_GROUP   = 0x00010000;
+
+
+    public static final int MESSAGE_FLAG_UNREAD             = 0x00000001;
+    public static final int MESSAGE_FLAG_OUT                = 0x00000002;
+    public static final int MESSAGE_FLAG_FWD                = 0x00000004;
+    public static final int MESSAGE_FLAG_REPLY              = 0x00000008;
+    public static final int MESSAGE_FLAG_MENTION            = 0x00000010;
+    public static final int MESSAGE_FLAG_CONTENT_UNREAD     = 0x00000020;
+
+    public static final int LAYER = 32;
 
     public static class TL_inputEncryptedChat extends TLObject {
         public static int constructor = 0xf141b5e1;
@@ -555,7 +575,7 @@ public void serializeToStream(AbsSerializedData stream) {
     public static class TL_messages_stickerSet extends TLObject {
         public static int constructor = 0xb60a24a6;
 
-        public TL_stickerSet set;
+        public StickerSet set;
         public ArrayList<TL_stickerPack> packs = new ArrayList<>();
         public ArrayList<Document> documents = new ArrayList<>();
 
@@ -573,7 +593,7 @@ public static TL_messages_stickerSet TLdeserialize(AbsSerializedData stream, int
         }
 
         public void readParams(AbsSerializedData stream, boolean exception) {
-            set = TL_stickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
+            set = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
             int magic = stream.readInt32(exception);
             if (magic != 0x1cb5c415) {
                 if (exception) {
@@ -655,6 +675,53 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_keyboardButtonRow extends TLObject {
+        public static int constructor = 0x77608b83;
+
+        public ArrayList<TL_keyboardButton> buttons = new ArrayList<>();
+
+        public static TL_keyboardButtonRow TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            if (TL_keyboardButtonRow.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_keyboardButtonRow result = new TL_keyboardButtonRow();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_keyboardButton object = TL_keyboardButton.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                buttons.add(object);
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = buttons.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                buttons.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
     public static class InputDocument extends TLObject {
         public long id;
         public long access_hash;
@@ -704,10 +771,86 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class BotInfo extends TLObject {
+        public int user_id;
+        public int version;
+        public String share_text;
+        public String description;
+        public ArrayList<TL_botCommand> commands = new ArrayList<>();
+
+        public static BotInfo TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            BotInfo result = null;
+            switch(constructor) {
+                case 0xbb2e37ce:
+                    result = new TL_botInfoEmpty();
+                    break;
+                case 0x9cf585d:
+                    result = new TL_botInfo();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in BotInfo", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
+            }
+            return result;
+        }
+    }
+
+    public static class TL_botInfoEmpty extends BotInfo {
+        public static int constructor = 0xbb2e37ce;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_botInfo extends BotInfo {
+        public static int constructor = 0x9cf585d;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            user_id = stream.readInt32(exception);
+            version = stream.readInt32(exception);
+            share_text = stream.readString(exception);
+            description = stream.readString(exception);
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                commands.add(object);
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(user_id);
+            stream.writeInt32(version);
+            stream.writeString(share_text);
+            stream.writeString(description);
+            stream.writeInt32(0x1cb5c415);
+            int count = commands.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                commands.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
     public static class TL_auth_authorization extends TLObject {
-        public static int constructor = 0xf6b673a4;
+        public static int constructor = 0xff036af1;
 
-        public int expires;
         public User user;
 
         public static TL_auth_authorization TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
@@ -724,13 +867,11 @@ public static TL_auth_authorization TLdeserialize(AbsSerializedData stream, int
         }
 
         public void readParams(AbsSerializedData stream, boolean exception) {
-            expires = stream.readInt32(exception);
             user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
-            stream.writeInt32(expires);
             user.serializeToStream(stream);
         }
     }
@@ -1964,15 +2105,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userFull extends TLObject {
-        public static int constructor = 0x771095da;
+        public static int constructor = 0x5a89ac5b;
 
         public User user;
         public TL_contacts_link link;
         public Photo profile_photo;
         public PeerNotifySettings notify_settings;
         public boolean blocked;
-        public String real_first_name;
-        public String real_last_name;
+        public BotInfo bot_info;
 
         public static TL_userFull TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             if (TL_userFull.constructor != constructor) {
@@ -1993,8 +2133,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
             notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
             blocked = stream.readBool(exception);
-            real_first_name = stream.readString(exception);
-            real_last_name = stream.readString(exception);
+            bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -2004,8 +2143,7 @@ public void serializeToStream(AbsSerializedData stream) {
             profile_photo.serializeToStream(stream);
             notify_settings.serializeToStream(stream);
             stream.writeBool(blocked);
-            stream.writeString(real_first_name);
-            stream.writeString(real_last_name);
+            bot_info.serializeToStream(stream);
         }
     }
 
@@ -2980,30 +3118,32 @@ public void serializeToStream(AbsSerializedData stream) {
         public int id;
         public String first_name;
         public String last_name;
+        public String username;
         public long access_hash;
         public String phone;
         public UserProfilePhoto photo;
         public UserStatus status;
         public boolean inactive;
-        public String username;
+        public int flags;
+        public int bot_info_version;
 
         public static User TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             User result = null;
             switch(constructor) {
+                case 0xcab35e18:
+                    result = new TL_userContact_old2();
+                    break;
                 case 0xf2fb8319:
                     result = new TL_userContact_old();
                     break;
                 case 0x720535ec:
                     result = new TL_userSelf_old();
                     break;
-                case 0xcab35e18:
-                    result = new TL_userContact();
-                    break;
                 case 0x1c60e608:
-                    result = new TL_userSelf();
+                    result = new TL_userSelf_old3();
                     break;
-                case 0x75cf7a8:
-                    result = new TL_userForeign();
+                case 0xd6016d7a:
+                    result = new TL_userDeleted_old2();
                     break;
                 case 0x200250ba:
                     result = new TL_userEmpty();
@@ -3014,17 +3154,20 @@ public static User TLdeserialize(AbsSerializedData stream, int constructor, bool
                 case 0x5214c89d:
                     result = new TL_userForeign_old();
                     break;
-                case 0xd9ccc4ef:
-                    result = new TL_userRequest();
+                case 0x75cf7a8:
+                    result = new TL_userForeign_old2();
                     break;
-                case 0x7007b451:
-                    result = new TL_userSelf_old2();
+                case 0xd9ccc4ef:
+                    result = new TL_userRequest_old2();
                     break;
                 case 0xb29ad7cc:
                     result = new TL_userDeleted_old();
                     break;
-                case 0xd6016d7a:
-                    result = new TL_userDeleted();
+                case 0x7007b451:
+                    result = new TL_userSelf_old2();
+                    break;
+                case 0x22e49072:
+                    result = new TL_user();
                     break;
             }
             if (result == null && exception) {
@@ -3037,14 +3180,15 @@ public static User TLdeserialize(AbsSerializedData stream, int constructor, bool
         }
     }
 
-    public static class TL_userContact_old extends TL_userContact {
-        public static int constructor = 0xf2fb8319;
+    public static class TL_userContact_old2 extends User {
+        public static int constructor = 0xcab35e18;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
             id = stream.readInt32(exception);
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
+            username = stream.readString(exception);
             access_hash = stream.readInt64(exception);
             phone = stream.readString(exception);
             photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
@@ -3056,6 +3200,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeString(username);
             stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
@@ -3063,18 +3208,18 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_userSelf_old extends TL_userSelf {
-        public static int constructor = 0x720535ec;
+    public static class TL_userContact_old extends TL_userContact_old2 {
+        public static int constructor = 0xf2fb8319;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
             id = stream.readInt32(exception);
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
+            access_hash = stream.readInt64(exception);
             phone = stream.readString(exception);
             photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
             status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
-            inactive = stream.readBool(exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3082,26 +3227,25 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
+            stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
-            stream.writeBool(inactive);
         }
     }
 
-    public static class TL_userContact extends User {
-        public static int constructor = 0xcab35e18;
+    public static class TL_userSelf_old extends TL_userSelf_old2 {
+        public static int constructor = 0x720535ec;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
             id = stream.readInt32(exception);
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
-            username = stream.readString(exception);
-            access_hash = stream.readInt64(exception);
             phone = stream.readString(exception);
             photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
             status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
+            inactive = stream.readBool(exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3109,15 +3253,14 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeString(first_name);
             stream.writeString(last_name);
-            stream.writeString(username);
-            stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
+            stream.writeBool(inactive);
         }
     }
 
-    public static class TL_userSelf extends User {
+    public static class TL_userSelf_old3 extends User {
         public static int constructor = 0x1c60e608;
 
 
@@ -3143,8 +3286,8 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_userForeign extends User {
-        public static int constructor = 0x75cf7a8;
+    public static class TL_userDeleted_old2 extends User {
+        public static int constructor = 0xd6016d7a;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -3152,9 +3295,6 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
             username = stream.readString(exception);
-            access_hash = stream.readInt64(exception);
-            photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
-            status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3163,13 +3303,24 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeString(first_name);
             stream.writeString(last_name);
             stream.writeString(username);
-            stream.writeInt64(access_hash);
-            photo.serializeToStream(stream);
-            status.serializeToStream(stream);
         }
     }
 
-    public static class TL_userRequest_old extends TL_userRequest {
+    public static class TL_userEmpty extends User {
+        public static int constructor = 0x200250ba;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            id = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+        }
+    }
+
+    public static class TL_userRequest_old extends TL_userRequest_old2 {
         public static int constructor = 0x22e8ceb0;
 
 
@@ -3195,7 +3346,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_userForeign_old extends TL_userForeign {
+    public static class TL_userForeign_old extends TL_userForeign_old2 {
         public static int constructor = 0x5214c89d;
 
 
@@ -3219,8 +3370,8 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_userRequest extends User {
-        public static int constructor = 0xd9ccc4ef;
+    public static class TL_userForeign_old2 extends User {
+        public static int constructor = 0x75cf7a8;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -3229,7 +3380,6 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             last_name = stream.readString(exception);
             username = stream.readString(exception);
             access_hash = stream.readInt64(exception);
-            phone = stream.readString(exception);
             photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
             status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
         }
@@ -3241,14 +3391,13 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeString(last_name);
             stream.writeString(username);
             stream.writeInt64(access_hash);
-            stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
         }
     }
 
-    public static class TL_userSelf_old2 extends TL_userSelf {
-        public static int constructor = 0x7007b451;
+    public static class TL_userRequest_old2 extends User {
+        public static int constructor = 0xd9ccc4ef;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -3256,10 +3405,10 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
             username = stream.readString(exception);
+            access_hash = stream.readInt64(exception);
             phone = stream.readString(exception);
             photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
             status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
-            inactive = stream.readBool(exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3268,14 +3417,14 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeString(first_name);
             stream.writeString(last_name);
             stream.writeString(username);
+            stream.writeInt64(access_hash);
             stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
-            stream.writeBool(inactive);
         }
     }
 
-    public static class TL_userDeleted_old extends TL_userDeleted {
+    public static class TL_userDeleted_old extends TL_userDeleted_old2 {
         public static int constructor = 0xb29ad7cc;
 
 
@@ -3293,8 +3442,8 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_userDeleted extends User {
-        public static int constructor = 0xd6016d7a;
+    public static class TL_userSelf_old2 extends TL_userSelf_old3 {
+        public static int constructor = 0x7007b451;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -3302,6 +3451,10 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             first_name = stream.readString(exception);
             last_name = stream.readString(exception);
             username = stream.readString(exception);
+            phone = stream.readString(exception);
+            photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
+            status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
+            inactive = stream.readBool(exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3310,6 +3463,74 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeString(first_name);
             stream.writeString(last_name);
             stream.writeString(username);
+            stream.writeString(phone);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+            stream.writeBool(inactive);
+        }
+    }
+
+    public static class TL_user extends User {
+        public static int constructor = 0x22e49072;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            id = stream.readInt32(exception);
+            if ((flags & 1) != 0) {
+                access_hash = stream.readInt64(exception);
+            }
+            if ((flags & 2) != 0) {
+                first_name = stream.readString(exception);
+            }
+            if ((flags & 4) != 0) {
+                last_name = stream.readString(exception);
+            }
+            if ((flags & 8) != 0) {
+                username = stream.readString(exception);
+            }
+            if ((flags & 16) != 0) {
+                phone = stream.readString(exception);
+            }
+            if ((flags & 32) != 0) {
+                photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 64) != 0) {
+                status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if ((flags & 16384) != 0) {
+                bot_info_version = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            stream.writeInt32(id);
+            if ((flags & 1) != 0) {
+                stream.writeInt64(access_hash);
+            }
+            if ((flags & 2) != 0) {
+                stream.writeString(first_name);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeString(last_name);
+            }
+            if ((flags & 8) != 0) {
+                stream.writeString(username);
+            }
+            if ((flags & 16) != 0) {
+                stream.writeString(phone);
+            }
+            if ((flags & 32) != 0) {
+                photo.serializeToStream(stream);
+            }
+            if ((flags & 64) != 0) {
+                status.serializeToStream(stream);
+            }
+            if ((flags & 16384) != 0) {
+                stream.writeInt32(bot_info_version);
+            }
         }
     }
 
@@ -5595,26 +5816,38 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_stickerSet extends TLObject {
-        public static int constructor = 0xa7a43b17;
-
+    public static class StickerSet extends TLObject {
         public long id;
         public long access_hash;
         public String title;
         public String short_name;
+        public int flags;
+        public int count;
+        public int hash;
 
-        public static TL_stickerSet TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-            if (TL_stickerSet.constructor != constructor) {
-                if (exception) {
-                    throw new RuntimeException(String.format("can't parse magic %x in TL_stickerSet", constructor));
-                } else {
-                    return null;
-                }
+        public static StickerSet TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            StickerSet result = null;
+            switch(constructor) {
+                case 0xa7a43b17:
+                    result = new TL_stickerSet_old();
+                    break;
+                case 0xcd303b41:
+                    result = new TL_stickerSet();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in StickerSet", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
             }
-            TL_stickerSet result = new TL_stickerSet();
-            result.readParams(stream, exception);
             return result;
         }
+    }
+
+    public static class TL_stickerSet_old extends TL_stickerSet {
+        public static int constructor = 0xa7a43b17;
+
 
         public void readParams(AbsSerializedData stream, boolean exception) {
             id = stream.readInt64(exception);
@@ -5632,6 +5865,32 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_stickerSet extends StickerSet {
+        public static int constructor = 0xcd303b41;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            id = stream.readInt64(exception);
+            access_hash = stream.readInt64(exception);
+            title = stream.readString(exception);
+            short_name = stream.readString(exception);
+            count = stream.readInt32(exception);
+            hash = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            stream.writeInt64(id);
+            stream.writeInt64(access_hash);
+            stream.writeString(title);
+            stream.writeString(short_name);
+            stream.writeInt32(count);
+            stream.writeInt32(hash);
+        }
+    }
+
     public static class TL_pong extends TLObject {
         public static int constructor = 0x347773c5;
 
@@ -6546,6 +6805,37 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_botCommand extends TLObject {
+        public static int constructor = 0xc27ac8c7;
+
+        public String command;
+        public String description;
+
+        public static TL_botCommand TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            if (TL_botCommand.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_botCommand result = new TL_botCommand();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            command = stream.readString(exception);
+            description = stream.readString(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(command);
+            stream.writeString(description);
+        }
+    }
+
     public static class InputFileLocation extends TLObject {
         public long id;
         public long access_hash;
@@ -6665,13 +6955,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_chatFull extends TLObject {
-        public static int constructor = 0xcade0791;
+        public static int constructor = 0x2e02a614;
 
         public int id;
         public ChatParticipants participants;
         public Photo chat_photo;
         public PeerNotifySettings notify_settings;
         public ExportedChatInvite exported_invite;
+        public ArrayList<BotInfo> bot_info = new ArrayList<>();
 
         public static TL_chatFull TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             if (TL_chatFull.constructor != constructor) {
@@ -6692,6 +6983,21 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
             notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
             exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                bot_info.add(object);
+            }
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -6701,6 +7007,12 @@ public void serializeToStream(AbsSerializedData stream) {
             chat_photo.serializeToStream(stream);
             notify_settings.serializeToStream(stream);
             exported_invite.serializeToStream(stream);
+            stream.writeInt32(0x1cb5c415);
+            int count = bot_info.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                bot_info.get(a).serializeToStream(stream);
+            }
         }
     }
 
@@ -8012,22 +8324,25 @@ public void serializeToStream(AbsSerializedData stream) {
 
     public static class messages_AllStickers extends TLObject {
         public String hash;
+        public ArrayList<StickerSet> sets = new ArrayList<>();
         public ArrayList<TL_stickerPack> packs = new ArrayList<>();
-        public ArrayList<TL_stickerSet> sets = new ArrayList<>();
         public ArrayList<Document> documents = new ArrayList<>();
 
         public static messages_AllStickers TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             messages_AllStickers result = null;
             switch(constructor) {
-                case 0x5ce352ec:
+                case 0xd51dafdb:
                     result = new TL_messages_allStickers();
                     break;
-                case 0xe86602c3:
-                    result = new TL_messages_allStickersNotModified();
-                    break;
                 case 0xdcef3102:
                     result = new TL_messages_allStickers_old();
                     break;
+                case 0x5ce352ec:
+                    result = new TL_messages_allStickers_old2();
+                    break;
+                case 0xe86602c3:
+                    result = new TL_messages_allStickersNotModified();
+                    break;
             }
             if (result == null && exception) {
                 throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", constructor));
@@ -8040,7 +8355,7 @@ public static messages_AllStickers TLdeserialize(AbsSerializedData stream, int c
     }
 
     public static class TL_messages_allStickers extends messages_AllStickers {
-        public static int constructor = 0x5ce352ec;
+        public static int constructor = 0xd51dafdb;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -8054,26 +8369,46 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             }
             int count = stream.readInt32(exception);
             for (int a = 0; a < count; a++) {
-                TL_stickerPack object = TL_stickerPack.TLdeserialize(stream, stream.readInt32(exception), exception);
+                StickerSet object = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                 if (object == null) {
                     return;
                 }
-                packs.add(object);
+                sets.add(object);
             }
-            magic = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(hash);
+            stream.writeInt32(0x1cb5c415);
+            int count = sets.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                sets.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
+    public static class TL_messages_allStickers_old extends TL_messages_allStickers {
+        public static int constructor = 0xdcef3102;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            hash = stream.readString(exception);
+            int magic = stream.readInt32(exception);
             if (magic != 0x1cb5c415) {
                 if (exception) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
                 }
                 return;
             }
-            count = stream.readInt32(exception);
+            int count = stream.readInt32(exception);
             for (int a = 0; a < count; a++) {
-                TL_stickerSet object = TL_stickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
+                TL_stickerPack object = TL_stickerPack.TLdeserialize(stream, stream.readInt32(exception), exception);
                 if (object == null) {
                     return;
                 }
-                sets.add(object);
+                packs.add(object);
             }
             magic = stream.readInt32(exception);
             if (magic != 0x1cb5c415) {
@@ -8099,13 +8434,7 @@ public void serializeToStream(AbsSerializedData stream) {
             int count = packs.size();
             stream.writeInt32(count);
             for (int a = 0; a < count; a++) {
-                packs.get(a).serializeToStream(stream);
-            }
-            stream.writeInt32(0x1cb5c415);
-            count = sets.size();
-            stream.writeInt32(count);
-            for (int a = 0; a < count; a++) {
-                sets.get(a).serializeToStream(stream);
+                packs.get(a).serializeToStream(stream);
             }
             stream.writeInt32(0x1cb5c415);
             count = documents.size();
@@ -8116,17 +8445,8 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messages_allStickersNotModified extends messages_AllStickers {
-        public static int constructor = 0xe86602c3;
-
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
-    public static class TL_messages_allStickers_old extends TL_messages_allStickers {
-        public static int constructor = 0xdcef3102;
+    public static class TL_messages_allStickers_old2 extends TL_messages_allStickers {
+        public static int constructor = 0x5ce352ec;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -8154,6 +8474,21 @@ public void readParams(AbsSerializedData stream, boolean exception) {
                 return;
             }
             count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                StickerSet object = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                sets.add(object);
+            }
+            magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            count = stream.readInt32(exception);
             for (int a = 0; a < count; a++) {
                 Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                 if (object == null) {
@@ -8173,6 +8508,12 @@ public void serializeToStream(AbsSerializedData stream) {
                 packs.get(a).serializeToStream(stream);
             }
             stream.writeInt32(0x1cb5c415);
+            count = sets.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                sets.get(a).serializeToStream(stream);
+            }
+            stream.writeInt32(0x1cb5c415);
             count = documents.size();
             stream.writeInt32(count);
             for (int a = 0; a < count; a++) {
@@ -8181,6 +8522,15 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_messages_allStickersNotModified extends messages_AllStickers {
+        public static int constructor = 0xe86602c3;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class TL_auth_checkedPhone extends TLObject {
         public static int constructor = 0x811ea28e;
 
@@ -9468,6 +9818,34 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_keyboardButton extends TLObject {
+        public static int constructor = 0xa2fa4880;
+
+        public String text;
+
+        public static TL_keyboardButton TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            if (TL_keyboardButton.constructor != constructor) {
+                if (exception) {
+                    throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButton", constructor));
+                } else {
+                    return null;
+                }
+            }
+            TL_keyboardButton result = new TL_keyboardButton();
+            result.readParams(stream, exception);
+            return result;
+        }
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            text = stream.readString(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeString(text);
+        }
+    }
+
     public static class TL_disabledFeature extends TLObject {
         public static int constructor = 0xae636f24;
 
@@ -10326,6 +10704,96 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class ReplyMarkup extends TLObject {
+        public int flags;
+        public ArrayList<TL_keyboardButtonRow> rows = new ArrayList<>();
+
+        public static ReplyMarkup TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
+            ReplyMarkup result = null;
+            switch(constructor) {
+                case 0xa03e5b85:
+                    result = new TL_replyKeyboardHide();
+                    break;
+                case 0x3502758c:
+                    result = new TL_replyKeyboardMarkup();
+                    break;
+                case 0xf4108aa0:
+                    result = new TL_replyKeyboardForceReply();
+                    break;
+            }
+            if (result == null && exception) {
+                throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", constructor));
+            }
+            if (result != null) {
+                result.readParams(stream, exception);
+            }
+            return result;
+        }
+    }
+
+    public static class TL_replyKeyboardHide extends ReplyMarkup {
+        public static int constructor = 0xa03e5b85;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+        }
+    }
+
+    public static class TL_replyKeyboardMarkup extends ReplyMarkup {
+        public static int constructor = 0x3502758c;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            int magic = stream.readInt32(exception);
+            if (magic != 0x1cb5c415) {
+                if (exception) {
+                    throw new RuntimeException(String.format("wrong Vector magic, got %x", magic));
+                }
+                return;
+            }
+            int count = stream.readInt32(exception);
+            for (int a = 0; a < count; a++) {
+                TL_keyboardButtonRow object = TL_keyboardButtonRow.TLdeserialize(stream, stream.readInt32(exception), exception);
+                if (object == null) {
+                    return;
+                }
+                rows.add(object);
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            stream.writeInt32(0x1cb5c415);
+            int count = rows.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                rows.get(a).serializeToStream(stream);
+            }
+        }
+    }
+
+    public static class TL_replyKeyboardForceReply extends ReplyMarkup {
+        public static int constructor = 0xf4108aa0;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+        }
+    }
+
     public static class TL_msgs_state_info extends TLObject {
         public static int constructor = 0x04deb57d;
 
@@ -12027,10 +12495,12 @@ public void serializeToStream(AbsSerializedData stream) {
     public static class DocumentAttribute extends TLObject {
         public int w;
         public int h;
-        public String file_name;
+        public int duration;
         public String alt;
         public InputStickerSet stickerset;
-        public int duration;
+        public String title;
+        public String performer;
+        public String file_name;
 
         public static DocumentAttribute TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             DocumentAttribute result = null;
@@ -12044,8 +12514,8 @@ public static DocumentAttribute TLdeserialize(AbsSerializedData stream, int cons
                 case 0x6c37c15c:
                     result = new TL_documentAttributeImageSize();
                     break;
-                case 0x15590068:
-                    result = new TL_documentAttributeFilename();
+                case 0x51448e5:
+                    result = new TL_documentAttributeAudio_old();
                     break;
                 case 0x3a556302:
                     result = new TL_documentAttributeSticker();
@@ -12053,12 +12523,15 @@ public static DocumentAttribute TLdeserialize(AbsSerializedData stream, int cons
                 case 0x5910cccb:
                     result = new TL_documentAttributeVideo();
                     break;
-                case 0x51448e5:
+                case 0xded218e0:
                     result = new TL_documentAttributeAudio();
                     break;
                 case 0x994c9882:
                     result = new TL_documentAttributeSticker_old2();
                     break;
+                case 0x15590068:
+                    result = new TL_documentAttributeFilename();
+                    break;
             }
             if (result == null && exception) {
                 throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", constructor));
@@ -12106,6 +12579,20 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_documentAttributeAudio_old extends TL_documentAttributeAudio {
+        public static int constructor = 0x51448e5;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            duration = stream.readInt32(exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(duration);
+        }
+    }
+
     public static class TL_documentAttributeFilename extends DocumentAttribute {
         public static int constructor = 0x15590068;
 
@@ -12155,16 +12642,20 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_documentAttributeAudio extends DocumentAttribute {
-        public static int constructor = 0x51448e5;
+        public static int constructor = 0xded218e0;
 
 
         public void readParams(AbsSerializedData stream, boolean exception) {
             duration = stream.readInt32(exception);
+            title = stream.readString(exception);
+            performer = stream.readString(exception);
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stream.writeInt32(duration);
+            stream.writeString(title);
+            stream.writeString(performer);
         }
     }
 
@@ -13314,13 +13805,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_sendMessage extends TLObject {
-        public static int constructor = 0x9add8f26;
+        public static int constructor = 0xfc55e6b5;
 
         public int flags;
         public InputPeer peer;
         public int reply_to_msg_id;
         public String message;
         public long random_id;
+        public ReplyMarkup reply_markup;
 
         public TLObject deserializeResponse(AbsSerializedData stream, int constructor, boolean exception) {
             return messages_SentMessage.TLdeserialize(stream, constructor, exception);
@@ -13335,17 +13827,21 @@ public void serializeToStream(AbsSerializedData stream) {
             }
             stream.writeString(message);
             stream.writeInt64(random_id);
+            if ((flags & 4) != 0) {
+                reply_markup.serializeToStream(stream);
+            }
         }
     }
 
     public static class TL_messages_sendMedia extends TLObject {
-        public static int constructor = 0x2d7923b1;
+        public static int constructor = 0xc8f16791;
 
         public int flags;
         public InputPeer peer;
         public int reply_to_msg_id;
         public InputMedia media;
         public long random_id;
+        public ReplyMarkup reply_markup;
 
         public TLObject deserializeResponse(AbsSerializedData stream, int constructor, boolean exception) {
             return Updates.TLdeserialize(stream, constructor, exception);
@@ -13360,6 +13856,9 @@ public void serializeToStream(AbsSerializedData stream) {
             }
             media.serializeToStream(stream);
             stream.writeInt64(random_id);
+            if ((flags & 4) != 0) {
+                reply_markup.serializeToStream(stream);
+            }
         }
     }
 
@@ -14603,9 +15102,10 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_installStickerSet extends TLObject {
-        public static int constructor = 0xefbbfae9;
+        public static int constructor = 0x7b30c3a6;
 
         public InputStickerSet stickerset;
+        public boolean disabled;
 
         public TLObject deserializeResponse(AbsSerializedData stream, int constructor, boolean exception) {
             return Bool.TLdeserialize(stream, constructor, exception);
@@ -14614,6 +15114,7 @@ public TLObject deserializeResponse(AbsSerializedData stream, int constructor, b
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stickerset.serializeToStream(stream);
+            stream.writeBool(disabled);
         }
     }
 
@@ -14632,6 +15133,27 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_messages_startBot extends TLObject {
+        public static int constructor = 0x1b3e0ffc;
+
+        public InputUser bot;
+        public int chat_id;
+        public long random_id;
+        public String start_param;
+
+        public TLObject deserializeResponse(AbsSerializedData stream, int constructor, boolean exception) {
+            return Updates.TLdeserialize(stream, constructor, exception);
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            bot.serializeToStream(stream);
+            stream.writeInt32(chat_id);
+            stream.writeInt64(random_id);
+            stream.writeString(start_param);
+        }
+    }
+
     //manually created
 
     //EncryptedChat start
@@ -14709,6 +15231,7 @@ public static EncryptedChat TLdeserialize(AbsSerializedData stream, int construc
         public String message;
         public MessageMedia media;
         public int flags;
+        public ReplyMarkup reply_markup;
         public int send_state = 0; //custom
         public int fwd_msg_id = 0; //custom
         public String attachPath = ""; //custom
@@ -14729,6 +15252,9 @@ public static Message TLdeserialize(AbsSerializedData stream, int constructor, b
                     result = new TL_messageService();
                     break;
                 case 0xa7ab1991:
+                    result = new TL_message_old3();
+                    break;
+                case 0xc3060325:
                     result = new TL_message();
                     break;
                 case 0x83e5de54:
@@ -14805,6 +15331,66 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_message extends Message {
+        public static int constructor = 0xc3060325;
+
+
+        public void readParams(AbsSerializedData stream, boolean exception) {
+            flags = stream.readInt32(exception);
+            id = stream.readInt32(exception);
+            from_id = stream.readInt32(exception);
+            to_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 4) != 0) {
+                fwd_from_id = stream.readInt32(exception);
+            }
+            if ((flags & 4) != 0) {
+                fwd_date = stream.readInt32(exception);
+            }
+            if ((flags & 8) != 0) {
+                reply_to_msg_id = stream.readInt32(exception);
+            }
+            date = stream.readInt32(exception);
+            message = stream.readString(exception);
+            media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
+            if ((flags & 64) != 0) {
+                reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
+            }
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+                attachPath = stream.readString(exception);
+            }
+            if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+                fwd_msg_id = stream.readInt32(exception);
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            stream.writeInt32(id);
+            stream.writeInt32(from_id);
+            to_id.serializeToStream(stream);
+            if ((flags & 4) != 0) {
+                stream.writeInt32(fwd_from_id);
+            }
+            if ((flags & 4) != 0) {
+                stream.writeInt32(fwd_date);
+            }
+            if ((flags & 8) != 0) {
+                stream.writeInt32(reply_to_msg_id);
+            }
+            stream.writeInt32(date);
+            stream.writeString(message);
+            media.serializeToStream(stream);
+            if ((flags & 64) != 0) {
+                reply_markup.serializeToStream(stream);
+            }
+            stream.writeString(attachPath);
+            if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+                stream.writeInt32(fwd_msg_id);
+            }
+        }
+    }
+
+    public static class TL_message_old3 extends TL_message {
         public static int constructor = 0xa7ab1991;
 
         public void readParams(AbsSerializedData stream, boolean exception) {
@@ -14824,7 +15410,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             date = stream.readInt32(exception);
             message = stream.readString(exception);
             media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
-            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
                 attachPath = stream.readString(exception);
             }
             if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
@@ -14869,7 +15455,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             date = stream.readInt32(exception);
             message = stream.readString(exception);
             media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
-            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
                 attachPath = stream.readString(exception);
             }
         }
@@ -14932,7 +15518,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             if (id < 0) {
                 fwd_msg_id = stream.readInt32(exception);
             }
-            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
                 attachPath = stream.readString(exception);
             }
         }
@@ -14968,7 +15554,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             date = stream.readInt32(exception);
             message = stream.readString(exception);
             media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
-            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
                 attachPath = stream.readString(exception);
             }
         }
@@ -14999,7 +15585,7 @@ public void readParams(AbsSerializedData stream, boolean exception) {
             date = stream.readInt32(exception);
             message = stream.readString(exception);
             media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
-            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage) && message != null && message.length() != 0 && message.startsWith("-1"))) {
                 attachPath = stream.readString(exception);
             }
         }
@@ -15064,27 +15650,6 @@ public void serializeToStream(AbsSerializedData stream) {
     }
     //TL_dialog end
 
-    //User start
-    public static class TL_userEmpty extends User {
-        public static int constructor = 0x200250ba;
-
-
-        public void readParams(AbsSerializedData stream, boolean exception) {
-            id = stream.readInt32(exception);
-
-            first_name = "DELETED";
-            last_name = "";
-            phone = "";
-            status = new TL_userStatusEmpty();
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(id);
-        }
-    }
-    //User end
-
     //Chat start
     public static class TL_chatEmpty extends Chat {
         public static int constructor = 0x9ba2d800;
@@ -15385,7 +15950,8 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             int count = session_ids.size();
             stream.writeInt32(count);
-            for (Long session_id : session_ids) {
+            for (int a = 0; a < session_ids.size(); a++) {
+                Long session_id = session_ids.get(a);
                 stream.writeInt64(session_id);
             }
         }
@@ -15544,7 +16110,8 @@ public void readParams(AbsSerializedData stream, boolean exception) {
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stream.writeInt32(messages.size());
-            for (TLObject obj : messages) {
+            for (int a = 0; a < messages.size(); a++) {
+                TLObject obj = messages.get(a);
                 TL_protoMessage proto = (TL_protoMessage) obj;
                 stream.writeInt64(proto.msg_id);
                 stream.writeInt32(proto.seqno);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
index 31b0ffce5..38e3ff667 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
@@ -132,7 +132,7 @@ public static void loadConfig() {
                     int ver = data.readInt32(false);
                     if (ver == 1) {
                         int constructor = data.readInt32(false);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+                        currentUser = TLRPC.User.TLdeserialize(data, constructor, false);
                         MessagesStorage.lastDateValue = data.readInt32(false);
                         MessagesStorage.lastPtsValue = data.readInt32(false);
                         MessagesStorage.lastSeqValue = data.readInt32(false);
@@ -159,7 +159,7 @@ public void run() {
                         });
                     } else if (ver == 2) {
                         int constructor = data.readInt32(false);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, constructor, false);
+                        currentUser = TLRPC.User.TLdeserialize(data, constructor, false);
 
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("userconfing", Context.MODE_PRIVATE);
                         registeredForPush = preferences.getBoolean("registeredForPush", false);
@@ -211,7 +211,7 @@ public void run() {
                     byte[] userBytes = Base64.decode(user, Base64.DEFAULT);
                     if (userBytes != null) {
                         SerializedData data = new SerializedData(userBytes);
-                        currentUser = TLRPC.TL_userSelf.TLdeserialize(data, data.readInt32(false), false);
+                        currentUser = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
                         data.cleanup();
                     }
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index d75744e4b..9571969c8 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -284,7 +284,7 @@ public static TPFactorizedValue getFactorizedValue(long what) {
     }
 
     public static boolean arraysEquals(byte[] arr1, int offset1, byte[] arr2, int offset2) {
-        if (arr1 == null || arr2 == null || arr1.length - offset1 != arr2.length - offset2 || arr1.length - offset1 < 0) {
+        if (arr1 == null || arr2 == null || offset1 < 0 || offset2 < 0 || arr1.length - offset1 != arr2.length - offset2 || arr1.length - offset1 < 0 || arr2.length - offset2 < 0) {
             return false;
         }
         boolean result = true;
@@ -450,7 +450,7 @@ public static void restartApp(){
         int mPendingIntentId = 123456;
         PendingIntent mPendingIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, mPendingIntentId, mRestartApp, PendingIntent.FLAG_CANCEL_CURRENT);
         AlarmManager mgr = (AlarmManager)ApplicationLoader.applicationContext.getSystemService(Context.ALARM_SERVICE);
-        mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 100, mPendingIntent);
+        mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 1000, mPendingIntent);
         System.exit(0);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 6a2ffc0fd..68b3b28be 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -28,12 +28,11 @@
 import android.widget.LinearLayout;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.R;
 import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.R;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.util.ArrayList;
@@ -184,6 +183,13 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
         }
     }
 
+    public void drawHeaderShadow(Canvas canvas, int y) {
+        if (headerShadowDrawable != null) {
+            headerShadowDrawable.setBounds(0, y, getMeasuredWidth(), y + headerShadowDrawable.getIntrinsicHeight());
+            headerShadowDrawable.draw(canvas);
+        }
+    }
+
     public void setInnerTranslationX(float value) {
         innerTranslationX = value;
         invalidate();
@@ -264,7 +270,10 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                 layerShadowDrawable.setAlpha((int) (0xff * alpha));
                 layerShadowDrawable.draw(canvas);
             } else if (child == containerViewBack) {
-                final float opacity = Math.min(0.8f, (width - translationX) / (float)width);
+                float opacity = Math.min(0.8f, (width - translationX) / (float)width);
+                if (opacity < 0) {
+                    opacity = 0;
+                }
                 scrimPaint.setColor((int) (((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
                 canvas.drawRect(clipLeft, 0, clipRight, getHeight(), scrimPaint);
             }
@@ -293,6 +302,7 @@ private void onSlideAnimationEnd(final boolean backAnimation) {
             lastFragment = fragmentsStack.get(fragmentsStack.size() - 1);
             currentActionBar = lastFragment.actionBar;
             lastFragment.onResume();
+            lastFragment.onBecomeFullyVisible();
         } else {
             BaseFragment lastFragment = fragmentsStack.get(fragmentsStack.size() - 2);
             lastFragment.onPause();
@@ -309,7 +319,7 @@ private void onSlideAnimationEnd(final boolean backAnimation) {
                 }
             }
         }
-        containerViewBack.setVisibility(View.INVISIBLE);
+        containerViewBack.setVisibility(View.GONE);
         //AndroidUtilities.unlockOrientation(parentActivity);
         startedTracking = false;
         animationInProgress = false;
@@ -428,13 +438,13 @@ public boolean onTouchEvent(MotionEvent ev) {
                         if (!backAnimation) {
                             distToMove = containerView.getMeasuredWidth() - x;
                             animatorSet.playTogether(
-                                    ObjectAnimatorProxy.ofFloat(containerView, "x", containerView.getMeasuredWidth()),
+                                    ObjectAnimatorProxy.ofFloat(containerView, "translationX", containerView.getMeasuredWidth()),
                                     ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", (float)containerView.getMeasuredWidth())
                             );
                         } else {
                             distToMove = x;
                             animatorSet.playTogether(
-                                    ObjectAnimatorProxy.ofFloat(containerView, "x", 0),
+                                    ObjectAnimatorProxy.ofFloat(containerView, "translationX", 0),
                                     ObjectAnimatorProxy.ofFloat(this, "innerTranslationX", 0.0f)
                             );
                         }
@@ -545,7 +555,7 @@ private void presentFragmentInternalRemoveOld(boolean removeLast, final BaseFrag
                 }
             }
         }
-        containerViewBack.setVisibility(View.INVISIBLE);
+        containerViewBack.setVisibility(View.GONE);
     }
 
     public boolean presentFragment(BaseFragment fragment) {
@@ -560,6 +570,13 @@ private void startLayoutAnimation(final boolean open, final boolean first) {
         if (first) {
             animationProgress = 0.0f;
             lastFrameTime = System.nanoTime() / 1000000;
+            if (Build.VERSION.SDK_INT >= 11) {
+                if (open) {
+                    containerView.setLayerType(LAYER_TYPE_HARDWARE, null);
+                } else {
+                    containerViewBack.setLayerType(LAYER_TYPE_HARDWARE, null);
+                }
+            }
         }
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
@@ -600,7 +617,6 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
         }
         if (parentActivity.getCurrentFocus() != null) {
             AndroidUtilities.hideKeyboard(parentActivity.getCurrentFocus());
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.hideEmojiKeyboard);
         }
         boolean needAnimation = Build.VERSION.SDK_INT > 10 && !forceWithoutAnimation && parentActivity.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getBoolean("view_animations", true);
 
@@ -665,6 +681,7 @@ public boolean presentFragment(final BaseFragment fragment, final boolean remove
                     @Override
                     public void run() {
                         fragment.onOpenAnimationEnd();
+                        fragment.onBecomeFullyVisible();
                     }
                 };
                 ArrayList<Object> animators = new ArrayList<>();
@@ -697,8 +714,12 @@ public void onAnimationCancel(Object animation) {
                 onOpenAnimationEndRunnable = new Runnable() {
                     @Override
                     public void run() {
+                        if (Build.VERSION.SDK_INT >= 18) {
+                            containerView.setLayerType(LAYER_TYPE_NONE, null);
+                        }
                         presentFragmentInternalRemoveOld(removeLast, currentFragment);
                         fragment.onOpenAnimationEnd();
+                        fragment.onBecomeFullyVisible();
                         ViewProxy.setTranslationX(containerView, 0);
                     }
                 };
@@ -737,6 +758,7 @@ public void onAnimationCancel(Object animation) {
             }
             fragment.onOpenAnimationStart();
             fragment.onOpenAnimationEnd();
+            fragment.onBecomeFullyVisible();
         }
         return true;
     }
@@ -779,7 +801,7 @@ private void closeLastFragmentInternalRemoveOld(BaseFragment fragment) {
         fragment.onFragmentDestroy();
         fragment.setParentLayout(null);
         fragmentsStack.remove(fragment);
-        containerViewBack.setVisibility(View.INVISIBLE);
+        containerViewBack.setVisibility(View.GONE);
         bringChildToFront(containerView);
     }
 
@@ -830,6 +852,7 @@ public void closeLastFragment(boolean animated) {
             layoutParams.width = LayoutHelper.MATCH_PARENT;
             layoutParams.height = LayoutHelper.MATCH_PARENT;
             fragmentView.setLayoutParams(layoutParams);
+            previousFragment.onOpenAnimationStart();
             previousFragment.onResume();
             currentActionBar = previousFragment.actionBar;
             if (!previousFragment.hasOwnBackground && fragmentView.getBackground() == null) {
@@ -843,11 +866,17 @@ public void closeLastFragment(boolean animated) {
             if (needAnimation) {
                 transitionAnimationStartTime = System.currentTimeMillis();
                 transitionAnimationInProgress = true;
+                final BaseFragment previousFragmentFinal = previousFragment;
                 onCloseAnimationEndRunnable = new Runnable() {
                     @Override
                     public void run() {
+                        if (Build.VERSION.SDK_INT >= 18) {
+                            containerViewBack.setLayerType(LAYER_TYPE_NONE, null);
+                        }
                         closeLastFragmentInternalRemoveOld(currentFragment);
                         ViewProxy.setTranslationX(containerViewBack, 0);
+                        previousFragmentFinal.onOpenAnimationEnd();
+                        previousFragmentFinal.onBecomeFullyVisible();
                     }
                 };
                 startLayoutAnimation(false, true);
@@ -875,6 +904,9 @@ public void onAnimationCancel(Object animation) {
                     }
                 });
                 currentAnimation.start();*/
+            } else {
+                previousFragment.onOpenAnimationEnd();
+                previousFragment.onBecomeFullyVisible();
             }
         } else {
             if (useAlphaAnimations) {
@@ -885,9 +917,9 @@ public void onAnimationCancel(Object animation) {
                     @Override
                     public void run() {
                         removeFragmentFromStack(currentFragment);
-                        setVisibility(INVISIBLE);
+                        setVisibility(GONE);
                         if (backgroundView != null) {
-                            backgroundView.setVisibility(INVISIBLE);
+                            backgroundView.setVisibility(GONE);
                         }
                         if (drawerLayoutContainer != null) {
                             drawerLayoutContainer.setAllowOpenDrawer(true, false);
@@ -924,9 +956,9 @@ public void onAnimationCancel(Object animation) {
                 currentAnimation.start();
             } else {
                 removeFragmentFromStack(currentFragment);
-                setVisibility(INVISIBLE);
+                setVisibility(GONE);
                 if (backgroundView != null) {
-                    backgroundView.setVisibility(INVISIBLE);
+                    backgroundView.setVisibility(GONE);
                 }
             }
         }
@@ -986,7 +1018,7 @@ public void removeAllFragments() {
 
     public void rebuildAllFragmentViews(boolean last) {
         for (int a = 0; a < fragmentsStack.size() - (last ? 0 : 1); a++) {
-            fragmentsStack.get(a).setParentLayout(null);
+            fragmentsStack.get(a).clearViews();
             fragmentsStack.get(a).setParentLayout(this);
         }
         if (delegate != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index 18ce670aa..e1fa67f74 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -65,6 +65,10 @@ public ActionBarMenuItem addItemWithWidth(int id, int icon, int width) {
         return addItem(id, icon, parentActionBar.itemsBackgroundResourceId, null, width);
     }
 
+    public ActionBarMenuItem addItemWithWidth(int id, Drawable icon, int width) {
+        return addItem(id, 0, parentActionBar.itemsBackgroundResourceId, icon, width);
+    }
+
     public ActionBarMenuItem addItem(int id, int icon, int backgroundResource, Drawable drawable, int width) {
         ActionBarMenuItem menuItem = new ActionBarMenuItem(getContext(), this, backgroundResource);
         menuItem.setTag(id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index cfdcad6d2..93f4ef8b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -32,9 +32,9 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
 
@@ -46,10 +46,14 @@
         public void onSearchExpand() {
         }
 
-        public boolean onSearchCollapse() {
+        public boolean canCollapseSearch() {
             return true;
         }
 
+        public void onSearchCollapse() {
+
+        }
+
         public void onTextChanged(EditText editText) {
         }
 
@@ -78,6 +82,7 @@ public void onSearchPressed(EditText editText) {
     private int menuHeight = AndroidUtilities.dp(16);
     private int subMenuOpenSide = 0;
     private ActionBarMenuItemDelegate delegate;
+    private boolean allowCloseAnimation = true;
 
     public ActionBarMenuItem(Context context, ActionBarMenu menu, int background) {
         super(context);
@@ -155,8 +160,10 @@ public void run() {
                 } else if (delegate != null) {
                     delegate.onItemClick((Integer) selectedMenuView.getTag());
                 }
+                popupWindow.dismiss(allowCloseAnimation);
+            } else {
+                popupWindow.dismiss();
             }
-            popupWindow.dismiss();
         } else {
             if (selectedMenuView != null) {
                 selectedMenuView.setSelected(false);
@@ -172,6 +179,9 @@ public void setDelegate(ActionBarMenuItemDelegate delegate) {
 
     public void setShowFromBottom(boolean value) {
         showFromBottom = value;
+        if (popupLayout != null) {
+            popupLayout.setShowedFromBotton(showFromBottom);
+        }
     }
 
     public void setSubMenuOpenSide(int side) {
@@ -184,7 +194,8 @@ public TextView addSubItem(int id, String text, int icon) {
             location = new int[2];
             popupLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout(getContext());
             popupLayout.setOrientation(LinearLayout.VERTICAL);
-            popupLayout.setBackgroundResource(R.drawable.popup_fixed);
+            popupLayout.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8), AndroidUtilities.dp(8));
+            //popupLayout.setBackgroundResource(R.drawable.popup_fixed);
             popupLayout.setOnTouchListener(new OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -229,6 +240,7 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
                 textView.setCompoundDrawablesWithIntrinsicBounds(null, null, getResources().getDrawable(icon), null);
             }
         }
+        popupLayout.setShowedFromBotton(showFromBottom);
         popupLayout.addView(textView);
         LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) textView.getLayoutParams();
         if (LocaleController.isRTL) {
@@ -240,14 +252,14 @@ public void onDispatchKeyEvent(KeyEvent keyEvent) {
         textView.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
+                if (popupWindow != null && popupWindow.isShowing()) {
+                    popupWindow.dismiss(allowCloseAnimation);
+                }
                 if (parentMenu != null) {
                 parentMenu.onItemClick((Integer) view.getTag());
                 } else if (delegate != null) {
                     delegate.onItemClick((Integer) view.getTag());
                 }
-                if (popupWindow != null && popupWindow.isShowing()) {
-                    popupWindow.dismiss();
-                }
             }
         });
         menuHeight += layoutParams.height;
@@ -273,7 +285,11 @@ public void toggleSubMenu() {
         if (popupWindow == null) {
             popupWindow = new ActionBarPopupWindow(popupLayout, LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT);
             //popupWindow.setBackgroundDrawable(new BitmapDrawable());
+            if (Build.VERSION.SDK_INT >= 19) {
+                popupWindow.setAnimationStyle(0);
+            } else {
             popupWindow.setAnimationStyle(R.style.PopupAnimation);
+            }
             popupWindow.setOutsideTouchable(true);
             popupWindow.setClippingEnabled(true);
             popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
@@ -293,54 +309,11 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
         }
         popupWindow.setFocusable(true);
         if (popupLayout.getMeasuredWidth() == 0) {
-            if (subMenuOpenSide == 0) {
-                if (showFromBottom) {
-                    popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), getOffsetY());
-                    popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), getOffsetY(), -1, -1);
-                } else {
-                    if (parentMenu != null) {
-                    popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY());
-                    popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY(), -1, -1);
-                    } else if (getParent() != null) {
-                        View parent = (View) getParent();
-                        popupWindow.showAsDropDown(this, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), getOffsetY());
-                        popupWindow.update(this, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), getOffsetY(), -1, -1);
-                    }
-                }
-            } else {
-                popupWindow.showAsDropDown(this, -AndroidUtilities.dp(8), getOffsetY());
-                popupWindow.update(this, -AndroidUtilities.dp(8), getOffsetY(), -1, -1);
-            }
-        } else {
-            if (subMenuOpenSide == 0) {
-                if (showFromBottom) {
-                    popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), getOffsetY());
-                } else {
-                    if (parentMenu != null) {
-                    popupWindow.showAsDropDown(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY());
-                    } else {
-                        View parent = (View) getParent();
-                        popupWindow.showAsDropDown(this, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), getOffsetY());
-                    }
-                }
-            } else {
-                popupWindow.showAsDropDown(this, -AndroidUtilities.dp(8), getOffsetY());
-            }
-        }
-    }
-
-    private int getOffsetY() {
-        if (showFromBottom) {
-            getLocationOnScreen(location);
-            int diff = location[1] - AndroidUtilities.statusBarHeight + getMeasuredHeight() - menuHeight;
-            int y = -menuHeight;
-            if (diff < 0) {
-                y -= diff;
-            }
-            return y;
+            updateOrShowPopup(true, true);
         } else {
-            return -getMeasuredHeight();
+            updateOrShowPopup(true, false);
         }
+        popupWindow.startAnimation();
     }
 
     public void openSearch() {
@@ -355,10 +328,13 @@ public boolean toggleSearch() {
             return false;
         }
         if (searchContainer.getVisibility() == VISIBLE) {
-            if (listener == null || listener != null && listener.onSearchCollapse()) {
+            if (listener == null || listener != null && listener.canCollapseSearch()) {
             searchContainer.setVisibility(GONE);
             setVisibility(VISIBLE);
             AndroidUtilities.hideKeyboard(searchField);
+                if (listener != null) {
+                    listener.onSearchCollapse();
+                }
             }
             return false;
         } else {
@@ -393,6 +369,10 @@ public EditText getSearchField() {
     }
 
     public ActionBarMenuItem setIsSearchField(boolean value) {
+        return setIsSearchField(value, true);
+    }
+
+    public ActionBarMenuItem setIsSearchField(boolean value, boolean needClearButton) {
         if (parentMenu == null) {
             return this;
         }
@@ -428,6 +408,7 @@ public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                     }
 
                     public void onDestroyActionMode(ActionMode mode) {
+
                     }
 
                     public boolean onCreateActionMode(ActionMode mode, Menu menu) {
@@ -462,8 +443,10 @@ public void onTextChanged(CharSequence s, int start, int before, int count) {
                     if (listener != null) {
                         listener.onTextChanged(searchField);
                     }
+                    if (clearButton != null) {
                     ViewProxy.setAlpha(clearButton, s == null || s.length() == 0 ? 0.6f : 1.0f);
                 }
+                }
 
                 @Override
                 public void afterTextChanged(Editable s) {
@@ -492,6 +475,7 @@ public void afterTextChanged(Editable s) {
             layoutParams2.rightMargin = AndroidUtilities.dp(48);
             searchField.setLayoutParams(layoutParams2);
 
+            if (needClearButton) {
             clearButton = new ImageView(getContext());
             clearButton.setImageResource(R.drawable.ic_close_white);
             clearButton.setScaleType(ImageView.ScaleType.CENTER);
@@ -509,6 +493,7 @@ public void onClick(View v) {
             layoutParams2.height = LayoutHelper.MATCH_PARENT;
             clearButton.setLayoutParams(layoutParams2);
         }
+        }
         isSearchField = value;
         return this;
     }
@@ -522,26 +507,73 @@ public ActionBarMenuItem setActionBarMenuItemSearchListener(ActionBarMenuItemSea
         return this;
     }
 
+    public ActionBarMenuItem setAllowCloseAnimation(boolean value) {
+        allowCloseAnimation = value;
+        return this;
+    }
+
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         super.onLayout(changed, left, top, right, bottom);
         if (popupWindow != null && popupWindow.isShowing()) {
+            updateOrShowPopup(false, true);
+        }
+    }
+
+    private void updateOrShowPopup(boolean show, boolean update) {
+        int offsetY;
+        if (showFromBottom) {
+            getLocationOnScreen(location);
+            int diff = location[1] - AndroidUtilities.statusBarHeight + getMeasuredHeight() - menuHeight;
+            offsetY = -menuHeight;
+            if (diff < 0) {
+                offsetY -= diff;
+            }
+        } else {
+            if (parentMenu != null && subMenuOpenSide == 0) {
+                offsetY = -parentMenu.parentActionBar.getMeasuredHeight() + parentMenu.getTop();
+            } else {
+                offsetY = -getMeasuredHeight();
+            }
+        }
+
             if (subMenuOpenSide == 0) {
                 if (showFromBottom) {
-                    popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), getOffsetY(), -1, -1);
-                } else {
-                    if (parentMenu != null) {
-                    popupWindow.update(this, parentMenu.parentActionBar.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parentMenu.getLeft(), getOffsetY(), -1, -1);
-                    } else {
-                        View parent = (View) getParent();
-                        popupWindow.update(this, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), getOffsetY(), -1, -1);
-                    }
+                if (show) {
+                    popupWindow.showAsDropDown(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), offsetY);
+                }
+                if (update) {
+                    popupWindow.update(this, -popupLayout.getMeasuredWidth() + getMeasuredWidth(), offsetY, -1, -1);
                 }
             } else {
-                popupWindow.update(this, -AndroidUtilities.dp(8), getOffsetY(), -1, -1);
+                if (parentMenu != null) {
+                    View parent = parentMenu.parentActionBar;
+                    if (show) {
+                        popupWindow.showAsDropDown(parent, getLeft() + parentMenu.getLeft() + getMeasuredWidth() - popupLayout.getMeasuredWidth(), offsetY);
+                    }
+                    if (update) {
+                        popupWindow.update(parent, getLeft() + parentMenu.getLeft() + getMeasuredWidth() - popupLayout.getMeasuredWidth(), offsetY, -1, -1);
+                    }
+                } else if (getParent() != null) {
+                        View parent = (View) getParent();
+                    if (show) {
+                        popupWindow.showAsDropDown(parent, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), offsetY);
+                }
+                    if (update) {
+                        popupWindow.update(parent, parent.getMeasuredWidth() - popupLayout.getMeasuredWidth() - getLeft() - parent.getLeft(), offsetY, -1, -1);
             }
         }
     }
+        } else {
+            if (show) {
+                popupWindow.showAsDropDown(this, -AndroidUtilities.dp(8), offsetY);
+            }
+            if (update) {
+                popupWindow.update(this, -AndroidUtilities.dp(8), offsetY, -1, -1);
+            }
+        }
+    }
+
     //plus
     public ImageView getClearButton(){
         return clearButton;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 759222d1c..7d6816f25 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -10,20 +10,33 @@
 
 package org.telegram.ui.ActionBar;
 
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
 import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewTreeObserver;
+import android.view.animation.DecelerateInterpolator;
 import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
 
 import java.lang.reflect.Field;
+import java.util.HashMap;
 
 public class ActionBarPopupWindow extends PopupWindow {
 
     private static final Field superListenerField;
+    private static final boolean animationEnabled = Build.VERSION.SDK_INT >= 18;
+    private static DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
+    private AnimatorSet windowAnimatorSet;
     static {
         Field f = null;
         try {
@@ -52,15 +65,104 @@ public void onScrollChanged() {
     public static class ActionBarPopupWindowLayout extends LinearLayout {
 
         private OnDispatchKeyEventListener mOnDispatchKeyEventListener;
+        protected static Drawable backgroundDrawable;
+        private float backScaleX = 1;
+        private float backScaleY = 1;
+        private int backAlpha = 255;
+        private int lastStartedChild = 0;
+        private boolean showedFromBotton;
+        private HashMap<View, Integer> positions = new HashMap<>();
 
         public ActionBarPopupWindowLayout(Context context) {
             super(context);
+            setWillNotDraw(false);
+
+            if (backgroundDrawable == null) {
+                backgroundDrawable = getResources().getDrawable(R.drawable.popup_fixed);
+            }
+        }
+
+        public void setShowedFromBotton(boolean value) {
+            showedFromBotton = value;
         }
 
         public void setDispatchKeyEventListener(OnDispatchKeyEventListener listener) {
             mOnDispatchKeyEventListener = listener;
         }
 
+        public void setBackAlpha(int value) {
+            backAlpha = value;
+        }
+
+        public int getBackAlpha() {
+            return backAlpha;
+        }
+
+        public void setBackScaleX(float value) {
+            backScaleX = value;
+            invalidate();
+        }
+
+        public void setBackScaleY(float value) {
+            backScaleY = value;
+            if (animationEnabled) {
+                int count = getChildCount();
+                int visibleCount = 0;
+                for (int a = 0; a < count; a++) {
+                    visibleCount += getChildAt(a).getVisibility() == VISIBLE ? 1 : 0;
+                }
+                int height = getMeasuredHeight() - AndroidUtilities.dp(16);
+                if (showedFromBotton) {
+                    for (int a = lastStartedChild; a >= 0; a--) {
+                        View child = getChildAt(a);
+                        if (child.getVisibility() != VISIBLE) {
+                            continue;
+                        }
+                        int position = positions.get(child);
+                        if (height - (position * AndroidUtilities.dp(48) + AndroidUtilities.dp(32)) > value * height) {
+                            break;
+                        }
+                        lastStartedChild = a - 1;
+                        startChildAnimation(child);
+                    }
+                } else {
+                    for (int a = lastStartedChild; a < count; a++) {
+                        View child = getChildAt(a);
+                        if (child.getVisibility() != VISIBLE) {
+                            continue;
+                        }
+                        int position = positions.get(child);
+                        if ((position + 1) * AndroidUtilities.dp(48) - AndroidUtilities.dp(24) > value * height) {
+                            break;
+                        }
+                        lastStartedChild = a + 1;
+                        startChildAnimation(child);
+                    }
+                }
+            }
+            invalidate();
+        }
+
+        private void startChildAnimation(View child) {
+            if (animationEnabled) {
+                AnimatorSet animatorSet = new AnimatorSet();
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(child, "alpha", 0.0f, 1.0f),
+                        ObjectAnimator.ofFloat(child, "translationY", AndroidUtilities.dp(showedFromBotton ? 6 : -6), 0));
+                animatorSet.setDuration(180);
+                animatorSet.setInterpolator(decelerateInterpolator);
+                animatorSet.start();
+            }
+        }
+
+        public float getBackScaleX() {
+            return backScaleX;
+        }
+
+        public float getBackScaleY() {
+            return backScaleY;
+        }
+
         @Override
         public boolean dispatchKeyEvent(KeyEvent event) {
             if (mOnDispatchKeyEventListener != null) {
@@ -68,6 +170,19 @@ public boolean dispatchKeyEvent(KeyEvent event) {
             }
             return super.dispatchKeyEvent(event);
         }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            if (backgroundDrawable != null) {
+                backgroundDrawable.setAlpha(backAlpha);
+                if (showedFromBotton) {
+                    backgroundDrawable.setBounds(0, (int) (getMeasuredHeight() * (1.0f - backScaleY)), (int) (getMeasuredWidth() * backScaleX), getMeasuredHeight());
+                } else {
+                    backgroundDrawable.setBounds(0, 0, (int) (getMeasuredWidth() * backScaleX), (int) (getMeasuredHeight() * backScaleY));
+                }
+                backgroundDrawable.draw(canvas);
+            }
+        }
     }
 
     public ActionBarPopupWindow() {
@@ -109,15 +224,6 @@ private void init() {
                 mSuperScrollListener = null;
             }
         }
-        /*if (Build.VERSION.SDK_INT >= 21) {
-            try {
-                Field field = PopupWindow.class.getDeclaredField("mWindowLayoutType");
-                field.setAccessible(true);
-                field.set(this, WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
-            } catch (Exception e) {
-                //ignored
-            }
-        }*/
     }
 
     private void unregisterListener() {
@@ -153,6 +259,63 @@ public void showAsDropDown(View anchor, int xoff, int yoff) {
         }
     }
 
+    public void startAnimation() {
+        if (animationEnabled) {
+            if (windowAnimatorSet != null) {
+                return;
+            }
+            ActionBarPopupWindowLayout content = (ActionBarPopupWindowLayout) getContentView();
+            content.setTranslationY(0);
+            content.setAlpha(1.0f);
+            content.setPivotX(content.getMeasuredWidth());
+            content.setPivotY(0);
+            int count = content.getChildCount();
+            content.positions.clear();
+            int visibleCount = 0;
+            for (int a = 0; a < count; a++) {
+                View child = content.getChildAt(a);
+                if (child.getVisibility() != View.VISIBLE) {
+                    continue;
+                }
+                content.positions.put(child, visibleCount);
+                child.setAlpha(0.0f);
+                visibleCount++;
+            }
+            if (content.showedFromBotton) {
+                content.lastStartedChild = count - 1;
+            } else {
+                content.lastStartedChild = 0;
+            }
+            windowAnimatorSet = new AnimatorSet();
+            windowAnimatorSet.playTogether(
+                    ObjectAnimator.ofFloat(content, "backScaleY", 0.0f, 1.0f),
+                    ObjectAnimator.ofInt(content, "backAlpha", 0, 255));
+            windowAnimatorSet.setDuration(150 + 16 * visibleCount);
+            windowAnimatorSet.addListener(new Animator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {
+
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    windowAnimatorSet = null;
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                    onAnimationEnd(animation);
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {
+
+                }
+            });
+            windowAnimatorSet.start();
+        }
+    }
+
     @Override
     public void update(View anchor, int xoff, int yoff, int width, int height) {
         super.update(anchor, xoff, yoff, width, height);
@@ -173,12 +336,57 @@ public void showAtLocation(View parent, int gravity, int x, int y) {
 
     @Override
     public void dismiss() {
-        setFocusable(false);
-        try {
-            super.dismiss();
-        } catch (Exception e) {
-            //don't promt
+        dismiss(true);
+    }
+
+    public void dismiss(boolean animated) {
+        if (animationEnabled && animated) {
+            if (windowAnimatorSet != null) {
+                windowAnimatorSet.cancel();
+            }
+            ActionBarPopupWindowLayout content = (ActionBarPopupWindowLayout) getContentView();
+            windowAnimatorSet = new AnimatorSet();
+            windowAnimatorSet.playTogether(
+                    ObjectAnimator.ofFloat(content, "translationY", AndroidUtilities.dp(content.showedFromBotton ? 5 : -5)),
+                    ObjectAnimator.ofFloat(content, "alpha", 0.0f));
+            windowAnimatorSet.setDuration(150);
+            windowAnimatorSet.addListener(new Animator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animation) {
+
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    windowAnimatorSet = null;
+                    setFocusable(false);
+                    try {
+                        ActionBarPopupWindow.super.dismiss();
+                    } catch (Exception e) {
+                        //don't promt
+                    }
+                    unregisterListener();
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                    onAnimationEnd(animation);
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animation) {
+
+                }
+            });
+            windowAnimatorSet.start();
+        } else {
+            setFocusable(false);
+            try {
+                super.dismiss();
+            } catch (Exception e) {
+                //don't promt
+            }
+            unregisterListener();
         }
-        unregisterListener();
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 148d26509..80111af56 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -56,6 +56,32 @@ public Bundle getArguments() {
         return arguments;
     }
 
+    protected void clearViews() {
+            if (fragmentView != null) {
+                ViewGroup parent = (ViewGroup) fragmentView.getParent();
+                if (parent != null) {
+                    try {
+                        parent.removeView(fragmentView);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+                fragmentView = null;
+            }
+            if (actionBar != null) {
+                ViewGroup parent = (ViewGroup) actionBar.getParent();
+                if (parent != null) {
+                    try {
+                        parent.removeView(actionBar);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            actionBar = null;
+        }
+        parentLayout = null;
+    }
+
     protected void setParentLayout(ActionBarLayout layout) {
         if (parentLayout != layout) {
             parentLayout = layout;
@@ -68,7 +94,9 @@ protected void setParentLayout(ActionBarLayout layout) {
                         FileLog.e("tmessages", e);
                     }
                 }
-                fragmentView = null;
+                if (parentLayout != null && parentLayout.getContext() != fragmentView.getContext()) {
+                    fragmentView = null;
+                }
             }
             if (actionBar != null) {
                 ViewGroup parent = (ViewGroup) actionBar.getParent();
@@ -79,8 +107,11 @@ protected void setParentLayout(ActionBarLayout layout) {
                         FileLog.e("tmessages", e);
                     }
                 }
+                if (parentLayout != null && parentLayout.getContext() != actionBar.getContext()) {
+                    actionBar = null;
+                }
             }
-            if (parentLayout != null) {
+            if (parentLayout != null && actionBar == null) {
                 actionBar = new ActionBar(parentLayout.getContext());
                 actionBar.parentFragment = this;
                 //actionBar.setBackgroundColor(0xff54759e);
@@ -208,6 +239,10 @@ protected void onOpenAnimationStart() {
 
     }
 
+    protected void onBecomeFullyVisible() {
+
+    }
+
     public void onLowMemory() {
 
     }
@@ -217,7 +252,7 @@ public boolean needAddActionBar() {
     }
 
     public Dialog showDialog(Dialog dialog) {
-        if (parentLayout == null || parentLayout.animationInProgress || parentLayout.startedTracking || parentLayout.checkTransitionAnimation()) {
+        if (dialog == null || parentLayout == null || parentLayout.animationInProgress || parentLayout.startedTracking || parentLayout.checkTransitionAnimation()) {
             return null;
         }
         try {
@@ -230,8 +265,6 @@ public Dialog showDialog(Dialog dialog) {
         }
         try {
             visibleDialog = dialog;
-
-
             visibleDialog.setCanceledOnTouchOutside(true);
             visibleDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                 @Override
@@ -268,6 +301,10 @@ protected void onDialogDismiss() {
 
     }
 
+    public Dialog getVisibleDialog() {
+        return visibleDialog;
+    }
+
     public void setVisibleDialog(Dialog dialog) {
         visibleDialog = dialog;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index 08f6be596..8b0fd39e4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -25,6 +25,8 @@
 import android.widget.ListView;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
 import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
@@ -92,7 +94,6 @@ private void configureApplyInsets(View drawerLayout) {
 
     private void dispatchChildInsets(View child, Object insets, int drawerGravity) {
         WindowInsets wi = (WindowInsets) insets;
-        if (Build.VERSION.SDK_INT >= 20) {
             if (drawerGravity == Gravity.LEFT) {
                 wi = wi.replaceSystemWindowInsets(wi.getSystemWindowInsetLeft(), wi.getSystemWindowInsetTop(), 0, wi.getSystemWindowInsetBottom());
             } else if (drawerGravity == Gravity.RIGHT) {
@@ -100,11 +101,9 @@ private void dispatchChildInsets(View child, Object insets, int drawerGravity) {
             }
             child.dispatchApplyWindowInsets(wi);
         }
-    }
 
     private void applyMarginInsets(MarginLayoutParams lp, Object insets, int drawerGravity, boolean topOnly) {
         WindowInsets wi = (WindowInsets) insets;
-        if (Build.VERSION.SDK_INT >= 20) {
             if (drawerGravity == Gravity.LEFT) {
                 wi = wi.replaceSystemWindowInsets(wi.getSystemWindowInsetLeft(), wi.getSystemWindowInsetTop(), 0, wi.getSystemWindowInsetBottom());
             } else if (drawerGravity == Gravity.RIGHT) {
@@ -115,7 +114,6 @@ private void applyMarginInsets(MarginLayoutParams lp, Object insets, int drawerG
             lp.rightMargin = wi.getSystemWindowInsetRight();
             lp.bottomMargin = wi.getSystemWindowInsetBottom();
         }
-    }
 
     private int getTopInset(Object insets) {
         if (Build.VERSION.SDK_INT >= 21) {
@@ -151,7 +149,7 @@ public void setDrawerPosition(float value) {
         }
         requestLayout();
 
-        final int newVisibility = drawerPosition > 0 ? VISIBLE : INVISIBLE;
+        final int newVisibility = drawerPosition > 0 ? VISIBLE : GONE;
         if (drawerLayout.getVisibility() != newVisibility) {
             drawerLayout.setVisibility(newVisibility);
         }
@@ -397,11 +395,15 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 
             final LayoutParams lp = (LayoutParams) child.getLayoutParams();
 
+            try {
             if (drawerLayout != child) {
                 child.layout(lp.leftMargin, lp.topMargin, lp.leftMargin + child.getMeasuredWidth(), lp.topMargin + child.getMeasuredHeight());
             } else {
                 child.layout(-child.getMeasuredWidth() + (int)drawerPosition, lp.topMargin, (int)drawerPosition, lp.topMargin + child.getMeasuredHeight());
             }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         }
         inLayout = false;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index 5e54370d9..14be9badb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -21,10 +21,12 @@
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.LoadingCell;
 
+import java.util.ArrayList;
+
 public class DialogsAdapter extends RecyclerView.Adapter {
 
     private Context mContext;
-    private boolean serverOnly;
+    private int dialogsType;
     private long openedDialogId;
     private int currentCount;
 
@@ -35,9 +37,9 @@ public Holder(View itemView) {
         }
     }
 
-    public DialogsAdapter(Context context, boolean onlyFromServer) {
+    public DialogsAdapter(Context context, int type) {
         mContext = context;
-        serverOnly = onlyFromServer;
+        dialogsType = type;
     }
 
     public void setOpenedDialogId(long id) {
@@ -49,14 +51,20 @@ public boolean isDataSetChanged() {
         return current != getItemCount();
     }
 
+    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        if (dialogsType == 0) {
+            return MessagesController.getInstance().dialogs;
+        } else if (dialogsType == 1) {
+            return MessagesController.getInstance().dialogsServerOnly;
+        } else if (dialogsType == 2) {
+            return MessagesController.getInstance().dialogsGroupsOnly;
+        }
+        return null;
+    }
+
     @Override
     public int getItemCount() {
-        int count;
-        if (serverOnly) {
-            count = MessagesController.getInstance().dialogsServerOnly.size();
-        } else {
-            count = MessagesController.getInstance().dialogs.size();
-        }
+        int count = getDialogsArray().size();
         if (count == 0 && MessagesController.getInstance().loadingDialogs) {
             return 0;
         }
@@ -68,17 +76,11 @@ public int getItemCount() {
     }
 
     public TLRPC.TL_dialog getItem(int i) {
-        if (serverOnly) {
-            if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+        ArrayList<TLRPC.TL_dialog> arrayList = getDialogsArray();
+        if (i < 0 || i >= arrayList.size()) {
                 return null;
             }
-            return MessagesController.getInstance().dialogsServerOnly.get(i);
-        } else {
-            if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
-                return null;
-            }
-            return MessagesController.getInstance().dialogs.get(i);
-        }
+        return arrayList.get(i);
     }
 
     @Override
@@ -104,29 +106,19 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         if (viewHolder.getItemViewType() == 0) {
             DialogCell cell = (DialogCell) viewHolder.itemView;
             cell.useSeparator = (i != getItemCount() - 1);
-            TLRPC.TL_dialog dialog;
-            if (serverOnly) {
-                dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
-            } else {
-                dialog = MessagesController.getInstance().dialogs.get(i);
+            TLRPC.TL_dialog dialog = getItem(i);
+            if (dialogsType == 0) {
                 if (AndroidUtilities.isTablet()) {
                     cell.setDialogSelected(dialog.id == openedDialogId);
                 }
             }
-            cell.setDialog(dialog, i, serverOnly);
+            cell.setDialog(dialog, i, dialogsType);
                     }
-                
-        //updateTheme(viewHolder);
     }
-/*
-    private void updateTheme(RecyclerView.ViewHolder viewHolder){
-        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
-        viewHolder.setBackgroundColor(themePrefs.getInt("chatsRowColor", 0xffffffff));
-    }*/
 
     @Override
     public int getItemViewType(int i) {
-        if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
+        if (i == getDialogsArray().size()) {
             return 1;
         }
         return 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 981e551ef..7bf933c7f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -160,7 +160,7 @@ public void run() {
         }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
     }
 
-    private void searchDialogsInternal(final String query, final boolean serverOnly, final int searchId) {
+    private void searchDialogsInternal(final String query, final int dialogsType, final int searchId) {
         if (needMessagesSearch == 2) {
             return;
         }
@@ -202,12 +202,12 @@ public void run() {
                         int high_id = (int) (id >> 32);
                         if (lower_id != 0) {
                             if (high_id == 1) {
-                                if (!serverOnly && !chatsToLoad.contains(lower_id)) {
+                                if (dialogsType == 0 && !chatsToLoad.contains(lower_id)) {
                                     chatsToLoad.add(lower_id);
                                 }
                             } else {
                                 if (lower_id > 0) {
-                                    if (!usersToLoad.contains(lower_id)) {
+                                    if (dialogsType != 2 && !usersToLoad.contains(lower_id)) {
                                         usersToLoad.add(lower_id);
                                     }
                                 } else {
@@ -216,7 +216,7 @@ public void run() {
                                     }
                                 }
                             }
-                        } else if (!serverOnly) {
+                        } else if (dialogsType == 0) {
                             if (!encryptedToLoad.contains(high_id)) {
                                 encryptedToLoad.add(high_id);
                             }
@@ -394,6 +394,7 @@ public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
                         resultArrayNames.add(dialogSearchResult.name);
                     }
 
+                    if (dialogsType != 2) {
                     cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
                     while (cursor.next()) {
                         int uid = cursor.intValue(3);
@@ -437,6 +438,7 @@ public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
                         }
                     }
                     cursor.dispose();
+                    }
 
                     updateSearchResults(resultArray, resultArrayNames, encUsers, searchId);
                 } catch (Exception e) {
@@ -502,13 +504,14 @@ protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, H
         notifyDataSetChanged();
     }
 
-    public void searchDialogs(final String query, final boolean serverOnly) {
+    public void searchDialogs(final String query, final int dialogsType) {
         if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
             return;
         }
         try {
             if (searchTimer != null) {
                 searchTimer.cancel();
+                searchTimer = null;
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
@@ -524,7 +527,7 @@ public void searchDialogs(final String query, final boolean serverOnly) {
             searchMessagesInternal(null);
             notifyDataSetChanged();
         } else {
-            if (query.startsWith("#") && query.length() == 1) {
+            if (needMessagesSearch != 2 && (query.startsWith("#") && query.length() == 1)) {
                 messagesSearchEndReached = true;
                 if (!hashtagsLoadedFromDb) {
                     loadRecentHashtags();
@@ -553,12 +556,13 @@ public void searchDialogs(final String query, final boolean serverOnly) {
                 @Override
                 public void run() {
                     try {
+                        cancel();
                         searchTimer.cancel();
                         searchTimer = null;
                     } catch (Exception e) {
                         FileLog.e("tmessages", e);
                     }
-                    searchDialogsInternal(query, serverOnly, searchId);
+                    searchDialogsInternal(query, dialogsType, searchId);
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
index 73009693e..2d69ecd4c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DrawerLayoutAdapter.java
@@ -14,6 +14,7 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 
+import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.ApplicationLoader;
@@ -86,7 +87,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             ((DrawerProfileCell) view).setUser(MessagesController.getInstance().getUser(UserConfig.getClientUserId()));
         } else if (type == 1) {
             if (view == null) {
-                view = new EmptyCell(mContext, 8);
+                view = new EmptyCell(mContext, AndroidUtilities.dp(8));
             }
         } else if (type == 2) {
             if (view == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index 312038997..952216990 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -14,6 +14,7 @@
 
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Cells.MentionCell;
 
@@ -32,7 +33,11 @@
     private TLRPC.ChatParticipants info;
     private ArrayList<TLRPC.User> searchResultUsernames;
     private ArrayList<String> searchResultHashtags;
+    private ArrayList<String> searchResultCommands;
+    private ArrayList<String> searchResultCommandsHelp;
+    private ArrayList<TLRPC.User> searchResultCommandsUsers;
     private MentionsAdapterDelegate delegate;
+    private HashMap<Integer, TLRPC.BotInfo> botInfo;
     private int resultStartPosition;
     private int resultLength;
     private String lastText;
@@ -40,6 +45,7 @@
     private ArrayList<MessageObject> messages;
     private boolean needUsernames = true;
     private boolean isDarkTheme;
+    private int botsCount;
 
     public MentionsAdapter(Context context, boolean isDarkTheme, MentionsAdapterDelegate delegate) {
         mContext = context;
@@ -58,6 +64,14 @@ public void setNeedUsernames(boolean value) {
         needUsernames = value;
     }
 
+    public void setBotInfo(HashMap<Integer, TLRPC.BotInfo> info) {
+        botInfo = info;
+    }
+
+    public void setBotsCount(int count) {
+        botsCount = count;
+    }
+
     @Override
     public void clearRecentHashtags() {
         super.clearRecentHashtags();
@@ -126,6 +140,11 @@ public void searchUsernameOrHashtag(String text, int position, ArrayList<Message
                     resultLength = result.length() + 1;
                     result.insert(0, ch);
                     break;
+                } else if (a == 0 && botInfo != null && ch == '/') {
+                    foundType = 2;
+                    resultStartPosition = a;
+                    resultLength = result.length() + 1;
+                    break;
                 }
             }
             if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
@@ -149,7 +168,7 @@ public void searchUsernameOrHashtag(String text, int position, ArrayList<Message
             ArrayList<TLRPC.User> newResult = new ArrayList<>();
             for (TLRPC.TL_chatParticipant chatParticipant : info.participants) {
                 TLRPC.User user = MessagesController.getInstance().getUser(chatParticipant.user_id);
-                if (user == null || user instanceof TLRPC.TL_userSelf) {
+                if (user == null || UserObject.isUserSelf(user)) {
                     continue;
                 }
                 if (user.username != null && user.username.length() > 0 && (usernameString.length() > 0 && user.username.toLowerCase().startsWith(usernameString) || usernameString.length() == 0)) {
@@ -157,6 +176,9 @@ public void searchUsernameOrHashtag(String text, int position, ArrayList<Message
                 }
             }
             searchResultHashtags = null;
+            searchResultCommands = null;
+            searchResultCommandsHelp = null;
+            searchResultCommandsUsers = null;
             searchResultUsernames = newResult;
             Collections.sort(searchResultUsernames, new Comparator<TLRPC.User>() {
                 @Override
@@ -175,16 +197,40 @@ public int compare(TLRPC.User lhs, TLRPC.User rhs) {
             });
             notifyDataSetChanged();
             delegate.needChangePanelVisibility(!newResult.isEmpty());
-        } else {
+        } else if (foundType == 1) {
             ArrayList<String> newResult = new ArrayList<>();
             String hashtagString = result.toString().toLowerCase();
             for (HashtagObject hashtagObject : hashtags) {
-                if (hashtagString != null && hashtagObject.hashtag != null && hashtagObject.hashtag.startsWith(hashtagString)) {
+                if (hashtagObject != null && hashtagObject.hashtag != null && hashtagObject.hashtag.startsWith(hashtagString)) {
                     newResult.add(hashtagObject.hashtag);
                 }
             }
             searchResultHashtags = newResult;
             searchResultUsernames = null;
+            searchResultCommands = null;
+            searchResultCommandsHelp = null;
+            searchResultCommandsUsers = null;
+            notifyDataSetChanged();
+            delegate.needChangePanelVisibility(!newResult.isEmpty());
+        } else if (foundType == 2) {
+            ArrayList<String> newResult = new ArrayList<>();
+            ArrayList<String> newResultHelp = new ArrayList<>();
+            ArrayList<TLRPC.User> newResultUsers = new ArrayList<>();
+            String command = result.toString().toLowerCase();
+            for (HashMap.Entry<Integer, TLRPC.BotInfo> entry : botInfo.entrySet()) {
+                for (TLRPC.TL_botCommand botCommand : entry.getValue().commands) {
+                    if (botCommand != null && botCommand.command != null && botCommand.command.startsWith(command)) {
+                        newResult.add("/" + botCommand.command);
+                        newResultHelp.add(botCommand.description);
+                        newResultUsers.add(MessagesController.getInstance().getUser(entry.getValue().user_id));
+                    }
+                }
+            }
+            searchResultHashtags = null;
+            searchResultUsernames = null;
+            searchResultCommands = newResult;
+            searchResultCommandsHelp = newResultHelp;
+            searchResultCommandsUsers = newResultUsers;
             notifyDataSetChanged();
             delegate.needChangePanelVisibility(!newResult.isEmpty());
         }
@@ -209,6 +255,8 @@ public int getCount() {
             return searchResultUsernames.size();
         } else if (searchResultHashtags != null) {
             return searchResultHashtags.size();
+        } else if (searchResultCommands != null) {
+            return searchResultCommands.size();
         }
         return 0;
     }
@@ -219,6 +267,8 @@ public boolean isEmpty() {
             return searchResultUsernames.isEmpty();
         } else if (searchResultHashtags != null) {
             return searchResultHashtags.isEmpty();
+        } else if (searchResultCommands != null) {
+            return searchResultCommands.isEmpty();
         }
         return true;
     }
@@ -255,10 +305,26 @@ public Object getItem(int i) {
                 return null;
             }
             return searchResultHashtags.get(i);
+        } else if (searchResultCommands != null) {
+            if (i < 0 || i >= searchResultCommands.size()) {
+                return null;
+            }
+            if (searchResultCommandsUsers != null && botsCount != 1) {
+                return String.format("%s@%s", searchResultCommands.get(i), searchResultCommandsUsers.get(i).username);
+            }
+            return searchResultCommands.get(i);
         }
         return null;
     }
 
+    public boolean isLongClickEnabled() {
+        return searchResultHashtags != null;
+    }
+
+    public boolean isBotCommands() {
+        return searchResultCommands != null;
+    }
+
     @Override
     public View getView(int i, View view, ViewGroup viewGroup) {
         if (view == null) {
@@ -269,6 +335,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             ((MentionCell) view).setUser(searchResultUsernames.get(i));
         } else if (searchResultHashtags != null) {
             ((MentionCell) view).setText(searchResultHashtags.get(i));
+        }  else if (searchResultCommands != null) {
+            ((MentionCell) view).setBotCommand(searchResultCommands.get(i), searchResultCommandsHelp.get(i), searchResultCommandsUsers.get(i));
         }
         return view;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
index c65f8d4b8..9894b9592 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/SearchAdapter.java
@@ -13,12 +13,12 @@
 import android.view.ViewGroup;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Cells.GreySectionCell;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index a7e17b513..7953cbe20 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -51,7 +51,7 @@ public StickersAdapter(Context context, StickersAdapterDelegate delegate) {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
     }
 
-    public void destroy() {
+    public void onDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
index 25cca520d..97e358835 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/BlockedUsersActivity.java
@@ -12,6 +12,8 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.view.Gravity;
@@ -90,7 +92,12 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        menu.addItem(block_user, R.drawable.plus);
+        //menu.addItem(block_user, R.drawable.plus);
+
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        Drawable plus = getParentActivity().getResources().getDrawable(R.drawable.plus);
+        plus.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+        menu.addItem(block_user, plus);
 
         fragmentView = new FrameLayout(context);
         FrameLayout frameLayout = (FrameLayout) fragmentView;
@@ -213,6 +220,18 @@ public void onResume() {
         if (listViewAdapter != null) {
             listViewAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java
index 3b8cf224d..f6fd1c845 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/AddMemberCell.java
@@ -22,6 +22,7 @@
 import org.telegram.ui.Components.SimpleTextView;
 
 public class AddMemberCell extends FrameLayout {
+
     private SimpleTextView textView;
     private ImageView imageView;
 
@@ -34,11 +35,9 @@ public AddMemberCell(Context context) {
         imageView.setScaleType(ImageView.ScaleType.CENTER);
         addView(imageView, LayoutHelper.createFrame(48, 48, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 0 : 68, 8, LocaleController.isRTL ? 68 : 0, 0));
 
-        //SimpleTextView textView = new SimpleTextView(context);
         textView = new SimpleTextView(context);
         textView.setTextColor(0xff212121);
         textView.setTextSize(17);
-        textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
         textView.setGravity((LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP);
         addView(textView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 20, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.TOP, LocaleController.isRTL ? 28 : 129, 22.5f, LocaleController.isRTL ? 129 : 28, 0));
     }
@@ -57,4 +56,8 @@ public void setDrawableColor(int color) {
         d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
         imageView.setImageDrawable(d);
     }
+
+    public void setText(String text) {
+        textView.setText(text);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
index c0170b66f..df37101dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
@@ -80,6 +80,11 @@ protected void cancelCheckLongPress() {
         }
     }
 
+    @Override
+    public boolean hasOverlappingRendering() {
+        return false;
+    }
+
     protected void onLongPress() {
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index 9d17fe966..87c5a71b5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -20,10 +20,10 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.FileLoader;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
 import org.telegram.ui.Components.ProgressView;
 import org.telegram.ui.Components.ResourceLoader;
 import org.telegram.ui.Components.SeekBar;
@@ -149,14 +149,14 @@ private void didPressedButton() {
             buttonState = 3;
             invalidate();
         } else if (buttonState == 3) {
+            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
+            buttonState = 2;
+            invalidate();
+        } else if (buttonState == 4) {
             if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
                 if (delegate != null) {
                     delegate.didPressedCancelSendButton(this);
                 }
-            } else {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
-            buttonState = 2;
-            invalidate();
         }
     }
     }
@@ -199,8 +199,16 @@ public void updateButtonState() {
         if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
             buttonState = 4;
         } else {
-        String fileName = currentMessageObject.getFileName();
-        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            File cacheFile = null;
+            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
+                cacheFile = new File(currentMessageObject.messageOwner.attachPath);
+                if(!cacheFile.exists()) {
+                    cacheFile = null;
+                }
+            }
+            if (cacheFile == null) {
+                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            }
         if (cacheFile.exists()) {
             MediaController.getInstance().removeLoadingFileObserver(this);
             boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
@@ -211,6 +219,7 @@ public void updateButtonState() {
             }
             progressView.setProgress(0);
         } else {
+                String fileName = currentMessageObject.getFileName();
             MediaController.getInstance().addLoadingFileObserver(fileName, this);
             if (!FileLoader.getInstance().isLoadingFile(fileName)) {
                 buttonState = 2;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index 1f3c65c88..356779270 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -14,7 +14,6 @@
 import android.content.res.Configuration;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.Path;
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
@@ -26,18 +25,19 @@
 import android.view.SoundEffectConstants;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.Emoji;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.LinkPath;
 import org.telegram.ui.Components.ResourceLoader;
 import org.telegram.ui.Components.StaticLayoutEx;
 
@@ -48,49 +48,14 @@
         void didPressedCancelSendButton(ChatBaseCell cell);
         void didLongPressed(ChatBaseCell cell);
         void didPressReplyMessage(ChatBaseCell cell, int id);
-        void didPressUrl(String url);
+        void didPressUrl(MessageObject messageObject, String url);
         void needOpenWebView(String url, String title, String originalUrl, int w, int h);
         boolean canPerformActions();
     }
 
-    protected class MyPath extends Path {
-
-        private StaticLayout currentLayout;
-        private int currentLine;
-        private float lastTop = -1;
-
-        public void setCurrentLayout(StaticLayout layout, int start) {
-            currentLayout = layout;
-            currentLine = layout.getLineForOffset(start);
-            lastTop = -1;
-        }
-
-        @Override
-        public void addRect(float left, float top, float right, float bottom, Direction dir) {
-            if (lastTop == -1) {
-                lastTop = top;
-            } else if (lastTop != top) {
-                lastTop = top;
-                currentLine++;
-            }
-            float lineRight = currentLayout.getLineRight(currentLine);
-            float lineLeft = currentLayout.getLineLeft(currentLine);
-            if (left >= lineRight) {
-                return;
-            }
-            if (right > lineRight) {
-                right = lineRight;
-            }
-            if (left < lineLeft) {
-                left = lineLeft;
-            }
-            super.addRect(left, top, right, bottom, dir);
-        }
-    }
-
     protected ClickableSpan pressedLink;
     protected boolean linkPreviewPressed;
-    protected MyPath urlPath = new MyPath();
+    protected LinkPath urlPath = new LinkPath();
     protected static Paint urlPaint;
 
     public boolean isChat = false;
@@ -370,7 +335,7 @@ protected boolean isUserDataChanged() {
 
         String newNameString = null;
         if (drawName && isChat && newUser != null && !currentMessageObject.isOut()) {
-            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
+            newNameString = UserObject.getUserName(newUser);
         }
 
         if (currentNameString == null && newNameString != null || currentNameString != null && newNameString == null || currentNameString != null && newNameString != null && !currentNameString.equals(newNameString)) {
@@ -380,7 +345,7 @@ protected boolean isUserDataChanged() {
         newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.fwd_from_id);
         newNameString = null;
         if (newUser != null && drawForwardedName && currentMessageObject.messageOwner.fwd_from_id != 0) {
-            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
+            newNameString = UserObject.getUserName(newUser);
         }
         return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
     }
@@ -451,7 +416,7 @@ public void setMessageObject(MessageObject messageObject) {
         namesOffset = 0;
 
         if (drawName && isChat && currentUser != null && !currentMessageObject.isOut()) {
-            currentNameString = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
+            currentNameString = UserObject.getUserName(currentUser);
             nameWidth = getMaxNameWidth();
 
             CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
@@ -472,7 +437,7 @@ public void setMessageObject(MessageObject messageObject) {
         if (drawForwardedName && messageObject.isForwarded()) {
             currentForwardUser = MessagesController.getInstance().getUser(messageObject.messageOwner.fwd_from_id);
             if (currentForwardUser != null) {
-                currentForwardNameString = ContactsController.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
+                currentForwardNameString = UserObject.getUserName(currentForwardUser);
 
                 forwardedNameWidth = getMaxNameWidth();
 
@@ -553,7 +518,7 @@ public void setMessageObject(MessageObject messageObject) {
 
                 TLRPC.User user = MessagesController.getInstance().getUser(messageObject.replyMessageObject.messageOwner.from_id);
                 if (user != null) {
-                    stringFinalName = TextUtils.ellipsize(ContactsController.formatName(user.first_name, user.last_name).replace("\n", " "), replyNamePaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
+                    stringFinalName = TextUtils.ellipsize(UserObject.getUserName(user).replace("\n", " "), replyNamePaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
                 }
                 if (messageObject.replyMessageObject.messageText != null && messageObject.replyMessageObject.messageText.length() > 0) {
                     String mess = messageObject.replyMessageObject.messageText.toString();
@@ -726,7 +691,6 @@ protected void onLongPress() {
 
     @Override
     protected void onDraw(Canvas canvas) {
-
         if (currentMessageObject == null) {
             return;
         }
@@ -945,7 +909,6 @@ protected void onDraw(Canvas canvas) {
                 }
 
                 if (drawClock) {
-                    //ResourceLoader.clockDrawable = ResourceLoader.clockMediaDrawable;
                     if (!media) {
                         setDrawableBounds(ResourceLoader.clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - ResourceLoader.clockDrawable.getIntrinsicHeight());
                         ResourceLoader.clockDrawable.draw(canvas);
@@ -966,7 +929,6 @@ protected void onDraw(Canvas canvas) {
                     }
                 } else {
                     if (drawCheck2) {
-                        //ResourceLoader.checkDrawable = ResourceLoader.checkMediaDrawable;
                         if (!media) {
                             if (drawCheck1) {
                                 setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
@@ -984,7 +946,6 @@ protected void onDraw(Canvas canvas) {
                         }
                     }
                     if (drawCheck1) {
-                        //ResourceLoader.halfCheckDrawable = ResourceLoader.halfCheckMediaDrawable;
                         if (!media) {
                             setDrawableBounds(ResourceLoader.halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.halfCheckDrawable.getIntrinsicHeight());
                             ResourceLoader.halfCheckDrawable.draw(canvas);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 4322da9cd..d3fe620d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -9,6 +9,7 @@
 package org.telegram.ui.Cells;
 
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.graphics.Canvas;
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
@@ -25,6 +26,7 @@
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
@@ -283,6 +285,12 @@ protected void onDraw(Canvas canvas) {
             canvas.restore();
         }
         if (phoneLayout != null) {
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            int color = themePrefs.getInt("chatLTextColor", 0xff000000);
+            if (currentMessageObject.isOut()) {
+                color = themePrefs.getInt("chatRTextColor", 0xff000000);
+            }
+            phonePaint.setColor(color);
             canvas.save();
             canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31) + namesOffset);
             phoneLayout.draw(canvas);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 4fa1be42f..004455bfe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -34,6 +34,7 @@
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
@@ -187,7 +188,7 @@ public boolean onTouchEvent(MotionEvent event) {
 
         boolean result = false;
         int side = AndroidUtilities.dp(48);
-        if (currentMessageObject.caption instanceof Spannable && !isPressed) {
+        if (currentMessageObject.caption instanceof Spannable && delegate.canPerformActions()) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
                 if (nameLayout != null && x >= captionX && x <= captionX + backgroundWidth && y >= captionY && y <= captionY + captionHeight) {
         if (event.getAction() == MotionEvent.ACTION_DOWN) {
@@ -228,9 +229,9 @@ public boolean onTouchEvent(MotionEvent event) {
                         try {
                             if (pressedLink instanceof URLSpanNoUnderline) {
                                 String url = ((URLSpanNoUnderline) pressedLink).getURL();
-                                if (url.startsWith("@") || url.startsWith("#")) {
+                                if (url.startsWith("@") || url.startsWith("#") || url.startsWith("/")) {
                                     if (delegate != null) {
-                                        delegate.didPressUrl(url);
+                                        delegate.didPressUrl(currentMessageObject, url);
                                     }
                                 }
                             } else {
@@ -554,7 +555,17 @@ public void setMessageObject(MessageObject messageObject) {
 
                     if(isChat){
                         TLRPC.User fromUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-                        String senderName = String.format("%s %s", fromUser.first_name, fromUser.last_name);
+                        //String senderName = String.format("%s %s", fromUser.first_name, fromUser.last_name);
+                        String senderName = "";
+                        if (UserObject.isDeleted(fromUser)) {
+                            senderName = "Deleted";
+                        } else {
+                            if (fromUser.first_name != null && fromUser.first_name.length() > 0) {
+                                senderName = fromUser.first_name;
+                            } else {
+                                senderName = fromUser.last_name;
+                            }
+                        }
                         infoWidth2 = Math.min(maxWidth, (int) Math.ceil(senderPaint.measureText(senderName)));
                         CharSequence str2 = TextUtils.ellipsize(senderName, senderPaint, infoWidth2, TextUtils.TruncateAt.END);
                         infoLayout2 = new StaticLayout(str2, senderPaint, infoWidth2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
@@ -607,7 +618,16 @@ public void setMessageObject(MessageObject messageObject) {
             }//Plus: member name in photos
             else if (messageObject.type == 1) {   //PHOTO
                 TLRPC.User fromUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
-                String senderName = String.format("%s %s", fromUser.first_name, fromUser.last_name);
+                String senderName = "";
+                if (UserObject.isDeleted(fromUser)) {
+                    senderName = "Deleted";
+                } else {
+                    if (fromUser.first_name != null && fromUser.first_name.length() > 0) {
+                        senderName = fromUser.first_name;
+                    } else {
+                        senderName = fromUser.last_name;
+                    }
+                }
                 if (currentInfoString == null || !currentInfoString.equals(senderName)) {
                     currentInfoString = senderName;
                     infoOffset = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 13140f945..1a2874fd7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -29,10 +29,10 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.MessageObject;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Components.ResourceLoader;
@@ -81,7 +81,7 @@ public ChatMessageCell(Context context) {
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         boolean result = false;
-        if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && !isPressed) {
+        if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && delegate.canPerformActions()) {
             if (event.getAction() == MotionEvent.ACTION_DOWN || (linkPreviewPressed || pressedLink != null) && event.getAction() == MotionEvent.ACTION_UP) {
                 int x = (int) event.getX();
                 int y = (int) event.getY();
@@ -118,9 +118,9 @@ public boolean onTouchEvent(MotionEvent event) {
                                             try {
                                                 if (pressedLink instanceof URLSpanNoUnderline) {
                                                     String url = ((URLSpanNoUnderline) pressedLink).getURL();
-                                                    if (url.startsWith("@") || url.startsWith("#")) {
+                                                    if (url.startsWith("@") || url.startsWith("#") || url.startsWith("/")) {
                                                         if (delegate != null) {
-                                                            delegate.didPressUrl(url);
+                                                            delegate.didPressUrl(currentMessageObject, url);
                                                         }
                                                     }
                                                 } else {
@@ -620,7 +620,7 @@ public void setMessageObject(MessageObject messageObject) {
                         }
                     }
 
-                    if (webPage.duration != 0) {
+                    if (webPage.type != null && webPage.type.equals("video") && webPage.duration != 0) {
                         if (durationPaint == null) {
                             durationPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
                             durationPaint.setTextSize(AndroidUtilities.dp(12));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 551581d59..090211046 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -29,6 +29,7 @@
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -36,6 +37,8 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.Components.AvatarDrawable;
 
+import java.util.ArrayList;
+
 public class DialogCell extends BaseCell {
 
     private static TextPaint namePaint;
@@ -72,7 +75,7 @@
     private boolean dialogMuted;
     private MessageObject message;
     private int index;
-    private boolean isServerOnly;
+    private int dialogsType;
 
     private ImageReceiver avatarImage;
     private AvatarDrawable avatarDrawable;
@@ -128,6 +131,7 @@
 
     public DialogCell(Context context) {
         super(context);
+
         if (namePaint == null) {
             namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             namePaint.setTextSize(AndroidUtilities.dp(17));
@@ -201,11 +205,11 @@ public DialogCell(Context context) {
         avatarDrawable = new AvatarDrawable();
     }
 
-    public void setDialog(TLRPC.TL_dialog dialog, int i, boolean server) {
+    public void setDialog(TLRPC.TL_dialog dialog, int i, int type) {
         currentDialogId = dialog.id;
         isDialogCell = true;
         index = i;
-        isServerOnly = server;
+        dialogsType = type;
         update(0);
     }
 
@@ -376,12 +380,14 @@ public void buildLayout() {
                     currentMessagePaint = messagePrintingPaint;
                 } else {
                     if (chat != null && chat.id > 0) {
-                        String name = "";
+                        String name;
                         if (message.isOut()) {
                             name = LocaleController.getString("FromYou", R.string.FromYou);
                         } else {
-                            if (fromUser != null) {
-                                if (fromUser.first_name.length() > 0) {
+                            if (UserObject.isDeleted(fromUser)) {
+                                name = "Deleted";
+                            } else {
+                                if (fromUser.first_name != null && fromUser.first_name.length() > 0) {
                                     name = fromUser.first_name;
                                 } else {
                                     name = fromUser.last_name;
@@ -487,17 +493,17 @@ public void buildLayout() {
         } else if (user != null) {
             if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
                 if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
-                    nameString = ContactsController.formatName(user.first_name, user.last_name);
+                    nameString = UserObject.getUserName(user);
                 } else {
                     if (user.phone != null && user.phone.length() != 0) {
                         nameString = PhoneFormat.getInstance().format("+" + user.phone);
                     } else {
                         currentNamePaint = nameUnknownPaint;
-                        nameString = ContactsController.formatName(user.first_name, user.last_name);
+                        nameString = UserObject.getUserName(user);
                     }
                 }
             } else {
-                nameString = ContactsController.formatName(user.first_name, user.last_name);
+                nameString = UserObject.getUserName(user);
             }
             if (encryptedChat != null) {
                 currentNamePaint = nameEncryptedPaint;
@@ -684,18 +690,20 @@ public void setDialogSelected(boolean value) {
         isSelected = value;
     }
 
-    public void checkCurrentDialogIndex() {
-        TLRPC.TL_dialog dialog = null;
-        if (isServerOnly) {
-            if (index < MessagesController.getInstance().dialogsServerOnly.size()) {
-            dialog = MessagesController.getInstance().dialogsServerOnly.get(index);
-            }
-        } else {
-            if (index < MessagesController.getInstance().dialogs.size()) {
-            dialog = MessagesController.getInstance().dialogs.get(index);
-        }
+    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        if (dialogsType == 0) {
+            return MessagesController.getInstance().dialogs;
+        } else if (dialogsType == 1) {
+            return MessagesController.getInstance().dialogsServerOnly;
+        } else if (dialogsType == 2) {
+            return MessagesController.getInstance().dialogsGroupsOnly;
         }
-        if (dialog != null) {
+        return null;
+    }
+
+    public void checkCurrentDialogIndex() {
+        if (index < getDialogsArray().size()) {
+            TLRPC.TL_dialog dialog = getDialogsArray().get(index);
             if (currentDialogId != dialog.id || message != null && message.getId() != dialog.top_message || unreadCount != dialog.unread_count) {
             currentDialogId = dialog.id;
             update(0);
@@ -863,7 +871,7 @@ private void updateTheme(){
 
         countDrawable.setColorFilter(themePrefs.getInt("chatsCountBGColor", tColor), PorterDuff.Mode.SRC_IN);
 
-        nColor = themePrefs.getInt("chatsNameColor", 0xff000000);
+        nColor = themePrefs.getInt("chatsGroupIconColor", themePrefs.getInt("chatsGroupNameColor", 0xff000000));
         groupDrawable.setColorFilter(nColor, PorterDuff.Mode.SRC_IN);
         broadcastDrawable.setColorFilter(nColor, PorterDuff.Mode.SRC_IN);
 
@@ -945,7 +953,11 @@ protected void onDraw(Canvas canvas) {
             setDrawableBounds(errorDrawable, errorLeft, errorTop);
             errorDrawable.draw(canvas);
         } else if (drawCount) {
-            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop, countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            int size = themePrefs.getInt("chatsCountSize", 13);
+            size = size > 13 ? (size - 13) / 2 : 0;
+            //setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop, countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
+            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop + AndroidUtilities.dp(size), countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
             countDrawable.draw(canvas);
             canvas.save();
             canvas.translate(countLeft, countTop + AndroidUtilities.dp(4));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
index 5fba688db..1df8442f4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -28,9 +28,9 @@
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -63,7 +63,10 @@ public DrawerProfileCell(Context context) {
 
         avatarImageView = new BackupImageView(context);
         avatarImageView.getImageReceiver().setRoundRadius(AndroidUtilities.dp(32));
-                addView(avatarImageView, LayoutHelper.createFrame(64, 64, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 0, 67));
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int aSize = themePrefs.getInt("drawerAvatarSize", 64);
+        //addView(avatarImageView, LayoutHelper.createFrame(64, 64, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 0, 67));
+        addView(avatarImageView, LayoutHelper.createFrame(aSize, aSize, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 0, 67));
 
         final Activity activity = (Activity) context;
         avatarImageView.setOnClickListener(new View.OnClickListener() {
@@ -156,7 +159,7 @@ public void setUser(TLRPC.User user) {
         if (user.photo != null) {
             photo = user.photo.photo_small;
         }
-        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        nameTextView.setText(UserObject.getUserName(user));
         phoneTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
         AvatarDrawable avatarDrawable = new AvatarDrawable(user);
         avatarDrawable.setColor(0xff5c98cd);
@@ -238,6 +241,8 @@ private void updateTheme(){
         avatarDrawable.setColor(themePrefs.getInt("drawerAvatarColor", AndroidUtilities.getIntDarkerColor("themeColor", 0x15)));
         int radius = AndroidUtilities.dp(themePrefs.getInt("drawerAvatarRadius", 32));
         avatarDrawable.setRadius(radius);
+        //avatarImageView.getImageReceiver().setImageCoords(avatarImageView.getImageReceiver(), avatarTop, avatarSize, avatarSize);
+
         avatarImageView.getImageReceiver().setRoundRadius(radius);
         avatarImageView.setImage(photo, "50_50", avatarDrawable);
         if(AndroidUtilities.getBoolMain("hideMobile")){
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
index 7a477eafb..eae727cb3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
@@ -16,7 +16,7 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
@@ -55,7 +55,7 @@ public MentionCell(Context context) {
         usernameTextView.setSingleLine(true);
         usernameTextView.setGravity(Gravity.LEFT);
         usernameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        addView(usernameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 12, 0, 0, 0));
+        addView(usernameTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 12, 0, 8, 0));
     }
 
     @Override
@@ -76,7 +76,7 @@ public void setUser(TLRPC.User user) {
         } else {
             imageView.setImageDrawable(avatarDrawable);
         }
-        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        nameTextView.setText(UserObject.getUserName(user));
         usernameTextView.setText("@" + user.username);
         imageView.setVisibility(VISIBLE);
         usernameTextView.setVisibility(VISIBLE);
@@ -88,6 +88,23 @@ public void setText(String text) {
         nameTextView.setText(text);
     }
 
+    public void setBotCommand(String command, String help, TLRPC.User user) {
+        if (user != null) {
+            imageView.setVisibility(VISIBLE);
+            avatarDrawable.setInfo(user);
+            if (user.photo != null && user.photo.photo_small != null) {
+                imageView.setImage(user.photo.photo_small, "50_50", avatarDrawable);
+            } else {
+                imageView.setImageDrawable(avatarDrawable);
+            }
+        } else {
+            imageView.setVisibility(INVISIBLE);
+        }
+        usernameTextView.setVisibility(VISIBLE);
+        nameTextView.setText(command);
+        usernameTextView.setText(help);
+    }
+
     public void setIsDarkTheme(boolean isDarkTheme) {
         if (isDarkTheme) {
             nameTextView.setTextColor(0xffffffff);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
index e3727f7ed..7be1afda9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ProfileSearchCell.java
@@ -26,6 +26,7 @@
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.R;
@@ -207,7 +208,7 @@ public void buildLayout() {
             if (chat != null) {
                 nameString2 = chat.title;
             } else if (user != null) {
-                nameString2 = ContactsController.formatName(user.first_name, user.last_name);
+                nameString2 = UserObject.getUserName(user);
             }
             nameString = nameString2.replace("\n", " ");
         }
@@ -255,12 +256,16 @@ public void buildLayout() {
             if (subLabel != null) {
                 onlineString = subLabel;
             } else {
+                if ((user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                    onlineString = LocaleController.getString("Bot", R.string.Bot);
+                } else {
                 onlineString = LocaleController.formatUserStatus(user);
                 if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
                     currentOnlinePaint = onlinePaint;
                     onlineString = LocaleController.getString("Online", R.string.Online);
                 }
             }
+            }
 
             CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, onlineWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
             onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, onlineWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
index 4c2e46a36..7cc059b68 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedDocumentCell.java
@@ -212,7 +212,7 @@ public void setDocument(MessageObject document, boolean divider) {
             placeholderImabeView.setImageResource(getThumbForNameOrMime(name, document.messageOwner.media.document.mime_type));
             nameTextView.setText(name);
             extTextView.setText((idx = name.lastIndexOf(".")) == -1 ? "" : name.substring(idx + 1).toLowerCase());
-            if (document.messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty) {
+            if (document.messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty || document.messageOwner.media.document.thumb == null) {
                 thumbImageView.setVisibility(INVISIBLE);
                 thumbImageView.setImageBitmap(null);
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
index 879043844..93059d1fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
@@ -83,7 +83,7 @@ public PhotoVideoView(Context context) {
 
             checkBox = new CheckBox(context, R.drawable.round_check2);
             checkBox.setVisibility(INVISIBLE);
-            addView(checkBox, LayoutHelper.createFrame(22, 22, Gravity.RIGHT | Gravity.TOP, 6, 0, 6, 0));
+            addView(checkBox, LayoutHelper.createFrame(22, 22, Gravity.RIGHT | Gravity.TOP, 0, 6, 6, 0));
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
index e243bf407..1c79ee3c6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextCell.java
@@ -28,6 +28,8 @@
     private ImageView imageView;
     private ImageView valueImageView;
 
+    private boolean multiline;
+
     public TextCell(Context context) {
         super(context);
 
@@ -62,7 +64,7 @@ public TextCell(Context context) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
+        super.onMeasure(widthMeasureSpec, multiline ?  MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED) : MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48), MeasureSpec.EXACTLY));
     }
 
     public void setTextColor(int color) {
@@ -84,6 +86,22 @@ public void setTextAndIcon(String text, int resId) {
         valueImageView.setVisibility(INVISIBLE);
     }
 
+    public void setMultiline(boolean value) {
+        if (multiline == value) {
+            return;
+        }
+        multiline = value;
+        if (value) {
+            textView.setSingleLine(false);
+            textView.setPadding(0, AndroidUtilities.dp(6), 0, AndroidUtilities.dp(6));
+        } else {
+            textView.setLines(1);
+            textView.setMaxLines(1);
+            textView.setSingleLine(true);
+        }
+        requestLayout();
+    }
+
     public void setTextSize(int size) {
         textView.setTextSize(size);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
index cf0158879..7cb4649c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/UserCell.java
@@ -16,9 +16,9 @@
 import android.widget.ImageView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.R;
@@ -149,7 +149,7 @@ public void update(int mask) {
                 }
             }
             if (!continueUpdate && currentName == null && lastName != null && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                newName = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
+                newName = UserObject.getUserName(currentUser);
                 if (!newName.equals(lastName)) {
                     continueUpdate = true;
                 }
@@ -170,7 +170,7 @@ public void update(int mask) {
             lastName = null;
             nameTextView.setText(currentName);
         } else {
-            lastName = newName == null ? ContactsController.formatName(currentUser.first_name, currentUser.last_name) : newName;
+            lastName = newName == null ? UserObject.getUserName(currentUser) : newName;
             nameTextView.setText(lastName);
             nameTextView.setTextColor(nameColor);
             nameTextView.setTextSize(themePrefs.getInt("contactsNameSize", 17));
@@ -179,7 +179,15 @@ public void update(int mask) {
             statusTextView.setTextColor(statusColor);
             statusTextView.setText(currrntStatus);
         } else {
-            if (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
+            if ((currentUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                statusTextView.setTextColor(statusColor);
+                if ((currentUser.flags & TLRPC.USER_FLAG_BOT_READING_HISTORY) != 0) {
+                    statusTextView.setText(LocaleController.getString("BotStatusRead", R.string.BotStatusRead));
+                } else {
+                    statusTextView.setText(LocaleController.getString("BotStatusCantRead", R.string.BotStatusCantRead));
+                }
+            } else {
+                if (currentUser.id == UserConfig.getClientUserId() || currentUser.status != null && currentUser.status.expires > ConnectionsManager.getInstance().getCurrentTime() || MessagesController.getInstance().onlinePrivacy.containsKey(currentUser.id)) {
                 statusTextView.setTextColor(statusOnlineColor);
                 statusTextView.setText(LocaleController.getString("Online", R.string.Online));
             } else {
@@ -187,6 +195,7 @@ public void update(int mask) {
                 statusTextView.setText(LocaleController.formatUserStatus(currentUser));
             }
         }
+        }
 
         if (imageView.getVisibility() == VISIBLE && currentDrawable == 0 || imageView.getVisibility() == GONE && currentDrawable != 0) {
             imageView.setVisibility(currentDrawable == 0 ? GONE : VISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
index 1f3059d1c..1056b3739 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeChatNameActivity.java
@@ -12,6 +12,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.text.InputType;
 import android.util.TypedValue;
@@ -28,10 +29,10 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
@@ -77,7 +78,11 @@ public void onItemClick(int id) {
             });
 
             ActionBarMenu menu = actionBar.createMenu();
-            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            //doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+            doneButton = menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
             TLRPC.Chat currentChat = MessagesController.getInstance().getChat(chat_id);
 
@@ -137,6 +142,21 @@ public void onResume() {
             firstNameField.requestFocus();
             AndroidUtilities.showKeyboard(firstNameField);
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+
+        Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+        done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
index 836e5b2b7..7f455d60e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeNameActivity.java
@@ -12,6 +12,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.text.InputType;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -27,14 +28,14 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -70,7 +71,12 @@ public void onItemClick(int id) {
             });
 
             ActionBarMenu menu = actionBar.createMenu();
-            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            //doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+            done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+            doneButton = menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
             TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
             if (user == null) {
@@ -157,6 +163,18 @@ public void onResume() {
             firstNameField.requestFocus();
             AndroidUtilities.showKeyboard(firstNameField);
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private void saveName() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
index e199a0d27..746d97ee6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangePhoneActivity.java
@@ -12,7 +12,9 @@
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.telephony.TelephonyManager;
 import android.text.Editable;
@@ -39,10 +41,6 @@
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
@@ -59,6 +57,10 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SlideView;
 import org.telegram.ui.Components.TypefaceSpan;
@@ -118,7 +120,12 @@ public void onItemClick(int id) {
             });
 
             ActionBarMenu menu = actionBar.createMenu();
-            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            //menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+        done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+        menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
         fragmentView = new ScrollView(context);
             ScrollView scrollView = (ScrollView) fragmentView;
@@ -164,6 +171,18 @@ public void onResume() {
         if (!AndroidUtilities.isTablet()) {
             getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     @Override
@@ -499,7 +518,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             });
 
             textView = new TextView(context);
-            textView.setText(LocaleController.getString("StartText", R.string.StartText));
+            textView.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
             textView.setTextColor(0xff757575);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             textView.setGravity(Gravity.LEFT);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
index 9145f9850..1ece40e7b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChangeUsernameActivity.java
@@ -15,6 +15,7 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.text.Editable;
 import android.text.InputType;
 import android.text.TextWatcher;
@@ -79,7 +80,12 @@ public void onItemClick(int id) {
             });
 
             ActionBarMenu menu = actionBar.createMenu();
-            doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            //doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+        done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+        doneButton = menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
             TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
             if (user == null) {
@@ -194,6 +200,18 @@ public void onResume() {
             firstNameField.requestFocus();
             AndroidUtilities.showKeyboard(firstNameField);
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private void showErrorAlert(String error) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index f173559a3..8e7f09a32 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -17,6 +17,7 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
+import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
@@ -25,6 +26,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.provider.ContactsContract;
 import android.provider.MediaStore;
 import android.text.TextUtils;
 import android.util.Base64;
@@ -39,6 +41,7 @@
 import android.view.WindowManager;
 import android.webkit.MimeTypeMap;
 import android.widget.AdapterView;
+import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
@@ -65,7 +68,10 @@
 import org.telegram.android.NotificationsController;
 import org.telegram.android.SecretChatHelper;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.UserObject;
 import org.telegram.android.VideoEditedInfo;
+import org.telegram.android.query.BotQuery;
+import org.telegram.android.query.MessagesSearchQuery;
 import org.telegram.android.query.ReplyMessageQuery;
 import org.telegram.android.query.StickersQuery;
 import org.telegram.android.support.widget.LinearLayoutManager;
@@ -88,15 +94,20 @@
 import org.telegram.ui.ActionBar.BottomSheet;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.ui.Adapters.StickersAdapter;
+import org.telegram.ui.Cells.BotHelpCell;
 import org.telegram.ui.Cells.ChatActionCell;
 import org.telegram.ui.Cells.ChatAudioCell;
 import org.telegram.ui.Cells.ChatBaseCell;
 import org.telegram.ui.Cells.ChatContactCell;
+import org.telegram.ui.Cells.ChatLoadingCell;
 import org.telegram.ui.Cells.ChatMediaCell;
 import org.telegram.ui.Cells.ChatMessageCell;
+import org.telegram.ui.Cells.ChatUnreadCell;
+import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.ChatActivityEnterView;
+import org.telegram.ui.Components.ChatAttachView;
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecordStatusDrawable;
@@ -110,6 +121,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -135,6 +147,9 @@
     private ActionBarMenuItem menuItem;
     private ActionBarMenuItem attachItem;
     private ActionBarMenuItem headerItem;
+    private ActionBarMenuItem searchItem;
+    private ActionBarMenuItem searchUpItem;
+    private ActionBarMenuItem searchDownItem;
     private TextView addContactItem;
     private RecyclerListView chatListView;
     private LinearLayoutManager chatLayoutManager;
@@ -165,6 +180,7 @@
     private MentionsAdapter mentionsAdapter;
     private ListView mentionListView;
     private AnimatorSetProxy mentionListAnimation;
+    private ChatAttachView chatAttachView;
 
     private ImageView deleteIconImageView;
     private View lineView;
@@ -233,6 +249,13 @@
     protected TLRPC.ChatParticipants info = null;
     private int onlineCount = -1;
 
+    private HashMap<Integer, TLRPC.BotInfo> botInfo = new HashMap<>();
+    private String botUser;
+    private MessageObject botButtons;
+    private MessageObject botReplyButtons;
+    private int botsCount;
+    private boolean hasBotsCommands;
+
     private CharSequence lastPrintString;
     private String lastStatus;
     private int lastStatusDrawable;
@@ -246,25 +269,43 @@
     private float startX = 0;
     private float startY = 0;
 
-    private final static int quoteforward = 0;
-    private final static int copy = 1;
-    private final static int forward = 2;
-    private final static int delete = 3;
-    private final static int chat_enc_timer = 4;
-    private final static int chat_menu_attach = 5;
-    private final static int attach_photo = 6;
-    private final static int attach_gallery = 7;
-    private final static int attach_video = 8;
-    private final static int attach_document = 9;
-    private final static int attach_location = 10;
-    private final static int clear_history = 11;
-    private final static int delete_chat = 12;
-    private final static int share_contact = 13;
-    private final static int mute = 14;
-    private final static int reply = 15;
-    private final static int attach_music = 16;
+    private final static int copy = 10;//1;
+    private final static int forward = 11;//2;
+    private final static int delete = 12;//3;
+    private final static int chat_enc_timer = 13;//4;
+    private final static int chat_menu_attach = 14;//5;
+    private final static int clear_history = 15;//11;
+    private final static int delete_chat = 16;//12;
+    private final static int share_contact = 17;//13;
+    private final static int mute = 18;//14;
+    private final static int reply = 19;//15;
+
+    private final static int add_member = 20;
+
+    private final static int quoteforward = 111;//0;
+
+    private final static int bot_help = 30;
+    private final static int bot_settings = 31;
+
+    private final static int attach_photo = 0;//6;
+    private final static int attach_gallery = 1;//7;
+    private final static int attach_video = 2;//8;
+    private final static int attach_audio = 3;
+    private final static int attach_document = 4;//9;
+    private final static int attach_contact = 5;
+    private final static int attach_location = 6;//10;
+
+    //private final static int attach_music = 7;//16;
+    private final static int attach_sticker = 8;//17;
+
+    private int chat_id;
+
+    private final static int search = 40;
+    private final static int search_up = 41;
+    private final static int search_down = 42;
+
+
     private final static int id_chat_compose_panel = 1000;
-    private final static int attach_sticker = 17;
 
     private static boolean QuoteForward;
 
@@ -295,6 +336,7 @@ public ChatActivity(Bundle args) {
     @Override
     public boolean onFragmentCreate() {
         final int chatId = arguments.getInt("chat_id", 0);
+        chat_id = chatId;
         final int userId = arguments.getInt("user_id", 0);
         final int encId = arguments.getInt("enc_id", 0);
         startLoadFromMessageId = arguments.getInt("message_id", 0);
@@ -363,6 +405,7 @@ public void run() {
                 }
             }
             dialog_id = userId;
+            botUser = arguments.getString("botUser");
         } else if (encId != 0) {
             currentEncryptedChat = MessagesController.getInstance().getEncryptedChat(encId);
             if (currentEncryptedChat == null) {
@@ -443,9 +486,28 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedWebpages);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesReadContent);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.botInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.botKeyboardDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
 
         super.onFragmentCreate();
 
+        if (currentEncryptedChat == null && !isBroadcast) {
+            BotQuery.loadBotKeyboard(dialog_id);
+        }
+
+        if (userId != 0 && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+            BotQuery.loadBotInfo(userId, true, classGuid);
+        } else if (info != null) {
+            for (int a = 0; a < info.participants.size(); a++) {
+                TLRPC.TL_chatParticipant participant = info.participants.get(a);
+                TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+                if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                    BotQuery.loadBotInfo(user.id, true, classGuid);
+                }
+            }
+        }
+
         loading = true;
 
         if (startLoadFromMessageId != 0) {
@@ -512,6 +574,9 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedWebpages);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesReadContent);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botInfoDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botKeyboardDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
 
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
@@ -526,7 +591,10 @@ public void onFragmentDestroy() {
             getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
         }
         if (stickersAdapter != null) {
-            stickersAdapter.destroy();
+            stickersAdapter.onDestroy();
+        }
+        if (chatAttachView != null) {
+            chatAttachView.onDestroy();
         }
         AndroidUtilities.unlockOrientation(getParentActivity());
         MediaController.getInstance().stopAudio();
@@ -545,6 +613,7 @@ public View createView(Context context, LayoutInflater inflater) {
             lastPrintString = null;
             lastStatus = null;
             hasOwnBackground = true;
+        chatAttachView = null;
 
             ResourceLoader.loadRecources(context);
 
@@ -556,192 +625,13 @@ public View createView(Context context, LayoutInflater inflater) {
             actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
             public void onItemClick(final int id) {
-                    if (id == attach_photo || id == attach_gallery || id == attach_document || id == attach_video) {
-                    String action;
-                        if (currentChat != null) {
-                            if (currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
-                                if (id == attach_photo || id == attach_gallery) {
-                                    action = "bigchat_upload_photo";
-                                } else {
-                                    action = "bigchat_upload_document";
-                                }
-                            } else {
-                                if (id == attach_photo || id == attach_gallery) {
-                                    action = "chat_upload_photo";
-                                } else {
-                                    action = "chat_upload_document";
-                                }
-                            }
-                        } else {
-                            if (id == attach_photo || id == attach_gallery) {
-                                action = "pm_upload_photo";
-                            } else {
-                                action = "pm_upload_document";
-                            }
-                        }
-                        if (action != null && !MessagesController.isFeatureEnabled(action, ChatActivity.this)) {
-                            return;
-                        }
-                    }
                     if (id == -1) {
-                    if (chatActivityEnterView != null) {
-                        chatActivityEnterView.hideEmojiPopup();
-                    }
                         finishFragment();
                     } else if (id == -2) {
                         selectedMessagesIds.clear();
                         selectedMessagesCanCopyIds.clear();
                         actionBar.hideActionMode();
                         updateVisibleRows();
-                    } else if (id == attach_photo) {
-                        try {
-                            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-                        File image = AndroidUtilities.generatePicturePath();
-                            if (image != null) {
-                                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
-                                currentPicturePath = image.getAbsolutePath();
-                            }
-                            startActivityForResult(takePictureIntent, 0);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (id == attach_gallery) {
-                    PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false, ChatActivity.this);
-                        fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
-                            @Override
-                        public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
-                            SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
-                                SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
-                            showReplyPanel(false, null, null, null, false, true);
-                            }
-
-                            @Override
-                            public void startPhotoSelectActivity() {
-                                try {
-                                Intent videoPickerIntent = new Intent();
-                                videoPickerIntent.setType("video/*");
-                                videoPickerIntent.setAction(Intent.ACTION_GET_CONTENT);
-                                videoPickerIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
-
-                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-                                    photoPickerIntent.setType("image/*");
-                                Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
-                                chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{videoPickerIntent});
-
-                                startActivityForResult(chooserIntent, 1);
-                            } catch (Exception e) {
-                                FileLog.e("tmessages", e);
-                            }
-                        }
-
-                        @Override
-                        public boolean didSelectVideo(String path) {
-                            if (Build.VERSION.SDK_INT >= 16) {
-                                return !openVideoEditor(path, true, true);
-                            } else {
-                                SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
-                                showReplyPanel(false, null, null, null, false, true);
-                                return true;
-                                }
-                            }
-                        });
-                        presentFragment(fragment);
-                    } else if (id == attach_video) {
-                        try {
-                            Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
-                        File video = AndroidUtilities.generateVideoPath();
-                            if (video != null) {
-                                if (Build.VERSION.SDK_INT >= 18) {
-                                    takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(video));
-                                }
-                                takeVideoIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
-                                currentPicturePath = video.getAbsolutePath();
-                            }
-                        startActivityForResult(takeVideoIntent, 2);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                     //PLUS
-                    } else if (id == attach_music) {
-                        try {
-                            Intent pickIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);
-                            startActivityForResult(pickIntent, 3);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    } else if (id == attach_sticker) {
-                        PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false, ChatActivity.this);
-                        fragment.imageFilter = ".webp";
-                        fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
-                            @Override
-                            public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
-                                SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
-                                SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
-                                showReplyPanel(false, null, null, null, false, true);
-                            }
-
-                            @Override
-                            public void startPhotoSelectActivity() {
-                                try {
-                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-                                    startActivityForResult(photoPickerIntent, 4);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-
-                            @Override
-                            public boolean didSelectVideo(String path) {
-                                if (Build.VERSION.SDK_INT >= 16) {
-                                    return !openVideoEditor(path, true, true);
-                                } else {
-                                    SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
-                                    showReplyPanel(false, null, null, null, false, true);
-                                    return true;
-                                }
-                            }
-                        });
-                        presentFragment(fragment);
-                    //
-                } else if (id == attach_location) {
-                        if (!isGoogleMapsInstalled()) {
-                            return;
-                        }
-                        LocationActivity fragment = new LocationActivity();
-                        fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
-                            @Override
-                        public void didSelectLocation(TLRPC.MessageMedia location) {
-                            SendMessagesHelper.getInstance().sendMessage(location, dialog_id, replyingMessageObject);
-                                moveScrollToLastMessage();
-                            showReplyPanel(false, null, null, null, false, true);
-                                if (paused) {
-                                    scrollToTopOnResume = true;
-                                }
-                            }
-                        });
-                        presentFragment(fragment);
-                    } else if (id == attach_document) {
-                        DocumentSelectActivity fragment = new DocumentSelectActivity();
-                        fragment.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
-                            @Override
-                            public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
-                                activity.finishFragment();
-                                SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id, replyingMessageObject);
-                                showReplyPanel(false, null, null, null, false, true);
-                            }
-
-                            @Override
-                            public void startDocumentSelectActivity() {
-                                try {
-                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
-                                    photoPickerIntent.setType("*/*");
-                                    startActivityForResult(photoPickerIntent, 21);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
-                                }
-                            }
-                        });
-                        presentFragment(fragment);
                     } else if (id == copy) {
                         String str = "";
                         ArrayList<Integer> ids = new ArrayList<>(selectedMessagesCanCopyIds.keySet());
@@ -810,7 +700,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         }
                         Bundle args = new Bundle();
                         args.putBoolean("onlySelect", true);
-                        args.putBoolean("serverOnly", true);
+                    args.putInt("dialogsType", 1);
                         MessagesActivity fragment = new MessagesActivity(args);
                         fragment.setDelegate(ChatActivity.this);
                         presentFragment(fragment);
@@ -883,52 +773,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     } else if (id == mute) {
                         boolean muted = MessagesController.getInstance().isDialogMuted(dialog_id);
                         if (!muted) {
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setTitle(LocaleController.getString("Notifications", R.string.Notifications));
-                            CharSequence[] items = new CharSequence[]{
-                                    LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 1)),
-                                    LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Hours", 8)),
-                                    LocaleController.formatString("MuteFor", R.string.MuteFor, LocaleController.formatPluralString("Days", 2)),
-                                    LocaleController.getString("MuteDisable", R.string.MuteDisable)
-                            };
-                            builder.setItems(items, new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialogInterface, int i) {
-                                            int untilTime = ConnectionsManager.getInstance().getCurrentTime();
-                                            if (i == 0) {
-                                                untilTime += 60 * 60;
-                                            } else if (i == 1) {
-                                                untilTime += 60 * 60 * 8;
-                                            } else if (i == 2) {
-                                                untilTime += 60 * 60 * 48;
-                                            } else if (i == 3) {
-                                                untilTime = Integer.MAX_VALUE;
-                                            }
-
-                                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-                                            SharedPreferences.Editor editor = preferences.edit();
-                                        long flags;
-                                            if (i == 3) {
-                                                editor.putInt("notify2_" + dialog_id, 2);
-                                                flags = 1;
-                                            } else {
-                                            editor.putInt("notify2_" + dialog_id, 3);
-                                            editor.putInt("notifyuntil_" + dialog_id, untilTime);
-                                            flags = ((long) untilTime << 32) | 1;
-                                            }
-                                            MessagesStorage.getInstance().setDialogFlags(dialog_id, flags);
-                                            editor.commit();
-                                            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(dialog_id);
-                                            if (dialog != null) {
-                                                dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                                                dialog.notify_settings.mute_until = untilTime;
-                                            }
-                                            NotificationsController.updateServerNotificationsSettings(dialog_id);
-                                        }
-                                    }
-                            );
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
+                            showDialog(AlertsCreator.createMuteAlert(getParentActivity(), dialog_id));
                         } else {
                             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                             SharedPreferences.Editor editor = preferences.edit();
@@ -953,6 +798,77 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         selectedMessagesCanCopyIds.clear();
                         actionBar.hideActionMode();
                         updateVisibleRows();
+                }/* else if (id == chat_menu_attach) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    BottomSheet.Builder builder = new BottomSheet.Builder(getParentActivity());
+                    if (chatAttachView == null) {
+                        chatAttachView = new ChatAttachView(getParentActivity());
+                        chatAttachView.setDelegate(new ChatAttachView.ChatAttachViewDelegate() {
+                            @Override
+                            public void didPressedButton(int button) {
+                                if (visibleDialog != null) {
+                                    visibleDialog.dismiss();
+                                }
+                                if (button == 7) {
+                                    HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = chatAttachView.getSelectedPhotos();
+                                    if (!selectedPhotos.isEmpty()) {
+                                        ArrayList<String> photos = new ArrayList<>();
+                                        ArrayList<String> captions = new ArrayList<>();
+                                        for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
+                                            photos.add(entry.getValue().path);
+                                            captions.add("");
+                                        }
+                                        SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
+                                        showReplyPanel(false, null, null, null, false, true);
+                                    }
+                                    return;
+                                }
+                                processSelectedAttach(button);
+                            }
+                        });
+                    }
+                    builder.setCustomView(chatAttachView);
+                    final int coords[] = new int[2];
+                    menuItem.getLocationInWindow(coords);
+                    builder.setRevealAnimation(coords[0] + menuItem.getWidth() / 2, coords[1] + menuItem.getHeight() / 2);
+                    builder.setDelegate(new BottomSheet.BottomSheetDelegate() {
+                        @Override
+                        public void onOpenAnimationStart() {
+                            chatAttachView.startAnimations(coords[1] > AndroidUtilities.displaySize.y - AndroidUtilities.dp(100));
+                        }
+
+                        @Override
+                        public void onOpenAnimationEnd() {
+
+                        }
+                    });
+                    chatAttachView.init(ChatActivity.this);
+                    showDialog(builder.create());
+                }*/ else if (id == attach_gallery || id == attach_video || id == attach_document || id == attach_location || id == attach_photo || id == attach_audio || id == attach_contact || id == attach_sticker) {
+                    processSelectedAttach(id);
+                } else if (id == bot_help) {
+                    SendMessagesHelper.getInstance().sendMessage("/help", dialog_id, null, null, false);
+                } else if (id == bot_settings) {
+                    SendMessagesHelper.getInstance().sendMessage("/settings", dialog_id, null, null, false);
+                } else if (id == search) {
+                    avatarContainer.setVisibility(View.GONE);
+                    headerItem.setVisibility(View.GONE);
+                    attachItem.setVisibility(View.GONE);
+                    searchItem.setVisibility(View.VISIBLE);
+                    searchUpItem.setVisibility(View.VISIBLE);
+                    searchDownItem.setVisibility(View.VISIBLE);
+                    updateSearchButtons(0);
+                    //chatActivityEnterView.setVisibility(View.GONE);
+                    searchItem.openSearch();
+                } else if (id == search_up) {
+                    MessagesSearchQuery.searchMessagesInChat(null, dialog_id, classGuid, 1);
+                } else if (id == search_down) {
+                    MessagesSearchQuery.searchMessagesInChat(null, dialog_id, classGuid, 2);
+                    }
+                    else if (id == add_member) {
+                        openAddMember();
                     }
                 }
             });
@@ -1035,10 +951,60 @@ public void onClick(View v) {
         avatarContainer.addView(onlineTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 54, 0, 0, 4));
 
             ActionBarMenu menu = actionBar.createMenu();
+
+        if (currentEncryptedChat == null && !isBroadcast) {
+            searchItem = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true, false).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+
+                @Override
+                public void onSearchCollapse() {
+                    avatarContainer.setVisibility(View.VISIBLE);
+                    headerItem.setVisibility(View.VISIBLE);
+                    searchItem.setVisibility(View.GONE);
+                    //chatActivityEnterView.setVisibility(View.VISIBLE);
+                    searchUpItem.clearAnimation();
+                    searchDownItem.clearAnimation();
+                    searchUpItem.setVisibility(View.GONE);
+                    searchDownItem.setVisibility(View.GONE);
+                    scrollToLastMessage();
+                }
+
+                @Override
+                public void onSearchExpand() {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            searchItem.getSearchField().requestFocus();
+                            AndroidUtilities.showKeyboard(searchItem.getSearchField());
+                        }
+                    }, 200); //TODO find a better way to open keyboard
+                }
+
+                @Override
+                public void onSearchPressed(EditText editText) {
+                    updateSearchButtons(0);
+                    MessagesSearchQuery.searchMessagesInChat(editText.getText().toString(), dialog_id, classGuid, 0);
+                }
+            });
+            searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
+            searchItem.setVisibility(View.GONE);
+
+            searchUpItem = menu.addItem(search_up, R.drawable.search_up);
+            searchUpItem.setVisibility(View.GONE);
+            searchDownItem = menu.addItem(search_down, R.drawable.search_down);
+            searchDownItem.setVisibility(View.GONE);
+        }
+
             //headerItem = menu.addItem(0, R.drawable.ic_ab_other);
             Drawable dots = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_other);
             //dots.setColorFilter(AndroidUtilities.getIntDef("chatHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
             headerItem = menu.addItem(0, dots);
+
+            final boolean isChat = (int) dialog_id < 0 && (int) (dialog_id >> 32) != 1;
+            if(isChat)headerItem.addSubItem(add_member, LocaleController.getString("AddMember", R.string.AddMember), 0);
+
+            if (searchItem != null) {
+                headerItem.addSubItem(search, LocaleController.getString("Search", R.string.Search), 0);
+            }
             if (currentUser != null) {
                 addContactItem = headerItem.addSubItem(share_contact, "", 0);
             }
@@ -1052,34 +1018,47 @@ public void onClick(View v) {
                 headerItem.addSubItem(delete_chat, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser), 0);
             }
             muteItem = headerItem.addSubItem(mute, null, 0);
-        ((LinearLayout.LayoutParams) headerItem.getLayoutParams()).setMargins(0, 0, AndroidUtilities.dp(-48), 0);
+
+
+
+        if (currentUser != null && currentEncryptedChat == null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+            headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings), 0);
+            headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp), 0);
+            updateBotButtons();
+        }
 
             updateTitle();
             updateSubtitle();
             updateTitleIcons();
 
-            //attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other);
-            attachItem = menu.addItem(chat_menu_attach, dots);
+            //attachItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_other).setAllowCloseAnimation(false);;
+            attachItem = menu.addItem(chat_menu_attach, dots).setAllowCloseAnimation(false);
             attachItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
             attachItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
             attachItem.addSubItem(attach_sticker, LocaleController.getString("AttachSticker", R.string.AttachSticker), R.drawable.ic_attach_sticker);
-            attachItem.addSubItem(attach_music, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+            //attachItem.addSubItem(attach_music, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+            attachItem.addSubItem(attach_audio, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+
             attachItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
             attachItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
             attachItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
-            attachItem.setVisibility(View.INVISIBLE);
+            attachItem.addSubItem(attach_contact, LocaleController.getString("AttachContact", R.string.AttachContact), R.drawable.ic_attach_contact);
+            attachItem.setVisibility(View.GONE);
 
             Drawable clip = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_attach_white);
             clip.setColorFilter(themePrefs.getInt("chatEditTextIconsColor", 0xffadadad), PorterDuff.Mode.MULTIPLY);
-            menuItem = menu.addItem(chat_menu_attach, clip);
-            //menuItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach);
+            menuItem = menu.addItem(chat_menu_attach, clip).setAllowCloseAnimation(false);
+            //menuItem = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach).setAllowCloseAnimation(false);;
             menuItem.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
             menuItem.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
             menuItem.addSubItem(attach_sticker, LocaleController.getString("AttachSticker", R.string.AttachSticker), R.drawable.ic_attach_sticker);
-            menuItem.addSubItem(attach_music, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+            //menuItem.addSubItem(attach_music, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+            menuItem.addSubItem(attach_audio, LocaleController.getString("ChatMusic", R.string.ChatMusic), R.drawable.ic_attach_music);
+
             menuItem.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
             menuItem.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
             menuItem.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
+            menuItem.addSubItem(attach_contact, LocaleController.getString("AttachContact", R.string.AttachContact), R.drawable.ic_attach_contact);
             menuItem.setShowFromBottom(true);
             menuItem.setBackgroundDrawable(null);
 
@@ -1124,6 +1103,9 @@ public boolean onTouch(View v, MotionEvent event) {
             checkActionBarMenu();
 
         fragmentView = new SizeNotifierFrameLayout(context) {
+
+            int inputFieldHeight = 0;
+
             @Override
             protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 int widthMode = MeasureSpec.getMode(widthMeasureSpec);
@@ -1132,9 +1114,12 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
                 setMeasuredDimension(widthSize, heightSize);
-                heightSize -= getPaddingBottom();
 
-                int inputFieldHeight = 0;
+                int keyboardSize = getKeyboardHeight();
+
+                if (keyboardSize <= AndroidUtilities.dp(20)) {
+                    heightSize -= chatActivityEnterView.getEmojiPadding();
+                }
 
                 int childCount = getChildCount();
                 for (int i = 0; i < childCount; i++) {
@@ -1150,12 +1135,16 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     if (child.getVisibility() == GONE || child == chatActivityEnterView) {
                         continue;
                     }
-
-                    LayoutParams lp = (LayoutParams) child.getLayoutParams();
-                    if (child == chatListView) {
+                    if (child == chatListView || child == progressView) {
                         int contentWidthSpec = MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY);
                         int contentHeightSpec = MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10), heightSize - inputFieldHeight + AndroidUtilities.dp(2)), MeasureSpec.EXACTLY);
                         child.measure(contentWidthSpec, contentHeightSpec);
+                    } else if (child == emptyViewContainer) {
+                        int contentWidthSpec = MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY);
+                        int contentHeightSpec = MeasureSpec.makeMeasureSpec(heightSize, MeasureSpec.EXACTLY);
+                        child.measure(contentWidthSpec, contentHeightSpec);
+                    } else if (chatActivityEnterView.isPopupView(child)) {
+                        child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, MeasureSpec.EXACTLY));
                     } else {
                         measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
                     }
@@ -1166,6 +1155,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             protected void onLayout(boolean changed, int l, int t, int r, int b) {
                 final int count = getChildCount();
 
+                int paddingBottom = getKeyboardHeight() <= AndroidUtilities.dp(20) ? chatActivityEnterView.getEmojiPadding() : 0;
+                setBottomClip(paddingBottom);
+
                 for (int i = 0; i < count; i++) {
                     final View child = getChildAt(i);
                     if (child.getVisibility() == GONE) {
@@ -1204,10 +1196,10 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                             childTop = lp.topMargin;
                             break;
                         case Gravity.CENTER_VERTICAL:
-                            childTop = ((b - getPaddingBottom()) - t - height) / 2 + lp.topMargin - lp.bottomMargin;
+                            childTop = ((b - paddingBottom) - t - height) / 2 + lp.topMargin - lp.bottomMargin;
                             break;
                         case Gravity.BOTTOM:
-                            childTop = ((b - getPaddingBottom()) - t) - height - lp.bottomMargin;
+                            childTop = ((b - paddingBottom) - t) - height - lp.bottomMargin;
                             break;
                         default:
                             childTop = lp.topMargin;
@@ -1217,6 +1209,10 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                         childTop -= chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2);
                     } else if (child == pagedownButton) {
                         childTop -= chatActivityEnterView.getMeasuredHeight();
+                    } else if (child == emptyViewContainer) {
+                        childTop -= inputFieldHeight / 2;
+                    } else if (chatActivityEnterView.isPopupView(child)) {
+                        childTop = chatActivityEnterView.getBottom();
                     }
                     child.layout(childLeft, childTop, childLeft + width, childTop + height);
                 }
@@ -1225,15 +1221,13 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             }
         };
 
-
         SizeNotifierFrameLayout contentView = (SizeNotifierFrameLayout) fragmentView;
 
             contentView.setBackgroundImage(ApplicationLoader.getCachedWallpaper());
 
         emptyViewContainer = new FrameLayout(context);
-            emptyViewContainer.setPadding(0, 0, 0, AndroidUtilities.dp(48));
             emptyViewContainer.setVisibility(View.INVISIBLE);
-        contentView.addView(emptyViewContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        contentView.addView(emptyViewContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
             emptyViewContainer.setOnTouchListener(new View.OnTouchListener() {
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
@@ -1267,17 +1261,9 @@ public boolean onTouch(View v, MotionEvent event) {
                 secretViewStatusTextView.setGravity(Gravity.CENTER_HORIZONTAL);
                 secretViewStatusTextView.setMaxWidth(AndroidUtilities.dp(210));
                 if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
-                    if (currentUser.first_name.length() > 0) {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
-                    } else {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.last_name));
-                    }
-                } else {
-                    if (currentUser.first_name.length() > 0) {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.first_name));
-                    } else {
-                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.last_name));
-                    }
+                secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(currentUser)));
+            } else {
+                secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(currentUser)));
                 }
             secretChatPlaceholder.addView(secretViewStatusTextView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_HORIZONTAL | Gravity.TOP));
 
@@ -1332,7 +1318,26 @@ public boolean onTouch(View v, MotionEvent event) {
             chatActivityEnterView.onDestroy();
         }
 
-        chatListView = new RecyclerListView(context);
+        chatListView = new RecyclerListView(context) {
+            @Override
+            protected void onLayout(boolean changed, int l, int t, int r, int b) {
+                super.onLayout(changed, l, t, r, b);
+                if (chatAdapter.isBot) {
+                    int childCount = getChildCount();
+                    for (int a = 0; a < childCount; a++) {
+                        View child = getChildAt(a);
+                        if (child instanceof BotHelpCell) {
+                            int height = b - t;
+                            int top = height / 2 - child.getMeasuredHeight() / 2;
+                            if (child.getTop() > top) {
+                                child.layout(0, top, r - l, top + child.getMeasuredHeight());
+                            }
+                            break;
+                        }
+                    }
+                }
+            }
+        };
         chatListView.setVerticalScrollBarEnabled(true);
         chatListView.setAdapter(chatAdapter = new ChatActivityAdapter(context));
             chatListView.setClipToPadding(false);
@@ -1364,7 +1369,7 @@ public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
             @Override
             public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 int firstVisibleItem = chatLayoutManager.findFirstVisibleItemPosition();
-                int visibleItemCount = Math.abs(chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
+                int visibleItemCount = firstVisibleItem == RecyclerView.NO_POSITION ? 0 : Math.abs(chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
                 if (visibleItemCount > 0) {
                     int totalItemCount = chatAdapter.getItemCount();
                     if (firstVisibleItem <= 10) {
@@ -1501,7 +1506,7 @@ public void run() {
 
         progressView = new FrameLayout(context);
             progressView.setVisibility(View.INVISIBLE);
-        contentView.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48));
+        contentView.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
 
         View view = new View(context);
         view.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
@@ -1604,8 +1609,10 @@ public void onAnimationEnd(Object animation) {
                         }
                     }
                 }));
+            mentionsAdapter.setBotInfo(botInfo);
                 mentionsAdapter.setChatInfo(info);
                 mentionsAdapter.setNeedUsernames(currentChat != null);
+            mentionsAdapter.setBotsCount(currentChat != null ? botsCount : 1);
 
                 mentionListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                     @Override
@@ -1619,14 +1626,22 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                             chatActivityEnterView.replaceWithText(start, len, "@" + user.username + " ");
                         }
                         } else if (object instanceof String) {
+                        if (mentionsAdapter.isBotCommands()) {
+                            SendMessagesHelper.getInstance().sendMessage((String) object, dialog_id, null, null, false);
+                            chatActivityEnterView.setFieldText("");
+                        } else {
                             chatActivityEnterView.replaceWithText(start, len, object + " ");
                         }
                     }
+                }
                 });
 
                 mentionListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
                     @Override
                     public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+                    if (!mentionsAdapter.isLongClickEnabled()) {
+                        return false;
+                    }
                         Object object = mentionsAdapter.getItem(position);
                         if (object instanceof String) {
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -1651,6 +1666,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             chatActivityEnterView.setDialogId(dialog_id);
             chatActivityEnterView.addToAttachLayout(menuItem);
             chatActivityEnterView.setId(id_chat_compose_panel);
+        chatActivityEnterView.setBotsCount(botsCount, hasBotsCommands);
         contentView.addView(chatActivityEnterView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM));
             chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
                 @Override
@@ -1703,14 +1719,14 @@ public void onAttachButtonHidden() {
                         attachItem.setVisibility(View.VISIBLE);
                     }
                     if (headerItem != null) {
-                        headerItem.setVisibility(View.INVISIBLE);
+                    headerItem.setVisibility(View.GONE);
                     }
                 }
 
                 @Override
                 public void onAttachButtonShow() {
                     if (attachItem != null) {
-                        attachItem.setVisibility(View.INVISIBLE);
+                    attachItem.setVisibility(View.GONE);
                     }
                     if (headerItem != null) {
                         headerItem.setVisibility(View.VISIBLE);
@@ -1746,7 +1762,7 @@ public void onWindowSizeChanged(int size) {
 
         FrameLayout replyLayout = new FrameLayout(context);
             replyLayout.setClickable(true);
-            chatActivityEnterView.addTopView(replyLayout, AndroidUtilities.dp(48));
+        chatActivityEnterView.addTopView(replyLayout, 48);
 
         //View lineView = new View(context);
         lineView = new View(context);
@@ -1816,7 +1832,7 @@ public void onClick(View v) {
             if (currentEncryptedChat == null || currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 23) {
             chatActivityEnterView.setAllowStickers(true);
             if (stickersAdapter != null) {
-                stickersAdapter.destroy();
+                stickersAdapter.onDestroy();
             }
                 stickersListView.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0);
             stickersListView.setAdapter(stickersAdapter = new StickersAdapter(context, new StickersAdapter.StickersAdapterDelegate() {
@@ -1899,9 +1915,9 @@ public void onClick(View view) {
                     if (getParentActivity() == null) {
                         return;
                     }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                AlertDialog.Builder builder = null;
                     if (currentUser != null && userBlocked) {
+                    builder = new AlertDialog.Builder(getParentActivity());
                         builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
                         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                             @Override
@@ -1909,7 +1925,16 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                 MessagesController.getInstance().unblockUser(currentUser.id);
                             }
                         });
+                } else if (currentUser != null && botUser != null) {
+                    if (botUser.length() != 0) {
+                        MessagesController.getInstance().sendBotStart(currentUser, botUser);
                     } else {
+                        SendMessagesHelper.getInstance().sendMessage("/start", dialog_id, null, null, false);
+                    }
+                    botUser = null;
+                    updateBottomOverlay();
+                } else {
+                    builder = new AlertDialog.Builder(getParentActivity());
                         builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
                         builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                             @Override
@@ -1919,8 +1944,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             }
                         });
                     }
+                if (builder != null) {
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                showDialog(builder.create());
+                    showDialog(builder.create());
+                }
                 }
             });
 
@@ -1952,6 +1980,8 @@ public void onClick(View view) {
                 chatListView.setEmptyView(emptyViewContainer);
             }
 
+        chatActivityEnterView.setButtons(botButtons);
+
             updateContactStatus();
             updateBottomOverlay();
                 updateSecretStatus();
@@ -1959,6 +1989,35 @@ public void onClick(View view) {
         return fragmentView;
     }
 
+    private void openAddMember() {
+        Bundle args = new Bundle();
+        args.putBoolean("onlyUsers", true);
+        args.putBoolean("destroyAfterSelect", true);
+        args.putBoolean("returnAsResult", true);
+        //args.putBoolean("allowUsernameSearch", false);
+        if (chat_id > 0) {
+            if (info != null && info.admin_id == UserConfig.getClientUserId()) {
+                args.putInt("chat_id", currentChat.id);
+            }
+            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
+        }
+        ContactsActivity fragment = new ContactsActivity(args);
+        fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
+            @Override
+            public void didSelectContact(TLRPC.User user, String param) {
+                MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0, null);
+            }
+        });
+        if (info != null) {
+            HashMap<Integer, TLRPC.User> users = new HashMap<>();
+            for (TLRPC.TL_chatParticipant p : info.participants) {
+                users.put(p.user_id, null);
+            }
+            fragment.setIgnoreUsers(users);
+        }
+        presentFragment(fragment);
+    }
+
     private boolean searchForHttpInText(CharSequence string) {
         int len = string.length();
         int seqLen = 0;
@@ -1986,6 +2045,194 @@ private boolean searchForHttpInText(CharSequence string) {
         return false;
     }
 
+    private void processSelectedAttach(int which) {
+        if (which == attach_photo || which == attach_gallery || which == attach_document || which == attach_video) {
+            String action;
+            if (currentChat != null) {
+                if (currentChat.participants_count > MessagesController.getInstance().groupBigSize) {
+                    if (which == attach_photo || which == attach_gallery) {
+                        action = "bigchat_upload_photo";
+                    } else {
+                        action = "bigchat_upload_document";
+                    }
+                } else {
+                    if (which == attach_photo || which == attach_gallery) {
+                        action = "chat_upload_photo";
+                    } else {
+                        action = "chat_upload_document";
+                    }
+                }
+            } else {
+                if (which == attach_photo || which == attach_gallery) {
+                    action = "pm_upload_photo";
+                } else {
+                    action = "pm_upload_document";
+                }
+            }
+            if (action != null && !MessagesController.isFeatureEnabled(action, ChatActivity.this)) {
+                return;
+            }
+        }
+
+        if (which == attach_photo) {
+            try {
+                Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                File image = AndroidUtilities.generatePicturePath();
+                if (image != null) {
+                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
+                    currentPicturePath = image.getAbsolutePath();
+                }
+                startActivityForResult(takePictureIntent, 0);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else if (which == attach_gallery) {
+            PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false, ChatActivity.this);
+            fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
+                @Override
+                public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
+                    SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
+                    SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
+                    showReplyPanel(false, null, null, null, false, true);
+                }
+
+                @Override
+                public void startPhotoSelectActivity() {
+                    try {
+                        Intent videoPickerIntent = new Intent();
+                        videoPickerIntent.setType("video/*");
+                        videoPickerIntent.setAction(Intent.ACTION_GET_CONTENT);
+                        videoPickerIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
+
+                        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                        photoPickerIntent.setType("image/*");
+                        Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
+                        chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{videoPickerIntent});
+
+                        startActivityForResult(chooserIntent, 1);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+
+                @Override
+                public boolean didSelectVideo(String path) {
+                    if (Build.VERSION.SDK_INT >= 16) {
+                        return !openVideoEditor(path, true, true);
+                    } else {
+                        SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
+                        showReplyPanel(false, null, null, null, false, true);
+                        return true;
+                    }
+                }
+            });
+            presentFragment(fragment);
+        } else if (which == attach_sticker) {
+            PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false, ChatActivity.this);
+            fragment.imageFilter = ".webp";
+            fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
+                @Override
+                public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions, ArrayList<MediaController.SearchImage> webPhotos) {
+                    SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
+                    SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
+                    showReplyPanel(false, null, null, null, false, true);
+                }
+
+                @Override
+                public void startPhotoSelectActivity() {
+                    try {
+                        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                        startActivityForResult(photoPickerIntent, 40);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+
+                @Override
+                public boolean didSelectVideo(String path) {
+                    if (Build.VERSION.SDK_INT >= 16) {
+                        return !openVideoEditor(path, true, true);
+                    } else {
+                        SendMessagesHelper.prepareSendingVideo(path, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
+                        showReplyPanel(false, null, null, null, false, true);
+                        return true;
+                    }
+                }
+            });
+            presentFragment(fragment);
+            //
+        } else if (which == attach_video) {
+            try {
+                Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
+                File video = AndroidUtilities.generateVideoPath();
+                if (video != null) {
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(video));
+                    }
+                    takeVideoIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1536));
+                    currentPicturePath = video.getAbsolutePath();
+                }
+                startActivityForResult(takeVideoIntent, 2);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else if (which == attach_location) {
+            if (!isGoogleMapsInstalled()) {
+                return;
+            }
+            LocationActivity fragment = new LocationActivity();
+            fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
+                @Override
+                public void didSelectLocation(TLRPC.MessageMedia location) {
+                    SendMessagesHelper.getInstance().sendMessage(location, dialog_id, replyingMessageObject);
+                    moveScrollToLastMessage();
+                    showReplyPanel(false, null, null, null, false, true);
+                    if (paused) {
+                        scrollToTopOnResume = true;
+                    }
+                }
+            });
+            presentFragment(fragment);
+        } else if (which == attach_document) {
+            DocumentSelectActivity fragment = new DocumentSelectActivity();
+            fragment.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
+                @Override
+                public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
+                    activity.finishFragment();
+                    SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id, replyingMessageObject);
+                    showReplyPanel(false, null, null, null, false, true);
+                }
+
+                @Override
+                public void startDocumentSelectActivity() {
+                    try {
+                        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                        photoPickerIntent.setType("*/*");
+                        startActivityForResult(photoPickerIntent, 21);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+            presentFragment(fragment);
+        } else if (which == attach_audio) {
+            try {
+                Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);
+                startActivityForResult(intent, 32);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else if (which == attach_contact) {
+            try {
+                Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
+                intent.setType(ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE);
+                startActivityForResult(intent, 31);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+    }
+
     private void searchLinks(CharSequence charSequence, boolean force) {
         if (currentEncryptedChat != null) {
             return;
@@ -2083,7 +2330,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
             int textColor = themePrefs.getInt("chatEditTextColor", 0xff999999);
             replyObjectTextView.setTextColor(textColor);
             //int rColor = themePrefs.getInt("chatForwardRColor", defColor);
-            Drawable delete = getParentActivity().getResources().getDrawable(R.drawable.delete_reply);
+            Drawable delete = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.delete_reply);
             delete.setColorFilter(iColor, PorterDuff.Mode.SRC_IN);
             deleteIconImageView.setImageDrawable(delete);
             if (messageObject != null) {
@@ -2099,13 +2346,13 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                     return;
                 }
                 //replyIconImageView.setImageResource(R.drawable.reply);
-                Drawable reply = getParentActivity().getResources().getDrawable(R.drawable.reply);
+                Drawable reply = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.reply);
                 reply.setColorFilter(iColor, PorterDuff.Mode.SRC_IN);
                 replyIconImageView.setImageDrawable(reply);
 
                 deleteIconImageView.setVisibility(View.VISIBLE);
                 lineView.setVisibility(View.VISIBLE);
-                replyNameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                replyNameTextView.setText(UserObject.getUserName(user));
                 replyNameTextView.setTextColor(iColor);
                 if (messageObject.messageText != null) {
                     String mess = messageObject.messageText.toString();
@@ -2129,7 +2376,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                 chatActivityEnterView.setForceShowSendButton(true, animated);
                 ArrayList<Integer> uids = new ArrayList<>();
                 //replyIconImageView.setImageResource(R.drawable.forward_blue);
-                Drawable forward = getParentActivity().getResources().getDrawable(R.drawable.forward_blue);
+                Drawable forward = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.forward_blue);
                 forward.setColorFilter(iColor, PorterDuff.Mode.SRC_IN);
                 replyIconImageView.setImageDrawable(forward);
                 deleteIconImageView.setVisibility(View.VISIBLE);
@@ -2153,7 +2400,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                         continue;
                     }
                     if (uids.size() == 1) {
-                        userNames.append(ContactsController.formatName(user.first_name, user.last_name));
+                        userNames.append(UserObject.getUserName(user));
                     } else if (uids.size() == 2 || userNames.length() == 0) {
                         if (userNames.length() > 0) {
                             userNames.append(", ");
@@ -2217,7 +2464,7 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
                 }
             } else if (webPage != null) {
                 //replyIconImageView.setImageResource(R.drawable.link);
-                Drawable link = getParentActivity().getResources().getDrawable(R.drawable.link);
+                Drawable link = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.link);
                 link.setColorFilter(iColor, PorterDuff.Mode.SRC_IN);
                 replyIconImageView.setImageDrawable(link);
                 replyNameTextView.setTextColor(iColor);//
@@ -2263,6 +2510,10 @@ public void showReplyPanel(boolean show, MessageObject messageObject, ArrayList<
             if (replyingMessageObject == null && forwardingMessages == null && foundWebPage == null) {
                 return;
             }
+            if (replyingMessageObject != null && replyingMessageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                preferences.edit().putInt("answered_" + dialog_id, replyingMessageObject.getId()).commit();
+            }
             if (foundWebPage != null) {
                 foundWebPage = null;
                 chatActivityEnterView.setWebPage(null, !cancel);
@@ -2327,6 +2578,8 @@ private void scrollToLastMessage() {
             maxDate = Integer.MIN_VALUE;
             minDate = 0;
             forward_end_reached = true;
+            first = true;
+            firstLoading = true;
             loading = true;
             startLoadFromMessageId = 0;
             needSelectFromMessageId = false;
@@ -2477,7 +2730,7 @@ private void updateSecretStatus() {
             bottomOverlay.setVisibility(View.INVISIBLE);
         }
         if (hideKeyboard) {
-            chatActivityEnterView.hideEmojiPopup();
+            chatActivityEnterView.hidePopup();
             if (getParentActivity() != null) {
             AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
         }
@@ -2488,7 +2741,7 @@ private void updateSecretStatus() {
     private void checkActionBarMenu() {
         if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) ||
                 currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
-                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty)) {
+                currentUser != null && UserObject.isDeleted(currentUser)) {
 
             if (menuItem != null) {
                 menuItem.setVisibility(View.GONE);
@@ -2724,16 +2977,46 @@ private void updateTitle() {
                 if (currentUser.phone != null && currentUser.phone.length() != 0) {
                     nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
                 } else {
-                    if (currentUser instanceof TLRPC.TL_userDeleted) {
-                        nameTextView.setText(LocaleController.getString("HiddenName", R.string.HiddenName));
+                    nameTextView.setText(UserObject.getUserName(currentUser));
+                }
                     } else {
-                        nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                nameTextView.setText(UserObject.getUserName(currentUser));
+                    }
+                }
+    }
+
+    private void updateBotButtons() {
+        if (headerItem == null || currentUser == null || currentEncryptedChat != null || (currentUser.flags & TLRPC.USER_FLAG_BOT) == 0) {
+            return;
+        }
+        boolean hasHelp = false;
+        boolean hasSettings = false;
+        if (!botInfo.isEmpty()) {
+            for (HashMap.Entry<Integer, TLRPC.BotInfo> entry : botInfo.entrySet()) {
+                TLRPC.BotInfo info = entry.getValue();
+                for (int a = 0; a < info.commands.size(); a++) {
+                    TLRPC.TL_botCommand command = info.commands.get(a);
+                    if (command.command.toLowerCase().equals("help")) {
+                        hasHelp = true;
+                    } else if (command.command.toLowerCase().equals("settings")) {
+                        hasSettings = true;
+                    }
+                    if (hasSettings && hasHelp) {
+                        break;
                     }
                 }
-            } else {
-                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
             }
         }
+        if (hasHelp) {
+            headerItem.showSubItem(bot_help);
+        } else {
+            headerItem.hideSubItem(bot_help);
+        }
+        if (hasSettings) {
+            headerItem.showSubItem(bot_settings);
+        } else {
+            headerItem.hideSubItem(bot_settings);
+        }
     }
 
     private void updateTitleIcons() {
@@ -2787,9 +3070,13 @@ private void updateSubtitle() {
                 if (user != null) {
                     currentUser = user;
                 }
-                String newStatus = LocaleController.formatUserStatus(currentUser);
+                String newStatus;
                 if (currentUser.id == 333000 || currentUser.id == 777000) {
                     newStatus = LocaleController.getString("ServiceNotifications", R.string.ServiceNotifications);
+                } else if ((currentUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                    newStatus = LocaleController.getString("Bot", R.string.Bot);
+                } else {
+                    newStatus = LocaleController.formatUserStatus(currentUser);
                 }
                 if (lastStatus == null || lastPrintString != null || lastStatus != null && !lastStatus.equals(newStatus)) {
                     lastStatus = newStatus;
@@ -3048,7 +3335,22 @@ public void sendButtonPressed(int index) {
                     showAttachmentError();
                     return;
                 }
-                String tempPath = AndroidUtilities.getPath(data.getData());
+                Uri uri = data.getData();
+
+                String extractUriFrom = uri.toString();
+                if (extractUriFrom.contains("com.google.android.apps.photos.contentprovider")) {
+                    try {
+                        String firstExtraction = extractUriFrom.split("/1/")[1];
+                        if (firstExtraction.contains("/ACTUAL")) {
+                            firstExtraction = firstExtraction.replace("/ACTUAL", "");
+                            String secondExtraction = URLDecoder.decode(firstExtraction, "UTF-8");
+                            uri = Uri.parse(secondExtraction);
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+                String tempPath = AndroidUtilities.getPath(uri);
                 String originalPath = tempPath;
                 if (tempPath == null) {
                     originalPath = data.toString();
@@ -3060,24 +3362,57 @@ public void sendButtonPressed(int index) {
                 }
                 SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, dialog_id, replyingMessageObject);
                 showReplyPanel(false, null, null, null, false, true);
-            } //attach_music
-              else if (requestCode == 3) {
+            } else if (requestCode == 31) {
                 if (data == null || data.getData() == null) {
                     showAttachmentError();
                     return;
                 }
-                String tempPath = AndroidUtilities.getPath(data.getData());
-                String originalPath = tempPath;
-                if (tempPath == null) {
-                    originalPath = data.toString();
-                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
+                Uri uri = data.getData();
+                Cursor c = null;
+                try {
+                    c = getParentActivity().getContentResolver().query(uri, new String[]{ContactsContract.Data.DISPLAY_NAME, ContactsContract.CommonDataKinds.Phone.NUMBER}, null, null, null);
+                    if (c != null) {
+                        boolean sent = false;
+                        while (c.moveToNext()) {
+                            sent = true;
+                            String name = c.getString(0);
+                            String number = c.getString(1);
+                            TLRPC.User user = new TLRPC.User();
+                            user.first_name = name;
+                            user.last_name = "";
+                            user.phone = number;
+                            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, replyingMessageObject);
+                        }
+                        if (sent) {
+                            showReplyPanel(false, null, null, null, false, true);
+                        }
+                    }
+                } finally {
+                    try {
+                        if (c != null && !c.isClosed()) {
+                            c.close();
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
                 }
-                if (tempPath == null) {
+            } else if (requestCode == 32) {
+                if (data == null || data.getData() == null) {
                     showAttachmentError();
                     return;
                 }
-                SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, dialog_id, replyingMessageObject);
-            } else if (requestCode == 4) { //attach_sticker
+                Uri uri = data.getData();
+                String path = AndroidUtilities.getPath(uri);
+                if (path != null) {
+                    TLRPC.TL_audio audio = new TLRPC.TL_audio();
+                    audio.dc_id = Integer.MIN_VALUE;
+                    audio.id = Integer.MIN_VALUE;
+                    audio.user_id = UserConfig.getClientUserId();
+                    audio.mime_type = "audio/mp3";
+                    SendMessagesHelper.getInstance().sendMessage(audio, path, dialog_id, replyingMessageObject);
+                    showReplyPanel(false, null, null, null, false, true);
+                }
+            } else if (requestCode == 40) { //attach_sticker
                 if (data == null || data.getData() == null) {
                     showAttachmentError();
                     return;
@@ -3278,11 +3613,18 @@ public void didReceivedNotification(int id, final Object... args) {
                         last_message_id = 0;
                         first_message_id = 0;
                         startLoadFromMessageId = 0;
-                        chatAdapter.notifyItemChanged(chatAdapter.getItemCount() - 1);
+                        chatAdapter.notifyItemRemoved(chatAdapter.getItemCount() - 1);
                         newRowsCount--;
                     }
                     if (newRowsCount != 0) {
-                        chatAdapter.notifyItemRangeInserted(chatAdapter.getItemCount() - 2, newRowsCount);
+                        int firstVisPos = chatLayoutManager.findLastVisibleItemPosition();
+                        if (firstVisPos == RecyclerView.NO_POSITION) {
+                            firstVisPos = 0;
+                        }
+                        View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
+                        int top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
+                        chatAdapter.notifyItemRangeInserted(chatAdapter.getItemCount() - 1, newRowsCount);
+                        chatLayoutManager.scrollToPositionWithOffset(firstVisPos, top);
                     }
                     loadingForward = false;
                 } else {
@@ -3310,21 +3652,6 @@ public void didReceivedNotification(int id, final Object... args) {
                                 } else {
                                         chatLayoutManager.scrollToPositionWithOffset(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11) + yOffset);
                                 }
-                                ViewTreeObserver obs = chatListView.getViewTreeObserver();
-                                obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                                    @Override
-                                        public boolean onPreDraw() { //TODO remove it?
-                                        if (!messages.isEmpty()) {
-                                            if (messages.get(messages.size() - 1) == scrollToMessage) {
-                                                    chatLayoutManager.scrollToPositionWithOffset(0, AndroidUtilities.dp(-11) + yOffset);
-                                            } else {
-                                                    chatLayoutManager.scrollToPositionWithOffset(messages.size() - messages.indexOf(scrollToMessage), AndroidUtilities.dp(-11) + yOffset);
-                                            }
-                                        }
-                                        chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
-                                        return true;
-                                    }
-                                });
                                 }
                                 chatListView.invalidate();
                                 showPagedownButton(true, true);
@@ -3333,13 +3660,16 @@ public boolean onPreDraw() { //TODO remove it?
                             }
                         } else {
                             if (endReached) {
-                                chatAdapter.notifyItemRemoved(0);
+                                chatAdapter.notifyItemRemoved(chatAdapter.isBot ? 1 : 0);
                             }
                             if (newRowsCount != 0) {
                                 int firstVisPos = chatLayoutManager.findLastVisibleItemPosition();
+                                if (firstVisPos == RecyclerView.NO_POSITION) {
+                                    firstVisPos = 0;
+                                }
                             View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
                             int top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
-                                chatAdapter.notifyItemRangeInserted(1, newRowsCount);
+                                chatAdapter.notifyItemRangeInserted(chatAdapter.isBot ? 2 : 1, newRowsCount);
                                 chatLayoutManager.scrollToPositionWithOffset(firstVisPos + newRowsCount - (endReached ? 1 : 0), top);
                             }
                         }
@@ -3378,6 +3708,10 @@ public void run() {
                     }, 700);
                     first = false;
                 }
+                if (messages.isEmpty() && currentEncryptedChat == null && currentUser != null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0 && botUser == null) {
+                    botUser = "";
+                    updateBottomOverlay();
+                }
 
                 if (progressView != null) {
                     progressView.setVisibility(View.INVISIBLE);
@@ -3446,6 +3780,7 @@ public void run() {
                     }
                 }
 
+                ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 if (!forward_end_reached) {
                     int currentMaxDate = Integer.MIN_VALUE;
                     int currentMinMsgId = Integer.MIN_VALUE;
@@ -3498,10 +3833,10 @@ public void run() {
                     }
                     updateVisibleRows();
                 } else {
-                    ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                     boolean markAsRead = false;
                     boolean unreadUpdated = true;
                     int oldCount = messages.size();
+                    int addedCount = 0;
                     for (MessageObject obj : arr) {
                         if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
                                 obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerDrawable != null) {
@@ -3541,6 +3876,7 @@ public void run() {
                             dateObj.type = 10;
                             dateObj.contentType = 4;
                             messages.add(0, dateObj);
+                            addedCount++;
                         }
                         if (!obj.isOut()) {
                             if (paused) {
@@ -3565,6 +3901,7 @@ public void run() {
                                     unreadUpdated = false;
                                     unread_to_load = 0;
                                     scrollToTopUnReadOnResume = true;
+                                    addedCount++;
                                 }
                             }
                             if (unreadMessageObject != null) {
@@ -3578,12 +3915,15 @@ public void run() {
                             markAsRead = true;
                         }
                         }
+
                         dayArray.add(0, obj);
                         messages.add(0, obj);
+                        addedCount++;
                         if (obj.type == 10 || obj.type == 11) {
                             updateChat = true;
                         }
                     }
+
                     if (progressView != null) {
                         progressView.setVisibility(View.INVISIBLE);
                     }
@@ -3591,8 +3931,8 @@ public void run() {
                         if (unreadUpdated) {
                             chatAdapter.updateRowWithMessageObject(unreadMessageObject);
                         }
-                        if (messages.size() - oldCount != 0) {
-                            chatAdapter.notifyItemRangeInserted(chatAdapter.getItemCount(), messages.size() - oldCount);
+                        if (addedCount != 0) {
+                            chatAdapter.notifyItemRangeInserted(chatAdapter.getItemCount(), addedCount);
                         }
                     } else {
                         scrollToTopOnResume = true;
@@ -3600,9 +3940,15 @@ public void run() {
 
                     if (chatListView != null && chatAdapter != null) {
                         int lastVisible = chatLayoutManager.findLastVisibleItemPosition();
+                        if (lastVisible == RecyclerView.NO_POSITION) {
+                            lastVisible = 0;
+                        }
                         if (endReached) {
                             lastVisible++;
                         }
+                        if (chatAdapter.isBot) {
+                            oldCount++;
+                        }
                         if (lastVisible == oldCount || hasFromMe) {
                             if (!firstLoading) {
                                 if (paused) {
@@ -3628,6 +3974,10 @@ public void run() {
                         }
                     }
                 }
+                if (!messages.isEmpty() && botUser != null && botUser.length() == 0) {
+                    botUser = null;
+                    updateBottomOverlay();
+                }
                 if (updateChat) {
                     updateTitle();
                     checkAndUpdateAvatar();
@@ -3705,8 +4055,12 @@ public void run() {
             }
             if (messages.isEmpty()) {
                 if (!endReached && !loading) {
-                    progressView.setVisibility(View.INVISIBLE);
-                    chatListView.setEmptyView(null);
+                    if (progressView != null) {
+                        progressView.setVisibility(View.INVISIBLE);
+                    }
+                    if (chatListView != null) {
+                        chatListView.setEmptyView(null);
+                    }
                     if (currentEncryptedChat == null) {
                         maxMessageId = Integer.MAX_VALUE;
                         minMessageId = Integer.MIN_VALUE;
@@ -3718,6 +4072,17 @@ public void run() {
                     minDate = 0;
                     MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, 0, 0, 0, true);
                     loading = true;
+                } else {
+                    if (botButtons != null) {
+                        botButtons = null;
+                        if (chatActivityEnterView != null) {
+                            chatActivityEnterView.setButtons(null, false);
+                        }
+                    }
+                    if (currentEncryptedChat == null && currentUser != null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0 && botUser == null) {
+                        botUser = "";
+                        updateBottomOverlay();
+                    }
                 }
             }
             if (updated && chatAdapter != null) {
@@ -3735,11 +4100,28 @@ public void run() {
                     obj.messageOwner.media = newMsgObj.media;
                     obj.generateThumbs(true);
                 }
-                messagesDict.remove(msgId);
+                int oldCount = messagesDict.size();
+                MessageObject removed = messagesDict.remove(msgId);
                 messagesDict.put(newMsgId, obj);
                 obj.messageOwner.id = newMsgId;
                 obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                ArrayList<MessageObject> messArr = new ArrayList<>();
+                messArr.add(obj);
+                ReplyMessageQuery.loadReplyMessagesForMessages(messArr, dialog_id);
                 updateVisibleRows();
+                if (oldCount != messagesDict.size()) {
+                    int index = messages.indexOf(removed);
+                    messages.remove(index);
+                    ArrayList<MessageObject> dayArr = messagesByDays.get(removed.dateKey);
+                    dayArr.remove(obj);
+                    if (dayArr.isEmpty()) {
+                        messagesByDays.remove(obj.dateKey);
+                        if (index >= 0 && index < messages.size()) {
+                            messages.remove(index);
+                        }
+                    }
+                    chatAdapter.notifyDataSetChanged();
+                }
                 if (mediaUpdated && chatLayoutManager.findLastVisibleItemPosition() >= messages.size() - 1) {
                     moveScrollToLastMessage();
                 }
@@ -3771,6 +4153,25 @@ public void run() {
                 if (isBroadcast) {
                     SendMessagesHelper.getInstance().setCurrentChatInfo(info);
                 }
+                if (info != null) {
+                    hasBotsCommands = false;
+                    botInfo.clear();
+                    botsCount = 0;
+                    for (int a = 0; a < info.participants.size(); a++) {
+                        TLRPC.TL_chatParticipant participant = info.participants.get(a);
+                        TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+                        if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                            botsCount++;
+                            BotQuery.loadBotInfo(user.id, true, classGuid);
+                        }
+                    }
+                }
+                if (chatActivityEnterView != null) {
+                    chatActivityEnterView.setBotsCount(botsCount, hasBotsCommands);
+                }
+                if (mentionsAdapter != null) {
+                    mentionsAdapter.setBotsCount(botsCount);
+                }
             }
         } else if (id == NotificationCenter.contactsDidLoaded) {
             updateContactStatus();
@@ -3850,6 +4251,17 @@ public void run() {
                 selectedMessagesCanCopyIds.clear();
                 actionBar.hideActionMode();
                 chatAdapter.notifyDataSetChanged();
+
+                if (messages.isEmpty()) {
+                    if (botButtons != null) {
+                        botButtons = null;
+                        chatActivityEnterView.setButtons(null, false);
+                    }
+                    if (currentEncryptedChat == null && currentUser != null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0 && botUser == null) {
+                        botUser = "";
+                        updateBottomOverlay();
+                    }
+                }
             }
         } else if (id == NotificationCenter.screenshotTook) {
             updateInformationForScreenshotDetector();
@@ -3912,16 +4324,16 @@ public void run() {
                             mediaUpdated = true;
                         }
                         messagesDict.put(old.getId(), messageObject);
-                        int idx = messages.indexOf(old);
-                        if (idx >= 0) {
-                            messages.set(idx, messageObject);
-                            chatAdapter.notifyItemChanged(messages.size() - (!endReached ? 0 : 1) - idx);
+                        int index = messages.indexOf(old);
+                        if (index >= 0) {
+                            messages.set(index, messageObject);
+                            chatAdapter.notifyItemChanged(chatAdapter.messagesStartRow + messages.size() - index - 1);
                             changed = true;
                         }
                     }
                 }
                 if (changed) {
-                    if (mediaUpdated && chatLayoutManager.findLastVisibleItemPosition() >= messages.size() - 1) {
+                    if (mediaUpdated && chatLayoutManager.findLastVisibleItemPosition() >= messages.size() - (chatAdapter.isBot ? 2 : 1)) {
                         moveScrollToLastMessage();
                     }
                 }
@@ -3973,12 +4385,83 @@ public void run() {
             if (updated) {
                 updateVisibleRows();
             }
+        } else if (id == NotificationCenter.botInfoDidLoaded) {
+            int guid = (Integer) args[1];
+            if (classGuid == guid) {
+                TLRPC.BotInfo info = (TLRPC.BotInfo) args[0];
+                if (currentEncryptedChat == null) {
+                    if (!info.commands.isEmpty()) {
+                        hasBotsCommands = true;
+                    }
+                    botInfo.put(info.user_id, info);
+                    if (chatAdapter != null) {
+                        chatAdapter.notifyItemChanged(0);
+                    }
+                    if (mentionsAdapter != null) {
+                        mentionsAdapter.setBotInfo(botInfo);
+                    }
+                    if (chatActivityEnterView != null) {
+                        chatActivityEnterView.setBotsCount(botsCount, hasBotsCommands);
+                    }
+                }
+                updateBotButtons();
+            }
+        } else if (id == NotificationCenter.botKeyboardDidLoaded) {
+            if (dialog_id == (Long) args[1]) {
+                TLRPC.Message message = (TLRPC.Message) args[0];
+                if (message != null) {
+                    botButtons = new MessageObject(message, null, false);
+                    if (chatActivityEnterView != null) {
+                        if (botButtons.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                            if (preferences.getInt("answered_" + dialog_id, 0) != botButtons.getId() && (replyingMessageObject == null || chatActivityEnterView.getFieldText() == null)) {
+                                botReplyButtons = botButtons;
+                                chatActivityEnterView.setButtons(botButtons);
+                                showReplyPanel(true, botButtons, null, null, false, true);
+                            }
+                        } else {
+                            if (replyingMessageObject != null && botReplyButtons == replyingMessageObject) {
+                                botReplyButtons = null;
+                                showReplyPanel(false, null, null, null, false, true);
+                            }
+                            chatActivityEnterView.setButtons(botButtons);
+                        }
+                    }
+                } else {
+                    botButtons = null;
+                    if (chatActivityEnterView != null) {
+                        if (replyingMessageObject != null && botReplyButtons == replyingMessageObject) {
+                            botReplyButtons = null;
+                            showReplyPanel(false, null, null, null, false, true);
+                        }
+                        chatActivityEnterView.setButtons(botButtons);
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.chatSearchResultsAvailable) {
+            if (classGuid == (Integer) args[0]) {
+                int messageId = (Integer) args[1];
+                if (messageId != 0) {
+                    scrollToMessageId(messageId, 0, true);
+                }
+                updateSearchButtons((Integer) args[2]);
+            }
+        }
+    }
+
+    private void updateSearchButtons(int mask) {
+        if (searchUpItem != null) {
+            searchUpItem.setEnabled((mask & 1) != 0);
+            searchDownItem.setEnabled((mask & 2) != 0);
+            ViewProxy.setAlpha(searchUpItem, searchUpItem.isEnabled() ? 1.0f : 0.6f);
+            ViewProxy.setAlpha(searchDownItem, searchDownItem.isEnabled() ? 1.0f : 0.6f);
         }
     }
 
     @Override
     protected void onOpenAnimationStart() {
         NotificationCenter.getInstance().setAnimationInProgress(true);
+        openAnimationEnded = false;
     }
 
     @Override
@@ -4000,24 +4483,40 @@ protected void onOpenAnimationEnd() {
     }
 
     private void updateBottomOverlay() {
+        if (bottomOverlayChatText == null) {
+            return;
+        }
         if (currentUser == null) {
             bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
         } else {
             if (userBlocked) {
                 bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
+            } else if (botUser != null) {
+                bottomOverlayChatText.setText(LocaleController.getString("BotStart", R.string.BotStart));
+                chatActivityEnterView.hidePopup();
+                if (getParentActivity() != null) {
+                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                }
             } else {
                 bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
             }
         }
         if (currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
-                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty || userBlocked)) {
+                currentUser != null && (UserObject.isDeleted(currentUser) || userBlocked)) {
             bottomOverlayChat.setVisibility(View.VISIBLE);
             muteItem.setVisibility(View.GONE);
             chatActivityEnterView.setFieldFocused(false);
+            chatActivityEnterView.setVisibility(View.INVISIBLE);
         } else {
-            muteItem.setVisibility(View.VISIBLE);
+            if (botUser != null) {
+                bottomOverlayChat.setVisibility(View.VISIBLE);
+                chatActivityEnterView.setVisibility(View.INVISIBLE);
+            } else {
+                chatActivityEnterView.setVisibility(View.VISIBLE);
             bottomOverlayChat.setVisibility(View.INVISIBLE);
         }
+            muteItem.setVisibility(View.VISIBLE);
+        }
     }
 
     private void updateContactStatus() {
@@ -4033,7 +4532,7 @@ private void updateContactStatus() {
             }
             if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
                     || currentUser.id / 1000 == 333 || currentUser.id / 1000 == 777
-                    || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
+                    || UserObject.isDeleted(currentUser)
                     || ContactsController.getInstance().isLoadingContacts()
                     || (currentUser.phone != null && currentUser.phone.length() != 0 && ContactsController.getInstance().contactsDict.get(currentUser.id) != null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts()))) {
                 addContactItem.setVisibility(View.GONE);
@@ -4097,11 +4596,16 @@ public void onResume() {
 
         fixLayout(true);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        if (chatActivityEnterView.getFieldText() == null) {
         String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
         if (lastMessageText != null) {
             preferences.edit().remove("dialog_" + dialog_id).commit();
             chatActivityEnterView.setFieldText(lastMessageText);
         }
+        } else {
+            preferences.edit().remove("dialog_" + dialog_id).commit();
+        }
+        if (replyingMessageObject == null) {
         String lastReplyMessage = preferences.getString("reply_" + dialog_id, null);
         if (lastReplyMessage != null && lastReplyMessage.length() != 0) {
             preferences.edit().remove("reply_" + dialog_id).commit();
@@ -4119,9 +4623,13 @@ public void onResume() {
                 FileLog.e("tmessages", e);
             }
         }
+        } else {
+            preferences.edit().remove("reply_" + dialog_id).commit();
+        }
         if (bottomOverlayChat.getVisibility() != View.VISIBLE) {
             chatActivityEnterView.setFieldFocused(true);
         }
+        chatActivityEnterView.onResume();
         if (currentEncryptedChat != null) {
             chatEnterTime = System.currentTimeMillis();
             chatLeaveTime = 0;
@@ -4160,12 +4668,6 @@ private void updateTheme(){
         back.setColorFilter(iColor, PorterDuff.Mode.MULTIPLY);
     }
 
-    @Override
-    public void onBeginSlide() {
-        super.onBeginSlide();
-        chatActivityEnterView.hideEmojiPopup();
-    }
-
     @Override
     public void onPause() {
         super.onPause();
@@ -4176,7 +4678,7 @@ public void onPause() {
         wasPaused = true;
         NotificationsController.getInstance().setOpennedDialogId(0);
         if (chatActivityEnterView != null) {
-            chatActivityEnterView.hideEmojiPopup();
+            chatActivityEnterView.onPause();
         String text = chatActivityEnterView.getFieldText();
         if (text != null) {
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
@@ -4241,10 +4743,7 @@ public boolean onPreDraw() {
                     if (avatarContainer != null) {
                         avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    if (getParentActivity() == null) {
-                        return false;
-                    }
-                    if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                    if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                         selectedMessagesCountTextView.setTextSize(18);
                     } else {
                         selectedMessagesCountTextView.setTextSize(20);
@@ -4269,7 +4768,7 @@ public boolean onPreDraw() {
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
                     layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
                     avatarContainer.setLayoutParams(layoutParams);
-                    return false;
+                    return true;
                 }
             });
         }
@@ -4485,11 +4984,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
             forwaringMessage = selectedObject;
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
-            args.putBoolean("serverOnly", true);
+            args.putInt("dialogsType", 1);
             MessagesActivity fragment = new MessagesActivity(args);
             fragment.setDelegate(this);
             presentFragment(fragment);
         } else if (option == 3) {
+            try {
             if (Build.VERSION.SDK_INT < 11) {
                 android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                 clipboard.setText(selectedObject.messageText);
@@ -4498,6 +4998,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 android.content.ClipData clip = android.content.ClipData.newPlainText("label", selectedObject.messageText);
                 clipboard.setPrimaryClip(clip);
             }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         } else if (option == 4) {
             String fileName = selectedObject.getFileName();
             String path = selectedObject.messageOwner.attachPath;
@@ -4742,8 +5245,8 @@ public boolean onBackPressed() {
             actionBar.hideActionMode();
             updateVisibleRows();
             return false;
-        } else if (chatActivityEnterView.isEmojiPopupShowing()) {
-            chatActivityEnterView.hideEmojiPopup();
+        } else if (chatActivityEnterView.isPopupShowing()) {
+            chatActivityEnterView.hidePopup();
             return false;
         }
         return true;
@@ -4909,9 +5412,46 @@ public int getSelectedCount() {
     public class ChatActivityAdapter extends RecyclerView.Adapter {
 
         private Context mContext;
+        private boolean isBot;
+        private int rowCount;
+        private int botInfoRow;
+        private int loadingUpRow;
+        private int loadingDownRow;
+        private int messagesStartRow;
+        private int messagesEndRow;
 
         public ChatActivityAdapter(Context context) {
             mContext = context;
+            isBot = currentUser != null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0;
+        }
+
+        public void updateRows() {
+            rowCount = 0;
+            if (currentUser != null && (currentUser.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                botInfoRow = rowCount++;
+            } else {
+                botInfoRow = -1;
+            }
+            if (!messages.isEmpty()) {
+                if (!endReached) {
+                    loadingUpRow = rowCount++;
+                } else {
+                    loadingUpRow = -1;
+                }
+                messagesStartRow = rowCount;
+                rowCount += messages.size();
+                messagesEndRow = rowCount;
+                if (!forward_end_reached) {
+                    loadingDownRow = rowCount++;
+                } else {
+                    loadingDownRow = -1;
+                }
+            } else {
+                loadingUpRow = -1;
+                loadingDownRow = -1;
+                messagesStartRow = -1;
+                messagesEndRow = -1;
+            }
         }
 
         private class Holder extends RecyclerView.ViewHolder {
@@ -4923,16 +5463,7 @@ public Holder(View itemView) {
 
         @Override
         public int getItemCount() {
-            int count = messages.size();
-            if (count != 0) {
-                if (!endReached) {
-                    count++;
-                }
-                if (!forward_end_reached) {
-                    count++;
-                }
-            }
-            return count;
+            return rowCount;
         }
 
         @Override
@@ -4964,12 +5495,25 @@ public long getItemId(int i) {
             } else if (viewType == 4) {
                 view = new ChatActionCell(mContext);
             } else if (viewType == 5) {
-                        LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.chat_loading_layout, parent, false);
-                view.findViewById(R.id.progressLayout).setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+                view = new ChatLoadingCell(mContext);
             } else if (viewType == 6) {
-                    LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-                view = li.inflate(R.layout.chat_unread_layout, parent, false);
+                view = new ChatUnreadCell(mContext);
+            } else if (viewType == 7) {
+                view = new BotHelpCell(mContext);
+                ((BotHelpCell) view).setDelegate(new BotHelpCell.BotHelpCellDelegate() {
+                    @Override
+                    public void didPressUrl(String url) {
+                        if (url.startsWith("@")) {
+                            MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
+                        } else if (url.startsWith("#")) {
+                            MessagesActivity fragment = new MessagesActivity(null);
+                            fragment.setSearchString(url);
+                            presentFragment(fragment);
+                        } else if (url.startsWith("/")) {
+                            chatActivityEnterView.setCommand(null, url);
+                        }
+                    }
+                });
                 }
 
                 if (view instanceof ChatBaseCell) {
@@ -5006,13 +5550,15 @@ public boolean canPerformActions() {
                         }
 
                         @Override
-                        public void didPressUrl(String url) {
+                    public void didPressUrl(MessageObject messageObject, String url) {
                             if (url.startsWith("@")) {
                             MessagesController.openByUserName(url.substring(1), ChatActivity.this, 0);
                             } else if (url.startsWith("#")) {
                                 MessagesActivity fragment = new MessagesActivity(null);
                                 fragment.setSearchString(url);
                                 presentFragment(fragment);
+                        } else if (url.startsWith("/")) {
+                            chatActivityEnterView.setCommand(messageObject, url);
                             }
                         }
 
@@ -5162,6 +5708,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                                         FileLog.e("tmessages", e);
                                                     }
                                                 } else if (i == 0) {
+                                                try {
                                                     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
                                                         android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                                         clipboard.setText(messageObject.messageOwner.media.phone_number);
@@ -5170,6 +5717,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                                         android.content.ClipData clip = android.content.ClipData.newPlainText("label", messageObject.messageOwner.media.phone_number);
                                                         clipboard.setPrimaryClip(clip);
                                                     }
+                                                } catch (Exception e) {
+                                                    FileLog.e("tmessages", e);
+                                                }
                                                 }
                                             }
                                         }
@@ -5208,17 +5758,16 @@ public void needOpenUserProfile(int uid) {
 
         @Override
         public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
-            int viewType = holder.getItemViewType();
-            if (viewType == 5) {
-                holder.itemView.findViewById(R.id.progressLayout).setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
-                return;
-            }
-
-            MessageObject message = messages.get(messages.size() - position - (!endReached ? 0 : 1));
+            if (position == botInfoRow) {
+                BotHelpCell helpView = (BotHelpCell) holder.itemView;
+                helpView.setText(!botInfo.isEmpty() ? botInfo.get(currentUser.id).description : null);
+            } else if (position == loadingDownRow || position == loadingUpRow) {
+                ChatLoadingCell loadingCell = (ChatLoadingCell) holder.itemView;
+                loadingCell.setProgressVisible(loadsCount > 1);
+            } else if (position >= messagesStartRow && position < messagesEndRow) {
+                MessageObject message = messages.get(messages.size() - (position - messagesStartRow) - 1);
             View view = holder.itemView;
 
-            int type = message.contentType;
-
             boolean selected = false;
             boolean disableSelection = false;
             if (actionBar.isActionModeShowed()) {
@@ -5245,26 +5794,23 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             } else if (view instanceof ChatActionCell) {
                 ChatActionCell actionCell = (ChatActionCell) view;
                 actionCell.setMessageObject(message);
-            } else if (type == 6) {
-                TextView messageTextView = (TextView) view.findViewById(R.id.chat_message_text);
-                messageTextView.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
+                } else if (view instanceof ChatUnreadCell) {
+                    ChatUnreadCell unreadCell = (ChatUnreadCell) view;
+                    unreadCell.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
+                }
             }
         }
 
         @Override
         public int getItemViewType(int position) {
-            int offset = 1;
-            if (!endReached && messages.size() != 0) {
-                offset = 0;
-                if (position == 0) {
-                    return 5;
-                }
-            }
-            if (!forward_end_reached && position == (messages.size() + 1 - offset)) {
+            if (position == loadingUpRow || position == loadingDownRow) {
                 return 5;
+            } else if (position == botInfoRow) {
+                return 7;
+            } else if (position >= messagesStartRow && position < messagesEndRow) {
+                return messages.get(messages.size() - (position - messagesStartRow) - 1).contentType;
             }
-            MessageObject message = messages.get(messages.size() - position - offset);
-            return message.contentType;
+            return 5;
         }
 
         @Override
@@ -5292,7 +5838,7 @@ public void updateRowWithMessageObject(MessageObject messageObject) {
             if (index == -1) {
                 return;
             }
-            notifyItemChanged(messages.size() - (!endReached ? 0 : 1) - index);
+            notifyItemChanged(messagesStartRow + messages.size() - index - 1);
         }
 
         public void removeMessageObject(MessageObject messageObject) {
@@ -5301,7 +5847,55 @@ public void removeMessageObject(MessageObject messageObject) {
                 return;
             }
             messages.remove(index);
-            notifyItemRemoved(messages.size() - (!endReached ? 0 : 1) - index);
+            notifyItemRemoved(messagesStartRow + messages.size() - index - 1);
+        }
+
+        @Override
+        public void notifyDataSetChanged() {
+            updateRows();
+            super.notifyDataSetChanged();
+        }
+
+        @Override
+        public void notifyItemChanged(int position) {
+            updateRows();
+            super.notifyItemChanged(position);
+        }
+
+        @Override
+        public void notifyItemRangeChanged(int positionStart, int itemCount) {
+            updateRows();
+            super.notifyItemRangeChanged(positionStart, itemCount);
+        }
+
+        @Override
+        public void notifyItemInserted(int position) {
+            updateRows();
+            super.notifyItemInserted(position);
+        }
+
+        @Override
+        public void notifyItemMoved(int fromPosition, int toPosition) {
+            updateRows();
+            super.notifyItemMoved(fromPosition, toPosition);
+        }
+
+        @Override
+        public void notifyItemRangeInserted(int positionStart, int itemCount) {
+            updateRows();
+            super.notifyItemRangeInserted(positionStart, itemCount);
+        }
+
+        @Override
+        public void notifyItemRemoved(int position) {
+            updateRows();
+            super.notifyItemRemoved(position);
+        }
+
+        @Override
+        public void notifyItemRangeRemoved(int positionStart, int itemCount) {
+            updateRows();
+            super.notifyItemRangeRemoved(positionStart, itemCount);
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
index b1ae98078..57e0b98a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
@@ -19,15 +19,15 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.MediaController;
-import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.PhotoAlbumPickerActivity;
 import org.telegram.ui.PhotoCropActivity;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.PhotoViewer;
 
 import java.io.File;
@@ -204,28 +204,28 @@ public void didReceivedNotification(int id, final Object... args) {
         if (id == NotificationCenter.FileDidUpload) {
             String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
-                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
-                        if (delegate != null) {
-                            delegate.didUploadedPhoto((TLRPC.InputFile)args[1], smallPhoto, bigPhoto);
-                        }
-                        uploadingAvatar = null;
-                        if (clearAfterUpdate) {
-                            parentFragment = null;
-                            delegate = null;
-                        }
-                    }
+                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
+                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
+                if (delegate != null) {
+                    delegate.didUploadedPhoto((TLRPC.InputFile)args[1], smallPhoto, bigPhoto);
+                }
+                uploadingAvatar = null;
+                if (clearAfterUpdate) {
+                    parentFragment = null;
+                    delegate = null;
+                }
+            }
         } else if (id == NotificationCenter.FileDidFailUpload) {
             String location = (String)args[0];
             if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
-                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
-                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
-                        uploadingAvatar = null;
-                        if (clearAfterUpdate) {
-                            parentFragment = null;
-                            delegate = null;
-                        }
-                    }
-        }
+                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
+                NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
+                uploadingAvatar = null;
+                if (clearAfterUpdate) {
+                    parentFragment = null;
+                    delegate = null;
+                }
             }
         }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index e7c1e828f..2ac30c33c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -14,7 +14,6 @@
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
-import android.os.Build;
 import android.os.PowerManager;
 import android.text.Editable;
 import android.text.TextWatcher;
@@ -25,8 +24,6 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
@@ -56,7 +53,9 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.BaseFragment;
 
-public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
+import java.util.Locale;
+
+public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierFrameLayout.SizeNotifierFrameLayoutDelegate {
 
     public interface ChatActivityEnterViewDelegate {
         void onMessageSend(String message);
@@ -69,23 +68,29 @@
 
     private EditText messageEditText;
     private ImageView sendButton;
-    private PopupWindow emojiPopup;
     private ImageView emojiButton;
     private EmojiView emojiView;
     private TextView recordTimeText;
     private ImageView audioSendButton;
     private FrameLayout recordPanel;
     private LinearLayout slideText;
-    private View sizeNotifierLayout;
-    private FrameLayout attachButton;
+    private SizeNotifierFrameLayout sizeNotifierLayout;
+    private LinearLayout attachButton;
+    private ImageView botButton;
     private LinearLayout textFieldContainer;
     private View topView;
+    private PopupWindow botKeyboardPopup;
+    private BotKeyboardView botKeyboardView;
+
+    private int currentPopupContentType = -1;
 
-    private int framesDroped;
+    private boolean isPaused;
+    private boolean showKeyboardOnResume;
 
-    private int keyboardTransitionState;
-    private boolean showKeyboardOnEmojiButton;
-    private ViewTreeObserver.OnPreDrawListener onPreDrawListener;
+    private MessageObject botButtonsMessageObject;
+    private TLRPC.TL_replyKeyboardMarkup botReplyMarkup;
+    private int botCount;
+    private boolean hasBotCommands;
 
     private PowerManager.WakeLock mWakeLock;
     private AnimatorSetProxy runningAnimation;
@@ -97,6 +102,7 @@
     private int keyboardHeight;
     private int keyboardHeightLand;
     private boolean keyboardVisible;
+    private int emojiPadding;
     private boolean sendByEnter;
     private long lastTypingTimeSend;
     private String lastTimeString;
@@ -106,11 +112,15 @@
     private boolean forceShowSendButton;
     private boolean allowStickers;
 
+    private int lastSizeChangeValue1;
+    private boolean lastSizeChangeValue2;
+
     private Activity parentActivity;
     private BaseFragment parentFragment;
     private long dialog_id;
     private boolean ignoreTextChange;
     private MessageObject replyingMessageObject;
+    private MessageObject botMessageObject;
     private TLRPC.WebPage messageWebPage;
     private boolean messageWebPageSearch = true;
     private ChatActivityEnterViewDelegate delegate;
@@ -121,7 +131,20 @@
     private boolean allowShowTopView;
     private AnimatorSetProxy currentTopViewAnimation;
 
-    public ChatActivityEnterView(Activity context, View parent, BaseFragment fragment, boolean isChat) {
+    private boolean waitingForKeyboardOpen;
+    private Runnable openKeyboardRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (messageEditText != null && waitingForKeyboardOpen && !keyboardVisible && !AndroidUtilities.usingHardwareInput) {
+                messageEditText.requestFocus();
+                AndroidUtilities.showKeyboard(messageEditText);
+                AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
+                AndroidUtilities.runOnUIThread(openKeyboardRunnable, 100);
+            }
+        }
+    };
+
+    public ChatActivityEnterView(Activity context, SizeNotifierFrameLayout parent, BaseFragment fragment, boolean isChat) {
         super(context);
         setBackgroundResource(R.drawable.compose_panel);
         setFocusable(true);
@@ -134,62 +157,21 @@ public ChatActivityEnterView(Activity context, View parent, BaseFragment fragmen
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidSent);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.hideEmojiKeyboard);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioRouteChanged);
         parentActivity = context;
         parentFragment = fragment;
         sizeNotifierLayout = parent;
-        if (sizeNotifierLayout instanceof SizeNotifierRelativeLayout) {
-            ((SizeNotifierRelativeLayout) sizeNotifierLayout).setDelegate(this);
-        } else if (sizeNotifierLayout instanceof SizeNotifierFrameLayout) {
-            ((SizeNotifierFrameLayout) sizeNotifierLayout).setDelegate(this);
-        }
+        sizeNotifierLayout.setDelegate(this);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         sendByEnter = preferences.getBoolean("send_by_enter", false);
 
-        parent.getViewTreeObserver().addOnPreDrawListener(onPreDrawListener = new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (keyboardTransitionState == 1) {
-                    if (keyboardVisible || framesDroped >= 60) {
-                        showEmojiPopup(false, false);
-                        keyboardTransitionState = 0;
-                    } else {
-                        openKeyboard();
-                    }
-                    framesDroped++;
-                    return false;
-                } else if (keyboardTransitionState == 2) {
-                    if (!keyboardVisible || framesDroped >= 60) {
-                        int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                        sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                        keyboardTransitionState = 0;
-                    }
-                    framesDroped++;
-                    return false;
-                }
-                return true;
-            }
-        });
-
         textFieldContainer = new LinearLayout(context);
         textFieldContainer.setBackgroundColor(0xffffffff);
         textFieldContainer.setOrientation(LinearLayout.HORIZONTAL);
-        addView(textFieldContainer);
-        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
-        layoutParams2.gravity = Gravity.LEFT | Gravity.TOP;
-        layoutParams2.width = LayoutHelper.MATCH_PARENT;
-        layoutParams2.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams2.topMargin = AndroidUtilities.dp(2);
-        textFieldContainer.setLayoutParams(layoutParams2);
+        addView(textFieldContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 0, 2, 0, 0));
 
         FrameLayoutFixed frameLayout = new FrameLayoutFixed(context);
-        textFieldContainer.addView(frameLayout);
-        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
-        layoutParams.width = 0;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.weight = 1;
-        frameLayout.setLayoutParams(layoutParams);
+        textFieldContainer.addView(frameLayout, LayoutHelper.createLinear(0, LayoutHelper.WRAP_CONTENT, 1.0f));
 
         emojiButton = new ImageView(context);
         //emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
@@ -200,24 +182,14 @@ public boolean onPreDraw() {
         emojiButton.setImageDrawable(emoji);
         emojiButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
         emojiButton.setPadding(AndroidUtilities.dp(4), AndroidUtilities.dp(1), 0, 0);
-        frameLayout.addView(emojiButton);
-        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) emojiButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        layoutParams1.gravity = Gravity.BOTTOM;
-        emojiButton.setLayoutParams(layoutParams1);
+        frameLayout.addView(emojiButton, LayoutHelper.createFrame(48, 48, Gravity.BOTTOM));
         emojiButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (showKeyboardOnEmojiButton) {
-                    setKeyboardTransitionState(1);
-                    int selection = messageEditText.getSelectionStart();
-                    MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, 0, 0, 0);
-                    messageEditText.onTouchEvent(event);
-                    event.recycle();
-                    messageEditText.setSelection(selection);
+                if (!isPopupShowing() || currentPopupContentType != 0) {
+                    showPopup(1, 0);
                 } else {
-                    showEmojiPopup(emojiPopup == null || !emojiPopup.isShowing(), true);
+                    openKeyboardInternal();
                 }
             }
         });
@@ -235,20 +207,13 @@ public void onClick(View view) {
         AndroidUtilities.clearCursorDrawable(messageEditText);
         messageEditText.setTextColor(0xff000000);
         messageEditText.setHintTextColor(0xffb2b2b2);
-        frameLayout.addView(messageEditText);
-        layoutParams1 = (FrameLayout.LayoutParams) messageEditText.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.BOTTOM;
-        layoutParams1.leftMargin = AndroidUtilities.dp(52);
-        layoutParams1.rightMargin = AndroidUtilities.dp(isChat ? 50 : 2);
-        messageEditText.setLayoutParams(layoutParams1);
+        frameLayout.addView(messageEditText, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM, 52, 0, isChat ? 50 : 2, 0));
         messageEditText.setOnKeyListener(new View.OnKeyListener() {
             @Override
             public boolean onKey(View view, int i, KeyEvent keyEvent) {
-                if (i == 4 && !keyboardVisible && emojiPopup != null && emojiPopup.isShowing()) {
+                if (i == KeyEvent.KEYCODE_BACK && !keyboardVisible && isPopupShowing()) {
                     if (keyEvent.getAction() == 1) {
-                        showEmojiPopup(false, true);
+                        showPopup(0, 0);
                     }
                     return true;
                 } else if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
@@ -261,8 +226,8 @@ public boolean onKey(View view, int i, KeyEvent keyEvent) {
         messageEditText.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (emojiPopup != null && emojiPopup.isShowing()) {
-                    setKeyboardTransitionState(1);
+                if (isPopupShowing()) {
+                    showPopup(AndroidUtilities.usingHardwareInput ? 0 : 2, 0);
                 }
             }
         });
@@ -335,99 +300,71 @@ public void afterTextChanged(Editable editable) {
         });
 
         if (isChat) {
-            attachButton = new FrameLayout(context);
+            attachButton = new LinearLayout(context);
+            attachButton.setOrientation(LinearLayout.HORIZONTAL);
             attachButton.setEnabled(false);
             ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(48));
-            frameLayout.addView(attachButton);
-            layoutParams1 = (FrameLayout.LayoutParams) attachButton.getLayoutParams();
-            layoutParams1.width = AndroidUtilities.dp(48);
-            layoutParams1.height = AndroidUtilities.dp(48);
-            layoutParams1.gravity = Gravity.BOTTOM | Gravity.RIGHT;
-            attachButton.setLayoutParams(layoutParams1);
+            frameLayout.addView(attachButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, 48, Gravity.BOTTOM | Gravity.RIGHT));
+
+            botButton = new ImageView(context);
+            botButton.setImageResource(R.drawable.bot_keyboard2);
+            botButton.setScaleType(ImageView.ScaleType.CENTER);
+            botButton.setVisibility(GONE);
+            attachButton.addView(botButton, LayoutHelper.createLinear(48, 48));
+            botButton.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (botReplyMarkup != null) {
+                        if (!isPopupShowing() || currentPopupContentType != 1) {
+                            showPopup(1, 1);
+                        } else {
+                            openKeyboardInternal();
+                        }
+                    } else if (hasBotCommands) {
+                        setFieldText("/");
+                        openKeyboard();
+                    }
+                }
+            });
         }
 
         recordPanel = new FrameLayoutFixed(context);
         recordPanel.setVisibility(GONE);
         recordPanel.setBackgroundColor(0xffffffff);
-        frameLayout.addView(recordPanel);
-        layoutParams1 = (FrameLayout.LayoutParams) recordPanel.getLayoutParams();
-        layoutParams1.width = LayoutHelper.MATCH_PARENT;
-        layoutParams1.height = AndroidUtilities.dp(48);
-        layoutParams1.gravity = Gravity.BOTTOM;
-        recordPanel.setLayoutParams(layoutParams1);
+        frameLayout.addView(recordPanel, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM));
 
         slideText = new LinearLayout(context);
         slideText.setOrientation(LinearLayout.HORIZONTAL);
-        recordPanel.addView(slideText);
-        layoutParams1 = (FrameLayout.LayoutParams) slideText.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.CENTER;
-        layoutParams1.leftMargin = AndroidUtilities.dp(30);
-        slideText.setLayoutParams(layoutParams1);
+        recordPanel.addView(slideText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER, 30, 0, 0, 0));
 
         ImageView imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.slidearrow);
-        slideText.addView(imageView);
-        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.topMargin = AndroidUtilities.dp(1);
-        imageView.setLayoutParams(layoutParams);
+        slideText.addView(imageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 0, 1, 0, 0));
 
         TextView textView = new TextView(context);
         textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
         textView.setTextColor(0xff999999);
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
-        slideText.addView(textView);
-        layoutParams = (LinearLayout.LayoutParams) textView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.leftMargin = AndroidUtilities.dp(6);
-        textView.setLayoutParams(layoutParams);
+        slideText.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 6, 0, 0, 0));
 
         LinearLayout linearLayout = new LinearLayout(context);
         linearLayout.setOrientation(LinearLayout.HORIZONTAL);
         linearLayout.setPadding(AndroidUtilities.dp(13), 0, 0, 0);
         linearLayout.setBackgroundColor(0xffffffff);
-        recordPanel.addView(linearLayout);
-        layoutParams1 = (FrameLayout.LayoutParams) linearLayout.getLayoutParams();
-        layoutParams1.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams1.gravity = Gravity.CENTER_VERTICAL;
-        linearLayout.setLayoutParams(layoutParams1);
+        recordPanel.addView(linearLayout, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL));
 
         imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.rec);
-        linearLayout.addView(imageView);
-        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.topMargin = AndroidUtilities.dp(1);
-        imageView.setLayoutParams(layoutParams);
+        linearLayout.addView(imageView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 0, 1, 0, 0));
 
         recordTimeText = new TextView(context);
         recordTimeText.setText("00:00");
         recordTimeText.setTextColor(0xff4d4c4b);
         recordTimeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
-        linearLayout.addView(recordTimeText);
-        layoutParams = (LinearLayout.LayoutParams) recordTimeText.getLayoutParams();
-        layoutParams.width = LayoutHelper.WRAP_CONTENT;
-        layoutParams.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams.gravity = Gravity.CENTER_VERTICAL;
-        layoutParams.leftMargin = AndroidUtilities.dp(6);
-        recordTimeText.setLayoutParams(layoutParams);
+        linearLayout.addView(recordTimeText, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 6, 0, 0, 0));
 
         FrameLayout frameLayout1 = new FrameLayout(context);
-        textFieldContainer.addView(frameLayout1);
-        layoutParams = (LinearLayout.LayoutParams) frameLayout1.getLayoutParams();
-        layoutParams.width = AndroidUtilities.dp(48);
-        layoutParams.height = AndroidUtilities.dp(48);
-        layoutParams.gravity = Gravity.BOTTOM;
-        frameLayout1.setLayoutParams(layoutParams);
+        textFieldContainer.addView(frameLayout1, LayoutHelper.createLinear(48, 48, Gravity.BOTTOM));
 
         audioSendButton = new ImageView(context);
         audioSendButton.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
@@ -439,11 +376,7 @@ public void afterTextChanged(Editable editable) {
         audioSendButton.setImageDrawable(mic);
         audioSendButton.setBackgroundColor(0x00000000);
         audioSendButton.setPadding(0, 0, AndroidUtilities.dp(4), 0);
-        frameLayout1.addView(audioSendButton);
-        layoutParams1 = (FrameLayout.LayoutParams) audioSendButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        audioSendButton.setLayoutParams(layoutParams1);
+        frameLayout1.addView(audioSendButton, LayoutHelper.createFrame(48, 48));
         audioSendButton.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
@@ -533,11 +466,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         ViewProxy.setScaleY(sendButton, 0.1f);
         ViewProxy.setAlpha(sendButton, 0.0f);
         sendButton.clearAnimation();
-        frameLayout1.addView(sendButton);
-        layoutParams1 = (FrameLayout.LayoutParams) sendButton.getLayoutParams();
-        layoutParams1.width = AndroidUtilities.dp(48);
-        layoutParams1.height = AndroidUtilities.dp(48);
-        sendButton.setLayoutParams(layoutParams1);
+        frameLayout1.addView(sendButton, LayoutHelper.createFrame(48, 48));
         sendButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -545,6 +474,10 @@ public void onClick(View view) {
             }
         });
 
+        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", Context.MODE_PRIVATE);
+        keyboardHeight = sharedPreferences.getInt("kbd_height", AndroidUtilities.dp(200));
+        keyboardHeightLand = sharedPreferences.getInt("kbd_height_land3", AndroidUtilities.dp(200));
+
         checkSendButton(false);
 
         updateTheme();
@@ -564,40 +497,15 @@ private void updateTheme() {
         textFieldContainer.setBackgroundColor(color);
     }
 
-    private void setKeyboardTransitionState(int state) {
-        if (AndroidUtilities.usingHardwareInput) {
-            if (state == 1) {
-                showEmojiPopup(false, false);
-                keyboardTransitionState = 0;
-
-            } else if (state == 2) {
-                int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                keyboardTransitionState = 0;
-            }
-        } else {
-            framesDroped = 0;
-            keyboardTransitionState = state;
-            if (state == 1) {
-                sizeNotifierLayout.setPadding(0, 0, 0, 0);
-            }
-        }
-    }
 
     public void addTopView(View view, int height) {
         if (view == null) {
             return;
         }
-        addView(view, 0);
         topView = view;
         topView.setVisibility(GONE);
+        addView(topView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, height, Gravity.TOP | Gravity.LEFT, 0, 2, 0, 0));
         needShowTopView = false;
-        LayoutParams layoutParams = (LayoutParams) topView.getLayoutParams();
-        layoutParams.width = LayoutHelper.MATCH_PARENT;
-        layoutParams.height = height;
-        layoutParams.topMargin = AndroidUtilities.dp(2);
-        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
-        topView.setLayoutParams(layoutParams);
     }
 
     public void setTopViewAnimation(float progress) {
@@ -633,7 +541,7 @@ public void showTopView(boolean animated) {
                 currentTopViewAnimation = null;
             }
             if (animated) {
-                if (keyboardVisible || emojiPopup != null && emojiPopup.isShowing()) {
+                if (keyboardVisible || isPopupShowing()) {
                     currentTopViewAnimation = new AnimatorSetProxy();
                     currentTopViewAnimation.playTogether(
                             ObjectAnimatorProxy.ofFloat(ChatActivityEnterView.this, "topViewAnimation", 1.0f)
@@ -706,7 +614,11 @@ public boolean isTopViewVisible() {
         return topView != null && topView.getVisibility() == VISIBLE;
     }
 
-    private void onWindowSizeChanged(int size) {
+    private void onWindowSizeChanged() {
+        int size = sizeNotifierLayout.getHeight();
+        if (!keyboardVisible) {
+            size -= emojiPadding;
+        }
         if (delegate != null) {
             delegate.onWindowSizeChanged(size);
         }
@@ -739,9 +651,7 @@ public void onDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidSent);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.hideEmojiKeyboard);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioRouteChanged);
-        sizeNotifierLayout.getViewTreeObserver().removeOnPreDrawListener(onPreDrawListener);
         if (mWakeLock != null) {
             try {
                 mWakeLock.release();
@@ -751,10 +661,24 @@ public void onDestroy() {
             }
         }
         if (sizeNotifierLayout != null) {
-            if (sizeNotifierLayout instanceof SizeNotifierRelativeLayout) {
-                ((SizeNotifierRelativeLayout) sizeNotifierLayout).setDelegate(null);
-            } else if (sizeNotifierLayout instanceof SizeNotifierFrameLayout) {
-                ((SizeNotifierFrameLayout) sizeNotifierLayout).setDelegate(null);
+            sizeNotifierLayout.setDelegate(null);
+        }
+    }
+
+    public void onPause() {
+        isPaused = true;
+    }
+
+    public void onResume() {
+        isPaused = false;
+        if (showKeyboardOnResume) {
+            showKeyboardOnResume = false;
+            messageEditText.requestFocus();
+            AndroidUtilities.showKeyboard(messageEditText);
+            if (!AndroidUtilities.usingHardwareInput && !keyboardVisible) {
+                waitingForKeyboardOpen = true;
+                AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
+                AndroidUtilities.runOnUIThread(openKeyboardRunnable, 100);
             }
         }
     }
@@ -764,7 +688,19 @@ public void setDialogId(long id) {
     }
 
     public void setReplyingMessageObject(MessageObject messageObject) {
+        if (messageObject != null) {
+            if (botMessageObject == null && botButtonsMessageObject != replyingMessageObject) {
+                botMessageObject = botButtonsMessageObject;
+            }
         replyingMessageObject = messageObject;
+            setButtons(replyingMessageObject, true);
+        } else if (messageObject == null && replyingMessageObject == botButtonsMessageObject) {
+            replyingMessageObject = null;
+            setButtons(botMessageObject, false);
+            botMessageObject = null;
+        } else {
+            replyingMessageObject = messageObject;
+        }
     }
 
     public void setWebPage(TLRPC.WebPage webPage, boolean searchWebPages) {
@@ -1084,132 +1020,26 @@ public void onAnimationEnd(Object animator) {
         }
     }
 
-    private void showEmojiPopup(boolean show, boolean post) {
-        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
-        int color = themePrefs.getInt("chatEditTextIconsColor", 0xffadadad);
-        if (show) {
-            if (emojiPopup == null) {
-                if (parentActivity == null) {
-                    return;
-                }
-                emojiView = new EmojiView(allowStickers, parentActivity);
-                emojiView.setListener(new EmojiView.Listener() {
-                    public boolean onBackspace() {
-                        if (messageEditText.length() == 0) {
-                            return false;
-                        }
-                        messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));
-                        return true;
-                    }
-
-                    public void onEmojiSelected(String symbol) {
-                        int i = messageEditText.getSelectionEnd();
-                        if (i < 0) {
-                            i = 0;
-                        }
-                        try {//TODO check
-                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                            messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
-                            int j = i + localCharSequence.length();
-                            messageEditText.setSelection(j, j);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-
-                    public void onStickerSelected(TLRPC.Document sticker) {
-                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
-                        if (delegate != null) {
-                            delegate.onMessageSend(null);
-                        }
-                    }
-                });
-                emojiPopup = new PopupWindow(emojiView);
-            }
-
-            if (keyboardHeight <= 0) {
-                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height", AndroidUtilities.dp(200));
-            }
-            if (keyboardHeightLand <= 0) {
-                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", AndroidUtilities.dp(200));
-            }
-            int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-            //int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : AndroidUtilities.dp(400);
-            FileLog.e("tmessages", "show emoji with height = " + currentHeight);
-            emojiPopup.setHeight(View.MeasureSpec.makeMeasureSpec(currentHeight, View.MeasureSpec.EXACTLY));
-            if (sizeNotifierLayout != null) {
-                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
-            }
-
-                emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.LEFT, 0, 0);
+    public void setDelegate(ChatActivityEnterViewDelegate delegate) {
+        this.delegate = delegate;
+    }
 
-            if (!keyboardVisible) {
-                if (sizeNotifierLayout != null) {
-                    sizeNotifierLayout.setPadding(0, 0, 0, currentHeight);
-                    //emojiButton.setImageResource(R.drawable.ic_msg_panel_hide);
-                    Drawable hide = parentActivity.getResources().getDrawable(R.drawable.ic_msg_panel_hide);
-                    hide.setColorFilter(color, PorterDuff.Mode.SRC_IN);
-                    emojiButton.setImageDrawable(hide);
-                    showKeyboardOnEmojiButton = false;
-                    onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
-                }
-                return;
-            } else {
-                setKeyboardTransitionState(2);
-                        AndroidUtilities.hideKeyboard(messageEditText);
-            }
-            //emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
-            Drawable kb = parentActivity.getResources().getDrawable(R.drawable.ic_msg_panel_kb_white);
-            kb.setColorFilter(color, PorterDuff.Mode.MULTIPLY);
-            emojiButton.setImageDrawable(kb);
-            showKeyboardOnEmojiButton = true;
+    public void setCommand(MessageObject messageObject, String command) {
+        if (command == null) {
             return;
         }
-        if (emojiButton != null) {
-            showKeyboardOnEmojiButton = false;
-            //emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
-            Drawable emoji = parentActivity.getResources().getDrawable(R.drawable.ic_msg_panel_smiles);
-            emoji.setColorFilter(color, PorterDuff.Mode.SRC_IN);
-            emojiButton.setImageDrawable(emoji);
-        }
-        if (emojiPopup != null) {
-            try {
-            emojiPopup.dismiss();
-            } catch (Exception e) {
-                //don't promt
-            }
-        }
-        if (keyboardTransitionState == 0) {
-            if (sizeNotifierLayout != null) {
-                if (post) {
-            sizeNotifierLayout.post(new Runnable() {
-                public void run() {
-                    if (sizeNotifierLayout != null) {
-                        sizeNotifierLayout.setPadding(0, 0, 0, 0);
-                                onWindowSizeChanged(sizeNotifierLayout.getHeight());
-                    }
-                }
-            });
-                } else {
-                    sizeNotifierLayout.setPadding(0, 0, 0, 0);
-                    onWindowSizeChanged(sizeNotifierLayout.getHeight());
-                }
-            }
-        }
-    }
-
-    public void hideEmojiPopup() {
-        if (emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
+        TLRPC.User user = messageObject != null && (int) dialog_id < 0 ? MessagesController.getInstance().getUser(messageObject.messageOwner.from_id) : null;
+        if (botCount != 1 && user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0 && !command.contains("@")) {
+            SendMessagesHelper.getInstance().sendMessage(String.format(Locale.US, "%s@%s", command, user.username), dialog_id, null, null, false);
+        } else {
+            SendMessagesHelper.getInstance().sendMessage(command, dialog_id, null, null, false);
         }
-    }
-
-    public void openKeyboard() {
-        AndroidUtilities.showKeyboard(messageEditText);
-    }
-
-    public void setDelegate(ChatActivityEnterViewDelegate delegate) {
-        this.delegate = delegate;
+        /*String text = messageEditText.getText().toString();
+        text = command + " " + text.replaceFirst("^/[a-zA-Z@\\d_]{1,255}(\\s|$)", "");
+        ignoreTextChange = true;
+        messageEditText.setText(text);
+        messageEditText.setSelection(messageEditText.getText().length());
+        ignoreTextChange = false;*/
     }
 
     public void setFieldText(String text) {
@@ -1280,10 +1110,6 @@ public String getFieldText() {
         return null;
     }
 
-    public boolean isEmojiPopupShowing() {
-        return emojiPopup != null && emojiPopup.isShowing();
-    }
-
     public void addToAttachLayout(View view) {
         if (attachButton == null) {
             return;
@@ -1292,12 +1118,265 @@ public void addToAttachLayout(View view) {
             ViewGroup viewGroup = (ViewGroup) view.getParent();
             viewGroup.removeView(view);
         }
-        attachButton.addView(view);
-        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
-        layoutParams.gravity = Gravity.CENTER;
-        layoutParams.width = AndroidUtilities.dp(48);
-        layoutParams.height = LayoutHelper.MATCH_PARENT;
-        view.setLayoutParams(layoutParams);
+        attachButton.addView(view, LayoutHelper.createLinear(48, 48));
+    }
+
+    private void updateBotButton() {
+        if (botButton == null) {
+            return;
+        }
+        if (hasBotCommands || botReplyMarkup != null) {
+            if (botButton.getVisibility() != VISIBLE) {
+                botButton.setVisibility(VISIBLE);
+            }
+            Drawable d;
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            int color = themePrefs.getInt("chatEditTextIconsColor", 0xffadadad);
+            if (botReplyMarkup != null) {
+                if (isPopupShowing() && currentPopupContentType == 1) {
+                    d = getResources().getDrawable(R.drawable.ic_msg_panel_kb);
+                    d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                    botButton.setImageDrawable(d);
+                    //botButton.setImageResource(R.drawable.ic_msg_panel_kb);
+                } else {
+                    d = getResources().getDrawable(R.drawable.bot_keyboard2);
+                    d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                    botButton.setImageDrawable(d);
+                    //botButton.setImageResource(R.drawable.bot_keyboard2);
+                }
+            } else {
+                d = getResources().getDrawable(R.drawable.bot_keyboard);
+                d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                botButton.setImageDrawable(d);
+                //botButton.setImageResource(R.drawable.bot_keyboard);
+            }
+        } else {
+            botButton.setVisibility(GONE);
+        }
+        ViewProxy.setPivotX(attachButton, AndroidUtilities.dp(botButton.getVisibility() == GONE ? 48 : 96));
+        attachButton.clearAnimation();
+    }
+
+    public void setBotsCount(int count, boolean hasCommands) {
+        botCount = count;
+        if (hasBotCommands != hasCommands) {
+            hasBotCommands = hasCommands;
+            updateBotButton();
+        }
+    }
+
+    public void setButtons(MessageObject messageObject) {
+        setButtons(messageObject, true);
+    }
+
+    public void setButtons(MessageObject messageObject, boolean openKeyboard) {
+        if (replyingMessageObject != null && replyingMessageObject == botButtonsMessageObject && replyingMessageObject != messageObject) {
+            botMessageObject = messageObject;
+            return;
+        }
+        if (botButton == null || botButtonsMessageObject != null && botButtonsMessageObject == messageObject || botButtonsMessageObject == null && messageObject == null) {
+            return;
+        }
+        if (botKeyboardView == null) {
+            botKeyboardView = new BotKeyboardView(parentActivity);
+            botKeyboardView.setVisibility(GONE);
+            botKeyboardView.setDelegate(new BotKeyboardView.BotKeyboardViewDelegate() {
+                @Override
+                public void didPressedButton(CharSequence text) {
+                    MessageObject object = replyingMessageObject != null ? replyingMessageObject : ((int) dialog_id < 0 ? botButtonsMessageObject : null);
+                    SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, object, null, false);
+                    if (replyingMessageObject != null) {
+                        openKeyboardInternal();
+                        setButtons(botMessageObject, false);
+                    } else if ((botButtonsMessageObject.messageOwner.reply_markup.flags & 2) != 0) {
+                        openKeyboardInternal();
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        preferences.edit().putInt("answered_" + dialog_id, botButtonsMessageObject.getId()).commit();
+                    }
+                    if (delegate != null) {
+                        delegate.onMessageSend(null);
+                    }
+                }
+            });
+            sizeNotifierLayout.addView(botKeyboardView);
+        }
+        botButtonsMessageObject = messageObject;
+        botReplyMarkup = messageObject != null && messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardMarkup ? (TLRPC.TL_replyKeyboardMarkup) messageObject.messageOwner.reply_markup : null;
+
+        botKeyboardView.setPanelHeight(AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight);
+        botKeyboardView.setButtons(botReplyMarkup != null ? botReplyMarkup : null);
+        if (botReplyMarkup != null) {
+            if (botButtonsMessageObject != replyingMessageObject && (botReplyMarkup.flags & 2) != 0) {
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                if (preferences.getInt("answered_" + dialog_id, 0) == messageObject.getId()) {
+                    return;
+                }
+            }
+            if (messageEditText.length() == 0 && !isPopupShowing()) {
+                showPopup(1, 1);
+            }
+        } else {
+            if (isPopupShowing() && currentPopupContentType == 1) {
+                if (openKeyboard) {
+                    openKeyboardInternal();
+                } else {
+                    showPopup(0, 1);
+                }
+            }
+        }
+        updateBotButton();
+    }
+
+    public boolean isPopupView(View view) {
+        return view == botKeyboardView || view == emojiView;
+    }
+
+    private void showPopup(int show, int contentType) {
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int color = themePrefs.getInt("chatEditTextIconsColor", 0xffadadad);
+        Drawable d;
+        if (show == 1) {
+            if (contentType == 0 && emojiView == null) {
+                if (parentActivity == null) {
+                    return;
+                }
+                emojiView = new EmojiView(allowStickers, parentActivity);
+                emojiView.setVisibility(GONE);
+                emojiView.setListener(new EmojiView.Listener() {
+                    public boolean onBackspace() {
+                        if (messageEditText.length() == 0) {
+                            return false;
+                        }
+                        messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));
+                        return true;
+                    }
+
+                    public void onEmojiSelected(String symbol) {
+                        int i = messageEditText.getSelectionEnd();
+                        if (i < 0) {
+                            i = 0;
+                        }
+                        try {
+                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol/* + "\uFE0F"*/, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                            messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
+                            int j = i + localCharSequence.length();
+                            messageEditText.setSelection(j, j);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                    public void onStickerSelected(TLRPC.Document sticker) {
+                        SendMessagesHelper.getInstance().sendSticker(sticker, dialog_id, replyingMessageObject);
+                        if (delegate != null) {
+                            delegate.onMessageSend(null);
+                        }
+                    }
+                });
+                sizeNotifierLayout.addView(emojiView);
+            }
+
+            View currentView = null;
+            if (contentType == 0) {
+                emojiView.setVisibility(VISIBLE);
+                if (botKeyboardView != null && botKeyboardView.getVisibility() != GONE) {
+                    botKeyboardView.setVisibility(GONE);
+                }
+                currentView = emojiView;
+            } else if (contentType == 1) {
+                if (emojiView != null && emojiView.getVisibility() != GONE) {
+                    emojiView.setVisibility(GONE);
+                }
+                botKeyboardView.setVisibility(VISIBLE);
+                currentView = botKeyboardView;
+            }
+            currentPopupContentType = contentType;
+
+            if (keyboardHeight <= 0) {
+                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", Context.MODE_PRIVATE).getInt("kbd_height", AndroidUtilities.dp(200));
+            }
+            if (keyboardHeightLand <= 0) {
+                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", Context.MODE_PRIVATE).getInt("kbd_height_land3", AndroidUtilities.dp(200));
+            }
+            int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
+            if (contentType == 1) {
+                currentHeight = Math.min(botKeyboardView.getKeyboardHeight(), currentHeight);
+            }
+            if (botKeyboardView != null) {
+                botKeyboardView.setPanelHeight(currentHeight);
+            }
+
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) currentView.getLayoutParams();
+            layoutParams.width = AndroidUtilities.displaySize.x;
+            layoutParams.height = currentHeight;
+            currentView.setLayoutParams(layoutParams);
+            AndroidUtilities.hideKeyboard(messageEditText);
+            if (sizeNotifierLayout != null) {
+                emojiPadding = currentHeight;
+                sizeNotifierLayout.requestLayout();
+                if (contentType == 0) {
+                    d = getResources().getDrawable(R.drawable.ic_msg_panel_kb);
+                    d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                    emojiButton.setImageDrawable(d);
+                    //emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
+                } else if (contentType == 1) {
+                    d = getResources().getDrawable(R.drawable.ic_msg_panel_smiles);
+                    d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                    emojiButton.setImageDrawable(d);
+                    //emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
+                }
+                updateBotButton();
+                onWindowSizeChanged();
+            }
+        } else {
+            if (emojiButton != null) {
+                d = getResources().getDrawable(R.drawable.ic_msg_panel_smiles);
+                d.setColorFilter(color, PorterDuff.Mode.SRC_IN);
+                emojiButton.setImageDrawable(d);
+                //emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
+            }
+            if (emojiView != null) {
+                emojiView.setVisibility(GONE);
+            }
+            if (botKeyboardView != null) {
+                botKeyboardView.setVisibility(GONE);
+            }
+            if (sizeNotifierLayout != null) {
+                if (show == 0) {
+                    emojiPadding = 0;
+                }
+                sizeNotifierLayout.requestLayout();
+                onWindowSizeChanged();
+            }
+            updateBotButton();
+        }
+    }
+
+    public void hidePopup() {
+        if (isPopupShowing()) {
+            showPopup(0, 0);
+        }
+    }
+
+    private void openKeyboardInternal() {
+        showPopup(AndroidUtilities.usingHardwareInput || isPaused ? 0 : 2, 0);
+        messageEditText.requestFocus();
+        AndroidUtilities.showKeyboard(messageEditText);
+        if (isPaused) {
+            showKeyboardOnResume = true;
+        } else if (!AndroidUtilities.usingHardwareInput && !keyboardVisible) {
+            waitingForKeyboardOpen = true;
+            AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
+            AndroidUtilities.runOnUIThread(openKeyboardRunnable, 100);
+        }
+    }
+
+    public void openKeyboard() {
+        AndroidUtilities.showKeyboard(messageEditText);
+    }
+
+    public boolean isPopupShowing() {
+        return emojiView != null && emojiView.getVisibility() == VISIBLE || botKeyboardView != null && botKeyboardView.getVisibility() == VISIBLE;
     }
 
     @Override
@@ -1312,53 +1391,65 @@ public void onSizeChanged(int height, boolean isWidthGreater) {
             }
         }
 
-        if (emojiPopup != null && emojiPopup.isShowing()) {
+        if (isPopupShowing()) {
             int newHeight = isWidthGreater ? keyboardHeightLand : keyboardHeight;
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", Activity.MODE_PRIVATE);
             int pSize = preferences.getInt("emojiPopupSize", 60);
             int popupSize = AndroidUtilities.dp((pSize - 40) * 10);
             newHeight = popupSize < newHeight ? newHeight : popupSize;
 
-            try {
-            View view = emojiPopup.getContentView();
-            if(Build.VERSION.SDK_INT > 22) {
-                if (!(view.getLayoutParams() instanceof WindowManager.LayoutParams)) {
-                    view = (View) view.getParent();
-                }
+            if (currentPopupContentType == 1 && !botKeyboardView.isFullSize()) {
+                newHeight = Math.min(botKeyboardView.getKeyboardHeight(), newHeight);
+            }
+
+            View currentView = null;
+            if (currentPopupContentType == 0) {
+                currentView = emojiView;
+            } else if (currentPopupContentType == 1) {
+                currentView = botKeyboardView;
+            }
+            if (botKeyboardView != null) {
+                botKeyboardView.setPanelHeight(newHeight);
             }
-            WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams) view.getLayoutParams();
-            FileLog.e("tmessages", "update emoji height to = " + newHeight);
-            //if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
-            if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight || (pSize > 60 && sizeNotifierLayout.getPaddingBottom() != newHeight)) {
+
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) currentView.getLayoutParams();
+            if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
                 layoutParams.width = AndroidUtilities.displaySize.x;
                 layoutParams.height = newHeight;
-                WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
-                if (wm != null) {
-                    wm.updateViewLayout(emojiPopup.getContentView(), layoutParams);
-                    if (!keyboardVisible) {
-                        if (sizeNotifierLayout != null) {
-                            sizeNotifierLayout.setPadding(0, 0, 0, layoutParams.height);
-                            sizeNotifierLayout.requestLayout();
-                            onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
-                        }
-                    }
+                currentView.setLayoutParams(layoutParams);
+                if (sizeNotifierLayout != null) {
+                    emojiPadding = layoutParams.height;
+                    sizeNotifierLayout.requestLayout();
+                    onWindowSizeChanged();
                 }
             }
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-            }
         }
 
+        if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
+            onWindowSizeChanged();
+            return;
+        }
+        lastSizeChangeValue1 = height;
+        lastSizeChangeValue2 = isWidthGreater;
+
         boolean oldValue = keyboardVisible;
         keyboardVisible = height > 0;
-        if (keyboardVisible && (sizeNotifierLayout.getPaddingBottom() > 0 || keyboardTransitionState == 1)) {
-            setKeyboardTransitionState(1);
-        } else if (keyboardTransitionState != 2 && !keyboardVisible && keyboardVisible != oldValue && emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
+        if (keyboardVisible && isPopupShowing()) {
+            showPopup(0, currentPopupContentType);
         }
-        if (keyboardTransitionState == 0) {
-            onWindowSizeChanged(sizeNotifierLayout.getHeight() - sizeNotifierLayout.getPaddingBottom());
+        if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !isPopupShowing()) {
+            emojiPadding = 0;
+            sizeNotifierLayout.requestLayout();
         }
+        if (keyboardVisible && waitingForKeyboardOpen) {
+            waitingForKeyboardOpen = false;
+            AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
+        }
+        onWindowSizeChanged();
+    }
+
+    public int getEmojiPadding() {
+        return emojiPadding;
     }
 
     public int getEmojiHeight() {
@@ -1375,6 +1466,9 @@ public void didReceivedNotification(int id, Object... args) {
             if (emojiView != null) {
                 emojiView.invalidateViews();
             }
+            if (botKeyboardView != null) {
+                botKeyboardView.invalidateViews();
+            }
         } else if (id == NotificationCenter.recordProgressChanged) {
             Long time = (Long) args[0] / 1000;
             String str = String.format("%02d:%02d", time / 60, time % 60);
@@ -1405,8 +1499,6 @@ public void didReceivedNotification(int id, Object... args) {
             if (delegate != null) {
                 delegate.onMessageSend(null);
             }
-        } else if (id == NotificationCenter.hideEmojiKeyboard) {
-            hideEmojiPopup();
         } else if (id == NotificationCenter.audioRouteChanged) {
             if (parentActivity != null) {
                 boolean frontSpeaker = (Boolean) args[0];
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
index ad8217f3e..71ec5be0f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
@@ -18,8 +18,8 @@
 import android.graphics.Shader;
 import android.view.View;
 
-import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.AnimationCompat.ViewProxy;
 
 public class ClippingImageView extends View {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index b7bbb03a4..3cb770d48 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -12,14 +12,17 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.database.DataSetObserver;
+import android.os.Build;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.text.TextUtils;
+import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.AbsListView;
 import android.widget.BaseAdapter;
 import android.widget.FrameLayout;
 import android.widget.GridView;
@@ -28,6 +31,7 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
@@ -36,6 +40,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.EmptyCell;
 import org.telegram.ui.Cells.StickerEmojiCell;
 
 import java.util.ArrayList;
@@ -43,7 +48,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 
-public class EmojiView extends LinearLayout implements NotificationCenter.NotificationCenterDelegate {
+public class EmojiView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate {
 
     public interface Listener {
         boolean onBackspace();
@@ -52,9 +57,9 @@
     }
 
     private ArrayList<EmojiGridAdapter> adapters = new ArrayList<>();
-    private StickersGridAdapter stickersGridAdapter;
     private HashMap<Long, Integer> stickersUseHistory = new HashMap<>();
-    private ArrayList<TLRPC.Document> stickers;
+    private ArrayList<TLRPC.Document> recentStickers = new ArrayList<>();
+    private ArrayList<TLRPC.TL_messages_stickerSet> stickerSets = new ArrayList<>();
 
     private int[] icons = {
             R.drawable.ic_emoji_recent,
@@ -68,9 +73,15 @@
     private Listener listener;
     private ViewPager pager;
     private FrameLayout recentsWrap;
-    private FrameLayout emojiWrap;
+    private FrameLayout stickersWrap;
     private ArrayList<GridView> views = new ArrayList<>();
     private ImageView backspaceButton;
+    private StickersGridAdapter stickersGridAdapter;
+    private LinearLayout pagerSlidingTabStripContainer;
+    private ScrollSlidingTabStrip scrollSlidingTabStrip;
+
+    private int oldWidth;
+    private int lastNotifyWidth;
 
     private boolean backspacePressed;
     private boolean backspaceOnce;
@@ -84,7 +95,7 @@ public EmojiView(boolean needStickers, Context context) {
         int bgColor = themePrefs.getInt("chatEmojiViewBGColor", 0xfff5f6f7);
         int tabColor = themePrefs.getInt("chatEmojiViewTabColor", AndroidUtilities.getIntDarkerColor("themeColor", -0x15));
         int lineColor = bgColor == 0xfff5f6f7 ? 0xffe2e5e7 : AndroidUtilities.setDarkColor(bgColor, 0x10);
-        setOrientation(LinearLayout.VERTICAL);
+        //setOrientation(LinearLayout.VERTICAL);
         for (int i = 0; i < Emoji.data.length; i++) {
             GridView gridView = new GridView(context);
             if (AndroidUtilities.isTablet()) {
@@ -104,7 +115,6 @@ public EmojiView(boolean needStickers, Context context) {
 
         if (showStickers) {
             StickersQuery.checkStickers();
-            stickers = StickersQuery.getStickers();
             GridView gridView = new GridView(context);
             gridView.setColumnWidth(AndroidUtilities.dp(72));
             gridView.setNumColumns(-1);
@@ -115,33 +125,187 @@ public EmojiView(boolean needStickers, Context context) {
             gridView.setAdapter(stickersGridAdapter);
             //AndroidUtilities.setListViewEdgeEffectColor(gridView, 0xfff5f6f7);
             AndroidUtilities.setListViewEdgeEffectColor(gridView, bgColor);
+            stickersWrap = new FrameLayout(context);
+            stickersWrap.addView(gridView);
+        
+
+        TextView textView = new TextView(context);
+            textView.setText(LocaleController.getString("NoStickers", R.string.NoStickers));
+            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
+        textView.setTextColor(0xff888888);
+            stickersWrap.addView(textView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
+            gridView.setEmptyView(textView);
+
+            scrollSlidingTabStrip = new ScrollSlidingTabStrip(context) {
+
+                boolean startedScroll;
+                float lastX;
+                float lastTranslateX;
+                boolean first = true;
+
+                @Override
+                public boolean onInterceptTouchEvent(MotionEvent ev) {
+                    if (getParent() != null) {
+                        getParent().requestDisallowInterceptTouchEvent(true);
+                    }
+                    return super.onInterceptTouchEvent(ev);
+                }
+
+                @Override
+                public boolean onTouchEvent(MotionEvent ev) {
+                    if (Build.VERSION.SDK_INT >= 11) {
+                        if (first) {
+                            first = false;
+                            lastX = ev.getX();
+                        }
+                        float newTranslationX = ViewProxy.getTranslationX(scrollSlidingTabStrip);
+                        if (scrollSlidingTabStrip.getScrollX() == 0 && newTranslationX == 0) {
+                            if (!startedScroll && lastX - ev.getX() < 0) {
+                                if (pager.beginFakeDrag()) {
+                                    startedScroll = true;
+                                    lastTranslateX = ViewProxy.getTranslationX(scrollSlidingTabStrip);
+                                }
+                            } else if (startedScroll && lastX - ev.getX() > 0) {
+                                if (pager.isFakeDragging()) {
+                                    pager.endFakeDrag();
+                                    startedScroll = false;
+                                }
+                            }
+                        }
+                        if (startedScroll) {
+                            int dx = (int) (ev.getX() - lastX + newTranslationX - lastTranslateX);
+                            try {
+                                pager.fakeDragBy(dx);
+                                lastTranslateX = newTranslationX;
+                            } catch (Exception e) {
+                                try {
+                                    pager.endFakeDrag();
+                                } catch (Exception e2) {
+                                    //don't promt
+                                }
+                                startedScroll = false;
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                        lastX = ev.getX();
+                        if (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP) {
+                            first = true;
+                            if (startedScroll) {
+                                pager.endFakeDrag();
+                                startedScroll = false;
+                            }
+                        }
+                        return startedScroll || super.onTouchEvent(ev);
+                    }
+                    return super.onTouchEvent(ev);
+                }
+            };
+            scrollSlidingTabStrip.setUnderlineHeight(AndroidUtilities.dp(1));
+            //scrollSlidingTabStrip.setIndicatorColor(0xffe2e5e7);
+            //scrollSlidingTabStrip.setUnderlineColor(0xffe2e5e7);
+            scrollSlidingTabStrip.setIndicatorColor(tabColor);
+            scrollSlidingTabStrip.setUnderlineColor(lineColor);
+            addView(scrollSlidingTabStrip, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.TOP));
+            ViewProxy.setTranslationX(scrollSlidingTabStrip, AndroidUtilities.displaySize.x);
+            updateStickerTabs();
+            scrollSlidingTabStrip.setDelegate(new ScrollSlidingTabStrip.ScrollSlidingTabStripDelegate() {
+                @Override
+                public void onPageSelected(int page) {
+                    if (page == 0) {
+                        pager.setCurrentItem(0);
+                        return;
+                    } else if (page == 1 && !recentStickers.isEmpty()) {
+                        views.get(6).setSelection(0);
+                        return;
+                    }
+                    int index = page - (recentStickers.isEmpty() ? 1 : 2);
+                    if (index >= stickerSets.size()) {
+                        index = stickerSets.size() - 1;
+                    }
+                    views.get(6).setSelection(stickersGridAdapter.getPositionForPack(stickerSets.get(index)));
+                }
+            });
+
+            gridView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView view, int scrollState) {
+
+                }
+
+                @Override
+                public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    int count = view.getChildCount();
+                    for (int a = 0; a < count; a++) {
+                        View child = view.getChildAt(a);
+                        if (child.getHeight() + child.getTop() < AndroidUtilities.dp(5)) {
+                            firstVisibleItem++;
+                        } else {
+                            break;
+                        }
+                    }
+                    scrollSlidingTabStrip.onPageScrolled(stickersGridAdapter.getTabForPosition(firstVisibleItem) + 1, 0);
+                }
+            });
+
         }
 
         //setBackgroundColor(0xfff5f6f7);
         setBackgroundColor(bgColor);
 
-        pager = new ViewPager(context);
+        pager = new ViewPager(context) {
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                if (getParent() != null) {
+                    getParent().requestDisallowInterceptTouchEvent(true);
+                }
+                return super.onInterceptTouchEvent(ev);
+            }
+        };
         pager.setAdapter(new EmojiPagesAdapter());
 
-        LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
-        //linearLayout.setBackgroundColor(0xfff5f6f7);
-        linearLayout.setBackgroundColor(bgColor);
-        addView(linearLayout, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, AndroidUtilities.dp(48)));
-
-        PagerSlidingTabStrip tabs = new PagerSlidingTabStrip(context);
-        tabs.setViewPager(pager);
-        tabs.setShouldExpand(true);
-        tabs.setIndicatorHeight(AndroidUtilities.dp(2));
-        tabs.setUnderlineHeight(AndroidUtilities.dp(1));
-        //tabs.setIndicatorColor(0xff2b96e2);
-        tabs.setIndicatorColor(tabColor);
-        //tabs.setUnderlineColor(0xffe2e5e7);
-        tabs.setUnderlineColor(lineColor);
-        linearLayout.addView(tabs, new LinearLayout.LayoutParams(0, AndroidUtilities.dp(48), 1.0f));
+        pagerSlidingTabStripContainer = new LinearLayout(context) {
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                if (getParent() != null) {
+                    getParent().requestDisallowInterceptTouchEvent(true);
+                }
+                return super.onInterceptTouchEvent(ev);
+            }
+        };
+        pagerSlidingTabStripContainer.setOrientation(LinearLayout.HORIZONTAL);
+        //pagerSlidingTabStripContainer.setBackgroundColor(0xfff5f6f7);
+        pagerSlidingTabStripContainer.setBackgroundColor(bgColor);
+        addView(pagerSlidingTabStripContainer, LayoutHelper.createFrame(LayoutParams.MATCH_PARENT, 48));
+
+        PagerSlidingTabStrip pagerSlidingTabStrip = new PagerSlidingTabStrip(context);
+        pagerSlidingTabStrip.setViewPager(pager);
+        pagerSlidingTabStrip.setShouldExpand(true);
+        pagerSlidingTabStrip.setIndicatorHeight(AndroidUtilities.dp(2));
+        pagerSlidingTabStrip.setUnderlineHeight(AndroidUtilities.dp(1));
+        //pagerSlidingTabStrip.setIndicatorColor(0xff2b96e2);
+        //pagerSlidingTabStrip.setUnderlineColor(0xffe2e5e7);
+        pagerSlidingTabStrip.setIndicatorColor(tabColor);
+        pagerSlidingTabStrip.setUnderlineColor(lineColor);
+        pagerSlidingTabStripContainer.addView(pagerSlidingTabStrip, LayoutHelper.createLinear(0, 48, 1.0f));
+        pagerSlidingTabStrip.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+                EmojiView.this.onPageScrolled(position, getMeasuredWidth(), positionOffsetPixels);
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+
+            }
+        });
 
         FrameLayout frameLayout = new FrameLayout(context);
-        linearLayout.addView(frameLayout, new LinearLayout.LayoutParams(AndroidUtilities.dp(52), AndroidUtilities.dp(48)));
+        pagerSlidingTabStripContainer.addView(frameLayout, LayoutHelper.createLinear(52, 48));
 
         backspaceButton = new ImageView(context) {
             @Override
@@ -165,12 +329,12 @@ public boolean onTouchEvent(MotionEvent event) {
         backspaceButton.setImageResource(R.drawable.ic_smiles_backspace);
         backspaceButton.setBackgroundResource(R.drawable.ic_emoji_backspace);
         backspaceButton.setScaleType(ImageView.ScaleType.CENTER);
-        frameLayout.addView(backspaceButton, new FrameLayout.LayoutParams(AndroidUtilities.dp(52), AndroidUtilities.dp(48)));
+        frameLayout.addView(backspaceButton, LayoutHelper.createFrame(52, 48));
 
         View view = new View(context);
         //view.setBackgroundColor(0xffe2e5e7);
         view.setBackgroundColor(lineColor);
-        frameLayout.addView(view, new FrameLayout.LayoutParams(AndroidUtilities.dp(52), AndroidUtilities.dp(1), Gravity.LEFT | Gravity.BOTTOM));
+        frameLayout.addView(view, LayoutHelper.createFrame(52, 1, Gravity.LEFT | Gravity.BOTTOM));
 
         recentsWrap = new FrameLayout(context);
         recentsWrap.addView(views.get(0));
@@ -183,20 +347,7 @@ public boolean onTouchEvent(MotionEvent event) {
         recentsWrap.addView(textView);
         views.get(0).setEmptyView(textView);
 
-        if (views.size() > 6) {
-            emojiWrap = new FrameLayout(context);
-            emojiWrap.addView(views.get(6));
-
-            textView = new TextView(context);
-            textView.setText(LocaleController.getString("NoStickers", R.string.NoStickers));
-            textView.setTextSize(18);
-            textView.setTextColor(0xff888888);
-            textView.setGravity(Gravity.CENTER);
-            emojiWrap.addView(textView);
-            views.get(6).setEmptyView(textView);
-        }
-
-        addView(pager);
+        addView(pager, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.LEFT | Gravity.TOP, 0, 48, 0, 0));
 
         loadRecents();
 
@@ -205,6 +356,39 @@ public boolean onTouchEvent(MotionEvent event) {
         }
     }
 
+    private void onPageScrolled(int position, int width, int positionOffsetPixels) {
+        if (scrollSlidingTabStrip == null) {
+            return;
+        }
+
+        if (width == 0) {
+            width = AndroidUtilities.displaySize.x;
+        }
+
+        int margin = 0;
+        if (position == 5) {
+            margin = -positionOffsetPixels;
+        } else if (position == 6) {
+            margin = -width;
+        }
+
+        if (ViewProxy.getTranslationX(pagerSlidingTabStripContainer) != margin) {
+            ViewProxy.setTranslationX(pagerSlidingTabStripContainer, margin);
+            ViewProxy.setTranslationX(scrollSlidingTabStrip, width + margin);
+            if (Build.VERSION.SDK_INT < 11) {
+                if (margin <= -width) {
+                    pagerSlidingTabStripContainer.clearAnimation();
+                    pagerSlidingTabStripContainer.setVisibility(GONE);
+                } else {
+                    pagerSlidingTabStripContainer.setVisibility(VISIBLE);
+                }
+            }
+        } else if (Build.VERSION.SDK_INT < 11 && pagerSlidingTabStripContainer.getVisibility() == GONE) {
+            pagerSlidingTabStripContainer.clearAnimation();
+            pagerSlidingTabStripContainer.setVisibility(GONE);
+        }
+    }
+
     private void postBackspaceRunnable(final int time) {
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
@@ -284,12 +468,17 @@ private void saveRecentStickers() {
     }
 
     private void sortStickers() {
+        if (StickersQuery.getStickerSets().isEmpty()) {
+            recentStickers.clear();
+            return;
+        }
+        recentStickers.clear();
         HashMap<Long, Integer> hashMap = new HashMap<>();
-        for (TLRPC.Document document : stickers) {
-            Integer count = stickersUseHistory.get(document.id);
-            if (count != null) {
-                hashMap.put(document.id, count);
-                stickersUseHistory.remove(document.id);
+        for (HashMap.Entry<Long, Integer> entry : stickersUseHistory.entrySet()) {
+            TLRPC.Document sticker = StickersQuery.getStickerById(entry.getKey());
+            if (sticker != null) {
+                recentStickers.add(sticker);
+                hashMap.put(sticker.id, entry.getValue());
             }
         }
         if (!stickersUseHistory.isEmpty()) {
@@ -298,7 +487,7 @@ private void sortStickers() {
         } else {
             stickersUseHistory = hashMap;
         }
-        Collections.sort(stickers, new Comparator<TLRPC.Document>() {
+        Collections.sort(recentStickers, new Comparator<TLRPC.Document>() {
             @Override
             public int compare(TLRPC.Document lhs, TLRPC.Document rhs) {
                 Integer count1 = stickersUseHistory.get(lhs.id);
@@ -317,6 +506,28 @@ public int compare(TLRPC.Document lhs, TLRPC.Document rhs) {
                 return 0;
             }
         });
+        while (recentStickers.size() > 20) {
+            recentStickers.remove(recentStickers.size() - 1);
+        }
+    }
+
+    private void updateStickerTabs() {
+        scrollSlidingTabStrip.removeTabs();
+        scrollSlidingTabStrip.addIconTab(R.drawable.ic_emoji_smile);
+        if (!recentStickers.isEmpty()) {
+            scrollSlidingTabStrip.addIconTab(R.drawable.ic_smiles_recent);
+        }
+        stickerSets.clear();
+        ArrayList<TLRPC.TL_messages_stickerSet> packs = StickersQuery.getStickerSets();
+        for (int a = 0; a < packs.size(); a++) {
+            TLRPC.TL_messages_stickerSet pack = packs.get(a);
+            if ((pack.set.flags & 2) != 0 || pack.documents == null || pack.documents.isEmpty()) {
+                continue;
+            }
+            stickerSets.add(pack);
+            scrollSlidingTabStrip.addStickerTab(pack.documents.get(0));
+        }
+        scrollSlidingTabStrip.updateTabStyles();
     }
 
     public void loadRecents() {
@@ -355,14 +566,42 @@ public void loadRecents() {
                     }
                 }
                 sortStickers();
+                updateStickerTabs();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
-            }
         }
         }
+    }
 
+    @Override
     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(View.MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(heightMeasureSpec), MeasureSpec.EXACTLY));
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) pagerSlidingTabStripContainer.getLayoutParams();
+        FrameLayout.LayoutParams layoutParams1 = null;
+        layoutParams.width = View.MeasureSpec.getSize(widthMeasureSpec);
+        if (scrollSlidingTabStrip != null) {
+            layoutParams1 = (FrameLayout.LayoutParams) scrollSlidingTabStrip.getLayoutParams();
+            layoutParams1.width = layoutParams.width;
+        }
+        if (layoutParams.width != oldWidth) {
+            if (scrollSlidingTabStrip != null) {
+                onPageScrolled(pager.getCurrentItem(), layoutParams.width, 0);
+                scrollSlidingTabStrip.setLayoutParams(layoutParams1);
+            }
+            pagerSlidingTabStripContainer.setLayoutParams(layoutParams);
+            oldWidth = layoutParams.width;
+        }
+        super.onMeasure(View.MeasureSpec.makeMeasureSpec(layoutParams.width, MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(heightMeasureSpec), MeasureSpec.EXACTLY));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (lastNotifyWidth != right - left) {
+            lastNotifyWidth = right - left;
+            if (stickersGridAdapter != null) {
+                stickersGridAdapter.notifyDataSetChanged();
+            }
+        }
+        super.onLayout(changed, left, top, right, bottom);
     }
 
     public void setListener(Listener value) {
@@ -382,8 +621,16 @@ protected void onAttachedToWindow() {
         super.onAttachedToWindow();
         if (stickersGridAdapter != null) {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
-            stickers = StickersQuery.getStickers();
+        }
+    }
+
+    @Override
+    public void setVisibility(int visibility) {
+        super.setVisibility(visibility);
+        if (visibility != GONE && stickersGridAdapter != null) {
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.stickersDidLoaded);
             sortStickers();
+            updateStickerTabs();
             stickersGridAdapter.notifyDataSetChanged();
         }
     }
@@ -399,31 +646,82 @@ protected void onDetachedFromWindow() {
     @Override
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.stickersDidLoaded) {
+            updateStickerTabs();
             stickersGridAdapter.notifyDataSetChanged();
         }
     }
 
     private class StickersGridAdapter extends BaseAdapter {
 
-        Context context;
+        private Context context;
+        private int stickersPerRow;
+        private HashMap<Integer, TLRPC.TL_messages_stickerSet> rowStartPack = new HashMap<>();
+        private HashMap<TLRPC.TL_messages_stickerSet, Integer> packStartRow = new HashMap<>();
+        private HashMap<Integer, TLRPC.Document> cache = new HashMap<>();
+        private int totalItems;
 
         public StickersGridAdapter(Context context) {
             this.context = context;
         }
 
         public int getCount() {
-            return stickers.size();
+            return totalItems != 0 ? totalItems + 1 : 0;
         }
 
         public Object getItem(int i) {
-            return stickers.get(i);
+            return cache.get(i);
         }
 
         public long getItemId(int i) {
-            return stickers.get(i).id;
+            return NO_ID;
+        }
+
+        public int getPositionForPack(TLRPC.TL_messages_stickerSet stickerSet) {
+            return packStartRow.get(stickerSet) * stickersPerRow;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int position) {
+            return cache.get(position) != null;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (cache.get(position) != null) {
+                return 0;
+            }
+            return 1;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        public int getTabForPosition(int position) {
+            if (stickersPerRow == 0) {
+                int width = getMeasuredWidth();
+                if (width == 0) {
+                    width = AndroidUtilities.displaySize.x;
+                }
+                stickersPerRow = width / AndroidUtilities.dp(72);
+            }
+            int row = position / stickersPerRow;
+            TLRPC.TL_messages_stickerSet pack = rowStartPack.get(row);
+            if (pack == null) {
+                return 0;
+            }
+            return stickerSets.indexOf(pack) + (recentStickers.isEmpty() ? 0 : 1);
         }
 
         public View getView(int i, View view, ViewGroup viewGroup) {
+            TLRPC.Document sticker = cache.get(i);
+            if (sticker != null) {
             if (view == null) {
                 view = new StickerEmojiCell(context) {
                     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
@@ -439,6 +737,16 @@ public void onClick(View v) {
                             if (count == null) {
                                 count = 0;
             }
+                                if (count == 0 && stickersUseHistory.size() > 19) {
+                                    for (int a = recentStickers.size() - 1; a >= 0; a--) {
+                                        TLRPC.Document sticker = recentStickers.get(a);
+                                        stickersUseHistory.remove(sticker.id);
+                                        recentStickers.remove(a);
+                                        if (stickersUseHistory.size() <= 19) {
+                                            break;
+                                        }
+                                    }
+                                }
                             stickersUseHistory.put(document.id, ++count);
                             saveRecentStickers();
                             listener.onStickerSelected(document);
@@ -446,10 +754,65 @@ public void onClick(View v) {
                     }
                 });
             }
-            ((StickerEmojiCell) view).setSticker(stickers.get(i), false);
+                ((StickerEmojiCell) view).setSticker(sticker, false);
+            } else {
+                if (view == null) {
+                    view = new EmptyCell(context);
+                }
+                if (i == totalItems) {
+                    int row = (i - 1) / stickersPerRow;
+                    TLRPC.TL_messages_stickerSet pack = rowStartPack.get(row);
+                    if (pack == null) {
+                        ((EmptyCell) view).setHeight(1);
+                    } else {
+                        int height = pager.getHeight() - (int) Math.ceil(pack.documents.size() / (float) stickersPerRow) * AndroidUtilities.dp(82);
+                        ((EmptyCell) view).setHeight(height > 0 ? height : 1);
+                    }
+                } else {
+                    ((EmptyCell) view).setHeight(AndroidUtilities.dp(82));
+                }
+            }
             return view;
         }
 
+        @Override
+        public void notifyDataSetChanged() {
+            int width = getMeasuredWidth();
+            if (width == 0) {
+                width = AndroidUtilities.displaySize.x;
+            }
+            stickersPerRow = width / AndroidUtilities.dp(72);
+            rowStartPack.clear();
+            packStartRow.clear();
+            cache.clear();
+            totalItems = 0;
+            ArrayList<TLRPC.TL_messages_stickerSet> packs = stickerSets;
+            for (int a = -1; a < packs.size(); a++) {
+                ArrayList<TLRPC.Document> documents;
+                TLRPC.TL_messages_stickerSet pack = null;
+                int startRow = totalItems / stickersPerRow;
+                if (a == -1) {
+                    documents = recentStickers;
+                } else {
+                    pack = packs.get(a);
+                    documents = pack.documents;
+                    packStartRow.put(pack, startRow);
+                }
+                if (documents.isEmpty()) {
+                    continue;
+                }
+                int count = (int) Math.ceil(documents.size() / (float) stickersPerRow);
+                for (int b = 0; b < documents.size(); b++) {
+                    cache.put(b + totalItems, documents.get(b));
+                }
+                totalItems += count * stickersPerRow;
+                for (int b = 0; b < count; b++) {
+                    rowStartPack.put(startRow + b, pack);
+                }
+            }
+            super.notifyDataSetChanged();
+        }
+
         @Override
         public void unregisterDataSetObserver(DataSetObserver observer) {
             if (observer != null) {
@@ -511,16 +874,16 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
 
     private class EmojiPagesAdapter extends PagerAdapter implements PagerSlidingTabStrip.IconTabProvider {
 
-        public void destroyItem(ViewGroup paramViewGroup, int paramInt, Object paramObject) {
-            View localObject;
-            if (paramInt == 0) {
-                localObject = recentsWrap;
-            } else if (paramInt == 6) {
-                localObject = emojiWrap;
+        public void destroyItem(ViewGroup viewGroup, int position, Object object) {
+            View view;
+            if (position == 0) {
+                view = recentsWrap;
+            } else if (position == 6) {
+                view = stickersWrap;
             } else {
-                localObject = views.get(paramInt);
+                view = views.get(position);
             }
-            paramViewGroup.removeView(localObject);
+            viewGroup.removeView(view);
         }
 
         public int getCount() {
@@ -531,21 +894,21 @@ public int getPageIconResId(int paramInt) {
             return icons[paramInt];
         }
 
-        public Object instantiateItem(ViewGroup paramViewGroup, int paramInt) {
-            View localObject;
-            if (paramInt == 0) {
-                localObject = recentsWrap;
-            } else if (paramInt == 6) {
-                localObject = emojiWrap;
+        public Object instantiateItem(ViewGroup viewGroup, int position) {
+            View view;
+            if (position == 0) {
+                view = recentsWrap;
+            } else if (position == 6) {
+                view = stickersWrap;
             } else {
-                localObject = views.get(paramInt);
+                view = views.get(position);
             }
-            paramViewGroup.addView(localObject);
-            return localObject;
+            viewGroup.addView(view);
+            return view;
         }
 
-        public boolean isViewFromObject(View paramView, Object paramObject) {
-            return paramView == paramObject;
+        public boolean isViewFromObject(View view, Object object) {
+            return view == object;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index 639d99ef3..ced235b6a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -30,10 +30,6 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.LocaleController;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
@@ -41,6 +37,10 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.ui.Cells.PhotoEditToolCell;
 
 import java.nio.ByteBuffer;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
index e8f788ec8..fcff6ef23 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoViewerCaptionEnterView.java
@@ -8,7 +8,6 @@
 
 package org.telegram.ui.Components;
 
-import android.app.Activity;
 import android.content.Context;
 import android.text.Editable;
 import android.text.InputFilter;
@@ -17,21 +16,15 @@
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.KeyEvent;
-import android.view.MotionEvent;
 import android.view.View;
-import android.view.ViewTreeObserver;
-import android.view.WindowManager;
 import android.view.inputmethod.EditorInfo;
 import android.widget.EditText;
+import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.PopupWindow;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.NotificationCenter;
@@ -39,26 +32,21 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 
-public class PhotoViewerCaptionEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayoutPhoto.SizeNotifierRelativeLayoutPhotoDelegate {
+public class PhotoViewerCaptionEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierFrameLayoutPhoto.SizeNotifierFrameLayoutPhotoDelegate {
 
     public interface PhotoViewerCaptionEnterViewDelegate {
         void onCaptionEnter();
-        void onTextChanged(CharSequence text, boolean bigChange);
+        void onTextChanged(CharSequence text);
         void onWindowSizeChanged(int size);
     }
 
     private EditText messageEditText;
-    private PopupWindow emojiPopup;
     private ImageView emojiButton;
     private EmojiView emojiView;
-    private SizeNotifierRelativeLayoutPhoto sizeNotifierFrameLayout;
-
-    private int framesDroped;
-
-    private int keyboardTransitionState;
-    private boolean showKeyboardOnEmojiButton;
-    private ViewTreeObserver.OnPreDrawListener onPreDrawListener;
+    private SizeNotifierFrameLayoutPhoto sizeNotifierLayout;
 
     private AnimatorSetProxy runningAnimation;
     private AnimatorSetProxy runningAnimation2;
@@ -66,22 +54,23 @@
     private int runningAnimationType;
     private int audioInterfaceState;
 
+    private int lastSizeChangeValue1;
+    private boolean lastSizeChangeValue2;
+
     private int keyboardHeight;
     private int keyboardHeightLand;
     private boolean keyboardVisible;
+    private int emojiPadding;
 
-    private View window;
     private PhotoViewerCaptionEnterViewDelegate delegate;
-    private boolean wasFocus;
 
-    public PhotoViewerCaptionEnterView(Context context, View windowView, SizeNotifierRelativeLayoutPhoto parent) {
+    public PhotoViewerCaptionEnterView(Context context, SizeNotifierFrameLayoutPhoto parent) {
         super(context);
         setBackgroundColor(0x7f000000);
         setFocusable(true);
         setFocusableInTouchMode(true);
 
-        window = windowView;
-        sizeNotifierFrameLayout = parent;
+        sizeNotifierLayout = parent;
 
         LinearLayout textFieldContainer = new LinearLayout(context);
         textFieldContainer.setOrientation(LinearLayout.HORIZONTAL);
@@ -98,36 +87,20 @@ public PhotoViewerCaptionEnterView(Context context, View windowView, SizeNotifie
         emojiButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (showKeyboardOnEmojiButton) {
-                    setKeyboardTransitionState(1);
-                    showEmojiPopup(false, false);
-                    int selection = messageEditText.getSelectionStart();
-                    MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, 0, 0, 0);
-                    messageEditText.onTouchEvent(event);
-                    event.recycle();
-                    messageEditText.setSelection(selection);
+                if (!isPopupShowing()) {
+                    showPopup(1);
                 } else {
-                    boolean show = emojiPopup == null || !emojiPopup.isShowing();
-                    if (show) {
-                        setKeyboardTransitionState(5);
-                        showEmojiPopup(show, true);
-                    } else {
-                        showEmojiPopup(show, true);
-                        setKeyboardTransitionState(1);
-                    }
+                    openKeyboardInternal();
                 }
             }
         });
 
         messageEditText = new EditText(context);
         messageEditText.setHint(LocaleController.getString("AddCaption", R.string.AddCaption));
-        //messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI | EditorInfo.IME_ACTION_DONE);
-        //messageEditText.setInputType(EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES | EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
-        //Show suggestions
-        messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
-        messageEditText.setInputType(messageEditText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES | EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE);
-        messageEditText.setSingleLine(false);
+        messageEditText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI | EditorInfo.IME_ACTION_DONE);
+        messageEditText.setInputType(EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES | EditorInfo.TYPE_CLASS_TEXT);
         messageEditText.setMaxLines(4);
+        messageEditText.setHorizontallyScrolling(false);
         messageEditText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
         messageEditText.setGravity(Gravity.BOTTOM);
         messageEditText.setPadding(0, AndroidUtilities.dp(11), 0, AndroidUtilities.dp(12));
@@ -142,9 +115,9 @@ public void onClick(View view) {
         messageEditText.setOnKeyListener(new OnKeyListener() {
             @Override
             public boolean onKey(View view, int i, KeyEvent keyEvent) {
-                if (i == 4 && !keyboardVisible && emojiPopup != null && emojiPopup.isShowing()) {
+                if (i == KeyEvent.KEYCODE_BACK && !keyboardVisible && isPopupShowing()) {
                     if (keyEvent.getAction() == 1) {
-                        showEmojiPopup(false, true);
+                        showPopup(0);
                     }
                     return true;
                 } else if (i == KeyEvent.KEYCODE_ENTER && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
@@ -154,30 +127,18 @@ public boolean onKey(View view, int i, KeyEvent keyEvent) {
                 return false;
             }
         });
-        messageEditText.setOnFocusChangeListener(new OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (!wasFocus) {
-                    setKeyboardTransitionState(3);
-                }
-                wasFocus = hasFocus;
-            }
-        });
         messageEditText.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (emojiPopup != null && emojiPopup.isShowing()) {
-                    setKeyboardTransitionState(1);
-                    showEmojiPopup(false, false);
-                } else {
-                    setKeyboardTransitionState(3);
+                if (isPopupShowing()) {
+                    showPopup(AndroidUtilities.usingHardwareInput ? 0 : 2);
                 }
             }
         });
         messageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
             @Override
             public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-                if (i == EditorInfo.IME_ACTION_DONE) {
+                if (i == EditorInfo.IME_ACTION_DONE || i == EditorInfo.IME_ACTION_NEXT) {
                     delegate.onCaptionEnter();
                     return true;
                 } else if (keyEvent != null && i == EditorInfo.IME_NULL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
@@ -195,10 +156,8 @@ public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3)
 
             @Override
             public void onTextChanged(CharSequence charSequence, int start, int before, int count) {
-                String message = getTrimmedString(charSequence.toString());
-
                 if (delegate != null) {
-                    delegate.onTextChanged(charSequence, before > count || count > 2);
+                    delegate.onTextChanged(charSequence);
                 }
             }
 
@@ -219,48 +178,11 @@ public void afterTextChanged(Editable editable) {
         });
     }
 
-    private void setKeyboardTransitionState(int state) {
-        if (AndroidUtilities.usingHardwareInput) {
-            if (state == 1) {
-                showEmojiPopup(false, false);
-                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                layoutParams.bottomMargin = 0;//AndroidUtilities.dp(48);
-                setLayoutParams(layoutParams);
-                keyboardTransitionState = 0;
-            } else if (state == 2) {
-                int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                sizeNotifierFrameLayout.setPadding(0, 0, 0, currentHeight);
-                keyboardTransitionState = 0;
-            } else if (state == 3) {
-                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                layoutParams.bottomMargin = 0;//AndroidUtilities.dp(48);
-                setLayoutParams(layoutParams);
-                keyboardTransitionState = 0;
-            } else if (state == 4) {
-                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                layoutParams.bottomMargin = -AndroidUtilities.dp(400);
-                setLayoutParams(layoutParams);
-                keyboardTransitionState = 0;
-            } else if (state == 5) {
-                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                layoutParams.bottomMargin = 0;
-                setLayoutParams(layoutParams);
-                keyboardTransitionState = 0;
-            }
-        } else {
-            framesDroped = 0;
-            keyboardTransitionState = state;
-            if (state == 1) {
-                sizeNotifierFrameLayout.setPadding(0, 0, 0, 0);
-            }
+    private void onWindowSizeChanged() {
+        int size = sizeNotifierLayout.getHeight();
+        if (!keyboardVisible) {
+            size -= emojiPadding;
         }
-    }
-
-    public int getKeyboardTransitionState() {
-        return keyboardTransitionState;
-    }
-
-    private void onWindowSizeChanged(int size) {
         if (delegate != null) {
             delegate.onWindowSizeChanged(size);
         }
@@ -268,202 +190,21 @@ private void onWindowSizeChanged(int size) {
 
     public void onCreate() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.hideEmojiKeyboard);
-        sizeNotifierFrameLayout.getViewTreeObserver().addOnPreDrawListener(onPreDrawListener = new ViewTreeObserver.OnPreDrawListener() {
-            @Override
-            public boolean onPreDraw() {
-                if (keyboardTransitionState == 1) {
-                    if (keyboardVisible || framesDroped >= 60) {
-                        showEmojiPopup(false, false);
-                        keyboardTransitionState = 0;
-                    } else {
-                        if (messageEditText != null) {
-                            messageEditText.requestFocus();
-                            AndroidUtilities.showKeyboard(messageEditText);
-                        }
-                    }
-                    framesDroped++;
-                    return false;
-                } else if (keyboardTransitionState == 2) {
-                    if (!keyboardVisible || framesDroped >= 60) {
-                        int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-                        sizeNotifierFrameLayout.setPadding(0, 0, 0, currentHeight);
-                        keyboardTransitionState = 0;
-                    }
-                    framesDroped++;
-                    return false;
-                } else if (keyboardTransitionState == 3) {
-                    if (keyboardVisible) {
-                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                        layoutParams.bottomMargin = 0;//AndroidUtilities.usingHardwareInput ? AndroidUtilities.dp(48) : 0;
-                        setLayoutParams(layoutParams);
-                        keyboardTransitionState = 0;
-                    }
-                } else if (keyboardTransitionState == 4) {
-                    if (!keyboardVisible && (emojiPopup == null || !emojiPopup.isShowing())) {
-                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                        layoutParams.bottomMargin = -AndroidUtilities.dp(400);
-                        setLayoutParams(layoutParams);
-                        keyboardTransitionState = 0;
-                    }
-                } else if (keyboardTransitionState == 5) {
-                    if (emojiPopup != null && emojiPopup.isShowing()) {
-                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) getLayoutParams();
-                        layoutParams.bottomMargin = 0;
-                        setLayoutParams(layoutParams);
-                        keyboardTransitionState = 0;
-                    }
-                }
-                return true;
-            }
-        });
-        sizeNotifierFrameLayout.setDelegate(this);
+        sizeNotifierLayout.setDelegate(this);
     }
 
     public void onDestroy() {
-        if (isEmojiPopupShowing()) {
-            hideEmojiPopup();
-        }
+        hidePopup();
         if (isKeyboardVisible()) {
             closeKeyboard();
         }
         keyboardVisible = false;
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.hideEmojiKeyboard);
-        if (sizeNotifierFrameLayout != null) {
-            sizeNotifierFrameLayout.getViewTreeObserver().removeOnPreDrawListener(onPreDrawListener);
-            sizeNotifierFrameLayout.setDelegate(null);
+        if (sizeNotifierLayout != null) {
+            sizeNotifierLayout.setDelegate(null);
         }
     }
 
-    private String getTrimmedString(String src) {
-        String result = src.trim();
-        if (result.length() == 0) {
-            return result;
-        }
-        while (src.startsWith("\n")) {
-            src = src.substring(1);
-        }
-        while (src.endsWith("\n")) {
-            src = src.substring(0, src.length() - 1);
-        }
-        return src;
-    }
-
-    private void showEmojiPopup(boolean show, boolean post) {
-        if (show) {
-            if (emojiPopup == null) {
-                emojiView = new EmojiView(false, getContext());
-                emojiView.setListener(new EmojiView.Listener() {
-                    public boolean onBackspace() {
-                        if (messageEditText.length() == 0) {
-                            return false;
-                        }
-                        messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));
-                        return true;
-                    }
-
-                    public void onEmojiSelected(String symbol) {
-                        int i = messageEditText.getSelectionEnd();
-                        if (i < 0) {
-                            i = 0;
-                        }
-                        try {
-                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
-                            messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
-                            int j = i + localCharSequence.length();
-                            messageEditText.setSelection(j, j);
-                        } catch (Exception e) {
-                            FileLog.e("tmessages", e);
-                        }
-                    }
-
-                    public void onStickerSelected(TLRPC.Document sticker) {
-
-                    }
-                });
-                emojiPopup = new PopupWindow(emojiView);
-            }
-
-            if (keyboardHeight <= 0) {
-                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height", AndroidUtilities.dp(200));
-            }
-            if (keyboardHeightLand <= 0) {
-                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", AndroidUtilities.dp(200));
-            }
-            int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
-            FileLog.e("tmessages", "show emoji with height = " + currentHeight);
-            emojiPopup.setHeight(View.MeasureSpec.makeMeasureSpec(currentHeight, View.MeasureSpec.EXACTLY));
-            if (sizeNotifierFrameLayout != null) {
-                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
-            }
-
-            emojiPopup.showAtLocation(window, Gravity.BOTTOM | Gravity.LEFT, 0, 0);
-
-            if (!keyboardVisible) {
-                if (sizeNotifierFrameLayout != null) {
-                    sizeNotifierFrameLayout.setPadding(0, 0, 0, currentHeight);
-                    emojiButton.setImageResource(R.drawable.arrow_down_w);
-                    showKeyboardOnEmojiButton = false;
-                    onWindowSizeChanged(sizeNotifierFrameLayout.getHeight() - sizeNotifierFrameLayout.getPaddingBottom());
-                }
-                return;
-            } else {
-                setKeyboardTransitionState(2);
-                AndroidUtilities.hideKeyboard(messageEditText);
-            }
-            emojiButton.setImageResource(R.drawable.ic_keyboard_w);
-            showKeyboardOnEmojiButton = true;
-            return;
-        }
-        if (emojiButton != null) {
-            showKeyboardOnEmojiButton = false;
-            emojiButton.setImageResource(R.drawable.ic_smile_w);
-        }
-        if (emojiPopup != null) {
-            try {
-                emojiPopup.dismiss();
-            } catch (Exception e) {
-                //don't promt
-            }
-        }
-        if (keyboardTransitionState == 0) {
-            if (sizeNotifierFrameLayout != null) {
-                if (post) {
-                    sizeNotifierFrameLayout.post(new Runnable() {
-                        public void run() {
-                            if (sizeNotifierFrameLayout != null) {
-                                sizeNotifierFrameLayout.setPadding(0, 0, 0, 0);
-                                onWindowSizeChanged(sizeNotifierFrameLayout.getHeight());
-                            }
-                        }
-                    });
-                } else {
-                    sizeNotifierFrameLayout.setPadding(0, 0, 0, 0);
-                    onWindowSizeChanged(sizeNotifierFrameLayout.getHeight());
-                }
-            }
-        }
-    }
-
-    public void hideEmojiPopup() {
-        if (emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
-        }
-        setKeyboardTransitionState(4);
-    }
-
-    public void openKeyboard() {
-        setKeyboardTransitionState(3);
-        messageEditText.requestFocus();
-        AndroidUtilities.showKeyboard(messageEditText);
-    }
-
-    public void closeKeyboard() {
-        setKeyboardTransitionState(4);
-        AndroidUtilities.hideKeyboard(messageEditText);
-    }
-
     public void setDelegate(PhotoViewerCaptionEnterViewDelegate delegate) {
         this.delegate = delegate;
     }
@@ -475,7 +216,7 @@ public void setFieldText(CharSequence text) {
         messageEditText.setText(text);
         messageEditText.setSelection(messageEditText.getText().length());
         if (delegate != null) {
-            delegate.onTextChanged(messageEditText.getText(), true);
+            delegate.onTextChanged(messageEditText.getText());
         }
     }
 
@@ -527,27 +268,122 @@ public void run() {
         }
     }
 
-    public boolean hasText() {
-        return messageEditText != null && messageEditText.length() > 0;
+    public CharSequence getFieldCharSequence() {
+        return messageEditText.getText();
+    }
+
+    public int getEmojiPadding() {
+        return emojiPadding;
+    }
+
+    public boolean isPopupView(View view) {
+        return view == emojiView;
+    }
+
+    private void showPopup(int show) {
+        if (show == 1) {
+            if (emojiView == null) {
+                emojiView = new EmojiView(false, getContext());
+                emojiView.setListener(new EmojiView.Listener() {
+                    public boolean onBackspace() {
+                        if (messageEditText.length() == 0) {
+                            return false;
+                        }
+                        messageEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));
+                        return true;
+                    }
+
+                    public void onEmojiSelected(String symbol) {
+                        int i = messageEditText.getSelectionEnd();
+                        if (i < 0) {
+                            i = 0;
+                        }
+                        try {
+                            CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                            messageEditText.setText(messageEditText.getText().insert(i, localCharSequence));
+                            int j = i + localCharSequence.length();
+                            messageEditText.setSelection(j, j);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                    public void onStickerSelected(TLRPC.Document sticker) {
+
+                    }
+                });
+                sizeNotifierLayout.addView(emojiView);
+            }
+
+            emojiView.setVisibility(VISIBLE);
+
+            if (keyboardHeight <= 0) {
+                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height", AndroidUtilities.dp(200));
+            }
+            if (keyboardHeightLand <= 0) {
+                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", AndroidUtilities.dp(200));
+            }
+            int currentHeight = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight;
+
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emojiView.getLayoutParams();
+            layoutParams.width = AndroidUtilities.displaySize.x;
+            layoutParams.height = currentHeight;
+            emojiView.setLayoutParams(layoutParams);
+            AndroidUtilities.hideKeyboard(messageEditText);
+            if (sizeNotifierLayout != null) {
+                emojiPadding = currentHeight;
+                sizeNotifierLayout.requestLayout();
+                emojiButton.setImageResource(R.drawable.ic_keyboard_w);
+                onWindowSizeChanged();
+            }
+        } else {
+            if (emojiButton != null) {
+                emojiButton.setImageResource(R.drawable.ic_smile_w);
+            }
+            if (emojiView != null) {
+                emojiView.setVisibility(GONE);
+            }
+            if (sizeNotifierLayout != null) {
+                if (show == 0) {
+                    emojiPadding = 0;
+                }
+                sizeNotifierLayout.requestLayout();
+                onWindowSizeChanged();
+            }
+        }
     }
 
-    public String getFieldText() {
-        if (messageEditText != null && messageEditText.length() > 0) {
-            return getTrimmedString(messageEditText.getText().toString());
+    public void hidePopup() {
+        if (isPopupShowing()) {
+            showPopup(0);
         }
-        return null;
     }
 
-    public CharSequence getFieldCharSequence() {
-        return messageEditText.getText();
+    private void openKeyboardInternal() {
+        showPopup(AndroidUtilities.usingHardwareInput ? 0 : 2);
+        /*int selection = messageEditText.getSelectionStart();
+        MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, 0, 0, 0);
+        messageEditText.onTouchEvent(event);
+        event.recycle();
+        messageEditText.setSelection(selection);*/
+        AndroidUtilities.showKeyboard(messageEditText);
+    }
+
+    public void openKeyboard() {
+        messageEditText.requestFocus();
+        AndroidUtilities.showKeyboard(messageEditText);
+    }
+
+    public boolean isPopupShowing() {
+        return emojiView != null && emojiView.getVisibility() == VISIBLE;
     }
 
-    public boolean isEmojiPopupShowing() {
-        return emojiPopup != null && emojiPopup.isShowing();
+    public void closeKeyboard() {
+        AndroidUtilities.hideKeyboard(messageEditText);
     }
 
     public boolean isKeyboardVisible() {
-        return AndroidUtilities.usingHardwareInput && getLayoutParams() != null && ((RelativeLayout.LayoutParams) getLayoutParams()).bottomMargin == 0 || keyboardVisible;
+        return AndroidUtilities.usingHardwareInput && getLayoutParams() != null && ((FrameLayout.LayoutParams) getLayoutParams()).bottomMargin == 0 || keyboardVisible;
     }
 
     @Override
@@ -562,41 +398,44 @@ public void onSizeChanged(int height, boolean isWidthGreater) {
             }
         }
 
-        if (emojiPopup != null && emojiPopup.isShowing()) {
-            int newHeight = 0;
+        if (isPopupShowing()) {
+            int newHeight;
             if (isWidthGreater) {
                 newHeight = keyboardHeightLand;
             } else {
                 newHeight = keyboardHeight;
             }
-            WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams) emojiPopup.getContentView().getLayoutParams();
+
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) emojiView.getLayoutParams();
             if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
                 layoutParams.width = AndroidUtilities.displaySize.x;
                 layoutParams.height = newHeight;
-                WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
-                if (wm != null) {
-                    wm.updateViewLayout(emojiPopup.getContentView(), layoutParams);
-                    if (!keyboardVisible) {
-                        if (sizeNotifierFrameLayout != null) {
-                            sizeNotifierFrameLayout.setPadding(0, 0, 0, layoutParams.height);
-                            sizeNotifierFrameLayout.requestLayout();
-                            onWindowSizeChanged(sizeNotifierFrameLayout.getHeight() - sizeNotifierFrameLayout.getPaddingBottom());
-                        }
-                    }
+                emojiView.setLayoutParams(layoutParams);
+                if (sizeNotifierLayout != null) {
+                    emojiPadding = layoutParams.height;
+                    sizeNotifierLayout.requestLayout();
+                    onWindowSizeChanged();
                 }
             }
         }
 
+        if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
+            onWindowSizeChanged();
+            return;
+        }
+        lastSizeChangeValue1 = height;
+        lastSizeChangeValue2 = isWidthGreater;
+
         boolean oldValue = keyboardVisible;
         keyboardVisible = height > 0;
-        if (keyboardVisible && (sizeNotifierFrameLayout.getPaddingBottom() > 0 || keyboardTransitionState == 1)) {
-            setKeyboardTransitionState(1);
-        } else if (keyboardTransitionState != 2 && !keyboardVisible && keyboardVisible != oldValue && emojiPopup != null && emojiPopup.isShowing()) {
-            showEmojiPopup(false, true);
+        if (keyboardVisible && isPopupShowing()) {
+            showPopup(0);
         }
-        if (keyboardTransitionState == 0) {
-            onWindowSizeChanged(sizeNotifierFrameLayout.getHeight() - sizeNotifierFrameLayout.getPaddingBottom());
+        if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !isPopupShowing()) {
+            emojiPadding = 0;
+            sizeNotifierLayout.requestLayout();
         }
+        onWindowSizeChanged();
     }
 
     @Override
@@ -605,8 +444,6 @@ public void didReceivedNotification(int id, Object... args) {
             if (emojiView != null) {
                 emojiView.invalidateViews();
             }
-        } else if (id == NotificationCenter.hideEmojiKeyboard) {
-            hideEmojiPopup();
         }
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
index 86f9036f7..c6f7bb038 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PopupAudioView.java
@@ -20,10 +20,10 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.R;
+import org.telegram.android.MessageObject;
 import org.telegram.ui.Cells.BaseCell;
 
 import java.io.File;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
index 55a75b2f3..b356c7196 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
@@ -290,7 +290,7 @@ private void checkIfEmpty() {
             return;
         }
         boolean emptyViewVisible = getAdapter().getItemCount() == 0;
-        emptyView.setVisibility(emptyViewVisible ? VISIBLE : INVISIBLE);
+        emptyView.setVisibility(emptyViewVisible ? VISIBLE : GONE);
         setVisibility(emptyViewVisible ? INVISIBLE : VISIBLE);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
deleted file mode 100644
index 8802e8505..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Components;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.view.View;
-import android.widget.RelativeLayout;
-
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-
-public class SizeNotifierRelativeLayout extends RelativeLayout {
-
-    private Rect rect = new Rect();
-    private Drawable backgroundDrawable;
-    private int keyboardHeight;
-    private SizeNotifierRelativeLayoutDelegate delegate;
-
-    public interface SizeNotifierRelativeLayoutDelegate {
-        void onSizeChanged(int keyboardHeight, boolean isWidthGreater);
-    }
-
-    public SizeNotifierRelativeLayout(Context context) {
-        super(context);
-        setWillNotDraw(false);
-    }
-
-    public SizeNotifierRelativeLayout(android.content.Context context, android.util.AttributeSet attrs) {
-        super(context, attrs);
-        setWillNotDraw(false);
-    }
-
-    public SizeNotifierRelativeLayout(android.content.Context context, android.util.AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        setWillNotDraw(false);
-    }
-
-    public void setBackgroundImage(int resourceId) {
-        try {
-            backgroundDrawable = getResources().getDrawable(resourceId);
-        } catch (Throwable e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
-    public void setBackgroundImage(Drawable bitmap) {
-        backgroundDrawable = bitmap;
-    }
-
-    public Drawable getBackgroundImage() {
-        return backgroundDrawable;
-    }
-
-    public void setDelegate(SizeNotifierRelativeLayoutDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    @SuppressLint("DrawAllocation")
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        super.onLayout(changed, l, t, r, b);
-
-        if (delegate != null) {
-            View rootView = this.getRootView();
-            int usableViewHeight = rootView.getHeight() - AndroidUtilities.statusBarHeight - AndroidUtilities.getViewInset(rootView);
-            this.getWindowVisibleDisplayFrame(rect);
-            keyboardHeight = usableViewHeight - (rect.bottom - rect.top);
-            final boolean isWidthGreater = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y;
-            post(new Runnable() {
-                @Override
-                public void run() {
-                    if (delegate != null) {
-                        delegate.onSizeChanged(keyboardHeight, isWidthGreater);
-                    }
-                }
-            });
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (backgroundDrawable != null) {
-            if (backgroundDrawable instanceof ColorDrawable) {
-                backgroundDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                backgroundDrawable.draw(canvas);
-            } else {
-                float scaleX = (float) getMeasuredWidth() / (float) backgroundDrawable.getIntrinsicWidth();
-                float scaleY = (float) (getMeasuredHeight() + keyboardHeight) / (float) backgroundDrawable.getIntrinsicHeight();
-                float scale = scaleX < scaleY ? scaleY : scaleX;
-                int width = (int) Math.ceil(backgroundDrawable.getIntrinsicWidth() * scale);
-                int height = (int) Math.ceil(backgroundDrawable.getIntrinsicHeight() * scale);
-                int x = (getMeasuredWidth() - width) / 2;
-                int y = (getMeasuredHeight() - height + keyboardHeight) / 2;
-                backgroundDrawable.setBounds(x, y, x + width, y + height);
-                backgroundDrawable.draw(canvas);
-            }
-        } else {
-            super.onDraw(canvas);
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayoutPhoto.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayoutPhoto.java
deleted file mode 100644
index ef2d6055e..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayoutPhoto.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.graphics.Rect;
-import android.view.View;
-import android.widget.RelativeLayout;
-
-import org.telegram.android.AndroidUtilities;
-
-public class SizeNotifierRelativeLayoutPhoto extends RelativeLayout {
-
-    public interface SizeNotifierRelativeLayoutPhotoDelegate {
-        void onSizeChanged(int keyboardHeight, boolean isWidthGreater);
-    }
-
-    private Rect rect = new Rect();
-    private int keyboardHeight;
-    private SizeNotifierRelativeLayoutPhotoDelegate delegate;
-
-    public SizeNotifierRelativeLayoutPhoto(Context context) {
-        super(context);
-    }
-
-    public void setDelegate(SizeNotifierRelativeLayoutPhotoDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-    @SuppressLint("DrawAllocation")
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        super.onLayout(changed, l, t, r, b);
-
-        if (delegate != null) {
-            View rootView = this.getRootView();
-            int usableViewHeight = rootView.getHeight() - AndroidUtilities.getViewInset(rootView);
-            this.getWindowVisibleDisplayFrame(rect);
-            keyboardHeight = (rect.bottom - rect.top) - usableViewHeight;
-            final boolean isWidthGreater = AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y;
-            post(new Runnable() {
-                @Override
-                public void run() {
-                    if (delegate != null) {
-                        delegate.onSizeChanged(keyboardHeight, isWidthGreater);
-                    }
-                }
-            });
-        }
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index a2c3d00a3..5a3ba06a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -18,7 +18,9 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.text.Editable;
 import android.text.InputType;
+import android.text.TextWatcher;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -33,6 +35,7 @@
 import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
@@ -41,10 +44,12 @@
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.SecretChatHelper;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.Utilities;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -167,7 +172,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public boolean onSearchCollapse() {
+            public void onSearchCollapse() {
                     searchListViewAdapter.searchDialogs(null);
                     searching = false;
                     searchWas = false;
@@ -179,7 +184,6 @@ public boolean onSearchCollapse() {
                     listView.setFastScrollEnabled(true);
                     listView.setVerticalScrollBarEnabled(false);
                     emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
-                    return true;
                 }
 
                 @Override
@@ -420,10 +424,21 @@ private void didSelectResult(final TLRPC.User user, boolean useAlert, String par
             if (getParentActivity() == null) {
                 return;
             }
+            if ((user.flags & TLRPC.USER_FLAG_BOT) != 0 && (user.flags & TLRPC.USER_FLAG_BOT_CANT_JOIN_GROUP) != 0) {
+                try {
+                    Toast.makeText(getParentActivity(), LocaleController.getString("BotCantJoinGroups", R.string.BotCantJoinGroups), Toast.LENGTH_SHORT).show();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                return;
+            }
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
-            final EditText editText = new EditText(getParentActivity());
+            String message = LocaleController.formatStringSimple(selectAlertString, UserObject.getUserName(user));
+            EditText editText = null;
+            if ((user.flags & TLRPC.USER_FLAG_BOT) == 0) {
+                message = String.format("%s\n\n%s", message, LocaleController.getString("AddToTheGroupForwardCount", R.string.AddToTheGroupForwardCount));
+                editText = new EditText(getParentActivity());
             if (android.os.Build.VERSION.SDK_INT < 11) {
                 editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
             }
@@ -432,24 +447,64 @@ private void didSelectResult(final TLRPC.User user, boolean useAlert, String par
             editText.setGravity(Gravity.CENTER);
             editText.setInputType(InputType.TYPE_CLASS_NUMBER);
             editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+                final EditText editTextFinal = editText;
+                editText.addTextChangedListener(new TextWatcher() {
+                    @Override
+                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+                    }
+
+                    @Override
+                    public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+                    }
+
+                    @Override
+                    public void afterTextChanged(Editable s) {
+                        try {
+                            String str = s.toString();
+                            if (str.length() != 0) {
+                                int value = Utilities.parseInt(str);
+                                if (value < 0) {
+                                    editTextFinal.setText("0");
+                                    editTextFinal.setSelection(editTextFinal.length());
+                                } else if (value > 300) {
+                                    editTextFinal.setText("300");
+                                    editTextFinal.setSelection(editTextFinal.length());
+                                } else if (!str.equals("" + value)) {
+                                    editTextFinal.setText("" + value);
+                                    editTextFinal.setSelection(editTextFinal.length());
+                                }
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                });
             builder.setView(editText);
+            }
+            builder.setMessage(message);
+            final EditText finalEditText = editText;
             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                 @Override
                 public void onClick(DialogInterface dialogInterface, int i) {
-                    didSelectResult(user, false, editText.getText().toString());
+                    didSelectResult(user, false, finalEditText != null ? finalEditText.getText().toString() : "0");
                 }
             });
             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
             showDialog(builder.create());
-            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
+            if (editText != null) {
+                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) editText.getLayoutParams();
             if (layoutParams != null) {
                 if (layoutParams instanceof FrameLayout.LayoutParams) {
-                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                        ((FrameLayout.LayoutParams) layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
                 }
                 layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
                 editText.setLayoutParams(layoutParams);
             }
             editText.setSelection(editText.getText().length());
+            }
         } else {
             if (delegate != null) {
                 delegate.didSelectContact(user, param);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index bb419af7e..3058d6912 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -25,13 +25,13 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.ui.Adapters.CountryAdapter;
+import org.telegram.ui.Adapters.CountryAdapter.Country;
+import org.telegram.ui.Adapters.CountrySearchAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.CountryAdapter;
-import org.telegram.ui.Adapters.CountryAdapter.Country;
-import org.telegram.ui.Adapters.CountrySearchAdapter;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LetterSectionsListView;
 
@@ -84,7 +84,7 @@ public void onSearchExpand() {
             }
 
             @Override
-            public boolean onSearchCollapse() {
+            public void onSearchCollapse() {
                 searchListViewAdapter.search(null);
                 searching = false;
                 searchWas = false;
@@ -96,8 +96,6 @@ public boolean onSearchCollapse() {
                 listView.setVerticalScrollBarEnabled(false);
 
                 emptyTextView.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
-
-                return true;
             }
 
             @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 24512cc76..3b571d21b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -39,21 +39,21 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Adapters.ContactsAdapter;
+import org.telegram.ui.Adapters.SearchAdapter;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.ContactsAdapter;
-import org.telegram.ui.Adapters.SearchAdapter;
 import org.telegram.ui.Cells.UserCell;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.LetterSectionsListView;
@@ -508,7 +508,7 @@ private XImageSpan createAndPutChipForUser(TLRPC.User user) {
         LayoutInflater lf = (LayoutInflater) ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
         View textView = lf.inflate(R.layout.group_create_bubble, null);
         TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
-        String name = ContactsController.formatName(user.first_name, user.last_name);
+        String name = UserObject.getUserName(user);
         if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
             name = PhoneFormat.getInstance().format("+" + user.phone);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
index d882721df..b0aa4da66 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IdenticonActivity.java
@@ -22,10 +22,10 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.R;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.IdenticonDrawable;
@@ -97,12 +97,10 @@ private void fixLayout() {
         obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
             @Override
             public boolean onPreDraw() {
-                if (fragmentView != null) {
-                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
-                }
-                if (getParentActivity() == null || fragmentView == null) {
+                if (fragmentView == null) {
                     return true;
                 }
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
                 LinearLayout layout = (LinearLayout)fragmentView;
                 WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
                 int rotation = manager.getDefaultDisplay().getRotation();
@@ -114,7 +112,7 @@ public boolean onPreDraw() {
                 }
 
                 fragmentView.setPadding(fragmentView.getPaddingLeft(), 0, fragmentView.getPaddingRight(), fragmentView.getPaddingBottom());
-                return false;
+                return true;
             }
         });
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index bab33f5f2..e77659fd8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -12,6 +12,8 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
@@ -26,17 +28,17 @@
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
-import org.telegram.ui.Cells.TextSettingsCell;
 import org.telegram.ui.Components.LayoutHelper;
 
 import java.util.ArrayList;
@@ -73,14 +75,16 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+        //ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+        Drawable search = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_search);
+        ActionBarMenuItem item = menu.addItem(0, search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
             @Override
             public void onSearchExpand() {
                 searching = true;
             }
 
             @Override
-            public boolean onSearchCollapse() {
+            public void onSearchCollapse() {
                 search(null);
                 searching = false;
                 searchWas = false;
@@ -88,8 +92,6 @@ public boolean onSearchCollapse() {
                     emptyTextView.setVisibility(View.GONE);
                     listView.setAdapter(listAdapter);
                 }
-
-                return true;
             }
 
             @Override
@@ -246,6 +248,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+
+        Drawable search = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_search);
+        search.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
     }
 
     public void search(final String query) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
index 4d6ef2879..aaecedd31 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenActivity.java
@@ -141,7 +141,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        //doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+        done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+        doneButton = menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
+
         doneButton.setVisibility(View.GONE);
 
         listAdapter = new ListAdapter(context);
@@ -395,6 +400,18 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private class ListAdapter extends BaseFragmentAdapter {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
index 47398b6a2..6eee902d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
@@ -12,6 +12,8 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.view.Gravity;
@@ -232,6 +234,18 @@ public void onResume() {
         if (listViewAdapter != null) {
             listViewAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private class ListAdapter extends BaseFragmentAdapter {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 9638b9db0..e38f965d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -46,6 +46,7 @@
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.UserObject;
 import org.telegram.android.query.StickersQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
@@ -348,6 +349,8 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                         //Toast.makeText(getApplicationContext(), intent.toString(), Toast.LENGTH_SHORT).show();
                         startActivityForResult(intent, 503);
                     } catch (Exception e) {
+                        Intent in = new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=es.rafalense.themes"));
+                        startActivityForResult(in, 503);
                         FileLog.e("tmessages", e);
                     }
                     drawerLayoutContainer.closeDrawer(false);
@@ -451,6 +454,10 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             drawerLayoutContainer.setAllowOpenDrawer(allowOpen, false);
         }
 
+        /*if (BuildVars.DEBUG_VERSION) {
+            ViewServer.get(this).addWindow(this);
+        }*/
+
         handleIntent(getIntent(), false, savedInstanceState != null, false);
         needLayout();
     }
@@ -580,7 +587,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 if (name != null && !phones.isEmpty()) {
                                     contactsToSend = new ArrayList<>();
                                     for (String phone : phones) {
-                                        TLRPC.User user = new TLRPC.TL_userContact();
+                                            TLRPC.User user = new TLRPC.TL_userContact_old2();
                                         user.phone = phone;
                                         user.first_name = name;
                                         user.last_name = "";
@@ -608,9 +615,6 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                         text = subject + "\n" + text;
                                     }
                                     sendingText = text;
-                                    if (sendingText.contains("WhatsApp")) { //who needs this sent from ...?
-                                        sendingText = null;
-                                    }
                                 } else {
                                     error = true;
                                 }
@@ -652,6 +656,11 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                     documentsMimeType = type;
                                 }
                             }
+                                if (sendingText != null) {
+                                    if (sendingText.contains("WhatsApp")) { //who needs this sent from ...?
+                                        sendingText = null;
+                                    }
+                                }
                             } else if (sendingText == null) {
                             error = true;
                             }
@@ -715,6 +724,8 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                         String username = null;
                             String group = null;
                             String sticker = null;
+                            String botUser = null;
+                            String botChat = null;
                         String scheme = data.getScheme();
                         if (scheme != null) {
                             if ((scheme.equals("http") || scheme.equals("https"))) {
@@ -728,7 +739,9 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                             } else if (path.startsWith("addstickers/")) {
                                                 sticker = path.replace("addstickers/", "");
                                             } else {
-                                                username = path;
+                                                username = data.getLastPathSegment();
+                                                botUser = data.getQueryParameter("start");
+                                                botChat = data.getQueryParameter("startgroup");
                                             }
                                     }
                                 }
@@ -738,6 +751,8 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                     url = url.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org");
                                     data = Uri.parse(url);
                                     username = data.getQueryParameter("domain");
+                                        botUser = data.getQueryParameter("start");
+                                        botChat = data.getQueryParameter("startgroup");
                                     } else if (url.startsWith("tg:join") || url.startsWith("tg://join")) {
                                         url = url.replace("tg:join", "tg://telegram.org").replace("tg://join", "tg://telegram.org");
                                         data = Uri.parse(url);
@@ -750,7 +765,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
                                 }
                             }
                             if (username != null || group != null || sticker != null) {
-                                runLinkRequest(username, group, sticker, 0);
+                                runLinkRequest(username, group, sticker, botUser, botChat, 0);
                         } else {
                             try {
                                 Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
@@ -902,7 +917,7 @@ private boolean handleIntent(Intent intent, boolean isNew, boolean restore, bool
         return false;
     }
 
-    private void runLinkRequest(final String username, final String group, final String sticker, final int state) {
+    private void runLinkRequest(final String username, final String group, final String sticker, final String botUser, final String botChat, final int state) {
         final ProgressDialog progressDialog = new ProgressDialog(this);
         progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
         progressDialog.setCanceledOnTouchOutside(false);
@@ -925,16 +940,53 @@ public void run() {
                                     FileLog.e("tmessages", e);
                                 }
                                 if (error == null && actionBarLayout != null) {
-                                    TLRPC.User user = (TLRPC.User) response;
+                                    final TLRPC.User user = (TLRPC.User) response;
                                     MessagesController.getInstance().putUser(user, false);
                                     ArrayList<TLRPC.User> users = new ArrayList<>();
                                     users.add(user);
                                     MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                                    if (botChat != null) {
+                                        if ((user.flags & TLRPC.USER_FLAG_BOT) != 0 && (user.flags & TLRPC.USER_FLAG_BOT_CANT_JOIN_GROUP) != 0) {
+                                            try {
+                                                Toast.makeText(LaunchActivity.this, LocaleController.getString("BotCantJoinGroups", R.string.BotCantJoinGroups), Toast.LENGTH_SHORT).show();
+                                            } catch (Exception e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            return;
+                                        }
+                                        Bundle args = new Bundle();
+                                        args.putBoolean("onlySelect", true);
+                                        args.putInt("dialogsType", 2);
+                                        args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
+                                        MessagesActivity fragment = new MessagesActivity(args);
+                                        fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
+                                            @Override
+                                            public void didSelectDialog(MessagesActivity fragment, long did, boolean param) {
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                                MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, botChat);
+                                                Bundle args = new Bundle();
+                                                args.putBoolean("scrollToTopOnResume", true);
+                                                args.putInt("chat_id", -(int) did);
+                                                actionBarLayout.presentFragment(new ChatActivity(args), true, false, true);
+                                            }
+                                        });
+                                        presentFragment(fragment);
+                                    } else {
                                     Bundle args = new Bundle();
                                     args.putInt("user_id", user.id);
-                                    ChatActivity fragment = new ChatActivity(args);
-                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
-                                    actionBarLayout.presentFragment(fragment, false, true, true);
+                                        if (botUser != null) {
+                                            args.putString("botUser", botUser);
+                                        }
+                                        ChatActivity fragment = new ChatActivity(args);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                        actionBarLayout.presentFragment(fragment, false, true, true);
+                                    }
+                                } else {
+                                    try {
+                                        Toast.makeText(LaunchActivity.this, LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound), Toast.LENGTH_SHORT).show();
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
                                 }
                             }
                         }
@@ -976,7 +1028,7 @@ public void run() {
                                             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                                 @Override
                                                 public void onClick(DialogInterface dialogInterface, int i) {
-                                                    runLinkRequest(username, group, sticker, 1);
+                                                    runLinkRequest(username, group, sticker, botUser, botChat, 1);
                                                 }
                                             });
                                             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -1144,12 +1196,13 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                     SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, null);
                 }
             } else {
+
+                actionBarLayout.presentFragment(fragment, true);
+
                 if (sendingText != null) {
                     SendMessagesHelper.prepareSendingText(sendingText, dialog_id);
                 }
 
-                actionBarLayout.presentFragment(fragment, true);
-
                 if (photoPathsArray != null) {
                     SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id, null, null);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 4a67d3174..4f944cfe3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -24,6 +24,7 @@
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.WindowManager;
 import android.widget.AbsListView;
@@ -46,24 +47,24 @@
 import com.google.android.gms.maps.model.MarkerOptions;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
+import org.telegram.android.UserObject;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseLocationAdapter;
 import org.telegram.ui.Adapters.LocationActivityAdapter;
 import org.telegram.ui.Adapters.LocationActivitySearchAdapter;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.MapPlaceholderDrawable;
 
@@ -211,7 +212,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public boolean onSearchCollapse() {
+                public void onSearchCollapse() {
                     searching = false;
                     searchWas = false;
                     searchListView.setEmptyView(null);
@@ -220,7 +221,6 @@ public boolean onSearchCollapse() {
                     searchListView.setVisibility(View.GONE);
                     emptyTextLayout.setVisibility(View.GONE);
                     searchAdapter.searchDelayed(null, null);
-                    return true;
                 }
 
                 @Override
@@ -617,6 +617,14 @@ public void onMyLocationChange(Location location) {
 
     @Override
     public void onOpenAnimationEnd() {
+        try {
+            if (mapView.getParent() instanceof ViewGroup) {
+                ViewGroup viewGroup = (ViewGroup) mapView.getParent();
+                viewGroup.removeView(mapView);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
         if (mapViewClip != null) {
             mapViewClip.addView(mapView, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, overScrollHeight + AndroidUtilities.dp(10), Gravity.TOP | Gravity.LEFT));
             updateClipView(listView.getFirstVisiblePosition());
@@ -758,7 +766,7 @@ private void updateUserData() {
                     photo = user.photo.photo_small;
                 }
                 avatarImageView.setImage(photo, null, new AvatarDrawable(user));
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                nameTextView.setText(UserObject.getUserName(user));
             } else {
                 avatarImageView.setImageDrawable(null);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 28cd85127..fd5229129 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -50,7 +50,6 @@
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
@@ -58,6 +57,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
@@ -633,7 +633,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
             });
 
             textView = new TextView(context);
-            textView.setText(LocaleController.getString("ChangePhoneHelp", R.string.ChangePhoneHelp));
+            textView.setText(LocaleController.getString("StartText", R.string.StartText));
             textView.setTextColor(0xff757575);
             textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
             textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
@@ -2144,14 +2144,13 @@ public void run() {
                             needHideProgress();
                             if (error == null) {
                                 final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
-                                TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
                                 UserConfig.clearConfig();
                                 MessagesController.getInstance().cleanUp();
-                                UserConfig.setCurrentUser(user);
+                                UserConfig.setCurrentUser(res.user);
                                 UserConfig.saveConfig(true);
                                 MessagesStorage.getInstance().cleanUp(true);
                                 ArrayList<TLRPC.User> users = new ArrayList<>();
-                                users.add(user);
+                                users.add(res.user);
                                 MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
                                 //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
                                 MessagesController.getInstance().putUser(res.user, false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 03ad4544c..8866ae015 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -283,7 +283,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 } else if (id == forward) {
                     Bundle args = new Bundle();
                     args.putBoolean("onlySelect", true);
-                    args.putBoolean("serverOnly", true);
+                    args.putInt("dialogsType", 1);
                     MessagesActivity fragment = new MessagesActivity(args);
                     fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
                         @Override
@@ -346,14 +346,12 @@ public void onSearchExpand() {
             }
 
             @Override
-            public boolean onSearchCollapse() {
+            public void onSearchCollapse() {
                 dropDownContainer.setVisibility(View.VISIBLE);
                 documentsSearchAdapter.searchDocuments(null);
                 searching = false;
                 searchWas = false;
                 switchToCurrentSelectedMode();
-
-                return true;
             }
 
             @Override
@@ -702,7 +700,7 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
                 public boolean onPreDraw() {
                     listView.getViewTreeObserver().removeOnPreDrawListener(this);
                     fixLayoutInternal();
-                    return false;
+                    return true;
                 }
             });
         }
@@ -1246,7 +1244,10 @@ public void queryServerSearch(final String query, final int max_id) {
                 req.peer.chat_id = -uid;
             } else {
                 TLRPC.User user = MessagesController.getInstance().getUser(uid);
-                if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                if (user == null) {
+                    return;
+                }
+                if (user.access_hash != 0) {
                     req.peer = new TLRPC.TL_inputPeerForeign();
                     req.peer.access_hash = user.access_hash;
                 } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 27c17465c..b34bcb558 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -11,6 +11,7 @@
 import android.animation.ObjectAnimator;
 import android.animation.StateListAnimator;
 import android.annotation.SuppressLint;
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
@@ -46,6 +47,8 @@
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
+import org.telegram.android.NotificationsController;
+import org.telegram.android.UserObject;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
 import org.telegram.messenger.ApplicationLoader;
@@ -63,6 +66,7 @@
 import org.telegram.ui.Adapters.DialogsSearchAdapter;
 import org.telegram.ui.Cells.DialogCell;
 import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Components.AlertsCreator;
 import org.telegram.ui.Components.EmptyTextProgressView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
@@ -90,7 +94,8 @@
 
     private String selectAlertString;
     private String selectAlertStringGroup;
-    private boolean serverOnly;
+    private String addToGroupAlertString;
+    private int dialogsType;
 
     private static boolean dialogsLoaded;
     private boolean searching;
@@ -116,9 +121,10 @@ public boolean onFragmentCreate() {
 
         if (getArguments() != null) {
             onlySelect = arguments.getBoolean("onlySelect", false);
-            serverOnly = arguments.getBoolean("serverOnly", false);
+            dialogsType = arguments.getInt("dialogsType", 0);
             selectAlertString = arguments.getString("selectAlertString");
             selectAlertStringGroup = arguments.getString("selectAlertStringGroup");
+            addToGroupAlertString = arguments.getString("addToGroupAlertString");
         }
 
         if (searchString == null) {
@@ -189,8 +195,8 @@ public void onSearchExpand() {
                 if (listView != null) {
                         if (searchString != null) {
                         listView.setEmptyView(searchEmptyView);
-                        progressView.setVisibility(View.INVISIBLE);
-                        emptyView.setVisibility(View.INVISIBLE);
+                        progressView.setVisibility(View.GONE);
+                        emptyView.setVisibility(View.GONE);
                     }
                         if (!onlySelect) {
                             floatingButton.setVisibility(View.GONE);
@@ -200,20 +206,25 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public boolean onSearchCollapse() {
+            public boolean canCollapseSearch() {
                     if (searchString != null) {
                         finishFragment();
                         return false;
                     }
+                return true;
+            }
+
+            @Override
+            public void onSearchCollapse() {
                     searching = false;
                     searchWas = false;
                 if (listView != null) {
-                    searchEmptyView.setVisibility(View.INVISIBLE);
+                    searchEmptyView.setVisibility(View.GONE);
                     if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-                            emptyView.setVisibility(View.INVISIBLE);
+                        emptyView.setVisibility(View.GONE);
                         listView.setEmptyView(progressView);
                     } else {
-                        progressView.setVisibility(View.INVISIBLE);
+                        progressView.setVisibility(View.GONE);
                         listView.setEmptyView(emptyView);
                         }
                         if (!onlySelect) {
@@ -228,10 +239,9 @@ public boolean onSearchCollapse() {
                         }
                     }
                     if (dialogsSearchAdapter != null) {
-                        dialogsSearchAdapter.searchDialogs(null, false);
+                    dialogsSearchAdapter.searchDialogs(null, dialogsType);
                     }
                     updatePasscodeButton();
-                    return true;
                 }
 
                 @Override
@@ -244,14 +254,14 @@ public void onTextChanged(EditText editText) {
                             dialogsSearchAdapter.notifyDataSetChanged();
                         }
                     if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
-                        emptyView.setVisibility(View.INVISIBLE);
-                        progressView.setVisibility(View.INVISIBLE);
+                        emptyView.setVisibility(View.GONE);
+                        progressView.setVisibility(View.GONE);
                         searchEmptyView.showTextView();
                         listView.setEmptyView(searchEmptyView);
                         }
                     }
                     if (dialogsSearchAdapter != null) {
-                        dialogsSearchAdapter.searchDialogs(text, serverOnly);
+                    dialogsSearchAdapter.searchDialogs(text, dialogsType);
                     }
                 }
             });
@@ -388,7 +398,7 @@ public void onItemClick(View view, int position) {
                             }
                         }
                         if (AndroidUtilities.isTablet()) {
-                            if (openedDialogId == dialog_id) {
+                        if (openedDialogId == dialog_id && adapter != dialogsSearchAdapter) {
                                 return;
                             }
                             if (dialogsAdapter != null) {
@@ -432,17 +442,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     return;
                     }
                     TLRPC.TL_dialog dialog;
-                    if (serverOnly) {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                ArrayList<TLRPC.TL_dialog> dialogs = getDialogsArray();
+                if (position < 0 || position >= dialogs.size()) {
                         return;
                         }
-                    dialog = MessagesController.getInstance().dialogsServerOnly.get(position);
-                    } else {
-                    if (position < 0 || position >= MessagesController.getInstance().dialogs.size()) {
-                        return;
-                        }
-                    dialog = MessagesController.getInstance().dialogs.get(position);
-                    }
+                dialog = dialogs.get(position);
                     selectedDialog = dialog.id;
 
                 /*AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
@@ -457,45 +461,70 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 int high_id = (int) (selectedDialog >> 32);
 
                     final boolean isChat = lower_id < 0 && high_id != 1;
-                    builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory),
-                            isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
+
+                int rightIcon = MessagesController.getInstance().isDialogMuted(selectedDialog) ? R.drawable.mute_fixed : 0;
+
+
+                    builder.setItems(new CharSequence[]{
+
+                            LocaleController.getString("ClearHistory", R.string.ClearHistory),
+                            isChat ? LocaleController.getString("DeleteChat", R.string.DeleteChat) : LocaleController.getString("Delete", R.string.Delete),
+                            rightIcon != 0 ? LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications) : LocaleController.getString("MuteNotifications", R.string.MuteNotifications)}, new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialog, final int which) {
-                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            if (which == 0) {
-                                builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
-                            } else {
-                                if (isChat) {
-                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                            if(which == 2){
+                                boolean muted = MessagesController.getInstance().isDialogMuted(selectedDialog);
+                                if (!muted) {
+                                    showDialog(AlertsCreator.createMuteAlert(getParentActivity(), selectedDialog));
                                 } else {
-                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putInt("notify2_" + selectedDialog, 0);
+                                    MessagesStorage.getInstance().setDialogFlags(selectedDialog, 0);
+                                    editor.commit();
+                                    TLRPC.TL_dialog dialg = MessagesController.getInstance().dialogs_dict.get(selectedDialog);
+                                    if (dialg != null) {
+                                        dialg.notify_settings = new TLRPC.TL_peerNotifySettings();
+                                    }
+                                    NotificationsController.updateServerNotificationsSettings(selectedDialog);
                                 }
-                            }
-                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialogInterface, int i) {
-                                    if (which != 0) {
-                                        if (isChat) {
-                                        TLRPC.Chat currentChat = MessagesController.getInstance().getChat((int) -selectedDialog);
-                                        if (currentChat != null && currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
-                                        MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
+                            }else{
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                if (which == 0) {
+                                    builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
+                                } else {
+                                    if (isChat) {
+                                        builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                                    } else {
+                                        builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                                    }
+                                }
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        if (which != 0) {
+                                            if (isChat) {
+                                            TLRPC.Chat currentChat = MessagesController.getInstance().getChat((int) -selectedDialog);
+                                            if (currentChat != null && currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
+                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
+                                            } else {
+                                                MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                                            }
                                         } else {
-                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
-                                        }
+                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
+                                            }
+                                            if (AndroidUtilities.isTablet()) {
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                            }
                                     } else {
-                                        MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
-                                        }
-                                        if (AndroidUtilities.isTablet()) {
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                        MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
                                         }
-                                } else {
-                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
                                     }
-                                }
-                            });
-                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                        showDialog(builder.create());
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showDialog(builder.create());
+                            }
                         }
                     });
                 showDialog(builder.create());
@@ -503,14 +532,14 @@ public void onClick(DialogInterface dialogInterface, int i) {
         });
 
         searchEmptyView = new EmptyTextProgressView(context);
-        searchEmptyView.setVisibility(View.INVISIBLE);
+        searchEmptyView.setVisibility(View.GONE);
         searchEmptyView.setShowAtCenter(true);
         searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
         frameLayout.addView(searchEmptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
         emptyView = new LinearLayout(context);
         emptyView.setOrientation(LinearLayout.VERTICAL);
-        emptyView.setVisibility(View.INVISIBLE);
+        emptyView.setVisibility(View.GONE);
         emptyView.setGravity(Gravity.CENTER);
         frameLayout.addView(emptyView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         emptyView.setOnTouchListener(new View.OnTouchListener() {
@@ -541,7 +570,7 @@ public boolean onTouch(View v, MotionEvent event) {
         emptyView.addView(textView, LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT));
 
         progressView = new ProgressBar(context);
-        progressView.setVisibility(View.INVISIBLE);
+        progressView.setVisibility(View.GONE);
         frameLayout.addView(progressView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
         floatingButton = new ImageView(context);
@@ -593,7 +622,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                         return;
                     }
                     if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogs.size() && !serverOnly || layoutManager.findLastVisibleItemPosition() == MessagesController.getInstance().dialogsServerOnly.size() && serverOnly) {
+                    if (layoutManager.findLastVisibleItemPosition() == getDialogsArray().size()) {
                             MessagesController.getInstance().loadDialogs(MessagesController.getInstance().dialogs.size(), MessagesController.getInstance().dialogsServerOnly.size(), 100, true);
                         }
                     }
@@ -624,7 +653,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
             });
 
         if (searchString == null) {
-            dialogsAdapter = new DialogsAdapter(context, serverOnly);
+            dialogsAdapter = new DialogsAdapter(context, dialogsType);
             if (AndroidUtilities.isTablet() && openedDialogId != 0) {
                 dialogsAdapter.setOpenedDialogId(openedDialogId);
             }
@@ -651,12 +680,12 @@ public void searchStateChanged(boolean search) {
         });
 
         if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-            searchEmptyView.setVisibility(View.INVISIBLE);
-            emptyView.setVisibility(View.INVISIBLE);
+            searchEmptyView.setVisibility(View.GONE);
+            emptyView.setVisibility(View.GONE);
             listView.setEmptyView(progressView);
         } else {
-            searchEmptyView.setVisibility(View.INVISIBLE);
-            progressView.setVisibility(View.INVISIBLE);
+            searchEmptyView.setVisibility(View.GONE);
+            progressView.setVisibility(View.GONE);
             listView.setEmptyView(emptyView);
         }
             if (searchString != null) {
@@ -757,16 +786,16 @@ public void didReceivedNotification(int id, Object... args) {
             if (listView != null) {
                 try {
                     if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
-                        searchEmptyView.setVisibility(View.INVISIBLE);
-                        emptyView.setVisibility(View.INVISIBLE);
+                        searchEmptyView.setVisibility(View.GONE);
+                        emptyView.setVisibility(View.GONE);
                         listView.setEmptyView(progressView);
                     } else {
-                        progressView.setVisibility(View.INVISIBLE);
+                        progressView.setVisibility(View.GONE);
                         if (searching && searchWas) {
-                            emptyView.setVisibility(View.INVISIBLE);
+                            emptyView.setVisibility(View.GONE);
                             listView.setEmptyView(searchEmptyView);
                         } else {
-                            searchEmptyView.setVisibility(View.INVISIBLE);
+                            searchEmptyView.setVisibility(View.GONE);
                             listView.setEmptyView(emptyView);
                         }
                     }
@@ -787,7 +816,7 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.contactsDidLoaded) {
             updateVisibleRows(0);
         } else if (id == NotificationCenter.openedChatChanged) {
-            if (!serverOnly && AndroidUtilities.isTablet()) {
+            if (dialogsType == 0 && AndroidUtilities.isTablet()) {
                 boolean close = (Boolean) args[1];
                 long dialog_id = (Long) args[0];
                 if (close) {
@@ -811,6 +840,17 @@ public void didReceivedNotification(int id, Object... args) {
         }
     }
 
+    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+        if (dialogsType == 0) {
+            return MessagesController.getInstance().dialogs;
+        } else if (dialogsType == 1) {
+            return MessagesController.getInstance().dialogsServerOnly;
+        } else if (dialogsType == 2) {
+            return MessagesController.getInstance().dialogsGroupsOnly;
+        }
+        return null;
+    }
+
     private void updatePasscodeButton() {
         if (passcodeItem == null) {
             return;
@@ -851,19 +891,21 @@ private void updateVisibleRows(int mask) {
         for (int a = 0; a < count; a++) {
             View child = listView.getChildAt(a);
             if (child instanceof DialogCell) {
+                if (listView.getAdapter() != dialogsSearchAdapter) {
                 DialogCell cell = (DialogCell) child;
                 if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0) {
                     cell.checkCurrentDialogIndex();
-                    if (!serverOnly && AndroidUtilities.isTablet()) {
+                        if (dialogsType == 0 && AndroidUtilities.isTablet()) {
                         cell.setDialogSelected(cell.getDialogId() == openedDialogId);
                     }
                 } else if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
-                    if (!serverOnly && AndroidUtilities.isTablet()) {
+                        if (dialogsType == 0 && AndroidUtilities.isTablet()) {
                         cell.setDialogSelected(cell.getDialogId() == openedDialogId);
                     }
                 } else {
                     cell.update(mask);
                 }
+                }
             } else if (child instanceof UserCell) {
                 ((UserCell) child).update(mask);
             }
@@ -883,7 +925,7 @@ public boolean isMainDialogList() {
     }
 
     private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
-        if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
+        if (useAlert && (selectAlertString != null && selectAlertStringGroup != null || addToGroupAlertString != null)) {
             if (getParentActivity() == null) {
                 return;
             }
@@ -904,22 +946,26 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
                         if (user == null) {
                             return;
                         }
-                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, UserObject.getUserName(user)));
                     } else if (lower_part < 0) {
                         TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
                         if (chat == null) {
                             return;
                         }
+                        if (addToGroupAlertString != null) {
+                            builder.setMessage(LocaleController.formatStringSimple(addToGroupAlertString, chat.title));
+                        } else {
                         builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
                     }
                 }
+                }
             } else {
                 TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(high_id);
                 TLRPC.User user = MessagesController.getInstance().getUser(chat.user_id);
                 if (user == null) {
                     return;
                 }
-                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, UserObject.getUserName(user)));
             }
 
             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index 97fb72920..49e235adb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -14,6 +14,8 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.media.Ringtone;
 import android.media.RingtoneManager;
 import android.net.Uri;
@@ -89,6 +91,7 @@
     private int otherSectionRow;
     private int badgeNumberRow;
     private int pebbleAlertRow;
+    private int androidAutoAlertRow;
     private int repeatRow;
     private int resetSectionRow2;
     private int resetSectionRow;
@@ -141,6 +144,7 @@ public boolean onFragmentCreate() {
         otherSectionRow2 = rowCount++;
         otherSectionRow = rowCount++;
         badgeNumberRow = rowCount++;
+        androidAutoAlertRow = -1;
         pebbleAlertRow = rowCount++;
         repeatRow = rowCount++;
         resetSectionRow2 = rowCount++;
@@ -327,6 +331,12 @@ public void run() {
                     enabled = preferences.getBoolean("EnablePebbleNotifications", false);
                     editor.putBoolean("EnablePebbleNotifications", !enabled);
                     editor.commit();
+                } else if (i == androidAutoAlertRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    enabled = preferences.getBoolean("EnableAutoNotifications", false);
+                    editor.putBoolean("EnableAutoNotifications", !enabled);
+                    editor.commit();
                 } else if (i == badgeNumberRow) {
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                     SharedPreferences.Editor editor = preferences.edit();
@@ -617,6 +627,23 @@ public void didReceivedNotification(int id, Object... args) {
         }
     }
 
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     private class ListAdapter extends BaseFragmentAdapter {
         private Context mContext;
 
@@ -704,6 +731,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     checkCell.setTextAndCheck(LocaleController.getString("ContactJoined", R.string.ContactJoined), preferences.getBoolean("EnableContactJoined", true), false);
                 } else if (i == pebbleAlertRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("Pebble", R.string.Pebble), preferences.getBoolean("EnablePebbleNotifications", false), true);
+                } else if (i == androidAutoAlertRow) {
+                    checkCell.setTextAndCheck("Android Auto", preferences.getBoolean("EnableAutoNotifications", false), true);
                 } else if (i == notificationsServiceRow) {
                     checkCell.setTextAndCheck(LocaleController.getString("NotificationsService", R.string.NotificationsService), preferences.getBoolean("pushService", true), false);
                 } else if (i == badgeNumberRow) {
@@ -831,7 +860,7 @@ public int getItemViewType(int i) {
                     i == groupPreviewRow || i == inappSoundRow || i == inappVibrateRow ||
                     i == inappPreviewRow || i == contactJoinedRow || i == pebbleAlertRow ||
                     i == notificationsServiceRow || i == badgeNumberRow || i == inappPriorityRow ||
-                    i == inchatSoundRow) {
+                    i == inchatSoundRow || i == androidAutoAlertRow) {
                 return 1;
             } else if (i == messageLedRow || i == groupLedRow) {
                 return 3;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
index 06684f49c..819e17ac9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PasscodeActivity.java
@@ -13,7 +13,9 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
 import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Vibrator;
 import android.text.Editable;
@@ -140,7 +142,11 @@ public void onItemClick(int id) {
 
         if (type != 0) {
             ActionBarMenu menu = actionBar.createMenu();
-            menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            //menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+            SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+            done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+            menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
             titleTextView = new TextView(context);
             titleTextView.setTextColor(0xff757575);
@@ -421,6 +427,18 @@ public void run() {
             }, 200);
         }
         fixLayoutInternal();
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     @Override
@@ -459,7 +477,7 @@ public void onConfigurationChanged(android.content.res.Configuration newConfig)
                 public boolean onPreDraw() {
                     listView.getViewTreeObserver().removeOnPreDrawListener(this);
                     fixLayoutInternal();
-                    return false;
+                    return true;
                 }
             });
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index e508b06f1..217adb484 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -422,7 +422,7 @@ public boolean onPreDraw() {
                     if (listView != null) {
                         listView.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    return false;
+                    return true;
                 }
             });
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index e6832d33d..a9f420e8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -36,7 +36,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.volley.AuthFailureError;
@@ -51,13 +50,14 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessageObject;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Cells.PhotoPickerPhotoCell;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
@@ -184,7 +184,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public boolean onSearchCollapse() {
+                public boolean canCollapseSearch() {
                     finishFragment();
                     return false;
                 }
@@ -899,7 +899,7 @@ public boolean onPreDraw() {
                     if (listView != null) {
                         listView.getViewTreeObserver().removeOnPreDrawListener(this);
                     }
-                    return false;
+                    return true;
                 }
             });
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 31afbc0d8..2816c6257 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -42,46 +42,45 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.ListView;
-import android.widget.RelativeLayout;
 import android.widget.Scroller;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
-import org.telegram.android.AnimationCompat.AnimatorSetProxy;
-import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.ContactsController;
 import org.telegram.android.ImageLoader;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
+import org.telegram.android.UserObject;
 import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessagesController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
+import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
+import org.telegram.ui.Adapters.MentionsAdapter;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
+import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.ClippingImageView;
+import org.telegram.android.ImageReceiver;
 import org.telegram.ui.Components.GifDrawable;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PhotoCropView;
 import org.telegram.ui.Components.PhotoFilterView;
 import org.telegram.ui.Components.PhotoPickerBottomLayout;
 import org.telegram.ui.Components.PhotoViewerCaptionEnterView;
-import org.telegram.ui.Components.SizeNotifierRelativeLayoutPhoto;
+import org.telegram.ui.Components.SizeNotifierFrameLayoutPhoto;
 
 import java.io.File;
 import java.lang.ref.WeakReference;
@@ -515,36 +514,114 @@ protected void onDetachedFromWindow() {
         }
     }
 
-    private class FrameLayoutDrawer extends SizeNotifierRelativeLayoutPhoto {
+    private class FrameLayoutDrawer extends SizeNotifierFrameLayoutPhoto {
         public FrameLayoutDrawer(Context context) {
             super(context);
             setWillNotDraw(false);
         }
 
         @Override
-        protected void onDraw(Canvas canvas) {
-            getInstance().onDraw(canvas);
+        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+            int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+            setMeasuredDimension(widthSize, heightSize);
+
+            int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                View child = getChildAt(i);
+                if (child.getVisibility() == GONE) {
+                    continue;
+                }
+                if (captionEditText.isPopupView(child)) {
+                    child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, MeasureSpec.EXACTLY));
+                } else {
+                    measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
+                }
+            }
         }
 
         @Override
-        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
-            if ((child == captionEditText || child == pickerView || child == captionTextView || child == mentionListView)) {
-                int state = captionEditText.getKeyboardTransitionState();
-                if (!(state == 0 || state == 1 || state == 2)) {
-                    if (child == captionTextView) {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                if (captionTextView != null) {
-                                    captionTextView.invalidate();
-                                }
-                            }
-                        }, 50);
+        protected void onLayout(boolean changed, int l, int t, int r, int b) {
+            final int count = getChildCount();
+
+            int paddingBottom = getKeyboardHeight() <= AndroidUtilities.dp(20) ? captionEditText.getEmojiPadding() : 0;
+
+            for (int i = 0; i < count; i++) {
+                final View child = getChildAt(i);
+                if (child.getVisibility() == GONE) {
+                    continue;
+                }
+                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+
+                final int width = child.getMeasuredWidth();
+                final int height = child.getMeasuredHeight();
+
+                int childLeft;
+                int childTop;
+
+                int gravity = lp.gravity;
+                if (gravity == -1) {
+                    gravity = Gravity.TOP | Gravity.LEFT;
+                }
+
+                final int absoluteGravity = gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
+                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;
+
+                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
+                    case Gravity.CENTER_HORIZONTAL:
+                        childLeft = (r - l - width) / 2 + lp.leftMargin - lp.rightMargin;
+                        break;
+                    case Gravity.RIGHT:
+                        childLeft = r - width - lp.rightMargin;
+                        break;
+                    case Gravity.LEFT:
+                    default:
+                        childLeft = lp.leftMargin;
+                }
+
+                switch (verticalGravity) {
+                    case Gravity.TOP:
+                        childTop = lp.topMargin;
+                        break;
+                    case Gravity.CENTER_VERTICAL:
+                        childTop = ((b - paddingBottom) - t - height) / 2 + lp.topMargin - lp.bottomMargin;
+                        break;
+                    case Gravity.BOTTOM:
+                        childTop = ((b - paddingBottom) - t) - height - lp.bottomMargin;
+                        break;
+                    default:
+                        childTop = lp.topMargin;
+                }
+
+                if (child == mentionListView) {
+                    if (!captionEditText.isPopupShowing() && !captionEditText.isKeyboardVisible() && captionEditText.getEmojiPadding() == 0) {
+                        childTop += AndroidUtilities.dp(400);
+                    } else {
+                        childTop -= captionEditText.getMeasuredHeight();
                     }
-                    return false;
+                } else if (child == captionEditText) {
+                    if (!captionEditText.isPopupShowing() && !captionEditText.isKeyboardVisible() && captionEditText.getEmojiPadding() == 0) {
+                        childTop += AndroidUtilities.dp(400);
+                    }
+                } else if (child == pickerView || child == captionTextViewNew || child == captionTextViewOld) {
+                    if (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible()) {
+                        childTop += AndroidUtilities.dp(400);
+                    }
+                } else if (captionEditText.isPopupView(child)) {
+                    childTop = captionEditText.getBottom();
                 }
+                child.layout(childLeft, childTop, childLeft + width, childTop + height);
             }
-            return super.drawChild(canvas, child, drawingTime);
+
+            notifyHeightChanged();
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            getInstance().onDraw(canvas);
         }
     }
 
@@ -787,7 +864,7 @@ public void setParentActivity(final Activity activity) {
             @Override
             public boolean dispatchKeyEventPreIme(KeyEvent event) {
                 if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
-                    if (captionEditText.isEmojiPopupShowing() || captionEditText.isKeyboardVisible()) {
+                    if (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible()) {
                         closeCaptionEnter(false);
                         return false;
                     }
@@ -822,13 +899,13 @@ public boolean dispatchKeyEventPreIme(KeyEvent event) {
         actionBar.setItemsBackground(R.drawable.bar_selector_white);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
-        containerView.addView(actionBar, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
+        containerView.addView(actionBar, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT));
 
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
-                    if (needCaptionLayout && (captionEditText.isEmojiPopupShowing() || captionEditText.isKeyboardVisible())) {
+                    if (needCaptionLayout && (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible())) {
                         closeCaptionEnter(false);
                         return;
                     }
@@ -991,6 +1068,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     checkImageView.setVisibility(View.GONE);
                     captionDoneItem.setVisibility(View.VISIBLE);
                     pickerView.setVisibility(View.GONE);
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) captionEditText.getLayoutParams();
+                    layoutParams.bottomMargin = 0;
+                    captionEditText.setLayoutParams(layoutParams);
+                    layoutParams = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
+                    layoutParams.bottomMargin = 0;
+                    mentionListView.setLayoutParams(layoutParams);
                     captionTextView.clearAnimation();
                     captionTextView.setVisibility(View.INVISIBLE);
                     captionEditText.openKeyboard();
@@ -1032,7 +1115,7 @@ public boolean canOpenMenu() {
 
         bottomLayout = new FrameLayout(parentActivity);
         bottomLayout.setBackgroundColor(0x7f000000);
-        containerView.addView(bottomLayout, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 48, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(bottomLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
 
         captionTextViewOld = new TextView(parentActivity);
         captionTextViewOld.setMaxLines(10);
@@ -1043,7 +1126,7 @@ public boolean canOpenMenu() {
         captionTextViewOld.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
         captionTextViewOld.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         captionTextViewOld.setVisibility(View.INVISIBLE);
-        containerView.addView(captionTextViewOld, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 48, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(captionTextViewOld, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
 
         captionTextView = captionTextViewNew = new TextView(parentActivity);
         captionTextViewNew.setMaxLines(10);
@@ -1054,7 +1137,7 @@ public boolean canOpenMenu() {
         captionTextViewNew.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
         captionTextViewNew.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         captionTextViewNew.setVisibility(View.INVISIBLE);
-        containerView.addView(captionTextViewNew, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, 48, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(captionTextViewNew, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 48));
 
         radialProgressViews[0] = new RadialProgressView(containerView.getContext(), containerView);
         radialProgressViews[0].setBackgroundState(0, false);
@@ -1128,7 +1211,7 @@ public void onClick(View v) {
 
         pickerView = new PhotoPickerBottomLayout(parentActivity);
         pickerView.setBackgroundColor(0x7f000000);
-        containerView.addView(pickerView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 48, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(pickerView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.BOTTOM | Gravity.LEFT));
         pickerView.cancelButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -1152,7 +1235,7 @@ public void onClick(View view) {
         editorDoneLayout.setBackgroundColor(0x7f000000);
         editorDoneLayout.updateSelectedCount(0, false);
         editorDoneLayout.setVisibility(View.GONE);
-        containerView.addView(editorDoneLayout, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 48, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(editorDoneLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 48, Gravity.LEFT | Gravity.BOTTOM));
         editorDoneLayout.cancelButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -1198,7 +1281,7 @@ public void onClick(View view) {
         checkImageView.setCheckOffset(AndroidUtilities.dp(1));
         checkImageView.setColor(0xff3ccaef);
         checkImageView.setVisibility(View.GONE);
-        containerView.addView(checkImageView, LayoutHelper.createRelative(45, 45, 0, rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68, 10, 0, RelativeLayout.ALIGN_PARENT_RIGHT));
+        containerView.addView(checkImageView, LayoutHelper.createFrame(45, 45, Gravity.RIGHT | Gravity.TOP, 0, rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68, 10, 0));
         checkImageView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -1210,8 +1293,7 @@ public void onClick(View v) {
             }
         });
 
-        captionEditText = new PhotoViewerCaptionEnterView(parentActivity, windowView, containerView);
-        captionEditText.setId(1000);
+        captionEditText = new PhotoViewerCaptionEnterView(parentActivity, containerView);
         captionEditText.setDelegate(new PhotoViewerCaptionEnterView.PhotoViewerCaptionEnterViewDelegate() {
             @Override
             public void onCaptionEnter() {
@@ -1219,7 +1301,7 @@ public void onCaptionEnter() {
             }
 
             @Override
-            public void onTextChanged(CharSequence text, boolean bigChange) {
+            public void onTextChanged(CharSequence text) {
                 if (mentionsAdapter != null && captionEditText != null && parentChatActivity != null && text != null) {
                     mentionsAdapter.searchUsernameOrHashtag(text.toString(), captionEditText.getCursorPosition(), parentChatActivity.messages);
                 }
@@ -1243,7 +1325,7 @@ public void onWindowSizeChanged(int size) {
                 }
             }
         });
-        containerView.addView(captionEditText, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, -400, RelativeLayout.ALIGN_PARENT_BOTTOM));
+        containerView.addView(captionEditText, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, -400));
 
         mentionListView = new ListView(parentActivity);
         mentionListView.setBackgroundColor(0x7f000000);
@@ -1254,13 +1336,13 @@ public void onWindowSizeChanged(int size) {
         if (Build.VERSION.SDK_INT > 8) {
             mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
         }
-        containerView.addView(mentionListView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 110, 0, -110, 0, 0, RelativeLayout.ALIGN_TOP, 1000));
+        containerView.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
 
         mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(parentActivity, true, new MentionsAdapter.MentionsAdapterDelegate() {
             @Override
             public void needChangePanelVisibility(boolean show) {
                 if (show) {
-                    RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) mentionListView.getLayoutParams();
+                    FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
                     int height = 36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0);
                     layoutParams3.height = AndroidUtilities.dp(height);
                     layoutParams3.topMargin = -AndroidUtilities.dp(height);
@@ -1411,6 +1493,14 @@ private void closeCaptionEnter(boolean apply) {
         captionDoneItem.setVisibility(View.GONE);
         pickerView.setVisibility(View.VISIBLE);
 
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) captionEditText.getLayoutParams();
+        layoutParams.bottomMargin = -AndroidUtilities.dp(400);
+        captionEditText.setLayoutParams(layoutParams);
+
+        layoutParams = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
+        layoutParams.bottomMargin = -AndroidUtilities.dp(400);
+        mentionListView.setLayoutParams(layoutParams);
+
         if (lastTitle != null) {
             actionBar.setTitle(lastTitle);
             lastTitle = null;
@@ -1418,8 +1508,8 @@ private void closeCaptionEnter(boolean apply) {
 
         updateCaptionTextForCurrentPhoto(object);
         setCurrentCaption(captionEditText.getFieldCharSequence());
-        if (captionEditText.isEmojiPopupShowing()) {
-            captionEditText.hideEmojiPopup();
+        if (captionEditText.isPopupShowing()) {
+            captionEditText.hidePopup();
         } else {
             captionEditText.closeKeyboard();
         }
@@ -1619,7 +1709,7 @@ public void onAnimationEnd(Object animation) {
             if (photoCropView == null) {
                 photoCropView = new PhotoCropView(parentActivity);
                 photoCropView.setVisibility(View.GONE);
-                containerView.addView(photoCropView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, 0, 0, 0, 48));
+                containerView.addView(photoCropView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48));
                 photoCropView.setDelegate(new PhotoCropView.PhotoCropViewDelegate() {
                     @Override
                     public void needMoveImageTo(float x, float y, float s, boolean animated) {
@@ -1722,7 +1812,7 @@ public void onAnimationEnd(Object animation) {
         } else if (mode == 2) {
             if (photoFilterView == null) {
                 photoFilterView = new PhotoFilterView(parentActivity, centerImage.getBitmap(), centerImage.getOrientation());
-                containerView.addView(photoFilterView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+                containerView.addView(photoFilterView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
                 photoFilterView.getDoneTextView().setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
@@ -2236,9 +2326,6 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                 captionEditText.setVisibility(cropItem.getVisibility());
                 needCaptionLayout = captionItem.getVisibility() == View.VISIBLE;
                 if (needCaptionLayout) {
-                    RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) captionEditText.getLayoutParams();
-                    layoutParams.bottomMargin = -AndroidUtilities.dp(400);
-                    captionEditText.setLayoutParams(layoutParams);
                     captionEditText.onCreate();
                 }
             }
@@ -2288,7 +2375,7 @@ private void setImageIndex(int index, boolean init) {
             currentMessageObject = imagesArr.get(currentIndex);
             TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
             if (user != null) {
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                nameTextView.setText(UserObject.getUserName(user));
             } else {
                 nameTextView.setText("");
             }
@@ -2849,6 +2936,9 @@ public void run() {
                     if (containerView == null) {
                         return;
                     }
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
                     animationInProgress = 0;
                     transitionAnimationStartTime = 0;
                     setImages();
@@ -2892,7 +2982,9 @@ public void run() {
                     animatorSet.start();
                 }
             });
-
+            if (Build.VERSION.SDK_INT >= 18) {
+                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            }
             backgroundDrawable.drawRunnable = new Runnable() {
                 @Override
                 public void run() {
@@ -3052,6 +3144,9 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
             animationEndRunnable = new Runnable() {
                 @Override
                 public void run() {
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
                     animationInProgress = 0;
                     onPhotoClosed(object);
                 }
@@ -3078,6 +3173,9 @@ public void onAnimationCancel(Object animation) {
                 }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
+            if (Build.VERSION.SDK_INT >= 18) {
+                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            }
             animatorSet.start();
         } else {
             AnimatorSetProxy animatorSet = new AnimatorSetProxy();
@@ -3094,6 +3192,9 @@ public void run() {
                     if (containerView == null) {
                         return;
                     }
+                    if (Build.VERSION.SDK_INT >= 18) {
+                        containerView.setLayerType(View.LAYER_TYPE_NONE, null);
+                    }
                     animationInProgress = 0;
                     onPhotoClosed(object);
                     ViewProxy.setScaleX(containerView, 1.0f);
@@ -3112,6 +3213,9 @@ public void onAnimationEnd(Object animation) {
                 }
             });
             transitionAnimationStartTime = System.currentTimeMillis();
+            if (Build.VERSION.SDK_INT >= 18) {
+                containerView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            }
             animatorSet.start();
         }
     }
@@ -3285,7 +3389,7 @@ private boolean onTouchEvent(MotionEvent ev) {
             }
         }
 
-        if (captionEditText.isEmojiPopupShowing() || captionEditText.isKeyboardVisible()) {
+        if (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible()) {
             return true;
         }
 
@@ -3776,7 +3880,7 @@ private void onLayout(boolean changed, int left, int top, int right, int bottom)
                 checkImageView.post(new Runnable() {
                     @Override
                     public void run() {
-                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) checkImageView.getLayoutParams();
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) checkImageView.getLayoutParams();
                         WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
                         int rotation = manager.getDefaultDisplay().getRotation();
                         layoutParams.topMargin = AndroidUtilities.dp(rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90 ? 58 : 68);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 541402be5..f0c481eb0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -31,21 +31,22 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.NotificationsController;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
+import org.telegram.android.MessageObject;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.Components.AvatarDrawable;
@@ -55,7 +56,7 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PopupAudioView;
 import org.telegram.ui.Components.RecordStatusDrawable;
-import org.telegram.ui.Components.SizeNotifierRelativeLayout;
+import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.TypingDotsDrawable;
 
 import java.io.File;
@@ -164,38 +165,112 @@ protected void onCreate(Bundle savedInstanceState) {
         typingDotsDrawable = new TypingDotsDrawable();
         recordStatusDrawable = new RecordStatusDrawable();
 
-        SizeNotifierRelativeLayout contentView = new SizeNotifierRelativeLayout(this);
+        SizeNotifierFrameLayout contentView = new SizeNotifierFrameLayout(this) {
+            @Override
+            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+                int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+                int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+                int widthSize = MeasureSpec.getSize(widthMeasureSpec);
+                int heightSize = MeasureSpec.getSize(heightMeasureSpec);
+
+                setMeasuredDimension(widthSize, heightSize);
+
+                int keyboardSize = getKeyboardHeight();
+
+                if (keyboardSize <= AndroidUtilities.dp(20)) {
+                    heightSize -= chatActivityEnterView.getEmojiPadding();
+                }
+
+                int childCount = getChildCount();
+                for (int i = 0; i < childCount; i++) {
+                    View child = getChildAt(i);
+                    if (child.getVisibility() == GONE) {
+                        continue;
+                    }
+                    if (chatActivityEnterView.isPopupView(child)) {
+                        child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, MeasureSpec.EXACTLY));
+                    } else {
+                        child.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10), heightSize + AndroidUtilities.dp(2)), MeasureSpec.EXACTLY));
+                    }
+                }
+            }
+
+            @Override
+            protected void onLayout(boolean changed, int l, int t, int r, int b) {
+                final int count = getChildCount();
+
+                int paddingBottom = getKeyboardHeight() <= AndroidUtilities.dp(20) ? chatActivityEnterView.getEmojiPadding() : 0;
+
+                for (int i = 0; i < count; i++) {
+                    final View child = getChildAt(i);
+                    if (child.getVisibility() == GONE) {
+                        continue;
+                    }
+                    final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+
+                    int width = child.getMeasuredWidth();
+                    int height = child.getMeasuredHeight();
+
+                    int childLeft;
+                    int childTop;
+
+                    int gravity = lp.gravity;
+                    if (gravity == -1) {
+                        gravity = Gravity.TOP | Gravity.LEFT;
+                    }
+
+                    final int absoluteGravity = gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
+                    final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;
+
+                    switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
+                        case Gravity.CENTER_HORIZONTAL:
+                            childLeft = (r - l - width) / 2 + lp.leftMargin - lp.rightMargin;
+                            break;
+                        case Gravity.RIGHT:
+                            childLeft = r - width - lp.rightMargin;
+                            break;
+                        case Gravity.LEFT:
+                        default:
+                            childLeft = lp.leftMargin;
+                    }
+
+                    switch (verticalGravity) {
+                        case Gravity.TOP:
+                            childTop = lp.topMargin;
+                            break;
+                        case Gravity.CENTER_VERTICAL:
+                            childTop = ((b - paddingBottom) - t - height) / 2 + lp.topMargin - lp.bottomMargin;
+                            break;
+                        case Gravity.BOTTOM:
+                            childTop = ((b - paddingBottom) - t) - height - lp.bottomMargin;
+                            break;
+                        default:
+                            childTop = lp.topMargin;
+                    }
+                    if (chatActivityEnterView.isPopupView(child)) {
+                        childTop = paddingBottom != 0 ? getMeasuredHeight() - paddingBottom : getMeasuredHeight();
+                    }
+                    child.layout(childLeft, childTop, childLeft + width, childTop + height);
+                }
+
+                notifyHeightChanged();
+            }
+        };
         setContentView(contentView);
         contentView.setBackgroundColor(0x99000000);
 
         RelativeLayout relativeLayout = new RelativeLayout(this);
-        contentView.addView(relativeLayout);
-        RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) relativeLayout.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.MATCH_PARENT;
-        relativeLayout.setLayoutParams(layoutParams3);
+        contentView.addView(relativeLayout, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
 
         RelativeLayout popupContainer = new RelativeLayout(this);
         popupContainer.setBackgroundColor(0xffffffff);
-        relativeLayout.addView(popupContainer);
-        layoutParams3 = (RelativeLayout.LayoutParams) popupContainer.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = AndroidUtilities.dp(240);
-        layoutParams3.leftMargin = AndroidUtilities.dp(12);
-        layoutParams3.rightMargin = AndroidUtilities.dp(12);
-        layoutParams3.addRule(RelativeLayout.CENTER_IN_PARENT);
-        popupContainer.setLayoutParams(layoutParams3);
+        relativeLayout.addView(popupContainer, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, 240, 12, 0, 12, 0, RelativeLayout.CENTER_IN_PARENT));
 
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onDestroy();
         }
         chatActivityEnterView = new ChatActivityEnterView(this, contentView, null, false);
-        popupContainer.addView(chatActivityEnterView);
-        layoutParams3 = (RelativeLayout.LayoutParams) chatActivityEnterView.getLayoutParams();
-        layoutParams3.width = LayoutHelper.MATCH_PARENT;
-        layoutParams3.height = LayoutHelper.WRAP_CONTENT;
-        layoutParams3.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
-        chatActivityEnterView.setLayoutParams(layoutParams3);
+        popupContainer.addView(chatActivityEnterView, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, RelativeLayout.ALIGN_PARENT_BOTTOM));
         chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
             @Override
             public void onMessageSend(String message) {
@@ -750,7 +825,7 @@ public boolean onPreDraw() {
                     }
                     int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
                     avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
-                    return false;
+                    return true;
                 }
             });
         }
@@ -768,7 +843,7 @@ public boolean onPreDraw() {
                         messageContainer.setLayoutParams(layoutParams);
                         applyViewsLayoutParams(0);
                     }
-                    return false;
+                    return true;
                 }
             });
         }
@@ -873,11 +948,11 @@ private void updateInterfaceForCurrentMessage(int move) {
 
         if (currentChat != null && currentUser != null) {
             nameTextView.setText(currentChat.title);
-            onlineTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            onlineTextView.setText(UserObject.getUserName(currentUser));
             nameTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
             nameTextView.setCompoundDrawablePadding(0);
         } else if (currentUser != null) {
-            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            nameTextView.setText(UserObject.getUserName(currentUser));
             if ((int)dialog_id == 0) {
                 nameTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_lock_white, 0, 0, 0);
                 nameTextView.setCompoundDrawablePadding(AndroidUtilities.dp(4));
@@ -904,10 +979,10 @@ private void updateSubtitle() {
             if (currentUser.phone != null && currentUser.phone.length() != 0) {
                 nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
             } else {
-                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                nameTextView.setText(UserObject.getUserName(currentUser));
             }
         } else {
-            nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            nameTextView.setText(UserObject.getUserName(currentUser));
         }
         CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
         if (printString == null || printString.length() == 0) {
@@ -985,8 +1060,8 @@ private void setTypingAnimation(boolean start) {
 
     @Override
     public void onBackPressed() {
-        if (chatActivityEnterView.isEmojiPopupShowing()) {
-            chatActivityEnterView.hideEmojiPopup();
+        if (chatActivityEnterView.isPopupShowing()) {
+            chatActivityEnterView.hidePopup();
             return;
         }
         super.onBackPressed();
@@ -1009,7 +1084,7 @@ protected void onPause() {
         super.onPause();
         overridePendingTransition(0, 0);
         if (chatActivityEnterView != null) {
-            chatActivityEnterView.hideEmojiPopup();
+            chatActivityEnterView.hidePopup();
             chatActivityEnterView.setFieldFocused(false);
         }
         ConnectionsManager.getInstance().setAppPaused(true, false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
index db3938883..a02004cbc 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PrivacySettingsActivity.java
@@ -14,6 +14,8 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -278,6 +280,18 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private class ListAdapter extends BaseFragmentAdapter {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 26cfae905..cfae2e802 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -18,6 +18,7 @@
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Outline;
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
@@ -32,6 +33,8 @@
 import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.ViewTreeObserver;
+import android.view.animation.AccelerateInterpolator;
+import android.view.animation.DecelerateInterpolator;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
@@ -41,6 +44,9 @@
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.AnimationCompat.ViewProxy;
 import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
@@ -50,6 +56,8 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.SecretChatHelper;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.UserObject;
+import org.telegram.android.query.BotQuery;
 import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
@@ -90,7 +98,7 @@
     private TextView nameTextView;
     private TextView onlineTextView;
     private ImageView writeButton;
-
+    private AnimatorSetProxy writeButtonAnimation;
     private int user_id;
     private int chat_id;
     private long dialog_id;
@@ -105,6 +113,7 @@
 
     private TLRPC.EncryptedChat currentEncryptedChat;
     private TLRPC.Chat currentChat;
+    private TLRPC.BotInfo botInfo;
 
     private int totalMediaCount = -1;
 
@@ -116,6 +125,8 @@
     private final static int add_member = 6;
     private final static int leave_group = 7;
     private final static int edit_name = 8;
+    private final static int invite_to_group = 9;
+    private final static int share = 10;
 
     private int overscrollRow;
     private int emptyRow;
@@ -129,6 +140,8 @@
     private int sharedMediaRow;
     private int startSecretChatRow;
     private int sectionRow;
+    private int botSectionRow;
+    private int botInfoRow;
     private int membersSectionRow;
     private int membersEndRow;
     private int addMemberRow;
@@ -147,7 +160,8 @@ public boolean onFragmentCreate() {
             if (dialog_id != 0) {
                 currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int) (dialog_id >> 32));
             }
-            if (MessagesController.getInstance().getUser(user_id) == null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user == null) {
                 return false;
             }
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
@@ -155,8 +169,11 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.botInfoDidLoaded);
             userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
-
+            if ((user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                BotQuery.loadBotInfo(user.id, true, classGuid);
+            }
             MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
         } else if (chat_id != 0) {
             currentChat = MessagesController.getInstance().getChat(chat_id);
@@ -222,6 +239,7 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.botInfoDidLoaded);
             MessagesController.getInstance().cancelLoadFullUser(user_id);
         } else if (chat_id != 0) {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
@@ -278,7 +296,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     } else if (id == share_contact) {
                         Bundle args = new Bundle();
                         args.putBoolean("onlySelect", true);
-                        args.putBoolean("serverOnly", true);
+                    args.putInt("dialogsType", 1);
                         MessagesActivity fragment = new MessagesActivity(args);
                         fragment.setDelegate(ProfileActivity.this);
                         presentFragment(fragment);
@@ -322,6 +340,47 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         Bundle args = new Bundle();
                         args.putInt("chat_id", chat_id);
                         presentFragment(new ChangeChatNameActivity(args));
+                } else if (id == invite_to_group) {
+                    final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                    if (user == null) {
+                        return;
+                    }
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlySelect", true);
+                    args.putInt("dialogsType", 2);
+                    args.putString("addToGroupAlertString", LocaleController.formatString("AddToTheGroupTitle", R.string.AddToTheGroupTitle, UserObject.getUserName(user), "%1$s"));
+                    MessagesActivity fragment = new MessagesActivity(args);
+                    fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
+                        @Override
+                        public void didSelectDialog(MessagesActivity fragment, long did, boolean param) {
+                            NotificationCenter.getInstance().removeObserver(ProfileActivity.this, NotificationCenter.closeChats);
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            MessagesController.getInstance().addUserToChat(-(int) did, user, null, 0, null);
+                            Bundle args = new Bundle();
+                            args.putBoolean("scrollToTopOnResume", true);
+                            args.putInt("chat_id", -(int) did);
+                            presentFragment(new ChatActivity(args), true);
+                            removeSelfFromStack();
+                        }
+                    });
+                    presentFragment(fragment);
+                } else if (id == share) {
+                    try {
+                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        if (user == null) {
+                            return;
+                        }
+                        Intent intent = new Intent(Intent.ACTION_SEND);
+                        intent.setType("text/plain");
+                        if (botInfo != null && botInfo.share_text != null && botInfo.share_text.length() > 0) {
+                            intent.putExtra(Intent.EXTRA_TEXT, String.format("%s https://telegram.me/%s", botInfo.share_text, user.username));
+                        } else {
+                            intent.putExtra(Intent.EXTRA_TEXT, String.format("https://telegram.me/%s", user.username));
+                        }
+                        startActivityForResult(Intent.createChooser(intent, LocaleController.getString("BotShare", R.string.BotShare)), 500);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
                     }
                 }
             });
@@ -330,7 +389,34 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
         listAdapter = new ListAdapter(context);
 
-        fragmentView = new FrameLayout(context);
+        fragmentView = new FrameLayout(context) {
+            @Override
+            protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+                if (child == listView) {
+                    boolean result = super.drawChild(canvas, child, drawingTime);
+                    if (parentLayout != null) {
+                        int actionBarHeight = 0;
+                        int childCount = getChildCount();
+                        for (int a = 0; a < childCount; a++) {
+                            View view = getChildAt(a);
+                            if (view == child) {
+                                continue;
+                            }
+                            if (view instanceof ActionBar && view.getVisibility() == VISIBLE) {
+                                if (((ActionBar) view).getCastShadows()) {
+                                    actionBarHeight = view.getMeasuredHeight();
+                                }
+                                break;
+                            }
+                        }
+                        parentLayout.drawHeaderShadow(canvas, actionBarHeight);
+                    }
+                    return result;
+                } else {
+                    return super.drawChild(canvas, child, drawingTime);
+                }
+            }
+        };
             FrameLayout frameLayout = (FrameLayout) fragmentView;
 
         avatarImage = new BackupImageView(context);
@@ -479,6 +565,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                         FileLog.e("tmessages", e);
                                     }
                                 } else if (i == 1) {
+                                try {
                                 if (Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
                                         android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                         clipboard.setText("+" + user.phone);
@@ -487,6 +574,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                         android.content.ClipData clip = android.content.ClipData.newPlainText("label", "+" + user.phone);
                                         clipboard.setPrimaryClip(clip);
                                     }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
                                 }
                             }
                         });
@@ -680,18 +770,18 @@ private void openAddMember() {
         args.putBoolean("onlyUsers", true);
         args.putBoolean("destroyAfterSelect", true);
         args.putBoolean("returnAsResult", true);
+        //args.putBoolean("allowUsernameSearch", false);
+        if (chat_id > 0) {
         if (info != null && info.admin_id == UserConfig.getClientUserId()) {
             args.putInt("chat_id", currentChat.id);
         }
-        //args.putBoolean("allowUsernameSearch", false);
-        if (chat_id > 0) {
             args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
         }
         ContactsActivity fragment = new ContactsActivity(args);
         fragment.setDelegate(new ContactsActivity.ContactsActivityDelegate() {
             @Override
             public void didSelectContact(TLRPC.User user, String param) {
-                MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
+                MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0, null);
             }
         });
         if (info != null) {
@@ -746,10 +836,53 @@ private void needLayout() {
                 layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
                 layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
                 writeButton.setLayoutParams(layoutParams);
-                ViewProxy.setAlpha(writeButton, diff);
+                /*ViewProxy.setAlpha(writeButton, diff);
                 writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
                 if (writeButton.getVisibility() == View.GONE) {
                     writeButton.clearAnimation();
+                }*/
+                final boolean setVisible = diff > 0.2f;
+                boolean currentVisible = writeButton.getTag() == null;
+                if (setVisible != currentVisible) {
+                    if (setVisible) {
+                        writeButton.setTag(null);
+                        writeButton.setVisibility(View.VISIBLE);
+                    } else {
+                        writeButton.setTag(0);
+                    }
+                    if (writeButtonAnimation != null) {
+                        AnimatorSetProxy old = writeButtonAnimation;
+                        writeButtonAnimation = null;
+                        old.cancel();
+                    }
+                    writeButtonAnimation = new AnimatorSetProxy();
+                    if (setVisible) {
+                        writeButtonAnimation.setInterpolator(new DecelerateInterpolator());
+                        writeButtonAnimation.playTogether(
+                                ObjectAnimatorProxy.ofFloat(writeButton, "scaleX", 1.0f),
+                                ObjectAnimatorProxy.ofFloat(writeButton, "scaleY", 1.0f),
+                                ObjectAnimatorProxy.ofFloat(writeButton, "alpha", 1.0f)
+                        );
+                    } else {
+                        writeButtonAnimation.setInterpolator(new AccelerateInterpolator());
+                        writeButtonAnimation.playTogether(
+                                ObjectAnimatorProxy.ofFloat(writeButton, "scaleX", 0.2f),
+                                ObjectAnimatorProxy.ofFloat(writeButton, "scaleY", 0.2f),
+                                ObjectAnimatorProxy.ofFloat(writeButton, "alpha", 0.0f)
+                        );
+                    }
+                    writeButtonAnimation.setDuration(150);
+                    writeButtonAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                        @Override
+                        public void onAnimationEnd(Object animation) {
+                            if (writeButtonAnimation != null && writeButtonAnimation.equals(animation)) {
+                                writeButton.clearAnimation();
+                                writeButton.setVisibility(setVisible ? View.VISIBLE : View.GONE);
+                                writeButtonAnimation = null;
+                            }
+                        }
+                    });
+                    writeButtonAnimation.start();
                 }
             }
 
@@ -794,7 +927,7 @@ public boolean onPreDraw() {
                     needLayout();
                     fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
                 }
-                return false;
+                return true;
             }
         });
     }
@@ -903,6 +1036,12 @@ public void run() {
             }
         } else if (id == NotificationCenter.closeChats) {
             removeSelfFromStack();
+        } else if (id == NotificationCenter.botInfoDidLoaded) {
+            TLRPC.BotInfo info = (TLRPC.BotInfo) args[0];
+            if (info.user_id == user_id) {
+                botInfo = info;
+                updateRowsIds();
+            }
         }
     }
 
@@ -1080,14 +1219,22 @@ private void updateRowsIds() {
         rowCount = 0;
         overscrollRow = rowCount++;
         if (user_id != 0) {
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
             emptyRow = rowCount++;
+            if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                phoneRow = -1;
+            } else {
             phoneRow = rowCount++;
-            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            }
             if (user != null && user.username != null && user.username.length() > 0) {
                 usernameRow = rowCount++;
             } else {
                 usernameRow = -1;
             }
+            if (botInfo != null && botInfo.share_text != null && botInfo.share_text.length() > 0) {
+                botSectionRow = rowCount++;
+                botInfoRow = rowCount++;
+            }
             sectionRow = rowCount++;
             settingsNotificationsRow = rowCount++;
             sharedMediaRow = rowCount++;
@@ -1098,7 +1245,7 @@ private void updateRowsIds() {
                 settingsTimerRow = -1;
                 settingsKeyRow = -1;
             }
-            if (currentEncryptedChat == null) {
+            if (user != null && (user.flags & TLRPC.USER_FLAG_BOT) == 0 && currentEncryptedChat == null) {
                 startSecretChatRow = rowCount++;
             } else {
                 startSecretChatRow = -1;
@@ -1148,12 +1295,12 @@ private void updateProfileData() {
             avatarDrawable.setRadius(radius);
             avatarImage.setImage(photo, "50_50", avatarDrawable);
 
-            if (user instanceof TLRPC.TL_userDeleted) {
-                nameTextView.setText(LocaleController.getString("HiddenName", R.string.HiddenName));
+            nameTextView.setText(UserObject.getUserName(user));
+            if ((user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                onlineTextView.setText(LocaleController.getString("Bot", R.string.Bot));
             } else {
-                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
-            }
             onlineTextView.setText(LocaleController.formatUserStatus(user));
+            }
 
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
         } else if (chat_id != 0) {
@@ -1218,6 +1365,12 @@ private void createActionBarMenu() {
                     return;
                 }
                 ActionBarMenuItem item = menu.addItem(0, dots);
+                if ((user.flags & TLRPC.USER_FLAG_BOT) != 0) {
+                    if ((user.flags & TLRPC.USER_FLAG_BOT_CANT_JOIN_GROUP) == 0) {
+                        item.addSubItem(invite_to_group, LocaleController.getString("BotInvite", R.string.BotInvite), 0);
+                    }
+                    item.addSubItem(share, LocaleController.getString("BotShare", R.string.BotShare), 0);
+                }
                 if (user.phone != null && user.phone.length() != 0) {
                     item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
                     item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
@@ -1384,6 +1537,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     } else {
                         value = String.format("%d", totalMediaCount);
                     }
+                    textCell.setMultiline(false);
                     textCell.setTextAndValue(LocaleController.getString("SharedMedia", R.string.SharedMedia), value);
                     textCell.setValueColor(themePrefs.getInt("profileTitleColor", def));
                 } else if (i == settingsTimerRow) {
@@ -1394,13 +1548,16 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     } else {
                         value = AndroidUtilities.formatTTLString(encryptedChat.ttl);
                     }
+                    textCell.setMultiline(false);
                     textCell.setTextAndValue(LocaleController.getString("MessageLifetime", R.string.MessageLifetime), value);
                 } else if (i == settingsNotificationsRow) {
+                    textCell.setMultiline(false);
                     //textCell.setTextAndIcon(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), R.drawable.profile_list);
                     Drawable pf = mContext.getResources().getDrawable(R.drawable.profile_list);
                     pf.setColorFilter(dColor, PorterDuff.Mode.SRC_IN);
                     textCell.setTextAndIcon(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds), pf);
                 } else if (i == startSecretChatRow) {
+                    textCell.setMultiline(false);
                     textCell.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
                     //textCell.setTextColor(0xff37a919);
                     textCell.setTextColor(themePrefs.getInt("profileTitleColor", AndroidUtilities.getIntDarkerColor("themeColor", 0x15)));
@@ -1408,7 +1565,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     IdenticonDrawable identiconDrawable = new IdenticonDrawable();
                     TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
                     identiconDrawable.setEncryptedChat(encryptedChat);
+                    textCell.setMultiline(false);
                     textCell.setTextAndValueDrawable(LocaleController.getString("EncryptionKey", R.string.EncryptionKey), identiconDrawable);
+                } else if (i == botInfoRow) {
+                    textCell.setMultiline(true);
+                    textCell.setTextAndIcon(botInfo.share_text, R.drawable.bot_info);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -1416,7 +1577,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 }
 
                 TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - emptyRowChat2 - 1));
-                ((UserCell) view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
+                ((UserCell)view).setData(MessagesController.getInstance().getUser(part.user_id), null, null, i == emptyRowChat2 + 1 ? R.drawable.menu_newgroup : 0);
                 ((UserCell)view).setNameColor(tColor);
                 ((UserCell) view).setStatusColors(themePrefs.getInt("profileSummaryColor", 0xff8a8a8a), AndroidUtilities.getIntDarkerColor("themeColor", -0x40));
                 //((UserCell) view).setAvatarRadius(AndroidUtilities.dp(themePrefs.getInt("profileAvatarRadius", 32)));
@@ -1435,6 +1596,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             } else if (type == 6) {
                 if (view == null) {
                     view = new AddMemberCell(mContext);
+                    if (chat_id > 0) {
+                        ((AddMemberCell) view).setText(LocaleController.getString("AddMember", R.string.AddMember));
+                    } else {
+                        ((AddMemberCell) view).setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
+                    }
                 }
                 ((AddMemberCell) view).setTextColor(tColor);
                 ((AddMemberCell) view).setDrawableColor(dColor);
@@ -1447,11 +1613,11 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         public int getItemViewType(int i) {
             if (i == emptyRow || i == overscrollRow || i == emptyRowChat || i == emptyRowChat2) {
                 return 0;
-            } else if (i == sectionRow) {
+            } else if (i == sectionRow || i == botSectionRow) {
                 return 1;
             } else if (i == phoneRow || i == usernameRow) {
                 return 2;
-            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == startSecretChatRow || i == settingsKeyRow) {
+            } else if (i == sharedMediaRow || i == settingsTimerRow || i == settingsNotificationsRow || i == startSecretChatRow || i == settingsKeyRow || i == botInfoRow) {
                 return 3;
             } else if (i > emptyRowChat2 && i < membersEndRow) {
                 return 4;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index de41dc5ec..6a6f0b7da 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -115,6 +115,8 @@ public void onItemClick(int id) {
         FrameLayout frameLayout = (FrameLayout) fragmentView;
 
         listView = new ListView(context);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        listView.setBackgroundColor(preferences.getInt("prefBGColor", 0xffffffff));
         listView.setDivider(null);
         listView.setDividerHeight(0);
         listView.setVerticalScrollBarEnabled(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
index b4f52cf2e..a205a3b8d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java
@@ -296,6 +296,18 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index dfa41997c..a6464c4d6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -21,6 +21,7 @@
 import android.content.pm.PackageInfo;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Outline;
 import android.graphics.PorterDuff;
 import android.graphics.drawable.Drawable;
@@ -40,6 +41,8 @@
 import android.view.ViewGroup;
 import android.view.ViewOutlineProvider;
 import android.view.ViewTreeObserver;
+import android.view.animation.AccelerateInterpolator;
+import android.view.animation.DecelerateInterpolator;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.FrameLayout;
@@ -50,14 +53,17 @@
 
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
+import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
+import org.telegram.android.AnimationCompat.AnimatorSetProxy;
+import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationCenter;
+import org.telegram.android.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildConfig;
 import org.telegram.messenger.BuildVars;
@@ -101,6 +107,7 @@
     private TextView nameTextView;
     private TextView onlineTextView;
     private ImageView writeButton;
+    private AnimatorSetProxy writeButtonAnimation;
     private AvatarUpdater avatarUpdater = new AvatarUpdater();
 
     private int overscrollRow;
@@ -140,6 +147,7 @@
     private int rowCount;
     private int disableMessageClickRow;
     private int showAndroidEmojiRow;
+    private int useDeviceFontRow;
     private int keepOriginalFilenameRow;
     private int keepOriginalFilenameDetailRow;
     private int emojiPopupSize;
@@ -241,6 +249,7 @@ public void run() {
         } else {
             showAndroidEmojiRow = -1;
         }
+        useDeviceFontRow = rowCount++;
         mediaDownloadSection = rowCount++;
         mediaDownloadSection2 = rowCount++;
         mobileDownloadRow = rowCount++;
@@ -249,7 +258,10 @@ public void run() {
         saveToGalleryRow = rowCount++;
         keepOriginalFilenameRow = rowCount++;
         keepOriginalFilenameDetailRow = rowCount++;
-        messagesSectionRow = -1;
+                messagesSectionRow = rowCount++;
+
+
+
         messagesSectionRow2 = rowCount++;
         textSizeRow = rowCount++;
         stickersRow = rowCount++;
@@ -297,6 +309,10 @@ public View createView(Context context, LayoutInflater inflater) {
             actionBar.setBackgroundColor(AvatarDrawable.getProfileBackColorForId(5));
             actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+            //Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+            //SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+            //back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+            //actionBar.setBackButtonDrawable(back);
             actionBar.setExtraHeight(AndroidUtilities.dp(88), false);
             if (AndroidUtilities.isTablet()) {
                 actionBar.setOccupyStatusBar(false);
@@ -327,13 +343,44 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 }
             });
             ActionBarMenu menu = actionBar.createMenu();
-            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            //ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+
+            Drawable other = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_other);
+            ActionBarMenuItem item = menu.addItem(0, other);
+
             item.addSubItem(edit_name, LocaleController.getString("EditName", R.string.EditName), 0);
             item.addSubItem(logout, LocaleController.getString("LogOut", R.string.LogOut), 0);
 
         listAdapter = new ListAdapter(context);
 
-        fragmentView = new FrameLayout(context);
+        fragmentView = new FrameLayout(context) {
+            @Override
+            protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
+                if (child == listView) {
+                    boolean result = super.drawChild(canvas, child, drawingTime);
+                    if (parentLayout != null) {
+                        int actionBarHeight = 0;
+                        int childCount = getChildCount();
+                        for (int a = 0; a < childCount; a++) {
+                            View view = getChildAt(a);
+                            if (view == child) {
+                                continue;
+                            }
+                            if (view instanceof ActionBar && view.getVisibility() == VISIBLE) {
+                                if (((ActionBar) view).getCastShadows()) {
+                                    actionBarHeight = view.getMeasuredHeight();
+                                }
+                                break;
+                            }
+                        }
+                        parentLayout.drawHeaderShadow(canvas, actionBarHeight);
+                    }
+                    return result;
+                } else {
+                    return super.drawChild(canvas, child, drawingTime);
+                }
+            }
+        };
             FrameLayout frameLayout = (FrameLayout) fragmentView;
 
         avatarImage = new BackupImageView(context);
@@ -349,9 +396,11 @@ public void onClick(View v) {
                 }
             }
         });
-
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
         nameTextView = new TextView(context);
-            nameTextView.setTextColor(0xffffffff);
+            //nameTextView.setTextColor(0xffffffff);
+            nameTextView.setTextColor(preferences.getInt("prefHeaderTitleColor", 0xffffffff));
+
             nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
             nameTextView.setLines(1);
             nameTextView.setMaxLines(1);
@@ -373,7 +422,7 @@ public void onClick(View v) {
         actionBar.addView(onlineTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT) | Gravity.BOTTOM, LocaleController.isRTL ? 16 : 97, 0, LocaleController.isRTL ? 97 : 16, 30));
 
         listView = new ListView(context);
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+
         int bgColor = preferences.getInt("prefBGColor", 0xffffffff);
         listView.setBackgroundColor(bgColor);
             listView.setDivider(null);
@@ -459,6 +508,26 @@ public void onClick(DialogInterface dialog, int which) {
                         if (view instanceof TextCheckCell) {
                             ((TextCheckCell) view).setChecked(!enabled);
                         }
+                    } else if (i == useDeviceFontRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("useDeviceFont", false);
+                        editor.putBoolean("useDeviceFont", !enabled);
+                        editor.commit();
+                        ApplicationLoader.USE_DEVICE_FONT = !enabled;
+                        AndroidUtilities.needRestart = true;
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                if (getParentActivity() != null) {
+                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("AppWillRestart", R.string.AppWillRestart), Toast.LENGTH_SHORT);
+                                    toast.show();
+                                }
+                            }
+                        });
+                        if (view instanceof TextCheckCell) {
+                            ((TextCheckCell) view).setChecked(!enabled);
+                        }
                     } else if (i == notificationRow) {
                         presentFragment(new NotificationsSettingsActivity());
                     } else if (i == backgroundRow) {
@@ -945,9 +1014,25 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         updateUserData();
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+
+        Drawable other = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_other);
+        other.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
@@ -978,10 +1063,52 @@ private void needLayout() {
             layoutParams = (FrameLayout.LayoutParams) writeButton.getLayoutParams();
             layoutParams.topMargin = (actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + AndroidUtilities.getCurrentActionBarHeight() + actionBar.getExtraHeight() - AndroidUtilities.dp(29.5f);
             writeButton.setLayoutParams(layoutParams);
-            ViewProxy.setAlpha(writeButton, diff);
-            writeButton.setVisibility(diff <= 0.02 ? View.GONE : View.VISIBLE);
-            if (writeButton.getVisibility() == View.GONE) {
+
+            //ViewProxy.setScaleX(writeButton, diff > 0.2f ? 1.0f : diff / 0.2f);
+            //ViewProxy.setScaleY(writeButton, diff > 0.2f ? 1.0f : diff / 0.2f);
+            //ViewProxy.setAlpha(writeButton, diff > 0.2f ? 1.0f : diff / 0.2f);
+            final boolean setVisible = diff > 0.2f;
+            boolean currentVisible = writeButton.getTag() == null;
+            if (setVisible != currentVisible) {
+                if (setVisible) {
+                    writeButton.setTag(null);
+                    writeButton.setVisibility(View.VISIBLE);
+                } else {
+                    writeButton.setTag(0);
+                }
+                if (writeButtonAnimation != null) {
+                    AnimatorSetProxy old = writeButtonAnimation;
+                    writeButtonAnimation = null;
+                    old.cancel();
+                }
+                writeButtonAnimation = new AnimatorSetProxy();
+                if (setVisible) {
+                    writeButtonAnimation.setInterpolator(new DecelerateInterpolator());
+                    writeButtonAnimation.playTogether(
+                            ObjectAnimatorProxy.ofFloat(writeButton, "scaleX", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(writeButton, "scaleY", 1.0f),
+                            ObjectAnimatorProxy.ofFloat(writeButton, "alpha", 1.0f)
+                    );
+                } else {
+                    writeButtonAnimation.setInterpolator(new AccelerateInterpolator());
+                    writeButtonAnimation.playTogether(
+                            ObjectAnimatorProxy.ofFloat(writeButton, "scaleX", 0.2f),
+                            ObjectAnimatorProxy.ofFloat(writeButton, "scaleY", 0.2f),
+                            ObjectAnimatorProxy.ofFloat(writeButton, "alpha", 0.0f)
+                    );
+                }
+                writeButtonAnimation.setDuration(150);
+                writeButtonAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        if (writeButtonAnimation != null && writeButtonAnimation.equals(animation)) {
                 writeButton.clearAnimation();
+                            writeButton.setVisibility(setVisible ? View.VISIBLE : View.GONE);
+                            writeButtonAnimation = null;
+                        }
+                    }
+                });
+                writeButtonAnimation.start();
             }
 
             avatarImage.setRoundRadius(AndroidUtilities.dp(avatarSize / 2));
@@ -1022,7 +1149,7 @@ public boolean onPreDraw() {
                     needLayout();
                     fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
                 }
-                return false;
+                return true;
             }
         });
     }
@@ -1044,7 +1171,7 @@ private void updateUserData() {
         avatarImage.setImage(photo, "50_50", avatarDrawable);
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
 
-        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            nameTextView.setText(UserObject.getUserName(user));
         onlineTextView.setText(LocaleController.getString("Online", R.string.Online));
 
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
@@ -1098,7 +1225,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == numberRow || i == showAndroidEmojiRow || i == emojiPopupSize ||
+            return i == textSizeRow || i == enableAnimationsRow || i == notificationRow || i == backgroundRow || i == numberRow || i == showAndroidEmojiRow || i == useDeviceFontRow || i == emojiPopupSize ||
                     i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == privacyRow || i == wifiDownloadRow || i == disableMessageClickRow ||
                     i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
                     i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow || i == keepOriginalFilenameRow ||
@@ -1209,7 +1336,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == keepOriginalFilenameRow) {
                     textCell.setTextAndCheck(LocaleController.getString("KeepOriginalFilename", R.string.KeepOriginalFilename), ApplicationLoader.KEEP_ORIGINAL_FILENAME, false);
                 } else if (i == showAndroidEmojiRow) {
-                    textCell.setTextAndCheck(LocaleController.getString("ShowAndroidEmoji", R.string.ShowAndroidEmoji), ApplicationLoader.SHOW_ANDROID_EMOJI, false);
+                    textCell.setTextAndCheck(LocaleController.getString("ShowAndroidEmoji", R.string.ShowAndroidEmoji), ApplicationLoader.SHOW_ANDROID_EMOJI, true);
+                } else if (i == useDeviceFontRow) {
+                    textCell.setTextAndCheck(LocaleController.getString("UseDeviceFont", R.string.UseDeviceFont), ApplicationLoader.USE_DEVICE_FONT, false);
                 }
             } else if (type == 4) {
                 if (view == null) {
@@ -1320,7 +1449,7 @@ public int getItemViewType(int i) {
             } 
             if (i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
                 return 1;
-            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == disableMessageClickRow || i == showAndroidEmojiRow || i == keepOriginalFilenameRow ) {
+            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow || i == disableMessageClickRow || i == showAndroidEmojiRow || i == useDeviceFontRow || i == keepOriginalFilenameRow ) {
                 return 3;
             } else if (i == notificationRow || i == backgroundRow || i == askQuestionRow || i == sendLogsRow || i == privacyRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow || i == textSizeRow || i == emojiPopupSize || i == languageRow || i == contactsSortRow || i == stickersRow) {
                 return 2;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java
index 0f3dc4840..5172d67f5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingActivity.java
@@ -16,6 +16,7 @@
 import android.content.pm.PackageInfo;
 import android.content.res.Configuration;
 import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -119,17 +120,14 @@ public void onFragmentDestroy() {
     public View createView(Context context, LayoutInflater inflater) {
         if (fragmentView == null) {
 
-
             actionBar.setItemsBackground(AvatarDrawable.getButtonColorForId(5));
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
 
-
             if (AndroidUtilities.isTablet()) {
                 actionBar.setOccupyStatusBar(false);
             }
             actionBar.setTitle(LocaleController.getString("Theming", R.string.Theming));
 
-
             actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
                 @Override
                 public void onItemClick(int id) {
@@ -314,6 +312,15 @@ public void run() {
                                             }
                                 });
                                 AndroidUtilities.needRestart = true;
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        if (getParentActivity() != null) {
+                                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("AppWillRestart", R.string.AppWillRestart), Toast.LENGTH_SHORT);
+                                            toast.show();
+                                        }
+                                    }
+                                });
                             }
                         });
                         builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -358,70 +365,6 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
         return fragmentView;
     }
 
-    private void showAttachmentError() {
-        if (getParentActivity() == null) {
-            return;
-        }
-        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
-        toast.show();
-    }
-/*
-    @Override
-    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            if (requestCode == 0) {
-
-            } else if (requestCode == 22) {
-                if (data == null || data.getData() == null) {
-                    showAttachmentError();
-                    return;
-                }
-                String tempPath = Utilities.getPath(data.getData());
-                String originalPath = tempPath;
-                if (tempPath == null) {
-                    originalPath = data.toString();
-                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
-                }
-                if (tempPath == null) {
-                    showAttachmentError();
-                    return;
-                }
-                Toast toast = Toast.makeText(getParentActivity(), tempPath + "\n " + originalPath, Toast.LENGTH_SHORT);
-                toast.show();
-                //SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, Long.parseLong(null));
-            }
-        }
-    }*/
-/*
-    private void saveThemeDialog(){
-
-        LayoutInflater li = LayoutInflater.from(getParentActivity());
-        View promptsView = li.inflate(R.layout.editbox_dialog, null);
-        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getParentActivity());
-        alertDialogBuilder.setView(promptsView);
-        final EditText userInput = (EditText) promptsView.findViewById(R.id.editTextDialogUserInput);
-
-        alertDialogBuilder
-                .setCancelable(false)
-                .setPositiveButton(R.string.ok,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog,int id) {
-                                savePrefs(Utils.this);
-                                String pName = userInput.getText().toString();
-                                functions.savePreferencesToSD(Utils.this,my_pref_file_name+".xml",pName+".xml",true);
-                                functions.copyWallpaperToSD(Utils.this,pName,true);
-                            }
-                        })
-                .setNegativeButton(R.string.cancel,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog,int id) {
-                                dialog.cancel();
-                            }
-                        });
-        AlertDialog alertDialog = alertDialogBuilder.create();
-        alertDialog.show();
-    }*/
-
     private void commitInt(int i){
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
         SharedPreferences.Editor editor = preferences.edit();
@@ -450,6 +393,8 @@ private void commitInt(int i){
         editor.putInt("contactsHeaderColor", i);
         editor.putInt("contactsOnlineColor", darkColor);
 
+        editor.putInt("prefHeaderColor", i);
+
         editor.commit();
         fixLayout();
         AndroidUtilities.themeColor = i;
@@ -462,6 +407,18 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         fixLayout();
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java
index fbd2f9b5d..749ec9907 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatActivity.java
@@ -14,6 +14,8 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -971,9 +973,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java
index dc60bcace..32395a631 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingChatsActivity.java
@@ -13,6 +13,8 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -85,6 +87,7 @@
     private int groupNameColorRow;
     private int groupNameSizeRow;
     private int mediaColorRow;
+    private int groupIconColorRow;
 
     private int rowCount;
 
@@ -114,6 +117,7 @@ public boolean onFragmentCreate() {
         nameSizeRow = rowCount++;
         groupNameColorRow = rowCount++;
         groupNameSizeRow = rowCount++;
+        groupIconColorRow = rowCount++;
         muteColorRow = rowCount++;
         checksColorRow = rowCount++;
 
@@ -342,6 +346,20 @@ public void colorChanged(int color) {
 
                         },themePrefs.getInt( key, themePrefs.getInt("chatsNameColor", 0xff212121)), CENTER, 0, false);
 
+                        colorDialog.show();
+                    } else if (i == groupIconColorRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        li.inflate(R.layout.colordialog, null, false);
+                        ColorSelectorDialog colorDialog = new ColorSelectorDialog(getParentActivity(), new OnColorChangedListener() {
+                            @Override
+                            public void colorChanged(int color) {
+                                commitInt( key, color);
+                            }
+
+                        },themePrefs.getInt( key, themePrefs.getInt("chatsGroupNameColor", 0xff000000)), CENTER, 0, true);
                         colorDialog.show();
                     } else if (i == muteColorRow) {
                         if (getParentActivity() == null) {
@@ -732,9 +750,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
@@ -775,7 +805,7 @@ public boolean areAllItemsEnabled() {
         public boolean isEnabled(int i) {
             return  i == headerColorRow || i == headerTitleColorRow || i == headerIconsColorRow || i == headerTitleRow ||
                     i == rowColorRow || i == dividerColorRow || i == avatarRadiusRow ||  i == avatarSizeRow ||   i == avatarMarginLeftRow ||
-                    i == nameColorRow || i == groupNameColorRow || i == unknownNameColorRow || i == muteColorRow || i == checksColorRow || i == nameSizeRow || i == groupNameSizeRow || i == messageColorRow || i == memberColorRow || i == mediaColorRow || i == typingColorRow || i == messageSizeRow ||
+                    i == nameColorRow || i == groupNameColorRow || i == unknownNameColorRow || i == groupIconColorRow || i == muteColorRow || i == checksColorRow || i == nameSizeRow || i == groupNameSizeRow || i == messageColorRow || i == memberColorRow || i == mediaColorRow || i == typingColorRow || i == messageSizeRow ||
                     i == timeColorRow || i == timeSizeRow || i == countColorRow || i == countSizeRow || i == countBGColorRow || i == floatingPencilColorRow || i == floatingBGColorRow;
         }
 
@@ -889,6 +919,9 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else if (i == unknownNameColorRow) {
                     textCell.setTag("chatsUnknownNameColor");
                     textCell.setTextAndColor(LocaleController.getString("UnknownNameColor", R.string.UnknownNameColor), themePrefs.getInt("chatsUnknownNameColor", themePrefs.getInt("chatsNameColor", 0xff212121)), true);
+                } else if (i == groupIconColorRow) {
+                    textCell.setTag("chatsGroupIconColor");
+                    textCell.setTextAndColor(LocaleController.getString("GroupIconColor", R.string.GroupIconColor), themePrefs.getInt("chatsGroupIconColor", themePrefs.getInt("chatsGroupNameColor", 0xff000000)), true);
                 } else if (i == muteColorRow) {
                     textCell.setTag("chatsMuteColor");
                     textCell.setTextAndColor(LocaleController.getString("MuteColor", R.string.MuteColor), themePrefs.getInt("chatsMuteColor", 0xffa8a8a8), true);
@@ -978,7 +1011,7 @@ public int getItemViewType(int i) {
             } else if ( i == avatarRadiusRow || i == avatarSizeRow || i == avatarMarginLeftRow || i == nameSizeRow || i == groupNameSizeRow ||  i == messageSizeRow || i == timeSizeRow || i == countSizeRow ) {
                 return 2;
             } else if ( i == headerColorRow || i == headerTitleColorRow || i == headerIconsColorRow  ||
-                        i == rowColorRow || i == dividerColorRow || i == nameColorRow || i == groupNameColorRow || i == unknownNameColorRow || i == muteColorRow || i == checksColorRow || i == messageColorRow  || i == memberColorRow || i == mediaColorRow || i == typingColorRow || i == timeColorRow || i == countColorRow ||
+                        i == rowColorRow || i == dividerColorRow || i == nameColorRow || i == groupNameColorRow || i == unknownNameColorRow || i == groupIconColorRow || i == muteColorRow || i == checksColorRow || i == messageColorRow  || i == memberColorRow || i == mediaColorRow || i == typingColorRow || i == timeColorRow || i == countColorRow ||
                         i == countBGColorRow || i == floatingPencilColorRow || i == floatingBGColorRow) {
                 return 3;
             }/* else if (i == usernameTitleRow) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java
index c774e6667..108bb9cf6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingContactsActivity.java
@@ -13,6 +13,8 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -386,9 +388,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingDrawerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingDrawerActivity.java
index 185f4a34f..e67298244 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingDrawerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingDrawerActivity.java
@@ -13,6 +13,8 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -63,6 +65,7 @@
     private int optionSizeRow;
     private int versionColorRow;
     private int versionSizeRow;
+    private int avatarSizeRow;
 
     private int rowCount;
 
@@ -79,6 +82,7 @@ public boolean onFragmentCreate() {
         headerColorRow = rowCount++;
         avatarColorRow  = rowCount++;
         avatarRadiusRow  = rowCount++;
+        avatarSizeRow = rowCount++;
         nameColorRow = rowCount++;
         nameSizeRow = rowCount++;
         phoneColorRow = rowCount++;
@@ -307,6 +311,27 @@ public void onClick(DialogInterface dialog, int which) {
                             }
                         });
                         showDialog(builder.create());
+                    } else if (i == avatarSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AvatarSize", R.string.AvatarSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        final int currentValue = themePrefs.getInt("drawerAvatarSize", 64);
+                        numberPicker.setMinValue(1);
+                        numberPicker.setMaxValue(75);
+                        numberPicker.setValue(currentValue);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (numberPicker.getValue() != currentValue) {
+                                    commitInt("drawerAvatarSize", numberPicker.getValue());
+                                }
+                            }
+                        });
+                        showDialog(builder.create());
                     } else if (i == nameSizeRow) {
                         if (getParentActivity() == null) {
                             return;
@@ -411,6 +436,8 @@ public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, lon
                         resetInt("drawerAvatarRadius");
                     } else if (i == nameColorRow) {
                         resetInt("drawerNameColor");
+                    } else if (i == avatarSizeRow) {
+                        resetInt("drawerAvatarSize");
                     } else if (i == nameSizeRow) {
                         resetInt("drawerNameSize");
                     } else if (i == phoneColorRow) {
@@ -482,9 +509,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
@@ -523,7 +562,7 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            return  i == headerColorRow || i == headerBackgroundCheckRow || i == hideBackgroundShadowRow || i == listColorRow || i == iconColorRow || i == optionColorRow || i == optionSizeRow || i == avatarColorRow || i == avatarRadiusRow || i == nameColorRow || i == nameSizeRow || i == phoneColorRow || i == phoneSizeRow ||
+            return  i == headerColorRow || i == headerBackgroundCheckRow || i == hideBackgroundShadowRow || i == listColorRow || i == iconColorRow || i == optionColorRow || i == optionSizeRow || i == avatarColorRow || i == avatarRadiusRow || i == nameColorRow || i == avatarSizeRow || i == nameSizeRow || i == phoneColorRow || i == phoneSizeRow ||
                     i == versionColorRow || i == versionSizeRow;
         }
 
@@ -575,6 +614,9 @@ else if (type == 2) {
                 if (i == avatarRadiusRow) {
                     int size = themePrefs.getInt("drawerAvatarRadius", AndroidUtilities.isTablet() ? 35 : 32);
                     textCell.setTextAndValue(LocaleController.getString("AvatarRadius", R.string.AvatarRadius), String.format("%d", size), true);
+                } else if (i == avatarSizeRow) {
+                    int size = themePrefs.getInt("drawerAvatarSize", AndroidUtilities.isTablet() ? 68 : 64);
+                    textCell.setTextAndValue(LocaleController.getString("AvatarSize", R.string.AvatarSize), String.format("%d", size), true);
                 } else if (i == nameSizeRow) {
                     int size = themePrefs.getInt("drawerNameSize", AndroidUtilities.isTablet() ? 17 : 15);
                     textCell.setTextAndValue(LocaleController.getString("OwnNameSize", R.string.OwnNameSize), String.format("%d", size), true);
@@ -638,7 +680,7 @@ public int getItemViewType(int i) {
             else if ( i == headerSection2Row || i == rowsSection2Row ) {
                 return 1;
             }
-            else if ( i == avatarRadiusRow || i == nameSizeRow ||  i == phoneSizeRow ||  i == optionSizeRow ||  i == versionSizeRow) {
+            else if ( i == avatarRadiusRow || i == avatarSizeRow || i == nameSizeRow ||  i == phoneSizeRow ||  i == optionSizeRow ||  i == versionSizeRow) {
                 return 2;
             }
             else if ( i == headerColorRow || i == listColorRow || i == iconColorRow || i == optionColorRow || i == versionColorRow  || i == avatarColorRow  || i == nameColorRow || i == phoneColorRow) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ThemingProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ThemingProfileActivity.java
index f81598c51..cc25b8bbb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ThemingProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ThemingProfileActivity.java
@@ -13,6 +13,8 @@
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -357,9 +359,21 @@ public void onResume() {
         if (listAdapter != null) {
             listAdapter.notifyDataSetChanged();
         }
+        updateTheme();
         fixLayout();
     }
 
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
+    }
+
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
index e672840ac..8718183b3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/WallpapersActivity.java
@@ -16,6 +16,8 @@
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.Point;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -161,7 +163,12 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+        //doneButton = menu.addItemWithWidth(done_button, R.drawable.ic_done, AndroidUtilities.dp(56));
+
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        Drawable done = getParentActivity().getResources().getDrawable(R.drawable.ic_done);
+        done.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.SRC_IN);
+        doneButton = menu.addItemWithWidth(done_button, done, AndroidUtilities.dp(56));
 
         FrameLayout frameLayout = new FrameLayout(context);
         fragmentView = frameLayout;
@@ -464,6 +471,18 @@ public void onResume() {
             listAdapter.notifyDataSetChanged();
         }
         processSelectedBackground();
+        updateTheme();
+    }
+
+    private void updateTheme(){
+        SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        int def = themePrefs.getInt("themeColor", AndroidUtilities.defColor);
+        actionBar.setBackgroundColor(themePrefs.getInt("prefHeaderColor", def));
+        actionBar.setTitleColor(themePrefs.getInt("prefHeaderTitleColor", 0xffffffff));
+
+        Drawable back = getParentActivity().getResources().getDrawable(R.drawable.ic_ab_back);
+        back.setColorFilter(themePrefs.getInt("prefHeaderIconsColor", 0xffffffff), PorterDuff.Mode.MULTIPLY);
+        actionBar.setBackButtonDrawable(back);
     }
 
     private class ListAdapter extends RecyclerView.Adapter {
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/Thumbs.db b/TMessagesProj/src/main/res/drawable-hdpi/Thumbs.db
index 18c904c34..d2eb28c12 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/Thumbs.db and b/TMessagesProj/src/main/res/drawable-hdpi/Thumbs.db differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/arrow_down_w.png b/TMessagesProj/src/main/res/drawable-hdpi/arrow_down_w.png
deleted file mode 100644
index deca1e6e9..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/arrow_down_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png
index 151f180b1..5a8f5cf4e 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_attach_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png
deleted file mode 100644
index 40977e866..000000000
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_msg_panel_hide.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/Thumbs.db b/TMessagesProj/src/main/res/drawable-mdpi/Thumbs.db
index a03d4305e..a4a7d8087 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/Thumbs.db and b/TMessagesProj/src/main/res/drawable-mdpi/Thumbs.db differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/arrow_down_w.png b/TMessagesProj/src/main/res/drawable-mdpi/arrow_down_w.png
deleted file mode 100644
index 02ad9766d..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/arrow_down_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png
index 8c4d55060..3440214d1 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_attach_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png
deleted file mode 100644
index d926efa47..000000000
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_msg_panel_hide.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/Thumbs.db b/TMessagesProj/src/main/res/drawable-xhdpi/Thumbs.db
index a4590c21b..501adba7a 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/Thumbs.db and b/TMessagesProj/src/main/res/drawable-xhdpi/Thumbs.db differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/arrow_down_w.png b/TMessagesProj/src/main/res/drawable-xhdpi/arrow_down_w.png
deleted file mode 100644
index a94e1d57b..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/arrow_down_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png
index 5af747ad7..12336bf80 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_attach_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png
deleted file mode 100644
index b09776f75..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_msg_panel_hide.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/Thumbs.db b/TMessagesProj/src/main/res/drawable-xxhdpi/Thumbs.db
index 48a319fe8..b02220d4c 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/Thumbs.db and b/TMessagesProj/src/main/res/drawable-xxhdpi/Thumbs.db differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/arrow_down_w.png b/TMessagesProj/src/main/res/drawable-xxhdpi/arrow_down_w.png
deleted file mode 100644
index e7710ef9a..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/arrow_down_w.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png
index e5830295e..7317d7295 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_attach_music.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png
deleted file mode 100644
index 2c9359e25..000000000
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_msg_panel_hide.png and /dev/null differ
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/Thumbs.db b/TMessagesProj/src/main/res/drawable-xxxhdpi/Thumbs.db
index d28d655c0..578750c03 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxxhdpi/Thumbs.db and b/TMessagesProj/src/main/res/drawable-xxxhdpi/Thumbs.db differ
diff --git a/TMessagesProj/src/main/res/layout/chat_loading_layout.xml b/TMessagesProj/src/main/res/layout/chat_loading_layout.xml
deleted file mode 100644
index 7d15e8b0d..000000000
--- a/TMessagesProj/src/main/res/layout/chat_loading_layout.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:paddingTop="4dp"
-    android:paddingBottom="4dp">
-
-    <FrameLayout
-        android:id="@+id/progressLayout"
-        android:layout_width="36dp"
-        android:layout_height="36dp"
-        android:gravity="center"
-        android:layout_gravity="center">
-
-        <ProgressBar
-            android:layout_width="32dp"
-            android:layout_height="32dp"
-            android:id="@+id/center_progress"
-            android:indeterminateDrawable="@drawable/loading_animation"
-            android:indeterminate="true"
-            android:layout_gravity="center"
-            android:indeterminateBehavior="repeat"
-            android:indeterminateDuration="1500">
-        </ProgressBar>
-
-    </FrameLayout>
-
-</FrameLayout>
diff --git a/TMessagesProj/src/main/res/layout/chat_unread_layout.xml b/TMessagesProj/src/main/res/layout/chat_unread_layout.xml
deleted file mode 100644
index 13832bbf5..000000000
--- a/TMessagesProj/src/main/res/layout/chat_unread_layout.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="40dp"
-    android:layout_gravity="top">
-
-    <FrameLayout
-        android:layout_width="match_parent"
-        android:layout_height="27dp"
-        android:background="@drawable/newmsg_divider"
-        android:layout_marginTop="7dp"
-        android:layout_gravity="top">
-
-        <ImageView
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:src="@drawable/ic_ab_new"
-            android:layout_gravity="right|center_vertical"
-            android:layout_marginRight="10dp"
-            android:paddingTop="2dp"/>
-
-        <TextView
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:textColor="#4a7297"
-            android:textSize="14dp"
-            android:id="@+id/chat_message_text"
-            android:paddingBottom="1dp"/>
-
-    </FrameLayout>
-
-</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index 4dc257c1d..2f213b974 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -99,6 +99,7 @@
     <string name="ChatLocation"> موقع</string>
     <string name="ChatVideo">مقطع مرئي</string>
     <string name="ChatDocument">ملف</string>
+    <string name="ChatCamera">الكاميرا</string>
     <string name="NoMessages">...لا توجد رسائل بعد</string>
     <string name="ForwardedMessage">الرسالة المعاد توجيهها</string>
     <string name="From">من</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">جاري جلب معلومات الرابط...</string>
     <string name="OpenInBrowser">فتح في المتصفح</string>
     <string name="CopyUrl">انسخ الرابط</string>
+    <string name="SendItems">أرسل %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s قام بتعيين عداد التدمير الذاتي إلى to %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">لقد قمت بتعيين التدمير الذاتي إلى %1$s</string>
@@ -245,7 +247,6 @@
     <string name="ErrorOccurred">حدث خطأ.</string>
     <!--stickers view-->
     <string name="Stickers">ملصقات</string>
-    <string name="GeniusStickerPackName">العقول العظيمة</string>
     <string name="StickersInfo">الرسامون مرحب بهم ليصنعوا حزم ملصقات عن طريق مراسلة @stickers .\n\nيمكن إضافة هذه الحزم بالضغط مرتين على الملصق واختيار \"معلومات\" — \"إضافة الملصقات\".</string>
     <string name="AddStickers">إضافة ملصق</string>
     <string name="AddToStickers">إضافة إلى الملصقات</string>
@@ -294,7 +295,7 @@
     <string name="ContactJoined">اشترك صديق في تيليجرام</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">اللغة</string>
-    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]>يرجى الإطلاع على <![CDATA[<a href=\"http://telegram.org/faq/ar\">الأسئلة الشائعة عن تيليجرام</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
+    <string name="AskAQuestionInfo">نرجو الأخذ بالعلم أن الدعم الفني في تيليجرام يقوم به مجموعة من المتطوعين. نحن نحاول الرد بسرعة قدر المستطاع، لكن ربما نستغرق القليل من الوقت.<![CDATA[<br><br>]]> <![CDATA[<a href=\"https://telegram.org/faq/ar\">صفحة الأسئلة الأكثر شيوعًا</a>]]>: يوجد بها حلول للمشاكل وإجابات لمعظم الأسئلة.</string>
     <string name="AskButton">اسأل أحد المتطوعين</string>
     <string name="TelegramFaq">الأسئلة الشائعة عن تيليجرام</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/ar</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">تم تحرير الفيديو</string>
     <string name="SendingVideo">جارٍ إرسال المقطع المرئي...</string>
     <string name="CompressVideo">اضغط المقطع المرئي</string>
+    <!--bot-->
+    <string name="Bot">البوت</string>
+    <string name="BotShare">مشاركة</string>
+    <string name="BotInvite">إضافة إلى المجموعة</string>
+    <string name="BotSettings">الإعدادات</string>
+    <string name="BotHelp">مساعدة</string>
+    <string name="BotStatusRead">يستطيع الوصول للرسائل</string>
+    <string name="BotStatusCantRead">لا يستطيع الوصول للرسائل</string>
+    <string name="BotInfoTitle">ماذا يستطيع هذا البوت عمله؟</string>
+    <string name="BotStart">إبدأ</string>
     <!--button titles-->
     <string name="Next">التالي</string>
     <string name="Back">رجوع</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 قام بإضافتك</string>
     <string name="ActionAddUserSelf">un1 عاد إلى المجموعة</string>
     <string name="ActionAddUserSelfYou">لقد عدت إلى المجموعة</string>
-    <string name="UnsuppotedMedia">نسخة تيليجرام الموجودة لديك لا تدعم هذه الرسالة. الرجاء التحديث لأحدث نسخة: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">نسخة تيليجرام الموجودة لديك لا تدعم هذه الرسالة. الرجاء التحديث لأحدث نسخة لاستعراضها: https://telegram.org/update</string>
     <string name="AttachPhoto">صورة</string>
     <string name="AttachVideo">مقطع مرئي</string>
     <string name="AttachLocation">موقع</string>
@@ -595,13 +606,16 @@
     <string name="NoHandleAppInstalled">لا يوجد لديك تطبيق يمكنه فتح \'%1$s\'، يرجى تنزيل تطبيق مناسب للإستمرار</string>
     <string name="InviteUser">هذا المستخدم ليس لديه تيليجرام بعد ، هل ترغب في دعوته الآن؟</string>
     <string name="AreYouSure">هل أنت متأكد؟</string>
-    <string name="AddToTheGroup">هل ترغب في إضافة %1$s للمجموعة؟\n\nعدد الرسائل الحديثة المراد إعادة تحويلها:</string>
-    <string name="ForwardMessagesTo">هل تريد إعادة توجيه الرسائل إلى %1$s؟</string>
+    <string name="AddToTheGroupTitle">هل ترغب في إضافة %1$s للمجموعة %2$s؟</string>
+    <string name="AddToTheGroupForwardCount">عدد الرسائل الحديثة المراد إعادة تحويلها:</string>
+    <string name="AddToTheGroup">إضافة %1$s للمجموعة؟</string>
+    <string name="UserAlreadyInGroup">هذا المستخدم عضو مسبق في هذه المجموعة</string>
+    <string name="ForwardMessagesTo">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
     <string name="SendMessagesTo">هل ترغب في إرسال رسالة إلى %1$s؟</string>
     <string name="AreYouSureLogout">نرجو الأخذ بالعلم أنه يمكنك استخدام تيليجرام على أجهزتك المتعددة بسهولة تامة وفي وقت واحد.\n\nوتذكر، تسجيل الخروج يحذف كافة محادثاتك السرية.</string>
     <string name="AreYouSureSessions">هل أنت متأكد من تسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز؟</string>
     <string name="AreYouSureDeleteAndExit">هل أنت متأكد من أنك تريد حذف المجموعة والخروج منها؟</string>
-    <string name="AreYouSureDeleteThisChat">هل أنت متأكد من رغبتك في حذف المجموعة؟</string>
+    <string name="AreYouSureDeleteThisChat">هل أنت متأكد من رغبتك في حذف المحادثة؟</string>
     <string name="AreYouSureShareMyContactInfo">هل أنت متأكد من أنك تريد مشاركة معلومات جهة الاتصال الخاصة بك؟</string>
     <string name="AreYouSureBlockContact">هل أنت متأكد من رغبتك في حظر جهة الاتصال هذه؟</string>
     <string name="AreYouSureUnblockContact">هل أنت متأكد من رغبتك في إزالة الحظر عن جهة الاتصال هذه؟</string>
@@ -611,8 +625,10 @@
     <string name="AreYouSureClearHistory">هل أنت متأكد من رغبتك في حذف سجل المحادثات؟</string>
     <string name="AreYouSureDeleteMessages">هل أنت متأكد من رغبتك في حذف %1$s؟</string>
     <string name="SendMessagesToGroup">هل ترغب في إرسال رسالة إلى %1$s؟</string>
-    <string name="ForwardMessagesToGroup">هل تريد إعادة توجيه الرسائل إلى %1$s؟</string>
+    <string name="ForwardMessagesToGroup">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
     <string name="FeatureUnavailable">.Sorry, this feature is currently not available in your country</string>
+    <string name="NoUsernameFound">لا يوجد حساب تيليجرام بهذا الاسم.</string>
+    <string name="BotCantJoinGroups">هذا البوت لا يستطيع الدخول للمجموعات.</string>
     <!--Intro view-->
     <string name="Page1Title">تيليجرام</string>
     <string name="Page2Title">سريع</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d ملصقات</string>
     <string name="Stickers_many">%1$d ملصق</string>
     <string name="Stickers_other">%1$d ملصق</string>
+    <string name="Photos_zero">%1$d صور</string>
+    <string name="Photos_one">%1$d صورة</string>
+    <string name="Photos_two">%1$d صور</string>
+    <string name="Photos_few">%1$d صور</string>
+    <string name="Photos_many">%1$d صور</string>
+    <string name="Photos_other">%1$d صور</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d رسالة معاد توجيهها</string>
     <string name="ForwardedMessage_one">الرسالة المعاد توجيهها</string>
@@ -804,30 +826,31 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s الساعة %2$s</string>
-    <!--update text--><!--
-    <string name="updateText">تيليجرام نسخة الـ Android تم تحديثه. الجديد في نسخة ٢.٩:\n\n- تنصيب ومشاركة الملصقات كهذه: https://play.google.com/store/apps/details?id=es.rafalense.themes\n- إذا كنت رسام، قم بصنع حزمة ملصقات عن طريق مراسلة @stickers .\n\n - استخدم تيليجرام مع أندرويد أوتو.</string>
-    -->
-  <string name="updateBuild">546</string>
-    <!--Telegram+ arabic-->
-    <string name="TelegramForAndroid">تلغرام للاندرويد</string>
-    <string name="Theming">Theming</string>
-    <string name="colorHexInvalid">Invalid color hex code!</string>
-    <string name="ResetThemeSettings">اعاة الضبط الافتراضي</string>
+    <!--update text-->
+    <string name="updateText">تيليجرام نسخة الأندرويد تم تحديثه. الجديد في نسخة ٣.٠:\n\n- أقسام مخصصة خاصة ومرتبة لكل لحزم الملصقات. يمكنك إضافة حزم الملصقات كهذه https://telegram.me/addstickers/Animals\n- واجهة برمجية خاصة جديدة بالبوت، مجانًا للجميع. إذا كنت مبرمج، اصنع البوت الخاص بك مثل @quiz_bot و @hot_or_bot باستخدام حساب @botfather. للإستزادة، فضلًا اطلع على https://telegram.org/blog/bot-revolution</string>
+  <string name="updateBuild">576</string>
+    <!--Telegram+-->
+  <string name="updatePlusText"></string>
+  <string name="TelegramForAndroid">بلاس مسنجر للأندرويد</string>
+  <string name="Theming">الثيمات</string>
+  <string name="colorHexInvalid">شفرة تعريف اللون غير صحيحه!</string>
+  <string name="themeColor">لون الثيم</string>
+  <string name="ResetThemeSettings">اعادة الضبط الافتراضي</string>
     <string name="ResetThemeSettingsSum">التراجع عن كافة ضبط الثيمات</string>
-    <string name="ResetThemeToastText">اعادة ضبط الثيمات الي الافتراضي</string>
+  <string name="ResetThemeToastText">إعادة ضبط الإعدادت الإفتراضي</string>
     <string name="General">عام</string>
     <string name="Screens">شاشات</string>
     <string name="MainScreen">الشاشة الرئيسية</string>
     <string name="ChatScreen">شاشة المحادثة</string>
-    <string name="ContactsScreen">شاشة الاسماء</string>
+  <string name="ContactsScreen">شاشة الأسماء</string>
     <string name="Header">الشريط العلوي</string>
     <string name="Rows">الصفوف</string>
     <string name="ChatList">قائمة المحادثة</string>
     <string name="ChatsList">قائمة المحادثات</string>
     <string name="ContactsList">قائمة الاسماء</string>
     <string name="HeaderColor">لون الشريط العلوي</string>
-    <string name="NameColor">لون جهات الاتصال</string>
-    <string name="NameSize">حجم اسماء جهات الاتصال</string>
+  <string name="NameColor">لون الإسم</string>
+  <string name="NameSize">حجم اللإسم</string>
     <string name="MessageColor">لون الرسالة</string>
     <string name="MessageSize">حجم الرسالة</string>
     <string name="TimeDateColor">لون الزمن/التاريخ</string>
@@ -843,7 +866,7 @@
     <string name="DateColor">لون التريخ</string>
     <string name="DateSize">حجم التاريخ</string>
     <string name="DateBubbleColor">لون فقاعة التاريخ</string>
-    <string name="RTextColor">لون الخط</string>
+  <string name="RTextColor">لون النص اليمين</string>
     <string name="LTextColor">لون الخط اليسار</string>
     <string name="RTimeColor">لون الزمن اليمين</string>
     <string name="LTimeColor">لون الزمن اليسار</string>
@@ -851,30 +874,84 @@
     <string name="EditTextColor">لون نص الادخال</string>
     <string name="EditTextSize">حجم نص الادخال</string>
     <string name="EditTextBGColor">لون خلفية نص الادخال</string>
-    <string name="EmojiViewBGColor">لون خلفية الفيسات</string>
-    <string name="EmojiViewTabColor">لون تبويب الفيسات</string>
-    <string name="OnlineColor">لون حالة الاتصال</string>
+  <string name="EmojiViewBGColor">لون خلفية الإبتسامات</string>
+  <string name="EmojiViewTabColor">لون تبويب الإبتسامات</string>
+  <string name="OnlineColor">لون حالة الإتصال</string>
     <string name="ChatMusic">موسيقى</string>
     <string name="SaveTheme">حفظ الثيم</string>
     <string name="SaveThemeSum">حفظ الثيمات في مجلد Telegram/Themes</string>
-    <string name="SaveThemeToastText">تم حفظ الثيم</string>
-    <string name="SavedTo">%1$s saved to %2$s</string>
-    <string name="SaveErrorMsg0">Theme not created yet. Apply any MOD first, please</string>
-    <string name="restoreOkMsg">Preferences restored from sdcard</string>
-    <string name="restoreErrorMsg">No preferences file found in %s</string>
+  <string name="SaveThemeToastText">تم حفظ الثيم!</string>
+  <string name="SavedTo">%1$s حفظ في %2$s</string>
+  <string name="SaveErrorMsg0">لم يتم إنشاء ثيم لحد الآن. الرجاء إختيار أي تعديل بالأول.</string>
+  <string name="restoreOkMsg">التفضيلات المسترجعه من الذاكره</string>
+  <string name="restoreErrorMsg">لا يوجد ملف تفضيلات في %s </string>
     <string name="NoMediaMessage">لاتوجد بطاقة ذاكرة</string>
-    <string name="EnterName">ادخل الاسم</string>
+  <string name="EnterName">أدخل الإسم</string>
     <string name="Themes">الثيمات</string>
     <string name="ApplyTheme">تطبيق الثيم</string>
-    <string name="ApplyThemeSum">Apply xml theme from local folder</string>
-    <string name="MemberColor">Participant Color</string>
-    <string name="ChecksColor">Ticks Color</string>
-    <string name="MuteColor">Mute Color</string>
-    <string name="SendLogs">Send Logs</string>
-    <string name="SendLogsEmpty">There aren\'t logs</string>
-    <string name="SendIcon">Send Icon</string>
-    <string name="HideMobile">Hide Mobile Number</string>
-    <string name="FloatingPencilColor">Floating Pencil Color</string>
-    <string name="FloatingBGColor">Floating Background Color</string>
-    <string name="Community">G+ Community</string>
+  <string name="ApplyThemeSum">تطبيق ثيم XML من ملف على الجهاز</string>
+  <string name="MemberColor">لون العضو</string>
+  <string name="ChecksColor">لون علامة اللإختيار</string>
+  <string name="MuteColor">لون الوضع الصامت</string>
+  <string name="SendLogs">إرسال ملفات تتبع الإستخدام</string>
+  <string name="SendLogsEmpty">لا يوجد ملفات تتبع للإستخدام</string>
+  <string name="SendIcon">أيقونة الإرسال</string>
+  <string name="HideMobile">إخفاء رقم الهاتف من القائمة</string>
+  <string name="FloatingPencilColor">لون قلم الرصاص </string>
+  <string name="FloatingBGColor">لون الخلفية</string>
+  <string name="Community">مجتمع G+ </string>
+  <string name="TypingColor">لون الكتابة</string>
+  <string name="EditTextIconsColor">لون أيقونة النص المدخل</string>
+  <string name="NavigationDrawer">درج التصفح</string>
+  <string name="OptionsList">قائمة الخيارات</string>
+  <string name="ListColor">قائمة الألوان</string>
+  <string name="OwnNameSize">حجم اللإسم</string>
+  <string name="PhoneColor">لون الهاتف</string>
+  <string name="PhoneSize">حجم الهاتف</string>
+  <string name="AvatarColor">لون الصورة الشخصية</string>
+  <string name="IconColor">لون أيقونة الخيارات</string>
+  <string name="OptionColor">لون الخيارات</string>
+  <string name="OptionSize">حجم الخيارات</string>
+  <string name="VersionColor">لون الإصدار</string>
+  <string name="VersionSize">حجم الإصدار</string>
+  <string name="HeaderTitleColor">لون عنوان الصفحة</string>
+  <string name="HeaderIconsColor">لون أيقونات الصفحة</string>
+  <string name="DividerColor">لون المقسم</string>
+  <string name="AvatarRadius">قطر الصورة الشخصية</string>
+  <string name="SetMemberColor">تعيين لون العضو</string>
+  <string name="ForwardNameColor">لون تحويل الإسم</string>
+  <string name="HeaderTitle">عنوان الصفحة</string>
+  <string name="ForwardNoQuote">تحويل بدون الرسالة المسبقه</string>
+  <string name="DisableMessageClick">تعطيل الصفحات المنبثقه بالضغط</string>
+  <string name="ProfileScreen">بيانات المجموعه / المتصل</string>
+  <string name="HideBackground">إخفاء الخلفيه المُعينه</string>
+  <string name="RLinkColor">لون الرابط اليمين</string>
+  <string name="LLinkColor">لون الرابط اليسار</string>
+  <string name="ThemeApplied">تم تعيين الثيم!</string>
+  <string name="ClickOkToRestart">إضغط موافق لإعادة تشغيل البرنامج</string>
+  <string name="ShowAndroidEmoji">إظهار إبتسامات الجهاز</string>
+  <string name="BubbleStyle">تشكيلة فقاعيه</string>
+  <string name="KeepOriginalFilename">لا تغير الإسم الأصلي</string>
+  <string name="KeepOriginalFilenameHelp">بدلاً من ملفات مُرقمة سوف يستخدم طريقة اللإسم_اليوم</string>
+  <string name="AvatarSize">حجم الصورة الشخصية</string>
+  <string name="AvatarAlignTop">محاذات الصورة الشخصيه للأعلى</string>
+  <string name="AvatarMarginLeft">هامش الصورة الشخصيه اليسار</string>
+  <string name="GroupNameColor">لون إسم المجموعة</string>
+  <string name="GroupNameSize">حجم إسم المجموعة</string>
+  <string name="UnknownNameColor">لون اللإسم (للرقم الغير معروف)</string>
+  <string name="HideBackgroundShadow">إخفاء ظل الخلفية المعينه</string>
+  <string name="SetSolidBGColor">تعيين لون الخلفية</string>
+  <string name="SolidBGColor">لون الخلفية</string>
+  <string name="EmojiPopupSize">حجم الابتسامة المنبثقة</string>
+  <string name="ForwardRightNameColor">تحويل فقاعة لون الإسم اليمين</string>
+  <string name="ForwardLeftNameColor">تحويل فقاعة لون الإسم اليسار</string>
+  <string name="IconsColor">لون الأيقونات</string>
+  <string name="SettingsScreen">الإعدادات / ثيم الشاشة</string>
+  <string name="BackgroundColor">لون الخلفية</string>
+  <string name="ShadowColor">لون الظل</string>
+  <string name="SectionColor">لون الخيار</string>
+  <string name="TitleColor">لون العنوان</string>
+  <string name="SummaryColor">لون الملخص / الترجمة</string>
+  <string name="MediaColor">لون نص الصورة / الملصق</string>
+  <string name="ThemesAppMsg">هل تريد إستكشاف ثيمات أنشئها مستخدمين آخرين لبلس مسنجر؟</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ca/strings.xml b/TMessagesProj/src/main/res/values-ca/strings.xml
index 8772e2b63..226329b21 100644
--- a/TMessagesProj/src/main/res/values-ca/strings.xml
+++ b/TMessagesProj/src/main/res/values-ca/strings.xml
@@ -706,4 +706,16 @@
   <string name="HideBackgroundShadow">Amaga l\'ombra de fons personalitzada</string>
   <string name="SetSolidBGColor">Estableix un color de fons</string>
   <string name="SolidBGColor">Color de fons</string>
+  <string name="EmojiPopupSize">Mida de la finestra d\'Emojis</string>
+  <string name="ForwardRightNameColor">Color del nom als reenviaments drets</string>
+  <string name="ForwardLeftNameColor">Color del nom als reenviaments esquerres</string>
+  <string name="IconsColor">Color de les icones</string>
+  <string name="SettingsScreen">Pantalla de Configuració/Aparença</string>
+  <string name="BackgroundColor">Color de fons</string>
+  <string name="ShadowColor">Color de l\'ombra</string>
+  <string name="SectionColor">Color de la secció</string>
+  <string name="TitleColor">Color del títol</string>
+  <string name="SummaryColor">Color del resum/subtítol</string>
+  <string name="MediaColor">Color del text «Foto/Adhesiu»</string>
+  <string name="ThemesAppMsg">Voleu veure alguns temes creats per altes usuaris de Plus Messenger?</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 5e2c45e95..88c1198c0 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -57,7 +57,7 @@
     <string name="MuteFor">Stumm für %1$s</string>
     <string name="UnmuteNotifications">Stumm aus</string>
     <string name="WillUnmuteIn">In %1$s</string>
-    <string name="MuteDisable">Stumm aus</string>
+    <string name="MuteDisable">Dauerhaft Stumm</string>
     <string name="Hashtags">HASHTAGS</string>
     <!--broadcasts-->
     <string name="NewBroadcastList">Neue Broadcast Liste</string>
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Standort</string>
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Datei</string>
+    <string name="ChatCamera">Kamera</string>
     <string name="NoMessages">Noch keine Nachrichten…</string>
     <string name="ForwardedMessage">Weitergeleitete Nachricht</string>
     <string name="From">Von</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Lade Linkvorschau...</string>
     <string name="OpenInBrowser">Im Browser öffnen</string>
     <string name="CopyUrl">URL kopieren</string>
+    <string name="SendItems">%1$s senden</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s hat den Selbstzerstörungs-Timer auf %2$s gesetzt</string>
     <string name="MessageLifetimeChangedOutgoing">Du hast den Selbstzerstörungs-Timer auf %1$s gesetzt</string>
@@ -245,8 +247,7 @@
     <string name="ErrorOccurred">Es ist ein Fehler aufgetreten.</string>
     <!--stickers view-->
     <string name="Stickers">Sticker</string>
-    <string name="GeniusStickerPackName">Große Denker</string>
-    <string name="StickersInfo">Künstler können eigene Sticker-Pakete über unseren Sticker Bot (@stickers) einstellen.\n\nNutzer fügen neue Sticker durch doppeltes Antippen (\"Doppelklick\") eines Stickers und dann \"Info\" — \"Sticker hinzufügen\" hinzu.</string>
+    <string name="StickersInfo">Künstler können eigene Sticker-Pakete über unseren Sticker Bot (@stickers) einstellen.\n\nNutzer fügen neue Sticker durch Antippen eines Stickers und dann \"Hinzufügen\" hinzu.</string>
     <string name="AddStickers">Sticker hinzufügen</string>
     <string name="AddToStickers">Sticker hinzufügen</string>
     <string name="AddStickersNotFound">Sticker nicht gefunden</string>
@@ -294,7 +295,7 @@
     <string name="ContactJoined">Kontakt ist Telegram beigetreten</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Sprache</string>
-    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von einem ehrenamtlichen Team betreut wird. Wir versuchen so schnell wie möglich zu antworten, dies kann jedoch manchmal ein bisschen dauern.<![CDATA[<br><br>]]>Bitte schau auch in den <![CDATA[<a href=\"http://telegram.org/faq/de\">Fragen und Antworten </a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href=\"https://telegram.org/faq/de#problembehandlung\">Problembehandlung</a>]]>.</string>
+    <string name="AskAQuestionInfo">Bedenke bitte, dass der Telegram Support von ehrenamtlichen Helfern betreut wird. Wir versuchen so schnell wie möglich zu antworten, dies kann jedoch manchmal ein bisschen dauern.<![CDATA[<br><br>]]>Bitte schau auch in den <![CDATA[<a href=\"https://telegram.org/faq/de\">Fragen und Antworten </a>]]> nach. Dort findest du Antworten auf die meisten Fragen und wichtige Tipps zur <![CDATA[<a href=\"https://telegram.org/faq/de#problembehandlung\">Problembehandlung</a>]]>.</string>
     <string name="AskButton">Eine Frage stellen</string>
     <string name="TelegramFaq">Fragen und Antworten</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/de</string>
@@ -378,7 +379,7 @@
     <string name="InvalidPasscode">Ungültiger Pincode</string>
     <string name="PasscodeDoNotMatch">Pincode falsch</string>
     <string name="AutoLock">Auto-Sperre</string>
-    <string name="AutoLockInfo">Benötigt Pincode wenn lange inaktiv.</string>
+    <string name="AutoLockInfo">Sperrt App bei Inaktivität automatisch.</string>
     <string name="AutoLockInTime">in %1$s</string>
     <string name="AutoLockDisabled">Deaktiviert</string>
     <!--media view-->
@@ -528,6 +529,16 @@
     <string name="EditedVideo">Bearbeitetes Video</string>
     <string name="SendingVideo">Sende Video...</string>
     <string name="CompressVideo">Video komprimieren</string>
+    <!--bot-->
+    <string name="Bot">Bot</string>
+    <string name="BotShare">Teilen</string>
+    <string name="BotInvite">Zu einer Gruppe hinzufügen</string>
+    <string name="BotSettings">Einstellungen</string>
+    <string name="BotHelp">Hilfe</string>
+    <string name="BotStatusRead">Zugriff auf Nachrichten</string>
+    <string name="BotStatusCantRead">kein Zugriff auf Nachrichten</string>
+    <string name="BotInfoTitle">Was kann dieser Bot?</string>
+    <string name="BotStart">STARTEN</string>
     <!--button titles-->
     <string name="Next">Weiter</string>
     <string name="Back">Zurück</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 hat dich hinzugefügt</string>
     <string name="ActionAddUserSelf">un1 ist in die Gruppe zurückgekehrt</string>
     <string name="ActionAddUserSelfYou">Du bist in die Gruppe zurückgekehrt</string>
-    <string name="UnsuppotedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstützt. Bitte aktualisiere die App um sie zu sehen: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Diese Nachricht wird von deiner Telegram-Version nicht unterstützt. Bitte aktualisiere Telegram um sie zu sehen: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Standort</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">Du hast keine Applikationen, die den Dateityp \'%1$s\' öffnen könnten. Bitte installiere eine entsprechende Anwendung um fortzufahren.</string>
     <string name="InviteUser">Dieser Benutzer hat noch kein Telegram. Möchtest du ihn einladen?</string>
     <string name="AreYouSure">Bist du sicher?</string>
-    <string name="AddToTheGroup">%1$s zur Gruppe hinzufügen?\n\nAnzahl der letzten Nachrichten für die Weiterleitung:</string>
+    <string name="AddToTheGroupTitle">%1$s zur Gruppe %2$s hinzufügen?</string>
+    <string name="AddToTheGroupForwardCount">Wieviele der letzten Nachrichten willst du weiterleiten?</string>
+    <string name="AddToTheGroup">%1$s zur Gruppe hinzufügen?</string>
+    <string name="UserAlreadyInGroup">Nutzer befindet sich schon in der Gruppe</string>
     <string name="ForwardMessagesTo">Nachrichten an %1$s weiterleiten?</string>
     <string name="SendMessagesTo">Nachricht an %1$s senden?</string>
     <string name="AreYouSureLogout">Wirklich abmelden?\n\nDu kannst Telegram von all deinen Geräten gleichzeitig nutzen.\n\nWichtig: Abmelden löscht deine Geheimen Chats.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">Nachricht an %1$s senden?</string>
     <string name="ForwardMessagesToGroup">Weiterleiten an %1$s?</string>
     <string name="FeatureUnavailable">Verzeihung, diese Funktion ist derzeit in deinem Land nicht verfügbar.</string>
+    <string name="NoUsernameFound">Kein Konto mit diesem Benutzernamen</string>
+    <string name="BotCantJoinGroups">Keine Gruppen mit diesem Bot möglich</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Schnell</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d Sticker</string>
     <string name="Stickers_many">%1$d Sticker</string>
     <string name="Stickers_other">%1$d Sticker</string>
+    <string name="Photos_zero">%1$d Bilder</string>
+    <string name="Photos_one">%1$d Bild</string>
+    <string name="Photos_two">%1$d Bilder</string>
+    <string name="Photos_few">%1$d Bilder</string>
+    <string name="Photos_many">%1$d Bilder</string>
+    <string name="Photos_other">%1$d Bilder</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d angehängten Nachrichten</string>
     <string name="ForwardedMessage_one">Angehängte Nachricht</string>
@@ -805,56 +827,57 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s um %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger für Android wurde aktualisiert. Neu in Version 2.9:\n\n- Prüfe, lade herunter und wende das Thema für den Plus Messenger an:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
-    <!--Telegram+-->
-  <string name="updatePlusText">\n\nNeu in 2.9.1.4:\n\n- Option zum Ändern der Standard-Größe für das Emoji-Fenster (Option unter \"Einstellungen/Nachrichten\")\n- Option zum Ändern der Komprimierung beim Senden von Videos\n- Option zum Bearbeiten der Farbe für \"Einstellungen/Thema\"\n- Farben der Namen im Chat für Sprechblasen auf linke und rechte Seite separat ändern\n- Option zum Ändern der Icon-Farben unter \"Kontakte\"\n- Option zum Ändern der Farbe für \"Foto/Sticker\" im Hauptfenster\n- Fehlerbehebungen</string>
+    <string name="updateText">Plus Messenger für Android wurde aktualisiert. Neu in Version 3.0:\n\n- Neue Tabs im Sticker Panel für alle deine eigenen Sticker-Pakete. Füge neue Sticker wie beispielsweise https://telegram.me/addstickers/Animals hinzu.\n- Neue Bot API, für alle kostenlos verfügbar. Kannst du programmieren? Erstelle deine eigenen Bots für Spiele, Dienste oder Integrationen. Mehr dazu unter https://telegram.org/blog/bot-revolution\n- Überprüfe, lade herunter und installiere die Themes for Plus Messenger App. Neue Themen jeden Tag:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+    <string name="updateBuild">576</string>
+    <!--Telegram+--><!--
+  <string name="updatePlusText">
+\n\nNew in 3.0.1.3:\n\n- Option in den Einstellungen Systemschrift verwenden\n- Option Suchen im Chat/Gruppe\n- Hinzugefügt: MOD Farbe Kopfzeile , Titelfarbe  Kopfzeile und Symbolefarbe in Farbeinstellungen ändern / Themen bearbeiten\n- MOD Gruppen Symbol Farbe in der Chatübersicht ändern\n- MOD  Symbolgröße in Navigationsmenü ändern \n- Fehlerbehebung</string>-->
     <string name="TelegramForAndroid">Plus Messenger für Android</string>
   <string name="Theming">Themen bearbeiten</string>
   <string name="colorHexInvalid">Ungültiger Hex-Code!</string>
   <string name="themeColor">Themenfarbe</string>
-  <string name="ResetThemeSettings">Thema-Einstellungen zurücksetzen</string>
-  <string name="ResetThemeSettingsSum">Alle Thema-Einstellungen rückgängig machen</string>
-  <string name="ResetThemeToastText">Thema-Einstellungen auf Standardwerte zurücksetzen!</string>
+  <string name="ResetThemeSettings">Thema Einstellungen zurücksetzen</string>
+  <string name="ResetThemeSettingsSum">Alle Thema Einstellungen rückgängig machen</string>
+  <string name="ResetThemeToastText">Thema Einstellungen auf Standardwerte zurücksetzen!</string>
     <string name="General">Allgemein</string>
   <string name="Screens">Ansichten</string>
   <string name="MainScreen">Chatübersicht</string>
   <string name="ChatScreen">Chat</string>
     <string name="ContactsScreen">Kontaktübersicht</string>
     <string name="Header">Kopfzeile</string>
-    <string name="Rows">Zeilen</string>
+  <string name="Rows">Hintergrund</string>
   <string name="ChatList">Chatliste</string>
   <string name="ChatsList">Chatverlauf</string>
   <string name="ContactsList">Kontaktliste</string>
-  <string name="HeaderColor">Farbe der Kopfzeile</string>
-  <string name="NameColor">Farbe der Namen</string>
-  <string name="NameSize">Größe der Namen</string>
-  <string name="MessageColor">Farbe der Nachrichten</string>
-  <string name="MessageSize">Größe der Nachrichten</string>
-  <string name="TimeDateColor">Farbe für Uhrzeit/Datum</string>
-  <string name="TimeDateSize">Größe für Uhrzeit/Datum</string>
-  <string name="CountColor">Farbe für Benachrichtigungzähler</string>
-  <string name="CountSize">Größe für Benachrichtigungszähler</string>
-  <string name="RowColor">Zeilenfarbe</string>
-  <string name="CountBGColor">Hintergrundfarbe für Benachrichtigungszähler</string>
-  <string name="StatusColor">Statusfarbe</string>
-  <string name="StatusSize">Statusgröße</string>
-  <string name="RBubbleColor">Farbe der rechten Sprechblasen</string>
-  <string name="LBubbleColor">Farbe der linken Sprechblasen</string>
-  <string name="DateColor">Datumsfarbe</string>
-  <string name="DateSize">Datumsgröße</string>
-  <string name="DateBubbleColor">Datumsfarbe für Sprechblasen</string>
-  <string name="RTextColor">Textfarbe für rechte Sprechblasen</string>
-  <string name="LTextColor">Textfarbe für linke Sprechblasen</string>
-  <string name="RTimeColor">Farbe der Uhrzeit für rechte Sprechblasen</string>
-  <string name="LTimeColor">Farbe der Uhrzeit für linke Sprechblasen</string>
-  <string name="TimeSize">Größe der Uhrzeit</string>
-  <string name="EditTextColor">Textfarbe für Texteingabefeld</string>
-  <string name="EditTextSize">Textgröße für Texteingabefeld</string>
-  <string name="EditTextBGColor">Hintergrundfarbe Texteingabefeld</string>
-  <string name="EmojiViewBGColor">Hintergrundfarbe für Emojis</string>
-  <string name="EmojiViewTabColor">Tabfarbe für Emojis</string>
-  <string name="OnlineColor">Statusfarbe Online </string>
+  <string name="HeaderColor">Kopfzeile</string>
+  <string name="NameColor">Namen</string>
+  <string name="NameSize">Namen</string>
+  <string name="MessageColor">Nachrichten</string>
+  <string name="MessageSize">Nachrichten</string>
+  <string name="TimeDateColor">Uhrzeit/Datum</string>
+  <string name="TimeDateSize">Uhrzeit/Datum</string>
+  <string name="CountColor">Benachrichtigungzähler</string>
+  <string name="CountSize">Benachrichtigungszähler</string>
+  <string name="RowColor">Hintergrund</string>
+  <string name="CountBGColor">Hintergrund Benachrichtigungszähler</string>
+  <string name="StatusColor">Onlinestatus</string>
+  <string name="StatusSize">Onlinestatus</string>
+  <string name="RBubbleColor">rechte Sprechblasen</string>
+  <string name="LBubbleColor">linke Sprechblasen</string>
+  <string name="DateColor">Datum</string>
+  <string name="DateSize">Datum</string>
+  <string name="DateBubbleColor">Datum Sprechblasen</string>
+  <string name="RTextColor">Text rechte Sprechblasen</string>
+  <string name="LTextColor">Text linke Sprechblasen</string>
+  <string name="RTimeColor">Uhrzeit rechte Sprechblasen</string>
+  <string name="LTimeColor">Uhrzeit linke Sprechblasen</string>
+  <string name="TimeSize">Uhrzeit</string>
+  <string name="EditTextColor">Text im Texteingabefeld</string>
+  <string name="EditTextSize">Text im Texteingabefeld</string>
+  <string name="EditTextBGColor">Hintergrund Texteingabefeld</string>
+  <string name="EmojiViewBGColor">Hintergrund Emojis</string>
+  <string name="EmojiViewTabColor">Tab Emojis</string>
+  <string name="OnlineColor">Onlinestatus</string>
     <string name="ChatMusic">Musik</string>
   <string name="SaveTheme">Thema speichern</string>
   <string name="SaveThemeSum">Thema im Ordner Telegram/Themen speichern</string>
@@ -868,68 +891,71 @@
   <string name="Themes">Themen auswählen</string>
   <string name="ApplyTheme">Thema verwenden</string>
   <string name="ApplyThemeSum">Thema-XML aus einem lokalen Ordner verwenden</string>
-  <string name="MemberColor">Farbe der Gruppenmitglieder</string>
-  <string name="ChecksColor">Farbe der Häkchen</string>
-  <string name="MuteColor">Symbolfarbe Stumm</string>
+  <string name="MemberColor">Gruppenmitglieder</string>
+  <string name="ChecksColor">Häkchen</string>
+  <string name="MuteColor">Symbol Stumm</string>
     <string name="SendLogs">Sende Protokolle</string>
   <string name="SendLogsEmpty">Keine Protokolle gespeichert</string>
-  <string name="SendIcon">Symbolfarbe für Senden</string>
+  <string name="SendIcon">Symbol für Senden</string>
   <string name="HideMobile">Telefonnummer ausblenden</string>
-  <string name="FloatingPencilColor">schwebender Stift Farbe</string>
-  <string name="FloatingBGColor">Hintergrundfarbe schwebender Stift</string>
+  <string name="FloatingPencilColor">Schwebender Stift</string>
+  <string name="FloatingBGColor">Hintergrund schwebender Stift</string>
     <string name="Community">G+ Community</string>
-  <string name="TypingColor">Textfarbe Eingabefeld</string>
-  <string name="EditTextIconsColor">Symbolfarbe Texteingabefeld</string>
+  <string name="TypingColor">Text Eingabefeld</string>
+  <string name="EditTextIconsColor">Symbol Texteingabefeld</string>
   <string name="NavigationDrawer">Hauptmenü </string>
-  <string name="OptionsList">Hauptmenü</string>
-  <string name="ListColor">Hintergrundfarbe Hauptmenü</string>
-  <string name="OwnNameSize">Benutzernamen Größe</string>
-  <string name="PhoneColor">Telefonnummer Farbe</string>
-  <string name="PhoneSize">Telefonnummer Größe</string>
-  <string name="AvatarColor">Profilbild Farbe</string>
-  <string name="IconColor">Hauptmenü Symbolfarbe</string>
-  <string name="OptionColor">Hauptmenü Textfarbe</string>
-  <string name="OptionSize">Hauptmenü Textgröße</string>
-  <string name="VersionColor">Versionsanzeige Textfarbe</string>
-  <string name="VersionSize">Versionsanzeige Textgröße</string>
-  <string name="HeaderTitleColor">Titelfarbe Kopfzeile</string>
-  <string name="HeaderIconsColor">Symbolfarbe Kopfzeile</string>
-  <string name="DividerColor">Trennstrich Farbe</string>
+  <string name="OptionsList">Optionsliste</string>
+  <string name="ListColor">Optionsliste Hintergrund </string>
+  <string name="OwnNameSize">Benutzernamen</string>
+  <string name="PhoneColor">Telefonnummer</string>
+  <string name="PhoneSize">Telefonnummer</string>
+  <string name="AvatarColor">Profilbild</string>
+  <string name="IconColor">Optionsliste Symbol</string>
+  <string name="OptionColor">Optionsliste Text</string>
+  <string name="OptionSize">Optionsliste Text</string>
+  <string name="VersionColor">Versionsanzeige Text</string>
+  <string name="VersionSize">Versionsanzeige Text</string>
+  <string name="HeaderTitleColor">Titel Kopfzeile</string>
+  <string name="HeaderIconsColor">Symbol Kopfzeile</string>
+  <string name="DividerColor">Trennstrich</string>
   <string name="AvatarRadius">Fotoecken</string>
-  <string name="SetMemberColor">Gruppenmitglieder Farbe</string>
-  <string name="ForwardNameColor">Hinweisfarbe weitergeleitete Nachricht</string>
+  <string name="SetMemberColor">Gruppenmitglieder</string>
+  <string name="ForwardNameColor">Hinweis weitergeleitete Nachricht</string>
   <string name="HeaderTitle">Kopfzeilen Titel</string>
   <string name="ForwardNoQuote">Weiterleiten ohne Zitieren</string>
   <string name="DisableMessageClick">mit Klick Pop-up deaktivieren</string>
   <string name="ProfileScreen">Gruppe/Kontakt Profil</string>
   <string name="HideBackground">Benutzerdefinerten Hintergrund ausblenden</string>
-  <string name="RLinkColor">Linkfarbe rechte Sprechblase</string>
-  <string name="LLinkColor">Linkfarbe linke Sprechblase </string>
+  <string name="RLinkColor">Link rechte Sprechblase</string>
+  <string name="LLinkColor">Link linke Sprechblase </string>
   <string name="ThemeApplied">Thema angewendet!</string>
-  <string name="ClickOkToRestart">OK klicken, um die App neu zu starten</string>
+  <string name="ClickOkToRestart">OK klicken um die App neu zu starten</string>
   <string name="ShowAndroidEmoji">Google Emojis verwenden</string>
   <string name="BubbleStyle">Sprechblasen Form</string>
   <string name="KeepOriginalFilename">original Dateinamen speichern</string>
   <string name="KeepOriginalFilenameHelp">Statt Zahlen wird Dateiname_Datum gespeichert</string>
-  <string name="AvatarSize">Profilbildgröße Gruppenchat</string>
+  <string name="AvatarSize">Profilbild Gruppenchat</string>
   <string name="AvatarAlignTop">Profilbild Gruppenchat nach oben</string>
   <string name="AvatarMarginLeft">Profilbild Randabstand Gruppenchat </string>
-  <string name="GroupNameColor">Gruppenname Farbe</string>
-  <string name="GroupNameSize">Gruppenname Größe</string>
-  <string name="UnknownNameColor">Name Farbe (unbekannte Nummer)</string>
+  <string name="GroupNameColor">Gruppenname</string>
+  <string name="GroupNameSize">Gruppenname</string>
+  <string name="UnknownNameColor">Name (unbekannte Nummer)</string>
   <string name="HideBackgroundShadow">Hintergrund Schatten ausblenden</string>
-  <string name="SetSolidBGColor">Hintergrundfarbe festlegen</string>
-  <string name="SolidBGColor">Hintergrundfarbe</string>
-  <string name="EmojiPopupSize">Emoji Popup Größe</string>
+  <string name="SetSolidBGColor">Hintergrund festlegen</string>
+  <string name="SolidBGColor">Hintergrund</string>
+  <string name="EmojiPopupSize">Emoji Fenstergröße</string>
   <string name="ForwardRightNameColor">Sprechblase rechts Name weiterleiten</string>
   <string name="ForwardLeftNameColor">Sprechblase links Name weiterleiten </string>
-  <string name="IconsColor">Symbolfarbe</string>
+  <string name="IconsColor">Symbol</string>
   <string name="SettingsScreen"> Einstellungen Thema bearbeiten </string>
-  <string name="BackgroundColor">Hintergrundfarbe</string>
-  <string name="ShadowColor">Trennbalken Farbe</string>
-  <string name="SectionColor">Überschrift Farbe</string>
-  <string name="TitleColor">Titelfarbe</string>
-  <string name="SummaryColor">Hinweis/Untertitel Farbe</string>
-  <string name="MediaColor">\'Foto/Sticker\' Textfarbe</string>
+  <string name="BackgroundColor">Hintergrund</string>
+  <string name="ShadowColor">Trennbalken</string>
+  <string name="SectionColor">Überschrift</string>
+  <string name="TitleColor">Titel</string>
+  <string name="SummaryColor">Hinweis/Untertitel</string>
+  <string name="MediaColor">\'Foto/Sticker\' Text</string>
   <string name="ThemesAppMsg">Möchtest Du Themen von anderen Plus Messenger Mitgliedern sehen?</string>
+  <string name="UseDeviceFont">Systemschrift verwenden</string>
+  <string name="AppWillRestart">Der Plus Messenger wird neu gestartet</string>
+  <string name="GroupIconColor">Gruppensymbole</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 811c653bc..1e45fea93 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Ubicación</string>
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Archivo</string>
+    <string name="ChatCamera">Cámara</string>
     <string name="NoMessages">Aún sin mensajes...</string>
     <string name="ForwardedMessage">Mensaje reenviado</string>
     <string name="From">De</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Obteniendo información...</string>
     <string name="OpenInBrowser">Abrir en el navegador</string>
     <string name="CopyUrl">Copiar URL</string>
+    <string name="SendItems">Enviar %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s activó la autodestrucción en %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Activaste la autodestrucción en %1$s</string>
@@ -161,7 +163,7 @@
     <string name="NotificationGroupKickYou">%1$s te expulsó del grupo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s dejó el grupo %2$s</string>
     <string name="NotificationContactJoined">¡%1$s se unió a Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nDetectamos un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Privacidad y seguridad - Cerrar todas las otras sesiones.\n\nSi crees que alguien ha iniciado la sesión sin tu consentimiento, puedes activar la verificación en dos pasos, en los ajustes de privacidad y seguridad.\n\nAtentamente,\nEl equipo de Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nDetectamos un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Privacidad y seguridad - Sesiones activas y cerrar esa sesión.\n\nSi crees que alguien ha iniciado la sesión sin tu consentimiento, puedes activar la verificación en dos pasos, en los ajustes de privacidad y seguridad.\n\nAtentamente,\nEl equipo de Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s actualizó su foto de perfil</string>
     <string name="NotificationInvitedToGroupByLink">%1$s se unió al grupo %2$s con un enlace de invitación</string>
     <string name="Reply">Responder</string>
@@ -245,7 +247,6 @@
     <string name="ErrorOccurred">Ocurrió un error.</string>
     <!--stickers view-->
     <string name="Stickers">Stickers</string>
-    <string name="GeniusStickerPackName">Grandes personajes</string>
     <string name="StickersInfo">Los artistas pueden añadir sus propios packs de stickers usando el bot @stickers.\n\nLos usuarios pueden añadir stickers pulsando y eligiendo \"Añadir stickers\".</string>
     <string name="AddStickers">Añadir stickers</string>
     <string name="AddToStickers">Añadir a stickers</string>
@@ -294,7 +295,7 @@
     <string name="ContactJoined">Un contacto se unió a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor, considera que el soporte de Telegram está hecho por voluntarios. Respondemos lo antes posible, pero puede tomar tiempo.<![CDATA[<br><br>]]>Si quieres, mira las <![CDATA[<a href=“http://telegram.org/faq/es”>preguntas frecuentes de Telegram</a>]]>: tienen <![CDATA[<a href=“http://telegram.org/faq/es#solucin-de-problemas”>soluciones a problemas</a>]]>, y respuestas para la mayoría de las preguntas.</string>
+    <string name="AskAQuestionInfo">Por favor, considera que el soporte de Telegram está hecho por voluntarios. Respondemos lo antes posible, pero puede tomar tiempo.<![CDATA[<br><br>]]>Por favor, mira las <![CDATA[<a href=\"https://telegram.org/faq/es\">preguntas frecuentes de Telegram</a>]]>: tienen respuestas para la mayoría de las preguntas y <![CDATA[<a href=\"https://telegram.org/faq/es#solucin-de-problemas\">soluciones a problemas</a>]]>.</string>
     <string name="AskButton">Preguntar</string>
     <string name="TelegramFaq">Preguntas frecuentes</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/es</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">Vídeo editado</string>
     <string name="SendingVideo">Enviando vídeo...</string>
     <string name="CompressVideo">Comprimir Vídeo</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Compartir</string>
+    <string name="BotInvite">Añadir a un grupo</string>
+    <string name="BotSettings">Ajustes</string>
+    <string name="BotHelp">Ayuda</string>
+    <string name="BotStatusRead">tiene acceso a los mensajes</string>
+    <string name="BotStatusCantRead">no tiene acceso a los mensajes</string>
+    <string name="BotInfoTitle">¿Qué puede hacer este bot?</string>
+    <string name="BotStart">INICIAR</string>
     <!--button titles-->
     <string name="Next">Siguiente</string>
     <string name="Back">Atrás</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 te añadió</string>
     <string name="ActionAddUserSelf">un1 volvió al grupo</string>
     <string name="ActionAddUserSelfYou">Volviste al grupo</string>
-    <string name="UnsuppotedMedia">Este mensaje no lo admite tu versión de Telegram. Actualiza la app para verlo: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Este mensaje no está soportado en tu versión de Telegram. Actualiza la aplicación para verlo: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Vídeo</string>
     <string name="AttachLocation">Ubicación</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">No tienes aplicaciones que puedan manejar el tipo de archivo \'%1$s\'. Por favor, instala una para continuar.</string>
     <string name="InviteUser">Este usuario aún no tiene Telegram. ¿Enviarle una invitación?</string>
     <string name="AreYouSure">¿Quieres hacerlo?</string>
-    <string name="AddToTheGroup">¿Añadir a %1$s al grupo?\n\nNúmero de los últimos mensajes para reenviar:</string>
+    <string name="AddToTheGroupTitle">¿Añadir a %1$s al grupo %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Cantidad de últimos mensajes para reenviar:</string>
+    <string name="AddToTheGroup">¿Añadir a %1$s al grupo?</string>
+    <string name="UserAlreadyInGroup">Este usuario ya está en el grupo</string>
     <string name="ForwardMessagesTo">¿Reenviar mensajes a %1$s?</string>
     <string name="SendMessagesTo">¿Enviar mensajes a %1$s?</string>
     <string name="AreYouSureLogout">¿Quieres cerrar sesión?\n\nConsidera que puedes usar Telegram en todos tus dispositivos a la vez.\n\nRecuerda que, al cerrar sesión, eliminas todos tus chats secretos.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">¿Enviar mensajes a %1$s?</string>
     <string name="ForwardMessagesToGroup">¿Reenviar mensajes a %1$s?</string>
     <string name="FeatureUnavailable">Lo siento, esta característica no está disponible en tu país actualmente.</string>
+    <string name="NoUsernameFound">No hay ninguna cuenta de Telegram con este alias.</string>
+    <string name="BotCantJoinGroups">Este bot no puede unirse a grupos.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Rápida</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d stickers</string>
     <string name="Stickers_many">%1$d stickers</string>
     <string name="Stickers_other">%1$d stickers</string>
+    <string name="Photos_zero">%1$d fotos</string>
+    <string name="Photos_one">%1$d foto</string>
+    <string name="Photos_two">%1$d fotos</string>
+    <string name="Photos_few">%1$d fotos</string>
+    <string name="Photos_many">%1$d fotos</string>
+    <string name="Photos_other">%1$d fotos</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d mensajes adjuntos</string>
     <string name="ForwardedMessage_one">Mensaje adjunto</string>
@@ -805,10 +827,10 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s a las %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger para Android fue actualizada. Novedades en la versión 2.9:\n\n- Ojea, descarga y aplica temas para Plus Messenger:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
+    <string name="updateText">Plus Messenger para Android fue actualizada. Novedades en la versión 3.0:\n\n- Pestañas dedicadas para cada uno de tus packs de stickers personalizados en el panel de stickers. Añade stickers personalizados como: https://telegram.me/addstickers/Animals\n- Nueva API para bots, gratis para todos. Si eres un ingeniero, crea tus propios bots para juegos, servicios o integraciones. Conoce más en: https://telegram.org/blog/bot-revolution\n - Ojea, descarga y aplica temas para Plus Messenger. Nuevos temas cada día:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+    <string name="updateBuild">576</string>
     <!--Telegram+ Spanish-->
-    <string name="updatePlusText">\n\nNovedades en 2.9.1.4:\n\n- Opción para cambiar tamaño de la ventana de emoticonos en pantalla chat (opción en Ajustes/Mensajes)\n- Opción para cambiar nivel de compresión al compartir vídeos\n- Añadidos MOD para ajustar colores en pantalla Ajustes/Tematización\n- Añadido MODs distintos para nombre de reenvío en globo derecho e izquierdo en pantalla chat\n- Añadido MOD para ajustar colores de iconos en pantalla Contactos\n- Añadido MOD para cambiar color de texto \'Foto/Sticker\' en pantalla principal\n- Solución de errores</string>
+    <string name="updatePlusText">\n\nNovedades en 3.0.1.5:\n\n- Arregladas opciones para compartir música y sticker\n- Añadida opción para compartir tlf de un contacto\n - Añadida opción para añadir miembro directamente desde las opciones de grupo\n- Añadida opción para silenciar o activar notificaciones desde pantalla principal\n- Solución de errores</string>
     <string name="TelegramForAndroid">Plus Messenger para Android</string>
     <string name="Theming">Tematización</string>
     <string name="colorHexInvalid">¡Color hexadecimal inválido!</string>
@@ -932,4 +954,7 @@
     <string name="SummaryColor">Color de subtítulo/sumario</string>
     <string name="MediaColor">Color de texto \'Foto/Sticker\'</string>
     <string name="ThemesAppMsg">¿Te gustaría ver algunos temas creados por otros usuarios de Plus Messenger?</string>
+    <string name="UseDeviceFont">Usa fuente del teléfono</string>
+    <string name="AppWillRestart">Plus Messenger se reiniciará</string>
+    <string name="GroupIconColor">Color de icono de grupo</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-fr/strings.xml b/TMessagesProj/src/main/res/values-fr/strings.xml
index 47573d938..310043e79 100644
--- a/TMessagesProj/src/main/res/values-fr/strings.xml
+++ b/TMessagesProj/src/main/res/values-fr/strings.xml
@@ -243,7 +243,6 @@
   <string name="ErrorOccurred">Une erreur est survenue.</string>
   <!--stickers view-->
   <string name="Stickers">Autocollants</string>
-  <string name="GeniusStickerPackName">Grands esprits</string>
   <string name="StickersInfo">Les artistes peuvent ajouter leur propre paquet d\'autocollants en utilisant notre robot @stickers.\n\nLes utilisateurs peuvent ajouter des autocollants en les touchant et en choisissant \"Ajouter aux autocollants\".</string>
   <string name="AddStickers">Ajouter des autocollants</string>
   <string name="AddToStickers">Ajouter aux autocollants</string>
@@ -804,7 +803,7 @@
   <string name="formatDateAtTime">%1$s à %2$s</string>
   <!--update text--><!--
   <string name="updateText">Plus Messenger pour Android vient d\'être mis à jour. Nouveautés de la version 2.9: \n\n- Installez et partagez des paquets de stickers personnalisés comme celui-ci: this one: https://play.google.com/store/apps/details?id=es.rafalense.themes\n- Si vous êtes un artiste, créez vos paquets de stickers, en utilisant notre robot @stickers. \n\n- Utilisez Telegram avec Android Auto.</string>-->
-  <string name="updateBuild">546</string>
+  <string name="updateBuild">547</string>
     <!--Telegram+ French-->
     <string name="TelegramForAndroid">Plus Messenger pour Android</string>
     <string name="Theming">Thème</string>
diff --git a/TMessagesProj/src/main/res/values-hi/strings.xml b/TMessagesProj/src/main/res/values-hi/strings.xml
index efe424d82..5ff3738a8 100644
--- a/TMessagesProj/src/main/res/values-hi/strings.xml
+++ b/TMessagesProj/src/main/res/values-hi/strings.xml
@@ -1,28 +1,644 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <string name="auth_client_needs_enabling_title">एप्लिकेशन के लिए Google Play सेवाओं को सक्षम किए जाने की आवश्यकता है.</string>
-    <string name="auth_client_needs_installation_title">एप्लिकेशन के लिए Google Play सेवाओं के इंस्टॉलेशन की आवश्यकता है.</string>
-    <string name="auth_client_needs_update_title">एप्लिकेशन के लिए Google Play सेवाओं में अपडेट की आवश्यकता है.</string>
-    <string name="auth_client_play_services_err_notification_msg">Google Play सेवाएं त्रुटि</string>
-    <string name="auth_client_requested_by_msg">%1$s द्वारा अनुरोधित</string>
-    <string name="auth_client_using_bad_version_title">एप्लि. ने Google Play सेवाओं के खराब संस्करण के उपयोग का प्रयास किया.</string>
-    <string name="common_google_play_services_enable_button">Google Play सेवाएं सक्षम करें</string>
-    <string name="common_google_play_services_enable_text">जब तक आप Google Play सेवाएं सक्षम नहीं करते, तब तक यह एप्लिकेशन कार्य नहीं करेगा.</string>
-    <string name="common_google_play_services_enable_title">Google Play सेवाएं सक्षम करें</string>
-    <string name="common_google_play_services_install_button">Google Play सेवाएं पाएं</string>
-    <string name="common_google_play_services_install_text_phone">यह एप्लिकेशन Google Play सेवाओं के बिना नहीं चलेगा, जो आपके फ़ोन में नहीं हैं.</string>
-    <string name="common_google_play_services_install_text_tablet">यह एप्लिकेशन Google Play सेवाओं के बिना नहीं चलेगा, जो आपके टेबलेट में नहीं हैं.</string>
-    <string name="common_google_play_services_install_title">Google Play सेवाएं पाएं</string>
-    <string name="common_google_play_services_invalid_account_text">निर्दिष्ट खाता इस उपकरण पर मौजूद नहीं है. कृपया कोई भिन्न खाता चुनें.</string>
-    <string name="common_google_play_services_invalid_account_title">अमान्य खाता</string>
-    <string name="common_google_play_services_network_error_text">Google Play सेवाओं से कनेक्ट करने के लिए डेटा कनेक्शन की आवश्यकता है.</string>
-    <string name="common_google_play_services_network_error_title">नेटवर्क त्रुटि</string>
-    <string name="common_google_play_services_unknown_issue">Google Play सेवाओं के साथ अज्ञात समस्या.</string>
-    <string name="common_google_play_services_unsupported_text">Google Play सेवाएं, जिन पर आपके कुछ एप्लिकेशन निर्भर करते हैं, आपके उपकरण द्वारा समर्थित नहीं हैं. कृपया सहायता के लिए निर्माता से संपर्क करें.</string>
-    <string name="common_google_play_services_unsupported_title">Google Play सेवाएं</string>
-    <string name="common_google_play_services_update_button">अपडेट करें</string>
-    <string name="common_google_play_services_update_text">जब तक आप Google Play सेवाओं को अपडेट नहीं करते, तब तक यह एप्लिकेशन नहीं चलेगा.</string>
-    <string name="common_google_play_services_update_title">Google Play सेवाएं अपडेट करें</string>
-    <string name="common_signin_button_text">प्रवेश करें</string>
-    <string name="common_signin_button_text_long">Google से प्रवेश करें</string>
+  <string name="LanguageName">अंग्रेजी</string>
+  <string name="LanguageNameInEnglish">Hindi</string>
+  <string name="LanguageCode">hi</string>
+  <!--signin view-->
+  <string name="YourPhone">आपका फोन</string>
+  <string name="StartText">कृपया अपने देश कोड की पुष्टि करें और अपना फोन नंबर दर्ज करें।</string>
+  <string name="ChooseCountry">देश चुनें</string>
+  <string name="WrongCountry">गलत देश कोड</string>
+  <!--code enter view-->
+  <string name="YourCode">आपका कोड</string>
+  <string name="SentSmsCode">हमने एक एसएमएस के साथ एक सक्रियण कोड आपके फोन के लिए भेज दिया है</string>
+  <string name="CallText">हम आपको %1$d:%2$02d में कॉल करेंगे</string>
+  <string name="Calling">कॉल कर रहे...</string>
+  <string name="Code">कोड</string>
+  <string name="WrongNumber">गलत नंबर?</string>
+  <string name="DidNotGetTheCode">कोड नहीं मिला?</string>
+  <!--signup view-->
+  <string name="YourName">आपका शुभ नाम?</string>
+  <string name="RegisterText">अपना पहला और आखिरी नाम नियत करें</string>
+  <!--<string name="RegisterText">Set up your name and picture</string>-->
+  <string name="FirstName">पहला नाम (जरूरी)</string>
+  <string name="LastName">आखिरी नाम (वैकल्पिक)</string>
+  <string name="CancelRegistration">पंजीकरण रद्द करें</string>
+  <!--chats view-->
+  <string name="Settings">विन्यास</string>
+  <string name="Contacts">सम्पर्क</string>
+  <string name="NewGroup">नया समूह</string>
+  <string name="Yesterday">बिता कल</string>
+  <string name="NoResult">कोई परिणाम नहीं</string>
+  <string name="NoChats">अभीतक वार्तालाप नहीं</string>
+  <string name="NoChatsHelp">संदेश भेजना शुरू करने के लिए नीचे\n दायीं कोने में लिखें बटन दबाएँ\n या अधिक विकल्पों के लिए मेनू बटन दबाएँ।</string>
+  <string name="WaitingForNetwork">नेटवर्क का इंतज़ार...</string>
+  <string name="Connecting">जुड़ रहा है...</string>
+  <string name="Updating">अद्यतन कर रहा है...</string>
+  <string name="NewSecretChat">नया गुप्त वार्तालाप</string>
+  <string name="AwaitingEncryption">%s के ऑनलाइन आने में प्रतीक्षारत...</string>
+  <string name="EncryptionRejected">गुप्त वार्तालाप रद्द</string>
+  <string name="EncryptionProcessing">गुढीकरण कुंजियों का आदान प्रदान...</string>
+  <string name="EncryptedChatStartedOutgoing">%s आपके गुप्त वार्तालाप से जुड़े।</string>
+  <string name="EncryptedChatStartedIncoming">आप गुप्त वार्तालाप से जुड़े।</string>
+  <string name="ClearHistory">इतिहास साफ करें</string>
+  <string name="DeleteChat">मिटाएँ और निकलें</string>
+  <string name="DeleteChatUser">वार्तालाप मिटाएँ</string>
+  <string name="HiddenName">खाता मिटाएँ?</string>
+  <string name="SelectChat">वार्तालाप चुनें</string>
+  <string name="PhotoTip">टैप करें और देखने के लिए पकड़ें</string>
+  <string name="CompatibilityChat">%1$s टेलीग्राम के एक पुराने संस्करण का उपयोग कर रहा है, जिसके कारण गुप्त तस्वीरें संगतता मोड में दिखाया जाएंगी।\n\nएकबार %2$s टेलीग्राम को अद्यतन करे, तब तस्वीरें 1 मिनट या उससे कम समयक के साथ \'देखने के लिए टैप करें और पकड़ें\' मोड में‌ काम करना शुरु कर देंगी, और आपको सूचित किया जाएगा जब भी दुसरा पक्ष स्क्रीनशॉट लेता है।</string>
+  <string name="SearchMessages">संदेश</string>
+  <!--broadcasts-->
+  <string name="NewBroadcastList">नई प्रसारण सूचि</string>
+  <string name="EnterListName">सूचि का नाम दर्ज करें</string>
+  <string name="YouCreatedBroadcastList">आपने एक प्रसारण सूचि बनाया</string>
+  <string name="AddRecipient">प्राप्तकर्ता जोड़ें</string>
+  <string name="KickFromBroadcast">प्रसारण सूचि से हटाएँ</string>
+  <!--documents view-->
+  <string name="SelectFile">फाइल चुनें</string>
+  <string name="FreeOfTotal">%2$s में से %1$s खाली </string>
+  <string name="UnknownError">अनजान त्रुटि</string>
+  <string name="AccessError">पहुँच त्रुटि</string>
+  <string name="NoFiles">अभीतक कोई फाइल नहीं...</string>
+  <string name="FileUploadLimit">फाइल का आकार %1$s से बड़ा नहीं होना चाहिए</string>
+  <string name="NotMounted">संग्रहण माउंट नहीं</string>
+  <string name="UsbActive">यूएसबी स्थानांतरण सक्रिय</string>
+  <string name="InternalStorage">आंतरिक संग्रहण</string>
+  <string name="ExternalStorage">बाह्य संग्रहण</string>
+  <string name="SystemRoot">तंत्र मूल</string>
+  <string name="SdCard">एसडी कार्ड</string>
+  <string name="Folder">फोल्डर</string>
+  <!--chat view-->
+  <string name="Invisible">अदृश्य</string>
+  <string name="Typing">लिख रहे...</string>
+  <string name="IsTyping">लिख रहे हैं...</string>
+  <string name="AreTyping">लिख रहे हैं...</string>
+  <string name="GotAQuestion">टेलीग्राम के बारे\nमें कोई प्रश्न?</string>
+  <string name="ChatTakePhoto">फोटो लें</string>
+  <string name="ChatGallery">गैलरी</string>
+  <string name="ChatLocation">स्थान</string>
+  <string name="ChatVideo">विडियो</string>
+  <string name="NoMessages">अभीतक यहाँ कोई संदेश नहीं...</string>
+  <string name="ForwardedMessage">अग्रेषित संदेश</string>
+  <string name="From">से</string>
+  <string name="NoRecent">हाल का नहीं</string>
+  <string name="Message">संदेश</string>
+  <string name="TypeMessage">संदेश</string>
+  <string name="ShareMyContactInfo">सम्पर्क साझा करें</string>
+  <string name="AddToContacts">सम्पर्क में‌ जोड़ें</string>
+  <string name="EncryptedPlaceholderTitleIncoming">%s ने आपको गुप्त वार्तालाप के लिए आमंत्रित किया है।</string>
+  <string name="EncryptedPlaceholderTitleOutgoing">आपने %s को गुप्त वार्तालाप के लिए आमंत्रित किया है।</string>
+  <string name="EncryptedDescriptionTitle">गुप्त वार्तालाप:</string>
+  <string name="EncryptedDescription1">आद्योपांत गुढ़ीकरण करें</string>
+  <string name="EncryptedDescription2">सर्वर पर कोई निशान मत छोड़ें</string>
+  <string name="EncryptedDescription3">स्वत:-नष्ट घड़ी है</string>
+  <string name="EncryptedDescription4">अग्रेषण की अनुमति नहीं</string>
+  <string name="YouWereKicked">इस समूह से आप हटा दिए गए</string>
+  <string name="YouLeft">आपने इस समूह को छोड़ दिया</string>
+  <string name="DeleteThisGroup">इस समूह को मिटाएँ</string>
+  <string name="DeleteThisChat">इस वार्तालाप को मिटाएँ</string>
+  <string name="SlideToCancel">स्लाइड कर रद्द करें</string>
+  <string name="SaveToDownloads">डाउनलोड में सहेजें</string>
+  <string name="ApplyLocalizationFile">स्थानीयकरण फाइल लागू करें</string>
+  <string name="UnsupportedAttachment">असमर्थित दस्तावेज</string>
+  <string name="SetTimer">स्वत:-नष्ट घड़ी नियत करें</string>
+  <!--notification-->
+  <string name="MessageLifetimeChanged">%1$s ने स्वत:-नष्ट घड़ी को %2$s पर नियत किया</string>
+  <string name="MessageLifetimeChangedOutgoing">आपने स्वत:-नष्ट घड़ी को %1$s पर नियत किया</string>
+  <string name="MessageLifetimeRemoved">%1$s ने स्वत:-नष्ट घड़ी को निष्क्रिय किया</string>
+  <string name="MessageLifetimeYouRemoved">आपने आत्म-विनाशी घड़ी को निष्क्रिय किया</string>
+  <string name="YouHaveNewMessage">आपके लिए एक नया सन्देश है</string>
+  <string name="NotificationMessageText">%1$s: %2$s</string>
+  <string name="NotificationMessageNoText">%1$s ने आपको एक सन्देश भेजा है</string>
+  <string name="NotificationMessagePhoto">%1$s ने आपको एक फोटो भेजा है</string>
+  <string name="NotificationMessageVideo">%1$s ने आपको एक विडियो भेजा है</string>
+  <string name="NotificationMessageContact">%1$s ने आपसे एक कांटेक्ट शेयर किया है</string>
+  <string name="NotificationMessageMap">%1$s ने आपको एक स्थान भेजा है</string>
+  <string name="NotificationMessageAudio">%1$s ने आपको एक ऑडियो भेजा है</string>
+  <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
+  <string name="NotificationMessageGroupNoText">%1$s ने %2$s समूह को एक सन्देश भेजा है</string>
+  <string name="NotificationMessageGroupPhoto">%1$s ने %2$s समूह को एक फोटो भेजा है</string>
+  <string name="NotificationMessageGroupVideo">%1$s ने %2$s समूह को एक विडियो भेजा है</string>
+  <string name="NotificationMessageGroupContact">%1$s ने %2$s समूह में एक कांटेक्ट शेयर किया है</string>
+  <string name="NotificationMessageGroupMap">%1$s ने %2$s समूह को एक स्थान भेजा है</string>
+  <string name="NotificationMessageGroupAudio">%1$s ने %2$s समूह को एक ऑडियो भेजा है</string>
+  <string name="NotificationInvitedToGroup">%1$s ने आपको %2$s समूह में आमंत्रित किया</string>
+  <string name="NotificationEditedGroupName">%1$s ने %2$s समूह का नाम संपादित किया</string>
+  <string name="NotificationEditedGroupPhoto">%1$s ने %2$s समूह का फोटो संपादित किया</string>
+  <string name="NotificationGroupAddMember">%1$s ने %3$s को %2$s समूह में आमंत्रित किया</string>
+  <string name="NotificationGroupKickMember">%1$s ने %3$s को %2$s समूह से हटाया</string>
+  <string name="NotificationGroupKickYou">%1$s ने आपको %2$s समूह से हटाया</string>
+  <string name="NotificationGroupLeftMember">%1$s ने %2$s समूह छोड़ दिया</string>
+  <string name="NotificationContactJoined">%1$s टेलीग्राम से जुड़े!</string>
+  <string name="NotificationContactNewPhoto">%1$s ने प्रोफ़ाइल अपडेट किया</string>
+  <string name="Reply">उत्तर दें</string>
+  <string name="ReplyToGroup">%1$s को उत्तर दें</string>
+  <string name="ReplyToUser">%1$s को उत्तर दें</string>
+  <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
+  <!--contacts view-->
+  <string name="SelectContact">कांटेक्ट चुनें</string>
+  <string name="NoContacts">अभी तक कोई कॉन्टेक्ट्स नहीं</string>
+  <string name="YesterdayAt">बिता कल</string>
+  <string name="Online">ऑनलाइन</string>
+  <string name="LastSeen">लास्ट सीन</string>
+  <string name="LastSeenDate">लास्ट सीन</string>
+  <string name="InviteFriends">दोस्तों को आमंत्रण</string>
+  <string name="GlobalSearch">वैश्विक खोज</string>
+  <string name="Lately">हाल हीं में आखिरी बार देखा</string>
+  <string name="WithinAWeek">एक सप्ताह के अन्दर आखिरी बार देखा</string>
+  <string name="WithinAMonth">एक महीने के अन्दर आखिरी बार देखा</string>
+  <string name="ALongTimeAgo">बहुत पहले आखिरी बार देखा</string>
+  <string name="NewMessageTitle">नया संदेश</string>
+  <!--group create view-->
+  <string name="SendMessageTo">इन्हें संदेश भेजें...</string>
+  <string name="EnterGroupNamePlaceholder">समूह का नाम दर्ज करें</string>
+  <string name="GroupName">समूह का नाम</string>
+  <string name="MembersCount">%1$d/%2$d सदस्य</string>
+  <!--group info view-->
+  <string name="SharedMedia">साझा मिडिया</string>
+  <string name="SETTINGS">विन्यास</string>
+  <string name="AddMember">सदस्य जोड़ें</string>
+  <string name="DeleteAndExit">मिटाएँ और समूह को छोड़ें</string>
+  <string name="Notifications">नोटिफिकेशन्स</string>
+  <string name="KickFromGroup">समूह से हटायें</string>
+  <!--contact info view-->
+  <string name="ShareContact">शेयर</string>
+  <string name="AddContact">जोड़ें</string>
+  <string name="AddContactTitle">सम्पर्क जोड़ें</string>
+  <string name="BlockContact">ब्लॉक</string>
+  <string name="EditContact">संपादित करें</string>
+  <string name="DeleteContact">मिटाएँ</string>
+  <string name="PhoneHome">घर</string>
+  <string name="PhoneMobile">मोबाइल</string>
+  <string name="PhoneWork">कार्य</string>
+  <string name="PhoneOther">अन्य</string>
+  <string name="PhoneMain">मुख्य</string>
+  <string name="StartEncryptedChat">गुप्त वार्तालाप चालू करें</string>
+  <string name="CreateEncryptedChatError">एक त्रुटि हुई</string>
+  <string name="EncryptionKey">एन्क्रिप्शन कुंजी</string>
+  <string name="MessageLifetime">आत्म-विनाशी घड़ी</string>
+  <string name="ShortMessageLifetimeForever">ऑफ</string>
+  <string name="EncryptionKeyDescription">यह छवि इस गुप्त वार्तालाप के लिए गुढ़ीकरण कुंजी का एक दृश्य है <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>के साथ।<![CDATA[<br><br>]]>अगर यह छवि एक ही लग रहा है, <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]> फोन पर, तो आपका वार्तालाप 200%% सुरक्षित है।<![CDATA[<br><br>]]>और अधिक जानें telegram.org</string>
+  <string name="NumberUnknown">अनजा</string>
+  <string name="Info">जानकारी</string>
+  <string name="Phone">फोन</string>
+  <!--usernames-->
+  <string name="Username">यूज़रनेम</string>
+  <string name="UsernamePlaceholder">आपका यूज़रनेम</string>
+  <string name="UsernameInUse">माफ़ कीजियेगा, यह यूज़रनेम पहले ही लिया जा चुका है</string>
+  <string name="UsernameInvalid">माफ़ कीजियेगा, यह यूज़रनेम अमान्य है</string>
+  <string name="UsernameInvalidShort">यूज़रनेम में न्यूनतम 5 अक्षर होने चाहिए</string>
+  <string name="UsernameInvalidLong">यूज़रनेम 32 अक्षरों से अधिक नहीं होना चाहिए</string>
+  <string name="UsernameInvalidStartNumber">माफ़ कीजियेगा, यूज़रनेम नंबर से शुरू नहीं हो सकता</string>
+  <string name="UsernameHelp">आप <![CDATA[<b>]]>टेलीग्राम<![CDATA[</b>]]> पर एक यूज़रनेम चुन सकते हैं| अगर आप ऐसा करते हैं तो दूसरे लोग आपको इस यूज़रनेम से ढूंड सकते हैं और आपसे संपर्क कर सकते हैं बिना आपका फ़ोन नंबर जाने| <![CDATA[<br><br>]]>आप <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> और अंडरस्कोर का इस्तेमाल कर सकते हैं| यूज़रनेम न्यूनतम <![CDATA[<b>]]>5<![CDATA[</b>]]> अक्षरों का होना चाहिए|</string>
+  <string name="UsernameChecking">यूज़रनेम जाँच रहे हैं...</string>
+  <string name="UsernameAvailable">%1$s उपलब्ध है|</string>
+  <string name="UsernameEmpty">कोई नहीं</string>
+  <string name="ErrorOccurred">एक त्रुटि हुई।</string>
+  <!--stickers view-->
+  <!--settings view-->
+  <string name="ResetNotificationsText">`सूचनाओं के विन्यास को पुनः तयशुदा पर नियत करें </string>
+  <string name="TextSize">संदेश का पाठ आकार</string>
+  <string name="AskAQuestion">प्रश्न पूछें</string>
+  <string name="EnableAnimations">एनिमेशन लागू करें</string>
+  <string name="Unblock">अनब्लॉक</string>
+  <string name="UnblockText">उस उपयोक्ता को अनावरोधित करने के लिए टैप कर पकड़ें</string>
+  <string name="NoBlocked">अभीतक कोई अवरुद्ध उपयोक्ता नहीं</string>
+  <string name="MessageNotifications">संदेश सूचनाएँ</string>
+  <string name="Alert">चेतावनी</string>
+  <string name="MessagePreview">संदेश पूर्वावलोकन</string>
+  <string name="GroupNotifications">समूह सूचनाएँ</string>
+  <string name="Sound">ध्वनि</string>
+  <string name="InAppNotifications">अनुप्रयोग के अंतर्गत अधिसूचनाएँ</string>
+  <string name="InAppSounds">अनुप्रयोग के अंतर्गत ध्वनियाँ</string>
+  <string name="InAppVibrate">अनुप्रयोग के अंतर्गत कंपन</string>
+  <string name="Vibrate">कंपन</string>
+  <string name="InAppPreview">अनुप्रयोग के अंतर्गत पूर्वावलोकन</string>
+  <string name="Reset">पुनः नियत करें</string>
+  <string name="ResetAllNotifications">सारे सूचनाओं को पुनः नियत करें</string>
+  <string name="UndoAllCustom">सभी कस्टम नोटिफिकेशन सेटिंग्स को सभी कॉन्टेक्ट्स और समूहों के लिए पूर्ववत् करें</string>
+  <string name="NotificationsAndSounds">सारे सूचनाओं को पुनः नियत करें</string>
+  <string name="BlockedUsers">ब्लॉक्ड यूज़र्स</string>
+  <string name="LogOut">लॉग आउट</string>
+  <string name="NoSound">ध्वनि नहीं</string>
+  <string name="Default">तयशुदा</string>
+  <string name="Support">सहायता</string>
+  <string name="ChatBackground">वार्तालाप पृष्ठभूमि</string>
+  <string name="MessagesSettings">संदेश</string>
+  <string name="SendByEnter">इंटर के द्वारा भेजें</string>
+  <string name="TerminateAllSessions">अन्य सभी सत्रों को समाप्त करें</string>
+  <string name="Events">घटनाक्रम</string>
+  <string name="ContactJoined">कांटेक्ट टेलीग्राम में शामिल हुआ</string>
+  <string name="Pebble">PEBBLE</string>
+  <string name="Language">भाषा</string>
+  <string name="AskButton">स्वयंसेवक से पुछें</string>
+  <string name="TelegramFaq">टेलीग्राम FAQ</string>
+  <string name="TelegramFaqUrl">https://telegram.org/faq</string>
+  <string name="DeleteLocalization">स्थानीयकरण मिटाएँ?</string>
+  <string name="IncorrectLocalization">गलत स्थानीयकरण फाइल</string>
+  <string name="Enabled">सक्रिय</string>
+  <string name="Disabled">निष्क्रिय</string>
+  <string name="NotificationsService">सूचना सेवा</string>
+  <string name="NotificationsServiceDisableInfo">अधिसूचनाएँ प्राप्त करने के लिए अगर गूगल प्ले की सेवाओं आपके लिए पर्याप्त हैं, तो आप अधिसूचना सेवा को निष्क्रिय कर सकते हैं। लेकिन हम अनुप्रयोग को पृष्ठभूमि में सक्षम छोड़ने के लिए और तत्काल सूचनाएँ प्राप्त करने के लिए चलाए रखने के लिए सलाह देते हैं।</string>
+  <string name="SortBy">द्वारा क्रमबद्ध</string>
+  <string name="ImportContacts">इम्पोर्ट कॉन्टेक्ट्स</string>
+  <string name="SortFirstName">पहला नाम</string>
+  <string name="SortLastName">आखिरी नाम</string>
+  <string name="LedColor">LED का रंग</string>
+  <string name="PopupNotification">पॉपअप अधिसूचनाएँ</string>
+  <string name="NoPopup">पॉपअप नहीं</string>
+  <string name="OnlyWhenScreenOn">तभी जब स्क्रीन \"ऑन\" हो</string>
+  <string name="OnlyWhenScreenOff">तभी जब स्क्रीन \"ऑफ\" हो</string>
+  <string name="AlwaysShowPopup">पॉपअप हमेशा दिखाएँ</string>
+  <string name="BadgeNumber">Badge Counter</string>
+  <string name="Short">छोटा</string>
+  <string name="Long">बड़ा</string>
+  <string name="SystemDefault">तंत्र तयशुदा</string>
+  <string name="SettingsDefault">विन्यास तयशुदा</string>
+  <string name="AutomaticMediaDownload">स्वचालित मिडिया डाउनलोड</string>
+  <string name="WhenUsingMobileData">मोबाइल डेटा का इस्तेमाल करते समय</string>
+  <string name="WhenConnectedOnWiFi">वाई-फाई से जुड़े होने पर</string>
+  <string name="WhenRoaming">रोमिंग पर</string>
+  <string name="NoMediaAutoDownload">मिडिया नहीं</string>
+  <string name="SaveToGallerySettings">गैलरी में सेव करें </string>
+  <string name="EditName">नाम संपादित करें</string>
+  <string name="NotificationsPriority">प्राथमिकता</string>
+  <string name="NotificationsPriorityDefault">तयशुदा</string>
+  <string name="NotificationsPriorityLow">निम्न</string>
+  <string name="NotificationsPriorityHigh">उच्च</string>
+  <string name="NotificationsPriorityMax">अधिकत्तम</string>
+  <string name="RepeatNotificationsNever">कभी नहीं</string>
+  <string name="RepeatNotifications">सूचनाएँ दोहराएँ</string>
+  <string name="PhoneNumberHelp">यहाँ आप अपना टेलीग्राम नंबर बदल सकते हैं। आपका खाता और आपके सभी डेटा — संदेश, मीडिया, सम्पर्क, इत्यादि को नये नंबर में खिसका दिया जाएगा।\n\n<![CDATA[<b>महत्वपूर्ण:</b>]]> आपके सभी टेलीग्राम सम्पर्कों के पता-पुस्तिका मेंआपका <![CDATA[<b>नया नंबर</b>]]> जुड़ जाएगी, अगर आपने उन्हें अवरुद्ध नहीं किया हो और उनके पास आपका पुराना नंबर हो।</string>
+  <string name="PhoneNumberAlert">आपके सभी टेलीग्राम सम्पर्कों के पता-पुस्तिका में आपका नया नंबर जुड़ जाएगी, अगर आपने उन्हें अवरुद्ध नहीं किया हो और उनके पास आपका पुराना नंबर हो।</string>
+  <string name="PhoneNumberChange">नंबर बदलें</string>
+  <string name="ChangePhoneNewNumber">नया नंबर</string>
+  <string name="ChangePhoneHelp">हम आपके नये नंबर पर एसएमएस के द्वारा एक सक्रियण कोड भेजेंगे।</string>
+  <string name="ChangePhoneNumberOccupied">यह नंबर %1$s पहले से ही एक टेलीग्राम खाते से जुड़ा है। कृपया उस खाते को हटाकर नये नंबर का इस्तेमाल करें।</string>
+  <string name="NotificationsOther">अन्य</string>
+  <!--sessions view-->
+  <!--passcode view-->
+  <!--media view-->
+  <!--map view-->
+  <string name="Map">नक्सा</string>
+  <string name="Satellite">उपग्रह</string>
+  <string name="Hybrid">मिश्रित</string>
+  <string name="MetersAway">मी. दूर</string>
+  <string name="KMetersAway">कि.मी. दूर</string>
+  <!--photo gallery view-->
+  <string name="ShowAllMedia">सभी मिडिया दिखायें</string>
+  <string name="SaveToGallery">गैलरी में सेव करें </string>
+  <string name="Of">%1$d of %2$d</string>
+  <string name="Gallery">गैलरी</string>
+  <string name="AllPhotos">सभी फोटोज</string>
+  <string name="NoPhotos">अभीतक कोई तस्वीर नहीं</string>
+  <string name="PleaseDownload">कृपया पहले मिडिया डाउनलोड करें</string>
+  <!--password view-->
+  <!--privacy settings-->
+  <string name="PrivacySettings">गोपनीयता और सुरक्षा</string>
+  <string name="PrivacyTitle">गोपनीयता</string>
+  <string name="PrivacyLastSeen">अंतिम बार देखा</string>
+  <string name="LastSeenEverybody">प्रत्येक</string>
+  <string name="LastSeenContacts">मेरे सम्पर्क</string>
+  <string name="LastSeenNobody">कोई नहीं</string>
+  <string name="LastSeenEverybodyMinus">प्रत्येक (-%1$d)</string>
+  <string name="LastSeenContactsPlus">मेरे सम्पर्क (+%1$d)</string>
+  <string name="LastSeenContactsMinus">मेरे सम्पर्क (-%1$d)</string>
+  <string name="LastSeenContactsMinusPlus">मेरे सम्पर्क (-%1$d, +%2$d)</string>
+  <string name="LastSeenNobodyPlus">कोई नहीं (+%1$d)</string>
+  <string name="SecurityTitle">सुरक्षा</string>
+  <string name="DeleteAccountTitle">खाता स्वत:-नष्ट</string>
+  <string name="DeleteAccountIfAwayFor">अगर आप दूर हैं </string>
+  <string name="DeleteAccountHelp">अगर आप इस अवधि के भीतर कम से कम एक बार भी प्रवेश नहीं करते हैं, तो आपके खाते को सभी समूहों, संदेशों और संपर्कों के साथ हटा दिया जाएगा।</string>
+  <string name="DeleteAccountNowConfirmation">आपका खाता मिटाएँ?</string>
+  <string name="LastSeenHelp">जो आपको पिछला बार देख सकते हैं को बदलें।</string>
+  <string name="LastSeenTitle">कौन आपको पिछला बार देख सकता है?</string>
+  <string name="AddExceptions">अपवाद जोड़ें</string>
+  <string name="CustomHelp">महत्वपूर्ण: आप उन लोगों के अंतिम दिखा समय नहीं‌ देख पाएँगे जिनके साथ आपने अपना अंतिम देखा समय साझा नहीं किया हो। उसके बजाय लगभग पिछली बार दिखा (एक महीने के भीतर, एक सप्ताह के भीतर, हाल ही में) दिखाया जाएगा।</string>
+  <string name="AlwaysShareWith">के साथ हमेशा साझा करें</string>
+  <string name="NeverShareWith">के साथ कभी साझा नहीं करेंं</string>
+  <string name="CustomShareSettingsHelp">ये विन्यास उपर के मानों को हटा देगा।</string>
+  <string name="AlwaysShareWithTitle">हमेशा साझा करें</string>
+  <string name="AlwaysShareWithPlaceholder">इन उपयोक्तायों से हमेशा साझा करें...</string>
+  <string name="NeverShareWithTitle">कभी नहीं साझा करेंं</string>
+  <string name="NeverShareWithPlaceholder">इन उपयोक्तायों से साझा कभी नहीं करें...</string>
+  <string name="EmpryUsersPlaceholder">उपयोक्ता जोड़ें</string>
+  <string name="PrivacyFloodControlError">क्षमा करें, बहुत सारे अनुरोध है। अभी गोपनीयता विन्यास बदलने में असमर्थ, कृपया प्रतीक्षा करें।</string>
+  <string name="ClearOtherSessionsHelp">इसे छोड़ अन्य उपकरणों से लॉग-आउट करें।</string>
+  <string name="RemoveFromListText">उस उपयोक्ता को हटाने के लिए टैप कर पकड़ें।</string>
+  <!--edit video view-->
+  <string name="EditVideo">विडियो संपादित करें</string>
+  <string name="OriginalVideo">मूल विडियो </string>
+  <string name="EditedVideo">संपादित विडियो</string>
+  <string name="SendingVideo">विडियो भेज रहा है...</string>
+  <string name="CompressVideo">विडियो संपीड़ित करें</string>
+  <!--bot-->
+  <!--button titles-->
+  <string name="Next">अगला</string>
+  <string name="Back">पीछे</string>
+  <string name="Done">पूर्ण</string>
+  <string name="Open">खोलें</string>
+  <string name="Cancel">रद्द करें</string>
+  <string name="Add">जोड़ें</string>
+  <string name="Edit">संपादन</string>
+  <string name="Send">भेजें</string>
+  <string name="Call">कॉल</string>
+  <string name="Copy">प्रतिलिपि</string>
+  <string name="Delete">मिटाएँ</string>
+  <string name="Forward">अग्रेषित करें</string>
+  <string name="Retry">पुन: प्रयास करें</string>
+  <string name="FromCamera">कमरे से</string>
+  <string name="FromGalley">गैलरी से</string>
+  <string name="DeletePhoto">तस्वीर मिटाएँ</string>
+  <string name="Set">नियत करें</string>
+  <string name="OK">ठीक</string>
+  <!--messages-->
+  <string name="ActionKickUser">un1 ने un2 को हटाया</string>
+  <string name="ActionLeftUser">un1 ने समूह छोड़ा</string>
+  <string name="ActionAddUser">un1 ने un2 को जोड़ा</string>
+  <string name="ActionRemovedPhoto">un1 ने समूह की तस्वीर हटाई</string>
+  <string name="ActionChangedPhoto">un1 ने समूह की तस्वीर बदली</string>
+  <string name="ActionChangedTitle">un1 ने समूह का नाम un2 पर बदला</string>
+  <string name="ActionCreateGroup">un1 ने यह समूह बनाया</string>
+  <string name="ActionYouKickUser">आपने un2 को हटाया</string>
+  <string name="ActionYouLeftUser">आपने समूह छोड़ा</string>
+  <string name="ActionYouAddUser">आपने un2 को जोड़ा</string>
+  <string name="ActionYouRemovedPhoto">आपने समूह की तस्वीर हटा दिया</string>
+  <string name="ActionYouChangedPhoto">आपने समूह की तस्वीर बदल दिया</string>
+  <string name="ActionYouChangedTitle">आपने समूह का नाम un2 पर बदला</string>
+  <string name="ActionYouCreateGroup">आपने यह समूह बनाया</string>
+  <string name="ActionKickUserYou">un1 ने आपको हटाया</string>
+  <string name="ActionAddUserYou">un1 ने आपको जोड़ा</string>
+  <string name="AttachPhoto">फोटो</string>
+  <string name="AttachVideo">वीडियो</string>
+  <string name="AttachLocation">लोकेशन</string>
+  <string name="AttachContact">कांटेक्ट</string>
+  <string name="AttachAudio">ऑडियो</string>
+  <string name="FromYou">आप</string>
+  <string name="ActionTakeScreenshootYou">आपने एक स्क्रीनशॉट लिया!</string>
+  <string name="ActionTakeScreenshoot">un1 ने एक स्क्रीनशॉट लिया!</string>
+  <!--Alert messages-->
+  <string name="InvalidPhoneNumber">अवैध फोन नंबर</string>
+  <string name="CodeExpired">कोड की अवधि समाप्त हो गई, कृपया पुनः लॉगिन करें </string>
+  <string name="FloodWait">बहुत सारे प्रयास, कृपया बाद में पुन: प्रयास करें</string>
+  <string name="InvalidCode">अवैध कोड</string>
+  <string name="InvalidFirstName">अवैध पहला नाम</string>
+  <string name="InvalidLastName">अवैध आखिरी नाम</string>
+  <string name="Loading">लोड हो रहा है...</string>
+  <string name="NoPlayerInstalled">आपके पास विडियो प्लेयर नहीं‌ है, कॄपया जारी रखने के लिए एक संस्थापित करें </string>
+  <string name="NoHandleAppInstalled">आपके पास \'%1$s\' फाइल प्रकार को खोलने के लिए अनुप्रयोग नहीं है, कृपया जारी रखने के लिए एक संस्थापित करें</string>
+  <string name="InviteUser">इस उपयोक्ता के पास टेलीग्राम नहीं‌ है, आमंत्रित करें?</string>
+  <string name="AreYouSure">क्या आप सुनिश्चित हैं?</string>
+  <string name="ForwardMessagesTo">संदेश %1$s को अग्रेषित करें?</string>
+  <string name="SendMessagesTo">%1$s को सन्देश भेजें?</string>
+  <string name="AreYouSureLogout">सुनिश्चित करें यदि आप लॉग आउट करना चाहते हैं?\n\nध्यान दें कि आप एक ही बार में अपने सभी उपकरणों पर टेलीग्राम का उपयोग कर सकते हैं।\n\nयाद रखें, लॉग आउट करने पर आपके सभी गुप्त चैट खत्म हो जाते हैं।</string>
+  <string name="AreYouSureSessions">सुनिश्चित करें यदि आप अन्य सभी सत्र समाप्त करना चाहते हैं?</string>
+  <string name="AreYouSureDeleteAndExit">सुनिश्चित करें यदि आप समूह मिटाकर इसे छोड़ना चाहते हैं?</string>
+  <string name="AreYouSureDeleteThisChat">सुनिश्चित करें यदि आप इस वार्तालाप को मिटाना चाहते हैं?</string>
+  <string name="AreYouSureShareMyContactInfo">सुनिश्चित करें यदि आप अपने सम्पर्क जानकारी को साझा करना चाहते हैं?</string>
+  <string name="AreYouSureBlockContact">सुनिश्चित करें यदि आप इस सम्पर्क को अवरोधित करना चाहते हैं?</string>
+  <string name="AreYouSureUnblockContact">सुनिश्चित करें यदि आप इस सम्पर्क को अनावरोधित करना चाहते हैं?</string>
+  <string name="AreYouSureDeleteContact">सुनिश्चित करें यदि आप इस सम्पर्क को मिटाना चाहते हैं?</string>
+  <string name="AreYouSureSecretChat">सुनिश्चित करें यदि आप एक गुप्त वार्तालाप शुरु करना चाहते हैं?</string>
+  <string name="AreYouSureRegistration">सुनिश्चित करें यदि आप पंजीकरण रद्द करना चाहते हैं?</string>
+  <string name="AreYouSureClearHistory">सुनिश्चित करें यदि आप इतिहास को साफ करना चाहते हैं?</string>
+  <string name="AreYouSureDeleteMessages">सुनिश्चित करें यदि आप %1$s को मिटाना चाहते हैं?</string>
+  <string name="SendMessagesToGroup">%1$s को सन्देश भेजें?</string>
+  <string name="ForwardMessagesToGroup">%1$s को संदेश अग्रेषित करें?</string>
+  <string name="FeatureUnavailable">माफ़ कीजियेगा, ये सुविधा आपके देश में उपलब्ध नहीं है</string>
+  <!--Intro view-->
+  <string name="Page1Title">टेलीग्राम</string>
+  <string name="Page2Title">तेज़</string>
+  <string name="Page3Title">मुफ्त</string>
+  <string name="Page4Title">सुरक्षित</string>
+  <string name="Page5Title">शक्तिशाली</string>
+  <string name="Page6Title">क्लाउड-बेस्ड</string>
+  <string name="Page7Title">निजी</string>
+  <string name="Page1Message">दुनिया का <![CDATA[<b>सबसे तेज़</b>]]> मैसेजिंग एप्प |<![CDATA[<br/>]]>ये <![CDATA[<b>मुफ्त</b>]]> और <![CDATA[<b>सुरक्षित</b>]]> है |</string>
+  <string name="Page2Message"><![CDATA[<b>टेलीग्राम</b>]]> संदेश तेजी से पहुँचाता है<![CDATA[<br/>]]>किसी अन्य अनुप्रयोग के मुकाबले।</string>
+  <string name="Page3Message"><![CDATA[<b>टेलीग्राम</b>]]> सदा के लिए निःशुल्क है। ना प्रचार।<![CDATA[<br/>]]>ना सदस्यता शुल्क।</string>
+  <string name="Page4Message"><![CDATA[<b>टेलीग्राम</b>]]> आपके संदेशों को हैकर के हमलों से<![CDATA[<br/>]]>सुरक्षित रखता है।</string>
+  <string name="Page5Message"><![CDATA[<b>टेलीग्राम</b>]]> में आपके मीडिया और चैट<![CDATA[<br/>]]>पर कोई आकार का सीमा नहीं है।</string>
+  <string name="Page6Message"><![CDATA[<b>टेलीग्राम</b>]]> आपको कई उपकरणों से अपने संदेशों<![CDATA[<br/>]]> तक पहुँचने देता है।</string>
+  <string name="Page7Message"><![CDATA[<b>टेलीग्राम</b>]]> के संदेश अत्यंत गुढ़िकृत होते हैं<![CDATA[<br/>]]>और स्वतः-नष्ट भी हो जा सकते हैं।</string>
+  <string name="StartMessaging">संदेश भेजना शुरु करें</string>
+  <!--plural-->
+  <string name="Online_zero">%1$d ऑनलाइन</string>
+  <string name="Online_one">%1$d ऑनलाइन</string>
+  <string name="Online_two">%1$d ऑनलाइन</string>
+  <string name="Online_few">%1$d ऑनलाइन</string>
+  <string name="Online_many">%1$d ऑनलाइन</string>
+  <string name="Online_other">%1$d ऑनलाइन</string>
+  <string name="Members_zero">कोई सदस्य नहीं</string>
+  <string name="Members_one">%1$d सदस्य</string>
+  <string name="Members_two">%1$d सदस्य</string>
+  <string name="Members_few">%1$d सदस्य</string>
+  <string name="Members_many">%1$d सदस्य</string>
+  <string name="Members_other">%1$d सदस्य</string>
+  <string name="AndMoreTyping_zero">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="AndMoreTyping_one">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="AndMoreTyping_two">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="AndMoreTyping_few">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="AndMoreTyping_many">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="AndMoreTyping_other">और %1$d लोग टाइप कर रहे हैं</string>
+  <string name="NewMessages_zero">कोई नये सन्देश नहीं</string>
+  <string name="NewMessages_one">%1$d नया संदेश</string>
+  <string name="NewMessages_two">%1$d नये संदेश</string>
+  <string name="NewMessages_few">%1$d नये संदेश</string>
+  <string name="NewMessages_many">%1$d नये संदेश</string>
+  <string name="NewMessages_other">%1$d नये संदेश</string>
+  <string name="messages_zero">कोई सन्देश नहीं</string>
+  <string name="messages_one">%1$d संदेश</string>
+  <string name="messages_two">%1$d संदेश</string>
+  <string name="messages_few">%1$d संदेश</string>
+  <string name="messages_many">%1$d संदेश</string>
+  <string name="messages_other">%1$d संदेश</string>
+  <string name="Seconds_zero">%1$d सेकंड</string>
+  <string name="Seconds_one">%1$d सेकंड</string>
+  <string name="Seconds_two">%1$d सेकंड</string>
+  <string name="Seconds_few">%1$d सेकंड</string>
+  <string name="Seconds_many">%1$d सेकंड</string>
+  <string name="Seconds_other">%1$d सेकंड</string>
+  <string name="Minutes_zero">%1$d मिनट</string>
+  <string name="Minutes_one">%1$d मिनट</string>
+  <string name="Minutes_two">%1$d मिनट</string>
+  <string name="Minutes_few">%1$d मिनट</string>
+  <string name="Minutes_many">%1$d मिनट</string>
+  <string name="Minutes_other">%1$d मिनट</string>
+  <string name="Hours_zero">%1$d घंटे</string>
+  <string name="Hours_one">%1$d घंटा</string>
+  <string name="Hours_two">%1$d घंटे</string>
+  <string name="Hours_few">%1$d घंटे</string>
+  <string name="Hours_many">%1$d घंटे</string>
+  <string name="Hours_other">%1$d घंटे</string>
+  <string name="Days_zero">%1$d दिन</string>
+  <string name="Days_one">%1$d दिन</string>
+  <string name="Days_two">%1$d दिन</string>
+  <string name="Days_few">%1$d दिन</string>
+  <string name="Days_many">%1$d दिन</string>
+  <string name="Days_other">%1$d दिन</string>
+  <string name="Weeks_zero">%1$d सप्ताह</string>
+  <string name="Weeks_one">%1$d सप्ताह</string>
+  <string name="Weeks_two">%1$d सप्ताह</string>
+  <string name="Weeks_few">%1$d सप्ताह</string>
+  <string name="Weeks_many">%1$d सप्ताह</string>
+  <string name="Weeks_other">%1$d सप्ताह</string>
+  <string name="Months_zero">%1$d महिनों</string>
+  <string name="Months_one">%1$d महिना</string>
+  <string name="Months_two">%1$d महिनों</string>
+  <string name="Months_few">%1$d महिनों</string>
+  <string name="Months_many">%1$d महिनों</string>
+  <string name="Months_other">%1$d महिनों</string>
+  <string name="Years_zero">%1$d सालों</string>
+  <string name="Years_one">%1$d साल</string>
+  <string name="Years_two">%1$d सालों</string>
+  <string name="Years_few">%1$d सालों</string>
+  <string name="Years_many">%1$d सालों</string>
+  <string name="Years_other">%1$d सालों</string>
+  <string name="Users_zero">%1$d उपयोक्तायों</string>
+  <string name="Users_one">%1$d उपयोक्ता</string>
+  <string name="Users_two">%1$d उपयोक्तायों</string>
+  <string name="Users_few">%1$d उपयोक्तायों</string>
+  <string name="Users_many">%1$d उपयोक्तायों</string>
+  <string name="Users_other">%1$d उपयोक्तायों</string>
+  <!--forwarded messages-->
+  <!--date formatters-->
+  <string name="formatterMonthYear">MMMM yyyy</string>
+  <string name="formatterMonth">MMM dd</string>
+  <string name="formatterYear">dd.MM.yy</string>
+  <string name="formatterYearMax">dd.MM.yyyy</string>
+  <string name="chatDate">MMMM d</string>
+  <string name="chatFullDate">MMMM d, yyyy</string>
+  <string name="formatterWeek">EEE</string>
+  <string name="formatterDay24H">HH:mm</string>
+  <string name="formatterDay12H">h:mm a</string>
+  <string name="formatDateAtTime">%1$s पर %2$s</string>
+  <!--update text-->
+  <string name="updateText">Plus Messenger for Android has been updated. New in Version 3.0:\n\n\n\n- Dedicated tabs for each one of your custom sticker sets in the sticker panel. Add custom stickers like https://telegram.me/addstickers/Animals\n- New bot API, free for everyone. If you\'re an engineer, create your own bots for games, services or integrations. Learn more at https://telegram.org/blog/bot-revolution\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+  <string name="updateBuild">576</string>
+  <!--Telegram+-->
+  <string name="updatePlusText"></string>
+  <string name="TelegramForAndroid">Android  के लिए प्लस मैसेंजर</string>
+  <string name="Theming">थीमिंग</string>
+  <string name="colorHexInvalid">रंग का हेक्स कोड गलत है!</string>
+  <string name="themeColor">थीम का रंग </string>
+  <string name="ResetThemeSettings">थीम सेटिंग्स को यथावत करे</string>
+  <string name="ResetThemeSettingsSum">सभी थीम सेटिंग्स पूर्ववत करे</string>
+  <string name="ResetThemeToastText">थीम सेटिंग्स को यथावत करे!</string>
+  <string name="General">सामान्य</string>
+  <string name="Screens">स्क्रीन्स</string>
+  <string name="MainScreen">मुख्य स्क्रीन</string>
+  <string name="ChatScreen">वार्तालाप स्क्रीन </string>
+  <string name="ContactsScreen">संपर्क स्क्रीन</string>
+  <string name="Header">हेडर</string>
+  <string name="Rows">पंक्तियाँ</string>
+  <string name="ChatList">वार्तालाप की सूची </string>
+  <string name="ChatsList">वार्तालापों की सूची</string>
+  <string name="ContactsList">संपर्क  लिस्ट</string>
+  <string name="HeaderColor">हैडर रंग</string>
+  <string name="NameColor">नाम का रंग</string>
+  <string name="NameSize">नाम का माप</string>
+  <string name="MessageColor">संदेश का रंग</string>
+  <string name="MessageSize">संदेश का माप</string>
+  <string name="TimeDateColor">समय /दिनांक का रंग</string>
+  <string name="TimeDateSize">समय /दिनांक का माप</string>
+  <string name="CountColor">गिनती का रंग</string>
+  <string name="CountSize">गिनती का माप</string>
+  <string name="RowColor">पंक्तियों का रंग</string>
+  <string name="CountBGColor">गिनती की पृष्ठभूमि का रंग</string>
+  <string name="StatusColor">स्टेटस का रंग</string>
+  <string name="StatusSize">स्टेटस का माप</string>
+  <string name="RBubbleColor">दायें बबल कलर </string>
+  <string name="LBubbleColor">बांये बबल कलर </string>
+  <string name="DateColor">दिनांक का रंग</string>
+  <string name="DateSize">दिनांक का माप</string>
+  <string name="DateBubbleColor">समय के बबल का रंग </string>
+  <string name="RTextColor">दायें टेक्स्ट का रंग</string>
+  <string name="LTextColor">बांये टेक्स्ट का रंग</string>
+  <string name="RTimeColor">दायें समय का रंग</string>
+  <string name="LTimeColor">बांये समय का रंग</string>
+  <string name="TimeSize">समय का माप</string>
+  <string name="EditTextColor">सन्देश लिखने का रंग</string>
+  <string name="EditTextSize">सन्देश लिखने का माप</string>
+  <string name="EditTextBGColor">सन्देश लिखने की पृष्ठभूमि का रंग</string>
+  <string name="EmojiViewBGColor">ईमोजी की पृष्ठभूमि का रंग</string>
+  <string name="EmojiViewTabColor">ईमोजी के पन्ने का रंग</string>
+  <string name="OnlineColor">Online का रंग</string>
+  <string name="ChatMusic">संगीत</string>
+  <string name="SaveTheme">थीम सेव करे</string>
+  <string name="SaveThemeSum">थीम को Telegram/Themes फोल्डर में सेव करे</string>
+  <string name="SaveThemeToastText">थीम सेव हो गयी!</string>
+  <string name="SavedTo">%1$s saved to %2$s</string>
+  <string name="SaveErrorMsg0">थीम अभी तक नहीं बनी। कृपया कोई भी एक MOD लगाये।</string>
+  <string name="restoreOkMsg">पसंद sdcard से पुनःस्थापित हो गयी</string>
+  <string name="restoreErrorMsg">%s में कोई पसंद की फाइल नहीं मिली</string>
+  <string name="NoMediaMessage">SD Card नहीं पाया गया</string>
+  <string name="EnterName">नाम डालें</string>
+  <string name="Themes">थीम्स</string>
+  <string name="ApplyTheme">थीम लगाये</string>
+  <string name="ApplyThemeSum">XML थीम स्थानिक फोल्डर से लगाये</string>
+  <string name="MemberColor">प्रतिभागी का रंग</string>
+  <string name="ChecksColor"> टिक का रंग</string>
+  <string name="MuteColor">मुक् का रंग</string>
+  <string name="SendLogs">Log भेजे</string>
+  <string name="SendLogsEmpty">कोई Log नहीं है</string>
+  <string name="SendIcon">भेजने का चिन्ह</string>
+  <string name="HideMobile">मेनू में से मोबाइल नंबर छुपाये</string>
+  <string name="FloatingPencilColor">तैरती पेंसिल का रंग</string>
+  <string name="FloatingBGColor">तैरती पृष्ठभूमि का रंग</string>
+  <string name="Community">G+ Community</string>
+  <string name="TypingColor">Typing का रंग</string>
+  <string name="EditTextIconsColor">सन्देश लिखने के चिह्नों का रंग</string>
+  <string name="NavigationDrawer">संचालन खाना</string>
+  <string name="OptionsList">विकल्पों की सूची</string>
+  <string name="ListColor">सूची का रंग</string>
+  <string name="OwnNameSize">नाम का माप</string>
+  <string name="PhoneColor">फ़ोन का रंग</string>
+  <string name="PhoneSize">फ़ोन का माप</string>
+  <string name="AvatarColor">अवतार का रंग</string>
+  <string name="IconColor">विकल्प के चिह्न का रंग</string>
+  <string name="OptionColor">विकल्प का रंग</string>
+  <string name="OptionSize">विकल्प का माप</string>
+  <string name="VersionColor">संस्करण का रंग</string>
+  <string name="VersionSize">संस्करण का माप</string>
+  <string name="HeaderTitleColor">हैडर शीर्षक का रंग</string>
+  <string name="HeaderIconsColor">हैडर के चिह्नों का रंग</string>
+  <string name="DividerColor">विभाजक का रंग</string>
+  <string name="AvatarRadius">अवतार की त्रिज्या</string>
+  <string name="SetMemberColor">प्रतिभागी का रंग</string>
+  <string name="ForwardNameColor">forward के नाम का रंग</string>
+  <string name="HeaderTitle">हैडर का शीर्षक</string>
+  <string name="ForwardNoQuote">दोहराये बिना forward करे</string>
+  <string name="DisableMessageClick">क्लिक पे pop-up निष्क्रिय करे</string>
+  <string name="ProfileScreen">समूह/मित्र का चरित्र</string>
+  <string name="HideBackground">विशेष पृष्ठभूमि छुपाये</string>
+  <string name="RLinkColor">दाहिनी कड़ी का रंग</string>
+  <string name="LLinkColor">बाहिनी कड़ी का रंग</string>
+  <string name="ThemeApplied">थीम लग गयी!</string>
+  <string name="ClickOkToRestart">पुनप्रारंभ के लिए OK दबाये</string>
+  <string name="ShowAndroidEmoji">फ़ोन के इमोजी दिखाए</string>
+  <string name="BubbleStyle">बबल का अंदाज़</string>
+  <string name="KeepOriginalFilename">फाइल का मूल नाम रखे</string>
+  <string name="KeepOriginalFilenameHelp">नंबर के बदले नाम_दिनांक के प्रारूप में सेव करे</string>
+  <string name="AvatarSize">अवतार का माप</string>
+  <string name="AvatarAlignTop">अवतार की ऊपर से सीध बांधे</string>
+  <string name="AvatarMarginLeft">अवतार से बायें का हाशिया</string>
+  <string name="GroupNameColor">समूह के नाम का रंग</string>
+  <string name="GroupNameSize">समूह के नाम का माप</string>
+  <string name="UnknownNameColor">नाम का रंग (अनजान नंबर)</string>
+  <string name="HideBackgroundShadow">विशेष पृष्ठभूमि की परछाई छिपाए</string>
+  <string name="SetSolidBGColor">पृष्ठभूमि का रंग निर्धारित करे</string>
+  <string name="SolidBGColor">पृष्ठभूमि का रंग</string>
+  <string name="EmojiPopupSize">इमोजी pop-up का रंग</string>
+  <string name="ForwardRightNameColor">फॉरवर्ड दायें बबल पे नाम का रंग</string>
+  <string name="ForwardLeftNameColor">फॉरवर्ड बायें बबल पे नाम का रंग</string>
+  <string name="IconsColor">चिह्नों का रंग</string>
+  <string name="SettingsScreen">सेटिंग्स/थीमिंग स्क्रीन</string>
+  <string name="BackgroundColor">पृष्ठभूमि का रंग</string>
+  <string name="ShadowColor">परछाई का रंग</string>
+  <string name="SectionColor">सेक्शन का रंग</string>
+  <string name="TitleColor">शीर्षक का रंग</string>
+  <string name="SummaryColor">सारांश/उपशीर्षक का रंग</string>
+  <string name="MediaColor">फोटो/स्टीकर के शब्दों का रंग</string>
+  <string name="ThemesAppMsg"> क्या आप प्लस मैसेंजर के दूसरे उपभोग्ताओं द्वारा बनायीं गयी थीम देखना पसंद करेंगे?</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index dc98b280d..163798d0f 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Posizione</string>
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">File</string>
+    <string name="ChatCamera">Foto</string>
     <string name="NoMessages">Ancora nessun messaggio qui…</string>
     <string name="ForwardedMessage">Messaggio inoltrato</string>
     <string name="From">Da</string>
@@ -119,7 +120,7 @@
     <string name="DeleteThisGroup">Elimina questo gruppo</string>
     <string name="DeleteThisChat">Elimina questa chat</string>
     <string name="SlideToCancel">ANNULLA</string>
-    <string name="SaveToDownloads">Salva in download</string>
+    <string name="SaveToDownloads">Salva nei download</string>
     <string name="ShareFile">Condividi</string>
     <string name="ApplyLocalizationFile">Applica traduzione</string>
     <string name="UnsupportedAttachment">Allegato non supportato</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Recupero le info del link...</string>
     <string name="OpenInBrowser">Apri nel Browser</string>
     <string name="CopyUrl">Copia URL</string>
+    <string name="SendItems">Invia %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s ha impostato il timer di autodistruzione a %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Hai impostato il timer di autodistruzione a %1$s</string>
@@ -160,7 +162,7 @@
     <string name="NotificationGroupKickMember">%1$s ha rimosso %3$s dal gruppo %2$s</string>
     <string name="NotificationGroupKickYou">%1$s ti ha rimosso dal gruppo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s ha lasciato il gruppo %2$s</string>
-    <string name="NotificationContactJoined">%1$s ha iniziato a usare Telegram!</string>
+    <string name="NotificationContactJoined">%1$s si è unito a Telegram!</string>
     <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo il %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Privacy e Sicurezza - Sessioni - Termina tutte le sessioni.\n\nSe pensi che qualcuno si sia collegato al tuo account contro il tuo volere, ti raccomandiamo di attivare la verifica in due passaggi nelle impostazioni di Privacy e Sicurezza.\n\nGrazie,\nil team di Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s ha aggiornato la foto del profilo</string>
     <string name="NotificationInvitedToGroupByLink">%1$s si è unito al gruppo %2$s tramite link di invito</string>
@@ -245,8 +247,7 @@
     <string name="ErrorOccurred">Si è verificato un errore.</string>
     <!--stickers view-->
     <string name="Stickers">Sticker</string>
-    <string name="GeniusStickerPackName">Grandi menti</string>
-    <string name="StickersInfo">Gli artisti sono invitati ad aggiungere i loro pacchetti di sticker usando il nostro bot @stickers.\n\nGli utenti possono aggiungere sticker premendo su di loro e scegliendo \"Aggiungi agli sticker\".</string>
+    <string name="StickersInfo">Gli artisti sono invitati ad aggiungere i loro set di sticker usando il nostro bot @stickers.\n\nGli utenti possono aggiungere sticker premendo su di loro e scegliendo \"Aggiungi agli sticker\".</string>
     <string name="AddStickers">Aggiungi sticker</string>
     <string name="AddToStickers">Aggiungi agli sticker</string>
     <string name="AddStickersNotFound">Sticker non trovati</string>
@@ -291,10 +292,10 @@
     <string name="SendByEnter">Spedisci con Invio</string>
     <string name="TerminateAllSessions">Termina le altre sessioni</string>
     <string name="Events">Eventi</string>
-    <string name="ContactJoined">Un contatto ha iniziato a usare Telegram</string>
+    <string name="ContactJoined">Un contatto si è unito a Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Lingua</string>
-    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe richiedere del tempo.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">FAQ</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]>.</string>
+    <string name="AskAQuestionInfo">Nota che il supporto di Telegram è fornito da volontari. Proviamo a rispondere non appena possibile, ma potrebbe volerci un pò.<![CDATA[<br><br>]]>Dai un\'occhiata alle <![CDATA[<a href=\"https://telegram.org/faq/it#domande-generali\">FAQdi Telegram</a>]]>: troverai risposte alla maggior parte delle domande e suggerimenti importanti per <![CDATA[<a href=\"https://telegram.org/faq/it#risoluzione-dei-problemi\">l\'individuazione del problema</a>]]></string>
     <string name="AskButton">Chiedi a un volontario</string>
     <string name="TelegramFaq">FAQ di Telegram</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/it</string>
@@ -320,8 +321,8 @@
     <string name="SystemDefault">Predefinito di sistema</string>
     <string name="SettingsDefault">Impostazioni predefinite</string>
     <string name="AutomaticMediaDownload">Download automatico media</string>
-    <string name="WhenUsingMobileData">Quando si utilizza la rete dati</string>
-    <string name="WhenConnectedOnWiFi">Quando si utilizza il Wi-Fi</string>
+    <string name="WhenUsingMobileData">Quando utilizzi la rete mobile</string>
+    <string name="WhenConnectedOnWiFi">Quando connesso tramite Wi-Fi</string>
     <string name="WhenRoaming">In roaming</string>
     <string name="NoMediaAutoDownload">Nessun media</string>
     <string name="SaveToGallerySettings">Salva nella galleria</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">Video modificato</string>
     <string name="SendingVideo">Inviando il video...</string>
     <string name="CompressVideo">Comprimi video</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Condividi</string>
+    <string name="BotInvite">Aggiungi a un gruppo</string>
+    <string name="BotSettings">Impostazioni</string>
+    <string name="BotHelp">Aiuto</string>
+    <string name="BotStatusRead">ha accesso ai messaggi</string>
+    <string name="BotStatusCantRead">non ha accesso ai messaggi</string>
+    <string name="BotInfoTitle">Cosa può fare questo bot?</string>
+    <string name="BotStart">AVVIA</string>
     <!--button titles-->
     <string name="Next">Avanti</string>
     <string name="Back">Indietro</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 ti ha aggiunto</string>
     <string name="ActionAddUserSelf">un1 è rientrato nel gruppo</string>
     <string name="ActionAddUserSelfYou">Sei rientrato nel gruppo</string>
-    <string name="UnsuppotedMedia">Questo messaggio non è supportato sulla tua versione di Telegram. Aggiorna l\'applicazione per visualizzarlo: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Questo messaggio non è supportato sulla tua versione di Telegram. Aggiorna l\'applicazione per visualizzarlo: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Posizione</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">Non hai nessuna applicazione che può gestire il tipo di file \'%1$s\': installane una per proseguire</string>
     <string name="InviteUser">Questo utente non ha ancora Telegram, vuoi invitarlo?</string>
     <string name="AreYouSure">Sei sicuro?</string>
-    <string name="AddToTheGroup">Aggiungere %1$s al gruppo?\n\nNumero di messaggi recenti da inoltrare:</string>
+    <string name="AddToTheGroupTitle">Aggiungere %1$s al gruppo %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Numero di ultimi messaggi da inoltrare:</string>
+    <string name="AddToTheGroup">Aggiungere %1$s al gruppo?</string>
+    <string name="UserAlreadyInGroup">Questo utente è già membro del gruppo</string>
     <string name="ForwardMessagesTo">Vuoi inoltrare i messaggi a %1$s?</string>
     <string name="SendMessagesTo">Inviare i messaggi a %1$s?</string>
     <string name="AreYouSureLogout">Sei sicuro di volerti disconnettere?\n\nRicorda che puoi usare Telegram su tutti i tuoi device insieme.\n\nRicorda, disconnettersi elimina tutte le Chat Segrete.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">Inviare messaggi a %1$s?</string>
     <string name="ForwardMessagesToGroup">Inoltra messaggi a %1$s?</string>
     <string name="FeatureUnavailable">Ci spiace, questa funzione non è disponibile nel tuo paese.</string>
+    <string name="NoUsernameFound">Non esiste alcun account Telegram con questo username.</string>
+    <string name="BotCantJoinGroups">Questo bot non può unirsi ai gruppi.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Veloce</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d sticker</string>
     <string name="Stickers_many">%1$d sticker</string>
     <string name="Stickers_other">%1$d sticker</string>
+    <string name="Photos_zero">%1$d foto</string>
+    <string name="Photos_one">%1$d foto</string>
+    <string name="Photos_two">%1$d foto</string>
+    <string name="Photos_few">%1$d foto</string>
+    <string name="Photos_many">%1$d foto</string>
+    <string name="Photos_other">%1$d foto</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d messaggi inoltrati</string>
     <string name="ForwardedMessage_one">Messaggio inoltrato</string>
@@ -805,10 +827,10 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s alle %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger per Android è stato aggiornato. Nuovo nella versione 2.9:\n\n- Scegli, scarica ed applica temi per Plus Messenger:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
-    <!--Telegram+-->
-  <string name="updatePlusText">\n\nNovità 2.9.1.4:\n\n- Opzione per cambiare la dimensione predefinita della finestra degli emoji nella schermata della chat (opzione in Impostazioni/Messaggi)\n- Opzione per cambiare il livello di compressione per condividere un video\n- Aggiunte MOD per cambiare i colori della schermata Impostazioni/Temi\n- Aggiunte MOD separate per cambiare il colore del nome del mittente del messaggio inoltrato per la nuvoletta di destra e di sinistra nella schermata della chat\n- Aggiunta MOD per cambiare il colore delle icone nella schermata dei contatti\n- Aggiunta MOD per cambiare il colore del testo \"Photo/Sticker\" nella schermata principale\n- Correzioni bug</string>
+    <string name="updateText">Plus Messenger per Android è stato aggiornato. Nuovo nella versione 3.0:\n\n- Pagine dedicate per ognuno dei tuoi pacchetti sticker nel pannello sticker. Aggiunti sticker personalizzati come https://telegram.me/addstickers/Animals\n- Nuova API per i bot, gratis per tutti. Se sei un ingegnere, crea i tuoi bot per giochi, servizi o integrazioni. Scopri di più su https://telegram.org/blog/bot-revolution\n- Scegli, scarica ed applica temi per Plus Messenger. Nuovi temi ogni giorno\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+    <string name="updateBuild">576</string>
+    <!--Telegram+--><!--
+  <string name="updatePlusText">\n\nNovità nella v3.0.1.5:\n\n- Opzione nelle Impostazioni per utilizzare il font di sistema\n- Opzione per la ricerca all\'interno di chat/gruppi\n- Aggiunta MOD per cambiare il colore dell\'intestazione, del titolo dell\'intestazione ed il colore delle icone dell\'intestazione (Impostazioni/Schermata dei temi)\n- MOD per cambiare il colore dell\'icona di gruppo nella schermata principale\n- MOD per cambiare la dimensione dell\'avatar nel menù di navigazione\n- Bug fixes</string>-->
     <string name="TelegramForAndroid">Plus Messenger per Android</string>
   <string name="Theming">Personalizzazione</string>
     <string name="colorHexInvalid">Codice del colore esadecimale non valido!</string>
@@ -932,4 +954,7 @@
   <string name="SummaryColor">Colore Sommario/Sottotitolo</string>
   <string name="MediaColor">Colore del testo \"Foto/Sticker\"</string>
   <string name="ThemesAppMsg">Ti piacerebbe dare uno sguardo a temi creati da altri utenti di Plus Messenger?</string>
+  <string name="UseDeviceFont">Usa il font di sistema</string>
+  <string name="AppWillRestart">Plus Messenger si riavvierà</string>
+  <string name="GroupIconColor">Colore dell\'icona del gruppo</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index 956404469..3f1ccf013 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -99,6 +99,7 @@
     <string name="ChatLocation">위치</string>
     <string name="ChatVideo">동영상</string>
     <string name="ChatDocument">파일</string>
+    <string name="ChatCamera">카메라</string>
     <string name="NoMessages">메시지가 없습니다...</string>
     <string name="ForwardedMessage">전달된 메시지</string>
     <string name="From">보낸 사람</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">링크 정보를 가져오는 중...</string>
     <string name="OpenInBrowser">브라우져에서 열기</string>
     <string name="CopyUrl">URL 복사</string>
+    <string name="SendItems">%1$s 전송</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s님이 자동삭제를 %2$s 후로 설정했습니다</string>
     <string name="MessageLifetimeChangedOutgoing">자동삭제를 %1$s 후로 설정했습니다</string>
@@ -245,8 +247,7 @@
     <string name="ErrorOccurred">오류가 발생했습니다.</string>
     <!--stickers view-->
     <string name="Stickers">스티커</string>
-    <string name="GeniusStickerPackName">Great Minds</string>
-    <string name="StickersInfo">\@stickers 봇을 통하여 누구든지 스스로 제작한 스티커를 등록 할 수 있습니다.\n\n스티커는  더블탭하여 \"스티커 추가\" 를 통하여 추가할 수 있습니다.</string>
+    <string name="StickersInfo">/@stickers 봇을 통하여 누구든지 스스로 제작한 스티커를 등록 할 수 있습니다.\n\n스티커는  더블탭하여 \"스티커 추가\" 를 통하여 추가할 수 있습니다.</string>
     <string name="AddStickers">스티커 추가</string>
     <string name="AddToStickers">스티커 추가</string>
     <string name="AddStickersNotFound">스티커를 찾을 수 없음</string>
@@ -294,7 +295,7 @@
     <string name="ContactJoined">친구의 텔레그램 가입 알림</string>
     <string name="Pebble">PEBBLE 스마트워치 지원</string>
     <string name="Language">언어</string>
-    <string name="AskAQuestionInfo">텔레그램에 관한 질문은 자원봉사자들이 답변해 드립니다. 신속한 답변을 위해 노력하지만 답변이 다소 늦을 수 있습니다.<![CDATA[<br><br>]]>일반적인 문제와 <![CDATA[<a href=\"http://telegram.org/faq/ko#g\">해결방법</a>]]>에 대해서는 \'<![CDATA[<a href=\"http://telegram.org/faq/ko#a\">자주 묻는 질문</a>]]>\'을 확인해 보세요.</string>
+    <string name="AskAQuestionInfo">텔레그램에 관한 질문은 자원봉사자들이 답변해 드립니다. 신속한 답변을 위해 노력하지만 답변이 다소 늦을 수 있습니다.<![CDATA[<br><br>]]>일반적인 문제와 <![CDATA[<a href=\"https://telegram.org/faq/ko#g\">해결방법</a>]]>에 대해서는 \'<![CDATA[<a href=\"https://telegram.org/faq/ko#a\">자주 묻는 질문</a>]]>\'을 확인해 보세요.</string>
     <string name="AskButton">질문하기</string>
     <string name="TelegramFaq">자주 묻는 질문</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq/ko</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">편집한 동영상</string>
     <string name="SendingVideo">동영상 보내는 중...</string>
     <string name="CompressVideo">동영상 크기 줄이기</string>
+    <!--bot-->
+    <string name="Bot">봇</string>
+    <string name="BotShare">공유</string>
+    <string name="BotInvite">그룹에 추가</string>
+    <string name="BotSettings">설정</string>
+    <string name="BotHelp">도움말</string>
+    <string name="BotStatusRead">메시지 접근 권한이 있습니다.</string>
+    <string name="BotStatusCantRead">메시지 접근 권한이 없습니다</string>
+    <string name="BotInfoTitle">이 봇은 무엇을 할 수 있나요?</string>
+    <string name="BotStart">시작</string>
     <!--button titles-->
     <string name="Next">다음</string>
     <string name="Back">뒤로</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1님이 그룹에 초대했습니다</string>
     <string name="ActionAddUserSelf">un1 님께서 그룹에 돌아오셨습니다</string>
     <string name="ActionAddUserSelfYou">그룹에 돌아오셨습니다.</string>
-    <string name="UnsuppotedMedia">이 메시지는 사용 중인 텔레그램의 버전이 낮아 지원하지 않습니다. 앱을 업데이트 하세요: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">이 메시지는 현재 사용 중인 버전의 Telegram에서 지원되지 않습니다. 메시지를 보려면 https://telegram.org/update 에서 앱을 업데이트하세요.</string>
     <string name="AttachPhoto">사진</string>
     <string name="AttachVideo">동영상</string>
     <string name="AttachLocation">위치</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">\'%1$s\' 파일 형식을 처리할 앱이 없습니다. 계속하려면 앱을 설치해 주세요.</string>
     <string name="InviteUser">친구가 아직 텔레그램을 사용하지 않네요. 초대해 보세요!</string>
     <string name="AreYouSure">확실합니까?</string>
-    <string name="AddToTheGroup">%1$s님을 그룹에 초대할까요?\n\n전달할 최근 메시지 개수:</string>
+    <string name="AddToTheGroupTitle">%2$s 그룹에 %1$s님을 추가할까요?</string>
+    <string name="AddToTheGroupForwardCount">전달할 마지막 대화내용 개수:</string>
+    <string name="AddToTheGroup">%1$s 님을 그룹에 추가할까요?</string>
+    <string name="UserAlreadyInGroup">이 사용자는 이미 그룹에 추가되었습니다.</string>
     <string name="ForwardMessagesTo">%1$s님에게 메시지를 전달할까요?</string>
     <string name="SendMessagesTo">%1$s님에게 메시지를 보낼까요?</string>
     <string name="AreYouSureLogout">정말로 로그아웃하시겠습니까?\n\n텔레그램은 여러 기기에서 동시에 사용이 가능합니다.\n\n로그아웃하시면 비밀대화가 삭제되는 점 유의해주세요.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">%1$s 그룹에 메시지를 보낼까요?</string>
     <string name="ForwardMessagesToGroup">%1$s 그룹에 메시지를 전달할까요?</string>
     <string name="FeatureUnavailable">이 기능은 회원님의 국가에서는 사용할 수 없습니다.</string>
+    <string name="NoUsernameFound">입력된 아이디와 일치하는 텔레그램 계정이 없습니다.</string>
+    <string name="BotCantJoinGroups">이 봇은 그룹에 참여 할 수 없습니다.</string>
     <!--Intro view-->
     <string name="Page1Title">텔레그램</string>
     <string name="Page2Title">눈부신 속도</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">스티커 %1$d개</string>
     <string name="Stickers_many">스티커 %1$d개</string>
     <string name="Stickers_other">스티커 %1$d개</string>
+    <string name="Photos_zero">%1$d 개의 사진</string>
+    <string name="Photos_one">%1$d 개의 사진</string>
+    <string name="Photos_two">%1$d 개의 사진</string>
+    <string name="Photos_few">%1$d 개의 사진</string>
+    <string name="Photos_many">%1$d 개의 사진</string>
+    <string name="Photos_other">%1$d 개의 사진</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d 개의 전달된 메시지</string>
     <string name="ForwardedMessage_one">전달된 메시지</string>
@@ -805,6 +827,6 @@
     <string name="formatterDay12H">a h:mm</string>
     <string name="formatDateAtTime">%1$s %2$s</string>
     <!--update text-->
-    <string name="updateText">텔레그램 안드로이드 버전이 업데이트 되었습니다. 새로운 버전은 2.9 입니다:\n\n - 아래와 같은 커스텀 스티커 설치 및 공유 : https://play.google.com/store/apps/details?id=es.rafalense.themes\n - 커스텀 스티커를 신규로 생성하여 등록할 수 있는 @stickers 봇 활용\n\n - Android Auto와 텔레그램 호환</string>
-    <string name="updateBuild">546</string>
+    <string name="updateText">텔레그램 안드로이드 버전이 업데이트 되었습니다. 새로운 버전은 3.0 입니다:\n\n- 스티커 패널에 커스텀 스티커별 탭 지원. https://telegram.me/addstickers/Animals 와 같은 커스텀 스티커 추가 기능\n- 신규 봇 API를 무료로 공개합니다. 개발자라면 누구나 게임, 서비스나 통합 봇등 개발이 가능합니다. https://telegram.org/blog/bot-revolution 에서 자세한 사항을 알아보세요.</string>
+    <string name="updateBuild">576</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index c7d49e426..0d317b5a0 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Locatie</string>
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">Bestand</string>
+    <string name="ChatCamera">Camera</string>
     <string name="NoMessages">Nog geen berichten</string>
     <string name="ForwardedMessage">Doorgestuurd bericht</string>
     <string name="From">Van</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Link-preview ophalen...</string>
     <string name="OpenInBrowser">Openen in browser</string>
     <string name="CopyUrl">Link kopiëren</string>
+    <string name="SendItems">%1$s versturen</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s heeft de zelfvernietigingstimer ingesteld op %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">Je hebt de zelfvernietigingstimer ingesteld op %1$s</string>
@@ -245,10 +247,7 @@
     <string name="ErrorOccurred">Er is een fout opgetreden.</string>
     <!--stickers view-->
     <string name="Stickers">Stickers</string>
-    <string name="GeniusStickerPackName">Grote geesten</string>
-  <string name="StickersInfo">Ontwerpers kunnen stickerbundels toevoegen via onze bot: @stickers.
-
-Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".</string>
+    <string name="StickersInfo">Ontwerpers kunnen stickerbundels toevoegen via onze bot: @stickers.\n\nGebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".</string>
     <string name="AddStickers">Stickers toevoegen</string>
     <string name="AddToStickers">Toevoegen aan stickers</string>
     <string name="AddStickersNotFound">Stickers niet gevonden</string>
@@ -282,7 +281,7 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="ResetAllNotifications">Meldingen resetten</string>
     <string name="UndoAllCustom">Aangepaste meldingsinstellingen wissen voor contacten en groepen.</string>
     <string name="NotificationsAndSounds">Meldingen en geluiden</string>
-    <string name="BlockedUsers">Geblokkeerde gebruikers</string>
+    <string name="BlockedUsers">Geblokkeerd</string>
     <string name="LogOut">Uitloggen</string>
     <string name="NoSound">Geen geluid</string>
     <string name="Default">Standaard</string>
@@ -296,7 +295,7 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="ContactJoined">Contact lid van Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Taal</string>
-    <string name="AskAQuestionInfo">De ondersteuning van Telegram wordt gedaan door vrijwilligers.<![CDATA[<br>]]>We doen ons best om zo snel mogelijk te antwoorden.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href=\"http://telegram.org/faq#general\">veelgestelde vragen</a>]]>. Hier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">het oplossen van problemen</a>]]>.</string>
+    <string name="AskAQuestionInfo">De ondersteuning van Telegram wordt gedaan door vrijwilligers. We doen ons best om zo snel mogelijk te antwoorden.<![CDATA[<br><br>]]>Bekijk ook de <![CDATA[<a href=\"https://telegram.org/faq#general\">veelgestelde vragen</a>]]>: Hierhier staan de antwoorden op de meeste vragen en belangrijke tips voor <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">het oplossen van problemen</a>]]>.</string>
     <string name="AskButton">Vraag een vrijwilliger</string>
     <string name="TelegramFaq">Veelgestelde vragen</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
@@ -530,6 +529,16 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="EditedVideo">Bewerkte video</string>
     <string name="SendingVideo">Video versturen</string>
     <string name="CompressVideo">Video comprimeren</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Delen</string>
+    <string name="BotInvite">Groepslid maken</string>
+    <string name="BotSettings">Instellingen</string>
+    <string name="BotHelp">Help</string>
+    <string name="BotStatusRead">toegang tot berichten</string>
+    <string name="BotStatusCantRead">geen toegang tot berichten</string>
+    <string name="BotInfoTitle">Wat kan deze bot?</string>
+    <string name="BotStart">BEGIN</string>
     <!--button titles-->
     <string name="Next">Volgende</string>
     <string name="Back">Vorige</string>
@@ -572,7 +581,7 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="ActionAddUserYou">un1 heeft je toegevoegd</string>
     <string name="ActionAddUserSelf">un1 is terug in de groep</string>
     <string name="ActionAddUserSelfYou">Je keerde terug naar de groep</string>
-    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund door jouw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Dit bericht wordt niet ondersteund door jouw versie van Telegram. Werk Telegram bij om dit bericht te bekijken: https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Locatie</string>
@@ -597,7 +606,10 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="NoHandleAppInstalled">Je hebt geen apps die bestandstype \'%1$s\' kunnen verwerken, gelieve een compatibele app te installeren</string>
     <string name="InviteUser">Deze gebruiker heeft nog geen Telegram. Wil je een uitnodiging sturen?</string>
     <string name="AreYouSure">Weet je het zeker?</string>
-    <string name="AddToTheGroup">%1$s toevoegen aan de groep?\n\nAantal recente berichten om door te sturen:</string>
+    <string name="AddToTheGroupTitle">%1$s toevoegen aan de groep %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Aantal recente berichten om door te sturen:</string>
+    <string name="AddToTheGroup">%1$s toevoegen aan de groep?</string>
+    <string name="UserAlreadyInGroup">Gebruiker neemt al deel aan de groep</string>
     <string name="ForwardMessagesTo">Berichten doorsturen naar %1$s?</string>
     <string name="SendMessagesTo">Berichten naar %1$s versturen?</string>
     <string name="AreYouSureLogout">Weet je zeker dat je wilt uitloggen?\n\nTelegram kun je naadloos op al je apparaten tegelijkertijd gebruiken.\n\nLet op! Als je uitlogt worden al je geheime chats verwijderd.</string>
@@ -615,6 +627,8 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="SendMessagesToGroup">Berichten naar %1$s versturen?</string>
     <string name="ForwardMessagesToGroup">Berichten doorsturen naar %1$s?</string>
     <string name="FeatureUnavailable">Sorry, deze functie is momenteel niet beschikbaar in jouw land.</string>
+    <string name="NoUsernameFound">Er is geen Telegram-account met deze gebruikersnaam.</string>
+    <string name="BotCantJoinGroups">Deze bot kan geen groepslid worden.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Snel</string>
@@ -740,6 +754,12 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="Stickers_few">%1$d stickers</string>
     <string name="Stickers_many">%1$d stickers</string>
     <string name="Stickers_other">%1$d stickers</string>
+    <string name="Photos_zero">%1$d foto\'s</string>
+    <string name="Photos_one">%1$d foto</string>
+    <string name="Photos_two">%1$d foto\'s</string>
+    <string name="Photos_few">%1$d foto\'s</string>
+    <string name="Photos_many">%1$d foto\'s</string>
+    <string name="Photos_other">%1$d foto\'s</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">Bijlage: %1$d berichten</string>
     <string name="ForwardedMessage_one">Bijlage: 1 bericht</string>
@@ -807,10 +827,10 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s om %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger voor Android is geüpdatet. Nieuw in versie 2.9:\n\n Bekijk, download en pas thema\'s toe op de Plus Messenger-app:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
+    <string name="updateText">Plus Messenger voor Android is geüpdatet. Nieuw in versie 3.0:\n\n- Tabbladen voor al je eigen stickerbundels in het stickerpaneel. Voeg stickerbundels zoals: https://telegram.me/addstickers/Animals toe.\n- Nieuwe bot-API, gratis voor iedereen. Handig met programmeren? Maak dan je eigen bots voor spelletjes, diensten of integraties. Meer weten? kijk op: https://telegram.org/blog/bot-revolution</string>
+    <string name="updateBuild">576</string>
     <!--Telegram+-->
-  <string name="updatePlusText">\n\nNieuw in 2.9.1.4:\n\- Optie om de standaard emoji venstergrootte in het chatscherm te veranderen (optie te vinden in Instellingen -&gt; Berichten)\n- Optie om de compressiegraad te veranderen wanneer je een video verzendt\n- MOD toegevoegd om de kleuren te veranderen in het Instellingen/Thema scherm\n- Aparte MODs toegevoegd voor de kleur van de naam bij het doorsturen van een bericht in het chatscherm. De linker en rechter ballon zijn bij deze optie gescheiden\n- MOD toegevoegd om de icoonkleuren in het contactenscherm te veranderen\n- MOD toegevoegd om de kleur van de \"Photo/Sticker\" tekst in het main scherm\n- Fouten verholpen</string>
+  <string name="updatePlusText"></string>
     <string name="TelegramForAndroid">Plus Messenger voor Android</string>
   <string name="Theming">Uiterlijk Aanpassen</string>
   <string name="colorHexInvalid">Ongeldige hexadecimale kleurcode!</string>
@@ -846,16 +866,16 @@ Gebruikers kunnen met een tik stickers toevoegen via \"Toevoegen aan stickers\".
     <string name="DateColor">Datumkleur</string>
     <string name="DateSize">Datumgrootte</string>
     <string name="DateBubbleColor">Kleur van datumballon</string>
-  <string name="RTextColor">Rechtertekstkleur</string>
-    <string name="LTextColor">Linkertekstkleur</string>
-  <string name="RTimeColor">Rechtertijdskleur</string>
-  <string name="LTimeColor">Linkertijdskleur</string>
+  <string name="RTextColor">Kleur van Rechterbubbeltekst</string>
+  <string name="LTextColor">Kleur van Linkerbubbeltekst</string>
+  <string name="RTimeColor">Kleur van Rechtertijdsaanduiding</string>
+  <string name="LTimeColor">Kleur van Linkertijdsaanduiding</string>
     <string name="TimeSize">Tijdgrootte</string>
     <string name="EditTextColor">Kleur van tekstinvoer</string>
     <string name="EditTextSize">Grootte van tekstinvoer</string>
     <string name="EditTextBGColor">Achtergrondkleur van tekstinvoer</string>
-    <string name="EmojiViewBGColor">Achtergrondkleur van emoticon</string>
-    <string name="EmojiViewTabColor">Tabbladkleur van emoticon</string>
+  <string name="EmojiViewBGColor">Achtergrondkleur van emoji</string>
+  <string name="EmojiViewTabColor">Tabbladkleur van emoji</string>
     <string name="OnlineColor">Online-kleur</string>
     <string name="ChatMusic">Muziek</string>
     <string name="SaveTheme">Thema opslaan</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index 3ea649c50..7b9c66ffb 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -57,7 +57,7 @@
     <string name="MuteFor">Silenciar por %1$s</string>
     <string name="UnmuteNotifications">Restaurar Som</string>
     <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativado</string>
+    <string name="MuteDisable">Desativar</string>
     <string name="Hashtags">HASHTAGS</string>
     <!--broadcasts-->
     <string name="NewBroadcastList">Nova Lista de Transmissão</string>
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Localização</string>
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Arquivo</string>
+    <string name="ChatCamera">Câmera</string>
     <string name="NoMessages">Ainda não há mensagens aqui...</string>
     <string name="ForwardedMessage">Mensagem encaminhada</string>
     <string name="From">De</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Obtendo informações...</string>
     <string name="OpenInBrowser">Abrir no Navegador</string>
     <string name="CopyUrl">Copiar URL</string>
+    <string name="SendItems">Enviar %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
@@ -245,7 +247,6 @@
     <string name="ErrorOccurred">Ocorreu um erro.</string>
     <!--stickers view-->
     <string name="Stickers">Stickers</string>
-    <string name="GeniusStickerPackName">Grandes Mentes</string>
     <string name="StickersInfo">Artistas são bem vindos a adicionar seus próprios pacotes de stickers usando o @stickers bot.\n\nUsuários podem adicionar stickers com um clique sobre eles e então escolher \"Adicionar aos Stickers\".</string>
     <string name="AddStickers">Adicionar Stickers</string>
     <string name="AddToStickers">Adicionar aos Stickers</string>
@@ -294,7 +295,7 @@
     <string name="ContactJoined">Contato entrou para o Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor compreenda que o Suporte do Telegram é feito por voluntários. Tentamos responder o mais rápido possível, mas pode demorar um pouco. <![CDATA[<br><br>]]>Por favor acesse o <![CDATA[<a href=\"http://telegram.org/faq#general\">FAQ do Telegram</a>]]>: temos respostas para algumas questões, assim como dicas importantes à <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">resolução de problemas</a>]]>.</string>
+    <string name="AskAQuestionInfo">Por favor entenda que o suporte do Telegram é feito por voluntários. Tentaremos responder o mais rápido possível, mas poderemos demorar um pouco.<![CDATA[<br><br>]]>Por favor verifique a <![CDATA[<a href=\"https://telegram.org/faq#general\">página de perguntas frequentes do Telegram</a>]]>: há dicas e respostas para a maioria dos <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">problemas</a>]]>.</string>
     <string name="AskButton">Pergunte a um voluntário</string>
     <string name="TelegramFaq">Perguntas frequentes</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
@@ -341,7 +342,7 @@
     <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
     <string name="NotificationsOther">Outro</string>
     <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativar</string>
+    <string name="VibrationDisabled">Desativado</string>
     <string name="LedDisabled">Desativado</string>
     <string name="RepeatDisabled">Desativado</string>
     <string name="InChatSound">Sons no Chat</string>
@@ -359,7 +360,7 @@
     <string name="NoOtherSessions">Nenhuma outra sessão ativa</string>
     <string name="NoOtherSessionsInfo">Você pode entrar no Telegram a partir de outro celular, tablet ou computador usando o mesmo número de telefone. Todos os seus dados serão sincronizados instantaneamente.</string>
     <string name="OtherSessions">Sessões Ativas</string>
-    <string name="SessionsInfo">Controle suas sessões em outros aparelho.</string>
+    <string name="SessionsInfo">Controle suas sessões em outros aparelhos.</string>
     <string name="TerminateSessionInfo">Toque em uma sessão para terminá-la.</string>
     <string name="TerminateSessionQuestion">Encerrar essa sessão?</string>
     <string name="UnofficialApp">aplicativo não oficial</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">Vídeo Editado</string>
     <string name="SendingVideo">Enviando vídeo...</string>
     <string name="CompressVideo">Compactar Vídeo</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Compartilhar</string>
+    <string name="BotInvite">Adicionar Ao Grupo</string>
+    <string name="BotSettings">Configurações</string>
+    <string name="BotHelp">Ajuda</string>
+    <string name="BotStatusRead">tem acesso as mensagens</string>
+    <string name="BotStatusCantRead">não tem acesso as mensagens</string>
+    <string name="BotInfoTitle">O que esse bot pode fazer?</string>
+    <string name="BotStart">COMEÇAR</string>
     <!--button titles-->
     <string name="Next">Próximo</string>
     <string name="Back">Voltar</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 adicionou você</string>
     <string name="ActionAddUserSelf">un1 retornou ao grupo</string>
     <string name="ActionAddUserSelfYou">Você retornou ao grupo</string>
-    <string name="UnsuppotedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualiza-la atualize seu aplicativo em http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualiza-la atualize seu aplicativo em https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Vídeo</string>
     <string name="AttachLocation">Localização</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero de últimas mensagens para encaminhar:</string>
+    <string name="AddToTheGroupTitle">Adicionar %1$s ao grupo %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Número de mensagens antigas para encaminhar:</string>
+    <string name="AddToTheGroup">Adicionar %1$s no grupo?</string>
+    <string name="UserAlreadyInGroup">Este usuário já está neste grupo</string>
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
     <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
     <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
+    <string name="NoUsernameFound">Não há conta do Telegram com esse nome de usuário</string>
+    <string name="BotCantJoinGroups">Esse bot não pode entrar em grupos.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Rápido</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d stickers</string>
     <string name="Stickers_many">%1$d stickers</string>
     <string name="Stickers_other">%1$d stickers</string>
+    <string name="Photos_zero">%1$d fotos</string>
+    <string name="Photos_one">%1$d foto</string>
+    <string name="Photos_two">%1$d fotos</string>
+    <string name="Photos_few">%1$d fotos</string>
+    <string name="Photos_many">%1$d fotos</string>
+    <string name="Photos_other">%1$d fotos</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
     <string name="ForwardedMessage_one">Mensagem encaminhada</string>
@@ -805,10 +827,11 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s às %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger para Android acaba de ser atualizado. Novidades da versão 2.9:\n\n- Confira, baixe e use temas para o app Plus Messenger:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
-    <!--Telegram+-->
-    <!--<string name="updatePlusText">\n\nNovidades da versão 2.9.1.4:\n\n- Correções de bugs</string>-->
+    <string name="updateText">Plus Messenger para Android acaba de ser atualizado. Novo na versão 3.0:\n\n- Abas dedicadas para cada um dos pacotes customizados de stickers no painel de stickers. Adicione stickers customizados como https://telegram.me/addstickers/Animals\n- Nova API de bots, gratuita para todos. Se você for um engenheiro, crie seus próprios bots como @quiz_bot ou @hot_or_bot usando o @botfather. Leia mais em https://telegram.org/blog/bot-revolution\n- Confira, baixe e aplique temas para o app Plus Messenger. Novos temas todos os dias:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+    <string name="updateBuild">576</string>
+    <!--Telegram+--><!--
+  <string name="updatePlusText">
+\n\nNovo em 3.0.1.3:\n\n- Opção em Configurações para usar fonte do dispositivo\n- Opção para pesquisar dentro da conversa/group\n- Adicionado MOD para mudar cor do cabeçalho, cor do título do cabeçalho e ícones do cabeçalho cor em Tela de Configurações/Personalizações\n- MOD para mudar a cor do ícone de grupo na tela principal\n- MOD para mudar o tamanho do avatar no menu de navegação\n- Correções de erros</string>-->
     <string name="TelegramForAndroid">Plus Messenger para Android</string>
     <string name="Theming">Personalização</string>
     <string name="colorHexInvalid">Código de cor hexadecimal inválido!</string>
@@ -932,4 +955,7 @@
   <string name="SummaryColor">Cor dos Subtítulos/Descrições</string>
   <string name="MediaColor">Cor do Texto \'Foto/Adesivo\'</string>
   <string name="ThemesAppMsg">Gostaria de ver e experimentar alguns temas feitos por outros usuários do Plus Messenger?</string>
+  <string name="UseDeviceFont">Usar Fonte do Dispositivo</string>
+  <string name="AppWillRestart">O Plus Messenger irá reiniciar</string>
+  <string name="GroupIconColor">Cor do Ícone de Grupo</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index a12cb5251..bfcd22545 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -57,7 +57,7 @@
     <string name="MuteFor">Silenciar por %1$s</string>
     <string name="UnmuteNotifications">Restaurar Som</string>
     <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativado</string>
+    <string name="MuteDisable">Desativar</string>
     <string name="Hashtags">HASHTAGS</string>
     <!--broadcasts-->
     <string name="NewBroadcastList">Nova Lista de Transmissão</string>
@@ -99,6 +99,7 @@
     <string name="ChatLocation">Localização</string>
     <string name="ChatVideo">Vídeo</string>
     <string name="ChatDocument">Arquivo</string>
+    <string name="ChatCamera">Câmera</string>
     <string name="NoMessages">Ainda não há mensagens aqui...</string>
     <string name="ForwardedMessage">Mensagem encaminhada</string>
     <string name="From">De</string>
@@ -128,6 +129,7 @@
     <string name="GettingLinkInfo">Obtendo informações...</string>
     <string name="OpenInBrowser">Abrir no Navegador</string>
     <string name="CopyUrl">Copiar URL</string>
+    <string name="SendItems">Enviar %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s estabeleceu o tempo de autodestruição para %2$s </string>
     <string name="MessageLifetimeChangedOutgoing">Você estabeleceu o tempo de autodestruição para %1$s</string>
@@ -245,7 +247,6 @@
     <string name="ErrorOccurred">Ocorreu um erro.</string>
     <!--stickers view-->
     <string name="Stickers">Stickers</string>
-    <string name="GeniusStickerPackName">Grandes Mentes</string>
     <string name="StickersInfo">Artistas são bem vindos a adicionar seus próprios pacotes de stickers usando o @stickers bot.\n\nUsuários podem adicionar stickers com um clique sobre eles e então escolher \"Adicionar aos Stickers\".</string>
     <string name="AddStickers">Adicionar Stickers</string>
     <string name="AddToStickers">Adicionar aos Stickers</string>
@@ -294,9 +295,9 @@
     <string name="ContactJoined">Contato entrou para o Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Idioma</string>
-    <string name="AskAQuestionInfo">Por favor compreenda que o Suporte do Telegram é feito por voluntários. Tentamos responder o mais rápido possível, mas pode demorar um pouco. <![CDATA[<br><br>]]>Por favor acesse o <![CDATA[<a href=\"http://telegram.org/faq#general\">FAQ do Telegram</a>]]>: temos respostas para algumas questões, assim como dicas importantes à <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">resolução de problemas</a>]]>.</string>
+    <string name="AskAQuestionInfo">Por favor entenda que o suporte do Telegram é feito por voluntários. Tentaremos responder o mais rápido possível, mas poderemos demorar um pouco.<![CDATA[<br><br>]]>Por favor verifique a <![CDATA[<a href=\"https://telegram.org/faq#general\">página de perguntas frequentes do Telegram</a>]]>: há dicas e respostas para a maioria dos <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">problemas</a>]]>.</string>
     <string name="AskButton">Pergunte a um voluntário</string>
-    <string name="TelegramFaq">FAQ do Telegram</string>
+    <string name="TelegramFaq">Perguntas frequentes</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Apagar localização?</string>
     <string name="IncorrectLocalization">Arquivo de localização incorreto</string>
@@ -341,7 +342,7 @@
     <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
     <string name="NotificationsOther">Outro</string>
     <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativar</string>
+    <string name="VibrationDisabled">Desativado</string>
     <string name="LedDisabled">Desativado</string>
     <string name="RepeatDisabled">Desativado</string>
     <string name="InChatSound">Sons no Chat</string>
@@ -359,7 +360,7 @@
     <string name="NoOtherSessions">Nenhuma outra sessão ativa</string>
     <string name="NoOtherSessionsInfo">Você pode entrar no Telegram a partir de outro celular, tablet ou computador usando o mesmo número de telefone. Todos os seus dados serão sincronizados instantaneamente.</string>
     <string name="OtherSessions">Sessões Ativas</string>
-    <string name="SessionsInfo">Controle suas sessões em outros aparelho.</string>
+    <string name="SessionsInfo">Controle suas sessões em outros aparelhos.</string>
     <string name="TerminateSessionInfo">Toque em uma sessão para terminá-la.</string>
     <string name="TerminateSessionQuestion">Encerrar essa sessão?</string>
     <string name="UnofficialApp">aplicativo não oficial</string>
@@ -528,6 +529,16 @@
     <string name="EditedVideo">Vídeo Editado</string>
     <string name="SendingVideo">Enviando vídeo...</string>
     <string name="CompressVideo">Compactar Vídeo</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Compartilhar</string>
+    <string name="BotInvite">Adicionar Ao Grupo</string>
+    <string name="BotSettings">Configurações</string>
+    <string name="BotHelp">Ajuda</string>
+    <string name="BotStatusRead">tem acesso as mensagens</string>
+    <string name="BotStatusCantRead">não tem acesso as mensagens</string>
+    <string name="BotInfoTitle">O que esse bot pode fazer?</string>
+    <string name="BotStart">COMEÇAR</string>
     <!--button titles-->
     <string name="Next">Próximo</string>
     <string name="Back">Voltar</string>
@@ -570,7 +581,7 @@
     <string name="ActionAddUserYou">un1 adicionou você</string>
     <string name="ActionAddUserSelf">un1 retornou ao grupo</string>
     <string name="ActionAddUserSelfYou">Você retornou ao grupo</string>
-    <string name="UnsuppotedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualiza-la atualize seu aplicativo em http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">Esta mensagem não é suportada na sua versão do Telegram. Para visualiza-la atualize seu aplicativo em https://telegram.org/update</string>
     <string name="AttachPhoto">Foto</string>
     <string name="AttachVideo">Vídeo</string>
     <string name="AttachLocation">Localização</string>
@@ -595,7 +606,10 @@
     <string name="NoHandleAppInstalled">Você não possui um aplicativo que suporte o tipo de arquivo \'%1$s\', por favor instale um para continuar</string>
     <string name="InviteUser">Este usuário ainda não possui Telegram, deseja enviar um convite?</string>
     <string name="AreYouSure">Você tem certeza?</string>
-    <string name="AddToTheGroup">Adicionar %1$s para o grupo?\n\nNúmero de últimas mensagens para encaminhar:</string>
+    <string name="AddToTheGroupTitle">Adicionar %1$s ao grupo %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Número de mensagens antigas para encaminhar:</string>
+    <string name="AddToTheGroup">Adicionar %1$s no grupo?</string>
+    <string name="UserAlreadyInGroup">Este usuário já está neste grupo</string>
     <string name="ForwardMessagesTo">Encaminhar mensagem para %1$s?</string>
     <string name="SendMessagesTo">Enviar mensagens para %1$s?</string>
     <string name="AreYouSureLogout">Você tem certeza que desejar sair?\n\nSaiba que você pode usar o Telegram em vários dispositivos de uma vez.\n\nLembre-se, sair apaga todos os seus Chats Secretos.</string>
@@ -613,6 +627,8 @@
     <string name="SendMessagesToGroup">Enviar mensagens para %1$s?</string>
     <string name="ForwardMessagesToGroup">Encaminhar mensagem para %1$s?</string>
     <string name="FeatureUnavailable">Desculpe, esta funcionalidade não está disponível para seu país.</string>
+    <string name="NoUsernameFound">Não há conta do Telegram com esse nome de usuário</string>
+    <string name="BotCantJoinGroups">Esse bot não pode entrar em grupos.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Rápido</string>
@@ -738,6 +754,12 @@
     <string name="Stickers_few">%1$d stickers</string>
     <string name="Stickers_many">%1$d stickers</string>
     <string name="Stickers_other">%1$d stickers</string>
+    <string name="Photos_zero">%1$d fotos</string>
+    <string name="Photos_one">%1$d foto</string>
+    <string name="Photos_two">%1$d fotos</string>
+    <string name="Photos_few">%1$d fotos</string>
+    <string name="Photos_many">%1$d fotos</string>
+    <string name="Photos_other">%1$d fotos</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
     <string name="ForwardedMessage_one">Mensagem encaminhada</string>
@@ -805,8 +827,8 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s às %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger para Android acaba de ser atualizado. Novidades da versão 2.9:\n\n- Baixe e use temas para o app Plus Messenger:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
+    <string name="updateText">Plus Messenger para Android acaba de ser atualizado. Novo na versão 3.0:\n\n- Abas dedicadas para cada um dos pacotes customizados de stickers no painel de stickers. Adicione stickers customizados como https://telegram.me/addstickers/Animals\n- Nova API de bots, gratuita para todos. Se você for um engenheiro, crie seus próprios bots como @quiz_bot ou @hot_or_bot usando o @botfather. Leia mais em https://telegram.org/blog/bot-revolution</string>
+    <string name="updateBuild">576</string>
     <!--Telegram+ Portuguese(Portugal)-->
   <string name="TelegramForAndroid">Plus Messenger para Android</string>
   <string name="Theming">Temas</string>
diff --git a/TMessagesProj/src/main/res/values-tr/strings.xml b/TMessagesProj/src/main/res/values-tr/strings.xml
index 69e6d977b..bcd894bc3 100644
--- a/TMessagesProj/src/main/res/values-tr/strings.xml
+++ b/TMessagesProj/src/main/res/values-tr/strings.xml
@@ -393,8 +393,12 @@
   <string name="Weeks_other">%1$d hafta</string>
   <!--date formatters-->
   <string name="formatterDay24H">SS:dd</string>
-  <!--Telegram+-->
-  <string name="updatePlusText">\n\n2.9.1.4\'teki Yenilikler\n\n- Sohbet ekranındaki emoji penceresinin varsayılan boyutunu değiştirme özelliği eklendi (Özellik Ayarlar/Mesajlar sekmesinde)\n- Video gönderirken sıkıştırma seviyesini ayarlama özelliği eklendi\n- Ayarlar/Mesajlar\'a ekran renklerini değiştiren MOD eklendi\n- İletilen isim rengini ayırmak için sohbet ekranındaki sağ ve sol baloncuğa MOD uygulandı\n- Sohbet ekranındaki ikon renklerini değiştirmek için MOD eklendi\n- Ana ekrandaki \'Fotoğraflar/Çıkartmalar\' yazısını değiştirmek için MOD eklendi\n- Hata düzeltmeleri yapıldı</string>
+  <!--update text-->
+  <string name="updateText">Plus Messenger için temalar indirin ve uygulayın. Hergün yeni temalar ekleniyor:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+  <string name="updateBuild">576</string>
+  <!--Telegram+--><!--
+  <string name="updatePlusText">
+\n\n3.0.1.3\'daki yenilikler:\n\n- Ayarlara telefon yazı tipini kullanma opsiyonu eklendi\n- Sohbet/Grup içinde arama opsiyonu eklendi\n- Ayarlar/Tema ekranında başlık rengi, başlık yazı rengi ve başlık ikonları değiştirme modu eklendi\n- Ana ekranda grup ikon rengini değiştirme modu eklendi\n- Sol menüdeki avatar büyüklüğünü değiştirme modu eklendi\n- Hata düzeltmeleri</string>-->
   <string name="TelegramForAndroid">Android için Plus Messenger</string>
   <string name="Theming">Tema</string>
   <string name="colorHexInvalid">Geçersiz renk hex kodu!</string>
@@ -518,4 +522,7 @@
   <string name="SummaryColor">Özet/Altyazı rengi</string>
   <string name="MediaColor">\'Fotoğraf/Çıkartma\' yazı rengi</string>
   <string name="ThemesAppMsg">Diğer Plus Messenger kullanıcıları tarafından oluşturulmuş temalara gözatmak istermisiniz?</string>
+  <string name="UseDeviceFont">Aygıt yazı tipini kullan</string>
+  <string name="AppWillRestart">Plus Messenger yeniden başlayacak</string>
+  <string name="GroupIconColor">Grup ikon rengi</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index f997a2f2e..9f4475941 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -94,4 +94,11 @@
         <item name="android:textColor">#000000</item>
     </style>
 
+    <!--ALERT DIALOG-->
+
+    <style name="DialogNoAnimation">
+        <item name="android:windowEnterAnimation">@null</item>
+        <item name="android:windowExitAnimation">@null</item>
+    </style>
+
 </resources>
diff --git a/TMessagesProj/src/main/res/values-zh-rCN/strings.xml b/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
index 615023afe..fff0573a6 100644
--- a/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
+++ b/TMessagesProj/src/main/res/values-zh-rCN/strings.xml
@@ -222,7 +222,6 @@
         <string name="ErrorOccurred">发生错误。</string>
   <!--stickers view-->
   <string name="Stickers">图贴</string>
-  <string name="GeniusStickerPackName">新点子</string>
   <string name="StickersInfo">欢迎艺术家使用 @stickers 机器人加入自己设计的图贴包。\n\n其他使用者可以通过长按选择“添加到图贴”的方式来加入图贴。</string>
   <string name="AddStickers">添加图贴</string>
   <string name="AddToStickers">添加到图贴库</string>
@@ -779,27 +778,30 @@
   <string name="formatterDay12H">h:mm a</string>
   <string name="formatDateAtTime">%1$s 的 %2$s</string>
   <!--update text-->
-  <string name="updateText">Android 版的 Telegram 已更新。最新版本是 2.9，新增功能有：\n\n- 安装和共享自制图贴 https://play.google.com/store/apps/details?id=es.rafalense.themes\n- 如果您是艺术家，可以自制并使用 @Stickers 机器人上传您的图贴\n- 为 Android Auto 修改适配。</string>
-  <string name="updateBuild">546</string>
-  <!--Plus Messenger-->
+  <string name="updateText">为 Plus Messenger 查找、下载并应用主题。每天都有新主题，当有新的主题发布时能够立即获得通知。分享您的主题给全世界所有的 Plus Messenger 用户。\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+  <string name="updateBuild">576</string>
+  <!--Telegram+--><!--
+  <string name="updatePlusText">\n\n在 3.0.1.3 版的新功能：\n\n- 添加设置使用手机字体选项\n- 添加聊天/群组聊天内搜索聊天记录选项\n- 在设置/主题调整界面里添加标头颜色、标题颜色和标头图标颜色的设置\n- 添加主界面群组图标颜色的设置\n- 添加导航栏中头像大小的设置\n- 错误修复</string>-->
   <string name="TelegramForAndroid">Plus Messenger for Android</string>
-  <string name="Theming">主题</string>
+  <string name="Theming">主题调整</string>
   <string name="colorHexInvalid">无效的颜色代码！</string>
   <string name="themeColor">主题颜色</string>
   <string name="ResetThemeSettings">重置主题设置</string>
   <string name="ResetThemeSettingsSum">撤销所有主题设置</string>
   <string name="ResetThemeToastText">重置为默认主题设置</string>
   <string name="General">通用</string>
-  <string name="Screens">屏幕</string>
-  <string name="MainScreen">主屏幕</string>
-  <string name="ChatScreen">聊天屏幕</string>
-  <string name="ContactsScreen">联系人屏幕</string>
+  <string name="Screens">界面</string>
+  <string name="MainScreen">主界面</string>
+  <string name="ChatScreen">聊天界面</string>
+  <string name="ContactsScreen">联系人界面</string>
   <string name="Header">标题</string>
   <string name="Rows">行</string>
   <string name="ChatList">聊天列表</string>
   <string name="ChatsList">聊天列表</string>
   <string name="ContactsList">联系人列表</string>
   <string name="HeaderColor">标题颜色</string>
+  <string name="NameColor">姓名颜色</string>
+  <string name="NameSize">姓名大小</string>
   <string name="MessageColor">信息颜色</string>
   <string name="MessageSize">信息大小</string>
   <string name="TimeDateColor">时间/日期颜色</string>
@@ -810,11 +812,11 @@
   <string name="CountBGColor">信息数目背景颜色</string>
   <string name="StatusColor">状态颜色</string>
   <string name="StatusSize">状态大小</string>
-  <string name="RBubbleColor">右侧气球颜色</string>
-  <string name="LBubbleColor">左侧气球颜色</string>
+  <string name="RBubbleColor">右侧气泡颜色</string>
+  <string name="LBubbleColor">左侧气泡颜色</string>
   <string name="DateColor">日期颜色</string>
   <string name="DateSize">日期大小</string>
-  <string name="DateBubbleColor">日期气球颜色</string>
+  <string name="DateBubbleColor">日期气泡颜色</string>
   <string name="RTextColor">右侧信息颜色</string>
   <string name="LTextColor">左侧信息颜色</string>
   <string name="RTimeColor">右侧时间颜色</string>
@@ -845,16 +847,16 @@
   <string name="SendLogs">发送日志</string>
   <string name="SendLogsEmpty">没有找到日志</string>
   <string name="SendIcon">发送图标</string>
-  <string name="HideMobile">菜单中隐藏电话号码</string>
+  <string name="HideMobile">在菜单中隐藏手机号码</string>
   <string name="FloatingPencilColor">浮动图标颜色</string>
   <string name="FloatingBGColor">浮动图标背景颜色</string>
-  <string name="Community">G+社区</string>
+  <string name="Community">G+ 社群</string>
   <string name="TypingColor">输入字体颜色</string>
   <string name="EditTextIconsColor">输入栏图标颜色</string>
   <string name="NavigationDrawer">导航栏抽屉</string>
   <string name="OptionsList">选项列表</string>
   <string name="ListColor">列表颜色</string>
-  <string name="OwnNameSize">名字大小</string>
+  <string name="OwnNameSize">姓名大小</string>
   <string name="PhoneColor">电话号码颜色</string>
   <string name="PhoneSize">电话号码大小</string>
   <string name="AvatarColor">头像颜色</string>
@@ -868,10 +870,42 @@
   <string name="DividerColor">分隔线颜色</string>
   <string name="AvatarRadius">头像半径</string>
   <string name="SetMemberColor">设置成员颜色</string>
-  <string name="ForwardNameColor">转发名字颜色</string>
+  <string name="ForwardNameColor">被转发者姓名颜色</string>
   <string name="HeaderTitle">标题文字</string>
-  <string name="ForwardNoQuote">转发不带引用</string>
+  <string name="ForwardNoQuote">不带引用转发</string>
   <string name="DisableMessageClick">禁用点击弹出框</string>
-  <string name="ProfileScreen">群组/联系人资料屏幕</string>
+  <string name="ProfileScreen">群组/联系人资料</string>
   <string name="HideBackground">隐藏自定义背景图</string>
+  <string name="RLinkColor">右侧链接颜色</string>
+  <string name="LLinkColor">左侧链接颜色</string>
+  <string name="ThemeApplied">主题已应用！</string>
+  <string name="ClickOkToRestart">点“确定”以重启应用</string>
+  <string name="ShowAndroidEmoji">显示手机里的表情符</string>
+  <string name="BubbleStyle">气泡风格</string>
+  <string name="KeepOriginalFilename">保留原始文件名</string>
+  <string name="KeepOriginalFilenameHelp">使用“名称_日期”格式保存文件，而不单只是数字序号</string>
+  <string name="AvatarSize">头像大小</string>
+  <string name="AvatarAlignTop">对齐头像到顶部</string>
+  <string name="AvatarMarginLeft">头像左边距</string>
+  <string name="GroupNameColor">群组名称颜色</string>
+  <string name="GroupNameSize">群组名称大小</string>
+  <string name="UnknownNameColor">姓名颜色（手机号码未知）</string>
+  <string name="HideBackgroundShadow">隐藏自定义背景的阴影</string>
+  <string name="SetSolidBGColor">设置背景颜色</string>
+  <string name="SolidBGColor">背景颜色</string>
+  <string name="EmojiPopupSize">表情符弹出大小</string>
+  <string name="ForwardRightNameColor">右侧气泡中转发信息姓名的颜色</string>
+  <string name="ForwardLeftNameColor">左侧气泡中转发信息姓名的颜色</string>
+  <string name="IconsColor">图标颜色</string>
+  <string name="SettingsScreen">设置/主题调整界面</string>
+  <string name="BackgroundColor">背景颜色</string>
+  <string name="ShadowColor">阴影颜色</string>
+  <string name="SectionColor">节标题颜色</string>
+  <string name="TitleColor">标题颜色</string>
+  <string name="SummaryColor">摘要/副标题颜色</string>
+  <string name="MediaColor">“图片/图贴”信息颜色</string>
+  <string name="ThemesAppMsg">您想看看一些来自Plus Messager用户的主题吗？</string>
+  <string name="UseDeviceFont">使用设备自带字体</string>
+  <string name="AppWillRestart">Plus Messenger 将重启</string>
+  <string name="GroupIconColor">群组图标颜色</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values-zh-rTW/strings.xml b/TMessagesProj/src/main/res/values-zh-rTW/strings.xml
index 7006f0ca4..b356963dc 100644
--- a/TMessagesProj/src/main/res/values-zh-rTW/strings.xml
+++ b/TMessagesProj/src/main/res/values-zh-rTW/strings.xml
@@ -242,7 +242,6 @@
     <string name="ErrorOccurred">發生錯誤。</string>
   <!--stickers view-->
   <string name="Stickers">貼圖</string>
-  <string name="GeniusStickerPackName">偉大的人們</string>
   <string name="StickersInfo">歡迎畫家使用我們的 @Stickers Bot 加入他們自己的貼圖集。\n\n用戶可以通過點擊它們加入貼圖，並選擇 \"加入到貼圖\"。</string>
   <string name="AddStickers">加入貼圖</string>
   <string name="AddToStickers">加入到貼圖</string>
@@ -802,11 +801,13 @@
     <string name="formatterDay12H">a h:mm</string>
     <string name="formatDateAtTime">%1$s 於時間 %2$s</string>
   <!--update text-->
-  <string name="updateText">適用於 Android 的 Plus Messenger 已經更新。在 2.9 版中的新功能：\n\n- 安裝和分享自訂貼圖集，像這樣的：https://play.google.com/store/apps/details?id=es.rafalense.themes\n- 如果您是一個畫家，您可以使用我們的 @Stickers Bot 建立自訂貼圖集。\n\n- 使用帶有 Android Auto 功能的 Telegram。</string>
-  <string name="updateBuild">546</string>
-  <!--Telegram+-->
-  <string name="TelegramForAndroid">Plus Messenger Android版</string>
-  <string name="Theming">佈景主題</string>
+  <string name="updateText">檢查，下載並套用給 Plus Messenger 使用的主題。每天都有新的主題。當新的主題發布時，收到通知。與世界各地的所有 Plus Messenger 用戶分享您的主題：\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+  <string name="updateBuild">576</string>
+  <!--Telegram+--><!--
+  <string name="updatePlusText">
+\n\n在 3.0.1.3 版的新功能：\n\n- 在「設定」中使用手機字型的選項\n- 在聊天室/群組聊天室內部搜尋的選項\n- 加入模組以變更在「設定」與「自製佈景主題」中的標頭顏色、標頭標題顏色和標頭圖示顏色\n- 模組用於變更在主畫面中群組圖示的顏色\n- 模組用於在導航選單變更大頭照大小\n- 錯誤修正</string>-->
+  <string name="TelegramForAndroid">適用於 Android 的 Plus Messenger</string>
+  <string name="Theming">自製佈景主題</string>
   <string name="colorHexInvalid">無效的十六進位顏色代碼！</string>
   <string name="themeColor">主題顏色</string>
   <string name="ResetThemeSettings">重置主題設定</string>
@@ -817,18 +818,18 @@
   <string name="MainScreen">主畫面</string>
   <string name="ChatScreen">聊天室畫面</string>
   <string name="ContactsScreen">聯絡人畫面</string>
-  <string name="Header">標題</string>
+  <string name="Header">標頭</string>
   <string name="Rows">行</string>
   <string name="ChatList">聊天清單</string>
   <string name="ChatsList">聊天清單</string>
   <string name="ContactsList">聯絡人清單</string>
-  <string name="HeaderColor">標題顏色</string>
+  <string name="HeaderColor">標頭顏色</string>
   <string name="NameColor">名稱顏色</string>
   <string name="NameSize">名稱字體大小</string>
   <string name="MessageColor">訊息顏色</string>
   <string name="MessageSize">訊息字體大小</string>
-  <string name="TimeDateColor">時間/日期顏色</string>
-  <string name="TimeDateSize">時間/日期字體大小</string>
+  <string name="TimeDateColor">時間＆日期顏色</string>
+  <string name="TimeDateSize">時間＆日期字體大小</string>
   <string name="CountColor">訊息數顏色</string>
   <string name="CountSize">訊息數字體大小</string>
   <string name="RowColor">行顏色</string>
@@ -876,28 +877,28 @@
   <string name="Community">G+社群</string>
   <string name="TypingColor">輸入中顏色</string>
   <string name="EditTextIconsColor">輸入欄圖示顏色</string>
-  <string name="NavigationDrawer">導航欄抽屜</string>
+  <string name="NavigationDrawer">導航抽屜</string>
   <string name="OptionsList">選項清單</string>
   <string name="ListColor">清單顏色</string>
   <string name="OwnNameSize">名稱大小</string>
   <string name="PhoneColor">電話號碼顏色</string>
   <string name="PhoneSize">電話號碼大小</string>
-  <string name="AvatarColor">頭像顏色</string>
+  <string name="AvatarColor">大頭照顏色</string>
   <string name="IconColor">選項圖示的顏色</string>
   <string name="OptionColor">選擇字體顏色</string>
   <string name="OptionSize">選擇字體大小</string>
   <string name="VersionColor">版本號字體顏色</string>
   <string name="VersionSize">版本號字體大小</string>
-  <string name="HeaderTitleColor">標題顏色</string>
-  <string name="HeaderIconsColor">標題圖示顏色</string>
+  <string name="HeaderTitleColor">標頭的標題顏色</string>
+  <string name="HeaderIconsColor">標頭圖示顏色</string>
   <string name="DividerColor">分隔線顏色</string>
-  <string name="AvatarRadius">頭像半徑</string>
+  <string name="AvatarRadius">大頭照半徑</string>
   <string name="SetMemberColor">設定成員顏色</string>
   <string name="ForwardNameColor">轉發名字顏色</string>
-  <string name="HeaderTitle">標題文字</string>
+  <string name="HeaderTitle">標頭的標題</string>
   <string name="ForwardNoQuote">轉寄訊息而不引用</string>
   <string name="DisableMessageClick">點擊禁用彈出視窗</string>
-  <string name="ProfileScreen">群組/聯絡人簡介</string>
+  <string name="ProfileScreen">群組＆聯絡人簡介</string>
   <string name="HideBackground">隱藏自訂背景</string>
   <string name="RLinkColor">右邊連結顏色</string>
   <string name="LLinkColor">左邊連結顏色</string>
@@ -907,13 +908,28 @@
   <string name="BubbleStyle">對話氣泡風格</string>
   <string name="KeepOriginalFilename">保留原始檔名</string>
   <string name="KeepOriginalFilenameHelp">取代僅僅是數字的方式，檔案將被儲存為「名稱_日期」的格式</string>
-  <string name="AvatarSize">頭像大小</string>
-  <string name="AvatarAlignTop">對齊頭像到頂部</string>
-  <string name="AvatarMarginLeft">頭像左邊距</string>
+  <string name="AvatarSize">大頭照大小</string>
+  <string name="AvatarAlignTop">對齊大頭照到頂端</string>
+  <string name="AvatarMarginLeft">大頭照左邊距</string>
   <string name="GroupNameColor">群組名稱顏色</string>
   <string name="GroupNameSize">群組名稱大小</string>
   <string name="UnknownNameColor">名稱顏色 (數量不明)</string>
   <string name="HideBackgroundShadow">隱藏自訂背景陰影</string>
   <string name="SetSolidBGColor">設定背景色</string>
   <string name="SolidBGColor">背景色</string>
+  <string name="EmojiPopupSize">表情符號彈出大小</string>
+  <string name="ForwardRightNameColor">轉寄右邊對話氣泡名稱的顏色</string>
+  <string name="ForwardLeftNameColor">轉寄左邊對話氣泡名稱的顏色</string>
+  <string name="IconsColor">圖示顏色</string>
+  <string name="SettingsScreen">設定＆自製佈景主題畫面</string>
+  <string name="BackgroundColor">背景色</string>
+  <string name="ShadowColor">陰影顏色</string>
+  <string name="SectionColor">區塊主題顏色</string>
+  <string name="TitleColor">標題顏色</string>
+  <string name="SummaryColor">說明摘要＆字幕顏色</string>
+  <string name="MediaColor">\'照片/貼圖\' 文字顏色</string>
+  <string name="ThemesAppMsg">您想查詢其他 Plus Messenger 用戶創建的一些主題嗎？</string>
+  <string name="UseDeviceFont">使用裝置字型</string>
+  <string name="AppWillRestart">Plus Messenger 將重新啟動</string>
+  <string name="GroupIconColor">群組圖示顏色</string>
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 00906c050..083e825b2 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -98,6 +98,7 @@
     <string name="ChatLocation">Location</string>
     <string name="ChatVideo">Video</string>
     <string name="ChatDocument">File</string>
+    <string name="ChatCamera">Camera</string>
     <string name="NoMessages">No messages here yet...</string>
     <string name="ForwardedMessage">Forwarded message</string>
     <string name="From">From</string>
@@ -127,6 +128,7 @@
     <string name="GettingLinkInfo">Getting Link Info...</string>
     <string name="OpenInBrowser">Open in Browser</string>
     <string name="CopyUrl">Copy URL</string>
+    <string name="SendItems">Send %1$s</string>
     <!--notification-->
     <string name="MessageLifetimeChanged">%1$s set the self-destruct timer to %2$s</string>
     <string name="MessageLifetimeChangedOutgoing">You set the self-destruct timer to %1$s</string>
@@ -244,7 +246,6 @@
     <string name="ErrorOccurred">An error occurred.</string>
     <!--stickers view-->
     <string name="Stickers">Stickers</string>
-    <string name="GeniusStickerPackName">Great Minds</string>
     <string name="StickersInfo">Artists are welcome to add their own sticker packs using our @stickers bot.\n\nUsers can add stickers by tapping on them and choosing \"Add to Stickers\".</string>
     <string name="AddStickers">Add Stickers</string>
     <string name="AddToStickers">Add to Stickers</string>
@@ -293,7 +294,7 @@
     <string name="ContactJoined">Contact joined Telegram</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Language</string>
-    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"http://telegram.org/faq#general\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
+    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"https://telegram.org/faq#general\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"https://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
     <string name="AskButton">Ask a volunteer</string>
     <string name="TelegramFaq">Telegram FAQ</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
@@ -527,6 +528,16 @@
     <string name="EditedVideo">Edited Video</string>
     <string name="SendingVideo">Sending video...</string>
     <string name="CompressVideo">Compress Video</string>
+    <!--bot-->
+    <string name="Bot">bot</string>
+    <string name="BotShare">Share</string>
+    <string name="BotInvite">Add to group</string>
+    <string name="BotSettings">Settings</string>
+    <string name="BotHelp">Help</string>
+    <string name="BotStatusRead">has access to messages</string>
+    <string name="BotStatusCantRead">has no access to messages</string>
+    <string name="BotInfoTitle">What can this bot do?</string>
+    <string name="BotStart">START</string>
     <!--button titles-->
     <string name="Next">Next</string>
     <string name="Back">Back</string>
@@ -569,7 +580,7 @@
     <string name="ActionAddUserYou">un1 added you</string>
     <string name="ActionAddUserSelf">un1 returned to the group</string>
     <string name="ActionAddUserSelfYou">You returned to the group</string>
-    <string name="UnsuppotedMedia">This message is not supported on your version of Telegram. Update the app to view: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">This message is not supported on your version of Telegram. Update the app to view: https://telegram.org/update</string>
     <string name="AttachPhoto">Photo</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Location</string>
@@ -594,7 +605,10 @@
     <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
     <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
     <string name="AreYouSure">Are you sure?</string>
-    <string name="AddToTheGroup">Add %1$s to the group?\n\nNumber of last messages to forward:</string>
+    <string name="AddToTheGroupTitle">Add %1$s to the group %2$s?</string>
+    <string name="AddToTheGroupForwardCount">Number of last messages to forward:</string>
+    <string name="AddToTheGroup">Add %1$s to the group?</string>
+    <string name="UserAlreadyInGroup">This user is already in this group</string>
     <string name="ForwardMessagesTo">Forward messages to %1$s?</string>
     <string name="SendMessagesTo">Send messages to %1$s?</string>
     <string name="AreYouSureLogout">Are you sure you want to log out?\n\nNote that you can seamlessly use Telegram on all your devices at once.\n\nRemember, logging out kills all your Secret Chats.</string>
@@ -612,6 +626,8 @@
     <string name="SendMessagesToGroup">Send messages to %1$s?</string>
     <string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
     <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <string name="NoUsernameFound">There is no Telegram account with this username.</string>
+    <string name="BotCantJoinGroups">This bot can\'t join groups.</string>
     <!--Intro view-->
     <string name="Page1Title">Plus Messenger</string>
     <string name="Page2Title">Fast</string>
@@ -737,6 +753,12 @@
     <string name="Stickers_few">%1$d stickers</string>
     <string name="Stickers_many">%1$d stickers</string>
     <string name="Stickers_other">%1$d stickers</string>
+    <string name="Photos_zero">%1$d photos</string>
+    <string name="Photos_one">%1$d photo</string>
+    <string name="Photos_two">%1$d photos</string>
+    <string name="Photos_few">%1$d photos</string>
+    <string name="Photos_many">%1$d photos</string>
+    <string name="Photos_other">%1$d photos</string>
     <!--forwarded messages-->
     <string name="ForwardedMessage_zero">%1$d forwarded messages</string>
     <string name="ForwardedMessage_one">Forwarded message</string>
@@ -804,10 +826,10 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
     <!--update text-->
-    <string name="updateText">Plus Messenger for Android has been updated. New in version 2.9:\n\n- Check, download and apply themes for Plus Messenger:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
-    <string name="updateBuild">546</string>
-    <!--Telegram+ English-->
-    <string name="updatePlusText">\n\nNew in 2.9.1.4:\n\n- Option to change default emoji window size in chat screen (option in Settings/Messages)\n- Option to change level of compression when sharing a video\n- Added MODs to adjust Settings/Theming screen colors\n- Added separated MODs for forward name color for right and left bubble in chat screen\n- Added MOD to change icons colors in Contacts screen\n- Added MOD to change color of \'Photo/Sticker\' text in main screen\n- Bug fixes</string>
+    <string name="updateText">Plus Messenger for Android has been updated. New in version 3.0:\n\n- Dedicated tabs for each one of your custom sticker sets in the sticker panel. Add custom stickers like https://telegram.me/addstickers/Animals\n- New bot API, free for everyone. If you\'re an engineer, create your own bots for games, services or integrations. Learn more at https://telegram.org/blog/bot-revolution\n- Check, download and apply themes for Plus Messenger. New themes every day:\n https://play.google.com/store/apps/details?id=es.rafalense.themes</string>
+    <string name="updateBuild">576</string>
+    <!--Telegram+-->
+    <string name="updatePlusText">\n\nNew in 3.0.1.5:\n\n- Fixed options to share music and stickers\n- Added option to share contact number\n- Added option to add member directly from group options\n- Added option to mute or activate notifications from main screen\n- Bug fixes</string>
     <string name="TelegramForAndroid">Plus Messenger for Android</string>
     <string name="Theming">Theming</string>
     <string name="colorHexInvalid">Invalid color hex code!</string>
@@ -920,8 +942,8 @@
     <string name="SetSolidBGColor">Set background color</string>
     <string name="SolidBGColor">Background color</string>
     <string name="EmojiPopupSize">Emoji Popup size</string>
-    <string name="ForwardRightNameColor">Forward right name color</string>
-    <string name="ForwardLeftNameColor">Forward left name color</string>
+  <string name="ForwardRightNameColor">Forward right bubble name color</string>
+  <string name="ForwardLeftNameColor">Forward left bubble name color</string>
     <string name="IconsColor">Icons color</string>
     <string name="SettingsScreen">Settings/Theming screen</string>
     <string name="BackgroundColor">Background Color</string>
@@ -931,4 +953,7 @@
     <string name="SummaryColor">Summary/Subtitle Color</string>
     <string name="MediaColor">\'Photo/Sticker\' text color</string>
     <string name="ThemesAppMsg">Would you like to check some themes created by other Plus Messenger users?</string>
+    <string name="UseDeviceFont">Use device font</string>
+    <string name="AppWillRestart">Plus Messenger will restart</string>
+    <string name="GroupIconColor">Group icon color</string>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index ae16acf96..d79640450 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -70,6 +70,14 @@
         <item name="android:textColor">#000000</item>
     </style>
 
+    <!--ALERT DIALOG-->
+
+    <style name="DialogNoAnimation">
+        <item name="android:windowEnterAnimation">@null</item>
+        <item name="android:windowExitAnimation">@null</item>
+    </style>
+
+
     <style name="myBackgroundStyle" parent="@android:style/Theme.Dialog">
     <item name="android:windowBackground">@android:color/transparent</item>
     <item name="android:windowNoTitle">true</item>
diff --git a/build.gradle b/build.gradle
index 495c5038e..712b03d91 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1 +1,9 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+    }
+}
\ No newline at end of file
