diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index fe523f6ea..ccf80bdac 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -172,7 +172,7 @@ android {
     defaultConfig {
         minSdkVersion 16
         targetSdkVersion 25
-        versionName "4.6.0"
+        versionName "0.1.0"
 
         externalNativeBuild {
             ndkBuild {
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index b08933c76..0245101c4 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -68,7 +68,7 @@
         <receiver
             tools:replace="android:enabled"
             android:name="com.google.android.gms.measurement.AppMeasurementReceiver"
-            android:enabled="false">
+            android:enabled="true">
             <intent-filter>
                 <action android:name="com.google.android.gms.measurement.UPLOAD" />
             </intent-filter>
@@ -77,7 +77,7 @@
         <service
             tools:replace="android:enabled"
             android:name="com.google.android.gms.measurement.AppMeasurementService"
-            android:enabled="false"
+            android:enabled="true"
             android:exported="false" />
 
     </application>
diff --git a/TMessagesProj/jni/tgnet/Connection.cpp b/TMessagesProj/jni/tgnet/Connection.cpp
index ea7b73be2..5c22e08e8 100644
--- a/TMessagesProj/jni/tgnet/Connection.cpp
+++ b/TMessagesProj/jni/tgnet/Connection.cpp
@@ -61,8 +61,6 @@ void Connection::suspendConnection(bool idle) {
 }
 
 void Connection::onReceivedData(NativeByteBuffer *buffer) {
-    AES_ctr128_encrypt(buffer->bytes(), buffer->bytes(), buffer->limit(), &decryptKey, decryptIv, decryptCount, &decryptNum);
-    
     failedConnectionCount = 0;
 
     NativeByteBuffer *parseLaterBuffer = nullptr;
@@ -115,83 +113,12 @@ void Connection::onReceivedData(NativeByteBuffer *buffer) {
         }
         hasSomeDataSinceLastConnect = true;
 
-        uint32_t currentPacketLength = 0;
-        uint32_t mark = buffer->position();
-        uint8_t fByte = buffer->readByte(nullptr);
+        //TODO must delete
+        buffer->rewind();
 
-        if ((fByte & (1 << 7)) != 0) {
-            buffer->position(mark);
-            if (buffer->remaining() < 4) {
-                NativeByteBuffer *reuseLater = restOfTheData;
-                restOfTheData = BuffersStorage::getInstance().getFreeBuffer(16384);
-                restOfTheData->writeBytes(buffer);
-                restOfTheData->limit(restOfTheData->position());
-                lastPacketLength = 0;
-                if (reuseLater != nullptr) {
-                    reuseLater->reuse();
-                }
-                break;
-            }
-            int32_t ackId = buffer->readBigInt32(nullptr) & (~(1 << 31));
-            ConnectionsManager::getInstance().onConnectionQuickAckReceived(this, ackId);
-            continue;
-        }
-
-        if (fByte != 0x7f) {
-            currentPacketLength = ((uint32_t) fByte) * 4;
-        } else {
-            buffer->position(mark);
-            if (buffer->remaining() < 4) {
-                if (restOfTheData == nullptr || (restOfTheData != nullptr && restOfTheData->position() != 0)) {
-                    NativeByteBuffer *reuseLater = restOfTheData;
-                    restOfTheData = BuffersStorage::getInstance().getFreeBuffer(16384);
-                    restOfTheData->writeBytes(buffer);
-                    restOfTheData->limit(restOfTheData->position());
-                    lastPacketLength = 0;
-                    if (reuseLater != nullptr) {
-                        reuseLater->reuse();
-                    }
-                } else {
-                    restOfTheData->position(restOfTheData->limit());
-                }
-                break;
-            }
-            currentPacketLength = ((uint32_t) buffer->readInt32(nullptr) >> 8) * 4;
-        }
-
-        if (currentPacketLength % 4 != 0 || currentPacketLength > 2 * 1024 * 1024) {
-            DEBUG_E("connection(%p, dc%u, type %d) received invalid packet length", this, currentDatacenter->getDatacenterId(), connectionType);
-            reconnect();
-            return;
-        }
+        uint32_t currentPacketLength = buffer->readUint32(nullptr)-12;
+        uint32_t sequenceFromServer = buffer->readUint32(nullptr);
 
-        if (currentPacketLength < buffer->remaining()) {
-            DEBUG_E("connection(%p, dc%u, type %d) received message len %u but packet larger %u", this, currentDatacenter->getDatacenterId(), connectionType, currentPacketLength, buffer->remaining());
-        } else if (currentPacketLength == buffer->remaining()) {
-            DEBUG_E("connection(%p, dc%u, type %d) received message len %u equal to packet size", this, currentDatacenter->getDatacenterId(), connectionType, currentPacketLength);
-        } else {
-            DEBUG_E("connection(%p, dc%u, type %d) received packet size less(%u) then message size(%u)", this, currentDatacenter->getDatacenterId(), connectionType, buffer->remaining(), currentPacketLength);
-
-            NativeByteBuffer *reuseLater = nullptr;
-            uint32_t len = currentPacketLength + (fByte != 0x7f ? 1 : 4);
-            if (restOfTheData != nullptr && restOfTheData->capacity() < len) {
-                reuseLater = restOfTheData;
-                restOfTheData = nullptr;
-            }
-            if (restOfTheData == nullptr) {
-                buffer->position(mark);
-                restOfTheData = BuffersStorage::getInstance().getFreeBuffer(len);
-                restOfTheData->writeBytes(buffer);
-            } else {
-                restOfTheData->position(restOfTheData->limit());
-                restOfTheData->limit(len);
-            }
-            lastPacketLength = len;
-            if (reuseLater != nullptr) {
-                reuseLater->reuse();
-            }
-            return;
-        }
 
         uint32_t old = buffer->limit();
         buffer->limit(buffer->position() + currentPacketLength);
@@ -199,6 +126,8 @@ void Connection::onReceivedData(NativeByteBuffer *buffer) {
         buffer->position(buffer->limit());
         buffer->limit(old);
 
+        uint32_t checksum = buffer->readUint32(nullptr);
+
         if (restOfTheData != nullptr) {
             if ((lastPacketLength != 0 && restOfTheData->position() == lastPacketLength) || (lastPacketLength == 0 && !restOfTheData->hasRemaining())) {
                 restOfTheData->reuse();
@@ -315,79 +244,8 @@ void Connection::sendData(NativeByteBuffer *buff, bool reportAck) {
         return;
     }
 
-    uint32_t bufferLen = 0;
-    uint32_t packetLength = buff->limit() / 4;
-
-    if (packetLength < 0x7f) {
-        bufferLen++;
-    } else {
-        bufferLen += 4;
-    }
-    if (!firstPacketSent) {
-        bufferLen += 64;
-    }
-
-    NativeByteBuffer *buffer = BuffersStorage::getInstance().getFreeBuffer(bufferLen);
-    uint8_t *bytes = buffer->bytes();
-    
-    if (!firstPacketSent) {
-        buffer->position(64);
-        static uint8_t temp[64];
-        while (true) {
-            RAND_bytes(bytes, 64);
-            uint32_t val = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | (bytes[0]);
-            uint32_t val2 = (bytes[7] << 24) | (bytes[6] << 16) | (bytes[5] << 8) | (bytes[4]);
-            if (bytes[0] != 0xef && val != 0x44414548 && val != 0x54534f50 && val != 0x20544547 && val != 0x4954504f && val != 0xeeeeeeee && val2 != 0x00000000) {
-                bytes[56] = bytes[57] = bytes[58] = bytes[59] = 0xef;
-                break;
-            }
-        }
-        for (int a = 0; a < 48; a++) {
-            temp[a] = bytes[55 - a];
-        }
-        
-        encryptNum = decryptNum = 0;
-        memset(encryptCount, 0, 16);
-        memset(decryptCount, 0, 16);
-        
-        if (AES_set_encrypt_key(bytes + 8, 256, &encryptKey) < 0) {
-            DEBUG_E("unable to set encryptKey");
-            exit(1);
-        }
-        memcpy(encryptIv, bytes + 40, 16);
-        
-        if (AES_set_encrypt_key(temp, 256, &decryptKey) < 0) {
-            DEBUG_E("unable to set decryptKey");
-            exit(1);
-        }
-        memcpy(decryptIv, temp + 32, 16);
-        
-        AES_ctr128_encrypt(bytes, temp, 64, &encryptKey, encryptIv, encryptCount, &encryptNum);
-        memcpy(bytes + 56, temp + 56, 8);
-        
-        firstPacketSent = true;
-    }
-    if (packetLength < 0x7f) {
-        if (reportAck) {
-            packetLength |= (1 << 7);
-        }
-        buffer->writeByte((uint8_t) packetLength);
-        bytes += (buffer->limit() - 1);
-        AES_ctr128_encrypt(bytes, bytes, 1, &encryptKey, encryptIv, encryptCount, &encryptNum);
-    } else {
-        packetLength = (packetLength << 8) + 0x7f;
-        if (reportAck) {
-            packetLength |= (1 << 7);
-        }
-        buffer->writeInt32(packetLength);
-        bytes += (buffer->limit() - 4);
-        AES_ctr128_encrypt(bytes, bytes, 4, &encryptKey, encryptIv, encryptCount, &encryptNum);
-    }
+    //---no encryption!
 
-    buffer->rewind();
-    writeBuffer(buffer);
-    buff->rewind();
-    AES_ctr128_encrypt(buff->bytes(), buff->bytes(), buff->limit(), &encryptKey, encryptIv, encryptCount, &encryptNum);
     writeBuffer(buff);
 }
 
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 991fd9dd0..8fed8b016 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -712,9 +712,9 @@ void ConnectionsManager::onConnectionDataReceived(Connection *connection, Native
             return;
         }
 
-        if (connection->isMessageIdProcessed(messageId)) {
-            return;
-        }
+//        if (connection->isMessageIdProcessed(messageId)) {
+//            return;
+//        }
 
         uint32_t messageLength = data->readUint32(&error);
         if (error) {
@@ -1386,10 +1386,22 @@ void ConnectionsManager::initDatacenters() {
     if (!testBackend) {
         if (datacenters.find(1) == datacenters.end()) {
             datacenter = new Datacenter(1);
-            datacenter->addAddressAndPort("149.154.175.50", 443, 0);
-            datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000a", 443, 1);
+            datacenter->addAddressAndPort("192.168.1.71", 5000, 0);
+            //datacenter->addAddressAndPort("::1", 5000, 1);
             datacenters[1] = datacenter;
         }
+        if (datacenters.find(2) == datacenters.end()) {
+            datacenter = new Datacenter(2);
+            datacenter->addAddressAndPort("192.168.1.71", 5000, 0);
+            //datacenter->addAddressAndPort("::1", 5000, 1);
+            datacenters[2] = datacenter;
+        }
+//        if (datacenters.find(1) == datacenters.end()) {
+//            datacenter = new Datacenter(1);
+//            datacenter->addAddressAndPort("149.154.175.50", 443, 0);
+//            datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000a", 443, 1);
+//            datacenters[1] = datacenter;
+//        }
 
 //        if (datacenters.find(2) == datacenters.end()) {
 //            datacenter = new Datacenter(2);
@@ -1420,18 +1432,24 @@ void ConnectionsManager::initDatacenters() {
 //        }
     } else {
         if (datacenters.find(1) == datacenters.end()) {
-            datacenter = new Datacenter(1);
-            datacenter->addAddressAndPort("149.154.175.40", 443, 0);
-            datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000e", 443, 1);
+            datacenter = new Datacenter(2);
+            datacenter->addAddressAndPort("192.168.1.71", 5000, 0);
+            //datacenter->addAddressAndPort("::1", 5000, 1);
             datacenters[1] = datacenter;
         }
+//        if (datacenters.find(1) == datacenters.end()) {
+//            datacenter = new Datacenter(1);
+//            datacenter->addAddressAndPort("149.154.175.40", 443, 0);
+//            datacenter->addAddressAndPort("2001:b28:f23d:f001:0000:0000:0000:000e", 443, 1);
+//            datacenters[1] = datacenter;
+//        }
 
-        if (datacenters.find(2) == datacenters.end()) {
-            datacenter = new Datacenter(2);
-            datacenter->addAddressAndPort("149.154.167.40", 443, 0);
-            datacenter->addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000e", 443, 1);
-            datacenters[2] = datacenter;
-        }
+//        if (datacenters.find(2) == datacenters.end()) {
+//            datacenter = new Datacenter(2);
+//            datacenter->addAddressAndPort("149.154.167.40", 443, 0);
+//            datacenter->addAddressAndPort("2001:67c:4e8:f002:0000:0000:0000:000e", 443, 1);
+//            datacenters[2] = datacenter;
+//        }
 
 //        if (datacenters.find(3) == datacenters.end()) {
 //            datacenter = new Datacenter(3);
diff --git a/TMessagesProj/jni/tgnet/Datacenter.cpp b/TMessagesProj/jni/tgnet/Datacenter.cpp
index ffa66fa54..97a330268 100644
--- a/TMessagesProj/jni/tgnet/Datacenter.cpp
+++ b/TMessagesProj/jni/tgnet/Datacenter.cpp
@@ -920,7 +920,9 @@ inline bool isGoodPrime(BIGNUM *p, uint32_t g) {
     }
 
     char *prime = BN_bn2hex(p);
-    static const char *goodPrime = "c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b";
+    //static const char *goodPrime = "c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b";
+    static const char *goodPrime = "c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f";
+
     if (!strcasecmp(prime, goodPrime)) {
         delete [] prime;
         BN_free(t);
@@ -1017,6 +1019,9 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
                 }
             } else {
                 if (serverPublicKeys.empty()) {
+                    serverPublicKeys.push_back
+                    serverPublicKeysFingerprints.push_back(0x6e5ac1e9f67f0ba3);
+
                     serverPublicKeys.push_back("-----BEGIN RSA PUBLIC KEY-----\n"
                                                        "MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6\n"
                                                        "lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS\n"
@@ -1180,7 +1185,12 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
 
             BIO *keyBio = BIO_new(BIO_s_mem());
             BIO_write(keyBio, key.c_str(), (int) key.length());
-            RSA *rsaKey = PEM_read_bio_RSAPublicKey(keyBio, NULL, NULL, NULL);
+            //RSA *rsaKey = PEM_read_bio_RSAPublicKey(keyBio, NULL, NULL, NULL);
+            RSA *rsaKey=new RSA();
+            BN_hex2bn(&rsaKey->e,"010001");
+            BN_hex2bn(&rsaKey->n
+
+
             BIO_free(keyBio);
             if (bnContext == nullptr) {
                 bnContext = BN_CTX_new();
@@ -1196,12 +1206,14 @@ void Datacenter::processHandshakeResponse(TLObject *message, int64_t messageId)
             }
             BN_free(a);
             BN_free(r);
-            RSA_free(rsaKey);
+            //RSA_free(rsaKey);
+            BN_clear_free(rsaKey->e);
+            BN_clear_free(rsaKey->n);
             innerDataBuffer->reuse();
 
             request->encrypted_data = std::unique_ptr<ByteArray>(rsaEncryptedData);
-
-            sendAckRequest(messageId);
+            //TODO uncomment
+            //sendAckRequest(messageId);
             sendRequestData(request, true);
         } else {
             DEBUG_E("dc%u handshake: invalid client nonce", datacenterId);
