diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index b8f4f7146..183601b05 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -38,6 +38,10 @@ dependencies {
     compile 'net.hockeyapp.android:HockeySDK:4.1.2'
     compile 'com.stripe:stripe-android:2.0.2'
     compile 'com.googlecode.mp4parser:isoparser:1.0.6'
+    compile 'com.squareup.retrofit2:retrofit:2.3.0'
+    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
+    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
+    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
     compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
         transitive = true;
     }
diff --git a/TMessagesProj/jni/sqlite/sqlite3.c b/TMessagesProj/jni/sqlite/sqlite3.c
index 76734f57b..1f27536d7 100644
--- a/TMessagesProj/jni/sqlite/sqlite3.c
+++ b/TMessagesProj/jni/sqlite/sqlite3.c
@@ -17,9 +17,6 @@
 ** language. The code for the "sqlite3" command-line shell is also in a
 ** separate file. This file contains only code for the core SQLite library.
 */
-#ifdef __ANDROID__
-#define SQLITE_DISABLE_LFS 1
-#endif
 
 #define SQLITE_CORE 1
 #define SQLITE_AMALGAMATION 1
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index 0fdf8289d..364cb93b0 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -347,6 +347,7 @@
                     android:scheme="wear" />
             </intent-filter>
         </service>
+        <service android:name="org.cloudveil.messenger.service.ChannelCheckingService"/>
 
         <receiver android:name=".MusicPlayerReceiver">
             <intent-filter>
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
new file mode 100644
index 000000000..32a3155ca
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/request/SettingsRequest.java
@@ -0,0 +1,24 @@
+package org.cloudveil.messenger.api.model.request;
+
+import java.util.ArrayList;
+
+/**
+ * Created by Dmitriy on 05.02.2018.
+ */
+
+public class SettingsRequest {
+    public int userId;
+    public String userPhone;
+    public ArrayList<Row> groups = new ArrayList<>();
+    public ArrayList<Row> channels = new ArrayList<>();
+    public ArrayList<Row> bots = new ArrayList<>();
+
+    public boolean isEmpty() {
+        return groups.isEmpty() && channels.isEmpty() && bots.isEmpty();
+    }
+
+    public static class Row {
+        public int id;
+        public String title;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
new file mode 100644
index 000000000..cc871255d
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/model/response/SettingsResponse.java
@@ -0,0 +1,11 @@
+package org.cloudveil.messenger.api.model.response;
+
+/**
+ * Created by Dmitriy on 05.02.2018.
+ */
+
+public class SettingsResponse {
+    public boolean secretChat;
+    public int secretChatMinimumLength;
+
+}
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/MessengerHttpInterface.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/MessengerHttpInterface.java
new file mode 100644
index 000000000..ecf536d3a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/MessengerHttpInterface.java
@@ -0,0 +1,15 @@
+package org.cloudveil.messenger.api.service;
+
+
+import org.cloudveil.messenger.api.model.request.SettingsRequest;
+import org.cloudveil.messenger.api.model.response.SettingsResponse;
+
+import io.reactivex.Observable;
+import retrofit2.http.Body;
+import retrofit2.http.POST;
+
+public interface MessengerHttpInterface {
+    @POST("settings")
+    Observable<SettingsResponse> loadSettings(@Body SettingsRequest request);
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolder.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolder.java
new file mode 100644
index 000000000..9ada3ef6f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolder.java
@@ -0,0 +1,73 @@
+package org.cloudveil.messenger.api.service.holder;
+
+import android.util.Base64;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import org.cloudveil.messenger.api.service.interceptor.HttpLoggingInterceptor;
+
+import java.lang.reflect.Type;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
+import retrofit2.converter.gson.GsonConverterFactory;
+
+class ServiceClientHolder<T> {
+    private T instance;
+
+    public ServiceClientHolder(String endpoint, Class<T> clazz) {
+        final Retrofit restAdapter = createRestAdapter(endpoint);
+        instance = restAdapter.create(clazz);
+    }
+
+    protected Retrofit createRestAdapter(String endpoint) {
+        Gson gson = new GsonBuilder()
+                .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+                .registerTypeHierarchyAdapter(byte[].class, new ByteArrayToBase64TypeAdapter())
+                .create();
+
+        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
+        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
+
+        final OkHttpClient.Builder okHttpClientBuilder = new OkHttpClient.Builder();
+        okHttpClientBuilder.connectTimeout(1, TimeUnit.MINUTES);
+        okHttpClientBuilder.readTimeout(1, TimeUnit.MINUTES);
+        okHttpClientBuilder.writeTimeout(1, TimeUnit.MINUTES);
+
+        okHttpClientBuilder.interceptors().add(interceptor);
+
+        Retrofit retrofit = new Retrofit.Builder()
+                .baseUrl(endpoint)
+                .addConverterFactory(GsonConverterFactory.create(gson))
+                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
+                .client(okHttpClientBuilder.build())
+                .build();
+
+        return retrofit;
+    }
+
+    public T getInterface() {
+        return instance;
+    }
+
+    private static class ByteArrayToBase64TypeAdapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]> {
+        public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+            return Base64.decode(json.getAsString(), Base64.NO_WRAP);
+        }
+
+        public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {
+            return new JsonPrimitive(Base64.encodeToString(src, Base64.NO_WRAP));
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolders.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolders.java
new file mode 100644
index 000000000..c2dd93066
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/holder/ServiceClientHolders.java
@@ -0,0 +1,13 @@
+package org.cloudveil.messenger.api.service.holder;
+
+import org.cloudveil.messenger.api.service.MessengerHttpInterface;
+
+public class ServiceClientHolders {
+    private static final String BASE_URL = "https://manage.cloudveil.org/api/v1/";
+
+    private static final ServiceClientHolder<MessengerHttpInterface> messengerServiceHolder = new ServiceClientHolder<>(BASE_URL + "messenger/", MessengerHttpInterface.class);
+
+    public static MessengerHttpInterface getSettingsService() {
+        return messengerServiceHolder.getInterface();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/interceptor/HttpLoggingInterceptor.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/interceptor/HttpLoggingInterceptor.java
new file mode 100644
index 000000000..911cadc29
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/api/service/interceptor/HttpLoggingInterceptor.java
@@ -0,0 +1,221 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.cloudveil.messenger.api.service.interceptor;
+
+import android.util.Log;
+
+import java.io.IOException;
+import java.nio.charset.Charset;
+import java.util.concurrent.TimeUnit;
+
+import okhttp3.Connection;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okio.Buffer;
+import okio.BufferedSource;
+
+public final class HttpLoggingInterceptor implements Interceptor {
+    private static final Charset UTF8 = Charset.forName("UTF-8");
+
+    public enum Level {
+        /** No logs. */
+        NONE,
+        /**
+         * Logs request and response lines.
+         * <p>
+         * Example:
+         * <pre>{@code
+         * --> POST /greeting HTTP/1.1 (3-byte body)
+         *
+         * <-- HTTP/1.1 200 OK (22ms, 6-byte body)
+         * }</pre>
+         */
+        BASIC,
+        /**
+         * Logs request and response lines and their respective headers.
+         * <p>
+         * Example:
+         * <pre>{@code
+         * --> POST /greeting HTTP/1.1
+         * Host: example.com
+         * Content-Type: plain/text
+         * Content-Length: 3
+         * --> END POST
+         *
+         * <-- HTTP/1.1 200 OK (22ms)
+         * Content-Type: plain/text
+         * Content-Length: 6
+         * <-- END HTTP
+         * }</pre>
+         */
+        HEADERS,
+        /**
+         * Logs request and response lines and their respective headers and bodies (if present).
+         * <p>
+         * Example:
+         * <pre>{@code
+         * --> POST /greeting HTTP/1.1
+         * Host: example.com
+         * Content-Type: plain/text
+         * Content-Length: 3
+         *
+         * Hi?
+         * --> END GET
+         *
+         * <-- HTTP/1.1 200 OK (22ms)
+         * Content-Type: plain/text
+         * Content-Length: 6
+         *
+         * Hello!
+         * <-- END HTTP
+         * }</pre>
+         */
+        BODY
+    }
+
+    public interface Logger {
+        void log(String message);
+
+        /** A {@link Logger} defaults output appropriate for the current platform. */
+        Logger DEFAULT = new Logger() {
+            @Override public void log(String message) {
+                Log.i("HttpLoggingInterceptor", message);
+            }
+        };
+    }
+
+    public HttpLoggingInterceptor() {
+        this(Logger.DEFAULT);
+    }
+
+    public HttpLoggingInterceptor(Logger logger) {
+        this.logger = logger;
+    }
+
+    private final Logger logger;
+
+    private volatile Level level = Level.NONE;
+
+    /** Change the level at which this interceptor logs. */
+    public void setLevel(Level level) {
+        this.level = level;
+    }
+
+    @Override public Response intercept(Chain chain) throws IOException {
+        Level level = this.level;
+
+        Request request = chain.request();
+        if (level == Level.NONE) {
+            return chain.proceed(request);
+        }
+
+        boolean logBody = level == Level.BODY;
+        boolean logHeaders = logBody || level == Level.HEADERS;
+
+        RequestBody requestBody = request.body();
+        boolean hasRequestBody = requestBody != null;
+
+        Connection connection = chain.connection();
+        Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;
+        String requestStartMessage =
+                "--> " + request.method() + ' ' + requestPath(request.url()) + ' ' + protocol(protocol);
+        if (!logHeaders && hasRequestBody) {
+            requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
+        }
+        logger.log(requestStartMessage);
+
+        if (logHeaders) {
+            Headers headers = request.headers();
+            for (int i = 0, count = headers.size(); i < count; i++) {
+                logger.log(headers.name(i) + ": " + headers.value(i));
+            }
+
+            String endMessage = "--> END " + request.method();
+            if (logBody && hasRequestBody) {
+                Buffer buffer = new Buffer();
+                requestBody.writeTo(buffer);
+
+                Charset charset = UTF8;
+                MediaType contentType = requestBody.contentType();
+                if (contentType != null) {
+                    contentType.charset(UTF8);
+                }
+
+                logger.log("");
+                logger.log(buffer.readString(charset));
+
+                endMessage += " (" + requestBody.contentLength() + "-byte body)";
+            }
+            logger.log(endMessage);
+        }
+
+        long startNs = System.nanoTime();
+        Response response = chain.proceed(request);
+        long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
+
+        ResponseBody responseBody = response.body();
+        logger.log("<-- " + protocol(response.protocol()) + ' ' + response.code() + ' '
+                + response.message() + " (" + tookMs + "ms"
+                + (!logHeaders ? ", " + responseBody.contentLength() + "-byte body" : "") + ')');
+
+        if (logHeaders) {
+            Headers headers = response.headers();
+            for (int i = 0, count = headers.size(); i < count; i++) {
+                logger.log(headers.name(i) + ": " + headers.value(i));
+            }
+
+            String endMessage = "<-- END HTTP";
+            if (logBody) {
+                BufferedSource source = responseBody.source();
+                source.request(Long.MAX_VALUE); // Buffer the entire body.
+                Buffer buffer = source.buffer();
+
+                Charset charset = UTF8;
+                MediaType contentType = responseBody.contentType();
+                if (contentType != null) {
+                    charset = contentType.charset(UTF8);
+                }
+
+                if (responseBody.contentLength() != 0) {
+                    logger.log("");
+                    logger.log(buffer.clone().readString(charset));
+                }
+
+                endMessage += " (" + buffer.size() + "-byte body)";
+            }
+            logger.log(endMessage);
+        }
+
+        return response;
+    }
+
+    private static String protocol(Protocol protocol) {
+        return protocol == Protocol.HTTP_1_0 ? "HTTP/1.0" : "HTTP/1.1";
+    }
+
+    private static String requestPath(HttpUrl url) {
+        String path = url.encodedPath();
+        String query = url.encodedQuery();
+        return query != null ? (path + '?' + query) : path;
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
new file mode 100644
index 000000000..05ef5d591
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -0,0 +1,135 @@
+package org.cloudveil.messenger.service;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.os.IBinder;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.cloudveil.messenger.api.model.request.SettingsRequest;
+import org.cloudveil.messenger.api.model.response.SettingsResponse;
+import org.cloudveil.messenger.api.service.holder.ServiceClientHolders;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.concurrent.ConcurrentHashMap;
+
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Consumer;
+import io.reactivex.schedulers.Schedulers;
+
+/**
+ * Created by Dmitriy on 05.02.2018.
+ */
+
+public class ChannelCheckingService extends Service {
+    private static final String ACTION_CHECK_CHANNELS = "org.cloudveil.messenger.service.check.channels";
+    private Disposable subscription;
+
+    @Nullable
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    public static void startDataChecking(@NonNull Context context) {
+        Intent intent = new Intent(ACTION_CHECK_CHANNELS);
+        intent.setClass(context, ChannelCheckingService.class);
+        context.startService(intent);
+    }
+
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        if (intent.getAction() != null && intent.getAction().equals(ACTION_CHECK_CHANNELS) && subscription == null) {
+            sendDataCheckRequest();
+        }
+        return super.onStartCommand(intent, flags, startId);
+    }
+
+    private void sendDataCheckRequest() {
+        SettingsRequest request = new SettingsRequest();
+        addChatsToRequest(request);
+        addUsersToRequest(request);
+
+        request.userPhone = UserConfig.getCurrentUser().phone;
+        request.userId = UserConfig.getCurrentUser().id;
+
+        if(request.isEmpty()) {
+            return;
+        }
+        subscription = ServiceClientHolders.getSettingsService().loadSettings(request).
+                subscribeOn(Schedulers.io()).
+                observeOn(AndroidSchedulers.mainThread()).
+                subscribe(new Consumer<SettingsResponse>() {
+
+                    @Override
+                    public void accept(SettingsResponse settingsResponse) throws Exception {
+                        freeSubscription();
+                    }
+                }, new Consumer<Throwable>() {
+                    @Override
+                    public void accept(Throwable throwable) throws Exception {
+                        freeSubscription();
+                    }
+                });
+    }
+
+    private void freeSubscription() {
+        if (subscription != null && !subscription.isDisposed()) {
+            subscription.dispose();
+        }
+        subscription = null;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        freeSubscription();
+    }
+
+    private void addChatsToRequest(@NonNull SettingsRequest request) {
+        ConcurrentHashMap<Integer, TLRPC.Chat> chats = MessagesController.getInstance().getChats();
+        Collection<TLRPC.Chat> values = chats.values();
+
+
+        for (TLRPC.Chat chat : values) {
+            int id = chat.id;
+            String title = chat.title;
+
+            SettingsRequest.Row row = new SettingsRequest.Row();
+            row.id = id;
+            row.title = title;
+
+            if (chat instanceof TLRPC.TL_channel) {
+                request.channels.add(row);
+            } else {
+                request.groups.add(row);
+            }
+        }
+    }
+
+    private void addUsersToRequest(@NonNull SettingsRequest request) {
+        ConcurrentHashMap<Integer, TLRPC.User> users = MessagesController.getInstance().getUsers();
+        Collection<TLRPC.User> values = users.values();
+
+
+        for (TLRPC.User user : values) {
+            if (user.bot) {
+                int id = user.id;
+                String title = user.username;
+
+                SettingsRequest.Row row = new SettingsRequest.Row();
+                row.id = id;
+                row.title = title;
+
+                request.bots.add(row);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index b3986ef30..2a120f412 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -13,10 +13,10 @@
     public static boolean DEBUG_PRIVATE_VERSION = false;
     public static int BUILD_VERSION = 1155;
     public static String BUILD_VERSION_STRING = "4.6";
-    public static int APP_ID = 0; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String HOCKEY_APP_HASH_DEBUG = "your-hockeyapp-api-key-here";
+    public static int APP_ID = 17544; //obtain your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "e0023208d2cfd01c7211e97e9f0a8801"; //obtain your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "ef9e1199d834442a85d416613999bb58";
+    public static String HOCKEY_APP_HASH_DEBUG = "ef9e1199d834442a85d416613999bb58";
     public static String BING_SEARCH_KEY = ""; //obtain your own KEY at https://www.bing.com/dev/en-us/dev-center
     public static String FOURSQUARE_API_KEY = ""; //obtain your own KEY at https://developer.foursquare.com/
     public static String FOURSQUARE_API_ID = ""; //obtain your own API_ID at https://developer.foursquare.com/
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java b/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java
index c77b891a5..4ccd9092b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Constants.java
@@ -8,6 +8,7 @@
         public static final boolean LOCK_DISABLE_DELETE_CHAT = false;
         public static final boolean LOCK_DISABLE_FORWARD_CHAT = false;
         public static final boolean LOCK_DISABLE_BOTS = true;
+        public static final boolean LOCK_DISABLE_YOUTUBE_VIDEO = true;
         public static final boolean LOCK_DISABLE_SECRET_CHAT = false;
         public static final boolean LOCK_DISABLE_IN_APP_BROWSER = true;
         public static final boolean LOCK_DISABLE_AUTOPLAY_GIFS = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index d5cb4bb16..0c5f6dfcf 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -729,6 +729,12 @@ public TLObject getUserOrChat(String username) {
         return users;
     }
 
+    //CloudVeil start
+    public ConcurrentHashMap<Integer, TLRPC.Chat> getChats() {
+        return chats;
+    }
+    //CloudVeil end
+
     public TLRPC.Chat getChat(Integer id) {
         return chats.get(id);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index 187639122..cae10c3e2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -43,6 +43,7 @@
 import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.Constants;
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.ImageLoader;
@@ -73,6 +74,7 @@
 import org.telegram.ui.Components.URLSpanBotCommand;
 import org.telegram.ui.Components.URLSpanMono;
 import org.telegram.ui.Components.URLSpanNoUnderline;
+import org.telegram.ui.Components.WebPlayerView;
 import org.telegram.ui.PhotoViewer;
 import org.telegram.ui.SecretMediaViewer;
 
@@ -807,7 +809,9 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
                             }
                         } else {
                             TLRPC.WebPage webPage = currentMessageObject.messageOwner.media.webpage;
-                            if (webPage != null && !TextUtils.isEmpty(webPage.embed_url)) {
+                            //CloudVeil Start
+                            boolean isYoutube = !Constants.LOCK_DISABLE_YOUTUBE_VIDEO || (webPage != null && WebPlayerView.isYoutubeUrl(webPage.embed_url));
+                            if (webPage != null && !TextUtils.isEmpty(webPage.embed_url) && !isYoutube) {
                                 delegate.needOpenWebView(webPage.embed_url, webPage.site_name, webPage.title, webPage.url, webPage.embed_width, webPage.embed_height);
                             } else if (buttonState == -1 || buttonState == 3) {
                                 delegate.didPressedImage(this);
@@ -815,6 +819,7 @@ private boolean checkLinkPreviewMotionEvent(MotionEvent event) {
                             } else if (webPage != null) {
                                 Browser.openUrl(getContext(), webPage.url);
                             }
+                            //CloudVeil End
                         }
                         resetPressedLink(2);
                         return true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
index c611e52aa..4684534da 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/WebPlayerView.java
@@ -59,6 +59,7 @@
 import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Components.Paint.Texture;
 
 import java.io.FileNotFoundException;
 import java.io.InputStream;
@@ -193,6 +194,14 @@ public void run() {
         public abstract Object run(Object[] args);
     }
 
+    public static boolean isYoutubeUrl(String url) {
+        if(TextUtils.isEmpty(url)) {
+            return false;
+        }
+        Matcher matcher = youtubeIdRegex.matcher(url);
+        return matcher.find();
+    }
+
     private class JSExtractor {
 
         ArrayList<String> codeLines = new ArrayList<>();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 2564ff752..2fb53a9a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -38,7 +38,9 @@
 import android.widget.EditText;
 import android.widget.ImageView;
 
+import org.cloudveil.messenger.service.ChannelCheckingService;
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.Constants;
@@ -1314,6 +1316,9 @@ public void onRequestPermissionsResultFragment(int requestCode, String[] permiss
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.dialogsNeedReload) {
+            //CloudVeil start
+            ChannelCheckingService.startDataChecking(ApplicationLoader.applicationContext);
+            //CloudVeil end
             if (dialogsAdapter != null) {
                 if (dialogsAdapter.isDataSetChanged()) {
                     dialogsAdapter.notifyDataSetChanged();
diff --git a/build.gradle b/build.gradle
index 937e0b794..c36fc6657 100644
--- a/build.gradle
+++ b/build.gradle
@@ -8,4 +8,4 @@ buildscript {
         classpath 'com.android.tools.build:gradle:2.3.0'
         classpath 'com.google.gms:google-services:3.0.0'
     }
-}
\ No newline at end of file
+}
