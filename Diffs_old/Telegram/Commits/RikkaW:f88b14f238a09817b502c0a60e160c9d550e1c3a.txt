diff --git a/TMessagesProj/src/main/assets/fonts/NotoColorEmoji.ttf b/TMessagesProj/src/main/assets/fonts/NotoColorEmoji.ttf
new file mode 100644
index 000000000..efe221d52
Binary files /dev/null and b/TMessagesProj/src/main/assets/fonts/NotoColorEmoji.ttf differ
diff --git a/TMessagesProj/src/main/assets/fonts/ritalic.ttf b/TMessagesProj/src/main/assets/fonts/ritalic.ttf
index ff6046d5b..2041cbc00 100755
Binary files a/TMessagesProj/src/main/assets/fonts/ritalic.ttf and b/TMessagesProj/src/main/assets/fonts/ritalic.ttf differ
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
index 69a4d9d3e..f961fa2a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/AndroidUtilities.java
@@ -371,12 +371,14 @@ public static Typeface getTypeface(String assetPath) {
         synchronized (typefaceCache) {
             if (!typefaceCache.containsKey(assetPath)) {
                 try {
-                    Typeface t;
-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                        if (assetPath.equals("fonts/rmedium.ttf")) {
-                            t = Typeface.create("sans-serif-medium", Typeface.NORMAL);
-                        } else {
-                            t = Typeface.create("sans-serif", Typeface.ITALIC);
+                    Typeface t = null;
+                    if (assetPath.equals("fonts/rmedium.ttf") || assetPath.equals("fonts/ritalic.ttf")) {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                            if (assetPath.equals("fonts/rmedium.ttf")) {
+                                t = Typeface.create("sans-serif-medium", Typeface.NORMAL);
+                            } else {
+                                t = Typeface.create("sans-serif", Typeface.ITALIC);
+                            }
                         }
                     } else {
                         t = Typeface.createFromAsset(ApplicationLoader.applicationContext.getAssets(), assetPath);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
index f3c3e5e1e..a11577224 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Emoji.java
@@ -8,11 +8,6 @@
 
 package org.telegram.messenger;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Locale;
-
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
@@ -25,12 +20,20 @@
 import android.text.Spannable;
 import android.text.Spanned;
 import android.text.TextPaint;
+import android.text.style.CharacterStyle;
 import android.text.style.DynamicDrawableSpan;
 import android.text.style.ImageSpan;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import org.telegram.ui.Components.TypefaceSpan;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Locale;
+
 public class Emoji {
     private static HashMap<CharSequence, DrawableInfo> rects = new HashMap<>();
     private static int drawImgSize;
@@ -351,7 +354,7 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
         StringBuilder emojiCode = new StringBuilder(16);
         boolean nextIsSkinTone;
         EmojiDrawable drawable;
-        EmojiSpan span;
+        CharacterStyle span;
         int length = cs.length();
         boolean doneEmoji = false;
         //s.setSpansCount(emojiCount);
@@ -425,7 +428,7 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                         }
                     }
                 }
-                if (false/*doneEmoji*/) {
+                if (doneEmoji) {
                     if (emojiOnly != null) {
                         emojiOnly[0]++;
                     }
@@ -445,7 +448,11 @@ public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fo
                     }
                     drawable = Emoji.getEmojiDrawable(emojiCode.subSequence(0, emojiCode.length()));
                     if (drawable != null) {
-                        span = new EmojiSpan(drawable, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        if (MessagesController.getInstance().useGoogleEmoji) {
+                            span = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/NotoColorEmoji.ttf"));
+                        } else {
+                            span = new EmojiSpan(drawable, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        }
                         s.setSpan(span, startIndex, startIndex + startLength, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                         emojiCount++;
                     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index fafdeedd0..58372c6b3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -138,6 +138,7 @@
     public boolean enableJoined = true;
     public boolean allowBigEmoji = false;
     public boolean useSystemEmoji = false;
+    public boolean useGoogleEmoji = true;
     public int fontSize = AndroidUtilities.dp(16);
     public int maxGroupCount = 200;
     public int maxBroadcastCount = 100;
@@ -260,6 +261,7 @@ public MessagesController() {
         fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
         allowBigEmoji = preferences.getBoolean("allowBigEmoji", false);
         useSystemEmoji = preferences.getBoolean("useSystemEmoji", false);
+        useGoogleEmoji = preferences.getBoolean("useGoogleEmoji", true);
         String disabledFeaturesString = preferences.getString("disabledFeatures", null);
         if (disabledFeaturesString != null && disabledFeaturesString.length() != 0) {
             try {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
index d5ce70041..2caecd4ae 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/NotificationsController.java
@@ -16,6 +16,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.graphics.Bitmap;
@@ -694,14 +695,26 @@ public void run() {
                     return;
                 }
                 lastBadgeCount = count;
+
+                boolean exist = true;
+                PackageManager packageManager = ApplicationLoader.applicationContext.getPackageManager();
                 try {
-                    ContentValues cv = new ContentValues();
-                    cv.put("tag", "org.telegram.messenger/org.telegram.ui.LaunchActivity");
-                    cv.put("count", count);
-                    ApplicationLoader.applicationContext.getContentResolver().insert(Uri.parse("content://com.teslacoilsw.notifier/unread_count"), cv);
-                } catch (Throwable e) {
-                    //ignore
+                    PackageInfo info = packageManager.getPackageInfo("com.teslacoilsw.notifier", PackageManager.GET_META_DATA);
+                } catch (PackageManager.NameNotFoundException e) {
+                    exist = false;
                 }
+
+                if (exist) {
+                    try {
+                        ContentValues cv = new ContentValues();
+                        cv.put("tag", "org.telegram.messenger/org.telegram.ui.LaunchActivity");
+                        cv.put("count", count);
+                        ApplicationLoader.applicationContext.getContentResolver().insert(Uri.parse("content://com.teslacoilsw.notifier/unread_count"), cv);
+                    } catch (Throwable e) {
+                        //ignore
+                    }
+                }
+
                 try {
                     if (launcherClassName == null) {
                         launcherClassName = getLauncherClassName(ApplicationLoader.applicationContext);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index adecc9ac5..2bad05a03 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -16,6 +16,7 @@
 import android.content.SharedPreferences;
 import android.database.DataSetObserver;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Outline;
 import android.graphics.Paint;
 import android.graphics.RectF;
@@ -23,6 +24,7 @@
 import android.os.Build;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -45,6 +47,7 @@
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.EmojiData;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.Utilities;
 import org.telegram.messenger.query.StickersQuery;
@@ -112,7 +115,7 @@ private static String addColorToCode(String code, String color) {
         return code;
     }
 
-    private class ImageViewEmoji extends ImageView {
+    private class ImageViewEmoji extends ForegroundTextView {
 
         private boolean touched;
         private float lastX;
@@ -182,7 +185,10 @@ public boolean onLongClick(View view) {
                 }
             });
             setBackgroundResource(R.drawable.list_selector);
-            setScaleType(ImageView.ScaleType.CENTER);
+            setGravity(Gravity.CENTER);
+            setTypeface(AndroidUtilities.getTypeface("fonts/NotoColorEmoji.ttf"));
+            setTextColor(0xff000000);
+            setForegroundGravity(Gravity.CENTER);
         }
 
         private void sendEmoji(String override) {
@@ -227,6 +233,9 @@ private void sendEmoji(String override) {
         @Override
         public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             setMeasuredDimension(View.MeasureSpec.getSize(widthMeasureSpec), View.MeasureSpec.getSize(widthMeasureSpec));
+            if (getPaint().getTextSize() != 0.6f * getMeasuredWidth()) {
+                getPaint().setTextSize(0.6f * getMeasuredWidth());
+            }
         }
 
         @Override
@@ -262,7 +271,13 @@ public boolean onTouchEvent(MotionEvent event) {
                             } else {
                                 emojiColor.remove(code);
                             }
-                            setImageDrawable(Emoji.getEmojiBigDrawable(code));
+                            if (MessagesController.getInstance().useGoogleEmoji) {
+                                setText(code);
+                                setForeground(null);
+                            } else {
+                                setText(null);
+                                setForeground(Emoji.getEmojiBigDrawable(code));
+                            }
                             sendEmoji(null);
                             saveEmojiColors();
                         } else {
@@ -421,6 +436,7 @@ public void dismiss() {
         private int selection;
         private Paint rectPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
         private RectF rect = new RectF();
+        private Paint textPaint = new Paint();
 
         public void setEmoji(String emoji, int arrowPosition) {
             currentEmoji = emoji;
@@ -450,6 +466,9 @@ public EmojiColorPickerView(Context context) {
 
             backgroundDrawable = getResources().getDrawable(R.drawable.stickers_back_all);
             arrowDrawable = getResources().getDrawable(R.drawable.stickers_back_arrow);
+
+            textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/NotoColorEmoji.ttf"));
+            textPaint.setColor(0xff000000);
         }
 
         @Override
@@ -493,10 +512,16 @@ protected void onDraw(Canvas canvas) {
                         }
                         code = addColorToCode(code, color);
                     }
-                    Drawable drawable = Emoji.getEmojiBigDrawable(code);
-                    if (drawable != null) {
-                        drawable.setBounds(x, y, x + emojiSize, y + emojiSize);
-                        drawable.draw(canvas);
+
+                    if (MessagesController.getInstance().useGoogleEmoji) {
+                        textPaint.setTextSize(emojiSize * 0.8f);
+                        canvas.drawText(code, x, y + emojiSize * 0.8f, textPaint);
+                    } else {
+                        Drawable drawable = Emoji.getEmojiBigDrawable(code);
+                        if (drawable != null) {
+                            drawable.setBounds(x, y, x + emojiSize, y + emojiSize);
+                            drawable.draw(canvas);
+                        }
                     }
                 }
             }
@@ -2070,7 +2095,14 @@ public View getView(int position, View view, ViewGroup paramViewGroup) {
                     coloredCode = addColorToCode(coloredCode, color);
                 }
             }
-            imageView.setImageDrawable(Emoji.getEmojiBigDrawable(coloredCode));
+            if (MessagesController.getInstance().useGoogleEmoji) {
+                imageView.setText(code);
+                imageView.setForeground(null);
+            } else {
+                imageView.setText(null);
+                imageView.setForeground(Emoji.getEmojiBigDrawable(code));
+            }
+
             imageView.setTag(code);
             return imageView;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundTextView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundTextView.java
new file mode 100644
index 000000000..545f7774b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundTextView.java
@@ -0,0 +1,198 @@
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.graphics.*;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.widget.TextView;
+
+/**
+ * Created by Rikka on 2016/10/17.
+ */
+
+public class ForegroundTextView extends TextView {
+
+    private Drawable mForeground;
+
+    private final android.graphics.Rect mSelfBounds = new android.graphics.Rect();
+
+    private final android.graphics.Rect mOverlayBounds = new android.graphics.Rect();
+
+    private int mForegroundGravity = Gravity.FILL;
+
+    protected boolean mForegroundInPadding = true;
+
+    boolean mForegroundBoundsChanged = false;
+
+    public ForegroundTextView(Context context) {
+        this(context, null);
+    }
+
+    public ForegroundTextView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public ForegroundTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    /**
+     * Describes how the foreground is positioned.
+     *
+     * @return foreground gravity.
+     * @see #setForegroundGravity(int)
+     */
+    public int getForegroundGravity() {
+        return mForegroundGravity;
+    }
+
+    /**
+     * Describes how the foreground is positioned. Defaults to START and TOP.
+     *
+     * @param foregroundGravity See {@link android.view.Gravity}
+     * @see #getForegroundGravity()
+     */
+    public void setForegroundGravity(int foregroundGravity) {
+        if (mForegroundGravity != foregroundGravity) {
+            if ((foregroundGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
+                foregroundGravity |= Gravity.START;
+            }
+
+            if ((foregroundGravity & Gravity.VERTICAL_GRAVITY_MASK) == 0) {
+                foregroundGravity |= Gravity.TOP;
+            }
+
+            mForegroundGravity = foregroundGravity;
+
+            if (mForegroundGravity == Gravity.FILL && mForeground != null) {
+                android.graphics.Rect padding = new android.graphics.Rect();
+                mForeground.getPadding(padding);
+            }
+
+            requestLayout();
+        }
+    }
+
+    @Override
+    protected boolean verifyDrawable(Drawable who) {
+        return super.verifyDrawable(who) || (who == mForeground);
+    }
+
+    @Override
+    public void jumpDrawablesToCurrentState() {
+        super.jumpDrawablesToCurrentState();
+        if (mForeground != null) {
+            mForeground.jumpToCurrentState();
+        }
+    }
+
+    @Override
+    protected void drawableStateChanged() {
+        super.drawableStateChanged();
+        if (mForeground != null && mForeground.isStateful()) {
+            mForeground.setState(getDrawableState());
+        }
+    }
+
+    /**
+     * Supply a Drawable that is to be rendered on top of all of the child
+     * views in the frame layout.  Any padding in the Drawable will be taken
+     * into account by ensuring that the children are inset to be placed
+     * inside of the padding area.
+     *
+     * @param drawable The Drawable to be drawn on top of the children.
+     */
+    public void setForeground(Drawable drawable) {
+        if (mForeground != drawable) {
+            if (mForeground != null) {
+                mForeground.setCallback(null);
+                unscheduleDrawable(mForeground);
+            }
+
+            mForeground = drawable;
+
+            if (drawable != null) {
+                setWillNotDraw(false);
+                drawable.setCallback(this);
+                if (drawable.isStateful()) {
+                    drawable.setState(getDrawableState());
+                }
+                if (mForegroundGravity == Gravity.FILL) {
+                    android.graphics.Rect padding = new android.graphics.Rect();
+                    drawable.getPadding(padding);
+                }
+            } else {
+                setWillNotDraw(true);
+            }
+            requestLayout();
+            invalidate();
+        }
+    }
+
+    /**
+     * Returns the drawable used as the foreground of this FrameLayout. The
+     * foreground drawable, if non-null, is always drawn on top of the children.
+     *
+     * @return A Drawable or null if no foreground was set.
+     */
+    public Drawable getForeground() {
+        return mForeground;
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        mForegroundBoundsChanged |= changed;
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+        mForegroundBoundsChanged = true;
+    }
+
+    @Override
+    public void draw(@NonNull Canvas canvas) {
+        super.draw(canvas);
+
+        if (mForeground != null) {
+            final Drawable foreground = mForeground;
+
+            if (mForegroundBoundsChanged) {
+                mForegroundBoundsChanged = false;
+                final android.graphics.Rect selfBounds = mSelfBounds;
+                final Rect overlayBounds = mOverlayBounds;
+
+                final int w = getRight() - getLeft();
+                final int h = getBottom() - getTop();
+
+                if (mForegroundInPadding) {
+                    selfBounds.set(0, 0, w, h);
+                } else {
+                    selfBounds.set(getPaddingLeft(), getPaddingTop(),
+                            w - getPaddingRight(), h - getPaddingBottom());
+                }
+
+                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),
+                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);
+                foreground.setBounds(overlayBounds);
+            }
+
+            foreground.draw(canvas);
+        }
+    }
+
+    @Override
+    public void drawableHotspotChanged(float x, float y) {
+        super.drawableHotspotChanged(x, y);
+        if (mForeground != null) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                mForeground.setHotspot(x, y);
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index c0447792a..d26b7aa27 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -143,6 +143,10 @@
     private int stickersRow;
     private int emojiRow;
     private int cacheRow;
+
+    // Rikkagram
+    private int googleEmojiRow;
+
     private int raiseToSpeakRow;
     private int sendByEnterRow;
     private int supportSectionRow;
@@ -261,6 +265,10 @@ public void run() {
         stickersRow = rowCount++;
         //emojiRow = rowCount++;
         textSizeRow = rowCount++;
+
+        // Rikkagram
+        googleEmojiRow = rowCount++;
+
         cacheRow = rowCount++;
         raiseToSpeakRow = rowCount++;
         sendByEnterRow = rowCount++;
@@ -701,6 +709,16 @@ public void onClick(View v) {
                     linearLayout.addView(cell, LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT, 48));
                     builder.setCustomView(linearLayout);
                     showDialog(builder.create());
+                } else if (position == googleEmojiRow) { // Rikkagram
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    boolean googleEmoji = preferences.getBoolean("useGoogleEmoji", true);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putBoolean("useGoogleEmoji", !googleEmoji);
+                    editor.commit();
+                    MessagesController.getInstance().useGoogleEmoji = !googleEmoji;
+                    if (view instanceof TextCheckCell) {
+                        ((TextCheckCell) view).setChecked(!googleEmoji);
+                    }
                 }
             }
         });
@@ -1336,6 +1354,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setTextAndValueAndCheck(LocaleController.getString("ChromeCustomTabs", R.string.ChromeCustomTabs), LocaleController.getString("ChromeCustomTabsInfo", R.string.ChromeCustomTabsInfo), MediaController.getInstance().canCustomTabs(), false, true);
                     } else if (position == directShareRow) {
                         textCell.setTextAndValueAndCheck(LocaleController.getString("DirectShare", R.string.DirectShare), LocaleController.getString("DirectShareInfo", R.string.DirectShareInfo), MediaController.getInstance().canDirectShare(), false, true);
+                    } else if (position == googleEmojiRow) { // Rikkagram
+                        textCell.setTextAndValueAndCheck(LocaleController.getString("UseGoogleEmoji", R.string.UseGoogleEmoji), LocaleController.getString("UseGoogleEmojiInfo", R.string.UseGoogleEmojiInfo), preferences.getBoolean("useGoogleEmoji", true), false, true);
                     }
                     break;
                 }
@@ -1439,7 +1459,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         position == mobileDownloadRow || position == clearLogsRow || position == roamingDownloadRow || position == languageRow || position == usernameRow ||
                         position == switchBackendButtonRow || position == telegramFaqRow || position == contactsSortRow || position == contactsReimportRow || position == saveToGalleryRow ||
                         position == stickersRow || position == cacheRow || position == raiseToSpeakRow || position == privacyPolicyRow || position == customTabsRow || position == directShareRow || position == versionRow ||
-                        position == emojiRow) {
+                        position == emojiRow || position == googleEmojiRow) { // Rikkagram
                     if (holder.itemView.getBackground() == null) {
                         holder.itemView.setBackgroundResource(R.drawable.list_selector);
                     }
@@ -1550,7 +1570,7 @@ public int getItemViewType(int position) {
             }
             if (position == settingsSectionRow || position == supportSectionRow || position == messagesSectionRow || position == mediaDownloadSection || position == contactsSectionRow) {
                 return 1;
-            } else if (position == enableAnimationsRow || position == sendByEnterRow || position == saveToGalleryRow || position == autoplayGifsRow || position == raiseToSpeakRow || position == customTabsRow || position == directShareRow) {
+            } else if (position == enableAnimationsRow || position == sendByEnterRow || position == saveToGalleryRow || position == autoplayGifsRow || position == raiseToSpeakRow || position == customTabsRow || position == directShareRow || position == googleEmojiRow) { // Rikkagram
                 return 3;
             } else if (position == notificationRow || position == backgroundRow || position == askQuestionRow || position == sendLogsRow || position == privacyRow || position == clearLogsRow || position == switchBackendButtonRow || position == telegramFaqRow || position == contactsReimportRow || position == textSizeRow || position == languageRow || position == contactsSortRow || position == stickersRow || position == cacheRow || position == privacyPolicyRow || position == emojiRow) {
                 return 2;
