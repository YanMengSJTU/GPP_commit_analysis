diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
index f1e4722d6..bb3e071ab 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/DecisionAdapter.java
@@ -11,6 +11,7 @@
 
 import org.pollgram.decision.data.Decision;
 import org.pollgram.R;
+import org.pollgram.decision.service.PollgramFactory;
 
 import java.util.List;
 
@@ -40,7 +41,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
         // put data
         Decision decision = getItem(position);
         decisionTitle.setText(decision.getTitle());
-        String subTitle = getContext().getString(R.string.howManyMemberVote, decision.getUsersThatVoteCount(),groupMemberCount);
+        int userThatVoteSoFar = PollgramFactory.getPollgramDAO().getUserVoteCount(decision);
+        String subTitle = getContext().getString(R.string.howManyMemberVote, userThatVoteSoFar,groupMemberCount);
         decisionSubtitle.setText(subTitle);
         if (!decision.isOpen())
             rowView.setBackgroundColor(Color.LTGRAY);
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
index 813151e60..2f2a73c67 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/adapter/VoteListAdapter.java
@@ -15,14 +15,12 @@
 import org.pollgram.decision.data.TextOption;
 import org.pollgram.decision.data.TimeRangeOption;
 import org.pollgram.decision.data.Vote;
-import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.service.PollgramFactory;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 /**
  * Created by davide on 04/10/15.
@@ -34,7 +32,7 @@
     private static final int LAYOUT_RES_ID = R.layout.item_vote_list;
     private List<Vote> votes;
     private List<Boolean> originalVotes;
-    private Set<Vote> newVoteSet;
+    private List<Vote> newVotes;
     private OnVoteChangeListener onVoteChageListener;
 
     public interface OnVoteChangeListener {
@@ -53,7 +51,7 @@ public void voteChanges(boolean areThereChangesToSave) {
 
     public void setVotes(List<Vote> votes) {
         this.votes = votes;
-        this.newVoteSet = new HashSet<>();
+        this.newVotes = new ArrayList<>();
         this.originalVotes = new ArrayList<>();
         for (Vote v : votes){
             originalVotes.add(v.isVote() == null ? null :new Boolean(v.isVote().booleanValue()));
@@ -86,7 +84,7 @@ public void setOnVoteChageListener(OnVoteChangeListener onVoteChageListener){
     @Override
     public View getView(final int position, View convertView, ViewGroup parent) {
         final Vote vote = getItem(position);
-        final Option c = PollgramServiceFactory.getPollgramDAO().getOption(vote.getOptionId());
+        final Option c = PollgramFactory.getPollgramDAO().getOption(vote.getOptionId());
         if (c instanceof TimeRangeOption){
             Log.e("ChoiceAdapter", "TimeRangeOption not supported yet");
             return null;
@@ -105,12 +103,12 @@ public void onClick(View v) {
                 vote.setVote(optionCheckBox.isChecked());
                 vote.setVoteTime(new Date());
                 if (vote.isVote() != null && vote.isVote().equals(originalVotes.get(position))){
-                    newVoteSet.remove(vote);;
+                    newVotes.remove(vote);;
                 } else {
-                    newVoteSet.add(vote);
+                    newVotes.add(vote);
                 }
                 Log.d(LOG_TAG, "item [" + position + "] selected[" + optionCheckBox.isChecked() + "] ");
-                onVoteChageListener.voteChanges(!newVoteSet.isEmpty());
+                onVoteChageListener.voteChanges(!newVotes.isEmpty());
             }
         });
 
@@ -123,8 +121,8 @@ public void onClick(View v) {
         return rowView;
     }
 
-    public Collection<Vote> getNewVoteSet() {
-        return newVoteSet;
+    public Collection<Vote> getNewVotes() {
+        return newVotes;
     }
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
index e8dd08b9e..6dc7b6aff 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Decision.java
@@ -10,24 +10,22 @@
     private final int fullChatId;
     private final long userCreatorId;
     private boolean open;
-    private int userThatVoteCount;
 
     // icon/image will be retrived externally by url or file.
     // Like the file containing the decision image can be named like decisio_<id>.png, and cached on the fs
 
     public Decision(int fullChatId, long userCreatorId, String title, String longDescription,
-                    boolean open, int userThatVoteCount) {
+                    boolean open) {
         this.fullChatId = fullChatId;
         this.userCreatorId = userCreatorId;
         this.title = title;
         this.longDescription = longDescription;
         this.open = open;
-        this.userThatVoteCount = userThatVoteCount;
     }
 
     public Decision(long id, int fullChatId, long userCreatorId, String title, String longDescription,
-                    boolean open, int userThatVoteCount) {
-        this(fullChatId,userCreatorId,title, longDescription, open, userThatVoteCount);
+                    boolean open) {
+        this(fullChatId,userCreatorId,title, longDescription, open);
         setId(id);
 
     }
@@ -35,7 +33,7 @@ public Decision(long id, int fullChatId, long userCreatorId, String title, Strin
     /*
      * @return the id of an TLRPC.ChatFull
      */
-    public int getFullChatId() {
+    public int getChatId() {
         return fullChatId;
     }
 
@@ -63,20 +61,35 @@ public String getLongDescription() {
         return longDescription;
     }
 
-    public int getUserThatVoteCount() {
-        return userThatVoteCount;
-    }
-
     public void setOpen(boolean open) {
         this.open = open;
     }
 
-    public int getUsersThatVoteCount() {
-        return userThatVoteCount;
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Decision)) return false;
+
+        Decision decision = (Decision) o;
+
+        if (fullChatId != decision.fullChatId) return false;
+        if (getUserCreatorId() != decision.getUserCreatorId()) return false;
+        if (isOpen() != decision.isOpen()) return false;
+        if (getTitle() != null ? !getTitle().equals(decision.getTitle()) : decision.getTitle() != null)
+            return false;
+        return !(getLongDescription() != null ? !getLongDescription().equals(decision.getLongDescription()) : decision.getLongDescription() != null);
+
     }
 
-    public void setUserThatVoteCount(int userThatVoteCount) {
-        this.userThatVoteCount = userThatVoteCount;
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + (getTitle() != null ? getTitle().hashCode() : 0);
+        result = 31 * result + (getLongDescription() != null ? getLongDescription().hashCode() : 0);
+        result = 31 * result + fullChatId;
+        result = 31 * result + (int) (getUserCreatorId() ^ (getUserCreatorId() >>> 32));
+        result = 31 * result + (isOpen() ? 1 : 0);
+        return result;
     }
 
     @Override
@@ -87,7 +100,8 @@ public String toString() {
                 ", longDescription='" + longDescription + '\'' +
                 ", title='" + title + '\'' +
                 ", open=" + open +
-                ", userThatVoteCount=" + userThatVoteCount +
                 '}';
     }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
index c8bc9222e..5c8e48eda 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Option.java
@@ -5,6 +5,22 @@
  */
 public abstract class Option extends DBBean {
 
+    private long decisionId;
+
+    protected Option(long decisionidPar) {
+        decisionId = decisionidPar;
+    }
+
+    public long getDecisionId() {
+        return decisionId;
+    }
+
+    public void setDecisionId(long decisionId) {
+        this.decisionId = decisionId;
+    }
+
     public abstract String getTitle();
 
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
index 64ee432a7..6470a06ac 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TextOption.java
@@ -5,16 +5,14 @@
  */
 public class TextOption extends Option {
 
-    private final long decisionId;
-
     // icon/image will be retrived externally by url or file
 
     private String title;
     private String longDescription;
 
     public TextOption(String title, String longDescription, long decisionId) {
+        super(decisionId);
         this.title = title;
-        this.decisionId = decisionId;
         this.longDescription = longDescription;
     }
 
@@ -22,11 +20,6 @@ public TextOption(long id, String title, String longDescription, long decisionId
         this(title,longDescription,decisionId);
         setId(id);
     }
-
-    public long getDecisionId() {
-        return decisionId;
-    }
-
     @Override
     public String getTitle() {
         return title;
@@ -40,10 +33,33 @@ public String getLongDescription() {
         return longDescription;
     }
 
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof TextOption)) return false;
+
+        TextOption that = (TextOption) o;
+
+        if (getTitle() != null ? !getTitle().equals(that.getTitle()) : that.getTitle() != null)
+            return false;
+        return !(getLongDescription() != null ? !getLongDescription().equals(that.getLongDescription()) : that.getLongDescription() != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + (getTitle() != null ? getTitle().hashCode() : 0);
+        result = 31 * result + (getLongDescription() != null ? getLongDescription().hashCode() : 0);
+        return result;
+    }
+
     public void setLongDescription(String longDescription) {
         this.longDescription = longDescription;
     }
 
+
+
     @Override
     public String toString() {
         return title;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
index 7fc2474ef..8dd1bd386 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/TimeRangeOption.java
@@ -22,15 +22,17 @@
         DAY, HOUR;
     }
 
-    public TimeRangeOption(Date from, Date to, Accuracy accuracy) {
+    public TimeRangeOption(Date from, Date to, Accuracy accuracy, long decisionId) {
+        super(decisionId);
         this.from = from;
         this.to = to;
         this.accuracy = accuracy;
+
     }
 
 
-    public TimeRangeOption(long id, Date from, Date to, Accuracy accuracy) {
-        this(from, to,accuracy);
+    public TimeRangeOption(long id, Date from, Date to, Accuracy accuracy, long decisionId) {
+        this(from, to,accuracy, decisionId);
         setId(id);
 
     }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
index 6803770e0..73ca6a9d6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
@@ -66,4 +66,26 @@ public void setVoteTime(Date voteTime) {
     public String toString() {
         return "vote : " + vote;
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Vote)) return false;
+        if (!super.equals(o)) return false;
+
+        Vote vote1 = (Vote) o;
+
+        if (getOptionId() != vote1.getOptionId()) return false;
+        if (getUserId() != vote1.getUserId()) return false;
+        return !(vote != null ? !vote.equals(vote1.vote) : vote1.vote != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (vote != null ? vote.hashCode() : 0);
+        result = 31 * result + (int) (getOptionId() ^ (getOptionId() >>> 32));
+        result = 31 * result + getUserId();
+        return result;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
index 509ce34bf..e793077cd 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PGSqlLiteHelper.java
@@ -13,6 +13,7 @@
 import org.telegram.messenger.ApplicationLoader;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
 
@@ -32,7 +33,11 @@
         static final String FULL_CHAT_ID = "full_chat_id";
         static final String USER_CREATOR_ID = "user_creator_id";
         static final String OPEN = "open";
-        static final String USER_VOTE_COUNT = "user_vote_count";
+
+        public static String cloumns(String tableAlias) {
+            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, FULL_CHAT_ID, USER_CREATOR_ID, OPEN);
+        }
+
     }
 
     static class T_TextOption {
@@ -41,6 +46,10 @@
         static final String TITLE = "title";
         static final String LONG_DESCRIPTION = "long_description";
         static final String FK_DECISION = "fk_decision";
+
+        public static String cloumns(String tableAlias) {
+            return createColumns(tableAlias, ID, TITLE, LONG_DESCRIPTION, FK_DECISION);
+        }
     }
 
     static class T_Vote {
@@ -52,22 +61,21 @@
         static final String FK_OPTION = "fk_option";
 
         static String cloumns(String tableAlias){
-            return createColumns(tableAlias, new String[]{ID,VOTE,VOTE_TIME,USER_ID,FK_OPTION});
+            return createColumns(tableAlias, ID,VOTE,VOTE_TIME,USER_ID,FK_OPTION);
         }
     }
 
-    private static String createColumns(String tableName, String[] columnsNames){
+    private static String createColumns(String tableName, String... columnsNames){
         StringBuilder sb = new StringBuilder();
-        for (int i=0; i < columnsNames.length - 1 ; i++) {
-            sb.append(tableName);
-            sb.append('.');
+        for (int i = 0; i < columnsNames.length; i++) {
+            if (tableName != null) {
+                sb.append(tableName);
+                sb.append('.');
+            }
             sb.append(columnsNames[i]);
-            sb.append(',');
+            if (i != columnsNames.length - 1)
+                sb.append(',');
         }
-        sb.append(tableName);
-        sb.append('.');
-        sb.append(columnsNames[columnsNames.length - 1]);
-        sb.append(' ');
         return sb.toString();
     }
 
@@ -130,19 +138,17 @@ public Decision from(Cursor c) {
             int fullChatId = getInt(c, T_Decision.FULL_CHAT_ID);
             long userCreatorId = getLong(c, T_Decision.USER_CREATOR_ID);
             boolean isOpen = getBoolean(c, T_Decision.OPEN);
-            int userVoteCount = getInt(c, T_Decision.USER_VOTE_COUNT);
-            return new Decision(id, fullChatId, userCreatorId, title, description, isOpen, userVoteCount);
+            return new Decision(id, fullChatId, userCreatorId, title, description, isOpen);
         }
 
         @Override
         public ContentValues toCV(Decision d) {
             ContentValues cv = new ContentValues();
             cv.put(T_Decision.TITLE, d.getTitle());
-            cv.put(T_Decision.LONG_DESCRIPTION, d.getTitle());
-            cv.put(T_Decision.FULL_CHAT_ID, d.getFullChatId());
+            cv.put(T_Decision.LONG_DESCRIPTION, d.getLongDescription());
+            cv.put(T_Decision.FULL_CHAT_ID, d.getChatId());
             cv.put(T_Decision.USER_CREATOR_ID, d.getUserCreatorId());
             cv.put(T_Decision.OPEN, d.isOpen());
-            cv.put(T_Decision.USER_VOTE_COUNT, d.getUsersThatVoteCount());
             return cv;
         }
     };
@@ -192,7 +198,7 @@ static String toString(boolean b) {
         return Integer.toString(toInt(b));
     }
 
-    private static Boolean getBoolean(Cursor c, String colName) {
+    static Boolean getBoolean(Cursor c, String colName) {
         int columnIdx = c.getColumnIndex(colName);
         if (c.isNull(columnIdx))
             return null;
@@ -269,6 +275,18 @@ public PGSqlLiteHelper() {
         }
     }
 
+    public <T extends DBBean> T findFirst(DBObjectMapper<T> mapper, String selection,
+                                            String[] selectionArgs) {
+        List<T> list = query(mapper,selection,selectionArgs);
+        if (list.isEmpty())
+            return null;
+
+        if (list.size() > 1){
+            Log.e(LOG_TAG, "Found multiple records for selection["+selection+"] " +
+                    "selectionArgs["+ Arrays.toString(selectionArgs)+"] i will return the first");
+        }
+        return list.get(0);
+    }
 
     public <T extends DBBean> T findById(long id, DBObjectMapper<T> mapper) {
         SQLiteDatabase db = getReadableDatabase();
@@ -296,13 +314,14 @@ public void onCreate(SQLiteDatabase db) {
                 T_Decision.FULL_CHAT_ID + " INTEGER," +
                 T_Decision.USER_CREATOR_ID + " INTEGER," +
                 T_Decision.OPEN + " INTEGER, " +
-                T_Decision.USER_VOTE_COUNT + " INTEGER" +
+                "UNIQUE ("+T_Decision.TITLE+","+T_Decision.FULL_CHAT_ID+")" +
                 ") ;");
         db.execSQL("CREATE TABLE " + T_TextOption.TABLE_NAME + " (" +
                 T_TextOption.ID + " INTEGER PRIMARY KEY, " +
                 T_TextOption.TITLE + " TEXT, " +
                 T_TextOption.LONG_DESCRIPTION + " TEXT, " +
                 T_TextOption.FK_DECISION + " INTEGER, " +
+                "UNIQUE("+T_TextOption.TITLE +", " + T_TextOption.FK_DECISION +"), "+
                 "FOREIGN KEY(" + T_TextOption.FK_DECISION + ") REFERENCES " + T_Decision.TABLE_NAME + "(" + T_Decision.ID + ") ) ;");
         db.execSQL("CREATE TABLE " + T_Vote.TABLE_NAME + " (" +
                 T_Vote.ID + " INTEGER PRIMARY KEY," +
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index f7814c7bd..0a8c5defa 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -13,17 +13,33 @@
  */
 public interface PollgramDAO {
 
-    Decision insert(Decision d);
-
-    void update(Decision d);
+    /**
+     * Insert or update the passed decision if not found
+     * @param d
+     * @return the inserted object
+     */
+    Decision save(Decision d);
 
+    /**
+     * return decision by id
+     * @param decisionId
+     * @return null if not found
+     */
     Decision getDecision(long decisionId);
 
-    List<Decision> getDecisions(@Nullable Boolean open);
-
-    Option insert(Option o);
+    /**
+     * @param chatId
+     * @param open if null it will return either open or close decisions
+     * @return decision for given chat id
+     */
+    List<Decision> getDecisions(int chatId, @Nullable Boolean open);
 
-    void update(Option o);
+    /**
+     * Insert or update the passed Option if not found
+     * @param o
+     * @return the inserted object
+     */
+    Option save(Option o);
 
     Option getOption(long optionId);
 
@@ -43,5 +59,63 @@
      */
     List<Vote> getVotes(long decisionId, @Nullable Integer userId);
 
+    /**
+     * Insert or update the passed Vote if not found
+     * @param vote
+     * @return the inserted object
+     */
     Vote save(Vote vote);
+
+    /**
+     * Get decision with givne decisionTitle and chatId
+     * @param decisionTitle
+     * @param chatId
+     * @return null if no decision was found
+     */
+    Decision getDecision(String decisionTitle, int chatId);
+
+    Option getOption(String optionTitle, Decision decision);
+
+    /**
+     * @param optionId
+     * @param userId
+     * @return
+     */
+    Vote getVote(long optionId, int userId);
+
+    /**
+     * @param decision
+     * @return how many users has voted, at least one option, for the target decision
+     */
+    int getUserVoteCount(Decision decision);
+
+    /**
+     * Result for method getWinningOption
+     */
+    class WinningOption{
+        final int voteCount;
+        final Option option;
+
+        public WinningOption(int voteCount, Option option) {
+            this.voteCount = voteCount;
+            this.option = option;
+        }
+    }
+
+    /**
+     * @param decision
+     * @return the option that recive more votes for the decision
+     */
+    WinningOption getWinningOption(Decision decision);
+
+    /**
+     * just for test
+     */
+    void purgeData();
+
+    /**
+     * just for test
+     * TODO Remove
+     */
+    void putStubData(int chatId, int creatorId);
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index c97c92fed..000d18d38 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -12,7 +12,6 @@
 import org.pollgram.decision.data.Vote;
 
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 
 /**
@@ -25,72 +24,127 @@
 
     public PollgramDAODBImpl() {
         helper = new PGSqlLiteHelper();
-        putStubData();
     }
 
-    private void putStubData() {
+    @Override
+    public void purgeData() {
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_Decision.TABLE_NAME);
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_TextOption.TABLE_NAME);
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_Vote.TABLE_NAME);
+    }
 
+    @Override
+    public void putStubData(int chatId, int creatorId) {
+        // TODO remove it one day
+
+        Log.i(LOG_TAG, "Put Stub test data");
 
-        /// just for test
-        int chatId = 39379118;
-        int creatorId = 23483618;
         List<Decision> decisions = new ArrayList<>();
-        decisions.add(new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", true, 0));
-        decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true, 0));
-        decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true, 0));
-        decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false, 0));
+        decisions.add(new Decision(chatId, creatorId, "what present do we buy ?", "huge bla bla bla", true));
+        decisions.add(new Decision(chatId, creatorId, "Where do we go ?", "huge bla bla bla", true));
+        decisions.add(new Decision(chatId, creatorId, "When will the party be ?", "huge bla bla bla", true));
+        decisions.add(new Decision(chatId, creatorId, "Do we add Slomp to the group ?", "huge bla bla bla", false));
         helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_Decision.TABLE_NAME);
         for (Decision d : decisions) {
-            Decision newD = insert(d);
+            Decision newD = save(d);
             Log.i(LOG_TAG, "inserted decision id:" + newD.getId());
             Decision found = getDecision(newD.getId());
         }
+
+        Decision decision1 = getDecisions(chatId, null).get(0);
+        List<TextOption> options = new ArrayList<>();
+        options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
+        options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
+        options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
+        options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
+        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_TextOption.TABLE_NAME);
+        for (TextOption te : options) {
+            Option newOpt = save(te);
+            Log.i(LOG_TAG, "inserted TextOption id:" + newOpt.getId());
+            Option found = getOption(newOpt.getId());
+        }
+        // }
+        // Do some test query
         Log.i(LOG_TAG, "query getDecisions(null)");
-        for (Decision d : getDecisions(null)) {
+        for (Decision d : getDecisions(chatId, null)) {
             Log.d(LOG_TAG, "found-1: " + d);
         }
 
         Log.i(LOG_TAG, "query getDecisions(true)");
-        for (Decision d : getDecisions(true)) {
+        for (Decision d : getDecisions(chatId, true)) {
+            List<Option> optionsList = getOptions(d);
+            if (options.size() > 0)
+                PollgramFactory.getPollgramService().notifyNewDecision(d, optionsList);
             Log.d(LOG_TAG, "found-2: " + d);
         }
         Log.i(LOG_TAG, "query getDecisions(false)");
-        for (Decision d : getDecisions(false)) {
+        for (Decision d : getDecisions(chatId, false)) {
             Log.d(LOG_TAG, "found-3 " + d);
         }
 
-        Decision decision1 = getDecisions(null).get(0);
-        List<TextOption> options = new ArrayList<>();
-        options.add(new TextOption("Ski", "They cost 385EUR i saw them at the corner shop", decision1.getId()));
-        options.add(new TextOption("Phone", "The new StonexOne is AWESOME !!!", decision1.getId()));
-        options.add(new TextOption("Trip", "Yeah a trip trought Europe can be a nice idea", decision1.getId()));
-        options.add(new TextOption("A stupid idea", "it is late and i have no more ideas ;-/", decision1.getId()));
-        helper.getWritableDatabase().execSQL("DELETE FROM " + PGSqlLiteHelper.T_TextOption.TABLE_NAME);
-        for(TextOption te : options){
-            Option newOpt = insert(te);
-            Log.i(LOG_TAG, "inserted TextOption id:" + newOpt.getId());
-            Option found = getOption(newOpt.getId());
-        }
 
-        Log.i(LOG_TAG, "query getOptions(decision1.getId())");
-        List<Option> optionsQuery = getOptions(decision1.getId());
-        for (int i=0; i< optionsQuery.size() ; i++ ) {
-            Option o = optionsQuery.get(i);
-            Log.d(LOG_TAG, "optionFound " + o);
-            Vote v = new Vote(null, new Date(), 93880097, o.getId());
-            Vote newV = save(v);
-            Log.d(LOG_TAG, "insert vote: " + v);
+    }
+
+    @Override
+    public int getUserVoteCount(Decision decision) {
+        SQLiteDatabase db = helper.getReadableDatabase();
+        try {
+            Cursor c =db.rawQuery("Select count(*) FROM (" +
+                            "SELECT v." + PGSqlLiteHelper.T_Vote.USER_ID + " " +
+                            "FROM decision d inner join text_option o " +
+                            "on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
+                            "inner join vote v " +
+                            "on o." + PGSqlLiteHelper.T_TextOption.ID + " = v." + PGSqlLiteHelper.T_Vote.FK_OPTION + " " +
+                            "where d." + PGSqlLiteHelper.T_Decision.ID + " = ? " +
+                            "group by " + PGSqlLiteHelper.T_Vote.USER_ID+
+                            ")",
+                    new String[]{Long.toString(decision.getId())});
+            if (!c.moveToFirst())
+                return  0;
+            return c.getInt(0);
+        } finally {
+            if (db != null)
+                db.close();
         }
     }
 
     @Override
-    public Decision insert(Decision d) {
-        return helper.insert(d, helper.DECISION_MAPPER);
+    public WinningOption getWinningOption(Decision decision) {
+        SQLiteDatabase db = helper.getReadableDatabase();
+        String voteCountFieldName= "max_vote_count";
+        try {
+            Cursor c =db.rawQuery("SELECT "+PGSqlLiteHelper.T_TextOption.cloumns(null)+" , max(vote_count) as "+voteCountFieldName+" FROM (" +
+                            "SELECT "+PGSqlLiteHelper.T_TextOption.cloumns("o")+",  count (*) as vote_count " +
+                            "FROM decision d inner join text_option o " +
+                            "on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
+                            "inner join vote v " +
+                            "on o." + PGSqlLiteHelper.T_TextOption.ID + " = v." + PGSqlLiteHelper.T_Vote.FK_OPTION + " " +
+                            "where d." + PGSqlLiteHelper.T_Decision.ID + " = ? " +
+                            "and "+ PGSqlLiteHelper.T_Vote.VOTE + " = ? " +
+                            "group by " + PGSqlLiteHelper.T_Vote.FK_OPTION+
+                            ")",
+                    new String[]{Long.toString(decision.getId()), PGSqlLiteHelper.toString(true)});
+            if (!c.moveToFirst())
+                return null;
+            else
+              return new WinningOption(c.getInt(c.getColumnIndex(voteCountFieldName)),
+                      helper.TEXT_OPTION_MAPPER.from(c));
+        } finally {
+            if (db != null)
+                db.close();
+        }
     }
 
     @Override
-    public void update(Decision d) {
-        helper.update(d, helper.DECISION_MAPPER);
+    public Decision save(Decision d) {
+        Decision foundDecision = getDecision(d.getTitle(), d.getChatId());
+        if (foundDecision == null)
+            return helper.insert(d, helper.DECISION_MAPPER);
+        else{
+            d.setId(foundDecision.getId());
+            helper.update(d, helper.DECISION_MAPPER);
+            return d;
+        }
     }
 
     @Override
@@ -99,31 +153,29 @@ public Decision getDecision(long decisionId) {
     }
 
     @Override
-    public List<Decision> getDecisions(@Nullable Boolean open) {
+    public List<Decision> getDecisions(int chatId, @Nullable Boolean open) {
+        String chatIdCond = PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ? ";
         if (open == null)
-            return helper.query(helper.DECISION_MAPPER, null, null);
+            return helper.query(helper.DECISION_MAPPER, chatIdCond, new String[]{Integer.toString(chatId)});
         else
-            return helper.query(helper.DECISION_MAPPER, PGSqlLiteHelper.T_Decision.OPEN + "= ?",
-                    new String[]{PGSqlLiteHelper.toString(open)});
+            return helper.query(helper.DECISION_MAPPER,
+                    PGSqlLiteHelper.T_Decision.OPEN + "= ? and " + chatIdCond,
+                    new String[]{PGSqlLiteHelper.toString(open), Integer.toString(chatId)});
     }
 
     @Override
-    public Option insert(Option o) {
+    public Option save(Option o) {
         if (o instanceof TimeRangeOption)
             throw new RuntimeException("Not yet supported :-(");
-        else {
-            TextOption tOpt = (TextOption) o;
-            return helper.insert(tOpt, helper.TEXT_OPTION_MAPPER);
-        }
-    }
 
-    @Override
-    public void update(Option o) {
-        if (o instanceof TimeRangeOption)
-            throw new RuntimeException("Not yet supported :-(");
+        TextOption tOpt = (TextOption) o;
+        Option foundOption = getOption(tOpt.getTitle(), o.getDecisionId());
+        if (foundOption == null)
+            return helper.insert(tOpt, helper.TEXT_OPTION_MAPPER);
         else {
-            TextOption tOpt = (TextOption) o;
+            tOpt.setId(foundOption.getId());
             helper.update(tOpt, helper.TEXT_OPTION_MAPPER);
+            return tOpt;
         }
     }
 
@@ -193,14 +245,42 @@ public Option getOption(long optionId) {
 
     @Override
     public Vote save(Vote vote) {
-        if (vote.getId() == Vote.ID_NOT_SET) {
+        Vote foundVote = getVote(vote.getOptionId(), vote.getUserId());
+        if (foundVote == null) {
             return helper.insert(vote, helper.VOTE_MAPPER);
-        } else {
+        } else if (!vote.equals(foundVote)){
+            vote.setId(foundVote.getId());
             helper.update(vote, helper.VOTE_MAPPER);
-            return vote;
+        } else {
+            Log.d(LOG_TAG, "This vote ["+vote+"] is already saved ["+foundVote+"], nothing to do");
         }
+        return vote;
+    }
+
+    @Override
+    public Decision getDecision(String decisionTitle, int chatId) {
+        return helper.findFirst(helper.DECISION_MAPPER,
+                PGSqlLiteHelper.T_Decision.TITLE + " = ? AND " + PGSqlLiteHelper.T_Decision.FULL_CHAT_ID + " = ?",
+                new String[]{decisionTitle, Integer.toString(chatId)});
     }
 
+    @Override
+    public Option getOption(String optionTitle, Decision decision) {
+        return getOption(optionTitle, decision.getId());
+    }
+
+    private Option getOption(String optionTitle, long decisionId) {
+        return helper.findFirst(helper.TEXT_OPTION_MAPPER,
+                PGSqlLiteHelper.T_TextOption.TITLE + " = ? AND " + PGSqlLiteHelper.T_TextOption.FK_DECISION + " = ?",
+                new String[]{optionTitle, Long.toString(decisionId)});
+    }
+
+    @Override
+    public Vote getVote(long optionId, int userId) {
+        return helper.findFirst(helper.VOTE_MAPPER,
+                PGSqlLiteHelper.T_Vote.FK_OPTION + " = ? AND " + PGSqlLiteHelper.T_Vote.USER_ID + " = ?",
+                new String[]{Long.toString(optionId), Integer.toString(userId)});
+    }
 
 }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
similarity index 62%
rename from TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java
rename to TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
index 813650c27..06a1f0213 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceFactory.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramFactory.java
@@ -3,11 +3,26 @@
 /**
  * Created by davide on 10/11/15.
  */
-public class PollgramServiceFactory {
+public class PollgramFactory {
 
     private static volatile PollgramDAO INSTANCE = null;
     private static volatile PollgramService POLLGRAM_SERVICE_INSTANCE = null;
+    private static volatile PollgramMessagesManager MESSAGEE_MANAGER_INSTANCE = null;
 
+    // TODO factorize getter code
+
+    public static PollgramMessagesManager getPollgramMessagesManager() {
+        PollgramMessagesManager localInstance = MESSAGEE_MANAGER_INSTANCE;
+        if (localInstance == null) {
+            synchronized (PollgramMessagesManager.class) {
+                localInstance = MESSAGEE_MANAGER_INSTANCE;
+                if (localInstance == null) {
+                    MESSAGEE_MANAGER_INSTANCE = localInstance = new PollgramMessagesManagerImpl();
+                }
+            }
+        }
+        return localInstance;
+    }
 
     public static PollgramDAO getPollgramDAO() {
         PollgramDAO localInstance = INSTANCE;
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
new file mode 100644
index 000000000..61025ef97
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -0,0 +1,166 @@
+package org.pollgram.decision.service;
+
+import android.support.annotation.NonNull;
+
+import org.pollgram.R;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.utils.PollgramUtils;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.tgnet.TLRPC;
+
+import java.text.ParseException;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by davide on 19/11/15.
+ */
+public interface PollgramMessagesManager {
+
+    /**
+     * The different messages type managed by Pollgram
+     * Emoji codes are taken from http://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons
+     */
+    enum MessageType {
+        REMIND_TO_VOTE(R.string.MessageType_REMIND_TO_VOTE, (byte) 0xF0, (byte) 0x9F, (byte) 0x94, (byte) 0x94), // bell
+        NEW_DECISION(R.string.MessageType_NEW_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x93, (byte) 0x8A), // bar chart
+        VOTE(R.string.MessageType_VOTE, (byte) 0xF0, (byte) 0x9F, (byte) 0x93, (byte) 0x9D), // memo
+        CLOSE_DECISION(R.string.MessageType_CLOSE_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x9A, (byte) 0xAB), // no entry sign
+        REOPEN_DECISION(R.string.MessageType_REOPEN_DECISION, (byte) 0xF0, (byte) 0x9F, (byte) 0x94, (byte) 0x84),    //ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS
+        DELETE_DECISION(R.string.MessageType_DELETE_DECISION, (byte) 0xE2, (byte) 0x9D, (byte) 0x8C);    //CROSS MARK
+
+        private final String emoji;
+        private final int descrStringRes;
+        private String descriptionString;
+
+        private MessageType(int descrStringRes, byte... emojiBytes) {
+            this.emoji = PollgramUtils.getEmojiAsString(emojiBytes);
+            this.descrStringRes = descrStringRes;
+        }
+
+        public String getEmoji() {
+            return emoji;
+        }
+
+        public static MessageType byEmoji(String emoji){
+            for (MessageType mt : MessageType.values()){
+                if (emoji.equals(mt.getEmoji()))
+                    return mt;
+            }
+            return null;
+        }
+
+        public String getDescription() {
+            if (descriptionString == null)
+                descriptionString = ApplicationLoader.applicationContext.getString(descrStringRes);
+            return descriptionString;
+        }
+
+    }
+
+    /**
+     * @param msg message to parse
+     * @return whether the message is a pollgram transaction message it returns the message type,
+     * otherwise it returns null
+     */
+    MessageType getMessageType(String msg);
+
+    /**
+     * remove unnecessary part of the message, like the link for downloading Pollgram from the market
+     * that is needed just for Telegram client different than Pollgram
+     * @param message
+     * @return
+     */
+    String reformatMessage(String message);
+
+    /**
+     * Build message for notify a vote transaction
+     * @param decision
+     * @param votes2Save
+     * @return the message ready to be sent
+     */
+    String buildNotifyVoteMessage(Decision decision, Collection<Vote> votes2Save);
+
+    /**
+     * build a message for notifying a creation of a new decision in a group
+     * @param decision
+     * @param options
+     * @return the message ready to be sent
+     */
+    String buildNotifyNewDecision(Decision decision, List<Option> options);
+
+    /**
+     * build a message in order to remind to userAsString, that he must vote for the decision
+     * @param userAsString
+     * @param decision
+     * @return the message ready to be sent
+     */
+    String buildRemindMessage(String userAsString, Decision decision);
+
+    /**
+     * build a message for notifying that the passed decision is now closed and is no more possible to vote
+     * @param decision
+     * @param  winningOption the option that received more votes so far
+     * @param voteCount
+     * @return the message ready to be sent
+     */
+    String buildCloseDecision(Decision decision, Option winningOption, int voteCount);
+
+    /**
+     * build a message for notifying that the passed decision is has been reopened and is no more possible to vote
+     * @param decision
+     * @return
+     */
+    String buildReopenDecision(Decision decision);
+
+    /**
+     * if the message is {@link org.pollgram.decision.service.PollgramMessagesManager.MessageType#VOTE}
+     * @param msg the text message to parse
+     * @param currentChat current group chat
+     * @param userId message owner
+     * @return a collection of the vote contained in the message
+     * @throws ParseException is the message is not well formed
+     */
+    Collection<Vote> getVotes(String msg, TLRPC.Chat currentChat, Date messageDate, int userId) throws PollgramParseException;
+
+    /**
+     * Retrun vale for getNewDecision method
+     */
+    class NewDecisionData{
+        final @NonNull Decision decision;
+        final @NonNull List<Option> optionList;
+
+        public NewDecisionData(@NonNull Decision decision, @NonNull List<Option> optionList) {
+            this.decision = decision;
+            this.optionList = optionList;
+        }
+    }
+
+    /**
+     * Return the new decision data contained in the passed message
+     * @param msg the text message to parse
+     * @param currentChat current group chat
+     * @param userId message owner
+      @return the decision and its options
+     */
+    NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int userId) throws PollgramParseException;
+
+    /**
+     * Return value for getCloseDecision
+     */
+    class ClosedDecisionDate {
+        final Decision decision;
+        final Option winningOption;
+
+        public ClosedDecisionDate(Decision decision, Option winningOption) {
+            this.decision = decision;
+            this.winningOption = winningOption;
+        }
+    }
+
+    ClosedDecisionDate getCloseDecision(String text, TLRPC.Chat currentChat);
+
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
new file mode 100644
index 000000000..fe2638329
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -0,0 +1,323 @@
+package org.pollgram.decision.service;
+
+import android.content.Context;
+import android.util.Log;
+
+import org.pollgram.R;
+import org.pollgram.decision.data.DBBean;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.TextOption;
+import org.pollgram.decision.data.Vote;
+import org.pollgram.decision.utils.PollgramUtils;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.tgnet.TLRPC;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+import java.util.NoSuchElementException;
+import java.util.StringTokenizer;
+
+/**
+ * Created by davide on 18/11/15.
+ */
+class PollgramMessagesManagerImpl implements PollgramMessagesManager {
+    private static final String LOG_TAG = "MessageTransactions";
+
+    private static final String GOOGLE_PLAY_POOLGRAM_URL = "https://play.google.com/store/apps/details?id=org.pollgram";
+
+    private static final String POLLGRAM_MESSAGE_PREFIX = "#Pollgram ";
+    private static final char QUOTE_CHAR = '\'';
+    private static final char NEW_LINE = '\n';
+
+    private static final String WINKING_FACE_EMOJI = PollgramUtils.getEmojiAsString((byte) 0xF0, (byte) 0x9F, (byte) 0x98, (byte)0x89);// winking face
+    private static final String TRUE_EMOJI = PollgramUtils.getEmojiAsString((byte) 0xE2, (byte) 0x9C, (byte) 0x85);// WHITE HEAVY CHECK MARK
+    private static final String FALSE_EMOJI = PollgramUtils.getEmojiAsString((byte) 0xE2, (byte) 0x9D, (byte) 0x8C);// CROSS MARK
+    private static final String BULLET_LIST_EMOJI = PollgramUtils.getEmojiAsString((byte) 0xE2, (byte) 0x96, (byte) 0xAB);// white small square
+
+    private final PollgramDAO pollgramDAO;
+    private final Context context;
+
+    PollgramMessagesManagerImpl(){
+        this(PollgramFactory.getPollgramDAO());
+    }
+
+    String getTailingString(){
+        Context c = ApplicationLoader.applicationContext;
+        return new StringBuilder().append(NEW_LINE).
+                append(NEW_LINE).
+                append(c.getString(R.string.downloadPollgramFromMarket)).
+                append(' ').
+                append(GOOGLE_PLAY_POOLGRAM_URL).
+                toString();
+    }
+
+    PollgramMessagesManagerImpl(PollgramDAO pollgramDAO){
+        this.pollgramDAO = pollgramDAO;
+        context = ApplicationLoader.applicationContext;
+    }
+
+    private String format(Object obj){
+        if (obj instanceof Boolean)
+            return getBooleanValue((Boolean) obj);
+
+        String strValue;
+        if (obj instanceof Decision) {
+            strValue = ((Decision) obj).getTitle();
+        } else if (obj instanceof  Option){
+            strValue = ((Option)obj).getTitle();
+        } else
+            strValue = "" + obj;
+
+        strValue = QUOTE_CHAR + strValue + QUOTE_CHAR;
+        return strValue;
+    }
+
+    private String getBooleanValue(Boolean b) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(b ? TRUE_EMOJI : FALSE_EMOJI);
+        sb.append(" ");
+        sb.append(ApplicationLoader.applicationContext.getString(b ? R.string.yes : R.string.no));
+        return sb.toString();
+    }
+
+    private Boolean getBooleanValue(String str){
+        if (str == null)
+            return  false;
+        return str.startsWith(TRUE_EMOJI);
+    }
+
+    @Override
+    public String buildRemindMessage(String userAsString, Decision decision) {
+        StringBuilder body = new StringBuilder();
+        body.append(context.getString(R.string.tmsg_RemindToVoteP1));
+        body.append(format(userAsString));
+        body.append(context.getString(R.string.tmsg_RemindToVoteP2));
+        body.append(format(decision));
+        body.append(context.getString(R.string.tmsg_RemindToVoteP3));
+        body.append(' ');
+        body.append(WINKING_FACE_EMOJI);
+        return  buildMessage(MessageType.REMIND_TO_VOTE, body.toString());
+    }
+
+    @Override
+    public String buildCloseDecision(Decision decision, Option winningOption, int voteCount) {
+        StringBuilder body = new StringBuilder();
+        body.append(context.getString(R.string.tmsg_CloseDecisionP1));
+        body.append(format(decision));
+        body.append(context.getString(R.string.tmsg_CloseDecisionP2));
+        body.append(format(winningOption));
+        body.append(context.getString(R.string.tmsg_CloseDecisionP3));
+        body.append(' ');
+        body.append(voteCount);
+        body.append(' ');
+        body.append(context.getString(R.string.tmsg_CloseDecisionP4));
+
+        return  buildMessage(MessageType.CLOSE_DECISION, body.toString());
+    }
+
+    @Override
+    public String buildReopenDecision(Decision decision) {
+        StringBuilder body = new StringBuilder();
+        body.append(context.getString(R.string.tmsg_ReopenDecisionPrefix));
+        body.append(format(decision));
+        body.append(NEW_LINE);
+        body.append(context.getString(R.string.tmsg_ReopenDecisionSuffix));
+        return buildMessage(MessageType.REOPEN_DECISION, body.toString());
+    }
+
+    @Override
+    public String buildNotifyVoteMessage(Decision decision, Collection<Vote> votes2Save) {
+        StringBuilder body = new StringBuilder();
+        body.append(context.getString(R.string.tmsg_Vote));
+        body.append(NEW_LINE);
+        body.append(format(decision));
+        body.append(NEW_LINE);
+        Iterator<Vote> it = votes2Save.iterator();
+        while (it.hasNext()) {
+            Vote v = it.next();
+            body.append(format(v.isVote()));
+            body.append(' ');
+            Option option = pollgramDAO.getOption(v.getOptionId());
+            if (option == null)
+                throw new PollgramDAOException("option not found for id [" + v.getOptionId() + "]");
+            body.append(format(option));
+            if (it.hasNext())
+                body.append(NEW_LINE);
+        }
+        return buildMessage(MessageType.VOTE, body.toString());
+    }
+
+    @Override
+    public String buildNotifyNewDecision(Decision decision, List<Option> options) {
+        StringBuilder body = new StringBuilder();
+        body.append(context.getString(R.string.tmsg_NewDecisionMsgPrefix));
+        body.append(NEW_LINE);
+        body.append(format(decision));
+        body.append(',');
+        body.append(NEW_LINE);
+        body.append(format(decision.getLongDescription()));
+        body.append('.');
+        body.append(NEW_LINE);
+        body.append(context.getString(R.string.tmsg_NewDecisionOptionsPrefix));
+        body.append(NEW_LINE);
+        for(Option o : options){
+            body.append(BULLET_LIST_EMOJI);
+            body.append(' ');
+            body.append(format(o));
+            if (o instanceof TextOption) {
+                body.append(',');
+                body.append(' ');
+                body.append(format(((TextOption)o).getLongDescription()));
+            }
+            body.append(NEW_LINE);
+        }
+        return buildMessage(MessageType.NEW_DECISION, body.toString());
+    }
+
+    /**
+     * Build a generic message adding specific heading and tailing to the messageBody according
+     * to the passed type
+     * @param type
+     * @param messageBody
+     * @return a message ready to be sent
+     */
+    private String buildMessage(MessageType type, String messageBody) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(POLLGRAM_MESSAGE_PREFIX);
+        sb.append(' ');
+        sb.append(type.getEmoji());
+        sb.append(' ');
+        sb.append(type.getDescription());
+        sb.append(NEW_LINE);
+
+        sb.append(messageBody);
+
+        sb.append(getTailingString());
+        return sb.toString();
+    }
+
+    @Override
+    public String reformatMessage(String message) {
+        return message.replace(getTailingString(), "");
+    }
+
+    /**
+     *
+     * @param msg
+     * @return the MessageType of the given message or null, it is a normal message
+     */
+    @Override
+    public MessageType getMessageType(String msg){
+        if (msg != null && msg.startsWith(POLLGRAM_MESSAGE_PREFIX)) {
+            try {
+                int start = POLLGRAM_MESSAGE_PREFIX.length() + 1;
+                String msgEmoji = msg.substring(start, start + 2);
+                MessageType t = MessageType.byEmoji(msgEmoji);
+                Log.d(LOG_TAG, "MessageType for [" + msgEmoji + "] is [" + t + "]");
+                return t;
+            } catch (IndexOutOfBoundsException | IllegalArgumentException e) {
+                Log.e(LOG_TAG, "Error parsing message type for message [" + msg + "] il will not be parset", e);
+                return null;
+            }
+        }
+        Log.d(LOG_TAG,"["+msg+"] is a normal message");
+        return null;
+    }
+
+
+    @Override
+    public Collection<Vote> getVotes(String msg, TLRPC.Chat currentChat, Date messageDate ,int userId) throws PollgramParseException {
+
+        try {
+            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR) + Character.toString(NEW_LINE));
+            strTok.nextToken(); // skip token
+            strTok.nextToken(); // skip token
+            String decisionTitle = strTok.nextToken();
+            Decision decision = pollgramDAO.getDecision(decisionTitle, currentChat.id);
+            if (decision == null)
+                throw new PollgramParseException("Decision not found for title["+decisionTitle+"]  currentChat["+currentChat.id+"]");
+            List<Vote> voteList = new ArrayList<>();
+            while (strTok.hasMoreTokens()) {
+                String voteValue = strTok.nextToken();
+                Boolean vote = getBooleanValue(voteValue);
+
+                if (!strTok.hasMoreTokens()){
+                    Log.d(LOG_TAG, "No more token after something that look like a vote value ["+voteValue+"]");
+                    break;
+                }
+
+                String optionTitle = strTok.nextToken();
+                Option o = pollgramDAO.getOption(optionTitle, decision);
+                if (o == null)
+                    throw new PollgramParseException("Option not found for title["+optionTitle+"]  decision["+decision+"]");
+                Vote v = new Vote(vote, messageDate, userId, o.getId());
+                Log.d(LOG_TAG, "added vote [" + v + "]");
+                voteList.add(v);
+            }
+            Log.d(LOG_TAG, "getVotes votes["+voteList+"]");
+            return voteList;
+        }catch (NoSuchElementException e ){
+            Log.e(LOG_TAG, "Error parsing message ["+msg+"]",e);
+            throw new PollgramParseException("Token not found",e);
+        }
+    }
+
+    @Override
+    public NewDecisionData getNewDecision(String msg, TLRPC.Chat currentChat, int userId) {
+        Decision decision;
+        List<Option> optionList = new ArrayList<>();
+        try {
+            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            { //Create decsion
+                strTok.nextToken();//skip this token
+                String title = strTok.nextToken();
+                strTok.nextToken();//skip this token
+                String longDescription = strTok.nextToken();
+                decision = new Decision(currentChat.id, userId, title, longDescription, true);
+            }
+            while (strTok.hasMoreTokens()){
+                strTok.nextToken();//skip this token
+                if (!strTok.hasMoreTokens())
+                    break;
+                String title = strTok.nextToken();
+                strTok.nextToken();//skip this token
+                String longDesc = strTok.nextToken();
+                Option to = new TextOption(title, longDesc, DBBean.ID_NOT_SET);
+                optionList.add(to);
+            }
+        } catch (NoSuchElementException e) {
+            Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
+            throw new PollgramParseException("Token not found", e);
+        }
+        Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] optionList[" + optionList + "]");
+        return new NewDecisionData(decision, optionList);
+    }
+
+    @Override
+    public ClosedDecisionDate getCloseDecision(String msg, TLRPC.Chat currentChat) {
+        Decision decision;
+        Option winningOption;
+        try {
+            StringTokenizer strTok = new StringTokenizer(msg, Character.toString(QUOTE_CHAR));
+            strTok.nextToken();//skip this token
+            String title = strTok.nextToken();
+            strTok.nextToken();//skip this token
+            String optionTitle = strTok.nextToken();//skip this token
+
+            String longDescription = strTok.nextToken();
+            decision = pollgramDAO.getDecision(title, currentChat.id);
+            winningOption = pollgramDAO.getOption(optionTitle, decision);
+
+
+        } catch (NoSuchElementException e) {
+            Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
+            throw new PollgramParseException("Token not found", e);
+        }
+        Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] winningOption[" + winningOption + "]");
+        return new ClosedDecisionDate(decision, winningOption);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java
new file mode 100644
index 000000000..fd5fe79dc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramParseException.java
@@ -0,0 +1,15 @@
+package org.pollgram.decision.service;
+
+/**
+ * Created by davide on 27/10/15.
+ */
+public class PollgramParseException extends RuntimeException {
+
+    public PollgramParseException(String detailMessage) {
+        super(detailMessage);
+    }
+
+    public PollgramParseException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
index 6058ac2d3..bf9a11c23 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramService.java
@@ -1,10 +1,13 @@
 package org.pollgram.decision.service;
 
 import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.MessageObject;
 import org.telegram.tgnet.TLRPC;
 
+import java.util.Collection;
 import java.util.List;
 
 /**
@@ -18,7 +21,23 @@
 
     UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User> users);
 
-    Vote save(Vote vote);
+    void remindUserToVote(Decision decision, TLRPC.User user);
 
-    void remindUserToVote(TLRPC.User user, long groupChatId, Decision decision);
+    void notifyNewDecision(Decision decision, List<Option> options);
+
+    void notifyVote(Decision decision, Collection<Vote> votes2Save);
+
+    void notifyClose(Decision decision);
+
+    void notifyReopen(Decision decision);
+
+    void notifyDelete(Decision decision);
+
+    /**
+     * Process a message and return the new message, performing some transformation if needed.
+     * @param message the input message
+     * @param currentChat
+     * @return the input message transformed if needed
+     */
+    void processMessage(MessageObject message, TLRPC.Chat currentChat);
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 86e4b283b..7c50a90fc 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -1,20 +1,23 @@
 package org.pollgram.decision.service;
 
 import android.util.Log;
+import android.widget.Toast;
 
-import org.pollgram.R;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.data.Option;
 import org.pollgram.decision.data.UsersDecisionVotes;
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.ChatObject;
 import org.telegram.messenger.MessageObject;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
 import java.util.List;
 
 /**
@@ -23,10 +26,19 @@
 public class PollgramServiceImpl implements PollgramService {
 
     private static final String LOG_TAG = "POLLGSRV";
+    private static final String NOT_PARSED_TAG = "NOT_PARSED";
+
     private final PollgramDAO pollgramDAO;
+    private final PollgramMessagesManager messageManager;
 
     public PollgramServiceImpl() {
-        this.pollgramDAO = PollgramServiceFactory.getPollgramDAO();
+        this.pollgramDAO = PollgramFactory.getPollgramDAO();
+        this.messageManager = PollgramFactory.getPollgramMessagesManager();
+    }
+
+    PollgramServiceImpl(PollgramDAO pollgramDAO, PollgramMessagesManager messageManager) {
+        this.pollgramDAO = pollgramDAO;
+        this.messageManager = messageManager;
     }
 
     @Override
@@ -34,7 +46,7 @@ public PollgramServiceImpl() {
         List<TLRPC.User> users = new ArrayList<>();
         for (int i = 0; i < usersIds.length; i++) {
             TLRPC.User user = MessagesController.getInstance().getUser(usersIds[i]);
-            if (user.status == null) {// suppose this is abot
+            if (user.status == null) {// suppose this is a bot
                 Log.i(LOG_TAG, "User [" + user + "] is a BOT, it will be skipped");
                 continue;
             }
@@ -59,22 +71,144 @@ public UsersDecisionVotes getUsersDecisionVotes(long decisionId, List<TLRPC.User
         return udv;
     }
 
+    private List<Object> asList(Object... objs){
+        List<Object> l = new ArrayList<>(objs.length);
+        for(int i=0;i<objs.length ; i++){
+            l.add(objs[i]);
+        }
+        return l;
+    }
+
+    @Override
+    public void remindUserToVote(Decision decision, TLRPC.User user) {
+        Log.d(LOG_TAG, "remindUserToVote groupChatId[" + decision.getChatId() + "] decision[" + decision + "] user[" + user + "]");
+        String msg = messageManager.buildRemindMessage(PollgramUtils.asString(user), decision);
+        sendMessage(decision.getChatId(), msg);
+    }
+
+    @Override
+    public void notifyVote(Decision decision, Collection<Vote> votes2Save) {
+        Log.d(LOG_TAG, "notifyVote groupChatId[" + decision.getChatId() + "] decision[" + decision + "] votes2Save[" + votes2Save + "]");
+
+        // Save vote on the db first
+        for(Vote v : votes2Save){
+            pollgramDAO.save(v);
+        }
+        String message = messageManager.buildNotifyVoteMessage(decision, votes2Save);
+        sendMessage(decision.getChatId(), message);
+    }
+
+    @Override
+    public void notifyClose(Decision decision) {
+        decision.setOpen(false);
+        decision = pollgramDAO.save(decision);
+        PollgramDAO.WinningOption winningOption = pollgramDAO.getWinningOption(decision);
+        String message = messageManager.buildCloseDecision(decision, winningOption.option, winningOption.voteCount);
+        sendMessage(decision.getChatId(), message);
+    }
+
+    @Override
+    public void notifyReopen(Decision decision) {
+        decision.setOpen(true);
+        decision = pollgramDAO.save(decision);
+        String message = messageManager.buildReopenDecision(decision);
+        sendMessage(decision.getChatId(), message);
+    }
+
     @Override
-    public Vote save(Vote vote) {
-        // TODO send message for vote
-        return pollgramDAO.save(vote);
+    public void notifyDelete(Decision decision) {
+        // TODO
     }
 
     @Override
-    public void remindUserToVote(TLRPC.User user, long groupChatId, Decision decision) {
-        String msg = PollgramUtils.POLLGRAM_MESSAGE_PREFIX + ApplicationLoader.applicationContext.
-                getString(R.string.remindMessage, PollgramUtils.asString(user), decision.getTitle());
+    public void notifyNewDecision(Decision decision, List<Option> options) {
+        Log.d(LOG_TAG, "notifyNewDecision decision[" + decision + "] decision[" + decision + "] options[" + options + "]");
+        pollgramDAO.save(decision);
+        for(Option o : options){
+            if (o.getDecisionId() != decision.getId()) {
+                Log.e(LOG_TAG, "Option decisionid["+o.getDecisionId()+"] != decision.getId()["+decision.getId()+"]");
+                continue;
+            }
+            pollgramDAO.save(o);
+        }
+
+        String message = messageManager.buildNotifyNewDecision(decision,options);
+        sendMessage(decision.getChatId(), message);
+    }
+
+    @Override
+    public void processMessage(MessageObject message, TLRPC.Chat currentChat) {
+        Log.d(LOG_TAG,"parsing message ["+message.messageText+"] for chat ["+currentChat+"]");
+        if (currentChat == null) {
+            Log.d(NOT_PARSED_TAG,"not a group message");
+            return;
+        }
+
+        if (ChatObject.isChannel(currentChat)){
+            Log.d(NOT_PARSED_TAG,"is a channel");
+            return;
+        }
+
+        String text = message.messageText.toString();
+        PollgramMessagesManagerImpl.MessageType msgType = messageManager.getMessageType(text);
+        if (msgType == null) {
+            Log.d(NOT_PARSED_TAG,"unknown MessageType");
+            return;
+        }
+
+        int userId = message.messageOwner.from_id;
+        Date messageDate = new Date((long)(message.messageOwner.date)*1000);
+
+        try {
+            switch (msgType) {
+                case NEW_DECISION: {
+                    PollgramMessagesManager.NewDecisionData resut = messageManager.getNewDecision(text, currentChat, userId);
+                    if (resut == null){
+                        throw new PollgramParseException("Decision not found for NEW_DECISION messsage");
+                    }
+                    Decision d = pollgramDAO.save(resut.decision);
+                    for (Option o : resut.optionList) {
+                        o.setDecisionId(d.getId());
+                        pollgramDAO.save(o);
+                    }
+                    break;
+                }
+                case REOPEN_DECISION: {
+                    break;
+                }
+                case CLOSE_DECISION: {
+                    PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(text, currentChat);
+                    result.decision.setOpen(false);
+                    pollgramDAO.save(result.decision);
+                    break;
+                }
+                case DELETE_DECISION: {
+                    break;
+                }
+                case REMIND_TO_VOTE: {
+                    break;
+                }
+                case VOTE: {
+                    Collection<Vote> votes = messageManager.getVotes(text, currentChat, messageDate, userId);
+                    for (Vote v : votes)
+                        pollgramDAO.save(v);
+                    break;
+                }
+            }
+        } catch (PollgramParseException e){
+            Toast.makeText(ApplicationLoader.applicationContext,
+                    "Error process message: "+ e.getMessage(), Toast.LENGTH_LONG).show();
+            Log.e(LOG_TAG,"Error parsing message ["+text+"]",e);
+        }
+    }
+
+    protected void sendMessage(long groupChatId, String message) {
         long peer = -groupChatId;
         MessageObject replyToMsg = null;
         TLRPC.WebPage webPAge = null;
         boolean searchLinks = false;
         boolean asAdmin = false;
-        SendMessagesHelper.getInstance().sendMessage(msg, peer, replyToMsg, webPAge, searchLinks, asAdmin);
+        SendMessagesHelper.getInstance().sendMessage(message, peer, replyToMsg, webPAge, searchLinks, asAdmin);
+        Log.i(LOG_TAG, "sended message [" + message + "] in group [" + groupChatId + "]");
     }
-
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
index 22c033670..71768b27e 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/DecisionsListFragment.java
@@ -22,11 +22,12 @@
 import org.pollgram.decision.adapter.DecisionAdapter;
 import org.pollgram.decision.data.Decision;
 import org.pollgram.decision.service.PollgramDAO;
-import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
@@ -45,7 +46,9 @@
  */
 public class DecisionsListFragment extends BaseFragment {
     private static int nextId = 1;
-    private static final int ID_TOGGLE_OPEN_CLOSE_DECISOINS = nextId++;
+    private static final int ID_TOGGLE_OPEN_CLOSE_DECISIONS = nextId++;
+    private static final int ID_PURGE_ALL_DATA = nextId++;
+    private static final int ID_PUT_STUB_DATA_DATA = nextId++;
 
     private TLRPC.ChatFull chatInfo;
     private TLRPC.Chat currentChat;
@@ -53,7 +56,7 @@
     private Context context;
 
     private boolean hideCloseDecision;
-    private PollgramDAO decisionDAO;
+    private PollgramDAO pollgramDAO;
     private int[] participantsUserIds;
     private TextView tvSubtitle;
 
@@ -66,7 +69,7 @@ public DecisionsListFragment(Bundle bundle) {
 
     @Override
     public boolean onFragmentCreate() {
-        decisionDAO = PollgramServiceFactory.getPollgramDAO();
+        pollgramDAO = PollgramFactory.getPollgramDAO();
         hideCloseDecision = true;
         return true;
     }
@@ -82,21 +85,28 @@ public View createView(final Context context) {
         // Create menu
         ActionBarMenu menu = actionBar.createMenu();
         ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
-        final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISOINS,
+        final TextView viewOpenCloseTextView =  headerItem.addSubItem(ID_TOGGLE_OPEN_CLOSE_DECISIONS,
                 context.getString(R.string.viewCloseDecision),0 );
+        headerItem.addSubItem(ID_PURGE_ALL_DATA, "Purge ALL data from db", 0);
+        headerItem.addSubItem(ID_PUT_STUB_DATA_DATA, "Put stub data for current chat", 0);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
                     finishFragment();
-                } else if (id == ID_TOGGLE_OPEN_CLOSE_DECISOINS){
+                    return;
+                } else if (id == ID_TOGGLE_OPEN_CLOSE_DECISIONS) {
                     hideCloseDecision = !hideCloseDecision;
                     if (hideCloseDecision)
                         viewOpenCloseTextView.setText(R.string.viewCloseDecision);
                     else
                         viewOpenCloseTextView.setText(R.string.hideCloseDecision);
-                    updateResult();
+                } else if (id == ID_PURGE_ALL_DATA){
+                    pollgramDAO.purgeData();
+                } else if (id == ID_PUT_STUB_DATA_DATA){
+                    pollgramDAO.putStubData(currentChat.id, UserConfig.getCurrentUser().id);
                 }
+                updateResult();
             }
         });
 
@@ -168,7 +178,7 @@ public void onClick(View v) {
 
     private void updateResult() {
         Boolean queryPar = hideCloseDecision ? true : null;
-        List<Decision> allDecisions = decisionDAO.getDecisions(null);
+        List<Decision> allDecisions = pollgramDAO.getDecisions(chatInfo.id, null);
         List<Decision> filterDecision = new ArrayList<>();
         int openCount = 0 ;
         for (Decision d : allDecisions){
@@ -192,4 +202,10 @@ public void setChatInfo(TLRPC.ChatFull chatInfo) {
         }
         this.currentChat = MessagesController.getInstance().getChat(chatInfo.id);
     }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateResult();
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index fccb1793f..10719b1f0 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -2,17 +2,22 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.pollgram.decision.service.PollgramDAO;
 import org.pollgram.decision.data.Decision;
-import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.service.PollgramFactory;
+import org.pollgram.decision.service.PollgramService;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.pollgram.R;
 import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 
@@ -23,6 +28,12 @@
 
     static final String LOG_TAG = "SlidingTabs";
 
+    // menu ids
+    private static int nextId = 1;
+    private static final int ID_CLOSE_DECISOIN = nextId++;
+    private static final int ID_REOPEN_DECISOIN = nextId++;
+    private static final int ID_DELETE_DECISOIN = nextId++;
+
 
     public static final String PAR_DECISION_ID = "PAR_DECISION_ID";
     public static final String PAR_PARTICIPANT_IDS  = "PAR_PARTICIPANT_IDS" ;
@@ -30,7 +41,9 @@
 
     private int[] participantsUserIds;
     private PollgramDAO pollgramDAO;
+    private PollgramService pollgramService;
     private Decision decision;
+    private TextView title;
 
     public VotesManagerFragment(Bundle bundle) {
         super(bundle);
@@ -40,7 +53,8 @@ public VotesManagerFragment(Bundle bundle) {
     public boolean onFragmentCreate() {
         // init field
         super.swipeBackEnabled = false;
-        pollgramDAO = PollgramServiceFactory.getPollgramDAO();
+        pollgramDAO = PollgramFactory.getPollgramDAO();
+        pollgramService = PollgramFactory.getPollgramService();
         long decisionId = getArguments().getLong(PAR_DECISION_ID);
         participantsUserIds = getArguments().getIntArray(PAR_PARTICIPANT_IDS);
         decision = pollgramDAO.getDecision(decisionId);
@@ -49,17 +63,41 @@ public boolean onFragmentCreate() {
 
 
     @Override
-    public View createView(Context context) {
-        // set up action bar
+    public View createView(final Context context) {
         // TODO add real icon
+        // set up action bar
         PollgramUtils.init(actionBar, decision.getTitle(), 18, R.drawable.attach_camera);
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        ActionBarMenu menu = actionBar.createMenu();
+        ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
+        if (decision.isOpen())
+            headerItem.addSubItem(ID_CLOSE_DECISOIN, context.getString(R.string.closeDecision),0 );
+        else {
+            headerItem.addSubItem(ID_REOPEN_DECISOIN, context.getString(R.string.reopenDecision), 0);
+            headerItem.addSubItem(ID_DELETE_DECISOIN, context.getString(R.string.deleteDecision), 0);
+        }
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
             @Override
             public void onItemClick(int id) {
                 if (id == -1) {
                     finishFragment();
+                    return;
+                }
+                int stringId;
+                if (id == ID_CLOSE_DECISOIN){
+                    pollgramService.notifyClose(decision);
+                    stringId = R.string.decisionClosed;
+                } else if (id == ID_REOPEN_DECISOIN){
+                    pollgramService.notifyReopen(decision);
+                    stringId = R.string.decisionReopened;
+                } else if (id == ID_DELETE_DECISOIN){
+                    stringId = R.string.decisionDeleted;
+                    pollgramService.notifyDelete(decision);
+                } else {
+                    Log.e(LOG_TAG, "Unknown action id["+id+"]");
+                    return;
                 }
+                Toast.makeText(context,context.getString(stringId),Toast.LENGTH_SHORT).show();
             }
         });
         fragmentView = new SizeNotifierFrameLayout(context);
@@ -67,11 +105,16 @@ public void onItemClick(int id) {
         LayoutInflater li = LayoutInflater.from(context);
         ViewGroup rootView = (ViewGroup)li.inflate(R.layout.votes_manager_main, (ViewGroup) fragmentView);
         // Create view
-        TextView title = (TextView) rootView.findViewById(R.id.decision_detail_top_title);
-        title.setText(context.getString(R.string.decisionDetailSummarizeTitle, decision.getUsersThatVoteCount(), participantsUserIds.length));
+        title = (TextView) rootView.findViewById(R.id.decision_detail_top_title);
+        updateView();
 
         android.support.v4.app.FragmentTransaction transaction = getParentActivity().getSupportFragmentManager().beginTransaction();
-        VotesManagerTabsFragment fragment = new VotesManagerTabsFragment();
+        VotesManagerTabsFragment fragment = new VotesManagerTabsFragment(){
+            @Override
+            protected void onVoteSaved() {
+                updateView();
+            }
+        };
         fragment.setArguments(getArguments());
         transaction.replace(R.id.sample_content_fragment, fragment);
         transaction.commit();
@@ -79,4 +122,9 @@ public void onItemClick(int id) {
         return rootView;
     }
 
+    private void updateView(){
+        int userThatVoteSoFar = pollgramDAO.getUserVoteCount(decision);
+        title.setText(getParentActivity().getString(R.string.decisionDetailSummarizeTitle,
+                userThatVoteSoFar, participantsUserIds.length));
+    }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
index cd4c8393b..a9ab78d5d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerTabsFragment.java
@@ -44,7 +44,7 @@
 import org.pollgram.decision.data.Vote;
 import org.pollgram.decision.service.PollgramDAO;
 import org.pollgram.decision.service.PollgramService;
-import org.pollgram.decision.service.PollgramServiceFactory;
+import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.utils.PollgramUtils;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.UserConfig;
@@ -56,7 +56,7 @@
 import java.util.Collection;
 import java.util.Date;
 
-public class VotesManagerTabsFragment extends Fragment {
+public abstract class VotesManagerTabsFragment extends Fragment {
 
     static final String LOG_TAG = "SlidingTabs";
 
@@ -78,8 +78,8 @@ public VotesManagerTabsFragment() {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        pollgramDAO = PollgramServiceFactory.getPollgramDAO();
-        pollgramService = PollgramServiceFactory.getPollgramService();
+        pollgramDAO = PollgramFactory.getPollgramDAO();
+        pollgramService = PollgramFactory.getPollgramService();
         groupChatId = getArguments().getLong(VotesManagerFragment.PAR_GROUP_CHAT_ID);
         long decisionId = getArguments().getLong(VotesManagerFragment.PAR_DECISION_ID);
         int[] participantsUserIds = getArguments().getIntArray(VotesManagerFragment.PAR_PARTICIPANT_IDS);
@@ -219,15 +219,12 @@ public void onClick(View view) {
                         }
                     }
                 } else
-                    votes2Save = adapter.getNewVoteSet();
+                    votes2Save = adapter.getNewVotes();
 
                 Log.i(LOG_TAG, "saving votes[" + votes2Save + "]");
-                for (Vote v : votes2Save) {
-                    // update persistence
-                    Vote saved = pollgramDAO.save(v);
+                pollgramService.notifyVote(usersDecisionVotes.getDecision(), votes2Save);
 
-                }
-                usersDecisionVotes = PollgramServiceFactory.getPollgramService().
+                usersDecisionVotes = PollgramFactory.getPollgramService().
                         getUsersDecisionVotes(usersDecisionVotes.getDecision().getId(),
                                 usersDecisionVotes.getUsers());
                 btnSaveOption.setVisibility(View.GONE);
@@ -239,6 +236,8 @@ public void onClick(View view) {
                 // Update table user interface
                 optionTableViewContainer.removeAllViews();
                 updateOptionsTableView(optionTableViewContainer, getActivity().getLayoutInflater());
+                // Call method in order ti
+                onVoteSaved();
 
                 Toast.makeText(getContext(), R.string.voteSaved, Toast.LENGTH_SHORT).show();
             }
@@ -345,7 +344,7 @@ private View updateOptionsTableView(ViewGroup container, LayoutInflater inflater
             remindButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    pollgramService.remindUserToVote(user, groupChatId, usersDecisionVotes.getDecision());
+                    pollgramService.remindUserToVote(usersDecisionVotes.getDecision(), user);
                     String message = getContext().getString(R.string.remindToUserSent, PollgramUtils.asString(user));
                     Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
                 }
@@ -403,5 +402,9 @@ private void add2Row(TableRow row, View view, int height){
         row.addView(view, ViewGroup.LayoutParams.WRAP_CONTENT, height);
     }
 
+    /**
+     * Called when votes are saved
+     */
+    protected abstract void onVoteSaved();
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
index a97a9b186..0d04b975d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/utils/PollgramUtils.java
@@ -17,13 +17,13 @@
 import org.telegram.ui.Components.FrameLayoutFixed;
 import org.telegram.ui.Components.LayoutHelper;
 
+import java.nio.charset.Charset;
+
 /**
  * Created by davide on 08/10/15.
  */
 public class PollgramUtils {
 
-    public static final String POLLGRAM_MESSAGE_PREFIX = "#Pollgram ";
-
     public static ActionBar init(ActionBar actionBar, int title,int titleFontSize, int drawableIcon){
         return init(actionBar, ApplicationLoader.applicationContext.getString(title), titleFontSize,drawableIcon);
     }
@@ -73,4 +73,8 @@ public static String asString(TLRPC.User user){
         }
     }
 
+    public static String getEmojiAsString(byte... emojiBytes){
+        return new String(emojiBytes, Charset.forName("UTF-8"));
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
index 3ec06c32d..2873f14dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessageObject.java
@@ -7,8 +7,6 @@
  */
 
 package org.telegram.messenger;
-import org.pollgram.R;
-
 import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.text.Layout;
@@ -21,6 +19,8 @@
 import android.text.style.URLSpan;
 import android.text.util.Linkify;
 
+import org.pollgram.R;
+import org.pollgram.decision.service.PollgramFactory;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.Components.TypefaceSpan;
@@ -91,6 +91,10 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             replyMessageObject = new MessageObject(message.replyMessage, users, false);
         }
 
+        if (messageOwner.message != null){
+            messageOwner.message = PollgramFactory.getPollgramMessagesManager().reformatMessage(messageOwner.message);
+        }
+
         if (message instanceof TLRPC.TL_messageService) {
             if (message.action != null) {
                 TLRPC.User fromUser = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index 5162fd983..1d34bb1f9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -22,6 +22,7 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
+import org.pollgram.decision.service.PollgramFactory;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.LocaleController;
@@ -733,7 +734,9 @@ protected void onDraw(Canvas canvas) {
 
         Drawable currentBackgroundDrawable;
         if (currentMessageObject.isOutOwner()) {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
+            if (isPollgram(currentMessageObject)) {
+                currentBackgroundDrawable = ResourceLoader.backgroundDrawablePollgramMessageOut;
+            } else if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
                 if (!media) {
                     currentBackgroundDrawable = ResourceLoader.backgroundDrawableOutSelected;
                 } else {
@@ -748,7 +751,9 @@ protected void onDraw(Canvas canvas) {
             }
             setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
         } else {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
+            if (isPollgram(currentMessageObject)) {
+                currentBackgroundDrawable = ResourceLoader.backgroundDrawablePollgramMessageIn;
+            }else  if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
                 if (!media) {
                     currentBackgroundDrawable = ResourceLoader.backgroundDrawableInSelected;
                 } else {
@@ -767,6 +772,8 @@ protected void onDraw(Canvas canvas) {
                 setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
             }
         }
+
+
         if (drawBackground && currentBackgroundDrawable != null) {
             currentBackgroundDrawable.draw(canvas);
         }
@@ -1027,6 +1034,12 @@ protected void onDraw(Canvas canvas) {
         }
     }
 
+    private boolean isPollgram(MessageObject msg) {
+        if (msg == null || msg.messageText == null)
+            return false;
+        return PollgramFactory.getPollgramMessagesManager().getMessageType(msg.messageText.toString()) != null;
+    }
+
     @Override
     public void onFailedDownload(String fileName) {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 457df5a5f..5b5a630b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -50,8 +50,10 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import org.telegram.PhoneFormat.PhoneFormat;
+import org.pollgram.R;
+import org.pollgram.decision.service.PollgramFactory;
 import org.pollgram.decision.ui.DecisionsListFragment;
+import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -71,7 +73,6 @@
 import org.telegram.messenger.MessagesStorage;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.NotificationsController;
-import org.pollgram.R;
 import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.UserConfig;
@@ -3949,6 +3950,12 @@ public void run() {
                     }
                 }
 
+                // TODO _POLLGRAM HERE THE MESSAGES ARE PARSED !!!! YEAH !!!
+                // From here pass even the message that i send
+                for (MessageObject msgObj : arr) {
+                    PollgramFactory.getPollgramService().processMessage(msgObj, currentChat);
+                }
+
                 ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                 if (!forward_end_reached) {
                     int currentMaxDate = Integer.MIN_VALUE;
@@ -5969,6 +5976,7 @@ public boolean canPerformActions() {
                     public void didPressUrl(MessageObject messageObject, final ClickableSpan url) {
                         if (url instanceof URLSpanNoUnderline) {
                             String str = ((URLSpanNoUnderline) url).getURL();
+                            // TODO _POLLGRAM add here eventualy some action on tap
                             if (str.startsWith("@")) {
                                 MessagesController.openByUserName(str.substring(1), ChatActivity.this, 0);
                             } else if (str.startsWith("#")) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java
index c142ac5d2..e23003814 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ResourceLoader.java
@@ -15,6 +15,8 @@
 
 public class ResourceLoader {
 
+    public static Drawable backgroundDrawablePollgramMessageIn;
+    public static Drawable backgroundDrawablePollgramMessageOut;
     public static Drawable backgroundDrawableIn;
     public static Drawable backgroundDrawableInSelected;
     public static Drawable backgroundDrawableOut;
@@ -56,6 +58,10 @@
 
     public static void loadRecources(Context context) {
         if (backgroundDrawableIn == null) {
+            // TODO POLLGRAM palce here new constant for selected/unselected in/out pollgram messages with blue background
+            backgroundDrawablePollgramMessageIn = context.getResources().getDrawable(R.drawable.msg_in_pollgram_message);
+            backgroundDrawablePollgramMessageOut = context.getResources().getDrawable(R.drawable.msg_out_pollgram_message);
+
             backgroundDrawableIn = context.getResources().getDrawable(R.drawable.msg_in);
             backgroundDrawableInSelected = context.getResources().getDrawable(R.drawable.msg_in_selected);
             backgroundDrawableOut = context.getResources().getDrawable(R.drawable.msg_out);
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_in_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_pollgram_message.9.png
new file mode 100755
index 000000000..cbec5b933
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_in_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/msg_out_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_pollgram_message.9.png
new file mode 100755
index 000000000..7190cb39e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/msg_out_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_in_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_pollgram_message.9.png
new file mode 100755
index 000000000..75a0a5e11
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/msg_in_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/msg_out_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_pollgram_message.9.png
new file mode 100755
index 000000000..e7580b91b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/msg_out_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_pollgram_message.9.png
new file mode 100755
index 000000000..480d29062
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_in_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_pollgram_message.9.png
new file mode 100755
index 000000000..f16106776
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/msg_out_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_pollgram_message.9.png
new file mode 100755
index 000000000..73d38ae29
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_in_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_pollgram_message.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_pollgram_message.9.png
new file mode 100755
index 000000000..8ef6d0cdd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_pollgram_message.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable/msg_in_pollgram_message.png b/TMessagesProj/src/main/res/drawable/msg_in_pollgram_message.png
new file mode 100644
index 000000000..27e4906d6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable/msg_in_pollgram_message.png differ
diff --git a/TMessagesProj/src/main/res/drawable/msg_out_pollgram_message.png b/TMessagesProj/src/main/res/drawable/msg_out_pollgram_message.png
new file mode 100644
index 000000000..d20ddcf7a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable/msg_out_pollgram_message.png differ
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 053bdfb86..75de7a0a8 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -953,7 +953,6 @@
     <string name="updateBuild">614</string>
 
     <!-- START of Pollgram text -->
-
     <string name="howManyMemberVote">%1$d members on %2$d have voted yet</string>
     <string name="groupDecision">Group decisions</string>
     <string name="decisionsCount">%1$d open decision, %2$d closed decisions</string>
@@ -969,9 +968,59 @@
     <string name="no_vote_desc">\?</string>
     <string name="noOptionPresent">There are no option\n for this decision</string>
     <string name="remindToUserSent">Remind sent to %1$s</string>
+    <string name="closeDecision">Close Decision</string>
+    <string name="reopenDecision">Reopen decision</string>
+    <string name="deleteDecision">Delete decision</string>
+    <string name="decisionClosed">Decision closed</string>
+    <string name="decisionReopened">Decision reopened</string>
+    <string name="decisionDeleted">Decision deleted</string>
 
-    <string name="remindMessage">Hey %1$s can you please for decision:\n\"%2$s\"\nThank you :-)</string>
-    <!-- END of Pollgram text -->
 
+    <!-- START of POLLGRAM transaction messages -->
+    <string name="downloadPollgramFromMarket">Install Pollgram at </string>
+    <string name="yes">yes</string>
+    <string name="no">no</string>
+
+    <string name="tmsg_RemindToVoteP1">Hey</string>
+    <!-- between P1 and P2 goes the username -->
+    <string name="tmsg_RemindToVoteP2">can you please for decision\n</string>
+    <!-- between P2 and P3 goes the decision title -->
+    <string name="tmsg_RemindToVoteP3">\nThank you</string>
+
+    <string name="tmsg_NewDecisionMsgPrefix">I just create a new decision</string>
+    <!-- between MsgPrefix and OptionsPrefix goes the decision title, and long description -->
+    <string name="tmsg_NewDecisionOptionsPrefix">Available options are:</string>
+    <!-- after OptionsPrefix goes options -->
+
+    <string name="tmsg_Vote">I just vote for decision</string>
+    <!-- after tmsg_Vote goes the decision title -->
+
+    <string name="tmsg_CloseDecisionP1">Decision</string>
+    <!-- between Prefix and Suffix goes the decision title -->
+    <string name="tmsg_CloseDecisionP2">, is now closed.\nThe option that receive more vote is</string>
+    <!--after P2 goes the winning option title -->
+    <string name="tmsg_CloseDecisionP3"> with </string>
+    <string name="tmsg_CloseDecisionP4"> votes.</string>
+
+    <string name="tmsg_ReopenDecisionPrefix">Decision</string>
+    <!-- between Prefix and Suffix goes the decision title -->
+    <string name="tmsg_ReopenDecisionSuffix">has been reopened. So you can still vote for options.</string>
+
+    <string name="tmsg_DeleteDecisionPrefix">Decision</string>
+    <!-- between Prefix and Suffix goes the decision title -->
+    <string name="tmsg_DeleteDecisionSuffix">has been permanently removed.</string>
+
+    <!-- END of POLLGRAM transaction messages -->
+
+    <!-- START MessageType descriptions -->
+    <string name="MessageType_REMIND_TO_VOTE">Vote remind</string>
+    <string name="MessageType_NEW_DECISION">New decision</string>
+    <string name="MessageType_VOTE">Vote</string>
+    <string name="MessageType_CLOSE_DECISION">Close decision</string>
+    <string name="MessageType_REOPEN_DECISION">Reopen decision</string>
+    <string name="MessageType_DELETE_DECISION">Delete decision</string>
+    <!-- END MessageType descriptions -->
+
+    <!-- END of Pollgram text -->
 
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
new file mode 100644
index 000000000..661437531
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -0,0 +1,108 @@
+package org.pollgram.decision.service;
+
+import android.content.Context;
+
+import junit.framework.Assert;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import org.pollgram.decision.data.Decision;
+import org.pollgram.decision.data.Option;
+import org.pollgram.decision.data.Vote;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.tgnet.TLRPC;
+
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by davide on 21/11/15.
+ */
+@RunWith(MockitoJUnitRunner.class)
+public class MessagesManagerTest {
+
+    @Mock
+    Context mMockContext;
+
+    private PollgramDAOTestImpl dao;
+    private PollgramMessagesManager messageManager;
+    private PollgramServiceImpl service;
+    private Map<Long, String> receivedId2LastMessages = new HashMap<>();
+    private TLRPC.Chat chat;
+    private TLRPC.User user;
+
+    @Before
+    public void setUp(){
+        ApplicationLoader.applicationContext = mMockContext;
+
+        chat = new TLRPC.Chat();
+        chat.id =39379118;
+
+        user = new TLRPC.User();
+        user.id = 22;
+
+        this.dao = new PollgramDAOTestImpl(chat.id);
+        messageManager = new PollgramMessagesManagerImpl(dao);
+        this.service = new PollgramServiceImpl(dao,messageManager);
+    }
+
+    @Test
+    public void testMessageTypeDifferentEmoji(){
+        for (PollgramMessagesManager.MessageType mt1 : PollgramMessagesManager.MessageType.values()){
+            for (PollgramMessagesManager.MessageType mt2 : PollgramMessagesManager.MessageType.values()){
+                if (mt1.equals(mt2))
+                    Assert.assertTrue(mt1.getEmoji().equals(mt2.getEmoji()));
+                else
+                    Assert.assertFalse(mt1.getEmoji().equals(mt2.getEmoji()));
+            }
+        }
+    }
+
+    @Test
+    public void testMessageTypeGetEmoji(){
+        for (PollgramMessagesManager.MessageType mt1 : PollgramMessagesManager.MessageType.values()){
+            Assert.assertEquals(mt1, PollgramMessagesManager.MessageType.byEmoji(mt1.getEmoji()));
+        }
+    }
+
+    @Test
+    public void testSendVotes() throws ParseException {
+        Decision decision = dao.getDecisions(null).get(0);
+        List<Option> options = dao.getOptions(decision);
+        Collection<Vote> votes = new ArrayList<>();
+        Date voteDate = new Date();
+        for (int i=0; i< options.size() ; i++ ){
+            Vote v = new Vote( i % 2 == 0, voteDate, user.id, options.get(i).getId());
+            votes.add(v);
+        }
+        String message = messageManager.buildNotifyVoteMessage(decision, votes);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(type, PollgramMessagesManager.MessageType.VOTE);
+
+        Collection<Vote> parsedVotes = messageManager.getVotes(message, chat, voteDate, user.id);
+        Assert.assertEquals(parsedVotes,votes);
+
+        message = messageManager.reformatMessage(message);
+        parsedVotes = messageManager.getVotes(message, chat, voteDate, user.id);
+        Assert.assertEquals(parsedVotes,votes);
+    }
+
+    @Test
+    public void testSendRemind() throws ParseException {
+        Decision decision = dao.getDecisions(null).get(0);
+
+        String message = messageManager.buildRemindMessage("UserName String", decision);
+        PollgramMessagesManager.MessageType type = messageManager.getMessageType(message);
+        Assert.assertEquals(type, PollgramMessagesManager.MessageType.REMIND_TO_VOTE);
+    }
+
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
new file mode 100644
index 000000000..046708626
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -0,0 +1,7 @@
+package org.pollgram.decision.service;
+
+/**
+ * Created by davide on 21/11/15.
+ */
+public class PollgramDAOTestImpl {
+}
