diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 910597bbc..5c9a86a30 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -3,7 +3,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
+        classpath 'com.android.tools.build:gradle:1.1.3'
     }
 }
 apply plugin: 'com.android.application'
@@ -13,7 +13,7 @@ repositories {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:21.0.+'
+    compile 'com.android.support:support-v4:22.0.+'
     compile 'com.google.android.gms:play-services:3.2.+'
     compile 'net.hockeyapp.android:HockeySDK:3.5.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
@@ -21,8 +21,8 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion '21.1.2'
+    compileSdkVersion 22
+    buildToolsVersion '22.0.0'
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
@@ -81,8 +81,8 @@ android {
 
     defaultConfig {
         minSdkVersion 8
-        targetSdkVersion 21
-        versionCode 458
-        versionName "2.5.2"
+        targetSdkVersion 22
+        versionCode 468
+        versionName "2.6.0"
     }
 }
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientListener.java b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientListener.java
index 117cb1b83..a24913a13 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientListener.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientListener.java
@@ -22,17 +22,17 @@
 import java.nio.ByteBuffer;
 
 public interface PyroClientListener {
-    public void connectedClient(PyroClient client);
+    void connectedClient(PyroClient client);
 
-    public void unconnectableClient(PyroClient client, Exception cause);
+    void unconnectableClient(PyroClient client, Exception cause);
 
-    public void droppedClient(PyroClient client, IOException cause);
+    void droppedClient(PyroClient client, IOException cause);
 
-    public void disconnectedClient(PyroClient client);
+    void disconnectedClient(PyroClient client);
 
     //
 
-    public void receivedData(PyroClient client, ByteBuffer data);
+    void receivedData(PyroClient client, ByteBuffer data);
 
-    public void sentData(PyroClient client, int bytes);
+    void sentData(PyroClient client, int bytes);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
index 077df6425..fd82371a8 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
@@ -169,8 +169,6 @@ public static void showKeyboard(View view) {
         }
         InputMethodManager inputManager = (InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
         inputManager.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);
-
-        ((InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(view, 0);
     }
 
     public static boolean isKeyboardShowed(View view) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 6ecff83d1..fa79c264b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -29,8 +29,8 @@
 
 public class ImageReceiver implements NotificationCenter.NotificationCenterDelegate {
 
-    public static interface ImageReceiverDelegate {
-        public void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb);
+    public interface ImageReceiverDelegate {
+        void didSetImage(ImageReceiver imageReceiver, boolean set, boolean thumb);
     }
 
     private View parentView;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 0207db4ee..0fd27e2ad 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -87,12 +87,12 @@
 
     public static int[] readArgs = new int[3];
 
-    public static interface FileDownloadProgressListener {
-        public void onFailedDownload(String fileName);
-        public void onSuccessDownload(String fileName);
-        public void onProgressDownload(String fileName, float progress);
-        public void onProgressUpload(String fileName, float progress, boolean isEncrypted);
-        public int getObserverTag();
+    public interface FileDownloadProgressListener {
+        void onFailedDownload(String fileName);
+        void onSuccessDownload(String fileName);
+        void onProgressDownload(String fileName, float progress);
+        void onProgressUpload(String fileName, float progress, boolean isEncrypted);
+        int getObserverTag();
     }
 
     private class AudioBuffer {
@@ -234,6 +234,7 @@ public PhotoEntry(int bucketId, int imageId, long dateTaken, String path, int or
     private long recordStartTime;
     private long recordTimeCount;
     private long recordDialogId;
+    private MessageObject recordReplyingMessageObject;
     private DispatchQueue fileDecodingQueue;
     private DispatchQueue playerQueue;
     private ArrayList<AudioBuffer> usedPlayerBuffers = new ArrayList<>();
@@ -509,7 +510,7 @@ public void run() {
                                         lastProgress = progress;
                                         playingMessageObject.audioProgress = value;
                                         playingMessageObject.audioProgressSec = lastProgress / 1000;
-                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioProgressDidChanged, playingMessageObject.messageOwner.id, value);
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioProgressDidChanged, playingMessageObject.getId(), value);
                                     } catch (Exception e) {
                                         FileLog.e("tmessages", e);
                                     }
@@ -977,7 +978,7 @@ public void didReceivedNotification(int id, Object... args) {
         } else if (id == NotificationCenter.messagesDeleted) {
             if (playingMessageObject != null) {
                 ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
-                if (markAsDeletedMessages.contains(playingMessageObject.messageOwner.id)) {
+                if (markAsDeletedMessages.contains(playingMessageObject.getId())) {
                     clenupPlayer(false);
                 }
             }
@@ -1187,7 +1188,7 @@ private void clenupPlayer(boolean notify) {
             playingMessageObject.audioProgressSec = 0;
             playingMessageObject = null;
             if (notify) {
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidReset, lastFile.messageOwner.id);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidReset, lastFile.getId());
             }
         }
     }
@@ -1227,7 +1228,7 @@ public void run() {
     }
 
     public boolean seekToProgress(MessageObject messageObject, float progress) {
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.messageOwner.id != messageObject.messageOwner.id) {
+        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
             return false;
         }
         try {
@@ -1249,7 +1250,7 @@ public boolean playAudio(MessageObject messageObject) {
         if (messageObject == null) {
             return false;
         }
-        if ((audioTrackPlayer != null || audioPlayer != null) && playingMessageObject != null && messageObject.messageOwner.id == playingMessageObject.messageOwner.id) {
+        if ((audioTrackPlayer != null || audioPlayer != null) && playingMessageObject != null && messageObject.getId() == playingMessageObject.getId()) {
             if (isPaused) {
                 resumeAudio(messageObject);
             }
@@ -1412,7 +1413,7 @@ public void stopAudio() {
 
     public boolean pauseAudio(MessageObject messageObject) {
         stopProximitySensor();
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.messageOwner.id != messageObject.messageOwner.id) {
+        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
             return false;
         }
         try {
@@ -1432,7 +1433,7 @@ public boolean pauseAudio(MessageObject messageObject) {
 
     public boolean resumeAudio(MessageObject messageObject) {
         startProximitySensor();
-        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.messageOwner.id != messageObject.messageOwner.id) {
+        if (audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId()) {
             return false;
         }
         try {
@@ -1451,14 +1452,14 @@ public boolean resumeAudio(MessageObject messageObject) {
     }
 
     public boolean isPlayingAudio(MessageObject messageObject) {
-        return !(audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.messageOwner.id != messageObject.messageOwner.id);
+        return !(audioTrackPlayer == null && audioPlayer == null || messageObject == null || playingMessageObject == null || playingMessageObject != null && playingMessageObject.getId() != messageObject.getId());
     }
 
     public boolean isAudioPaused() {
         return isPaused;
     }
 
-    public void startRecording(final long dialog_id) {
+    public void startRecording(final long dialog_id, final MessageObject reply_to_msg) {
         clenupPlayer(true);
 
         try {
@@ -1505,6 +1506,7 @@ public void run() {
                     recordStartTime = System.currentTimeMillis();
                     recordTimeCount = 0;
                     recordDialogId = dialog_id;
+                    recordReplyingMessageObject = reply_to_msg;
                     fileBuffer.rewind();
 
                     audioRecorder.startRecording();
@@ -1557,11 +1559,11 @@ public void run() {
                             long duration = recordTimeCount;
                             audioToSend.duration = (int) (duration / 1000);
                             if (duration > 700) {
-                                SendMessagesHelper.getInstance().sendMessage(audioToSend, recordingAudioFileToSend.getAbsolutePath(), recordDialogId);
+                                SendMessagesHelper.getInstance().sendMessage(audioToSend, recordingAudioFileToSend.getAbsolutePath(), recordDialogId, recordReplyingMessageObject);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidSent);
                             } else {
                                 recordingAudioFileToSend.delete();
                             }
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.audioDidSent);
                         }
                     });
                 }
@@ -1739,7 +1741,7 @@ public GifDrawable getGifDrawable(ChatMediaCell cell, boolean create) {
             return null;
         }
 
-        if (currentGifDrawable != null && currentGifMessageObject != null && messageObject.messageOwner.id == currentGifMessageObject.messageOwner.id) {
+        if (currentGifDrawable != null && currentGifMessageObject != null && messageObject.getId() == currentGifMessageObject.getId()) {
             currentMediaCell = cell;
             currentGifDrawable.parentView = new WeakReference<View>(cell);
             return currentGifDrawable;
@@ -1788,7 +1790,7 @@ public void clearGifDrawable(ChatMediaCell cell) {
             return;
         }
 
-        if (currentGifMessageObject != null && messageObject.messageOwner.id == currentGifMessageObject.messageOwner.id) {
+        if (currentGifMessageObject != null && messageObject.getId() == currentGifMessageObject.getId()) {
             if (currentGifDrawable != null) {
                 currentGifDrawable.stop();
                 currentGifDrawable.recycle();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
index e40f3b068..d71130fbd 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessageObject.java
@@ -33,6 +33,8 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public class MessageObject {
 
@@ -42,6 +44,7 @@
 
     public TLRPC.Message messageOwner;
     public CharSequence messageText;
+    public MessageObject replyMessageObject;
     public int type;
     public int contentType;
     public String dateKey;
@@ -79,6 +82,10 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
 
         messageOwner = message;
 
+        if (message.replyMessage != null) {
+            replyMessageObject = new MessageObject(message.replyMessage, users, false);
+        }
+
         if (message instanceof TLRPC.TL_messageService) {
             if (message.action != null) {
                 TLRPC.User fromUser = null;
@@ -282,9 +289,19 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
                 messageText = LocaleController.getString("UnsuppotedMedia", R.string.UnsuppotedMedia);
             } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
                 if (isSticker()) {
-                    messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
+                    String sch = getStrickerChar();
+                    if (sch != null && sch.length() > 0) {
+                        messageText = String.format("%s %s", sch, LocaleController.getString("AttachSticker", R.string.AttachSticker));
+                    } else {
+                        messageText = LocaleController.getString("AttachSticker", R.string.AttachSticker);
+                    }
                 } else {
-                    messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                    String name = FileLoader.getDocumentFileName(message.media.document);
+                    if (name != null && name.length() > 0) {
+                        messageText = name;
+                    } else {
+                        messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                    }
                 }
             } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
                 messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
@@ -325,7 +342,7 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
         }
         
 
-        if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded) {
+        if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded_old2) {
             if (message.media == null || message.media instanceof TLRPC.TL_messageMediaEmpty) {
                 contentType = type = 0;
             } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaPhoto) {
@@ -521,6 +538,9 @@ private boolean containsUrls(CharSequence message) {
             } else if (!(c != ' ' && digitsInRow > 0)) {
                 digitsInRow = 0;
             }
+            if ((c == '@' || c == '#') && i == 0 || i != 0 && (message.charAt(i - 1) == ' ' || message.charAt(i - 1) == '\n')) {
+                return true;
+            }
             if (c == ':') {
                 if (schemeSequence == 0) {
                     schemeSequence = 1;
@@ -565,6 +585,22 @@ private void generateLayout() {
             } else {
                 Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS);
             }
+
+            try {
+                Pattern pattern = Pattern.compile("(^|\\s)@[a-zA-Z\\d_]{5,32}|(^|\\s)#[\\w@\\.]+");
+                Matcher matcher = pattern.matcher(messageText);
+                while (matcher.find()) {
+                    int start = matcher.start();
+                    int end = matcher.end();
+                    if (messageText.charAt(start) != '@' && messageText.charAt(start) != '#') {
+                        start++;
+                    }
+                    URLSpanNoUnderline url = new URLSpanNoUnderline(messageText.subSequence(start, end).toString());
+                    ((Spannable) messageText).setSpan(url, start, end, 0);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
         }
 
         int maxWidth;
@@ -737,6 +773,10 @@ public void setIsRead() {
         messageOwner.flags &= ~TLRPC.MESSAGE_FLAG_UNREAD;
     }
 
+    public int getId() {
+        return messageOwner.id;
+    }
+
     public boolean isSecretPhoto() {
         return messageOwner instanceof TLRPC.TL_message_secret && messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60;
     }
@@ -825,7 +865,121 @@ public static boolean isStickerMessage(TLRPC.Message message) {
         return false;
     }
 
+    public String getStrickerChar() {
+        if (messageOwner.media != null && messageOwner.media.document != null) {
+            for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
+                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
+                    return attribute.alt;
+                }
+            }
+        }
+        return null;
+    }
+
+    public int getApproximateHeight() {
+        if (type == 0) {
+            return textHeight;
+        } else if (contentType == 2) {
+            return AndroidUtilities.dp(68);
+        } else if (contentType == 3) {
+            return AndroidUtilities.dp(71);
+        } else if (type == 9) {
+            return AndroidUtilities.dp(100);
+        } else if (type == 4) {
+            return AndroidUtilities.dp(114);
+        } else if (type == 13) {
+            float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
+            float maxWidth;
+            if (AndroidUtilities.isTablet()) {
+                maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
+            } else {
+                maxWidth = AndroidUtilities.displaySize.x * 0.5f;
+            }
+            int photoHeight = 0;
+            int photoWidth = 0;
+            for (TLRPC.DocumentAttribute attribute : messageOwner.media.document.attributes) {
+                if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
+                    photoWidth = attribute.w;
+                    photoHeight = attribute.h;
+                    break;
+                }
+            }
+            if (photoWidth == 0) {
+                photoHeight = (int) maxHeight;
+                photoWidth = photoHeight + AndroidUtilities.dp(100);
+            }
+            if (photoHeight > maxHeight) {
+                photoWidth *= maxHeight / photoHeight;
+                photoHeight = (int)maxHeight;
+            }
+            if (photoWidth > maxWidth) {
+                photoHeight *= maxWidth / photoWidth;
+            }
+            return photoHeight + AndroidUtilities.dp(14);
+        } else {
+            int photoHeight = 0;
+            int photoWidth = 0;
+
+            if (AndroidUtilities.isTablet()) {
+                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+            } else {
+                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+            }
+            photoHeight = photoWidth + AndroidUtilities.dp(100);
+            if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                photoWidth = AndroidUtilities.getPhotoSize();
+            }
+            if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                photoHeight = AndroidUtilities.getPhotoSize();
+            }
+            TLRPC.PhotoSize currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(photoThumbs, AndroidUtilities.getPhotoSize());
+
+            if (currentPhotoObject != null) {
+                float scale = (float) currentPhotoObject.w / (float) photoWidth;
+                int w = (int) (currentPhotoObject.w / scale);
+                int h = (int) (currentPhotoObject.h / scale);
+                if (w == 0) {
+                    w = AndroidUtilities.dp(100);
+                }
+                if (h == 0) {
+                    h = AndroidUtilities.dp(100);
+                }
+                if (h > photoHeight) {
+                    float scale2 = h;
+                    h = photoHeight;
+                    scale2 /= h;
+                    w = (int) (w / scale2);
+                } else if (h < AndroidUtilities.dp(120)) {
+                    h = AndroidUtilities.dp(120);
+                    float hScale = (float) currentPhotoObject.h / h;
+                    if (currentPhotoObject.w / hScale < photoWidth) {
+                        w = (int) (currentPhotoObject.w / hScale);
+                    }
+                }
+                if (isSecretPhoto()) {
+                    if (AndroidUtilities.isTablet()) {
+                        w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
+                    } else {
+                        w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+                    }
+                }
+
+                photoWidth = w;
+                photoHeight = h;
+            }
+            return photoHeight + AndroidUtilities.dp(14);
+        }
+    }
+
     public boolean isSticker() {
         return isStickerMessage(messageOwner);
     }
+
+    public boolean isForwarded() {
+        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_FWD) != 0;
+    }
+
+    public boolean isReply() {
+        return !(replyMessageObject != null && replyMessageObject.messageOwner instanceof TLRPC.TL_messageEmpty) && messageOwner.reply_to_msg_id != 0 && (messageOwner.flags & TLRPC.MESSAGE_FLAG_REPLY) != 0;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
index a7c97325a..e58779679 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
@@ -44,6 +44,7 @@
     private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
     private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
     private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
+    private ConcurrentHashMap<String, TLRPC.User> usersByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
 
     public ArrayList<TLRPC.TL_dialog> dialogs = new ArrayList<>();
     public ArrayList<TLRPC.TL_dialog> dialogsServerOnly = new ArrayList<>();
@@ -58,8 +59,12 @@
     public boolean loadingBlockedUsers = false;
     public ArrayList<Integer> blockedUsers = new ArrayList<>();
 
-    private ArrayList<TLRPC.Updates> updatesQueue = new ArrayList<>();
-    private long updatesStartWaitTime = 0;
+    private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
+    private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
+    private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
+    private long updatesStartWaitTimeSeq = 0;
+    private long updatesStartWaitTimePts = 0;
+    private long updatesStartWaitTimeQts = 0;
     private ArrayList<Integer> loadingFullUsers = new ArrayList<>();
     private ArrayList<Integer> loadedFullUsers = new ArrayList<>();
     private ArrayList<Integer> loadingFullChats = new ArrayList<>();
@@ -94,7 +99,11 @@
     public int groupBigSize;
     private ArrayList<TLRPC.TL_disabledFeature> disabledFeatures = new ArrayList<>();
 
-    private class UserActionUpdates extends TLRPC.Updates {
+    private class UserActionUpdatesSeq extends TLRPC.Updates {
+
+    }
+
+    private class UserActionUpdatesPts extends TLRPC.Updates {
 
     }
 
@@ -211,7 +220,7 @@ public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
                 if (fragment.getParentActivity() != null) {
                     AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getParentActivity());
                     builder.setTitle("Oops!");
-                    builder.setPositiveButton(R.string.OK, null);
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                     builder.setMessage(disabledFeature.description);
                     fragment.showAlertDialog(builder);
                 }
@@ -367,6 +376,7 @@ public void cleanUp() {
         dialogs.clear();
         dialogsServerOnly.clear();
         users.clear();
+        usersByUsernames.clear();
         chats.clear();
         dialogMessage.clear();
         printingUsers.clear();
@@ -374,7 +384,9 @@ public void cleanUp() {
         onlinePrivacy.clear();
         totalDialogsCount = 0;
         lastPrintingStringCount = 0;
-        updatesQueue.clear();
+        updatesQueueSeq.clear();
+        updatesQueuePts.clear();
+        updatesQueueQts.clear();
         blockedUsers.clear();
         sendingTypings.clear();
         loadingFullUsers.clear();
@@ -383,7 +395,9 @@ public void cleanUp() {
         loadingFullChats.clear();
         loadedFullChats.clear();
 
-        updatesStartWaitTime = 0;
+        updatesStartWaitTimeSeq = 0;
+        updatesStartWaitTimePts = 0;
+        updatesStartWaitTimeQts = 0;
         currentDeletingTaskTime = 0;
         currentDeletingTaskMids = null;
         gettingNewDeleteTask = false;
@@ -413,6 +427,14 @@ public void cleanUp() {
         return users.get(id);
     }
 
+    public TLRPC.User getUser(String username) {
+        return usersByUsernames.get(username);
+    }
+
+    public ConcurrentHashMap<Integer, TLRPC.User> getUsers() {
+        return users;
+    }
+
     public TLRPC.Chat getChat(Integer id) {
         return chats.get(id);
     }
@@ -448,6 +470,12 @@ public boolean putUser(TLRPC.User user, boolean fromCache) {
         }
         fromCache = fromCache && user.id / 1000 != 333 && user.id != 777000;
         TLRPC.User oldUser = users.get(user.id);
+        if (oldUser != null && oldUser.username != null && oldUser.username.length() > 0) {
+            usersByUsernames.remove(oldUser.username);
+        }
+        if (user.username != null && user.username.length() > 0) {
+            usersByUsernames.put(user.username, user);
+        }
         if (!fromCache) {
             users.put(user.id, user);
             if (user.id == UserConfig.getClientUserId()) {
@@ -658,28 +686,42 @@ public void run() {
         });
     }
 
-    protected void processNewDifferenceParams(int seq, int pts, int date) {
-        if (MessagesStorage.lastSeqValue + 1 == seq) {
-            if (seq != -1) {
-                MessagesStorage.lastSeqValue = seq;
-            }
-            if (date != -1) {
-                MessagesStorage.lastDateValue = date;
-            }
-            if (pts != -1) {
+    protected void processNewDifferenceParams(int seq, int pts, int date, int pts_count) {
+        if (pts != -1) {
+            if (MessagesStorage.lastPtsValue + pts_count == pts) {
                 MessagesStorage.lastPtsValue = pts;
+                MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+            } else if (MessagesStorage.lastPtsValue == pts) {
+                if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
+                    if (updatesStartWaitTimePts == 0) {
+                        updatesStartWaitTimePts = System.currentTimeMillis();
+                    }
+                    UserActionUpdatesPts updates = new UserActionUpdatesPts();
+                    updates.seq = seq;
+                    updatesQueuePts.add(updates);
+                } else {
+                    getDifference();
+                }
             }
-            MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
-        } else if (MessagesStorage.lastSeqValue != seq) {
-            if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                if (updatesStartWaitTime == 0) {
-                    updatesStartWaitTime = System.currentTimeMillis();
+        }
+        if (seq != -1) {
+            if (MessagesStorage.lastSeqValue + 1 == seq) {
+                MessagesStorage.lastSeqValue = seq;
+                if (date != -1) {
+                    MessagesStorage.lastDateValue = date;
+                }
+                MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
+            } else if (MessagesStorage.lastSeqValue != seq) {
+                if (gettingDifference || updatesStartWaitTimeSeq == 0 || updatesStartWaitTimeSeq != 0 && updatesStartWaitTimeSeq + 1500 > System.currentTimeMillis()) {
+                    if (updatesStartWaitTimeSeq == 0) {
+                        updatesStartWaitTimeSeq = System.currentTimeMillis();
+                    }
+                    UserActionUpdatesSeq updates = new UserActionUpdatesSeq();
+                    updates.seq = seq;
+                    updatesQueueSeq.add(updates);
+                } else {
+                    getDifference();
                 }
-                UserActionUpdates updates = new UserActionUpdates();
-                updates.seq = seq;
-                updatesQueue.add(updates);
-            } else {
-                getDifference();
             }
         }
     }
@@ -825,7 +867,7 @@ public void unblockUser(int user_id) {
         if (user == null) {
             return;
         }
-        blockedUsers.remove((Integer)user.id);
+        blockedUsers.remove((Integer) user.id);
         req.id = MessagesController.getInputUser(user);
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.blockedUsersDidLoaded);
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
@@ -924,7 +966,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         ArrayList<TLRPC.User> users = new ArrayList<>();
                         users.add(user);
                         MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
-                        user.photo = (TLRPC.UserProfilePhoto)response;
+                        user.photo = (TLRPC.UserProfilePhoto) response;
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
@@ -1004,7 +1046,10 @@ public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms,
         ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
             @Override
             public void run(TLObject response, TLRPC.TL_error error) {
-
+                if (error == null) {
+                    TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
+                    processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
+                }
             }
         });
     }
@@ -1075,7 +1120,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         if (res.offset > 0) {
                             deleteDialog(did, res.offset, onlyHistory);
                         }
-                        processNewDifferenceParams(res.seq, res.pts, -1);
+                        processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
                     }
                 }
             });
@@ -1161,9 +1206,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                 });
             }
 
-            if (updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 < currentTime) {
-                FileLog.e("tmessages", "UPDATES WAIT TIMEOUT - CHECK QUEUE");
-                processUpdatesQueue(0);
+            for (int a = 0; a < 3; a++) {
+                if (getUpdatesStartTime(a) != 0 && getUpdatesStartTime(a) + 1500 < currentTime) {
+                    FileLog.e("tmessages", a + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
+                    processUpdatesQueue(a, 0);
+                }
             }
         }
         if (!onlinePrivacy.isEmpty()) {
@@ -1389,8 +1436,8 @@ public void processLoadedMessages(final TLRPC.messages_Messages messagesRes, fin
         Utilities.stageQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
-                int lower_id = (int)dialog_id;
-                int high_id = (int)(dialog_id >> 32);
+                int lower_id = (int) dialog_id;
+                int high_id = (int) (dialog_id >> 32);
                 if (!isCache) {
                     ImageLoader.saveMessagesThumbs(messagesRes.messages);
                 }
@@ -1562,7 +1609,7 @@ public void run() {
                                     if (oldMsg != null && oldMsg.deleted || value.top_message > currentDialog.top_message) {
                                         dialogs_dict.put(key, value);
                                         if (oldMsg != null) {
-                                            dialogMessage.remove(oldMsg.messageOwner.id);
+                                            dialogMessage.remove(oldMsg.getId());
                                         }
                                         dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
                                     }
@@ -1570,7 +1617,7 @@ public void run() {
                                     MessageObject newMsg = new_dialogMessage.get(value.top_message);
                                     if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
                                         dialogs_dict.put(key, value);
-                                        dialogMessage.remove(oldMsg.messageOwner.id);
+                                        dialogMessage.remove(oldMsg.getId());
                                         dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
                                     }
                                 }
@@ -1593,8 +1640,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             }
                         });
                         for (TLRPC.TL_dialog d : dialogs) {
-                            int high_id = (int)(d.id >> 32);
-                            if ((int)d.id != 0 && high_id != 1) {
+                            int high_id = (int) (d.id >> 32);
+                            if ((int) d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
                             }
                         }
@@ -1602,7 +1649,7 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                         NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
                     }
                 });
-             }
+            }
         });
     }
 
@@ -1636,7 +1683,7 @@ public void run() {
                 }
 
                 if (dialogsRes instanceof TLRPC.TL_messages_dialogsSlice) {
-                    TLRPC.TL_messages_dialogsSlice slice = (TLRPC.TL_messages_dialogsSlice)dialogsRes;
+                    TLRPC.TL_messages_dialogsSlice slice = (TLRPC.TL_messages_dialogsSlice) dialogsRes;
                     new_totalDialogsCount = slice.count;
                 } else {
                     new_totalDialogsCount = dialogsRes.dialogs.size();
@@ -1698,7 +1745,7 @@ public void run() {
                                 if (oldMsg == null || currentDialog.top_message > 0) {
                                     if (oldMsg != null && oldMsg.deleted || value.top_message > currentDialog.top_message) {
                                         if (oldMsg != null) {
-                                            dialogMessage.remove(oldMsg.messageOwner.id);
+                                            dialogMessage.remove(oldMsg.getId());
                                         }
                                         dialogs_dict.put(key, value);
                                         dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
@@ -1706,7 +1753,7 @@ public void run() {
                                 } else {
                                     MessageObject newMsg = new_dialogMessage.get(value.top_message);
                                     if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
-                                        dialogMessage.remove(oldMsg.messageOwner.id);
+                                        dialogMessage.remove(oldMsg.getId());
                                         dialogs_dict.put(key, value);
                                         dialogMessage.put(value.top_message, new_dialogMessage.get(value.top_message));
                                     }
@@ -1730,8 +1777,8 @@ public int compare(TLRPC.TL_dialog tl_dialog, TLRPC.TL_dialog tl_dialog2) {
                             }
                         });
                         for (TLRPC.TL_dialog d : dialogs) {
-                            int high_id = (int)(d.id >> 32);
-                            if ((int)d.id != 0 && high_id != 1) {
+                            int high_id = (int) (d.id >> 32);
+                            if ((int) d.id != 0 && high_id != 1) {
                                 dialogsServerOnly.add(d);
                             }
                         }
@@ -1792,7 +1839,6 @@ public void markDialogAsRead(final long dialog_id, final int max_id, final int m
             }
             req.max_id = max_positive_id;
             req.offset = offset;
-            req.read_contents = true;
             if (offset == 0) {
                 MessagesStorage.getInstance().processPendingRead(dialog_id, max_positive_id, max_date, false);
                 MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
@@ -1832,7 +1878,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             if (res.offset > 0) {
                                 markDialogAsRead(dialog_id, 0, max_positive_id, res.offset, max_date, was, popup);
                             }
-                            processNewDifferenceParams(res.seq, res.pts, -1);
+                            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
                         }
                     }
                 });
@@ -1982,7 +2028,12 @@ public void run() {
                     final ArrayList<TLRPC.Message> messages = new ArrayList<>();
                     messages.add(res.message);
                     MessagesStorage.getInstance().putMessages(messages, true, true, false, 0);
-                    processNewDifferenceParams(res.seq, res.pts, -1);
+
+                    if (res instanceof TLRPC.TL_messages_statedMessage) {
+                        MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                    } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                    }
                 }
             });
         }
@@ -2041,7 +2092,12 @@ public void run() {
                     final ArrayList<TLRPC.Message> messages = new ArrayList<>();
                     messages.add(res.message);
                     MessagesStorage.getInstance().putMessages(messages, true, true, false, 0);
-                    processNewDifferenceParams(res.seq, res.pts, -1);
+
+                    if (res instanceof TLRPC.TL_messages_statedMessage) {
+                        MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                    } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                    }
                 }
             });
         } else {
@@ -2130,7 +2186,12 @@ public void run() {
                         messages.add(res.message);
                         MessagesStorage.getInstance().putMessages(messages, true, true, false, 0);
                     }
-                    processNewDifferenceParams(res.seq, res.pts, -1);
+
+                    if (res instanceof TLRPC.TL_messages_statedMessage) {
+                        MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                    } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                    }
                 }
             });
         } else {
@@ -2192,7 +2253,12 @@ public void run() {
                     final ArrayList<TLRPC.Message> messages = new ArrayList<>();
                     messages.add(res.message);
                     MessagesStorage.getInstance().putMessages(messages, true, true, false, 0);
-                    processNewDifferenceParams(res.seq, res.pts, -1);
+
+                    if (res instanceof TLRPC.TL_messages_statedMessage) {
+                        MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                    } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                    }
                 }
             });
         } else {
@@ -2244,7 +2310,12 @@ public void run() {
                 });
 
                 MessagesStorage.getInstance().putMessages(messages, true, true, false, 0);
-                processNewDifferenceParams(res.seq, res.pts, -1);
+
+                if (res instanceof TLRPC.TL_messages_statedMessage) {
+                    MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                    MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                }
             }
         });
     }
@@ -2356,7 +2427,9 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     MessagesStorage.lastPtsValue = res.pts;
                     MessagesStorage.lastSeqValue = res.seq;
                     MessagesStorage.lastQtsValue = res.qts;
-                    processUpdatesQueue(2);
+                    for (int a = 0; a < 3; a++) {
+                        processUpdatesQueue(a, 2);
+                    }
                     MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
                 } else {
                     if (error.code != 401) {
@@ -2375,8 +2448,61 @@ private int getUpdateSeq(TLRPC.Updates updates) {
         }
     }
 
-    private void processUpdatesQueue(int state) {
-        if (!updatesQueue.isEmpty()) {
+    private void setUpdatesStartTime(int type, long time) {
+        if (type == 0) {
+            updatesStartWaitTimeSeq = time;
+        } else if (type == 1) {
+            updatesStartWaitTimePts = time;
+        } else if (type == 2) {
+            updatesStartWaitTimeQts = time;
+        }
+    }
+
+    public long getUpdatesStartTime(int type) {
+        if (type == 0) {
+            return updatesStartWaitTimeSeq;
+        } else if (type == 1) {
+            return updatesStartWaitTimePts;
+        } else if (type == 2) {
+            return updatesStartWaitTimeQts;
+        }
+        return 0;
+    }
+
+    private int isValidUpdate(TLRPC.Updates updates, int type) {
+        if (type == 0) {
+            int seq = getUpdateSeq(updates);
+            if (MessagesStorage.lastSeqValue + 1 == seq || MessagesStorage.lastSeqValue == seq) {
+                return 0;
+            } else if (MessagesStorage.lastSeqValue < seq) {
+                return 1;
+            } else {
+                return 2;
+            }
+        } else if (type == 1) {
+            if (updates.pts <= MessagesStorage.lastPtsValue) {
+                return 2;
+            }  else if (MessagesStorage.lastPtsValue + updates.pts_count == updates.pts) {
+                return 0;
+            } else {
+                return 1;
+            }
+        } else if (type == 2) {
+            if (updates.qts <= MessagesStorage.lastQtsValue) {
+                return 2;
+            }  else if (MessagesStorage.lastQtsValue + 1 == updates.qts) {
+                return 0;
+            } else {
+                return 1;
+            }
+        }
+        return 0;
+    }
+
+    private boolean processUpdatesQueue(int type, int state) {
+        ArrayList<TLRPC.Updates> updatesQueue = null;
+        if (type == 0) {
+            updatesQueue = updatesQueueSeq;
             Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
                 @Override
                 public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
@@ -2390,32 +2516,66 @@ public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
                     return -1;
                 }
             });
+        } else if (type == 1) {
+            updatesQueue = updatesQueuePts;
+            Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
+                @Override
+                public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
+                    if (updates.pts == updates2.pts) {
+                        return 0;
+                    } else if (updates.pts > updates2.pts) {
+                        return 1;
+                    }
+                    return -1;
+                }
+            });
+        } else if (type == 2) {
+            updatesQueue = updatesQueueQts;
+            Collections.sort(updatesQueue, new Comparator<TLRPC.Updates>() {
+                @Override
+                public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
+                    if (updates.qts == updates2.qts) {
+                        return 0;
+                    } else if (updates.qts > updates2.qts) {
+                        return 1;
+                    }
+                    return -1;
+                }
+            });
+        }
+        if (!updatesQueue.isEmpty()) {
             boolean anyProceed = false;
             if (state == 2) {
                 TLRPC.Updates updates = updatesQueue.get(0);
-                MessagesStorage.lastSeqValue = getUpdateSeq(updates);
+                if (type == 0) {
+                    MessagesStorage.lastSeqValue = getUpdateSeq(updates);
+                } else if (type == 1) {
+                    MessagesStorage.lastPtsValue = updates.pts;
+                } else if (type == 2) {
+                    MessagesStorage.lastQtsValue = updates.qts;
+                }
             }
             for (int a = 0; a < updatesQueue.size(); a++) {
                 TLRPC.Updates updates = updatesQueue.get(a);
-                int seq = getUpdateSeq(updates);
-                if (MessagesStorage.lastSeqValue + 1 == seq || MessagesStorage.lastSeqValue == seq) {
+                int updateState = isValidUpdate(updates, type);
+                if (updateState == 0) {
                     processUpdates(updates, true);
                     anyProceed = true;
                     updatesQueue.remove(a);
                     a--;
-                } else if (MessagesStorage.lastSeqValue < seq) {
-                    if (updatesStartWaitTime != 0 && (anyProceed || updatesStartWaitTime + 1500 > System.currentTimeMillis())) {
+                } else if (updateState == 1) {
+                    if (getUpdatesStartTime(type) != 0 && (anyProceed || getUpdatesStartTime(type) + 1500 > System.currentTimeMillis())) {
                         FileLog.e("tmessages", "HOLE IN UPDATES QUEUE - will wait more time");
                         if (anyProceed) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+                            setUpdatesStartTime(type, System.currentTimeMillis());
                         }
-                        return;
+                        return false;
                     } else {
                         FileLog.e("tmessages", "HOLE IN UPDATES QUEUE - getDifference");
-                        updatesStartWaitTime = 0;
+                        setUpdatesStartTime(type, 0);
                         updatesQueue.clear();
                         getDifference();
-                        return;
+                        return false;
                     }
                 } else {
                     updatesQueue.remove(a);
@@ -2424,29 +2584,9 @@ public int compare(TLRPC.Updates updates, TLRPC.Updates updates2) {
             }
             updatesQueue.clear();
             FileLog.e("tmessages", "UPDATES QUEUE PROCEED - OK");
-            updatesStartWaitTime = 0;
-            if (state == 1) {
-                final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                    }
-                });
-            }
-        } else {
-            if (state == 1) {
-                final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
-                    }
-                });
-            } else {
-                updatesStartWaitTime = 0;
-            }
         }
+        setUpdatesStartTime(type, 0);
+        return true;
     }
 
     public void getDifference() {
@@ -2635,7 +2775,21 @@ public void run() {
                                         MessagesStorage.lastPtsValue = res.state.pts;
                                         MessagesStorage.lastQtsValue = res.state.qts;
                                         ConnectionsManager.getInstance().setConnectionState(0);
-                                        processUpdatesQueue(1);
+                                        boolean done = true;
+                                        for (int a = 0; a < 3; a++) {
+                                            if (!processUpdatesQueue(a, 1)) {
+                                                done = false;
+                                            }
+                                        }
+                                        if (done) {
+                                            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
+                                                }
+                                            });
+                                        }
                                     } else if (res instanceof TLRPC.TL_updates_differenceSlice) {
                                         MessagesStorage.lastDateValue = res.intermediate_state.date;
                                         MessagesStorage.lastPtsValue = res.intermediate_state.pts;
@@ -2646,7 +2800,21 @@ public void run() {
                                         MessagesStorage.lastSeqValue = res.seq;
                                         MessagesStorage.lastDateValue = res.date;
                                         ConnectionsManager.getInstance().setConnectionState(0);
-                                        processUpdatesQueue(1);
+                                        boolean done = true;
+                                        for (int a = 0; a < 3; a++) {
+                                            if (!processUpdatesQueue(a, 1)) {
+                                                done = false;
+                                            }
+                                        }
+                                        if (done) {
+                                            final int stateCopy = ConnectionsManager.getInstance().getConnectionState();
+                                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didUpdatedConnectionState, stateCopy);
+                                                }
+                                            });
+                                        }
                                     }
                                     MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
                                     FileLog.e("tmessages", "received difference with date = " + MessagesStorage.lastDateValue + " pts = " + MessagesStorage.lastPtsValue + " seq = " + MessagesStorage.lastSeqValue);
@@ -2673,54 +2841,99 @@ public void run() {
     public void processUpdates(final TLRPC.Updates updates, boolean fromQueue) {
         boolean needGetDiff = false;
         boolean needReceivedQueue = false;
-        boolean addedToQueue = false;
         boolean updateStatus = false;
         if (updates instanceof TLRPC.TL_updateShort) {
             ArrayList<TLRPC.Update> arr = new ArrayList<>();
             arr.add(updates.update);
             processUpdateArray(arr, null, null);
-        } else if (updates instanceof TLRPC.TL_updateShortChatMessage) {
-            TLRPC.User user = getUser(updates.from_id);
+        } else if (updates instanceof TLRPC.TL_updateShortChatMessage || updates instanceof TLRPC.TL_updateShortMessage) {
+            TLRPC.User user = getUser(updates.user_id);
+            TLRPC.User user2 = null;
+
+            boolean needFwdUser = false;
+            if (updates.fwd_from_id != 0) {
+                user2 = getUser(updates.fwd_from_id);
+                needFwdUser = true;
+            }
+
+            boolean missingData = false;
+            if (updates instanceof TLRPC.TL_updateShortMessage) {
+                missingData = user == null || needFwdUser && user2 == null;
+            } else {
+                missingData = getChat(updates.chat_id) == null || user == null || needFwdUser && user2 == null;
+            }
             if (user != null && user.status != null && user.status.expires <= 0) {
                 onlinePrivacy.put(user.id, ConnectionsManager.getInstance().getCurrentTime());
                 updateStatus = true;
             }
-            boolean missingData = getChat(updates.chat_id) == null || user == null;
+
             if (missingData) {
                 needGetDiff = true;
             } else {
-                if (MessagesStorage.lastSeqValue + 1 == updates.seq) {
+                if (MessagesStorage.lastPtsValue + updates.pts_count == updates.pts) {
                     TLRPC.TL_message message = new TLRPC.TL_message();
-                    message.from_id = updates.from_id;
                     message.id = updates.id;
-                    message.to_id = new TLRPC.TL_peerChat();
-                    message.to_id.chat_id = updates.chat_id;
+                    if (updates instanceof TLRPC.TL_updateShortMessage) {
+                        if ((updates.flags & TLRPC.MESSAGE_FLAG_OUT) != 0) {
+                            message.from_id = UserConfig.getClientUserId();
+                        } else {
+                            message.from_id = updates.user_id;
+                        }
+                        message.to_id = new TLRPC.TL_peerUser();
+                        message.to_id.user_id = updates.user_id;
+                        message.dialog_id = updates.user_id;
+                    } else {
+                        message.from_id = updates.user_id;
+                        message.to_id = new TLRPC.TL_peerChat();
+                        message.to_id.chat_id = updates.chat_id;
+                        message.dialog_id = -updates.chat_id;
+                    }
                     message.message = updates.message;
                     message.date = updates.date;
-                    message.flags = TLRPC.MESSAGE_FLAG_UNREAD;
+                    message.flags = updates.flags;
+                    message.fwd_from_id = updates.fwd_from_id;
+                    message.fwd_date = updates.fwd_date;
+                    message.reply_to_msg_id = updates.reply_to_msg_id;
                     message.media = new TLRPC.TL_messageMediaEmpty();
-                    MessagesStorage.lastSeqValue = updates.seq;
                     MessagesStorage.lastPtsValue = updates.pts;
                     final MessageObject obj = new MessageObject(message, null, true);
                     final ArrayList<MessageObject> objArr = new ArrayList<>();
                     objArr.add(obj);
                     ArrayList<TLRPC.Message> arr = new ArrayList<>();
                     arr.add(message);
-                    final boolean printUpdate = updatePrintingUsersWithNewMessages(-updates.chat_id, objArr);
-                    if (printUpdate) {
-                        updatePrintingStrings();
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (printUpdate) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
+                    if (updates instanceof TLRPC.TL_updateShortMessage) {
+                        final boolean printUpdate = (updates.flags & TLRPC.MESSAGE_FLAG_OUT) == 0 && updatePrintingUsersWithNewMessages(updates.user_id, objArr);
+                        if (printUpdate) {
+                            updatePrintingStrings();
+                        }
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                if (printUpdate) {
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
+                                }
+                                updateInterfaceWithMessages(updates.user_id, objArr);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
                             }
-
-                            updateInterfaceWithMessages(-updates.chat_id, objArr);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                        });
+                    } else {
+                        final boolean printUpdate = updatePrintingUsersWithNewMessages(-updates.chat_id, objArr);
+                        if (printUpdate) {
+                            updatePrintingStrings();
                         }
-                    });
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                if (printUpdate) {
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
+                                }
+
+                                updateInterfaceWithMessages(-updates.chat_id, objArr);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                            }
+                        });
+                    }
+
                     MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                         @Override
                         public void run() {
@@ -2735,148 +2948,101 @@ public void run() {
                         }
                     });
                     MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-                } else if (MessagesStorage.lastSeqValue != updates.seq) {
-                    FileLog.e("tmessages", "need get diff TL_updateShortChatMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+                } else if (MessagesStorage.lastPtsValue != updates.pts) {
+                    FileLog.e("tmessages", "need get diff short message, pts: " + MessagesStorage.lastPtsValue + " " + updates.pts + " count = " + updates.pts_count);
+                    if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
+                        if (updatesStartWaitTimePts == 0) {
+                            updatesStartWaitTimePts = System.currentTimeMillis();
                         }
-                        FileLog.e("tmessages", "add TL_updateShortChatMessage to queue");
-                        updatesQueue.add(updates);
-                        addedToQueue = true;
+                        FileLog.e("tmessages", "add short message to queue");
+                        updatesQueuePts.add(updates);
                     } else {
                         needGetDiff = true;
                     }
                 }
             }
-        } else if (updates instanceof TLRPC.TL_updateShortMessage) {
-            TLRPC.User user = getUser(updates.from_id);
-            if (user != null && user.status != null && user.status.expires <= 0) {
-                onlinePrivacy.put(user.id, ConnectionsManager.getInstance().getCurrentTime());
-                updateStatus = true;
-            }
-            boolean missingData = user == null;
-            if (missingData) {
-                needGetDiff = true;
-            } else {
-                if (MessagesStorage.lastSeqValue + 1 == updates.seq) {
-                    TLRPC.TL_message message = new TLRPC.TL_message();
-                    message.from_id = updates.from_id;
-                    message.id = updates.id;
-                    message.to_id = new TLRPC.TL_peerUser();
-                    message.to_id.user_id = updates.from_id;
-                    message.message = updates.message;
-                    message.date = updates.date;
-                    message.flags = TLRPC.MESSAGE_FLAG_UNREAD;
-                    message.media = new TLRPC.TL_messageMediaEmpty();
-                    MessagesStorage.lastSeqValue = updates.seq;
-                    MessagesStorage.lastPtsValue = updates.pts;
-                    MessagesStorage.lastDateValue = updates.date;
-                    final MessageObject obj = new MessageObject(message, null, true);
-                    final ArrayList<MessageObject> objArr = new ArrayList<>();
-                    objArr.add(obj);
-                    ArrayList<TLRPC.Message> arr = new ArrayList<>();
-                    arr.add(message);
-                    final boolean printUpdate = updatePrintingUsersWithNewMessages(updates.from_id, objArr);
-                    if (printUpdate) {
-                        updatePrintingStrings();
-                    }
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (printUpdate) {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, UPDATE_MASK_USER_PRINT);
-                            }
-                            updateInterfaceWithMessages(updates.from_id, objArr);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+        } else if (updates instanceof TLRPC.TL_updatesCombined || updates instanceof TLRPC.TL_updates) {
+            MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
+            int lastQtsValue = MessagesStorage.lastQtsValue;
+            for (int a = 0; a < updates.updates.size(); a++) {
+                TLRPC.Update update = updates.updates.get(a);
+                if (update instanceof TLRPC.TL_updateNewMessage || update instanceof TLRPC.TL_updateReadMessages || update instanceof TLRPC.TL_updateReadHistoryInbox ||
+                        update instanceof TLRPC.TL_updateReadHistoryOutbox || update instanceof TLRPC.TL_updateDeleteMessages) {
+                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
+                    updatesNew.updates.add(update);
+                    updatesNew.pts = update.pts;
+                    updatesNew.pts_count = update.pts_count;
+                    if (MessagesStorage.lastPtsValue + update.pts_count == update.pts) {
+                        if (!processUpdateArray(updatesNew.updates, updates.users, updates.chats)) {
+                            FileLog.e("tmessages", "need get diff inner TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
+                            needGetDiff = true;
+                        } else {
+                            MessagesStorage.lastPtsValue = update.pts;
                         }
-                    });
-                    MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                        @Override
-                        public void run() {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    if (!obj.isFromMe() && obj.isUnread()) {
-                                        NotificationsController.getInstance().processNewMessages(objArr, true);
-                                    }
-                                }
-                            });
+                    } else if (MessagesStorage.lastPtsValue != update.pts) {
+                        FileLog.e("tmessages", update + " need get diff, pts: " + MessagesStorage.lastPtsValue + " " + update.pts + " count = " + update.pts_count);
+                        if (gettingDifference || updatesStartWaitTimePts == 0 || updatesStartWaitTimePts != 0 && updatesStartWaitTimePts + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTimePts == 0) {
+                                updatesStartWaitTimePts = System.currentTimeMillis();
+                            }
+                            FileLog.e("tmessages", "add short message to queue");
+                            updatesQueuePts.add(updatesNew);
+                        } else {
+                            needGetDiff = true;
                         }
-                    });
-                    MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
-                } else if (MessagesStorage.lastSeqValue != updates.seq) {
-                    FileLog.e("tmessages", "need get diff TL_updateShortMessage, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                    if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                        if (updatesStartWaitTime == 0) {
-                            updatesStartWaitTime = System.currentTimeMillis();
+                    }
+                } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
+                    TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
+                    updatesNew.updates.add(update);
+                    updatesNew.qts = update.qts;
+                    if (MessagesStorage.lastQtsValue == 0 || MessagesStorage.lastQtsValue + 1 == update.qts) {
+                        processUpdateArray(updatesNew.updates, updates.users, updates.chats);
+                        MessagesStorage.lastQtsValue = update.qts;
+                        needReceivedQueue = true;
+                    } else if (MessagesStorage.lastPtsValue != update.qts) {
+                        FileLog.e("tmessages", update + " need get diff, qts: " + MessagesStorage.lastQtsValue + " " + update.qts);
+                        if (gettingDifference || updatesStartWaitTimeQts == 0 || updatesStartWaitTimeQts != 0 && updatesStartWaitTimeQts + 1500 > System.currentTimeMillis()) {
+                            if (updatesStartWaitTimeQts == 0) {
+                                updatesStartWaitTimeQts = System.currentTimeMillis();
+                            }
+                            FileLog.e("tmessages", "add short message to queue");
+                            updatesQueueQts.add(updatesNew);
+                        } else {
+                            needGetDiff = true;
                         }
-                        FileLog.e("tmessages", "add TL_updateShortMessage to queue");
-                        updatesQueue.add(updates);
-                        addedToQueue = true;
-                    } else {
-                        needGetDiff = true;
                     }
+                } else {
+                    continue;
                 }
+                updates.updates.remove(a);
+                a--;
             }
-        } else if (updates instanceof TLRPC.TL_updatesCombined) {
-            if (MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start) {
-                MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
-                int lastPtsValue = MessagesStorage.lastPtsValue;
-                int lastQtsValue = MessagesStorage.lastQtsValue;
-                if (!processUpdateArray(updates.updates, updates.users, updates.chats)) {
-                    MessagesStorage.lastPtsValue = lastPtsValue;
-                    MessagesStorage.lastQtsValue = lastQtsValue;
-                    FileLog.e("tmessages", "need get diff inner TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                    needGetDiff = true;
-                } else {
-                    MessagesStorage.lastDateValue = updates.date;
+
+            boolean processUpdate = false;
+            if (updates instanceof TLRPC.TL_updatesCombined) {
+                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq_start || MessagesStorage.lastSeqValue == updates.seq_start;
+            } else {
+                processUpdate = MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue;
+            }
+            if (processUpdate) {
+                processUpdateArray(updates.updates, updates.users, updates.chats);
+                MessagesStorage.lastDateValue = updates.date;
+                if (updates.seq != 0) {
                     MessagesStorage.lastSeqValue = updates.seq;
-                    if (MessagesStorage.lastQtsValue != lastQtsValue) {
-                        needReceivedQueue = true;
-                    }
                 }
             } else {
-                FileLog.e("tmessages", "need get diff TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq_start);
-                if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                    if (updatesStartWaitTime == 0) {
-                        updatesStartWaitTime = System.currentTimeMillis();
-                    }
-                    FileLog.e("tmessages", "add TL_updatesCombined to queue");
-                    updatesQueue.add(updates);
-                    addedToQueue = true;
+                if (updates instanceof TLRPC.TL_updatesCombined) {
+                    FileLog.e("tmessages", "need get diff TL_updatesCombined, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq_start);
                 } else {
-                    needGetDiff = true;
+                    FileLog.e("tmessages", "need get diff TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
                 }
-            }
-        } else if (updates instanceof TLRPC.TL_updates) {
-            if (MessagesStorage.lastSeqValue + 1 == updates.seq || updates.seq == 0 || updates.seq == MessagesStorage.lastSeqValue) {
-                MessagesStorage.getInstance().putUsersAndChats(updates.users, updates.chats, true, true);
-                int lastPtsValue = MessagesStorage.lastPtsValue;
-                int lastQtsValue = MessagesStorage.lastQtsValue;
-                if (!processUpdateArray(updates.updates, updates.users, updates.chats)) {
-                    needGetDiff = true;
-                    MessagesStorage.lastPtsValue = lastPtsValue;
-                    MessagesStorage.lastQtsValue = lastQtsValue;
-                    FileLog.e("tmessages", "need get diff inner TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                } else {
-                    MessagesStorage.lastDateValue = updates.date;
-                    if (updates.seq != 0) {
-                        MessagesStorage.lastSeqValue = updates.seq;
-                    }
-                    if (MessagesStorage.lastQtsValue != lastQtsValue) {
-                        needReceivedQueue = true;
+
+                if (gettingDifference || updatesStartWaitTimeSeq == 0 || updatesStartWaitTimeSeq != 0 && updatesStartWaitTimeSeq + 1500 > System.currentTimeMillis()) {
+                    if (updatesStartWaitTimeSeq == 0) {
+                        updatesStartWaitTimeSeq = System.currentTimeMillis();
                     }
-                }
-            } else {
-                FileLog.e("tmessages", "need get diff TL_updates, seq: " + MessagesStorage.lastSeqValue + " " + updates.seq);
-                if (gettingDifference || updatesStartWaitTime == 0 || updatesStartWaitTime != 0 && updatesStartWaitTime + 1500 > System.currentTimeMillis()) {
-                    if (updatesStartWaitTime == 0) {
-                        updatesStartWaitTime = System.currentTimeMillis();
-                    }
-                    FileLog.e("tmessages", "add TL_updates to queue");
-                    updatesQueue.add(updates);
-                    addedToQueue = true;
+                    FileLog.e("tmessages", "add TL_updates/Combined to queue");
+                    updatesQueueSeq.add(updates);
                 } else {
                     needGetDiff = true;
                 }
@@ -2884,14 +3050,30 @@ public void run() {
         } else if (updates instanceof TLRPC.TL_updatesTooLong) {
             FileLog.e("tmessages", "need get diff TL_updatesTooLong");
             needGetDiff = true;
-        } else if (updates instanceof UserActionUpdates) {
+        } else if (updates instanceof UserActionUpdatesSeq) {
             MessagesStorage.lastSeqValue = updates.seq;
+        } else if (updates instanceof UserActionUpdatesPts) {
+            MessagesStorage.lastPtsValue = updates.pts;
         }
         SecretChatHelper.getInstance().processPendingEncMessages();
-        if (needGetDiff && !fromQueue) {
-            getDifference();
-        } else if (!fromQueue && !updatesQueue.isEmpty()) {
-            processUpdatesQueue(0);
+        if (!fromQueue) {
+            if (needGetDiff) {
+                getDifference();
+            } else {
+                for (int a = 0; a < 3; a++) {
+                    ArrayList<TLRPC.Updates> updatesQueue = null;
+                    if (a == 0) {
+                        updatesQueue = updatesQueueSeq;
+                    } else if (a == 1) {
+                        updatesQueue = updatesQueuePts;
+                    } else if (a == 2) {
+                        updatesQueue = updatesQueueQts;
+                    }
+                    if (!updatesQueue.isEmpty()) {
+                        processUpdatesQueue(a, 0);
+                    }
+                }
+            }
         }
         if (needReceivedQueue) {
             TLRPC.TL_messages_receivedQueue req = new TLRPC.TL_messages_receivedQueue();
@@ -2914,29 +3096,6 @@ public void run() {
         MessagesStorage.getInstance().saveDiffParams(MessagesStorage.lastSeqValue, MessagesStorage.lastPtsValue, MessagesStorage.lastDateValue, MessagesStorage.lastQtsValue);
     }
 
-    private boolean isNotifySettingsMuted(TLRPC.PeerNotifySettings settings) {
-        return settings instanceof TLRPC.TL_peerNotifySettings && settings.mute_until > ConnectionsManager.getInstance().getCurrentTime();
-    }
-
-    public boolean isDialogMuted(long dialog_id) {
-        /*TLRPC.TL_dialog dialog = dialogs_dict.get(dialog_id);
-        if (dialog != null) {
-            return isNotifySettingsMuted(dialog.notify_settings);
-        } else {*/
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
-            if (mute_type == 2) {
-                return true;
-            } else if (mute_type == 3) {
-                int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
-                if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
-                    return true;
-                }
-            }
-        //}
-        return false;
-    }
-
     public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayList<TLRPC.User> usersArr, final ArrayList<TLRPC.Chat> chatsArr) {
         if (updates.isEmpty()) {
             return true;
@@ -2946,7 +3105,8 @@ public boolean processUpdateArray(ArrayList<TLRPC.Update> updates, final ArrayLi
         final HashMap<Long, ArrayList<MessageObject>> messages = new HashMap<>();
         final ArrayList<MessageObject> pushMessages = new ArrayList<>();
         final ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
-        final ArrayList<Integer> markAsReadMessages = new ArrayList<>();
+        final HashMap<Integer, Integer> markAsReadMessagesInbox = new HashMap<>();
+        final HashMap<Integer, Integer> markAsReadMessagesOutbox = new HashMap<>();
         final HashMap<Integer, Integer> markAsReadEncrypted = new HashMap<>();
         final ArrayList<Integer> deletedMessages = new ArrayList<>();
         boolean printChanged = false;
@@ -3026,18 +3186,27 @@ public void run() {
                     messages.put(uid, arr);
                 }
                 arr.add(obj);
-                MessagesStorage.lastPtsValue = update.pts;
                 if (!obj.isFromMe() && obj.isUnread()) {
                     pushMessages.add(obj);
                 }
             } else if (update instanceof TLRPC.TL_updateReadMessages) {
-                markAsReadMessages.addAll(update.messages);
-                MessagesStorage.lastPtsValue = update.pts;
+                //markAsReadMessages.addAll(update.messages); disabled for now
+            } else if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
+                TLRPC.Peer peer = ((TLRPC.TL_updateReadHistoryInbox) update).peer;
+                if (peer.chat_id != 0) {
+                    markAsReadMessagesInbox.put(-peer.chat_id, update.max_id);
+                } else {
+                    markAsReadMessagesInbox.put(peer.user_id, update.max_id);
+                }
+            } else if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
+                TLRPC.Peer peer = ((TLRPC.TL_updateReadHistoryOutbox) update).peer;
+                if (peer.chat_id != 0) {
+                    markAsReadMessagesOutbox.put(-peer.chat_id, update.max_id);
+                } else {
+                    markAsReadMessagesOutbox.put(peer.user_id, update.max_id);
+                }
             } else if (update instanceof TLRPC.TL_updateDeleteMessages) {
                 deletedMessages.addAll(update.messages);
-                MessagesStorage.lastPtsValue = update.pts;
-            } else if (update instanceof TLRPC.TL_updateRestoreMessages) {
-                MessagesStorage.lastPtsValue = update.pts;
             } else if (update instanceof TLRPC.TL_updateUserTyping || update instanceof TLRPC.TL_updateChatUserTyping) {
                 if (update.action instanceof TLRPC.TL_sendMessageTypingAction && update.user_id != UserConfig.getClientUserId()) {
                     long uid = -update.chat_id;
@@ -3106,7 +3275,7 @@ public void run() {
                     pushMessages.add(obj);
                 }
             } else if (update instanceof TLRPC.TL_updateContactLink) {
-                if (update.my_link instanceof TLRPC.TL_contacts_myLinkContact || update.my_link instanceof TLRPC.TL_contacts_myLinkRequested && update.my_link.contact) {
+                if (update.my_link instanceof TLRPC.TL_contactLinkContact) {
                     int idx = contactsIds.indexOf(-update.user_id);
                     if (idx != -1) {
                         contactsIds.remove(idx);
@@ -3151,8 +3320,7 @@ public void run() {
             } else if (update instanceof TLRPC.TL_updateNewGeoChatMessage) {
                 //DEPRECATED
             } else if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
-                MessagesStorage.lastQtsValue = update.qts;
-                ArrayList<TLRPC.Message> decryptedMessages = SecretChatHelper.getInstance().decryptMessage(((TLRPC.TL_updateNewEncryptedMessage)update).message);
+                ArrayList<TLRPC.Message> decryptedMessages = SecretChatHelper.getInstance().decryptMessage(((TLRPC.TL_updateNewEncryptedMessage) update).message);
                 if (decryptedMessages != null && !decryptedMessages.isEmpty()) {
                     int cid = ((TLRPC.TL_updateNewEncryptedMessage)update).message.chat_id;
                     long uid = ((long) cid) << 32;
@@ -3198,7 +3366,7 @@ public void run() {
                 }
             } else if (update instanceof TLRPC.TL_updateEncryptedMessagesRead) {
                 markAsReadEncrypted.put(update.chat_id, Math.max(update.max_date, update.date));
-                tasks.add((TLRPC.TL_updateEncryptedMessagesRead)update);
+                tasks.add((TLRPC.TL_updateEncryptedMessagesRead) update);
             } else if (update instanceof TLRPC.TL_updateChatParticipantAdd) {
                 MessagesStorage.getInstance().updateChatInfo(update.chat_id, update.user_id, false, update.inviter_id, update.version);
             } else if (update instanceof TLRPC.TL_updateChatParticipantDelete) {
@@ -3338,6 +3506,12 @@ public void run() {
                             }
                         } else if (update instanceof TLRPC.TL_updateUserName) {
                             if (currentUser != null) {
+                                if (currentUser.username != null && currentUser.username.length() > 0) {
+                                    usersByUsernames.remove(currentUser.username);
+                                }
+                                if (update.username != null && update.username.length() > 0) {
+                                    usersByUsernames.put(update.username, currentUser);
+                                }
                                 currentUser.first_name = update.first_name;
                                 currentUser.last_name = update.last_name;
                                 currentUser.username = update.username;
@@ -3462,15 +3636,27 @@ public void run() {
                     @Override
                     public void run() {
                         int updateMask = 0;
-                        if (!markAsReadMessages.isEmpty()) {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesRead, markAsReadMessages);
-                            NotificationsController.getInstance().processReadMessages(markAsReadMessages, 0, 0, 0, false);
-
-                            for (Integer id : markAsReadMessages) {
-                                MessageObject obj = dialogMessage.get(id);
-                                if (obj != null) {
-                                    obj.setIsRead();
-                                    updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
+                        if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty()) {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesRead, markAsReadMessagesInbox, markAsReadMessagesOutbox);
+                            NotificationsController.getInstance().processReadMessages(markAsReadMessagesInbox, 0, 0, 0, false);
+                            for (HashMap.Entry<Integer, Integer> entry : markAsReadMessagesInbox.entrySet()) {
+                                TLRPC.TL_dialog dialog = dialogs_dict.get((long) entry.getKey());
+                                if (dialog != null && dialog.top_message <= entry.getValue()) {
+                                    MessageObject obj = dialogMessage.get(dialog.top_message);
+                                    if (obj != null) {
+                                        obj.setIsRead();
+                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
+                                    }
+                                }
+                            }
+                            for (HashMap.Entry<Integer, Integer> entry : markAsReadMessagesOutbox.entrySet()) {
+                                TLRPC.TL_dialog dialog = dialogs_dict.get((long) entry.getKey());
+                                if (dialog != null && dialog.top_message <= entry.getValue()) {
+                                    MessageObject obj = dialogMessage.get(dialog.top_message);
+                                    if (obj != null) {
+                                        obj.setIsRead();
+                                        updateMask |= UPDATE_MASK_READ_DIALOG_MESSAGE;
+                                    }
                                 }
                             }
                         }
@@ -3505,11 +3691,11 @@ public void run() {
             }
         });
 
-        if (!markAsReadMessages.isEmpty() || !markAsReadEncrypted.isEmpty()) {
-            if (!markAsReadMessages.isEmpty()) {
-                MessagesStorage.getInstance().updateDialogsWithReadedMessages(markAsReadMessages, true);
+        if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty() || !markAsReadEncrypted.isEmpty()) {
+            if (!markAsReadMessagesInbox.isEmpty() || !markAsReadMessagesOutbox.isEmpty()) {
+                MessagesStorage.getInstance().updateDialogsWithReadedMessages(markAsReadMessagesInbox, true);
             }
-            MessagesStorage.getInstance().markMessagesAsRead(markAsReadMessages, markAsReadEncrypted, true);
+            MessagesStorage.getInstance().markMessagesAsRead(markAsReadMessagesInbox, markAsReadMessagesOutbox, markAsReadEncrypted, true);
         }
         if (!deletedMessages.isEmpty()) {
             MessagesStorage.getInstance().markMessagesAsDeleted(deletedMessages, true);
@@ -3526,6 +3712,24 @@ public void run() {
         return true;
     }
 
+    private boolean isNotifySettingsMuted(TLRPC.PeerNotifySettings settings) {
+        return settings instanceof TLRPC.TL_peerNotifySettings && settings.mute_until > ConnectionsManager.getInstance().getCurrentTime();
+    }
+
+    public boolean isDialogMuted(long dialog_id) {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        int mute_type = preferences.getInt("notify2_" + dialog_id, 0);
+        if (mute_type == 2) {
+            return true;
+        } else if (mute_type == 3) {
+            int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
+            if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageObject> messages) {
         if (uid > 0) {
             ArrayList<PrintingUser> arr = printingUsers.get(uid);
@@ -3576,7 +3780,7 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceivedNewMessages, uid, messages);
 
         for (MessageObject message : messages) {
-            if (lastMessage == null || (!isEncryptedChat && message.messageOwner.id > lastMessage.messageOwner.id || isEncryptedChat && message.messageOwner.id < lastMessage.messageOwner.id) || message.messageOwner.date > lastMessage.messageOwner.date) {
+            if (lastMessage == null || (!isEncryptedChat && message.getId() > lastMessage.getId() || isEncryptedChat && message.getId() < lastMessage.getId()) || message.messageOwner.date > lastMessage.messageOwner.date) {
                 lastMessage = message;
             }
         }
@@ -3588,17 +3792,17 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
                 dialog = new TLRPC.TL_dialog();
                 dialog.id = uid;
                 dialog.unread_count = 0;
-                dialog.top_message = lastMessage.messageOwner.id;
+                dialog.top_message = lastMessage.getId();
                 dialog.last_message_date = lastMessage.messageOwner.date;
                 dialogs_dict.put(uid, dialog);
                 dialogs.add(dialog);
-                dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+                dialogMessage.put(lastMessage.getId(), lastMessage);
                 changed = true;
             }
         } else {
             boolean change = false;
-            if (dialog.top_message > 0 && lastMessage.messageOwner.id > 0 && lastMessage.messageOwner.id > dialog.top_message ||
-                    dialog.top_message < 0 && lastMessage.messageOwner.id < 0 && lastMessage.messageOwner.id < dialog.top_message) {
+            if (dialog.top_message > 0 && lastMessage.getId() > 0 && lastMessage.getId() > dialog.top_message ||
+                    dialog.top_message < 0 && lastMessage.getId() < 0 && lastMessage.getId() < dialog.top_message) {
                 change = true;
             } else {
                 MessageObject currentDialogMessage = dialogMessage.get(dialog.top_message);
@@ -3614,12 +3818,12 @@ protected void updateInterfaceWithMessages(final long uid, final ArrayList<Messa
             }
             if (change) {
                 dialogMessage.remove(dialog.top_message);
-                dialog.top_message = lastMessage.messageOwner.id;
+                dialog.top_message = lastMessage.getId();
                 if (!isBroadcast) {
                     dialog.last_message_date = lastMessage.messageOwner.date;
                     changed = true;
                 }
-                dialogMessage.put(lastMessage.messageOwner.id, lastMessage);
+                dialogMessage.put(lastMessage.getId(), lastMessage);
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
index 160447dec..15daba188 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
@@ -103,7 +103,7 @@ public void openDatabase() {
             database.executeFast("PRAGMA temp_store = 1").stepThis().dispose();
             if (createTable) {
                 database.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
-                database.executeFast("CREATE TABLE messages(mid INTEGER PRIMARY KEY, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER)").stepThis().dispose();
+                database.executeFast("CREATE TABLE messages(mid INTEGER PRIMARY KEY, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB)").stepThis().dispose();
                 database.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER)").stepThis().dispose();
@@ -162,7 +162,7 @@ public void openDatabase() {
                 database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
 
                 //version
-                database.executeFast("PRAGMA user_version = 13").stepThis().dispose();
+                database.executeFast("PRAGMA user_version = 14").stepThis().dispose();
             } else {
                 try {
                     SQLiteCursor cursor = database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1");
@@ -193,7 +193,7 @@ public void openDatabase() {
                     }
                 }
                 int version = database.executeInt("PRAGMA user_version");
-                if (version < 13) {
+                if (version < 14) {
                     updateDbToLastVersion(version);
                 }
             }
@@ -368,6 +368,11 @@ public void run() {
                         database.executeFast("PRAGMA user_version = 13").stepThis().dispose();
                         version = 13;
                     }
+                    if (version == 13 && version < 14) {
+                        database.executeFast("ALTER TABLE messages ADD COLUMN replydata BLOB default NULL").stepThis().dispose();
+                        database.executeFast("PRAGMA user_version = 14").stepThis().dispose();
+                        version = 14;
+                    }
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                 }
@@ -753,7 +758,7 @@ public void run() {
                 try {
                     ArrayList<Integer> ids = new ArrayList<>();
                     ArrayList<TLRPC.User> users = new ArrayList<>();
-                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM blocked_users WHERE 1"));
+                    SQLiteCursor cursor = database.queryFinalized("SELECT * FROM blocked_users WHERE 1");
                     StringBuilder usersToLoad = new StringBuilder();
                     while (cursor.next()) {
                         int user_id = cursor.intValue(0);
@@ -840,7 +845,7 @@ public void run() {
                     }
 
                     if ((int) did == 0) {
-                        SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages WHERE uid = " + did));
+                        SQLiteCursor cursor = database.queryFinalized("SELECT data FROM messages WHERE uid = " + did);
                         ArrayList<File> filesToDelete = new ArrayList<>();
                         try {
                             while (cursor.next()) {
@@ -1085,20 +1090,16 @@ public void run() {
         });
     }
 
-    private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> messages) {
-        if (Thread.currentThread().getId() != storageQueue.getId()) {
-            throw new RuntimeException("wrong db thread");
-        }
+    private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> messages, final HashMap<Integer, Integer> inbox) {
         try {
             HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
+            StringBuilder dialogsToReload = new StringBuilder();
+
             if (messages != null && !messages.isEmpty()) {
-                StringBuilder dialogsToReload = new StringBuilder();
                 String ids = TextUtils.join(",", messages);
-                int totalCount = 0;
                 SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages WHERE mid IN(%s)", ids));
                 while (cursor.next()) {
                     int out = cursor.intValue(2);
-                    totalCount++;
                     if (out != 0) {
                         continue;
                     }
@@ -1119,8 +1120,26 @@ private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> me
                     }
                 }
                 cursor.dispose();
+            } else if (inbox != null && !inbox.isEmpty()) {
+                for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
+                    SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mid <= %d AND read_state = 0 AND out = 0", entry.getKey(), entry.getValue()));
+                    if (cursor.next()) {
+                        int count = cursor.intValue(0);
+                        if (count == 0) {
+                            continue;
+                        }
+                        dialogsToUpdate.put((long) entry.getKey(), count);
+                        if (dialogsToReload.length() != 0) {
+                            dialogsToReload.append(",");
+                        }
+                        dialogsToReload.append(entry.getKey());
+                    }
+                    cursor.dispose();
+                }
+            }
 
-                cursor = database.queryFinalized(String.format(Locale.US, "SELECT did, unread_count FROM dialogs WHERE did IN(%s)", dialogsToReload.toString()));
+            if (dialogsToReload.length() > 0) {
+                SQLiteCursor cursor = database.queryFinalized(String.format(Locale.US, "SELECT did, unread_count FROM dialogs WHERE did IN(%s)", dialogsToReload.toString()));
                 while (cursor.next()) {
                     long did = cursor.longValue(0);
                     int count = cursor.intValue(1);
@@ -1153,19 +1172,19 @@ private void updateDialogsWithReadedMessagesInternal(final ArrayList<Integer> me
         }
     }
 
-    public void updateDialogsWithReadedMessages(final ArrayList<Integer> messages, boolean useQueue) {
-        if (messages.isEmpty()) {
+    public void updateDialogsWithReadedMessages(final HashMap<Integer, Integer> inbox, boolean useQueue) {
+        if (inbox.isEmpty()) {
             return;
         }
         if (useQueue) {
             storageQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    updateDialogsWithReadedMessagesInternal(messages);
+                    updateDialogsWithReadedMessagesInternal(null, inbox);
                 }
             });
         } else {
-            updateDialogsWithReadedMessagesInternal(messages);
+            updateDialogsWithReadedMessagesInternal(null, inbox);
         }
     }
 
@@ -1710,6 +1729,8 @@ public void run() {
                 try {
                     ArrayList<Integer> loadedUsers = new ArrayList<>();
                     ArrayList<Integer> fromUser = new ArrayList<>();
+                    ArrayList<Integer> replyMessages = new ArrayList<>();
+                    HashMap<Integer, ArrayList<TLRPC.Message>> replyMessageOwners = new HashMap<>();
 
                     SQLiteCursor cursor = null;
                     int lower_id = (int)dialog_id;
@@ -1731,18 +1752,18 @@ public void run() {
                             cursor.dispose();
 
                             if (containMessage) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
-                                        "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, max_id, count_query / 2, dialog_id, max_id, count_query / 2 - 1));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION " +
+                                        "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", dialog_id, max_id, count_query / 2, dialog_id, max_id, count_query / 2 - 1));
                             } else {
                                 cursor = null;
                             }
                         } else if (load_type == 1) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, max_id, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", dialog_id, minDate, max_id, count_query));
                         } else if (minDate != 0) {
                             if (max_id != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, max_id, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", dialog_id, minDate, max_id, count_query));
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
                             }
                         } else {
                             if (load_type == 2) {
@@ -1778,16 +1799,16 @@ public void run() {
                                 offset_query = count_unread - count_query;
                                 count_query += 10;
                             }
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, offset_query, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", dialog_id, offset_query, count_query));
                         }
                     } else {
                         if (load_type == 1) {
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", dialog_id, max_id, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", dialog_id, max_id, count_query));
                         } else if (minDate != 0) {
                             if (max_id != 0) {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", dialog_id, max_id, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", dialog_id, max_id, count_query));
                             } else {
-                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
+                                cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, minDate, offset_query, count_query));
                             }
                         } else {
                             if (load_type == 2) {
@@ -1823,7 +1844,7 @@ public void run() {
                                 offset_query = count_unread - count_query;
                                 count_query += 10;
                             }
-                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
+                            cursor = database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d", dialog_id, offset_query, count_query));
                         }
                     }
                     if (cursor != null) {
@@ -1849,6 +1870,43 @@ public void run() {
                                 if (message.fwd_from_id != 0) {
                                     fromUser.add(message.fwd_from_id);
                                 }
+                                if (message.reply_to_msg_id != 0) {
+                                    boolean ok = false;
+                                    if (!cursor.isNull(6)) {
+                                        ByteBufferDesc data2 = buffersStorage.getFreeBuffer(cursor.byteArrayLength(6));
+                                        if (data2 != null && cursor.byteBufferValue(6, data2.buffer) != 0) {
+                                            message.replyMessage = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data2, data2.readInt32());
+                                            if (message.replyMessage != null) {
+                                                fromUser.add(message.replyMessage.from_id);
+                                                if (message.replyMessage.action != null && message.replyMessage.action.user_id != 0) {
+                                                    fromUser.add(message.replyMessage.action.user_id);
+                                                }
+                                                if (message.replyMessage.media != null && message.replyMessage.media.user_id != 0) {
+                                                    fromUser.add(message.replyMessage.media.user_id);
+                                                }
+                                                if (message.replyMessage.media != null && message.replyMessage.media.audio != null && message.replyMessage.media.audio.user_id != 0) {
+                                                    fromUser.add(message.replyMessage.media.audio.user_id);
+                                                }
+                                                if (message.replyMessage.fwd_from_id != 0) {
+                                                    fromUser.add(message.replyMessage.fwd_from_id);
+                                                }
+                                                ok = true;
+                                            }
+                                        }
+                                        buffersStorage.reuseFreeBuffer(data2);
+                                    }
+                                    if (!ok) {
+                                        if (!replyMessages.contains(message.reply_to_msg_id)) {
+                                            replyMessages.add(message.reply_to_msg_id);
+                                        }
+                                        ArrayList<TLRPC.Message> messages = replyMessageOwners.get(message.reply_to_msg_id);
+                                        if (messages == null) {
+                                            messages = new ArrayList<>();
+                                            replyMessageOwners.put(message.reply_to_msg_id, messages);
+                                        }
+                                        messages.add(message);
+                                    }
+                                }
                                 message.send_state = cursor.intValue(2);
                                 if (!MessageObject.isUnread(message) && lower_id != 0 || message.id > 0) {
                                     message.send_state = 0;
@@ -1899,33 +1957,39 @@ public int compare(TLRPC.Message lhs, TLRPC.Message rhs) {
                         }
                     });
 
-                    /*ArrayList<Range<Integer>> holes = getHoles(dialog_id);
-                    if (holes != null && !res.messages.isEmpty()) {
-                        int start = res.messages.get(res.messages.size() - 1).id;
-                        int end = res.messages.get(0).id;
-                        for (Range<Integer> range : holes) {
-                            if (range.contains(start) && range.contains(end)) {
-                                res.messages.clear();
-                            } else if (range.contains(start)) {
-                                while (!res.messages.isEmpty() && range.contains(res.messages.get(res.messages.size() - 1).id)) {
-                                    res.messages.remove(res.messages.size() - 1);
+                    if (!replyMessages.isEmpty()) {
+                        cursor = database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid IN(%s)", TextUtils.join(",", replyMessages)));
+                        while (cursor.next()) {
+                            ByteBufferDesc data = buffersStorage.getFreeBuffer(cursor.byteArrayLength(0));
+                            if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                                TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                                message.id = cursor.intValue(1);
+                                message.date = cursor.intValue(2);
+                                message.dialog_id = dialog_id;
+                                fromUser.add(message.from_id);
+                                if (message.action != null && message.action.user_id != 0) {
+                                    fromUser.add(message.action.user_id);
+                                }
+                                if (message.media != null && message.media.user_id != 0) {
+                                    fromUser.add(message.media.user_id);
                                 }
-                                if (!res.messages.isEmpty()) {
-                                    start = res.messages.get(res.messages.size() - 1).id;
+                                if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
+                                    fromUser.add(message.media.audio.user_id);
                                 }
-                            } else if (range.contains(end)) {
-                                while (!res.messages.isEmpty() && range.contains(res.messages.get(0).id)) {
-                                    res.messages.remove(0);
+                                if (message.fwd_from_id != 0) {
+                                    fromUser.add(message.fwd_from_id);
                                 }
-                                if (!res.messages.isEmpty()) {
-                                    end = res.messages.get(0).id;
+                                ArrayList<TLRPC.Message> arrayList = replyMessageOwners.get(message.id);
+                                if (arrayList != null) {
+                                    for (TLRPC.Message m : arrayList) {
+                                        m.replyMessage = message;
+                                    }
                                 }
-                            } else if (start >= )
-                            if (res.messages.isEmpty()) {
-                                break;
                             }
+                            buffersStorage.reuseFreeBuffer(data);
                         }
-                    }*/
+                        cursor.dispose();
+                    }
 
                     StringBuilder usersToLoad = new StringBuilder();
                     for (int uid : fromUser) {
@@ -2590,7 +2654,7 @@ private void putMessagesInternal(final ArrayList<TLRPC.Message> messages, final
             HashMap<Integer, Long> messagesMediaIdsMap = new HashMap<>();
             StringBuilder messageIds = new StringBuilder();
             StringBuilder messageMediaIds = new StringBuilder();
-            SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
+            SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
             SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
             SQLitePreparedStatement state3 = database.executeFast("REPLACE INTO randoms VALUES(?, ?)");
             SQLitePreparedStatement state4 = database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?)");
@@ -3164,14 +3228,20 @@ public void run() {
         }
     }
 
-    private void markMessagesAsReadInternal(final ArrayList<Integer> messages, HashMap<Integer, Integer> encryptedMessages) {
+    private void markMessagesAsReadInternal(HashMap<Integer, Integer> inbox, HashMap<Integer, Integer> outbox, HashMap<Integer, Integer> encryptedMessages) {
         if (Thread.currentThread().getId() != storageQueue.getId()) {
             throw new RuntimeException("wrong db thread");
         }
         try {
-            if (messages != null && !messages.isEmpty()) {
-                String ids = TextUtils.join(",", messages);
-                database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = 1 WHERE mid IN(%s)", ids)).stepThis().dispose();
+            if (inbox != null) {
+                for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
+                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = 1 WHERE uid = %d AND mid <= %d AND read_state = 0 AND out = 0", entry.getKey(), entry.getValue())).stepThis().dispose();
+                }
+            }
+            if (outbox != null) {
+                for (HashMap.Entry<Integer, Integer> entry : outbox.entrySet()) {
+                    database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = 1 WHERE uid = %d AND mid <= %d AND read_state = 0 AND out = 1", entry.getKey(), entry.getValue())).stepThis().dispose();
+                }
             }
             if (encryptedMessages != null && !encryptedMessages.isEmpty()) {
                 for (HashMap.Entry<Integer, Integer> entry : encryptedMessages.entrySet()) {
@@ -3190,16 +3260,16 @@ private void markMessagesAsReadInternal(final ArrayList<Integer> messages, HashM
         }
     }
 
-    public void markMessagesAsRead(final ArrayList<Integer> messages, final HashMap<Integer, Integer> encryptedMessages, boolean useQueue) {
+    public void markMessagesAsRead(final HashMap<Integer, Integer> inbox, final HashMap<Integer, Integer> outbox, final HashMap<Integer, Integer> encryptedMessages, boolean useQueue) {
         if (useQueue) {
             storageQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
-                    markMessagesAsReadInternal(messages, encryptedMessages);
+                    markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
                 }
             });
         } else {
-            markMessagesAsReadInternal(messages, encryptedMessages);
+            markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
         }
     }
 
@@ -3231,7 +3301,7 @@ public void run() {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.messagesDeleted, mids);
                             }
                         });
-                        MessagesStorage.getInstance().updateDialogsWithReadedMessagesInternal(mids);
+                        MessagesStorage.getInstance().updateDialogsWithReadedMessagesInternal(mids, null);
                         MessagesStorage.getInstance().markMessagesAsDeletedInternal(mids);
                         MessagesStorage.getInstance().updateDialogsWithDeletedMessagesInternal(mids);
                     }
@@ -3472,7 +3542,7 @@ public void run() {
                 try {
                     database.beginTransaction();
                     if (!messages.messages.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
                         SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                         for (TLRPC.Message message : messages.messages) {
                             fixUnsupportedMedia(message);
@@ -3644,7 +3714,7 @@ public void run() {
                     }
 
                     if (!dialogs.dialogs.isEmpty()) {
-                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
+                        SQLitePreparedStatement state = database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL)");
                         SQLitePreparedStatement state2 = database.executeFast("REPLACE INTO dialogs(did, date, unread_count, last_mid) VALUES(?, ?, ?, ?)");
                         SQLitePreparedStatement state3 = database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                         SQLitePreparedStatement state4 = database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 5ae1cae0b..b21a9fd2e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -51,6 +51,7 @@
     public static final int didSetPasscode = totalEvents++;
     public static final int screenStateChanged = totalEvents++;
     public static final int appSwitchedToForeground = totalEvents++;
+    public static final int didLoadedReplyMessages = totalEvents++;
 
     public static final int httpFileDidLoaded = totalEvents++;
     public static final int httpFileDidFailedLoad = totalEvents++;
@@ -109,7 +110,7 @@ public static NotificationCenter getInstance() {
     }
 
     public interface NotificationCenterDelegate {
-        public abstract void didReceivedNotification(int id, Object... args);
+        void didReceivedNotification(int id, Object... args);
     }
 
     public void postNotificationName(int id, Object... args) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
index ea5942993..b5501c521 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
@@ -56,6 +56,7 @@
     private NotificationManagerCompat notificationManager = null;
     private HashMap<Long, Integer> pushDialogs = new HashMap<>();
     private HashMap<Long, Integer> wearNoticationsIds = new HashMap<>();
+    private HashMap<Long, Integer> pushDialogsOverrideMention = new HashMap<>();
     private int wearNotificationId = 10000;
     public ArrayList<MessageObject> popupMessages = new ArrayList<>();
     private long openned_dialog_id = 0;
@@ -313,7 +314,11 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             MessageObject lastMessageObject = pushMessages.get(0);
 
             long dialog_id = lastMessageObject.getDialogId();
-            int mid = lastMessageObject.messageOwner.id;
+            long override_dialog_id = dialog_id;
+            if ((lastMessageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
+                override_dialog_id = lastMessageObject.messageOwner.from_id;
+            }
+            int mid = lastMessageObject.getId();
             int chat_id = lastMessageObject.messageOwner.to_id.chat_id;
             int user_id = lastMessageObject.messageOwner.to_id.user_id;
             if (user_id == 0) {
@@ -342,9 +347,9 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             int vibrate_override = 0;
 
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
-            int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
+            int notify_override = preferences.getInt("notify2_" + override_dialog_id, 0);
             if (notify_override == 3) {
-                int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
+                int mute_until = preferences.getInt("notifyuntil_" + override_dialog_id, 0);
                 if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
                     notify_override = 2;
                 }
@@ -615,7 +620,7 @@ public void showWearNotifications(boolean notifyAboutLast) {
 
         for (long dialog_id : sortedDialogs) {
             ArrayList<MessageObject> messageObjects = messagesByDialogs.get(dialog_id);
-            int max_id = messageObjects.get(0).messageOwner.id;
+            int max_id = messageObjects.get(0).getId();
             TLRPC.Chat chat = null;
             TLRPC.User user = null;
             String name = null;
@@ -737,19 +742,21 @@ private void sendAlertToPebble(String message) {
         }
     }
 
-    public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id, int max_date, int max_id, boolean isPopup) {
+    public void processReadMessages(HashMap<Integer, Integer> inbox, long dialog_id, int max_date, int max_id, boolean isPopup) {
         int oldCount = popupMessages.size();
-        int oldCount2 = pushMessages.size();
-        if (readMessages != null) {
-            for (Integer id : readMessages) {
-                MessageObject messageObject = pushMessagesDict.get(id);
-                if (messageObject != null) {
-                    if (isPersonalMessage(messageObject)) {
-                        personal_count--;
+        if (inbox != null) {
+            for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
+                for (int a = 0; a < pushMessages.size(); a++) {
+                    MessageObject messageObject = pushMessages.get(a);
+                    if (messageObject.getDialogId() == entry.getKey() && messageObject.getId() <= entry.getValue()) {
+                        if (isPersonalMessage(messageObject)) {
+                            personal_count--;
+                        }
+                        popupMessages.remove(messageObject);
+                        pushMessagesDict.remove(messageObject.getId());
+                        pushMessages.remove(a);
+                        a--;
                     }
-                    pushMessages.remove(messageObject);
-                    popupMessages.remove(messageObject);
-                    pushMessagesDict.remove(id);
                 }
             }
         }
@@ -764,11 +771,11 @@ public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id,
                         }
                     } else {
                         if (!isPopup) {
-                            if (messageObject.messageOwner.id <= max_id || max_id < 0) {
+                            if (messageObject.getId() <= max_id || max_id < 0) {
                                 remove = true;
                             }
                         } else {
-                            if (messageObject.messageOwner.id == max_id || max_id < 0) {
+                            if (messageObject.getId() == max_id || max_id < 0) {
                                 remove = true;
                             }
                         }
@@ -779,7 +786,7 @@ public void processReadMessages(ArrayList<Integer> readMessages, long dialog_id,
                         }
                         pushMessages.remove(a);
                         popupMessages.remove(messageObject);
-                        pushMessagesDict.remove(messageObject.messageOwner.id);
+                        pushMessagesDict.remove(messageObject.getId());
                         a--;
                     }
                 }
@@ -802,13 +809,17 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
         int popup = 0;
 
         for (MessageObject messageObject : messageObjects) {
-            if (pushMessagesDict.containsKey(messageObject.messageOwner.id)) {
+            if (pushMessagesDict.containsKey(messageObject.getId())) {
                 continue;
             }
             long dialog_id = messageObject.getDialogId();
+            long original_dialog_id = dialog_id;
             if (dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
                 continue;
             }
+            if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
+                dialog_id = messageObject.messageOwner.from_id;
+            }
             if (isPersonalMessage(messageObject)) {
                 personal_count++;
             }
@@ -833,7 +844,10 @@ public void processNewMessages(ArrayList<MessageObject> messageObjects, boolean
                     popupMessages.add(0, messageObject);
                 }
                 pushMessages.add(0, messageObject);
-                pushMessagesDict.put(messageObject.messageOwner.id, messageObject);
+                pushMessagesDict.put(messageObject.getId(), messageObject);
+                if (original_dialog_id != dialog_id) {
+                    pushDialogsOverrideMention.put(original_dialog_id, 1);
+                }
             }
         }
 
@@ -866,6 +880,13 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
                     notify_override = 2;
                 }
             }
+            if (notifyCheck) {
+                Integer override = pushDialogsOverrideMention.get(dialog_id);
+                if (override != null && override == 1) {
+                    pushDialogsOverrideMention.put(dialog_id, 0);
+                    notify_override = 1;
+                }
+            }
             boolean canAddValue = !(notify_override == 2 || (!preferences.getBoolean("EnableAll", true) || ((int)dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notify_override == 0);
 
             Integer currentCount = pushDialogs.get(dialog_id);
@@ -883,6 +904,7 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
             }
             if (newCount == 0) {
                 pushDialogs.remove(dialog_id);
+                pushDialogsOverrideMention.remove(dialog_id);
                 for (int a = 0; a < pushMessages.size(); a++) {
                     MessageObject messageObject = pushMessages.get(a);
                     if (messageObject.getDialogId() == dialog_id) {
@@ -891,7 +913,7 @@ public void processDialogsUpdateRead(final HashMap<Long, Integer> dialogsToUpdat
                         }
                         pushMessages.remove(a);
                         a--;
-                        pushMessagesDict.remove(messageObject.messageOwner.id);
+                        pushMessagesDict.remove(messageObject.getId());
                         popupMessages.remove(messageObject);
                     }
                 }
@@ -930,27 +952,6 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         HashMap<Long, Boolean> settingsCache = new HashMap<>();
 
-        for (HashMap.Entry<Long, Integer> entry : dialogs.entrySet()) {
-            long dialog_id = entry.getKey();
-            Boolean value = settingsCache.get(dialog_id);
-            if (value == null) {
-                int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
-                if (notify_override == 3) {
-                    int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
-                    if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
-                        notify_override = 2;
-                    }
-                }
-                value = !(notify_override == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notify_override == 0);
-                settingsCache.put(dialog_id, value);
-            }
-            if (!value) {
-                continue;
-            }
-            int count = entry.getValue();
-            pushDialogs.put(dialog_id, count);
-            total_unread_count += count;
-        }
         if (messages != null) {
             for (TLRPC.Message message : messages) {
                 if (pushMessagesDict.containsKey(message.id)) {
@@ -961,6 +962,10 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
                     personal_count++;
                 }
                 long dialog_id = messageObject.getDialogId();
+                long original_dialog_id = dialog_id;
+                if ((messageObject.messageOwner.flags & TLRPC.MESSAGE_FLAG_MENTION) != 0) {
+                    dialog_id = messageObject.messageOwner.from_id;
+                }
                 Boolean value = settingsCache.get(dialog_id);
                 if (value == null) {
                     int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
@@ -976,9 +981,38 @@ public void processLoadedUnreadMessages(HashMap<Long, Integer> dialogs, ArrayLis
                 if (!value || dialog_id == openned_dialog_id && ApplicationLoader.isScreenOn) {
                     continue;
                 }
-                pushMessagesDict.put(messageObject.messageOwner.id, messageObject);
+                pushMessagesDict.put(messageObject.getId(), messageObject);
                 pushMessages.add(0, messageObject);
+                if (original_dialog_id != dialog_id) {
+                    pushDialogsOverrideMention.put(original_dialog_id, 1);
+                }
+            }
+        }
+        for (HashMap.Entry<Long, Integer> entry : dialogs.entrySet()) {
+            long dialog_id = entry.getKey();
+            Boolean value = settingsCache.get(dialog_id);
+            if (value == null) {
+                int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
+                if (notify_override == 3) {
+                    int mute_until = preferences.getInt("notifyuntil_" + dialog_id, 0);
+                    if (mute_until >= ConnectionsManager.getInstance().getCurrentTime()) {
+                        notify_override = 2;
+                    }
+                }
+                Integer override = pushDialogsOverrideMention.get(dialog_id);
+                if (override != null && override == 1) {
+                    pushDialogsOverrideMention.put(dialog_id, 0);
+                    notify_override = 1;
+                }
+                value = !(notify_override == 2 || (!preferences.getBoolean("EnableAll", true) || ((int) dialog_id < 0) && !preferences.getBoolean("EnableGroup", true)) && notify_override == 0);
+                settingsCache.put(dialog_id, value);
+            }
+            if (!value) {
+                continue;
             }
+            int count = entry.getValue();
+            pushDialogs.put(dialog_id, count);
+            total_unread_count += count;
         }
         if (total_unread_count == 0) {
             popupMessages.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
index ebdcadd3a..2953ae259 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
@@ -175,12 +175,12 @@ public void run() {
                         for (int a = 0; a < arr.size(); a++) {
                             DelayedMessage obj = arr.get(a);
                             if (enc && obj.sendEncryptedRequest != null || !enc && obj.sendRequest != null) {
-                                MessagesStorage.getInstance().markMessageAsSendError(obj.obj.messageOwner.id);
+                                MessagesStorage.getInstance().markMessageAsSendError(obj.obj.getId());
                                 obj.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
                                 arr.remove(a);
                                 a--;
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.messageOwner.id);
-                                processSentMessage(obj.obj.messageOwner.id);
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, obj.obj.getId());
+                                processSentMessage(obj.obj.getId());
                             }
                         }
                         if (arr.isEmpty()) {
@@ -245,12 +245,12 @@ public void run() {
                 for (int a = 0; a < arr.size(); a++) {
                     DelayedMessage message = arr.get(a);
                     if (message.obj == messageObject) {
-                        MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner.id);
+                        MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
                         message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
                         arr.remove(a);
                         a--;
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.messageOwner.id);
-                        processSentMessage(message.obj.messageOwner.id);
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
+                        processSentMessage(message.obj.getId());
                     }
                 }
                 if (arr.isEmpty()) {
@@ -285,10 +285,10 @@ public void run() {
                                             NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateMessageMedia, message.obj);
                                         } else {
                                             FileLog.e("tmessages", "can't load image " + message.httpLocation + " to file " + cacheFile.toString());
-                                            MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner.id);
+                                            MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
                                             message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.messageOwner.id);
-                                            processSentMessage(message.obj.messageOwner.id);
+                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
+                                            processSentMessage(message.obj.getId());
                                         }
                                     }
                                 });
@@ -340,10 +340,10 @@ public void run() {
             ArrayList<DelayedMessage> arr = delayedMessages.get(path);
             if (arr != null) {
                 for (DelayedMessage message : arr) {
-                    MessagesStorage.getInstance().markMessageAsSendError(message.obj.messageOwner.id);
+                    MessagesStorage.getInstance().markMessageAsSendError(message.obj.getId());
                     message.obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.messageOwner.id);
-                    processSentMessage(message.obj.messageOwner.id);
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, message.obj.getId());
+                    processSentMessage(message.obj.getId());
                 }
                 delayedMessages.remove(path);
             }
@@ -357,7 +357,7 @@ public void cancelSendingMessage(MessageObject object) {
             ArrayList<DelayedMessage> messages = entry.getValue();
             for (int a = 0; a < messages.size(); a++) {
                 DelayedMessage message = messages.get(a);
-                if (message.obj.messageOwner.id == object.messageOwner.id) {
+                if (message.obj.getId() == object.getId()) {
                     messages.remove(a);
                     MediaController.getInstance().cancelVideoConvert(message.obj);
                     if (messages.size() == 0) {
@@ -379,22 +379,22 @@ public void cancelSendingMessage(MessageObject object) {
             stopVideoService(keyToRemvoe);
         }
         ArrayList<Integer> messages = new ArrayList<>();
-        messages.add(object.messageOwner.id);
+        messages.add(object.getId());
         MessagesController.getInstance().deleteMessages(messages, null, null);
     }
 
     public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
-        if (messageObject.messageOwner.id >= 0) {
+        if (messageObject.getId() >= 0) {
             return false;
         }
         if (messageObject.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction) {
             int enc_id = (int) (messageObject.getDialogId() >> 32);
             TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(enc_id);
             if (encryptedChat == null) {
-                MessagesStorage.getInstance().markMessageAsSendError(messageObject.messageOwner.id);
+                MessagesStorage.getInstance().markMessageAsSendError(messageObject.getId());
                 messageObject.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.messageOwner.id);
-                processSentMessage(messageObject.messageOwner.id);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, messageObject.getId());
+                processSentMessage(messageObject.getId());
                 return false;
             }
             if (messageObject.messageOwner.random_id == 0) {
@@ -430,7 +430,7 @@ public boolean retrySendMessage(MessageObject messageObject, boolean unsent) {
             return true;
         }
         if (unsent) {
-            unsentMessages.put(messageObject.messageOwner.id, messageObject);
+            unsentMessages.put(messageObject.getId(), messageObject);
         }
         sendMessage(messageObject);
         return true;
@@ -450,75 +450,223 @@ public void processForwardFromMyName(MessageObject messageObject, long did) {
         }
         if (messageObject.messageOwner.media != null && !(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
             if (messageObject.messageOwner.media.photo instanceof TLRPC.TL_photo) {
-                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, null, did);
+                sendMessage((TLRPC.TL_photo) messageObject.messageOwner.media.photo, null, null, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.audio instanceof TLRPC.TL_audio) {
-                sendMessage((TLRPC.TL_audio) messageObject.messageOwner.media.audio, messageObject.messageOwner.attachPath, did);
+                sendMessage((TLRPC.TL_audio) messageObject.messageOwner.media.audio, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.video instanceof TLRPC.TL_video) {
                 TLRPC.TL_video video = (TLRPC.TL_video) messageObject.messageOwner.media.video;
                 video.videoEditedInfo = messageObject.messageOwner.videoEditedInfo;
-                sendMessage(video, null, messageObject.messageOwner.attachPath, did);
+                sendMessage(video, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.document instanceof TLRPC.TL_document) {
-                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did);
+                sendMessage((TLRPC.TL_document) messageObject.messageOwner.media.document, null, messageObject.messageOwner.attachPath, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.geo instanceof TLRPC.TL_geoPoint) {
-                sendMessage(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long, did);
+                sendMessage(messageObject.messageOwner.media.geo.lat, messageObject.messageOwner.media.geo._long, did, messageObject.replyMessageObject);
             } else if (messageObject.messageOwner.media.phone_number != null) {
                 TLRPC.User user = new TLRPC.TL_userContact();
                 user.phone = messageObject.messageOwner.media.phone_number;
                 user.first_name = messageObject.messageOwner.media.first_name;
                 user.last_name = messageObject.messageOwner.media.last_name;
                 user.id = messageObject.messageOwner.media.user_id;
-                sendMessage(user, did);
+                sendMessage(user, did, messageObject.replyMessageObject);
             } else {
                 sendMessage(messageObject, did);
             }
         } else if (messageObject.messageOwner.message != null) {
-            sendMessage(messageObject.messageOwner.message, did);
+            sendMessage(messageObject.messageOwner.message, did, messageObject.replyMessageObject);
         } else {
             sendMessage(messageObject, did);
         }
     }
 
-    public void sendMessage(TLRPC.User user, long peer) {
-        sendMessage(null, null, null, null, null, null, user, null, null, null, peer, false, null);
+    public void sendMessage(TLRPC.User user, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, null, null, null, null, null, user, null, null, null, peer, false, null, reply_to_msg);
     }
 
-    public void sendMessage(ArrayList<MessageObject> messages) {
+    public void sendMessage(ArrayList<MessageObject> messages, long peer) {
+        if ((int) peer == 0 || messages == null || messages.isEmpty()) {
+            return;
+        }
+        int lower_id = (int) peer;
+        TLRPC.Peer to_id;
+        TLRPC.InputPeer sendToPeer;
+        if (lower_id < 0) {
+            to_id = new TLRPC.TL_peerChat();
+            to_id.chat_id = -lower_id;
+            sendToPeer = new TLRPC.TL_inputPeerChat();
+            sendToPeer.chat_id = -lower_id;
+        } else {
+            to_id = new TLRPC.TL_peerUser();
+            to_id.user_id = lower_id;
+            TLRPC.User sendToUser = MessagesController.getInstance().getUser(lower_id);
+            if (sendToUser == null) {
+                return;
+            }
+            if (sendToUser instanceof TLRPC.TL_userForeign || sendToUser instanceof TLRPC.TL_userRequest) {
+                sendToPeer = new TLRPC.TL_inputPeerForeign();
+                sendToPeer.user_id = sendToUser.id;
+                sendToPeer.access_hash = sendToUser.access_hash;
+            } else {
+                sendToPeer = new TLRPC.TL_inputPeerContact();
+                sendToPeer.user_id = sendToUser.id;
+            }
+        }
+
+        ArrayList<MessageObject> objArr = new ArrayList<>();
+        ArrayList<TLRPC.Message> arr = new ArrayList<>();
+        ArrayList<Long> randomIds = new ArrayList<>();
+        ArrayList<Integer> ids = new ArrayList<>();
+
+        for (int a = 0; a < messages.size(); a++) {
+            MessageObject msgObj = messages.get(a);
 
+            TLRPC.Message newMsg = new TLRPC.TL_message();
+            newMsg.flags |= TLRPC.MESSAGE_FLAG_FWD;
+            if (msgObj.isForwarded()) {
+                newMsg.fwd_from_id = msgObj.messageOwner.fwd_from_id;
+                newMsg.fwd_date = msgObj.messageOwner.fwd_date;
+            } else {
+                newMsg.fwd_from_id = msgObj.messageOwner.from_id;
+                newMsg.fwd_date = msgObj.messageOwner.date;
+            }
+            newMsg.media = msgObj.messageOwner.media;
+            newMsg.message = msgObj.messageOwner.message;
+            newMsg.fwd_msg_id = msgObj.getId();
+            newMsg.attachPath = msgObj.messageOwner.attachPath;
+            if (newMsg.attachPath == null) {
+                newMsg.attachPath = "";
+            }
+            newMsg.local_id = newMsg.id = UserConfig.getNewMessageId();
+            newMsg.from_id = UserConfig.getClientUserId();
+            newMsg.flags |= TLRPC.MESSAGE_FLAG_OUT;
+            if (newMsg.random_id == 0) {
+                newMsg.random_id = getNextRandomId();
+            }
+            randomIds.add(newMsg.random_id);
+            ids.add(newMsg.fwd_msg_id);
+            newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
+            newMsg.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
+            newMsg.dialog_id = peer;
+            newMsg.to_id = to_id;
+            MessageObject newMsgObj = new MessageObject(newMsg, null, true);
+            newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
+            objArr.add(newMsgObj);
+            arr.add(newMsg);
+
+            putToSendingMessages(newMsg);
+
+            if (a % 100 == 0 || a == messages.size() - 1) {
+                MessagesStorage.getInstance().putMessages(arr, false, true, false, 0);
+                MessagesController.getInstance().updateInterfaceWithMessages(peer, objArr);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                UserConfig.saveConfig(false);
+
+                TLRPC.TL_messages_forwardMessages req = new TLRPC.TL_messages_forwardMessages();
+                req.peer = sendToPeer;
+                req.random_id = randomIds;
+                req.id = ids;
+
+                /*ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                    @Override
+                    public void run(TLObject response, TLRPC.TL_error error) {
+                        if (error == null) {
+                            final int oldId = newMsgObj.id;
+                            final ArrayList<TLRPC.Message> sentMessages = new ArrayList<>();
+                            final String attachPath = newMsgObj.attachPath;
+
+                            if (response instanceof TLRPC.messages_StatedMessages) {
+                                TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
+                                if (!res.messages.isEmpty()) {
+                                    sentMessages.addAll(res.messages);
+                                    TLRPC.Message message = res.messages.get(0);
+                                    newMsgObj.id = message.id;
+                                    processSentMessage(newMsgObj, message, originalPath);
+                                }
+                                if (res instanceof TLRPC.TL_messages_statedMessages) {
+                                    MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
+                                } else if (res instanceof TLRPC.TL_messages_statedMessagesLinks) {
+                                    MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1, res.pts_count);
+                                }
+                            }
+                            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                                @Override
+                                public void run() {
+                                    MessagesStorage.getInstance().updateMessageStateAndId(newMsgObj.random_id, oldId, newMsgObj.id, 0, false);
+                                    MessagesStorage.getInstance().putMessages(sentMessages, true, false, false, 0);
+                                    AndroidUtilities.runOnUIThread(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageReceivedByServer, oldId, newMsgObj.id, newMsgObj);
+                                            processSentMessage(oldId);
+                                            removeFromSendingMessages(oldId);
+                                        }
+                                    });
+                                    if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                        stopVideoService(attachPath);
+                                    }
+                                }
+                            });
+                        } else {
+                            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.id);
+                            AndroidUtilities.runOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    newMsgObj.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.id);
+                                    processSentMessage(newMsgObj.id);
+                                    if (newMsgObj.media instanceof TLRPC.TL_messageMediaVideo) {
+                                        stopVideoService(newMsgObj.attachPath);
+                                    }
+                                    removeFromSendingMessages(newMsgObj.id);
+                                }
+                            });
+                        }
+                    }
+                }, null, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassCanCompress, ConnectionsManager.DEFAULT_DATACENTER_ID);
+                */
+                if (a != messages.size() - 1) {
+                    objArr = new ArrayList<>();
+                    arr = new ArrayList<>();
+                    randomIds = new ArrayList<>();
+                    ids = new ArrayList<>();
+                }
+            }
+        }
     }
 
     public void sendMessage(MessageObject message) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, message.getDialogId(), true, message.messageOwner.attachPath);
+        sendMessage(null, null, null, null, null, message, null, null, null, null, message.getDialogId(), true, message.messageOwner.attachPath, null);
     }
 
     public void sendMessage(MessageObject message, long peer) {
-        sendMessage(null, null, null, null, null, message, null, null, null, null, peer, false, message.messageOwner.attachPath);
+        sendMessage(null, null, null, null, null, message, null, null, null, null, peer, false, message.messageOwner.attachPath, null);
     }
 
-    public void sendMessage(TLRPC.TL_document document, String originalPath, String path, long peer) {
-        sendMessage(null, null, null, null, null, null, null, document, null, originalPath, peer, false, path);
+    public void sendMessage(TLRPC.TL_document document, String originalPath, String path, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, null, null, null, null, null, null, document, null, originalPath, peer, false, path, reply_to_msg);
     }
 
-    public void sendMessage(String message, long peer) {
-        sendMessage(message, null, null, null, null, null, null, null, null, null, peer, false, null);
+    public void sendMessage(String message, long peer, MessageObject reply_to_msg) {
+        sendMessage(message, null, null, null, null, null, null, null, null, null, peer, false, null, reply_to_msg);
     }
 
-    public void sendMessage(double lat, double lon, long peer) {
-        sendMessage(null, lat, lon, null, null, null, null, null, null, null, peer, false, null);
+    public void sendMessage(double lat, double lon, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, lat, lon, null, null, null, null, null, null, null, peer, false, null, reply_to_msg);
     }
 
-    public void sendMessage(TLRPC.TL_photo photo, String originalPath, String path, long peer) {
-        sendMessage(null, null, null, photo, null, null, null, null, null, originalPath, peer, false, path);
+    public void sendMessage(TLRPC.TL_photo photo, String originalPath, String path, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, null, null, photo, null, null, null, null, null, originalPath, peer, false, path, reply_to_msg);
     }
 
-    public void sendMessage(TLRPC.TL_video video, String originalPath, String path, long peer) {
-        sendMessage(null, null, null, null, video, null, null, null, null, originalPath, peer, false, path);
+    public void sendMessage(TLRPC.TL_video video, String originalPath, String path, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, null, null, null, video, null, null, null, null, originalPath, peer, false, path, reply_to_msg);
     }
 
-    public void sendMessage(TLRPC.TL_audio audio, String path, long peer) {
-        sendMessage(null, null, null, null, null, null, null, null, audio, null, peer, false, path);
+    public void sendMessage(TLRPC.TL_audio audio, String path, long peer, MessageObject reply_to_msg) {
+        sendMessage(null, null, null, null, null, null, null, null, audio, null, peer, false, path, reply_to_msg);
     }
 
-    private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry, String path) {
+    private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo photo, TLRPC.TL_video video, MessageObject msgObj, TLRPC.User user, TLRPC.TL_document document, TLRPC.TL_audio audio, String originalPath, long peer, boolean retry, String path, MessageObject reply_to_msg) {
         if (peer == 0) {
             return;
         }
@@ -538,7 +686,7 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
             newMsg = msgObj.messageOwner;
 
             if (msgObj.type == 0) {
-                if (msgObj.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                if (msgObj.isForwarded()) {
                     type = 4;
                 } else {
                     message = newMsg.message;
@@ -549,14 +697,14 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                 lon = newMsg.media.geo._long;
                 type = 1;
             } else if (msgObj.type == 1) {
-                if (msgObj.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                if (msgObj.isForwarded()) {
                     type = 4;
                 } else {
                     photo = (TLRPC.TL_photo) newMsg.media.photo;
                     type = 2;
                 }
             } else if (msgObj.type == 3) {
-                if (msgObj.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                if (msgObj.isForwarded()) {
                     type = 4;
                 } else {
                     type = 3;
@@ -632,24 +780,20 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                 }
                 newMsg.attachPath = path;
             } else if (msgObj != null) {
-                newMsg = new TLRPC.TL_messageForwarded();
-                if (msgObj.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                newMsg = new TLRPC.TL_message();
+                newMsg.flags |= TLRPC.MESSAGE_FLAG_FWD;
+                if (msgObj.isForwarded()) {
                     newMsg.fwd_from_id = msgObj.messageOwner.fwd_from_id;
                     newMsg.fwd_date = msgObj.messageOwner.fwd_date;
-                    newMsg.media = msgObj.messageOwner.media;
-                    newMsg.message = msgObj.messageOwner.message;
-                    newMsg.fwd_msg_id = msgObj.messageOwner.id;
-                    newMsg.attachPath = msgObj.messageOwner.attachPath;
-                    type = 4;
                 } else {
                     newMsg.fwd_from_id = msgObj.messageOwner.from_id;
                     newMsg.fwd_date = msgObj.messageOwner.date;
-                    newMsg.media = msgObj.messageOwner.media;
-                    newMsg.message = msgObj.messageOwner.message;
-                    newMsg.fwd_msg_id = msgObj.messageOwner.id;
-                    newMsg.attachPath = msgObj.messageOwner.attachPath;
-                    type = 4;
                 }
+                newMsg.media = msgObj.messageOwner.media;
+                newMsg.message = msgObj.messageOwner.message;
+                newMsg.fwd_msg_id = msgObj.getId();
+                newMsg.attachPath = msgObj.messageOwner.attachPath;
+                type = 4;
             } else if (user != null) {
                 if (encryptedChat != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 17) {
                     newMsg = new TLRPC.TL_message_secret();
@@ -700,6 +844,10 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
         newMsg.date = ConnectionsManager.getInstance().getCurrentTime();
         newMsg.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
         newMsg.dialog_id = peer;
+        if (reply_to_msg != null) {
+            newMsg.flags |= TLRPC.MESSAGE_FLAG_REPLY;
+            newMsg.reply_to_msg_id = reply_to_msg.getId();
+        }
         if (lower_id != 0) {
             if (high_id == 1) {
                 if (currentChatInfo == null) {
@@ -759,6 +907,7 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
         }
 
         MessageObject newMsgObj = new MessageObject(newMsg, null, true);
+        newMsgObj.replyMessageObject = reply_to_msg;
         newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENDING;
 
         ArrayList<MessageObject> objArr = new ArrayList<>();
@@ -783,6 +932,9 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                         reqSend.message = message;
                         reqSend.peer = sendToPeer;
                         reqSend.random_id = newMsg.random_id;
+                        if (reply_to_msg != null) {
+                            reqSend.reply_to_msg_id = reply_to_msg.getId();
+                        }
                         performSendMessageRequest(reqSend, newMsgObj.messageOwner, null);
                     }
                 } else {
@@ -916,6 +1068,9 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                         request.peer = sendToPeer;
                         request.random_id = newMsg.random_id;
                         request.media = inputMedia;
+                        if (reply_to_msg != null) {
+                            request.reply_to_msg_id = reply_to_msg.getId();
+                        }
                         if (delayedMessage != null) {
                             delayedMessage.sendRequest = request;
                         }
@@ -1112,8 +1267,8 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
                 TLRPC.TL_messages_forwardMessage reqSend = new TLRPC.TL_messages_forwardMessage();
                 reqSend.peer = sendToPeer;
                 reqSend.random_id = newMsg.random_id;
-                if (msgObj.messageOwner.id >= 0) {
-                    reqSend.id = msgObj.messageOwner.id;
+                if (msgObj.getId() >= 0) {
+                    reqSend.id = msgObj.getId();
                 } else {
                     reqSend.id = msgObj.messageOwner.fwd_msg_id;
                 }
@@ -1121,10 +1276,10 @@ private void sendMessage(String message, Double lat, Double lon, TLRPC.TL_photo
             }
         } catch (Exception e) {
             FileLog.e("tmessages", e);
-            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.messageOwner.id);
+            MessagesStorage.getInstance().markMessageAsSendError(newMsgObj.getId());
             newMsgObj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
-            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.messageOwner.id);
-            processSentMessage(newMsgObj.messageOwner.id);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageSendError, newMsgObj.getId());
+            processSentMessage(newMsgObj.getId());
         }
     }
 
@@ -1270,13 +1425,21 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         TLRPC.messages_SentMessage res = (TLRPC.messages_SentMessage) response;
                         newMsgObj.id = res.id;
                         newMsgObj.date = res.date;
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date);
+                        if (res instanceof TLRPC.TL_messages_sentMessage) {
+                            MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.date, res.pts_count);
+                        } else if (res instanceof TLRPC.TL_messages_sentMessageLink) {
+                            MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.date, res.pts_count);
+                        }
                     } else if (response instanceof TLRPC.messages_StatedMessage) {
                         TLRPC.messages_StatedMessage res = (TLRPC.messages_StatedMessage) response;
                         sentMessages.add(res.message);
                         newMsgObj.id = res.message.id;
                         processSentMessage(newMsgObj, res.message, originalPath);
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date);
+                        if (res instanceof TLRPC.TL_messages_statedMessage) {
+                            MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, res.message.date, res.pts_count);
+                        } else if (res instanceof TLRPC.TL_messages_statedMessageLink) {
+                            MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, res.message.date, res.pts_count);
+                        }
                     } else if (response instanceof TLRPC.messages_StatedMessages) {
                         TLRPC.messages_StatedMessages res = (TLRPC.messages_StatedMessages) response;
                         if (!res.messages.isEmpty()) {
@@ -1287,7 +1450,11 @@ public void run(TLObject response, TLRPC.TL_error error) {
                             }
                             processSentMessage(newMsgObj, message, originalPath);
                         }
-                        MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1);
+                        if (res instanceof TLRPC.TL_messages_statedMessages) {
+                            MessagesController.getInstance().processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
+                        } else if (res instanceof TLRPC.TL_messages_statedMessagesLinks) {
+                            MessagesController.getInstance().processNewDifferenceParams(res.seq, res.pts, -1, res.pts_count);
+                        }
                     }
                     MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
                         @Override
@@ -1547,7 +1714,7 @@ public void run() {
         }
     }
 
-    private static boolean prepareSendingDocumentInternal(String path, String originalPath, Uri uri, String mime, final long dialog_id) {
+    private static boolean prepareSendingDocumentInternal(String path, String originalPath, Uri uri, String mime, final long dialog_id, final MessageObject reply_to_msg) {
         if ((path == null || path.length() == 0) && uri == null) {
             return false;
         }
@@ -1655,13 +1822,13 @@ private static boolean prepareSendingDocumentInternal(String path, String origin
         AndroidUtilities.runOnUIThread(new Runnable() {
             @Override
             public void run() {
-                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id);
+                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id, reply_to_msg);
             }
         });
         return true;
     }
 
-    public static void prepareSendingDocument(String path, String originalPath, Uri uri, String mine, long dialog_id) {
+    public static void prepareSendingDocument(String path, String originalPath, Uri uri, String mine, long dialog_id, MessageObject reply_to_msg) {
         if ((path == null || originalPath == null) && uri == null) {
             return;
         }
@@ -1673,10 +1840,10 @@ public static void prepareSendingDocument(String path, String originalPath, Uri
         }
         paths.add(path);
         originalPaths.add(originalPath);
-        prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id);
+        prepareSendingDocuments(paths, originalPaths, uris, mine, dialog_id, reply_to_msg);
     }
 
-    public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id) {
+    public static void prepareSendingDocuments(final ArrayList<String> paths, final ArrayList<String> originalPaths, final ArrayList<Uri> uris, final String mime, final long dialog_id, final MessageObject reply_to_msg) {
         if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
             return;
         }
@@ -1686,14 +1853,14 @@ public void run() {
                 boolean error = false;
                 if (paths != null) {
                     for (int a = 0; a < paths.size(); a++) {
-                        if (!prepareSendingDocumentInternal(paths.get(a), originalPaths.get(a), null, mime, dialog_id)) {
+                        if (!prepareSendingDocumentInternal(paths.get(a), originalPaths.get(a), null, mime, dialog_id, reply_to_msg)) {
                             error = true;
                         }
                     }
                 }
                 if (uris != null) {
                     for (int a = 0; a < uris.size(); a++) {
-                        if (!prepareSendingDocumentInternal(null, null, uris.get(a), mime, dialog_id)) {
+                        if (!prepareSendingDocumentInternal(null, null, uris.get(a), mime, dialog_id, reply_to_msg)) {
                             error = true;
                         }
                     }
@@ -1715,7 +1882,7 @@ public void run() {
         }).start();
     }
 
-    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id) {
+    public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long dialog_id, MessageObject reply_to_msg) {
         ArrayList<String> paths = null;
         ArrayList<Uri> uris = null;
         if (imageFilePath != null && imageFilePath.length() != 0) {
@@ -1726,10 +1893,10 @@ public static void prepareSendingPhoto(String imageFilePath, Uri imageUri, long
             uris = new ArrayList<>();
             uris.add(imageUri);
         }
-        prepareSendingPhotos(paths, uris, dialog_id);
+        prepareSendingPhotos(paths, uris, dialog_id, reply_to_msg);
     }
 
-    public static void prepareSendingPhotosSearch(final ArrayList<MediaController.SearchImage> photos, final long dialog_id) {
+    public static void prepareSendingPhotosSearch(final ArrayList<MediaController.SearchImage> photos, final long dialog_id, final MessageObject reply_to_msg) {
         if (photos == null || photos.isEmpty()) {
             return;
         }
@@ -1791,7 +1958,7 @@ public void run() {
                         AndroidUtilities.runOnUIThread(new Runnable() {
                             @Override
                             public void run() {
-                                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id);
+                                SendMessagesHelper.getInstance().sendMessage(documentFinal, originalPathFinal, pathFinal, dialog_id, reply_to_msg);
                             }
                         });
                     } else {
@@ -1834,7 +2001,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, needDownloadHttpFinal ? searchImage.imageUrl : null, dialog_id, reply_to_msg);
                                 }
                             });
                         }
@@ -1844,7 +2011,7 @@ public void run() {
         }).start();
     }
 
-    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id) {
+    public static void prepareSendingPhotos(ArrayList<String> paths, ArrayList<Uri> uris, final long dialog_id, final MessageObject reply_to_msg) {
         if (paths == null && uris == null || paths != null && paths.isEmpty() || uris != null && uris.isEmpty()) {
             return;
         }
@@ -1925,7 +2092,7 @@ public void run() {
                             AndroidUtilities.runOnUIThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, null, dialog_id);
+                                    SendMessagesHelper.getInstance().sendMessage(photoFinal, originalPathFinal, null, dialog_id, reply_to_msg);
                                 }
                             });
                         }
@@ -1933,14 +2100,14 @@ public void run() {
                 }
                 if (sendAsDocuments != null && !sendAsDocuments.isEmpty()) {
                     for (int a = 0; a < sendAsDocuments.size(); a++) {
-                        prepareSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a), null, "gif", dialog_id);
+                        prepareSendingDocumentInternal(sendAsDocuments.get(a), sendAsDocumentsOriginal.get(a), null, "gif", dialog_id, reply_to_msg);
                     }
                 }
             }
         }).start();
     }
 
-    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final TLRPC.VideoEditedInfo videoEditedInfo, final long dialog_id) {
+    public static void prepareSendingVideo(final String videoPath, final long estimatedSize, final long duration, final int width, final int height, final TLRPC.VideoEditedInfo videoEditedInfo, final long dialog_id, final MessageObject reply_to_msg) {
         if (videoPath == null || videoPath.length() == 0) {
             return;
         }
@@ -1957,6 +2124,9 @@ public void run() {
                     originalPath += temp.length() + "_" + temp.lastModified();
                     if (videoEditedInfo != null) {
                         originalPath += duration + "_" + videoEditedInfo.startTime + "_" + videoEditedInfo.endTime;
+                        if (videoEditedInfo.resultWidth == videoEditedInfo.originalWidth) {
+                            originalPath += "_" + videoEditedInfo.resultWidth;
+                        }
                     }
                     TLRPC.TL_video video = null;
                     if (!isEncrypted) {
@@ -2051,11 +2221,11 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            SendMessagesHelper.getInstance().sendMessage(videoFinal, originalPathFinal, finalPath, dialog_id);
+                            SendMessagesHelper.getInstance().sendMessage(videoFinal, originalPathFinal, finalPath, dialog_id, reply_to_msg);
                         }
                     });
                 } else {
-                    prepareSendingDocumentInternal(videoPath, videoPath, null, null, dialog_id);
+                    prepareSendingDocumentInternal(videoPath, videoPath, null, null, dialog_id, reply_to_msg);
                 }
             }
         }).start();
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
index c4470fa41..78e179605 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
@@ -51,11 +51,11 @@ public void onReceive(Context context, Intent intent) {
                                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.didReceiveSmsCode, matcher.group(0));
                             }
                         }
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         FileLog.e("tmessages", e);
                     }
 
-                } catch(Exception e) {
+                } catch(Throwable e) {
                     FileLog.e("tmessages", e);
                 }
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
index 9e32dc6a6..e94dc43c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
@@ -31,7 +31,7 @@ public void onReceive(Context context, Intent intent) {
         if (dialog_id == 0 || max_id == 0) {
             return;
         }
-        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id);
+        SendMessagesHelper.getInstance().sendMessage(text.toString(), dialog_id, null);
         MessagesController.getInstance().markDialogAsRead(dialog_id, max_id, max_id, 0, 0, true, false);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java b/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java
new file mode 100644
index 000000000..da9717dd1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/android/query/ReplyMessageQuery.java
@@ -0,0 +1,185 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.android.query;
+
+import android.text.TextUtils;
+
+import org.telegram.SQLite.SQLiteCursor;
+import org.telegram.SQLite.SQLitePreparedStatement;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ImageLoader;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.NotificationCenter;
+import org.telegram.messenger.ByteBufferDesc;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLClassStore;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class ReplyMessageQuery {
+
+    public static void loadReplyMessagesForMessages(final ArrayList<MessageObject> messages, final long dialog_id) {
+        final ArrayList<Integer> replyMessages = new ArrayList<>();
+        final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners = new HashMap<>();
+        for (MessageObject messageObject : messages) {
+            if (messageObject.getId() > 0 && messageObject.isReply() && messageObject.replyMessageObject == null) {
+                Integer id = messageObject.messageOwner.reply_to_msg_id;
+                ArrayList<MessageObject> messageObjects = replyMessageOwners.get(id);
+                if (messageObjects == null) {
+                    messageObjects = new ArrayList<>();
+                    replyMessageOwners.put(id, messageObjects);
+                }
+                messageObjects.add(messageObject);
+                if (!replyMessages.contains(id)) {
+                    replyMessages.add(id);
+                }
+            }
+        }
+        if (replyMessages.isEmpty()) {
+            return;
+        }
+
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    final ArrayList<TLRPC.Message> result = new ArrayList<>();
+                    final ArrayList<TLRPC.User> users = new ArrayList<>();
+                    ArrayList<Integer> loadedUsers = new ArrayList<>();
+                    ArrayList<Integer> fromUser = new ArrayList<>();
+
+                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid IN(%s)", TextUtils.join(",", replyMessages)));
+                    while (cursor.next()) {
+                        ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                        if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                            TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            message.id = cursor.intValue(1);
+                            message.date = cursor.intValue(2);
+                            message.dialog_id = dialog_id;
+                            fromUser.add(message.from_id);
+                            if (message.action != null && message.action.user_id != 0) {
+                                fromUser.add(message.action.user_id);
+                            }
+                            if (message.media != null && message.media.user_id != 0) {
+                                fromUser.add(message.media.user_id);
+                            }
+                            if (message.media != null && message.media.audio != null && message.media.audio.user_id != 0) {
+                                fromUser.add(message.media.audio.user_id);
+                            }
+                            if (message.fwd_from_id != 0) {
+                                fromUser.add(message.fwd_from_id);
+                            }
+                            result.add(message);
+                            replyMessages.remove((Integer) message.id);
+                        }
+                        MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                    }
+                    cursor.dispose();
+
+                    StringBuilder usersToLoad = new StringBuilder();
+                    for (int uid : fromUser) {
+                        if (!loadedUsers.contains(uid)) {
+                            if (usersToLoad.length() != 0) {
+                                usersToLoad.append(",");
+                            }
+                            usersToLoad.append(uid);
+                            loadedUsers.add(uid);
+                        }
+                    }
+                    if (usersToLoad.length() != 0) {
+                        MessagesStorage.getInstance().getUsersInternal(usersToLoad.toString(), users);
+                    }
+                    broadcastReplyMessages(result, replyMessageOwners, users, dialog_id);
+
+                    if (!replyMessages.isEmpty()) {
+                        TLRPC.TL_messages_getMessages req = new TLRPC.TL_messages_getMessages();
+                        req.id = replyMessages;
+                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+                                if (error == null) {
+                                    TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
+                                    ImageLoader.saveMessagesThumbs(messagesRes.messages);
+                                    broadcastReplyMessages(messagesRes.messages, replyMessageOwners, messagesRes.users, dialog_id);
+                                    MessagesStorage.getInstance().putUsersAndChats(messagesRes.users, null, true, true);
+                                    saveReplyMessages(replyMessageOwners, messagesRes.messages);
+                                }
+                            }
+                        });
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    private static void saveReplyMessages(final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners, final ArrayList<TLRPC.Message> result) {
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    MessagesStorage.getInstance().getDatabase().beginTransaction();
+                    SQLitePreparedStatement state = MessagesStorage.getInstance().getDatabase().executeFast("UPDATE messages SET replydata = ? WHERE mid = ?");
+                    for (TLRPC.Message message : result) {
+                        ArrayList<MessageObject> messageObjects = replyMessageOwners.get(message.id);
+                        if (messageObjects != null) {
+                            ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(message.getObjectSize());
+                            message.serializeToStream(data);
+                            for (MessageObject messageObject : messageObjects) {
+                                state.requery();
+                                state.bindByteBuffer(1, data.buffer);
+                                state.bindInteger(2, messageObject.getId());
+                                state.step();
+                            }
+                            MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                        }
+                    }
+                    state.dispose();
+                    MessagesStorage.getInstance().getDatabase().commitTransaction();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    private static void broadcastReplyMessages(final ArrayList<TLRPC.Message> result, final HashMap<Integer, ArrayList<MessageObject>> replyMessageOwners, ArrayList<TLRPC.User> users, final long dialog_id) {
+        final HashMap<Integer, TLRPC.User> usersHashMap = new HashMap<>();
+        for (TLRPC.User user : users) {
+            usersHashMap.put(user.id, user);
+        }
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                boolean changed = false;
+                for (TLRPC.Message message : result) {
+                    ArrayList<MessageObject> arrayList = replyMessageOwners.get(message.id);
+                    if (arrayList != null) {
+                        MessageObject messageObject = new MessageObject(message, usersHashMap, false);
+                        for (MessageObject m : arrayList) {
+                            m.replyMessageObject = messageObject;
+                        }
+                        changed = true;
+                    }
+                }
+                if (changed) {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.didLoadedReplyMessages, dialog_id);
+                }
+            }
+        });
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/Cache.java b/TMessagesProj/src/main/java/org/telegram/android/volley/Cache.java
index e64e69b2a..90433e7ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/Cache.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/Cache.java
@@ -28,43 +28,43 @@
      * @param key Cache key
      * @return An {@link Entry} or null in the event of a cache miss
      */
-    public Entry get(String key);
+    Entry get(String key);
 
     /**
      * Adds or replaces an entry to the cache.
      * @param key Cache key
      * @param entry Data to store and metadata for cache coherency, TTL, etc.
      */
-    public void put(String key, Entry entry);
+    void put(String key, Entry entry);
 
     /**
      * Performs any potentially long-running actions needed to initialize the cache;
      * will be called from a worker thread.
      */
-    public void initialize();
+    void initialize();
 
     /**
      * Invalidates an entry in the cache.
      * @param key Cache key
      * @param fullExpire True to fully expire the entry, false to soft expire
      */
-    public void invalidate(String key, boolean fullExpire);
+    void invalidate(String key, boolean fullExpire);
 
     /**
      * Removes an entry from the cache.
      * @param key Cache key
      */
-    public void remove(String key);
+    void remove(String key);
 
     /**
      * Empties the cache.
      */
-    public void clear();
+    void clear();
 
     /**
      * Data and metadata for an entry returned by the cache.
      */
-    public static class Entry {
+    class Entry {
         /** The data returned from cache. */
         public byte[] data;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/Network.java b/TMessagesProj/src/main/java/org/telegram/android/volley/Network.java
index ac3c24b12..f43165409 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/Network.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/Network.java
@@ -26,5 +26,5 @@
      * @return A {@link NetworkResponse} with data and caching metadata; will never be null
      * @throws VolleyError on errors
      */
-    public NetworkResponse performRequest(Request<?> request) throws VolleyError;
+    NetworkResponse performRequest(Request<?> request) throws VolleyError;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/RequestQueue.java b/TMessagesProj/src/main/java/org/telegram/android/volley/RequestQueue.java
index bec780aec..869c29965 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/RequestQueue.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/RequestQueue.java
@@ -175,7 +175,7 @@ public Cache getCache() {
      * {@link RequestQueue#cancelAll(RequestFilter)}.
      */
     public interface RequestFilter {
-        public boolean apply(Request<?> request);
+        boolean apply(Request<?> request);
     }
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/Response.java b/TMessagesProj/src/main/java/org/telegram/android/volley/Response.java
index c2dd5419e..af7d96f69 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/Response.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/Response.java
@@ -26,7 +26,7 @@
     /** Callback interface for delivering parsed responses. */
     public interface Listener<T> {
         /** Called when a response is received. */
-        public void onResponse(T response);
+        void onResponse(T response);
     }
 
     /** Callback interface for delivering error responses. */
@@ -35,7 +35,7 @@
          * Callback method that an error has been occurred with the
          * provided error code and optional user-readable message.
          */
-        public void onErrorResponse(VolleyError error);
+        void onErrorResponse(VolleyError error);
     }
 
     /** Returns a successful response containing the parsed result. */
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/ResponseDelivery.java b/TMessagesProj/src/main/java/org/telegram/android/volley/ResponseDelivery.java
index 6eb35eb12..9ad24f355 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/ResponseDelivery.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/ResponseDelivery.java
@@ -20,16 +20,16 @@
     /**
      * Parses a response from the network or cache and delivers it.
      */
-    public void postResponse(Request<?> request, Response<?> response);
+    void postResponse(Request<?> request, Response<?> response);
 
     /**
      * Parses a response from the network or cache and delivers it. The provided
      * Runnable will be executed after delivery.
      */
-    public void postResponse(Request<?> request, Response<?> response, Runnable runnable);
+    void postResponse(Request<?> request, Response<?> response, Runnable runnable);
 
     /**
      * Posts an error for the given request.
      */
-    public void postError(Request<?> request, VolleyError error);
+    void postError(Request<?> request, VolleyError error);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/RetryPolicy.java b/TMessagesProj/src/main/java/org/telegram/android/volley/RetryPolicy.java
index 7218777a1..c2c1d24d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/RetryPolicy.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/RetryPolicy.java
@@ -24,12 +24,12 @@
     /**
      * Returns the current timeout (used for logging).
      */
-    public int getCurrentTimeout();
+    int getCurrentTimeout();
 
     /**
      * Returns the current retry count (used for logging).
      */
-    public int getCurrentRetryCount();
+    int getCurrentRetryCount();
 
     /**
      * Prepares for the next retry by applying a backoff to the timeout.
@@ -37,5 +37,5 @@
      * @throws VolleyError In the event that the retry could not be performed (for example if we
      * ran out of attempts), the passed in error is thrown.
      */
-    public void retry(VolleyError error) throws VolleyError;
+    void retry(VolleyError error) throws VolleyError;
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/Authenticator.java b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/Authenticator.java
index e87dfc100..f0d4845b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/Authenticator.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/Authenticator.java
@@ -27,10 +27,10 @@
      *
      * @throws AuthFailureError If authentication did not succeed
      */
-    public String getAuthToken() throws AuthFailureError;
+    String getAuthToken() throws AuthFailureError;
 
     /**
      * Invalidates the provided auth token.
      */
-    public void invalidateAuthToken(String authToken);
+    void invalidateAuthToken(String authToken);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HttpStack.java b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HttpStack.java
index 74a326d9e..97816eda7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HttpStack.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HttpStack.java
@@ -38,7 +38,7 @@
      *         {@link Request#getHeaders()}
      * @return the HTTP response
      */
-    public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)
+    HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders)
         throws IOException, AuthFailureError;
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HurlStack.java b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HurlStack.java
index 435fd675c..e374fbaf4 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HurlStack.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/HurlStack.java
@@ -56,7 +56,7 @@
          * Returns a URL to use instead of the provided one, or null to indicate
          * this URL should not be used at all.
          */
-        public String rewriteUrl(String originalUrl);
+        String rewriteUrl(String originalUrl);
     }
 
     private final UrlRewriter mUrlRewriter;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/ImageLoader.java
index 64105a84f..f22b65d80 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/volley/toolbox/ImageLoader.java
@@ -71,8 +71,8 @@
      * must not block. Implementation with an LruCache is recommended.
      */
     public interface ImageCache {
-        public Bitmap getBitmap(String url);
-        public void putBitmap(String url, Bitmap bitmap);
+        Bitmap getBitmap(String url);
+        void putBitmap(String url, Bitmap bitmap);
     }
 
     /**
@@ -138,7 +138,7 @@ public void onResponse(ImageContainer response, boolean isImmediate) {
          * image loading in order to, for example, run an animation to fade in network loaded
          * images.
          */
-        public void onResponse(ImageContainer response, boolean isImmediate);
+        void onResponse(ImageContainer response, boolean isImmediate);
     }
 
     /**
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 487f019cc..0149b8340 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -480,7 +480,7 @@ private void fillDatacenters() {
 
                 datacenter = new Datacenter();
                 datacenter.datacenterId = 3;
-                datacenter.addAddressAndPort("174.140.142.5", 443);
+                datacenter.addAddressAndPort("149.154.175.117", 443);
                 datacenters.put(datacenter.datacenterId, datacenter);
             }
         } else if (datacenters.size() == 1) {
@@ -646,8 +646,7 @@ long getTimeFromMsgId(long messageId) {
     int lastClassGuid = 1;
     public int generateClassGuid() {
         int guid = lastClassGuid++;
-        ArrayList<Long> requests = new ArrayList<>();
-        requestsByGuids.put(guid, requests);
+        requestsByGuids.put(guid, new ArrayList<Long>());
         return guid;
     }
 
@@ -2155,7 +2154,7 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
                                 implicitError.code = ((TLRPC.RpcError)resultContainer.result).error_code;
                                 implicitError.text = ((TLRPC.RpcError)resultContainer.result).error_message;
                             } else if (!(resultContainer.result instanceof TLRPC.TL_error)) {
-                                if (request.rawRequest == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {
+                                if (request.rawRequest == null || resultContainer.result == null || !request.rawRequest.responseClass().isAssignableFrom(resultContainer.result.getClass())) {
                                     if (request.rawRequest == null) {
                                         FileLog.e("tmessages", "rawRequest is null");
                                     } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 462098cc7..62f217442 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -54,10 +54,10 @@
     private File tempPath = null;
     private boolean isForceRequest = false;
 
-    public static interface FileLoadOperationDelegate {
-        public abstract void didFinishLoadingFile(FileLoadOperation operation, File finalFile);
-        public abstract void didFailedLoadingFile(FileLoadOperation operation, int state);
-        public abstract void didChangedLoadProgress(FileLoadOperation operation, float progress);
+    public interface FileLoadOperationDelegate {
+        void didFinishLoadingFile(FileLoadOperation operation, File finalFile);
+        void didFailedLoadingFile(FileLoadOperation operation, int state);
+        void didChangedLoadProgress(FileLoadOperation operation, float progress);
     }
 
     public FileLoadOperation(TLRPC.FileLocation photoLocation, int size) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 74afae274..af3ae922c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -19,13 +19,13 @@
 
 public class FileLoader {
 
-    public static interface FileLoaderDelegate {
-        public abstract void fileUploadProgressChanged(String location, float progress, boolean isEncrypted);
-        public abstract void fileDidUploaded(String location, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
-        public abstract void fileDidFailedUpload(String location, boolean isEncrypted);
-        public abstract void fileDidLoaded(String location, File finalFile, int type);
-        public abstract void fileDidFailedLoad(String location, int state);
-        public abstract void fileLoadProgressChanged(String location, float progress);
+    public interface FileLoaderDelegate {
+        void fileUploadProgressChanged(String location, float progress, boolean isEncrypted);
+        void fileDidUploaded(String location, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
+        void fileDidFailedUpload(String location, boolean isEncrypted);
+        void fileDidLoaded(String location, File finalFile, int type);
+        void fileDidFailedLoad(String location, int state);
+        void fileLoadProgressChanged(String location, float progress);
     }
 
     public static final int MEDIA_DIR_IMAGE = 0;
@@ -132,6 +132,9 @@ public void uploadFile(final String location, final boolean encrypted, final boo
     }
 
     public void uploadFile(final String location, final boolean encrypted, final boolean small, final int estimatedSize) {
+        if (location == null) {
+            return;
+        }
         fileLoaderQueue.postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -628,7 +631,7 @@ public static File getPathToAttach(TLObject attach, boolean forceCache) {
     }
 
     public static TLRPC.PhotoSize getClosestPhotoSizeWithSize(ArrayList<TLRPC.PhotoSize> sizes, int side) {
-        if (sizes == null) {
+        if (sizes == null || sizes.isEmpty()) {
             return null;
         }
         int lastSide = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
index 3d01798f4..e72408acc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
@@ -181,7 +181,7 @@ public void run() {
     }
 
     public static void cleanupLogs() {
-        ArrayList<Uri> uris = new ArrayList<Uri>();
+        ArrayList<Uri> uris = new ArrayList<>();
         File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
         File dir = new File (sdCard.getAbsolutePath() + "/logs");
         File[] files = dir.listFiles();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 6bf1f236f..6048711dc 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -45,10 +45,10 @@
     private MessageDigest mdEnc = null;
     private boolean started = false;
 
-    public static interface FileUploadOperationDelegate {
-        public abstract void didFinishUploadingFile(FileUploadOperation operation, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
-        public abstract void didFailedUploadingFile(FileUploadOperation operation);
-        public abstract void didChangedUploadProgress(FileUploadOperation operation, float progress);
+    public interface FileUploadOperationDelegate {
+        void didFinishUploadingFile(FileUploadOperation operation, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile);
+        void didFailedUploadingFile(FileUploadOperation operation);
+        void didChangedUploadProgress(FileUploadOperation operation, float progress);
     }
 
     public FileUploadOperation(String location, boolean encrypted, int estimated) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
index a2d747a2a..c25869052 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
@@ -61,7 +61,6 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_account_privacyRules.constructor, TLRPC.TL_account_privacyRules.class);
         classStore.put(TLRPC.TL_help_appUpdate.constructor, TLRPC.TL_help_appUpdate.class);
         classStore.put(TLRPC.TL_help_noAppUpdate.constructor, TLRPC.TL_help_noAppUpdate.class);
-        classStore.put(TLRPC.TL_messageForwarded.constructor, TLRPC.TL_messageForwarded.class);
         classStore.put(TLRPC.TL_messageEmpty.constructor, TLRPC.TL_messageEmpty.class);
         classStore.put(TLRPC.TL_message.constructor, TLRPC.TL_message.class);
         classStore.put(TLRPC.TL_messageService.constructor, TLRPC.TL_messageService.class);
@@ -157,9 +156,6 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_messageActionChatEditTitle.constructor, TLRPC.TL_messageActionChatEditTitle.class);
         classStore.put(TLRPC.TL_messageActionGeoChatCreate.constructor, TLRPC.TL_messageActionGeoChatCreate.class);
         classStore.put(TLRPC.TL_messageActionGeoChatCheckin.constructor, TLRPC.TL_messageActionGeoChatCheckin.class);
-        classStore.put(TLRPC.TL_contacts_foreignLinkMutual.constructor, TLRPC.TL_contacts_foreignLinkMutual.class);
-        classStore.put(TLRPC.TL_contacts_foreignLinkUnknown.constructor, TLRPC.TL_contacts_foreignLinkUnknown.class);
-        classStore.put(TLRPC.TL_contacts_foreignLinkRequested.constructor, TLRPC.TL_contacts_foreignLinkRequested.class);
         classStore.put(TLRPC.TL_dh_gen_retry.constructor, TLRPC.TL_dh_gen_retry.class);
         classStore.put(TLRPC.TL_dh_gen_fail.constructor, TLRPC.TL_dh_gen_fail.class);
         classStore.put(TLRPC.TL_dh_gen_ok.constructor, TLRPC.TL_dh_gen_ok.class);
@@ -222,7 +218,6 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_updateContactLink.constructor, TLRPC.TL_updateContactLink.class);
         classStore.put(TLRPC.TL_updateReadMessages.constructor, TLRPC.TL_updateReadMessages.class);
         classStore.put(TLRPC.TL_updateChatParticipantDelete.constructor, TLRPC.TL_updateChatParticipantDelete.class);
-        classStore.put(TLRPC.TL_updateRestoreMessages.constructor, TLRPC.TL_updateRestoreMessages.class);
         classStore.put(TLRPC.TL_updateServiceNotification.constructor, TLRPC.TL_updateServiceNotification.class);
         classStore.put(TLRPC.TL_updateNotifySettings.constructor, TLRPC.TL_updateNotifySettings.class);
         classStore.put(TLRPC.TL_updateUserTyping.constructor, TLRPC.TL_updateUserTyping.class);
@@ -260,9 +255,6 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_decryptedMessageActionTyping.constructor, TLRPC.TL_decryptedMessageActionTyping.class);
         classStore.put(TLRPC.TL_decryptedMessageActionReadMessages.constructor, TLRPC.TL_decryptedMessageActionReadMessages.class);
         classStore.put(TLRPC.TL_decryptedMessageActionScreenshotMessages.constructor, TLRPC.TL_decryptedMessageActionScreenshotMessages.class);
-        classStore.put(TLRPC.TL_contacts_myLinkRequested.constructor, TLRPC.TL_contacts_myLinkRequested.class);
-        classStore.put(TLRPC.TL_contacts_myLinkContact.constructor, TLRPC.TL_contacts_myLinkContact.class);
-        classStore.put(TLRPC.TL_contacts_myLinkEmpty.constructor, TLRPC.TL_contacts_myLinkEmpty.class);
         classStore.put(TLRPC.TL_server_DH_inner_data.constructor, TLRPC.TL_server_DH_inner_data.class);
         classStore.put(TLRPC.TL_new_session_created.constructor, TLRPC.TL_new_session_created.class);
         classStore.put(TLRPC.TL_account_password.constructor, TLRPC.TL_account_password.class);
@@ -341,7 +333,6 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_updateShort.constructor, TLRPC.TL_updateShort.class);
         classStore.put(TLRPC.TL_updatesCombined.constructor, TLRPC.TL_updatesCombined.class);
         classStore.put(TLRPC.TL_updatesTooLong.constructor, TLRPC.TL_updatesTooLong.class);
-        classStore.put(TLRPC.TL_messages_chat.constructor, TLRPC.TL_messages_chat.class);
         classStore.put(TLRPC.TL_wallPaper.constructor, TLRPC.TL_wallPaper.class);
         classStore.put(TLRPC.TL_wallPaperSolid.constructor, TLRPC.TL_wallPaperSolid.class);
         classStore.put(TLRPC.TL_msg_new_detailed_info.constructor, TLRPC.TL_msg_new_detailed_info.class);
@@ -379,7 +370,16 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_decryptedMessageActionAbortKey.constructor, TLRPC.TL_decryptedMessageActionAbortKey.class);
         classStore.put(TLRPC.TL_decryptedMessageActionNoop.constructor, TLRPC.TL_decryptedMessageActionNoop.class);
         classStore.put(TLRPC.TL_decryptedMessageMediaExternalDocument.constructor, TLRPC.TL_decryptedMessageMediaExternalDocument.class);
+        classStore.put(TLRPC.TL_updateReadHistoryInbox.constructor, TLRPC.TL_updateReadHistoryInbox.class);
+        classStore.put(TLRPC.TL_updateReadHistoryOutbox.constructor, TLRPC.TL_updateReadHistoryOutbox.class);
+        classStore.put(TLRPC.TL_contactLinkUnknown.constructor, TLRPC.TL_contactLinkUnknown.class);
+        classStore.put(TLRPC.TL_contactLinkNone.constructor, TLRPC.TL_contactLinkNone.class);
+        classStore.put(TLRPC.TL_contactLinkHasPhone.constructor, TLRPC.TL_contactLinkHasPhone.class);
+        classStore.put(TLRPC.TL_contactLinkContact.constructor, TLRPC.TL_contactLinkContact.class);
+        classStore.put(TLRPC.TL_messages_affectedMessages.constructor, TLRPC.TL_messages_affectedMessages.class);
 
+        classStore.put(TLRPC.TL_messageMediaUnsupported_old.constructor, TLRPC.TL_messageMediaUnsupported_old.class);
+        classStore.put(TLRPC.TL_userSelf_old2.constructor, TLRPC.TL_userSelf_old2.class);
         classStore.put(TLRPC.TL_msg_container.constructor, TLRPC.TL_msg_container.class);
         classStore.put(TLRPC.TL_fileEncryptedLocation.constructor, TLRPC.TL_fileEncryptedLocation.class);
         classStore.put(TLRPC.TL_messageActionTTLChange.constructor, TLRPC.TL_messageActionTTLChange.class);
@@ -415,6 +415,9 @@ public TLClassStore () {
         classStore.put(TLRPC.TL_documentEncrypted_old.constructor, TLRPC.TL_documentEncrypted_old.class);
         classStore.put(TLRPC.TL_document_old.constructor, TLRPC.TL_document_old.class);
         classStore.put(TLRPC.TL_config_old.constructor, TLRPC.TL_config_old.class);
+        classStore.put(TLRPC.TL_messageForwarded_old2.constructor, TLRPC.TL_messageForwarded_old2.class);
+        classStore.put(TLRPC.TL_message_old2.constructor, TLRPC.TL_message_old2.class);
+        classStore.put(TLRPC.TL_documentAttributeSticker_old.constructor, TLRPC.TL_documentAttributeSticker_old.class);
     }
 
     static TLClassStore store = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index 6ce1e5194..cd766543f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -16,7 +16,10 @@
 
     public static final int MESSAGE_FLAG_UNREAD = 1;
     public static final int MESSAGE_FLAG_OUT = 2;
-    public static final int LAYER = 23;
+    public static final int MESSAGE_FLAG_FWD = 4;
+    public static final int MESSAGE_FLAG_REPLY = 8;
+    public static final int MESSAGE_FLAG_MENTION = 16;
+    public static final int LAYER = 25;
 
     public static class ChatPhoto extends TLObject {
         public FileLocation photo_small;
@@ -192,20 +195,17 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_auth_checkedPhone extends TLObject {
-        public static int constructor = 0xe300cc3b;
+        public static int constructor = 0x811ea28e;
 
         public boolean phone_registered;
-        public boolean phone_invited;
 
         public void readParams(AbsSerializedData stream) {
             phone_registered = stream.readBool();
-            phone_invited = stream.readBool();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stream.writeBool(phone_registered);
-            stream.writeBool(phone_invited);
         }
     }
 
@@ -275,6 +275,7 @@ public void serializeToStream(AbsSerializedData stream) {
     public static class DocumentAttribute extends TLObject {
         public int duration;
         public String file_name;
+        public String alt;
         public int w;
         public int h;
     }
@@ -335,11 +336,16 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_documentAttributeSticker extends DocumentAttribute {
-        public static int constructor = 0xfb0a5727;
+        public static int constructor = 0x994c9882;
+
 
+        public void readParams(AbsSerializedData stream) {
+            alt = stream.readString();
+        }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
+            stream.writeString(alt);
         }
     }
 
@@ -537,15 +543,15 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_contacts_link extends TLObject {
-        public static int constructor = 0xeccea3f5;
+        public static int constructor = 0x3ace484c;
 
-        public contacts_MyLink my_link;
-        public contacts_ForeignLink foreign_link;
+        public ContactLink my_link;
+        public ContactLink foreign_link;
         public User user;
 
         public void readParams(AbsSerializedData stream) {
-            my_link = (contacts_MyLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
-            foreign_link = (contacts_ForeignLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            my_link = (ContactLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            foreign_link = (ContactLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             user = (User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
         }
 
@@ -629,6 +635,24 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_messages_affectedMessages extends TLObject {
+        public static int constructor = 0x84d19185;
+
+        public int pts;
+        public int pts_count;
+
+        public void readParams(AbsSerializedData stream) {
+            pts = stream.readInt32();
+            pts_count = stream.readInt32();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
+        }
+    }
+
     public static class DestroySessionRes extends TLObject {
         public long session_id;
     }
@@ -1200,16 +1224,11 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messageMediaUnsupported extends MessageMedia {
-        public static int constructor = 0x29632a36;
+        public static int constructor = 0x9f84f49e;
 
 
-        public void readParams(AbsSerializedData stream) {
-            bytes = stream.readByteArray();
-        }
-
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
-            stream.writeByteArray(bytes);
         }
     }
 
@@ -2020,13 +2039,14 @@ public void serializeToStream(AbsSerializedData stream) {
         public ArrayList<Message> messages = new ArrayList<>();
         public ArrayList<Chat> chats = new ArrayList<>();
         public ArrayList<User> users = new ArrayList<>();
-        public ArrayList<TL_contacts_link> links = new ArrayList<>();
         public int pts;
+        public int pts_count;
+        public ArrayList<TL_contacts_link> links = new ArrayList<>();
         public int seq;
     }
 
     public static class TL_messages_statedMessagesLinks extends messages_StatedMessages {
-        public static int constructor = 0x3e74f5c6;
+        public static int constructor = 0x51be5d19;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -2045,12 +2065,13 @@ public void readParams(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
+            pts = stream.readInt32();
+            pts_count = stream.readInt32();
             stream.readInt32();
             count = stream.readInt32();
             for (int a = 0; a < count; a++) {
                 links.add((TL_contacts_link)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
-            pts = stream.readInt32();
             seq = stream.readInt32();
         }
 
@@ -2074,19 +2095,20 @@ public void serializeToStream(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 users.get(a).serializeToStream(stream);
             }
+            stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
             stream.writeInt32(0x1cb5c415);
             count = links.size();
             stream.writeInt32(count);
             for (int a = 0; a < count; a++) {
                 links.get(a).serializeToStream(stream);
             }
-            stream.writeInt32(pts);
             stream.writeInt32(seq);
         }
     }
 
     public static class TL_messages_statedMessages extends messages_StatedMessages {
-        public static int constructor = 0x969478bb;
+        public static int constructor = 0x7d84b48;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -2106,7 +2128,7 @@ public void readParams(AbsSerializedData stream) {
                 users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
             pts = stream.readInt32();
-            seq = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -2130,7 +2152,7 @@ public void serializeToStream(AbsSerializedData stream) {
                 users.get(a).serializeToStream(stream);
             }
             stream.writeInt32(pts);
-            stream.writeInt32(seq);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -2414,7 +2436,7 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_userSelf extends User {
-        public static int constructor = 0x7007b451;
+        public static int constructor = 0x1c60e608;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -2425,7 +2447,6 @@ public void readParams(AbsSerializedData stream) {
             phone = stream.readString();
             photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
-            inactive = stream.readBool();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -2437,7 +2458,6 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeString(phone);
             photo.serializeToStream(stream);
             status.serializeToStream(stream);
-            stream.writeBool(inactive);
         }
     }
 
@@ -2655,42 +2675,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class contacts_ForeignLink extends TLObject {
-        public boolean has_phone;
-    }
-
-    public static class TL_contacts_foreignLinkMutual extends contacts_ForeignLink {
-        public static int constructor = 0x1bea8ce1;
-
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
-    public static class TL_contacts_foreignLinkUnknown extends contacts_ForeignLink {
-        public static int constructor = 0x133421f8;
-
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
-    public static class TL_contacts_foreignLinkRequested extends contacts_ForeignLink {
-        public static int constructor = 0xa7801f47;
-
-
-        public void readParams(AbsSerializedData stream) {
-            has_phone = stream.readBool();
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeBool(has_phone);
-        }
-    }
-
     public static class Set_client_DH_params_answer extends TLObject {
         public byte[] nonce;
         public byte[] server_nonce;
@@ -3005,22 +2989,22 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_affectedHistory extends TLObject {
-        public static int constructor = 0xb7de36f2;
+        public static int constructor = 0xb45c69d1;
 
         public int pts;
-        public int seq;
+        public int pts_count;
         public int offset;
 
         public void readParams(AbsSerializedData stream) {
             pts = stream.readInt32();
-            seq = stream.readInt32();
+            pts_count = stream.readInt32();
             offset = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             stream.writeInt32(pts);
-            stream.writeInt32(seq);
+            stream.writeInt32(pts_count);
             stream.writeInt32(offset);
         }
     }
@@ -3076,6 +3060,45 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class ContactLink extends TLObject {
+    }
+
+    public static class TL_contactLinkNone extends ContactLink {
+        public static int constructor = 0xfeedd3ad;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_contactLinkContact extends ContactLink {
+        public static int constructor = 0xd502c2d0;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_contactLinkHasPhone extends ContactLink {
+        public static int constructor = 0x268f3f59;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_contactLinkUnknown extends ContactLink {
+        public static int constructor = 0x5f4f9247;
+
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
     public static class InputPrivacyRule extends TLObject {
         public ArrayList<InputUser> users = new ArrayList<>();
     }
@@ -3514,19 +3537,20 @@ public void serializeToStream(AbsSerializedData stream) {
         public int id;
         public int date;
         public int pts;
-        public int seq;
+        public int pts_count;
         public ArrayList<TL_contacts_link> links = new ArrayList<>();
+        public int seq;
     }
 
     public static class TL_messages_sentMessage extends messages_SentMessage {
-        public static int constructor = 0xd1f4d35c;
+        public static int constructor = 0x900eac40;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             date = stream.readInt32();
             pts = stream.readInt32();
-            seq = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3534,24 +3558,25 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeInt32(date);
             stream.writeInt32(pts);
-            stream.writeInt32(seq);
+            stream.writeInt32(pts_count);
         }
     }
 
     public static class TL_messages_sentMessageLink extends messages_SentMessage {
-        public static int constructor = 0xe9db4a3f;
+        public static int constructor = 0xe923400d;
 
 
         public void readParams(AbsSerializedData stream) {
             id = stream.readInt32();
             date = stream.readInt32();
             pts = stream.readInt32();
-            seq = stream.readInt32();
+            pts_count = stream.readInt32();
             stream.readInt32();
             int count = stream.readInt32();
             for (int a = 0; a < count; a++) {
                 links.add((TL_contacts_link)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
+            seq = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3559,13 +3584,14 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(id);
             stream.writeInt32(date);
             stream.writeInt32(pts);
-            stream.writeInt32(seq);
+            stream.writeInt32(pts_count);
             stream.writeInt32(0x1cb5c415);
             int count = links.size();
             stream.writeInt32(count);
-            for (TL_contacts_link link : links) {
-                link.serializeToStream(stream);
+            for (int a = 0; a < count; a++) {
+                links.get(a).serializeToStream(stream);
             }
+            stream.writeInt32(seq);
         }
     }
 
@@ -3787,10 +3813,12 @@ public void serializeToStream(AbsSerializedData stream) {
         public int max_date;
         public int date;
         public int user_id;
-        public contacts_MyLink my_link;
-        public contacts_ForeignLink foreign_link;
+        public ContactLink my_link;
+        public ContactLink foreign_link;
         public ArrayList<Integer> messages = new ArrayList<>();
         public int pts;
+        public int pts_count;
+        public int max_id;
         public int version;
         public String type;
         public MessageMedia media;
@@ -3801,12 +3829,12 @@ public void serializeToStream(AbsSerializedData stream) {
         public String first_name;
         public String last_name;
         public String username;
+        public String phone;
         public int qts;
         public int id;
         public long random_id;
         public ArrayList<TL_dcOption> dc_options = new ArrayList<>();
         public ChatParticipants participants;
-        public String phone;
         public TL_privacyKeyStatusTimestamp key;
         public ArrayList<PrivacyRule> rules = new ArrayList<>();
         public EncryptedChat chat;
@@ -3839,13 +3867,13 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateContactLink extends Update {
-        public static int constructor = 0x51a48a9a;
+        public static int constructor = 0x9d2e67c5;
 
 
         public void readParams(AbsSerializedData stream) {
             user_id = stream.readInt32();
-            my_link = (contacts_MyLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
-            foreign_link = (contacts_ForeignLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            my_link = (ContactLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            foreign_link = (ContactLink)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3857,7 +3885,7 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateReadMessages extends Update {
-        public static int constructor = 0xc6649e31;
+        public static int constructor = 0x2e5ab668;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -3867,6 +3895,7 @@ public void readParams(AbsSerializedData stream) {
                 messages.add(stream.readInt32());
             }
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -3874,10 +3903,32 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(0x1cb5c415);
             int count = messages.size();
             stream.writeInt32(count);
-            for (Integer message : messages) {
-                stream.writeInt32(message);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt32(messages.get(a));
             }
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
+        }
+    }
+
+    public static class TL_updateReadHistoryInbox extends Update {
+        public static int constructor = 0x9961fd5c;
+
+        public Peer peer;
+
+        public void readParams(AbsSerializedData stream) {
+            peer = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            max_id = stream.readInt32();
+            pts = stream.readInt32();
+            pts_count = stream.readInt32();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            peer.serializeToStream(stream);
+            stream.writeInt32(max_id);
+            stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -3899,28 +3950,24 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_updateRestoreMessages extends Update {
-        public static int constructor = 0xd15de04d;
+    public static class TL_updateReadHistoryOutbox extends Update {
+        public static int constructor = 0x2f2f21bf;
 
+        public Peer peer;
 
         public void readParams(AbsSerializedData stream) {
-            stream.readInt32();
-            int count = stream.readInt32();
-            for (int a = 0; a < count; a++) {
-                messages.add(stream.readInt32());
-            }
+            peer = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            max_id = stream.readInt32();
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
-            stream.writeInt32(0x1cb5c415);
-            int count = messages.size();
-            stream.writeInt32(count);
-            for (Integer message : messages) {
-                stream.writeInt32(message);
-            }
+            peer.serializeToStream(stream);
+            stream.writeInt32(max_id);
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -3984,7 +4031,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public void readParams(AbsSerializedData stream) {
             chat_id = stream.readInt32();
             user_id = stream.readInt32();
-            action = (SendMessageAction)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            action = (SendMessageAction) TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -4033,19 +4080,21 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateNewMessage extends Update {
-        public static int constructor = 0x13abdb3;
+        public static int constructor = 0x1f2b0afd;
 
         public Message message;
 
         public void readParams(AbsSerializedData stream) {
             message = (Message)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             message.serializeToStream(stream);
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -4066,8 +4115,7 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateDeleteMessages extends Update {
-        public static int constructor = 0xa92bfe26;
-
+        public static int constructor = 0xa20db0e5;
 
         public void readParams(AbsSerializedData stream) {
             stream.readInt32();
@@ -4076,6 +4124,7 @@ public void readParams(AbsSerializedData stream) {
                 messages.add(stream.readInt32());
             }
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -4083,10 +4132,11 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(0x1cb5c415);
             int count = messages.size();
             stream.writeInt32(count);
-            for (Integer message : messages) {
-                stream.writeInt32(message);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt32(messages.get(a));
             }
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -4609,42 +4659,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class contacts_MyLink extends TLObject {
-        public boolean contact;
-    }
-
-    public static class TL_contacts_myLinkRequested extends contacts_MyLink {
-        public static int constructor = 0x6c69efee;
-
-
-        public void readParams(AbsSerializedData stream) {
-            contact = stream.readBool();
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeBool(contact);
-        }
-    }
-
-    public static class TL_contacts_myLinkContact extends contacts_MyLink {
-        public static int constructor = 0xc240ebd9;
-
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
-    public static class TL_contacts_myLinkEmpty extends contacts_MyLink {
-        public static int constructor = 0xd22a1c60;
-
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-        }
-    }
-
     public static class TL_server_DH_inner_data extends TLObject {
         public static int constructor = 0xb5890dba;
 
@@ -5041,16 +5055,22 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_config extends TLObject {
-        public static int constructor = 0x7dae33e0;
+        public static int constructor = 0x3e6f732a;
 
         public int date;
         public int expires;
         public boolean test_mode;
         public int this_dc;
         public ArrayList<TL_dcOption> dc_options = new ArrayList<>();
-        public int chat_big_size;
         public int chat_size_max;
         public int broadcast_size_max;
+        public int online_update_period_ms;
+        public int offline_blur_timeout_ms;
+        public int offline_idle_timeout_ms;
+        public int online_cloud_timeout_ms;
+        public int notify_cloud_delay_ms;
+        public int notify_default_delay_ms;
+        public int chat_big_size;
         public ArrayList<TL_disabledFeature> disabled_features = new ArrayList<>();
 
         public void readParams(AbsSerializedData stream) {
@@ -5063,9 +5083,15 @@ public void readParams(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 dc_options.add((TL_dcOption)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
-            chat_big_size = stream.readInt32();
             chat_size_max = stream.readInt32();
             broadcast_size_max = stream.readInt32();
+            online_update_period_ms = stream.readInt32();
+            offline_blur_timeout_ms = stream.readInt32();
+            offline_idle_timeout_ms = stream.readInt32();
+            online_cloud_timeout_ms = stream.readInt32();
+            notify_cloud_delay_ms = stream.readInt32();
+            notify_default_delay_ms = stream.readInt32();
+            chat_big_size = stream.readInt32();
             stream.readInt32();
             count = stream.readInt32();
             for (int a = 0; a < count; a++) {
@@ -5085,9 +5111,15 @@ public void serializeToStream(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 dc_options.get(a).serializeToStream(stream);
             }
-            stream.writeInt32(chat_big_size);
             stream.writeInt32(chat_size_max);
             stream.writeInt32(broadcast_size_max);
+            stream.writeInt32(online_update_period_ms);
+            stream.writeInt32(offline_blur_timeout_ms);
+            stream.writeInt32(offline_idle_timeout_ms);
+            stream.writeInt32(online_cloud_timeout_ms);
+            stream.writeInt32(notify_cloud_delay_ms);
+            stream.writeInt32(notify_default_delay_ms);
+            stream.writeInt32(chat_big_size);
             stream.writeInt32(0x1cb5c415);
             count = disabled_features.size();
             stream.writeInt32(count);
@@ -5150,10 +5182,14 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_readMessageContents extends TLObject {
-        public static int constructor = 0x354b5bc2;
+        public static int constructor = 0x36a73f77;
 
         public ArrayList<Integer> id = new ArrayList<>();
 
+        public Class responseClass () {
+            return TL_messages_affectedMessages.class;
+        }
+
         public void readParams(AbsSerializedData stream) {
             stream.readInt32();
             int count = stream.readInt32();
@@ -5167,8 +5203,8 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(0x1cb5c415);
             int count = id.size();
             stream.writeInt32(count);
-            for (Integer anId : id) {
-                stream.writeInt32(anId);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt32(id.get(a));
             }
         }
     }
@@ -5378,6 +5414,25 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_account_updateDeviceLocked extends TLObject {
+        public static int constructor = 0x38df3532;
+
+        public int period;
+
+        public Class responseClass () {
+            return Bool.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            period = stream.readInt32();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(period);
+        }
+    }
+
     public static class TL_messages_getAllStickers extends TLObject {
         public static int constructor = 0xaa3bc868;
 
@@ -5485,10 +5540,9 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_chats extends TLObject {
-        public static int constructor = 0x8150cbd8;
+        public static int constructor = 0x64ff9fd5;
 
         public ArrayList<Chat> chats = new ArrayList<>();
-        public ArrayList<User> users = new ArrayList<>();
 
         public void readParams(AbsSerializedData stream) {
             stream.readInt32();
@@ -5496,11 +5550,6 @@ public void readParams(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 chats.add((Chat)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
-            stream.readInt32();
-            count = stream.readInt32();
-            for (int a = 0; a < count; a++) {
-                users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
-            }
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -5511,12 +5560,6 @@ public void serializeToStream(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 chats.get(a).serializeToStream(stream);
             }
-            stream.writeInt32(0x1cb5c415);
-            count = users.size();
-            stream.writeInt32(count);
-            for (int a = 0; a < count; a++) {
-                users.get(a).serializeToStream(stream);
-            }
         }
     }
 
@@ -6444,13 +6487,14 @@ public void serializeToStream(AbsSerializedData stream) {
         public Message message;
         public ArrayList<Chat> chats = new ArrayList<>();
         public ArrayList<User> users = new ArrayList<>();
-        public ArrayList<TL_contacts_link> links = new ArrayList<>();
         public int pts;
+        public int pts_count;
+        public ArrayList<TL_contacts_link> links = new ArrayList<>();
         public int seq;
     }
 
     public static class TL_messages_statedMessageLink extends messages_StatedMessage {
-        public static int constructor = 0xa9af2881;
+        public static int constructor = 0x948a288;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -6465,12 +6509,13 @@ public void readParams(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
+            pts = stream.readInt32();
+            pts_count = stream.readInt32();
             stream.readInt32();
             count = stream.readInt32();
             for (int a = 0; a < count; a++) {
                 links.add((TL_contacts_link)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
-            pts = stream.readInt32();
             seq = stream.readInt32();
         }
 
@@ -6489,19 +6534,20 @@ public void serializeToStream(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 users.get(a).serializeToStream(stream);
             }
+            stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
             stream.writeInt32(0x1cb5c415);
             count = links.size();
             stream.writeInt32(count);
             for (int a = 0; a < count; a++) {
                 links.get(a).serializeToStream(stream);
             }
-            stream.writeInt32(pts);
             stream.writeInt32(seq);
         }
     }
 
     public static class TL_messages_statedMessage extends messages_StatedMessage {
-        public static int constructor = 0xd07ae726;
+        public static int constructor = 0x96240c6a;
 
 
         public void readParams(AbsSerializedData stream) {
@@ -6517,7 +6563,7 @@ public void readParams(AbsSerializedData stream) {
                 users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
             }
             pts = stream.readInt32();
-            seq = stream.readInt32();
+            pts_count = stream.readInt32();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -6536,7 +6582,7 @@ public void serializeToStream(AbsSerializedData stream) {
                 users.get(a).serializeToStream(stream);
             }
             stream.writeInt32(pts);
-            stream.writeInt32(seq);
+            stream.writeInt32(pts_count);
         }
     }
 
@@ -6634,43 +6680,65 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class Updates extends TLObject {
+        public int flags;
         public int id;
-        public int from_id;
         public int chat_id;
         public String message;
         public int pts;
+        public int pts_count;
         public int date;
-        public int seq;
+        public int fwd_from_id;
+        public int fwd_date;
+        public int reply_to_msg_id;
         public ArrayList<Update> updates = new ArrayList<>();
         public ArrayList<User> users = new ArrayList<>();
         public ArrayList<Chat> chats = new ArrayList<>();
+        public int seq;
+        public int user_id;
         public Update update;
         public int seq_start;
+        public int qts;
     }
 
     public static class TL_updateShortChatMessage extends Updates {
-        public static int constructor = 0x2b2fbd4e;
+        public static int constructor = 0x52238b3c;
 
 
         public void readParams(AbsSerializedData stream) {
+            flags = stream.readInt32();
             id = stream.readInt32();
-            from_id = stream.readInt32();
+            user_id = stream.readInt32();
             chat_id = stream.readInt32();
             message = stream.readString();
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
             date = stream.readInt32();
-            seq = stream.readInt32();
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                fwd_from_id = stream.readInt32();
+                fwd_date = stream.readInt32();
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                reply_to_msg_id = stream.readInt32();
+            }
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
+            stream.writeInt32(flags);
             stream.writeInt32(id);
-            stream.writeInt32(from_id);
+            stream.writeInt32(user_id);
             stream.writeInt32(chat_id);
             stream.writeString(message);
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
             stream.writeInt32(date);
-            stream.writeInt32(seq);
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                stream.writeInt32(fwd_from_id);
+                stream.writeInt32(fwd_date);
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                stream.writeInt32(reply_to_msg_id);
+            }
         }
     }
 
@@ -6724,26 +6792,42 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_updateShortMessage extends Updates {
-        public static int constructor = 0xd3f45784;
+        public static int constructor = 0xed5c2127;
 
 
         public void readParams(AbsSerializedData stream) {
+            flags = stream.readInt32();
             id = stream.readInt32();
-            from_id = stream.readInt32();
+            user_id = stream.readInt32();
             message = stream.readString();
             pts = stream.readInt32();
+            pts_count = stream.readInt32();
             date = stream.readInt32();
-            seq = stream.readInt32();
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                fwd_from_id = stream.readInt32();
+                fwd_date = stream.readInt32();
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                reply_to_msg_id = stream.readInt32();
+            }
         }
 
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
+            stream.writeInt32(flags);
             stream.writeInt32(id);
-            stream.writeInt32(from_id);
+            stream.writeInt32(user_id);
             stream.writeString(message);
             stream.writeInt32(pts);
+            stream.writeInt32(pts_count);
             stream.writeInt32(date);
-            stream.writeInt32(seq);
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                stream.writeInt32(fwd_from_id);
+                stream.writeInt32(fwd_date);
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                stream.writeInt32(reply_to_msg_id);
+            }
         }
     }
 
@@ -6823,33 +6907,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messages_chat extends TLObject {
-        public static int constructor = 0x40e9002a;
-
-        public Chat chat;
-        public ArrayList<User> users = new ArrayList<>();
-
-        public void readParams(AbsSerializedData stream) {
-            chat = (Chat)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
-            stream.readInt32();
-            int count = stream.readInt32();
-            for (int a = 0; a < count; a++) {
-                users.add((User)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32()));
-            }
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            chat.serializeToStream(stream);
-            stream.writeInt32(0x1cb5c415);
-            int count = users.size();
-            stream.writeInt32(count);
-            for (User user : users) {
-                user.serializeToStream(stream);
-            }
-        }
-    }
-
     public static class WallPaper extends TLObject {
         public int id;
         public String title;
@@ -8249,12 +8306,11 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_readHistory extends TLObject {
-        public static int constructor = 0xeed884c6;
+        public static int constructor = 0xb04f2510;
 
         public InputPeer peer;
         public int max_id;
         public int offset;
-        public boolean read_contents;
 
         public Class responseClass () {
             return TL_messages_affectedHistory.class;
@@ -8264,7 +8320,6 @@ public void readParams(AbsSerializedData stream) {
             peer = (InputPeer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             max_id = stream.readInt32();
             offset = stream.readInt32();
-            read_contents = stream.readBool();
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -8272,7 +8327,6 @@ public void serializeToStream(AbsSerializedData stream) {
             peer.serializeToStream(stream);
             stream.writeInt32(max_id);
             stream.writeInt32(offset);
-            stream.writeBool(read_contents);
         }
     }
 
@@ -8321,9 +8375,10 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_messages_sendMessage extends TLObject {
-        public static int constructor = 0x4cde0aab;
+        public static int constructor = 0x1ca852a1;
 
         public InputPeer peer;
+        public int reply_to_msg_id;
         public String message;
         public long random_id;
 
@@ -8333,6 +8388,7 @@ public Class responseClass () {
 
         public void readParams(AbsSerializedData stream) {
             peer = (InputPeer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            reply_to_msg_id = stream.readInt32();
             message = stream.readString();
             random_id = stream.readInt64();
         }
@@ -8340,15 +8396,17 @@ public void readParams(AbsSerializedData stream) {
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             peer.serializeToStream(stream);
+            stream.writeInt32(reply_to_msg_id);
             stream.writeString(message);
             stream.writeInt64(random_id);
         }
     }
 
     public static class TL_messages_sendMedia extends TLObject {
-        public static int constructor = 0xa3c85d76;
+        public static int constructor = 0xfcee7fc0;
 
         public InputPeer peer;
+        public int reply_to_msg_id;
         public InputMedia media;
         public long random_id;
 
@@ -8358,6 +8416,7 @@ public Class responseClass () {
 
         public void readParams(AbsSerializedData stream) {
             peer = (InputPeer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            reply_to_msg_id = stream.readInt32();
             media = (InputMedia)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             random_id = stream.readInt64();
         }
@@ -8365,16 +8424,18 @@ public void readParams(AbsSerializedData stream) {
         public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             peer.serializeToStream(stream);
+            stream.writeInt32(reply_to_msg_id);
             media.serializeToStream(stream);
             stream.writeInt64(random_id);
         }
     }
 
     public static class TL_messages_forwardMessages extends TLObject {
-        public static int constructor = 0x514cd10f;
+        public static int constructor = 0xded42045;
 
         public InputPeer peer;
         public ArrayList<Integer> id = new ArrayList<>();
+        public ArrayList<Long> random_id = new ArrayList<>();
 
         public Class responseClass () {
             return messages_StatedMessages.class;
@@ -8387,6 +8448,11 @@ public void readParams(AbsSerializedData stream) {
             for (int a = 0; a < count; a++) {
                 id.add(stream.readInt32());
             }
+            stream.readInt32();
+            count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                random_id.add(stream.readInt64());
+            }
         }
 
         public void serializeToStream(AbsSerializedData stream) {
@@ -8395,8 +8461,14 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(0x1cb5c415);
             int count = id.size();
             stream.writeInt32(count);
-            for (Integer anId : id) {
-                stream.writeInt32(anId);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt32(id.get(a));
+            }
+            stream.writeInt32(0x1cb5c415);
+            count = random_id.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt64(random_id.get(a));
             }
         }
     }
@@ -8691,7 +8763,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public int offset;
         public int limit;
 
-        public Class responseClass () {
+        public Class responseClass() {
             return TL_upload_file.class;
         }
 
@@ -8845,7 +8917,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public int id;
         public long random_id;
 
-        public Class responseClass () {
+        public Class responseClass() {
             return messages_StatedMessage.class;
         }
 
@@ -8968,7 +9040,7 @@ public void serializeToStream(AbsSerializedData stream) {
 
         public TL_inputGeoChat peer;
 
-        public Class responseClass () {
+        public Class responseClass() {
             return TL_messages_chatFull.class;
         }
 
@@ -9294,7 +9366,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public TL_inputEncryptedChat peer;
         public boolean typing;
 
-        public Class responseClass () {
+        public Class responseClass() {
             return Bool.class;
         }
 
@@ -9332,8 +9404,62 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_messages_deleteMessages extends TLObject {
+        public static int constructor = 0xa5f18925;
+
+        public ArrayList<Integer> id = new ArrayList<>();
+
+        public Class responseClass () {
+            return TL_messages_affectedMessages.class;
+        }
+
+        public void readParams(AbsSerializedData stream) {
+            stream.readInt32();
+            int count = stream.readInt32();
+            for (int a = 0; a < count; a++) {
+                id.add(stream.readInt32());
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(0x1cb5c415);
+            int count = id.size();
+            stream.writeInt32(count);
+            for (int a = 0; a < count; a++) {
+                stream.writeInt32(id.get(a));
+            }
+        }
+    }
+
     //manually created
 
+    public static class TL_documentAttributeSticker_old extends TL_documentAttributeSticker {
+        public static int constructor = 0xfb0a5727;
+
+        public void readParams(AbsSerializedData stream) {
+
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+        }
+    }
+
+    public static class TL_messageMediaUnsupported_old extends TL_messageMediaUnsupported {
+        public static int constructor = 0x29632a36;
+
+
+        public void readParams(AbsSerializedData stream) {
+            bytes = stream.readByteArray();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeByteArray(bytes);
+        }
+    }
+
     public static class TL_config_old extends TL_config {
         public static int constructor = 0x2e54dd74;
 
@@ -9543,6 +9669,34 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
+    public static class TL_userSelf_old2 extends TL_userSelf {
+        public static int constructor = 0x7007b451;
+
+
+        public void readParams(AbsSerializedData stream) {
+            id = stream.readInt32();
+            first_name = stream.readString();
+            last_name = stream.readString();
+            username = stream.readString();
+            phone = stream.readString();
+            photo = (UserProfilePhoto)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            status = (UserStatus)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            inactive = stream.readBool();
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(id);
+            stream.writeString(first_name);
+            stream.writeString(last_name);
+            stream.writeString(username);
+            stream.writeString(phone);
+            photo.serializeToStream(stream);
+            status.serializeToStream(stream);
+            stream.writeBool(inactive);
+        }
+    }
+
     public static class TL_userSelf_old extends TL_userSelf {
         public static int constructor = 0x720535ec;
 
@@ -9869,7 +10023,7 @@ public int layer () {
             return 0;
         }
 
-        public Class responseClass () {
+        public Class responseClass() {
             return RpcDropAnswer.class;
         }
 
@@ -10000,6 +10154,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public int date;
         public String message;
         public MessageMedia media;
+        public int reply_to_msg_id;
         public MessageAction action;
         public int send_state = 0;
         public int fwd_msg_id = 0;
@@ -10012,10 +10167,11 @@ public void serializeToStream(AbsSerializedData stream) {
         public int layer;
         public int seq_in;
         public int seq_out;
+        public TLRPC.Message replyMessage;
         public VideoEditedInfo videoEditedInfo = null;
     }
 
-    public static class TL_messageForwarded extends Message {
+    public static class TL_messageForwarded_old2 extends Message {
         public static int constructor = 0xa367e716;
 
 
@@ -10028,6 +10184,7 @@ public void readParams(AbsSerializedData stream) {
             to_id = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             date = stream.readInt32();
             message = stream.readString();
+            flags |= MESSAGE_FLAG_FWD;
             media = (MessageMedia)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             if (id < 0) {
                 fwd_msg_id = stream.readInt32();
@@ -10060,6 +10217,60 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_message extends Message {
+        public static int constructor = 0xa7ab1991;
+
+
+        public void readParams(AbsSerializedData stream) {
+            flags = stream.readInt32();
+            id = stream.readInt32();
+            from_id = stream.readInt32();
+            to_id = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                fwd_from_id = stream.readInt32();
+                fwd_date = stream.readInt32();
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                reply_to_msg_id = stream.readInt32();
+            }
+            date = stream.readInt32();
+            message = stream.readString();
+            media = (MessageMedia)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
+            if (id < 0 || (media != null && !(media instanceof TL_messageMediaEmpty) && message != null && message.length() != 0 && message.startsWith("-1"))) {
+                attachPath = stream.readString();
+            }
+            if (id < 0 && message.length() > 6 && media instanceof TL_messageMediaVideo) {
+                videoEditedInfo = new VideoEditedInfo();
+                videoEditedInfo.parseString(message);
+            }
+            if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+                fwd_msg_id = stream.readInt32();
+            }
+        }
+
+        public void serializeToStream(AbsSerializedData stream) {
+            stream.writeInt32(constructor);
+            stream.writeInt32(flags);
+            stream.writeInt32(id);
+            stream.writeInt32(from_id);
+            to_id.serializeToStream(stream);
+            if ((flags & MESSAGE_FLAG_FWD) != 0) {
+                stream.writeInt32(fwd_from_id);
+                stream.writeInt32(fwd_date);
+            }
+            if ((flags & MESSAGE_FLAG_REPLY) != 0) {
+                stream.writeInt32(reply_to_msg_id);
+            }
+            stream.writeInt32(date);
+            stream.writeString(message);
+            media.serializeToStream(stream);
+            stream.writeString(attachPath);
+            if ((flags & MESSAGE_FLAG_FWD) != 0 && id < 0) {
+                stream.writeInt32(fwd_msg_id);
+            }
+        }
+    }
+
+    public static class TL_message_old2 extends TL_message {
         public static int constructor = 0x567699b3;
 
 
@@ -10143,7 +10354,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messageForwarded_old extends TL_messageForwarded {
+    public static class TL_messageForwarded_old extends TL_messageForwarded_old2 {
         public static int constructor = 0x5f46804;
 
 
@@ -10155,6 +10366,7 @@ public void readParams(AbsSerializedData stream) {
             to_id = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             flags |= stream.readBool() ? MESSAGE_FLAG_OUT : 0;
             flags |= stream.readBool() ? MESSAGE_FLAG_UNREAD : 0;
+            flags |= MESSAGE_FLAG_FWD;
             date = stream.readInt32();
             message = stream.readString();
             media = (MessageMedia)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
@@ -10259,102 +10471,6 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_messages_deleteMessages extends TLObject {
-        public static int constructor = 0x14f2dd0a;
-
-        public ArrayList<Integer> id = new ArrayList<>();
-
-        public Class responseClass () {
-            return Vector.class;
-        }
-
-        public void readParams(AbsSerializedData stream) {
-            stream.readInt32();
-            int count = stream.readInt32();
-            for (int a = 0; a < count; a++) {
-                id.add(stream.readInt32());
-            }
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(0x1cb5c415);
-            int count = id.size();
-            stream.writeInt32(count);
-            for (Integer anId : id) {
-                stream.writeInt32(anId);
-            }
-        }
-
-        public void parseVector(Vector vector, AbsSerializedData data) {
-            int size = data.readInt32();
-            for (int a = 0; a < size; a++) {
-                vector.objects.add(data.readInt32());
-            }
-        }
-    }
-
-    public static class TL_messages_restoreMessages extends TLObject {
-        public static int constructor = 0x395f9d7e;
-
-        public ArrayList<Integer> id = new ArrayList<>();
-
-        public Class responseClass () {
-            return Vector.class;
-        }
-
-        public void readParams(AbsSerializedData stream) {
-            stream.readInt32();
-            int count = stream.readInt32();
-            for (int a = 0; a < count; a++) {
-                id.add(stream.readInt32());
-            }
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(0x1cb5c415);
-            int count = id.size();
-            stream.writeInt32(count);
-            for (Integer anId : id) {
-                stream.writeInt32(anId);
-            }
-        }
-
-        public void parseVector(Vector vector, AbsSerializedData data) {
-            int size = data.readInt32();
-            for (int a = 0; a < size; a++) {
-                vector.objects.add(data.readInt32());
-            }
-        }
-    }
-
-    public static class TL_messages_receivedMessages extends TLObject {
-        public static int constructor = 0x28abcb68;
-
-        public int max_id;
-
-        public Class responseClass () {
-            return Vector.class;
-        }
-
-        public void readParams(AbsSerializedData stream) {
-            max_id = stream.readInt32();
-        }
-
-        public void serializeToStream(AbsSerializedData stream) {
-            stream.writeInt32(constructor);
-            stream.writeInt32(max_id);
-        }
-
-        public void parseVector(Vector vector, AbsSerializedData data) {
-            int size = data.readInt32();
-            for (int a = 0; a < size; a++) {
-                vector.objects.add(data.readInt32());
-            }
-        }
-    }
-
     public static class Vector extends TLObject {
         public static int constructor = 0x1cb5c415;
         public ArrayList<Object> objects = new ArrayList<>();
@@ -10526,11 +10642,12 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
     public static class TL_dialog extends TLObject {
-        public static int constructor = 0xab3a99ac;
+        public static int constructor = 0xc1dd804a;
 
         public Peer peer;
         public int top_message;
         public int unread_count;
+        public int read_inbox_max_id;
         public PeerNotifySettings notify_settings;
         public int last_message_date;
         public long id;
@@ -10539,6 +10656,7 @@ public void serializeToStream(AbsSerializedData stream) {
         public void readParams(AbsSerializedData stream) {
             peer = (Peer)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
             top_message = stream.readInt32();
+            read_inbox_max_id = stream.readInt32();
             unread_count = stream.readInt32();
             notify_settings = (PeerNotifySettings)TLClassStore.Instance().TLdeserialize(stream, stream.readInt32());
         }
@@ -10547,6 +10665,7 @@ public void serializeToStream(AbsSerializedData stream) {
             stream.writeInt32(constructor);
             peer.serializeToStream(stream);
             stream.writeInt32(top_message);
+            stream.writeInt32(read_inbox_max_id);
             stream.writeInt32(unread_count);
             notify_settings.serializeToStream(stream);
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index 406c05139..3772ed52c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -28,11 +28,11 @@
         TcpConnectionStageSuspended
     }
 
-    public abstract static interface TcpConnectionDelegate {
-        public abstract void tcpConnectionClosed(TcpConnection connection);
-        public abstract void tcpConnectionConnected(TcpConnection connection);
-        public abstract void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack);
-        public abstract void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length);
+    public interface TcpConnectionDelegate {
+        void tcpConnectionClosed(TcpConnection connection);
+        void tcpConnectionConnected(TcpConnection connection);
+        void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack);
+        void tcpConnectionReceivedData(TcpConnection connection, ByteBufferDesc data, int length);
     }
 
     private static PyroSelector selector;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 732ba6f74..5c7c76456 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -48,7 +48,6 @@ public boolean canOpenMenu() {
 
     private boolean allowOverlayTitle;
     private CharSequence lastTitle;
-    private boolean showingOverlayTitle;
     private boolean castShadows = true;
 
     protected boolean isSearchFieldVisible;
@@ -419,6 +418,13 @@ public void closeSearchField() {
         menu.closeSearchField();
     }
 
+    public void openSearchField(String text) {
+        if (isSearchFieldVisible || menu == null) {
+            return;
+        }
+        menu.openSearchField(text);
+    }
+
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int actionBarHeight = AndroidUtilities.getCurrentActionBarHeight();
@@ -446,10 +452,9 @@ public void setAllowOverlayTitle(boolean value) {
     }
 
     public void setTitleOverlayText(String text) {
-        if (showingOverlayTitle == (text != null) || !allowOverlayTitle || parentFragment.parentLayout == null) {
+        if (!allowOverlayTitle || parentFragment.parentLayout == null) {
             return;
         }
-        showingOverlayTitle = text != null;
         CharSequence textToSet = text != null ? text : lastTitle;
         if (textToSet != null && titleTextView == null) {
             createTitleTextView();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
index 398ecde2c..16fb026d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarLayout.java
@@ -39,12 +39,12 @@
 
 public class ActionBarLayout extends FrameLayout {
 
-    public static interface ActionBarLayoutDelegate {
-        public abstract boolean onPreIme();
-        public abstract boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
-        public abstract boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
-        public abstract boolean needCloseLastFragment(ActionBarLayout layout);
-        public abstract void onRebuildAllFragments(ActionBarLayout layout);
+    public interface ActionBarLayoutDelegate {
+        boolean onPreIme();
+        boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout);
+        boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout);
+        boolean needCloseLastFragment(ActionBarLayout layout);
+        void onRebuildAllFragments(ActionBarLayout layout);
     }
 
     public class LinearLayoutContainer extends LinearLayout {
@@ -809,7 +809,7 @@ public void run() {
                             backgroundView.setVisibility(GONE);
                         }
                         if (drawerLayoutContainer != null) {
-                            drawerLayoutContainer.setAllowOpenDrawer(true);
+                            drawerLayoutContainer.setAllowOpenDrawer(true, false);
                         }
                     }
                 };
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
index 188804be6..c035b1d47 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenu.java
@@ -52,7 +52,7 @@ public View addItemResource(int id, int resourceId) {
         view.setOnClickListener(new OnClickListener() {
             @Override
             public void onClick(View view) {
-                onItemClick((Integer)view.getTag());
+                onItemClick((Integer) view.getTag());
             }
         });
         return view;
@@ -147,6 +147,22 @@ public void closeSearchField() {
                 ActionBarMenuItem item = (ActionBarMenuItem)view;
                 if (item.isSearchField()) {
                     parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
+                    break;
+                }
+            }
+        }
+    }
+
+    public void openSearchField(String text) {
+        for (int a = 0; a < getChildCount(); a++) {
+            View view = getChildAt(a);
+            if (view instanceof ActionBarMenuItem) {
+                ActionBarMenuItem item = (ActionBarMenuItem)view;
+                if (item.isSearchField()) {
+                    parentActionBar.onSearchFieldVisibilityChanged(item.toggleSearch());
+                    item.getSearchField().setText(text);
+                    item.getSearchField().setSelection(text.length());
+                    break;
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
index fa19aa490..e8991c227 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarMenuItem.java
@@ -42,7 +42,7 @@
 
     public static class ActionBarMenuItemSearchListener {
         public void onSearchExpand() { }
-        public void onSearchCollapse() { }
+        public boolean onSearchCollapse() { return true; }
         public void onTextChanged(EditText editText) { }
         public void onSearchPressed(EditText editText) { }
     }
@@ -322,11 +322,10 @@ public boolean toggleSearch() {
             return false;
         }
         if (searchContainer.getVisibility() == VISIBLE) {
-            searchContainer.setVisibility(GONE);
-            setVisibility(VISIBLE);
-            AndroidUtilities.hideKeyboard(searchField);
-            if (listener != null) {
-                listener.onSearchCollapse();
+            if (listener == null || listener != null && listener.onSearchCollapse()) {
+                searchContainer.setVisibility(GONE);
+                setVisibility(VISIBLE);
+                AndroidUtilities.hideKeyboard(searchField);
             }
             return false;
         } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
index 4d3831a56..479ab5512 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBarPopupWindow.java
@@ -48,8 +48,8 @@ public void onScrollChanged() {
     private ViewTreeObserver.OnScrollChangedListener mSuperScrollListener;
     private ViewTreeObserver mViewTreeObserver;
 
-    public static interface OnDispatchKeyEventListener {
-        public void onDispatchKeyEvent(KeyEvent keyEvent);
+    public interface OnDispatchKeyEventListener {
+        void onDispatchKeyEvent(KeyEvent keyEvent);
     }
 
     public static class ActionBarPopupWindowLayout extends LinearLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
index 91fa7dc3d..1fdf62d77 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/BaseFragment.java
@@ -23,7 +23,7 @@
 
 public class BaseFragment {
     private boolean isFinished = false;
-    private AlertDialog visibleDialog = null;
+    protected AlertDialog visibleDialog = null;
 
     protected View fragmentView;
     protected ActionBarLayout parentLayout;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
index 600807d1f..bbed0a058 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/DrawerLayoutContainer.java
@@ -251,11 +251,15 @@ public void setParentActionBarLayout(ActionBarLayout layout) {
         parentActionBarLayout = layout;
     }
 
-    public void setAllowOpenDrawer(boolean value) {
+    public void setAllowOpenDrawer(boolean value, boolean animated) {
         allowOpenDrawer = value;
         if (!allowOpenDrawer && drawerPosition != 0) {
-            setDrawerPosition(0);
-            onDrawerAnimationEnd(false);
+            if (!animated) {
+                setDrawerPosition(0);
+                onDrawerAnimationEnd(false);
+            } else {
+                closeDrawer(true);
+            }
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 551bf48ed..4ae9e1f19 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -55,7 +55,7 @@
     private long reqId = 0;
     private int lastReqId;
     private MessagesActivitySearchAdapterDelegate delegate;
-    private boolean needMessagesSearch;
+    private int needMessagesSearch;
     private boolean messagesSearchEndReached;
     private String lastMessagesSearchString;
     private int lastSearchId = 0;
@@ -66,11 +66,11 @@
         public CharSequence name;
     }
 
-    public static interface MessagesActivitySearchAdapterDelegate {
-        public abstract void searchStateChanged(boolean searching);
+    public interface MessagesActivitySearchAdapterDelegate {
+        void searchStateChanged(boolean searching);
     }
 
-    public DialogsSearchAdapter(Context context, boolean messagesSearch) {
+    public DialogsSearchAdapter(Context context, int messagesSearch) {
         mContext = context;
         needMessagesSearch = messagesSearch;
     }
@@ -88,7 +88,7 @@ public void loadMoreSearchMessages() {
     }
 
     private void searchMessagesInternal(final String query) {
-        if (!needMessagesSearch) {
+        if (needMessagesSearch == 0) {
             return;
         }
         if (reqId != 0) {
@@ -110,7 +110,7 @@ private void searchMessagesInternal(final String query) {
         req.peer = new TLRPC.TL_inputPeerEmpty();
         req.q = query;
         if (lastMessagesSearchString != null && query.equals(lastMessagesSearchString) && !searchResultMessages.isEmpty()) {
-            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).messageOwner.id;
+            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).getId();
         }
         lastMessagesSearchString = query;
         req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
@@ -151,6 +151,9 @@ public void run() {
     }
 
     private void searchDialogsInternal(final String query, final boolean serverOnly, final int searchId) {
+        if (needMessagesSearch == 2) {
+            return;
+        }
         MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
             @Override
             public void run() {
@@ -178,7 +181,7 @@ public void run() {
                     int resultCount = 0;
 
                     HashMap<Long, DialogSearchResult> dialogsResult = new HashMap<>();
-                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 200"));
+                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 200");
                     while (cursor.next()) {
                         long id = cursor.longValue(0);
                         DialogSearchResult dialogSearchResult = new DialogSearchResult();
@@ -488,8 +491,10 @@ public void searchDialogs(final String query, final boolean serverOnly) {
         if (query == null || query.length() == 0) {
             searchResult.clear();
             searchResultNames.clear();
+            if (needMessagesSearch != 2) {
+                queryServerSearch(null);
+            }
             searchMessagesInternal(null);
-            queryServerSearch(null);
             notifyDataSetChanged();
         } else {
             final int searchId = ++lastSearchId;
@@ -507,7 +512,9 @@ public void run() {
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
-                            queryServerSearch(query);
+                            if (needMessagesSearch != 2) {
+                                queryServerSearch(query);
+                            }
                             searchMessagesInternal(query);
                         }
                     });
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
new file mode 100644
index 000000000..f06c8311e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -0,0 +1,186 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.MentionCell;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+public class MentionsAdapter extends BaseFragmentAdapter {
+
+    public interface MentionsAdapterDelegate {
+        void needChangePanelVisibility(boolean show);
+    }
+
+    private Context mContext;
+    private TLRPC.ChatParticipants info;
+    private ArrayList<TLRPC.User> searchResult = new ArrayList<>();
+    private MentionsAdapterDelegate delegate;
+    private int usernameStartPosition;
+    private int usernameLength;
+    private String lastText;
+    private int lastPosition;
+    private ArrayList<MessageObject> messages;
+
+    public MentionsAdapter(Context context, MentionsAdapterDelegate delegate) {
+        mContext = context;
+        this.delegate = delegate;
+    }
+
+    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
+        info = chatParticipants;
+        if (lastText != null) {
+            searchUsername(lastText, lastPosition, messages);
+        }
+    }
+
+    public void searchUsername(String text, int position, ArrayList<MessageObject> messageObjects) {
+        if (text == null || text.length() == 0 || position < text.length()) {
+            delegate.needChangePanelVisibility(false);
+            lastText = null;
+            return;
+        }
+        if (info == null) {
+            lastText = text;
+            lastPosition = position;
+            messages = messageObjects;
+            delegate.needChangePanelVisibility(false);
+            return;
+        }
+        lastText = null;
+        StringBuilder username = new StringBuilder();
+        boolean found = false;
+        for (int a = position; a >= 0; a--) {
+            if (a >= text.length()) {
+                continue;
+            }
+            char ch = text.charAt(a);
+            if (ch == '@' && (a == 0 || text.charAt(a - 1) == ' ' || text.charAt(a - 1) == '\n')) {
+                found = true;
+                usernameStartPosition = a;
+                usernameLength = username.length() + 1;
+                break;
+            }
+            if (!(ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch == '_')) {
+                delegate.needChangePanelVisibility(false);
+                return;
+            }
+            username.insert(0, ch);
+        }
+        if (!found) {
+            delegate.needChangePanelVisibility(false);
+            return;
+        }
+        final ArrayList<Integer> users = new ArrayList<>();
+        for (int a = 0; a < Math.min(100, messageObjects.size()); a++) {
+            int from_id = messageObjects.get(a).messageOwner.from_id;
+            if (!users.contains(from_id)) {
+                users.add(from_id);
+            }
+        }
+        String usernameString = username.toString().toLowerCase();
+        ArrayList<TLRPC.User> newResult = new ArrayList<>();
+        for (TLRPC.TL_chatParticipant chatParticipant : info.participants) {
+            TLRPC.User user = MessagesController.getInstance().getUser(chatParticipant.user_id);
+            if (user == null || user instanceof TLRPC.TL_userSelf) {
+                continue;
+            }
+            if (user.username != null && user.username.length() > 0 && (usernameString.length() > 0 && user.username.toLowerCase().startsWith(usernameString) || usernameString.length() == 0)) {
+                newResult.add(user);
+            }
+        }
+        searchResult = newResult;
+        Collections.sort(searchResult, new Comparator<TLRPC.User>() {
+            @Override
+            public int compare(TLRPC.User lhs, TLRPC.User rhs) {
+                int lhsNum = users.indexOf(lhs.id);
+                int rhsNum = users.indexOf(rhs.id);
+                if (lhsNum != -1 && rhsNum != -1) {
+                    return lhsNum < rhsNum ? -1 : (lhsNum == rhsNum ? 0 : 1);
+                } else if (lhsNum != -1 && rhsNum == -1) {
+                    return -1;
+                } else if (lhsNum == -1 && rhsNum != -1) {
+                    return 1;
+                }
+                return 0;
+            }
+        });
+        notifyDataSetChanged();
+        delegate.needChangePanelVisibility(!newResult.isEmpty());
+    }
+
+    public int getUsernameStartPosition() {
+        return usernameStartPosition;
+    }
+
+    public int getUsernameLength() {
+        return usernameLength;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 1;
+    }
+
+    @Override
+    public int getCount() {
+        return searchResult.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return searchResult.isEmpty();
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        return 0;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled(int position) {
+        return true;
+    }
+
+    @Override
+    public TLRPC.User getItem(int i) {
+        if (i < 0 || i >= searchResult.size()) {
+            return null;
+        }
+        return searchResult.get(i);
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        if (view == null) {
+            view = new MentionCell(mContext);
+        }
+        ((MentionCell) view).setUser(searchResult.get(i));
+        return view;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
index 538756f76..ef6f61c0f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/StickersAdapter.java
@@ -47,8 +47,8 @@
     private String lastSticker;
     private boolean visible;
 
-    public static interface StickersAdapterDelegate {
-        public abstract void needChangePanelVisibility(boolean show);
+    public interface StickersAdapterDelegate {
+        void needChangePanelVisibility(boolean show);
     }
 
     private class Holder extends RecyclerView.ViewHolder {
@@ -80,7 +80,7 @@ public void didReceivedNotification(int id, final Object... args) {
                 @Override
                 public void run() {
                     if (stickers != null && !stickers.isEmpty() && !stickersToLoad.isEmpty() && visible) {
-                        String fileName = (String)args[0];
+                        String fileName = (String) args[0];
                         stickersToLoad.remove(fileName);
                         if (stickersToLoad.isEmpty()) {
                             delegate.needChangePanelVisibility(stickers != null && !stickers.isEmpty() && stickersToLoad.isEmpty());
@@ -214,6 +214,7 @@ public void run() {
                     final HashMap<String, ArrayList<TLRPC.Document>> result = new HashMap<>();
                     for (TLRPC.TL_stickerPack stickerPack : res.packs) {
                         if (stickerPack != null && stickerPack.emoticon != null) {
+                            stickerPack.emoticon = stickerPack.emoticon.replace("\uFE0F", "");
                             ArrayList<TLRPC.Document> arrayList = result.get(stickerPack.emoticon);
                             for (Long id : stickerPack.documents) {
                                 TLRPC.Document document = documents.get(id);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
index 32e6ccfe1..31a6d756b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/Animator10.java
@@ -177,14 +177,14 @@ public void setTarget(Object target) {
 
     }
 
-    public static interface AnimatorListener {
+    public interface AnimatorListener {
         void onAnimationStart(Animator10 animation);
         void onAnimationEnd(Animator10 animation);
         void onAnimationCancel(Animator10 animation);
         void onAnimationRepeat(Animator10 animation);
     }
 
-    public static interface AnimatorPauseListener {
+    public interface AnimatorPauseListener {
         void onAnimationPause(Animator10 animation);
         void onAnimationResume(Animator10 animation);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java
index 33de5d619..db5769e0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/TypeEvaluator.java
@@ -17,5 +17,5 @@
 package org.telegram.ui.Animation;
 
 public interface TypeEvaluator<T> {
-    public T evaluate(float fraction, T startValue, T endValue);
+    T evaluate(float fraction, T startValue, T endValue);
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
index b4baca6de..168ff1dac 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Animation/ValueAnimator.java
@@ -646,7 +646,7 @@ public ValueAnimator clone() {
         return anim;
     }
 
-    public static interface AnimatorUpdateListener {
+    public interface AnimatorUpdateListener {
         void onAnimationUpdate(ValueAnimator animation);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
index f07555cf2..2fcaed609 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
@@ -25,6 +25,7 @@
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -35,10 +36,10 @@
 
 public class ChatActionCell extends BaseCell {
 
-    public static interface ChatActionCellDelegate {
-        public abstract void didClickedImage(ChatActionCell cell);
-        public abstract void didLongPressed(ChatActionCell cell);
-        public abstract void needOpenUserProfile(int uid);
+    public interface ChatActionCellDelegate {
+        void didClickedImage(ChatActionCell cell);
+        void didLongPressed(ChatActionCell cell);
+        void needOpenUserProfile(int uid);
     }
 
     private static Drawable backgroundBlack;
@@ -55,7 +56,6 @@
     private int textX = 0;
     private int textY = 0;
     private int textXLeft = 0;
-    private boolean useBlackBackground = false;
     private int previousWidth = 0;
     private boolean imagePressed = false;
 
@@ -119,10 +119,6 @@ public void setMessageObject(MessageObject messageObject) {
         requestLayout();
     }
 
-    public void setUseBlackBackground(boolean value) {
-        useBlackBackground = value;
-    }
-
     public MessageObject getMessageObject() {
         return currentMessageObject;
     }
@@ -267,7 +263,7 @@ protected void onDraw(Canvas canvas) {
         }
 
         Drawable backgroundDrawable = null;
-        if (useBlackBackground) {
+        if (ApplicationLoader.isCustomTheme()) {
             backgroundDrawable = backgroundBlack;
         } else {
             backgroundDrawable = backgroundBlue;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
index 92b5c0dec..7a3f1a6b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatAudioCell.java
@@ -183,9 +183,15 @@ private void didPressedButton() {
             buttonState = 3;
             invalidate();
         } else if (buttonState == 3) {
-            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
-            buttonState = 2;
-            invalidate();
+            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+                if (delegate != null) {
+                    delegate.didPressedCancelSendButton(this);
+                }
+            } else {
+                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
+                buttonState = 2;
+                invalidate();
+            }
         }
     }
 
@@ -291,12 +297,7 @@ public void onSeekBarDrag(float progress) {
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int width = MeasureSpec.getSize(widthMeasureSpec);
-        setMeasuredDimension(width, AndroidUtilities.dp(68));
-        if (isChat) {
-            backgroundWidth = Math.min(width - AndroidUtilities.dp(102), AndroidUtilities.dp(300));
-        } else {
-            backgroundWidth = Math.min(width - AndroidUtilities.dp(50), AndroidUtilities.dp(300));
-        }
+        setMeasuredDimension(width, AndroidUtilities.dp(68) + namesOffset);
     }
 
     @Override
@@ -325,7 +326,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
         int diff = 0;
         if (needAvatarImage) {
-            avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+            avatarImage.setImageCoords(x, AndroidUtilities.dp(9) + namesOffset, AndroidUtilities.dp(50), AndroidUtilities.dp(50));
         } else {
             diff = AndroidUtilities.dp(56);
             seekBarX -= diff;
@@ -337,8 +338,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         seekBar.height = AndroidUtilities.dp(30);
         progressView.width = backgroundWidth - AndroidUtilities.dp(136) + diff;
         progressView.height = AndroidUtilities.dp(30);
-        seekBarY = AndroidUtilities.dp(13);
-        buttonY = AndroidUtilities.dp(10);
+        seekBarY = AndroidUtilities.dp(13) + namesOffset;
+        buttonY = AndroidUtilities.dp(10) + namesOffset;
 
         updateProgress();
     }
@@ -358,6 +359,12 @@ protected boolean isUserDataChanged() {
     @Override
     public void setMessageObject(MessageObject messageObject) {
         if (currentMessageObject != messageObject || isUserDataChanged()) {
+            if (AndroidUtilities.isTablet()) {
+                backgroundWidth = Math.min(AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
+            } else {
+                backgroundWidth = Math.min(AndroidUtilities.displaySize.x - AndroidUtilities.dp(isChat ? 102 : 50), AndroidUtilities.dp(300));
+            }
+
             int uid = messageObject.messageOwner.media.audio.user_id;
             if (uid == 0) {
                 uid = messageObject.messageOwner.from_id;
@@ -430,7 +437,7 @@ protected void onDraw(Canvas canvas) {
         buttonDrawable.draw(canvas);
 
         canvas.save();
-        canvas.translate(timeX, AndroidUtilities.dp(45));
+        canvas.translate(timeX, AndroidUtilities.dp(45) + namesOffset);
         timeLayout.draw(canvas);
         canvas.restore();
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index 8258de3f7..bf268093b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -11,6 +11,7 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.Paint;
 import android.graphics.drawable.Drawable;
 import android.text.Html;
 import android.text.Layout;
@@ -22,7 +23,11 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
+import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.MessagesController;
 import org.telegram.messenger.R;
@@ -32,16 +37,19 @@
 
 public class ChatBaseCell extends BaseCell {
 
-    public static interface ChatBaseCellDelegate {
-        public abstract void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
-        public abstract void didPressedCancelSendButton(ChatBaseCell cell);
-        public abstract void didLongPressed(ChatBaseCell cell);
-        public abstract boolean canPerformActions();
+    public interface ChatBaseCellDelegate {
+        void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
+        void didPressedCancelSendButton(ChatBaseCell cell);
+        void didLongPressed(ChatBaseCell cell);
+        void didPressReplyMessage(ChatBaseCell cell, int id);
+        void didPressUrl(String url);
+        boolean canPerformActions();
     }
 
     public boolean isChat = false;
     protected boolean isPressed = false;
     protected boolean forwardName = false;
+    protected boolean isHighlighted = false;
     protected boolean media = false;
     protected boolean isCheckPressed = true;
     private boolean wasLayout = false;
@@ -66,12 +74,17 @@
     private static Drawable clockMediaDrawable;
     private static Drawable broadcastMediaDrawable;
     private static Drawable errorDrawable;
+    private static Drawable backgroundBlack;
+    private static Drawable backgroundBlue;
     protected static Drawable mediaBackgroundDrawable;
     private static TextPaint timePaintIn;
     private static TextPaint timePaintOut;
     private static TextPaint timeMediaPaint;
     private static TextPaint namePaint;
     private static TextPaint forwardNamePaint;
+    private static TextPaint replyNamePaint;
+    private static TextPaint replyTextPaint;
+    private static Paint replyLinePaint;
 
     protected int backgroundWidth = 100;
 
@@ -83,6 +96,19 @@
     private boolean avatarPressed = false;
     private boolean forwardNamePressed = false;
 
+    private StaticLayout replyNameLayout;
+    private StaticLayout replyTextLayout;
+    private ImageReceiver replyImageReceiver;
+    private int replyStartX;
+    private int replyStartY;
+    protected int replyNameWidth;
+    private float replyNameOffset;
+    protected int replyTextWidth;
+    private float replyTextOffset;
+    private boolean needReplyImage = false;
+    private boolean replyPressed = false;
+    private TLRPC.FileLocation currentReplyPhoto;
+
     private StaticLayout nameLayout;
     protected int nameWidth;
     private float nameOffsetX = 0;
@@ -137,6 +163,8 @@ public ChatBaseCell(Context context) {
             mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
             broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
             broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
+            backgroundBlack = getResources().getDrawable(R.drawable.system_black);
+            backgroundBlue = getResources().getDrawable(R.drawable.system_blue);
 
             timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             timePaintIn.setTextSize(AndroidUtilities.dp(12));
@@ -155,17 +183,29 @@ public ChatBaseCell(Context context) {
 
             forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
             forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
+
+            replyNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            replyNamePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            replyNamePaint.setTextSize(AndroidUtilities.dp(14));
+
+            replyTextPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            replyTextPaint.setTextSize(AndroidUtilities.dp(14));
+
+            replyLinePaint = new Paint();
         }
         avatarImage = new ImageReceiver(this);
         avatarImage.setRoundRadius(AndroidUtilities.dp(21));
         avatarDrawable = new AvatarDrawable();
+        replyImageReceiver = new ImageReceiver(this);
     }
 
     @Override
     protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         avatarImage.clearImage();
+        replyImageReceiver.clearImage();
         currentPhoto = null;
+        currentReplyPhoto = null;
     }
 
     @Override
@@ -178,6 +218,14 @@ public void setDelegate(ChatBaseCellDelegate delegate) {
         this.delegate = delegate;
     }
 
+    public void setHighlighted(boolean value) {
+        if (isHighlighted == value) {
+            return;
+        }
+        isHighlighted = value;
+        invalidate();
+    }
+
     public void setCheckPressed(boolean value, boolean pressed) {
         isCheckPressed = value;
         isPressed = pressed;
@@ -202,10 +250,27 @@ protected boolean isUserDataChanged() {
             newPhoto = newUser.photo.photo_small;
         }
 
+        if (replyTextLayout == null && currentMessageObject.replyMessageObject != null) {
+            return true;
+        }
+
         if (currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id)) {
             return true;
         }
 
+        TLRPC.FileLocation newReplyPhoto = null;
+
+        if (currentMessageObject.replyMessageObject != null) {
+            TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(currentMessageObject.replyMessageObject.photoThumbs, 80);
+            if (photoSize != null && currentMessageObject.replyMessageObject.type != 13) {
+                newReplyPhoto = photoSize.location;
+            }
+        }
+
+        if (currentReplyPhoto == null && newReplyPhoto != null) {
+            return true;
+        }
+
         String newNameString = null;
         if (drawName && isChat && newUser != null && !currentMessageObject.isOut()) {
             newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
@@ -217,7 +282,7 @@ protected boolean isUserDataChanged() {
 
         newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.fwd_from_id);
         newNameString = null;
-        if (newUser != null && drawForwardedName && currentMessageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+        if (newUser != null && drawForwardedName && currentMessageObject.messageOwner.fwd_from_id != 0) {
             newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
         }
         return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
@@ -231,6 +296,11 @@ public void setMessageObject(MessageObject messageObject) {
         isCheckPressed = true;
         isAvatarVisible = false;
         wasLayout = false;
+        replyNameLayout = null;
+        replyTextLayout = null;
+        replyNameWidth = 0;
+        replyTextWidth = 0;
+        currentReplyPhoto = null;
 
         currentUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
         if (isChat && !messageObject.isOut()) {
@@ -272,7 +342,7 @@ public void setMessageObject(MessageObject messageObject) {
             nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
             if (nameLayout.getLineCount() > 0) {
                 nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
-                namesOffset += AndroidUtilities.dp(18);
+                namesOffset += AndroidUtilities.dp(19);
                 nameOffsetX = nameLayout.getLineLeft(0);
             } else {
                 nameWidth = 0;
@@ -283,7 +353,7 @@ public void setMessageObject(MessageObject messageObject) {
             nameWidth = 0;
         }
 
-        if (drawForwardedName && messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+        if (drawForwardedName && messageObject.isForwarded()) {
             currentForwardUser = MessagesController.getInstance().getUser(messageObject.messageOwner.fwd_from_id);
             if (currentForwardUser != null) {
                 currentForwardNameString = ContactsController.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
@@ -311,6 +381,95 @@ public void setMessageObject(MessageObject messageObject) {
             forwardedNameWidth = 0;
         }
 
+        if (messageObject.isReply()) {
+            namesOffset += AndroidUtilities.dp(42);
+            if (messageObject.contentType == 2 || messageObject.contentType == 3) {
+                namesOffset += AndroidUtilities.dp(4);
+            } else if (messageObject.contentType == 1) {
+                if (messageObject.type == 13) {
+                    namesOffset -= AndroidUtilities.dp(42);
+                } else {
+                    namesOffset += AndroidUtilities.dp(5);
+                }
+            }
+
+            int maxWidth;
+            if (messageObject.type == 13) {
+                int width;
+                if (AndroidUtilities.isTablet()) {
+                    int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
+                    if (leftWidth < AndroidUtilities.dp(320)) {
+                        leftWidth = AndroidUtilities.dp(320);
+                    }
+                    width = AndroidUtilities.displaySize.x - leftWidth;
+                } else {
+                    width = AndroidUtilities.displaySize.x;
+                }
+                if (messageObject.isOut()) {
+                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(60);
+                } else {
+                    maxWidth = width - backgroundWidth - AndroidUtilities.dp(56 + (isChat ? 61 : 0));
+                }
+            } else {
+                maxWidth = getMaxNameWidth() - AndroidUtilities.dp(22);
+            }
+            if (!media && messageObject.contentType != 0) {
+                maxWidth -= AndroidUtilities.dp(8);
+            }
+
+            CharSequence stringFinalName = null;
+            CharSequence stringFinalText = null;
+            if (messageObject.replyMessageObject != null) {
+                TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 80);
+                if (photoSize == null || messageObject.replyMessageObject.type == 13 || messageObject.type == 13 && !AndroidUtilities.isTablet()) {
+                    replyImageReceiver.setImageBitmap((Drawable) null);
+                    needReplyImage = false;
+                } else {
+                    currentReplyPhoto = photoSize.location;
+                    replyImageReceiver.setImage(photoSize.location, "50_50", null, true);
+                    needReplyImage = true;
+                    maxWidth -= AndroidUtilities.dp(44);
+                }
+
+                TLRPC.User user = MessagesController.getInstance().getUser(messageObject.replyMessageObject.messageOwner.from_id);
+                if (user != null) {
+                    stringFinalName = TextUtils.ellipsize(ContactsController.formatName(user.first_name, user.last_name).replace("\n", " "), replyNamePaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
+                }
+                if (messageObject.replyMessageObject.messageText != null && messageObject.replyMessageObject.messageText.length() > 0) {
+                    String mess = messageObject.replyMessageObject.messageText.toString();
+                    if (mess.length() > 150) {
+                        mess = mess.substring(0, 150);
+                    }
+                    mess = mess.replace("\n", " ");
+                    stringFinalText = Emoji.replaceEmoji(mess, replyTextPaint.getFontMetricsInt(), AndroidUtilities.dp(14));
+                    stringFinalText = TextUtils.ellipsize(stringFinalText, replyTextPaint, maxWidth - AndroidUtilities.dp(8), TextUtils.TruncateAt.END);
+                }
+            }
+            if (stringFinalName == null) {
+                stringFinalName = LocaleController.getString("Loading", R.string.Loading);
+            }
+            try {
+                replyNameLayout = new StaticLayout(stringFinalName, replyNamePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                if (replyNameLayout.getLineCount() > 0) {
+                    replyNameWidth = (int)Math.ceil(replyNameLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
+                    replyNameOffset = replyNameLayout.getLineLeft(0);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            try {
+                if (stringFinalText != null) {
+                    replyTextLayout = new StaticLayout(stringFinalText, replyTextPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    if (replyTextLayout.getLineCount() > 0) {
+                        replyTextWidth = (int) Math.ceil(replyTextLayout.getLineWidth(0)) + AndroidUtilities.dp(12 + (needReplyImage ? 44 : 0));
+                        replyTextOffset = replyTextLayout.getLineLeft(0);
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+
         requestLayout();
     }
 
@@ -337,6 +496,11 @@ public boolean onTouchEvent(MotionEvent event) {
                         forwardNamePressed = true;
                         result = true;
                     }
+                } else if (currentMessageObject.isReply()) {
+                    if (x >= replyStartX && x <= replyStartX + Math.max(replyNameWidth, replyTextWidth) && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35)) {
+                        replyPressed = true;
+                        result = true;
+                    }
                 }
                 if (result) {
                     startCheckLongPress();
@@ -374,6 +538,20 @@ public boolean onTouchEvent(MotionEvent event) {
                         forwardNamePressed = false;
                     }
                 }
+            } else if (replyPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    replyPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (delegate != null) {
+                        delegate.didPressReplyMessage(this, currentMessageObject.messageOwner.reply_to_msg_id);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    replyPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= replyStartX && x <= replyStartX + Math.max(replyNameWidth, replyTextWidth) && y >= replyStartY && y <= replyStartY + AndroidUtilities.dp(35))) {
+                        replyPressed = false;
+                    }
+                }
             }
         }
         return result;
@@ -442,7 +620,7 @@ protected void onDraw(Canvas canvas) {
 
         Drawable currentBackgroundDrawable = null;
         if (currentMessageObject.isOut()) {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
+            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
                 if (!media) {
                     currentBackgroundDrawable = backgroundDrawableOutSelected;
                 } else {
@@ -457,7 +635,7 @@ protected void onDraw(Canvas canvas) {
             }
             setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
         } else {
-            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
+            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
                 if (!media) {
                     currentBackgroundDrawable = backgroundDrawableInSelected;
                 } else {
@@ -491,21 +669,79 @@ protected void onDraw(Canvas canvas) {
         }
 
         if (drawForwardedName && forwardedNameLayout != null) {
-            canvas.save();
+            forwardNameY = AndroidUtilities.dp(10 + (drawName ? 19 : 0));
             if (currentMessageObject.isOut()) {
                 forwardNamePaint.setColor(0xff4a923c);
                 forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
-                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
             } else {
                 forwardNamePaint.setColor(0xff006fc8);
                 forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
-                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
             }
+            canvas.save();
             canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
             forwardedNameLayout.draw(canvas);
             canvas.restore();
         }
 
+        if (currentMessageObject.isReply()) {
+            if (currentMessageObject.type == 13) {
+                replyLinePaint.setColor(0xffffffff);
+                replyNamePaint.setColor(0xffffffff);
+                replyTextPaint.setColor(0xffffffff);
+                int backWidth;
+                if (currentMessageObject.isOut()) {
+                    backWidth = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(32);
+                    replyStartX = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(9) - backWidth;
+                } else {
+                    backWidth = getWidth() - currentBackgroundDrawable.getBounds().right - AndroidUtilities.dp(32);
+                    replyStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(23);
+                }
+                Drawable back;
+                if (ApplicationLoader.isCustomTheme()) {
+                    back = backgroundBlack;
+                } else {
+                    back = backgroundBlue;
+                }
+                replyStartY = layoutHeight - AndroidUtilities.dp(58);
+                back.setBounds(replyStartX - AndroidUtilities.dp(7), replyStartY - AndroidUtilities.dp(6), replyStartX - AndroidUtilities.dp(7) + backWidth, replyStartY + AndroidUtilities.dp(41));
+                back.draw(canvas);
+            } else {
+                if (currentMessageObject.isOut()) {
+                    replyLinePaint.setColor(0xff8dc97a);
+                    replyNamePaint.setColor(0xff61a349);
+                    replyTextPaint.setColor(0xff70b15c);
+                    replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+                } else {
+                    replyLinePaint.setColor(0xff6c9fd2);
+                    replyNamePaint.setColor(0xff377aae);
+                    replyTextPaint.setColor(0xff999999);
+                    if (currentMessageObject.contentType == 1 && media) {
+                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+                    } else {
+                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(20);
+                    }
+                }
+                replyStartY = AndroidUtilities.dp(12 + (drawForwardedName && forwardedNameLayout != null ? 36 : 0) + (drawName && nameLayout != null ? 20 : 0));
+            }
+            canvas.drawRect(replyStartX, replyStartY, replyStartX + AndroidUtilities.dp(2), replyStartY + AndroidUtilities.dp(35), replyLinePaint);
+            if (needReplyImage) {
+                replyImageReceiver.setImageCoords(replyStartX + AndroidUtilities.dp(10), replyStartY, AndroidUtilities.dp(35), AndroidUtilities.dp(35));
+                replyImageReceiver.draw(canvas);
+            }
+            if (replyNameLayout != null) {
+                canvas.save();
+                canvas.translate(replyStartX - replyNameOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY);
+                replyNameLayout.draw(canvas);
+                canvas.restore();
+            }
+            if (replyTextLayout != null) {
+                canvas.save();
+                canvas.translate(replyStartX - replyTextOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY + AndroidUtilities.dp(19));
+                replyTextLayout.draw(canvas);
+                canvas.restore();
+            }
+        }
+
         if (drawTime) {
             if (media) {
                 setDrawableBounds(mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dp(16.5f));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
index 13edf97c4..45907c708 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
@@ -32,9 +32,9 @@
 
 public class ChatContactCell extends ChatBaseCell {
 
-    public static interface ChatContactCellDelegate {
-        public abstract void didClickAddButton(ChatContactCell cell, TLRPC.User user);
-        public abstract void didClickPhone(ChatContactCell cell);
+    public interface ChatContactCellDelegate {
+        void didClickAddButton(ChatContactCell cell, TLRPC.User user);
+        void didClickPhone(ChatContactCell cell);
     }
 
     private static TextPaint namePaint;
@@ -113,7 +113,7 @@ public boolean onTouchEvent(MotionEvent event) {
             if (x >= avatarImage.getImageX() && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(42) && y >= avatarImage.getImageY() && y <= avatarImage.getImageY() + avatarImage.getImageHeight()) {
                 avatarPressed = true;
                 result = true;
-            } else if (x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52)) {
+            } else if (x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset) {
                 buttonPressed = true;
                 result = true;
             }
@@ -154,7 +154,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     buttonPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52))) {
+                    if (!(x >= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(52) && y >= AndroidUtilities.dp(13) + namesOffset && x <= avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(92) && y <= AndroidUtilities.dp(52) + namesOffset)) {
                         buttonPressed = false;
                     }
                 }
@@ -235,7 +235,7 @@ public void setMessageObject(MessageObject messageObject) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(71));
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(71) + namesOffset);
     }
 
     @Override
@@ -257,7 +257,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
                 x = AndroidUtilities.dp(16);
             }
         }
-        avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+        avatarImage.setImageCoords(x, AndroidUtilities.dp(9) + namesOffset, AndroidUtilities.dp(42), AndroidUtilities.dp(42));
     }
 
     @Override
@@ -272,14 +272,14 @@ protected void onDraw(Canvas canvas) {
 
         if (nameLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(10) + namesOffset);
             namePaint.setColor(AvatarDrawable.getColorForId(currentMessageObject.messageOwner.media.user_id));
             nameLayout.draw(canvas);
             canvas.restore();
         }
         if (phoneLayout != null) {
             canvas.save();
-            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31));
+            canvas.translate(avatarImage.getImageX() + avatarImage.getImageWidth() + AndroidUtilities.dp(9), AndroidUtilities.dp(31) + namesOffset);
             phoneLayout.draw(canvas);
             canvas.restore();
         }
@@ -291,7 +291,7 @@ protected void onDraw(Canvas canvas) {
             } else {
                 addContactDrawable = addContactDrawableIn;
             }
-            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13));
+            setDrawableBounds(addContactDrawable, avatarImage.getImageX() + namesWidth + AndroidUtilities.dp(78), AndroidUtilities.dp(13) + namesOffset);
             addContactDrawable.draw(canvas);
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index b20d3a25f..1cc78ca74 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -44,9 +44,9 @@
 
 public class ChatMediaCell extends ChatBaseCell implements MediaController.FileDownloadProgressListener {
 
-    public static interface ChatMediaCellDelegate {
-        public abstract void didClickedImage(ChatMediaCell cell);
-        public abstract void didPressedOther(ChatMediaCell cell);
+    public interface ChatMediaCellDelegate {
+        void didClickedImage(ChatMediaCell cell);
+        void didPressedOther(ChatMediaCell cell);
     }
 
     private static Drawable placeholderDocInDrawable;
@@ -194,7 +194,7 @@ public boolean onTouchEvent(MotionEvent event) {
                             otherPressed = true;
                             result = true;
                         }
-                    } else {
+                    } else if (currentMessageObject.type != 13) {
                         if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
                             imagePressed = true;
                             result = true;
@@ -362,7 +362,7 @@ private void didPressedButton(boolean animated) {
                     photoImage.cancelLoadImage();
                 } else if (currentMessageObject.type == 8 || currentMessageObject.type == 9) {
                     FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
-                    if (lastDownloadedGifMessage != null && lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id) {
+                    if (lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == currentMessageObject.getId()) {
                         lastDownloadedGifMessage = null;
                     }
                 } else if (currentMessageObject.type == 3) {
@@ -416,7 +416,6 @@ public void setMessageObject(MessageObject messageObject) {
         media = messageObject.type != 9;
         boolean dataChanged = currentMessageObject == messageObject && (isUserDataChanged() || photoNotSet);
         if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || dataChanged) {
-            super.setMessageObject(messageObject);
             cancelLoading = false;
 
             buttonState = -1;
@@ -535,13 +534,13 @@ public void setMessageObject(MessageObject messageObject) {
                     photoImage.setImageBitmap((BitmapDrawable) null);
                 }
             } else if (messageObject.type == 4) { //geo
-                photoWidth = AndroidUtilities.dp(100);
+                photoWidth = AndroidUtilities.dp(200);
                 photoHeight = AndroidUtilities.dp(100);
                 backgroundWidth = photoWidth + AndroidUtilities.dp(12);
 
                 double lat = messageObject.messageOwner.media.geo.lat;
                 double lon = messageObject.messageOwner.media.geo._long;
-                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
+                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=200x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
                 photoImage.setNeedsQualityThumb(false);
                 photoImage.setShouldGenerateQualityThumb(false);
                 photoImage.setParentMessageObject(null);
@@ -556,6 +555,12 @@ public void setMessageObject(MessageObject messageObject) {
                     }
                 }
                 float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
+                float maxWidth;
+                if (AndroidUtilities.isTablet()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
+                } else {
+                    maxWidth = AndroidUtilities.displaySize.x * 0.5f;
+                }
                 if (photoWidth == 0) {
                     photoHeight = (int) maxHeight;
                     photoWidth = photoHeight + AndroidUtilities.dp(100);
@@ -564,28 +569,32 @@ public void setMessageObject(MessageObject messageObject) {
                     photoWidth *= maxHeight / photoHeight;
                     photoHeight = (int)maxHeight;
                 }
+                if (photoWidth > maxWidth) {
+                    photoHeight *= maxWidth / photoWidth;
+                    photoWidth = (int)maxWidth;
+                }
                 backgroundWidth = photoWidth + AndroidUtilities.dp(12);
                 currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80);
                 photoImage.setNeedsQualityThumb(false);
                 photoImage.setShouldGenerateQualityThumb(false);
                 photoImage.setParentMessageObject(null);
-                if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() > 0) {
-                    File f = new File(currentMessageObject.messageOwner.attachPath);
+                if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() > 0) {
+                    File f = new File(messageObject.messageOwner.attachPath);
                     if (f.exists()) {
-                        photoImage.setImage(null, currentMessageObject.messageOwner.attachPath,
+                        photoImage.setImage(null, messageObject.messageOwner.attachPath,
                                 String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                                 null,
                                 currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
                                 "b1",
-                                currentMessageObject.messageOwner.media.document.size, true);
+                                messageObject.messageOwner.media.document.size, true);
                     }
-                } else if (currentMessageObject.messageOwner.media.document.id != 0) {
-                    photoImage.setImage(currentMessageObject.messageOwner.media.document, null,
+                } else if (messageObject.messageOwner.media.document.id != 0) {
+                    photoImage.setImage(messageObject.messageOwner.media.document, null,
                             String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
                             null,
                             currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
                             "b1",
-                            currentMessageObject.messageOwner.media.document.size, true);
+                            messageObject.messageOwner.media.document.size, true);
                 }
             } else {
                 if (AndroidUtilities.isTablet()) {
@@ -623,7 +632,7 @@ public void setMessageObject(MessageObject messageObject) {
 
                 if (currentPhotoObject != null) {
                     boolean noSize = false;
-                    if (currentMessageObject.type == 3 || currentMessageObject.type == 8) {
+                    if (messageObject.type == 3 || messageObject.type == 8) {
                         noSize = true;
                     }
                     float scale = (float) currentPhotoObject.w / (float) photoWidth;
@@ -656,12 +665,12 @@ public void setMessageObject(MessageObject messageObject) {
                             w = (int) (currentPhotoObject.w / hScale);
                         }
                     }
-                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (currentMessageObject.isOut() ? 20 : 0));
+                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (messageObject.isOut() ? 20 : 0));
                     if (w < timeWidthTotal) {
                         w = timeWidthTotal;
                     }
 
-                    if (currentMessageObject.isSecretPhoto()) {
+                    if (messageObject.isSecretPhoto()) {
                         if (AndroidUtilities.isTablet()) {
                             w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
                         } else {
@@ -685,7 +694,7 @@ public void setMessageObject(MessageObject messageObject) {
                     String fileName = FileLoader.getAttachFileName(currentPhotoObject);
                     if (messageObject.type == 1) {
                         boolean photoExist = true;
-                        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                        File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
                         if (!cacheFile.exists()) {
                             photoExist = false;
                         } else {
@@ -716,6 +725,7 @@ public void setMessageObject(MessageObject messageObject) {
                     photoImage.setImageBitmap((Bitmap)null);
                 }
             }
+            super.setMessageObject(messageObject);
 
             invalidate();
         }
@@ -758,7 +768,7 @@ public void updateButtonState(boolean animated) {
                 buttonState = 1;
                 radialProgress.setBackground(getDrawableForCurrentState(), true, animated);
                 Float progress = ImageLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
-                if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.messageOwner.id)) {
+                if (progress == null && SendMessagesHelper.getInstance().isSendingMessage(currentMessageObject.getId())) {
                     progress = 1.0f;
                 }
                 radialProgress.setProgress(progress != null ? progress : 0, false);
@@ -808,7 +818,7 @@ public void updateButtonState(boolean animated) {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14) + namesOffset);
     }
 
     @Override
@@ -829,10 +839,10 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
                 x = AndroidUtilities.dp(15);
             }
         }
-        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
+        photoImage.setImageCoords(x, AndroidUtilities.dp(7) + namesOffset, photoWidth, photoHeight);
         int size = AndroidUtilities.dp(48);
         buttonX = (int)(x + (photoWidth - size) / 2.0f);
-        buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+        buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f) + namesOffset;
 
         radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
         deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
@@ -879,7 +889,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
             gifDrawable.draw(canvas);
             canvas.restore();
         } else {
-            photoImage.setPressed(isPressed() && isCheckPressed || !isCheckPressed && isPressed);
+            photoImage.setPressed(isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted);
             photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
             imageDrawn = photoImage.draw(canvas);
             drawTime = photoImage.getVisible();
@@ -899,7 +909,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
                 menuDrawable = docMenuInDrawable;
             }
 
-            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10));
+            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(44), AndroidUtilities.dp(10) + namesOffset);
             menuDrawable.draw(canvas);
 
             if (buttonState >= 0 && buttonState < 4) {
@@ -1013,7 +1023,7 @@ public void onFailedDownload(String fileName) {
     @Override
     public void onSuccessDownload(String fileName) {
         radialProgress.setProgress(1, true);
-        if (currentMessageObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id) {
+        if (currentMessageObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == currentMessageObject.getId()) {
             buttonState = 2;
             didPressedButton(true);
         } else if (!photoNotSet) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
index ef2814c84..f1f324e61 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMessageCell.java
@@ -17,6 +17,7 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.messenger.FileLog;
 import org.telegram.android.MessageObject;
+import org.telegram.ui.Components.URLSpanNoUnderline;
 
 public class ChatMessageCell extends ChatBaseCell {
 
@@ -62,7 +63,16 @@ public boolean onTouchEvent(MotionEvent event) {
                                     } else {
                                         if (link[0] == pressedLink) {
                                             try {
-                                                pressedLink.onClick(this);
+                                                if (pressedLink instanceof URLSpanNoUnderline) {
+                                                    String url = ((URLSpanNoUnderline) pressedLink).getURL();
+                                                    if (url.startsWith("@") || url.startsWith("#")) {
+                                                        if (delegate != null) {
+                                                            delegate.didPressUrl(url);
+                                                        }
+                                                    }
+                                                } else {
+                                                    pressedLink.onClick(this);
+                                                }
                                             } catch (Exception e) {
                                                 FileLog.e("tmessages", e);
                                             }
@@ -164,6 +174,8 @@ public void setMessageObject(MessageObject messageObject) {
 
             int maxChildWidth = Math.max(backgroundWidth, nameWidth);
             maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
+            maxChildWidth = Math.max(maxChildWidth, replyNameWidth);
+            maxChildWidth = Math.max(maxChildWidth, replyTextWidth);
 
             int timeMore = timeWidth + AndroidUtilities.dp(6);
             if (messageObject.isOut()) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 9858f39cf..b18bacc25 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -612,7 +612,7 @@ public void checkCurrentDialogIndex() {
             }
         }
         if (dialog != null) {
-            if (currentDialogId != dialog.id || message != null && message.messageOwner.id != dialog.top_message || unreadCount != dialog.unread_count) {
+            if (currentDialogId != dialog.id || message != null && message.getId() != dialog.top_message || unreadCount != dialog.unread_count) {
                 currentDialogId = dialog.id;
                 update(0);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
new file mode 100644
index 000000000..64d5d7bbe
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/MentionCell.java
@@ -0,0 +1,99 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.BackupImageView;
+
+public class MentionCell extends LinearLayout {
+
+    private BackupImageView imageView;
+    private TextView nameTextView;
+    private TextView usernameTextView;
+    private AvatarDrawable avatarDrawable;
+
+    public MentionCell(Context context) {
+        super(context);
+
+        setOrientation(HORIZONTAL);
+
+        avatarDrawable = new AvatarDrawable();
+        avatarDrawable.setSmallStyle(true);
+
+        imageView = new BackupImageView(context);
+        imageView.imageReceiver.setRoundRadius(AndroidUtilities.dp(14));
+        addView(imageView);
+        LayoutParams layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams.leftMargin = AndroidUtilities.dp(12);
+        layoutParams.topMargin = AndroidUtilities.dp(4);
+        layoutParams.width = AndroidUtilities.dp(28);
+        layoutParams.height = AndroidUtilities.dp(28);
+        imageView.setLayoutParams(layoutParams);
+
+        nameTextView = new TextView(context);
+        nameTextView.setTextColor(0xff000000);
+        nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        nameTextView.setSingleLine(true);
+        nameTextView.setGravity(Gravity.LEFT);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(nameTextView);
+        layoutParams = (LayoutParams) nameTextView.getLayoutParams();
+        layoutParams.leftMargin = AndroidUtilities.dp(12);
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.CENTER_VERTICAL;
+        nameTextView.setLayoutParams(layoutParams);
+
+        usernameTextView = new TextView(context);
+        usernameTextView.setTextColor(0xff999999);
+        usernameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
+        usernameTextView.setSingleLine(true);
+        usernameTextView.setGravity(Gravity.LEFT);
+        usernameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        addView(usernameTextView);
+        layoutParams = (LayoutParams) usernameTextView.getLayoutParams();
+        layoutParams.leftMargin = AndroidUtilities.dp(12);
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.CENTER_VERTICAL;
+        usernameTextView.setLayoutParams(layoutParams);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(36), MeasureSpec.EXACTLY));
+    }
+
+    public void setUser(TLRPC.User user) {
+        if (user == null) {
+            nameTextView.setText("");
+            usernameTextView.setText("");
+            imageView.setImageDrawable(null);
+            return;
+        }
+        avatarDrawable.setInfo(user);
+        if (user.photo != null && user.photo.photo_small != null) {
+            imageView.setImage(user.photo.photo_small, "50_50", avatarDrawable);
+        } else {
+            imageView.setImageDrawable(avatarDrawable);
+        }
+        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        usernameTextView.setText("@" + user.username);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
index faf3b1630..25d67fe46 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoEditToolCell.java
@@ -83,4 +83,10 @@ public void setIconAndTextAndValue(int resId, String text, float value) {
             valueTextView.setText("" + (int) value);
         }
     }
+
+    public void setIconAndTextAndValue(int resId, String text, String value) {
+        iconImage.setImageResource(resId);
+        nameTextView.setText(text.toUpperCase());
+        valueTextView.setText(value);
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
index 2fe47d9e0..b20ed7c78 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerAlbumsCell.java
@@ -15,7 +15,6 @@
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
@@ -27,8 +26,8 @@
 
 public class PhotoPickerAlbumsCell extends FrameLayoutFixed {
 
-    public static interface PhotoPickerAlbumsCellDelegate {
-        public abstract void didSelectAlbum(MediaController.AlbumEntry albumEntry);
+    public interface PhotoPickerAlbumsCellDelegate {
+        void didSelectAlbum(MediaController.AlbumEntry albumEntry);
     }
 
     private AlbumView[] albumViews;
@@ -180,11 +179,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             albumViews[a].setLayoutParams(layoutParams);
         }
 
-        ViewGroup.LayoutParams layoutParams = getLayoutParams();
-        if (layoutParams != null) {
-            layoutParams.height = AndroidUtilities.dp(4) + itemWidth;
-            setLayoutParams(layoutParams);
-        }
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(4) + itemWidth, MeasureSpec.EXACTLY));
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
index 30c1fe4c6..e24419ed1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PhotoPickerSearchCell.java
@@ -26,8 +26,8 @@
 
 public class PhotoPickerSearchCell extends LinearLayout {
 
-    public static interface PhotoPickerSearchCellDelegate {
-        public abstract void didPressedSearchButton(int index);
+    public interface PhotoPickerSearchCellDelegate {
+        void didPressedSearchButton(int index);
     }
 
     private class SearchButton extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
index 90f3d4f54..32719d2a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/SharedPhotoVideoCell.java
@@ -14,7 +14,6 @@
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
@@ -39,9 +38,9 @@
     private int itemsCount;
     private boolean isFirst;
 
-    public static interface SharedPhotoVideoCellDelegate {
-        public abstract void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
-        public abstract boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
+    public interface SharedPhotoVideoCellDelegate {
+        void didClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
+        boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObject messageObject, int a);
     }
 
     private class PhotoVideoView extends FrameLayoutFixed {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 4d6c9d3e7..dba7ba96e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -10,6 +10,7 @@
 
 import android.app.Activity;
 import android.app.AlertDialog;
+import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -19,6 +20,7 @@
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
 import android.media.ExifInterface;
 import android.net.Uri;
 import android.os.Build;
@@ -27,6 +29,7 @@
 import android.support.v7.widget.LinearLayoutManager;
 import android.text.Html;
 import android.text.TextUtils;
+import android.util.Base64;
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -42,6 +45,7 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
@@ -49,14 +53,20 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
 import org.telegram.android.MessagesStorage;
 import org.telegram.android.NotificationsController;
 import org.telegram.android.SecretChatHelper;
 import org.telegram.android.SendMessagesHelper;
+import org.telegram.android.query.ReplyMessageQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.SerializedData;
+import org.telegram.messenger.TLClassStore;
+import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.android.ContactsController;
 import org.telegram.messenger.FileLog;
@@ -68,6 +78,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.Utilities;
 import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.ui.Adapters.StickersAdapter;
 import org.telegram.ui.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.ui.AnimationCompat.AnimatorSetProxy;
@@ -139,12 +150,21 @@
     private FrameLayout stickersPanel;
     private TextView muteItem;
     private ImageView pagedownButton;
+    private BackupImageView replyImageView;
+    private TextView replyNameTextView;
+    private TextView replyObjectTextView;
+    private ImageView replyIconImageView;
+    private MentionsAdapter mentionsAdapter;
+    private ListView mentionListView;
+    private AnimatorSetProxy mentionListAnimation;
 
     private boolean allowStickersPanel;
     private AnimatorSetProxy runningAnimation;
 
     private MessageObject selectedObject;
+    private ArrayList<MessageObject> forwardingMessages;
     private MessageObject forwaringMessage;
+    private MessageObject replyingMessageObject;
     private boolean paused = true;
     private boolean readWhenResume = false;
 
@@ -154,7 +174,6 @@
     private int readWithMid = 0;
     private boolean scrollToTopOnResume = false;
     private boolean scrollToTopUnReadOnResume = false;
-    private boolean isCustomTheme = false;
     private long dialog_id;
     private boolean isBroadcast = false;
     private HashMap<Integer, MessageObject> selectedMessagesIds = new HashMap<>();
@@ -219,6 +238,7 @@
     private final static int delete_chat = 12;
     private final static int share_contact = 13;
     private final static int mute = 14;
+    private final static int reply = 15;
 
     private final static int id_chat_compose_panel = 1000;
 
@@ -396,6 +416,7 @@ public void run() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateMessageMedia);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.replaceMessagesObjects);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didLoadedReplyMessages);
 
         super.onFragmentCreate();
 
@@ -431,6 +452,12 @@ public void onFragmentDestroy() {
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onDestroy();
         }
+        if (avatarImageView != null) {
+            avatarImageView.setImageDrawable(null);
+        }
+        if (replyImageView != null) {
+            replyImageView.setImageDrawable(null);
+        }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
@@ -456,6 +483,7 @@ public void onFragmentDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateMessageMedia);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.replaceMessagesObjects);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didLoadedReplyMessages);
         if (AndroidUtilities.isTablet()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
         }
@@ -535,13 +563,10 @@ public void onItemClick(final int id) {
                         PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(false);
                         fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
                             @Override
-                            public void didSelectPhotos(ArrayList<String> photos) {
-                                SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id);
-                            }
-
-                            @Override
-                            public void didSelectWebPhotos(ArrayList<MediaController.SearchImage> photos) {
-                                SendMessagesHelper.prepareSendingPhotosSearch(photos, dialog_id);
+                            public void didSelectPhotos(ArrayList<String> photos, ArrayList<MediaController.SearchImage> webPhotos) {
+                                SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject);
+                                SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
+                                showReplyForMessageObjectOrForward(false, null, null, true);
                             }
 
                             @Override
@@ -586,10 +611,9 @@ public void startPhotoSelectActivity() {
                         fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
                             @Override
                             public void didSelectLocation(double latitude, double longitude) {
-                                SendMessagesHelper.getInstance().sendMessage(latitude, longitude, dialog_id);
-                                if (chatListView != null) {
-                                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                }
+                                SendMessagesHelper.getInstance().sendMessage(latitude, longitude, dialog_id, replyingMessageObject);
+                                moveScrollToLastMessage();
+                                showReplyForMessageObjectOrForward(false, null, null, true);
                                 if (paused) {
                                     scrollToTopOnResume = true;
                                 }
@@ -602,7 +626,8 @@ public void didSelectLocation(double latitude, double longitude) {
                             @Override
                             public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
                                 activity.finishFragment();
-                                SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id);
+                                SendMessagesHelper.prepareSendingDocuments(files, files, null, null, dialog_id, replyingMessageObject);
+                                showReplyForMessageObjectOrForward(false, null, null, true);
                             }
 
                             @Override
@@ -686,8 +711,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         Bundle args = new Bundle();
                         args.putBoolean("onlySelect", true);
                         args.putBoolean("serverOnly", true);
-                        args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
-                        args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
                         MessagesActivity fragment = new MessagesActivity(args);
                         fragment.setDelegate(ChatActivity.this);
                         presentFragment(fragment);
@@ -742,13 +765,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                 @Override
                                 public void onClick(DialogInterface dialogInterface, int i) {
-                                    SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id);
-                                    chatListView.post(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                        }
-                                    });
+                                    SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id, replyingMessageObject);
+                                    moveScrollToLastMessage();
+                                    showReplyForMessageObjectOrForward(false, null, null, true);
                                 }
                             });
                             builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -815,6 +834,18 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             }
                             NotificationsController.updateServerNotificationsSettings(dialog_id);
                         }
+                    } else if (id == reply) {
+                        if (selectedMessagesIds.size() == 1) {
+                            ArrayList<Integer> ids = new ArrayList<>(selectedMessagesIds.keySet());
+                            MessageObject messageObject = messagesDict.get(ids.get(0));
+                            if (messageObject != null && messageObject.messageOwner.id > 0) {
+                                showReplyForMessageObjectOrForward(true, messageObject, null, true);
+                            }
+                        }
+                        selectedMessagesIds.clear();
+                        selectedMessagesCanCopyIds.clear();
+                        actionBar.hideActionMode();
+                        updateVisibleRows();
                     }
                 }
             });
@@ -1004,7 +1035,10 @@ public boolean onTouch(View v, MotionEvent event) {
             selectedMessagesCountTextView.setLayoutParams(layoutParams);
 
             if (currentEncryptedChat == null) {
-                actionModeViews.add(actionMode.addItem(quoteforward, R.drawable.ic_ab_fwd_quoteforward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                if (!isBroadcast) {
+                    actionModeViews.add(actionMode.addItem(reply, R.drawable.ic_ab_reply, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
+                }
                 actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
                 actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
                 actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
@@ -1013,13 +1047,15 @@ public boolean onTouch(View v, MotionEvent event) {
                 actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode, null, AndroidUtilities.dp(54)));
             }
             actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+            if (actionMode.getItem(reply) != null) {
+                actionMode.getItem(reply).setVisibility(selectedMessagesIds.size() == 1 ? View.VISIBLE : View.GONE);
+            }
             checkActionBarMenu();
 
             fragmentView = new SizeNotifierRelativeLayout(getParentActivity());
             SizeNotifierRelativeLayout contentView = (SizeNotifierRelativeLayout) fragmentView;
 
             contentView.setBackgroundImage(ApplicationLoader.getCachedWallpaper());
-            isCustomTheme = ApplicationLoader.isCustomTheme();
 
             emptyViewContainer = new FrameLayout(getParentActivity());
             emptyViewContainer.setPadding(0, 0, 0, AndroidUtilities.dp(48));
@@ -1043,11 +1079,11 @@ public boolean onTouch(View v, MotionEvent event) {
                 } else {
                     emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
                 }
-                emptyView.setPadding(AndroidUtilities.dp(7), AndroidUtilities.dp(1), AndroidUtilities.dp(7), AndroidUtilities.dp(1));
                 emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
                 emptyView.setGravity(Gravity.CENTER);
                 emptyView.setTextColor(0xffffffff);
-                emptyView.setBackgroundResource(isCustomTheme ? R.drawable.system_black : R.drawable.system_blue);
+                emptyView.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
+                emptyView.setPadding(AndroidUtilities.dp(7), AndroidUtilities.dp(1), AndroidUtilities.dp(7), AndroidUtilities.dp(1));
                 emptyViewContainer.addView(emptyView);
                 layoutParams2 = (FrameLayout.LayoutParams) emptyView.getLayoutParams();
                 layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
@@ -1056,7 +1092,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 emptyView.setLayoutParams(layoutParams2);
             } else {
                 LinearLayout secretChatPlaceholder = new LinearLayout(getParentActivity());
-                secretChatPlaceholder.setBackgroundResource(isCustomTheme ? R.drawable.system_black : R.drawable.system_blue);
+                secretChatPlaceholder.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
                 secretChatPlaceholder.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
                 secretChatPlaceholder.setOrientation(LinearLayout.VERTICAL);
                 emptyViewContainer.addView(secretChatPlaceholder);
@@ -1334,7 +1370,7 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
 
             progressView = new FrameLayout(getParentActivity());
             progressView.setVisibility(View.INVISIBLE);
-            progressView.setBackgroundResource(isCustomTheme ? R.drawable.system_loader2 : R.drawable.system_loader1);
+            progressView.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
             contentView.addView(progressView);
             layoutParams3 = (RelativeLayout.LayoutParams) progressView.getLayoutParams();
             layoutParams3.width = AndroidUtilities.dp(36);
@@ -1358,6 +1394,113 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
             layoutParams2.gravity = Gravity.CENTER;
             progressBar.setLayoutParams(layoutParams2);
 
+            if (currentChat != null && !isBroadcast) {
+                mentionListView = new ListView(getParentActivity());
+                mentionListView.setBackgroundResource(R.drawable.compose_panel);
+                mentionListView.setVisibility(View.GONE);
+                mentionListView.setPadding(0, AndroidUtilities.dp(2), 0, 0);
+                mentionListView.setClipToPadding(true);
+                mentionListView.setDividerHeight(0);
+                mentionListView.setDivider(null);
+                if (Build.VERSION.SDK_INT > 8) {
+                    mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
+                }
+                contentView.addView(mentionListView);
+                layoutParams3 = (RelativeLayout.LayoutParams) mentionListView.getLayoutParams();
+                layoutParams3.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+                layoutParams3.height = AndroidUtilities.dp(110);
+                layoutParams3.topMargin = -AndroidUtilities.dp(108);
+                layoutParams3.addRule(RelativeLayout.ALIGN_TOP, id_chat_compose_panel);
+                mentionListView.setLayoutParams(layoutParams3);
+
+                mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(getParentActivity(), new MentionsAdapter.MentionsAdapterDelegate() {
+                    @Override
+                    public void needChangePanelVisibility(boolean show) {
+                        if (show) {
+                            RelativeLayout.LayoutParams layoutParams3 = (RelativeLayout.LayoutParams) mentionListView.getLayoutParams();
+                            layoutParams3.height = AndroidUtilities.dp(2 + 36 * Math.min(3, mentionsAdapter.getCount()));
+                            layoutParams3.topMargin = -AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getCount()));
+                            mentionListView.setLayoutParams(layoutParams3);
+
+                            if (mentionListAnimation != null) {
+                                mentionListAnimation.cancel();
+                                mentionListAnimation = null;
+                            }
+
+                            if (mentionListView.getVisibility() == View.VISIBLE) {
+                                ViewProxy.setAlpha(mentionListView, 1.0f);
+                                return;
+                            }
+                            if (allowStickersPanel) {
+                                mentionListView.setVisibility(View.VISIBLE);
+                                mentionListAnimation = new AnimatorSetProxy();
+                                mentionListAnimation.playTogether(
+                                        ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f, 1.0f)
+                                );
+                                mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                                    @Override
+                                    public void onAnimationEnd(Object animation) {
+                                        if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
+                                            mentionListView.clearAnimation();
+                                            mentionListAnimation = null;
+                                        }
+                                    }
+                                });
+                                mentionListAnimation.setDuration(200);
+                                mentionListAnimation.start();
+                            } else {
+                                ViewProxy.setAlpha(mentionListView, 1.0f);
+                                mentionListView.clearAnimation();
+                                mentionListView.setVisibility(View.INVISIBLE);
+                            }
+                        } else {
+                            if (mentionListAnimation != null) {
+                                mentionListAnimation.cancel();
+                                mentionListAnimation = null;
+                            }
+
+                            if (mentionListView.getVisibility() == View.GONE) {
+                                return;
+                            }
+                            if (allowStickersPanel) {
+                                mentionListAnimation = new AnimatorSetProxy();
+                                mentionListAnimation.playTogether(
+                                        ObjectAnimatorProxy.ofFloat(mentionListView, "alpha", 0.0f)
+                                );
+                                mentionListAnimation.addListener(new AnimatorListenerAdapterProxy() {
+                                    @Override
+                                    public void onAnimationEnd(Object animation) {
+                                        if (mentionListAnimation != null && mentionListAnimation.equals(animation)) {
+                                            mentionListView.clearAnimation();
+                                            mentionListView.setVisibility(View.GONE);
+                                            mentionListAnimation = null;
+                                        }
+                                    }
+                                });
+                                mentionListAnimation.setDuration(200);
+                                mentionListAnimation.start();
+                            } else {
+                                mentionListView.clearAnimation();
+                                mentionListView.setVisibility(View.GONE);
+                            }
+                        }
+                    }
+                }));
+                mentionsAdapter.setChatInfo(info);
+
+                mentionListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                    @Override
+                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                        TLRPC.User user = mentionsAdapter.getItem(position);
+                        if (user != null) {
+                            int start = mentionsAdapter.getUsernameStartPosition();
+                            int len = mentionsAdapter.getUsernameLength();
+                            chatActivityEnterView.replaceWithText(start, len, "@" + user.username + " ");
+                        }
+                    }
+                });
+            }
+
             if (chatActivityEnterView != null) {
                 chatActivityEnterView.onDestroy();
             }
@@ -1374,12 +1517,8 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
             chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
                 @Override
                 public void onMessageSend() {
-                    chatListView.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                        }
-                    });
+                    moveScrollToLastMessage();
+                    showReplyForMessageObjectOrForward(false, null, null, true);
                 }
 
                 @Override
@@ -1387,6 +1526,9 @@ public void onTextChanged(CharSequence text) {
                     if (stickersAdapter != null) {
                         stickersAdapter.loadStikersForEmoji(text);
                     }
+                    if (mentionsAdapter != null) {
+                        mentionsAdapter.searchUsername(text.toString(), chatActivityEnterView.getCursorPosition(), messages);
+                    }
                 }
 
                 @Override
@@ -1422,16 +1564,110 @@ public void onWindowSizeChanged(int size) {
                             stickersPanel.clearAnimation();
                             stickersPanel.setVisibility(View.INVISIBLE);
                         }
+                        if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
+                            mentionListView.clearAnimation();
+                            mentionListView.setVisibility(View.INVISIBLE);
+                        }
                     } else {
                         allowStickersPanel = true;
                         if (stickersPanel.getVisibility() == View.INVISIBLE) {
                             stickersPanel.clearAnimation();
                             stickersPanel.setVisibility(View.VISIBLE);
                         }
+                        if (mentionListView != null && mentionListView.getVisibility() == View.INVISIBLE) {
+                            mentionListView.clearAnimation();
+                            mentionListView.setVisibility(View.VISIBLE);
+                        }
                     }
                 }
             });
 
+            FrameLayout replyLayout = new FrameLayout(getParentActivity());
+            replyLayout.setClickable(true);
+            chatActivityEnterView.addTopView(replyLayout, AndroidUtilities.dp(48));
+
+            View lineView = new View(getParentActivity());
+            lineView.setBackgroundColor(0xffe8e8e8);
+            replyLayout.addView(lineView);
+            layoutParams2 = (FrameLayout.LayoutParams) lineView.getLayoutParams();
+            layoutParams2.gravity = Gravity.BOTTOM;
+            layoutParams2.width = FrameLayout.LayoutParams.MATCH_PARENT;
+            layoutParams2.height = AndroidUtilities.dp(1);
+            lineView.setLayoutParams(layoutParams2);
+
+            replyIconImageView = new ImageView(getParentActivity());
+            replyIconImageView.setScaleType(ImageView.ScaleType.CENTER);
+            replyLayout.addView(replyIconImageView);
+            layoutParams2 = (FrameLayout.LayoutParams) replyIconImageView.getLayoutParams();
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            layoutParams2.width = AndroidUtilities.dp(52);
+            layoutParams2.height = AndroidUtilities.dp(46);
+            replyIconImageView.setLayoutParams(layoutParams2);
+
+            ImageView imageView = new ImageView(getParentActivity());
+            imageView.setImageResource(R.drawable.delete_reply);
+            imageView.setScaleType(ImageView.ScaleType.CENTER);
+            replyLayout.addView(imageView);
+            layoutParams2 = (FrameLayout.LayoutParams) imageView.getLayoutParams();
+            layoutParams2.topMargin = AndroidUtilities.dp(0.5f);
+            layoutParams2.width = AndroidUtilities.dp(52);
+            layoutParams2.height = AndroidUtilities.dp(46);
+            layoutParams2.gravity = Gravity.RIGHT | Gravity.TOP;
+            imageView.setLayoutParams(layoutParams2);
+            imageView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (forwardingMessages != null) {
+                        forwardingMessages.clear();
+                    }
+                    showReplyForMessageObjectOrForward(false, null, null, true);
+                }
+            });
+
+            replyNameTextView = new TextView(getParentActivity());
+            replyNameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            replyNameTextView.setTextColor(0xff377aae);
+            replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+            replyNameTextView.setSingleLine(true);
+            replyNameTextView.setEllipsize(TextUtils.TruncateAt.END);
+            replyNameTextView.setMaxLines(1);
+            replyLayout.addView(replyNameTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) replyNameTextView.getLayoutParams();
+            layoutParams2.leftMargin = AndroidUtilities.dp(52);
+            layoutParams2.rightMargin = AndroidUtilities.dp(52);
+            layoutParams2.topMargin = AndroidUtilities.dp(4);
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            replyNameTextView.setLayoutParams(layoutParams2);
+
+            replyObjectTextView = new TextView(getParentActivity());
+            replyObjectTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
+            replyObjectTextView.setTextColor(0xff999999);
+            replyObjectTextView.setSingleLine(true);
+            replyObjectTextView.setEllipsize(TextUtils.TruncateAt.END);
+            replyObjectTextView.setMaxLines(1);
+            replyLayout.addView(replyObjectTextView);
+            layoutParams2 = (FrameLayout.LayoutParams) replyObjectTextView.getLayoutParams();
+            layoutParams2.leftMargin = AndroidUtilities.dp(52);
+            layoutParams2.rightMargin = AndroidUtilities.dp(52);
+            layoutParams2.topMargin = AndroidUtilities.dp(22);
+            layoutParams2.width = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            replyObjectTextView.setLayoutParams(layoutParams2);
+
+            replyImageView = new BackupImageView(getParentActivity());
+            replyImageView.processDetach = false;
+            replyLayout.addView(replyImageView);
+            layoutParams2 = (FrameLayout.LayoutParams) replyImageView.getLayoutParams();
+            layoutParams2.leftMargin = AndroidUtilities.dp(52);
+            layoutParams2.topMargin = AndroidUtilities.dp(6);
+            layoutParams2.width = AndroidUtilities.dp(34);
+            layoutParams2.height = AndroidUtilities.dp(34);
+            layoutParams2.gravity = Gravity.TOP | Gravity.LEFT;
+            replyImageView.setLayoutParams(layoutParams2);
+
             stickersPanel = new FrameLayout(getParentActivity());
             stickersPanel.setVisibility(View.GONE);
             contentView.addView(stickersPanel);
@@ -1535,14 +1771,15 @@ public void onItemClick(View view, int position) {
                                     }
                                 }
                             }
-                            SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, dialog_id);
+                            SendMessagesHelper.getInstance().sendMessage((TLRPC.TL_document) document, null, null, dialog_id, replyingMessageObject);
+                            showReplyForMessageObjectOrForward(false, null, null, true);
                         }
                         chatActivityEnterView.setFieldText("");
                     }
                 }));
             }
 
-            ImageView imageView = new ImageView(getParentActivity());
+            imageView = new ImageView(getParentActivity());
             imageView.setImageResource(R.drawable.stickers_back_arrow);
             stickersPanel.addView(imageView);
             layoutParams2 = (FrameLayout.LayoutParams) imageView.getLayoutParams();
@@ -1664,6 +1901,179 @@ public void onClick(View view) {
         return fragmentView;
     }
 
+    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName) {
+        if (arrayList == null || arrayList.isEmpty()) {
+            return;
+        }
+        for (MessageObject object : arrayList) {
+            if (!fromMyName) {
+                SendMessagesHelper.getInstance().sendMessage(object, dialog_id);
+            } else {
+                SendMessagesHelper.getInstance().processForwardFromMyName(object, dialog_id);
+            }
+        }
+    }
+
+    public void showReplyForMessageObjectOrForward(boolean show, MessageObject messageObject, ArrayList<MessageObject> messageObjects, boolean animated) {
+        if (show) {
+            if (messageObject == null && messageObjects == null) {
+                return;
+            }
+            if (messageObject != null) {
+                TLRPC.User user = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
+                if (user == null) {
+                    return;
+                }
+                forwardingMessages = null;
+                replyIconImageView.setImageResource(R.drawable.reply);
+                replyingMessageObject = messageObject;
+                chatActivityEnterView.setReplyingMessageObject(messageObject);
+                replyNameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                if (messageObject.messageText != null) {
+                    String mess = messageObject.messageText.toString();
+                    if (mess.length() > 150) {
+                        mess = mess.substring(0, 150);
+                    }
+                    mess = mess.replace("\n", " ");
+                    replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14)));
+                }
+            } else if (messageObjects != null) {
+                if (messageObjects.isEmpty()) {
+                    return;
+                }
+                chatActivityEnterView.setForceShowSendButton(true, animated);
+                chatActivityEnterView.setReplyingMessageObject(null);
+                replyingMessageObject = null;
+                ArrayList<Integer> uids = new ArrayList<>();
+                replyIconImageView.setImageResource(R.drawable.forward_blue);
+                forwardingMessages = messageObjects;
+                uids.add(messageObjects.get(0).messageOwner.from_id);
+                int type = messageObjects.get(0).type;
+                for (int a = 1; a < messageObjects.size(); a++) {
+                    Integer uid = messageObjects.get(a).messageOwner.from_id;
+                    if (!uids.contains(uid)) {
+                        uids.add(uid);
+                    }
+                    if (messageObjects.get(a).type != type) {
+                        type = -1;
+                    }
+                }
+                StringBuilder userNames = new StringBuilder();
+                for (int a = 0; a < uids.size(); a++) {
+                    Integer uid = uids.get(a);
+                    TLRPC.User user = MessagesController.getInstance().getUser(uid);
+                    if (user == null) {
+                        continue;
+                    }
+                    if (uids.size() == 1) {
+                        userNames.append(ContactsController.formatName(user.first_name, user.last_name));
+                    } else if (uids.size() == 2 || userNames.length() == 0) {
+                        if (userNames.length() > 0) {
+                            userNames.append(", ");
+                        }
+                        if (user.first_name != null && user.first_name.length() > 0) {
+                            userNames.append(user.first_name);
+                        } else if (user.last_name != null && user.last_name.length() > 0) {
+                            userNames.append(user.last_name);
+                        } else {
+                            userNames.append(" ");
+                        }
+                    } else {
+                        userNames.append(" ");
+                        userNames.append(LocaleController.formatPluralString("AndOther", uids.size() - 1));
+                        break;
+                    }
+                }
+                replyNameTextView.setText(userNames);
+                if (type == -1 || type == 0) {
+                    if (messageObjects.size() == 1 && messageObjects.get(0).messageText != null) {
+                        String mess = messageObjects.get(0).messageText.toString();
+                        if (mess.length() > 150) {
+                            mess = mess.substring(0, 150);
+                        }
+                        mess = mess.replace("\n", " ");
+                        replyObjectTextView.setText(Emoji.replaceEmoji(mess, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14)));
+                    } else {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessage", messageObjects.size()));
+                    }
+                } else {
+                    if (type == 1) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPhoto", messageObjects.size()));
+                        if (messageObjects.size() == 1) {
+                            messageObject = messageObjects.get(0);
+                        }
+                    } else if (type == 4) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedLocation", messageObjects.size()));
+                    } else if (type == 3) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedVideo", messageObjects.size()));
+                        if (messageObjects.size() == 1) {
+                            messageObject = messageObjects.get(0);
+                        }
+                    } else if (type == 12) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", messageObjects.size()));
+                    } else if (type == 2) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", messageObjects.size()));
+                    } else if (type == 13) {
+                        replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", messageObjects.size()));
+                    } else if (type == 8 || type == 9) {
+                        if (messageObjects.size() == 1) {
+                            String name = null;
+                            if ((name = FileLoader.getDocumentFileName(messageObjects.get(0).messageOwner.media.document)).length() != 0) {
+                                replyObjectTextView.setText(name);
+                            }
+                            messageObject = messageObjects.get(0);
+                        } else {
+                            replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedFile", messageObjects.size()));
+                        }
+                    }
+                }
+            }
+            FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) replyNameTextView.getLayoutParams();
+            FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) replyObjectTextView.getLayoutParams();
+            TLRPC.PhotoSize photoSize = messageObject != null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 80) : null;
+            if (photoSize == null || messageObject.type == 13) {
+                replyImageView.setImageBitmap(null);
+                replyImageView.setVisibility(View.INVISIBLE);
+                layoutParams1.leftMargin = layoutParams2.leftMargin = AndroidUtilities.dp(52);
+            } else {
+                replyImageView.setImage(photoSize.location, "50_50", (Drawable) null);
+                replyImageView.setVisibility(View.VISIBLE);
+                layoutParams1.leftMargin = layoutParams2.leftMargin = AndroidUtilities.dp(96);
+            }
+            replyNameTextView.setLayoutParams(layoutParams1);
+            replyObjectTextView.setLayoutParams(layoutParams2);
+            chatActivityEnterView.showTopView(animated);
+        } else {
+            if (replyingMessageObject == null && forwardingMessages == null) {
+                return;
+            }
+            if (forwardingMessages != null) {
+                forwardMessages(forwardingMessages, false);
+            }
+            chatActivityEnterView.setForceShowSendButton(false, animated);
+            chatActivityEnterView.hideTopView(animated);
+            chatActivityEnterView.setReplyingMessageObject(null);
+            replyingMessageObject = null;
+            forwardingMessages = null;
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            preferences.edit().remove("reply_" + dialog_id).commit();
+        }
+    }
+
+    private void moveScrollToLastMessage() {
+        if (chatListView != null) {
+            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+            chatListView.setForceTop(-100000 - chatListView.getPaddingTop());
+            chatListView.post(new Runnable() {
+                @Override
+                public void run() {
+                    chatListView.setForceTop(-100000 - chatListView.getPaddingTop());
+                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                }
+            });
+        }
+    }
+
     private boolean sendSecretMessageRead(MessageObject messageObject) {
         if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
             return false;
@@ -1818,8 +2228,8 @@ private int getMessageType(MessageObject messageObject) {
             return -1;
         }
         if (currentEncryptedChat == null) {
-            boolean isBroadcastError = isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isSendError();
-            if (!isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
+            boolean isBroadcastError = isBroadcast && messageObject.getId() <= 0 && messageObject.isSendError();
+            if (!isBroadcast && messageObject.getId() <= 0 && messageObject.isOut() || isBroadcastError) {
                 if (messageObject.isSendError()) {
                     if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
                         return 0;
@@ -1833,7 +2243,7 @@ private int getMessageType(MessageObject messageObject) {
                 if (messageObject.type == 6) {
                     return -1;
                 } else if (messageObject.type == 10 || messageObject.type == 11) {
-                    if (messageObject.messageOwner.id == 0) {
+                    if (messageObject.getId() == 0) {
                         return -1;
                     }
                     return 1;
@@ -1932,15 +2342,15 @@ private int getMessageType(MessageObject messageObject) {
     }
 
     private void addToSelectedMessages(MessageObject messageObject) {
-        if (selectedMessagesIds.containsKey(messageObject.messageOwner.id)) {
-            selectedMessagesIds.remove(messageObject.messageOwner.id);
+        if (selectedMessagesIds.containsKey(messageObject.getId())) {
+            selectedMessagesIds.remove(messageObject.getId());
             if (messageObject.type == 0) {
-                selectedMessagesCanCopyIds.remove(messageObject.messageOwner.id);
+                selectedMessagesCanCopyIds.remove(messageObject.getId());
             }
         } else {
-            selectedMessagesIds.put(messageObject.messageOwner.id, messageObject);
+            selectedMessagesIds.put(messageObject.getId(), messageObject);
             if (messageObject.type == 0) {
-                selectedMessagesCanCopyIds.put(messageObject.messageOwner.id, messageObject);
+                selectedMessagesCanCopyIds.put(messageObject.getId(), messageObject);
             }
         }
         if (actionBar.isActionModeShowed()) {
@@ -1948,6 +2358,9 @@ private void addToSelectedMessages(MessageObject messageObject) {
                 actionBar.hideActionMode();
             }
             actionBar.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+            if (actionBar.createActionMode().getItem(reply) != null) {
+                actionBar.createActionMode().getItem(reply).setVisibility(selectedMessagesIds.size() == 1 ? View.VISIBLE : View.GONE);
+            }
         }
     }
 
@@ -2134,12 +2547,14 @@ public void didFinishEditVideo(String videoPath, long startTime, long endTime, i
                 videoEditedInfo.resultWidth = resultWidth;
                 videoEditedInfo.resultHeight = resultHeight;
                 videoEditedInfo.originalPath = videoPath;
-                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id);
+                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id, replyingMessageObject);
+                showReplyForMessageObjectOrForward(false, null, null, true);
             }
         });
 
         if (parentLayout == null || !fragment.onFragmentCreate()) {
-            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
+            showReplyForMessageObjectOrForward(false, null, null, true);
             return false;
         }
         parentLayout.presentFragment(fragment, removeLast, true, true);
@@ -2185,9 +2600,11 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     public void sendButtonPressed(int index) {
                         MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) arrayList.get(0);
                         if (photoEntry.imagePath != null) {
-                            SendMessagesHelper.prepareSendingPhoto(photoEntry.imagePath, null, dialog_id);
+                            SendMessagesHelper.prepareSendingPhoto(photoEntry.imagePath, null, dialog_id, replyingMessageObject);
+                            showReplyForMessageObjectOrForward(false, null, null, true);
                         } else if (photoEntry.path != null) {
-                            SendMessagesHelper.prepareSendingPhoto(photoEntry.path, null, dialog_id);
+                            SendMessagesHelper.prepareSendingPhoto(photoEntry.path, null, dialog_id, replyingMessageObject);
+                            showReplyForMessageObjectOrForward(false, null, null, true);
                         }
                     }
                 });
@@ -2198,7 +2615,8 @@ public void sendButtonPressed(int index) {
                     showAttachmentError();
                     return;
                 }
-                SendMessagesHelper.prepareSendingPhoto(null, data.getData(), dialog_id);
+                SendMessagesHelper.prepareSendingPhoto(null, data.getData(), dialog_id, replyingMessageObject);
+                showReplyForMessageObjectOrForward(false, null, null, true);
             } else if (requestCode == 2) {
                 String videoPath = null;
                 if (data != null) {
@@ -2239,7 +2657,8 @@ public void sendButtonPressed(int index) {
                         openVideoEditor(videoPath, false);
                     }
                 } else {
-                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, replyingMessageObject);
+                    showReplyForMessageObjectOrForward(false, null, null, true);
                 }
             } else if (requestCode == 21) {
                 if (data == null || data.getData() == null) {
@@ -2256,7 +2675,8 @@ public void sendButtonPressed(int index) {
                     showAttachmentError();
                     return;
                 }
-                SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, dialog_id);
+                SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, null, null, dialog_id, replyingMessageObject);
+                showReplyForMessageObjectOrForward(false, null, null, true);
             }
         }
     }
@@ -2344,19 +2764,20 @@ public void didReceivedNotification(int id, final Object... args) {
                 if (load_type == 1) {
                     Collections.reverse(messArr);
                 }
+                ReplyMessageQuery.loadReplyMessagesForMessages(messArr, dialog_id);
 
                 for (int a = 0; a < messArr.size(); a++) {
                     MessageObject obj = messArr.get(a);
-                    if (messagesDict.containsKey(obj.messageOwner.id)) {
+                    if (messagesDict.containsKey(obj.getId())) {
                         continue;
                     }
 
-                    if (obj.messageOwner.id > 0) {
-                        maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
-                        minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                    if (obj.getId() > 0) {
+                        maxMessageId = Math.min(obj.getId(), maxMessageId);
+                        minMessageId = Math.max(obj.getId(), minMessageId);
                     } else if (currentEncryptedChat != null) {
-                        maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
-                        minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                        maxMessageId = Math.max(obj.getId(), maxMessageId);
+                        minMessageId = Math.min(obj.getId(), minMessageId);
                     }
                     if (obj.messageOwner.date != 0) {
                         maxDate = Math.max(maxDate, obj.messageOwner.date);
@@ -2372,7 +2793,7 @@ public void didReceivedNotification(int id, final Object... args) {
                     if (!obj.isOut() && obj.isUnread()) {
                         wasUnread = true;
                     }
-                    messagesDict.put(obj.messageOwner.id, obj);
+                    messagesDict.put(obj.getId(), obj);
                     ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
 
                     if (dayArray == null) {
@@ -2401,7 +2822,7 @@ public void didReceivedNotification(int id, final Object... args) {
                         messages.add(messages.size() - 1, obj);
                     }
 
-                    if (load_type == 2 && obj.messageOwner.id == first_unread_id) {
+                    if (load_type == 2 && obj.getId() == first_unread_id) {
                         TLRPC.Message dateMsg = new TLRPC.Message();
                         dateMsg.message = "";
                         dateMsg.id = 0;
@@ -2417,18 +2838,18 @@ public void didReceivedNotification(int id, final Object... args) {
                         scrollToMessage = unreadMessageObject;
                         scrollToMessageMiddleScreen = false;
                         newRowsCount++;
-                    } else if (load_type == 3 && obj.messageOwner.id == startLoadFromMessageId) {
-                        highlightMessageId = obj.messageOwner.id;
+                    } else if (load_type == 3 && obj.getId() == startLoadFromMessageId) {
+                        highlightMessageId = obj.getId();
                         scrollToMessage = obj;
                         if (isCache) {
                             startLoadFromMessageId = 0;
                         }
                         scrollToMessageMiddleScreen = true;
-                    } else if (load_type == 1 && startLoadFromMessageId != 0 && first_message_id != 0 && obj.messageOwner.id >= first_message_id) {
+                    } else if (load_type == 1 && startLoadFromMessageId != 0 && first_message_id != 0 && obj.getId() >= first_message_id) {
                         startLoadFromMessageId = 0;
                     }
 
-                    if (obj.messageOwner.id == last_message_id) {
+                    if (obj.getId() == last_message_id) {
                         forward_end_reached = true;
                     }
                 }
@@ -2468,7 +2889,7 @@ public void didReceivedNotification(int id, final Object... args) {
                         if (first || scrollToTopOnResume) {
                             chatAdapter.notifyDataSetChanged();
                             if (scrollToMessage != null) {
-                                final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2) : 0;
+                                final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (chatListView.getHeight() - scrollToMessage.getApproximateHeight()) / 2) : 0;
                                 if (messages.get(messages.size() - 1) == scrollToMessage) {
                                     chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11) + yOffset);
                                 } else {
@@ -2492,12 +2913,7 @@ public boolean onPreDraw() {
                                 chatListView.invalidate();
                                 showPagedownButton(true, true);
                             } else {
-                                chatListView.post(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                    }
-                                });
+                                moveScrollToLastMessage();
                             }
                         } else {
                             int firstVisPos = chatListView.getLastVisiblePosition();
@@ -2530,7 +2946,7 @@ public void run() {
                 if (first && messages.size() > 0) {
                     final boolean wasUnreadFinal = wasUnread;
                     final int last_unread_date_final = last_unread_date;
-                    final int lastid = messages.get(0).messageOwner.id;
+                    final int lastid = messages.get(0).getId();
                     AndroidUtilities.runOnUIThread(new Runnable() {
                         @Override
                         public void run() {
@@ -2552,6 +2968,9 @@ public void run() {
             if (chatListView != null) {
                 chatListView.invalidateViews();
             }
+            if (replyObjectTextView != null) {
+                replyObjectTextView.invalidate();
+            }
         } else if (id == NotificationCenter.updateInterfaces) {
             int updateMask = (Integer)args[0];
             if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
@@ -2601,7 +3020,7 @@ public void run() {
                         if (AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 17 && currentEncryptedChat.ttl > 0 && currentEncryptedChat.ttl <= 60) {
                             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                            builder.setPositiveButton(R.string.OK, null);
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                             builder.setMessage(LocaleController.formatString("CompatibilityChat", R.string.CompatibilityChat, currentUser.first_name, currentUser.first_name));
                             showAlertDialog(builder);
                         }
@@ -2626,16 +3045,16 @@ public void run() {
                             scrollToLastMessage();
                             return;
                         }
-                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                        if (messagesDict.containsKey(obj.getId())) {
                             continue;
                         }
                         currentMaxDate = Math.max(currentMaxDate, obj.messageOwner.date);
-                        if (obj.messageOwner.id > 0) {
-                            currentMinMsgId = Math.max(obj.messageOwner.id, currentMinMsgId);
-                            last_message_id = Math.max(last_message_id, obj.messageOwner.id);
+                        if (obj.getId() > 0) {
+                            currentMinMsgId = Math.max(obj.getId(), currentMinMsgId);
+                            last_message_id = Math.max(last_message_id, obj.getId());
                         } else if (currentEncryptedChat != null) {
-                            currentMinMsgId = Math.min(obj.messageOwner.id, currentMinMsgId);
-                            last_message_id = Math.min(last_message_id, obj.messageOwner.id);
+                            currentMinMsgId = Math.min(obj.getId(), currentMinMsgId);
+                            last_message_id = Math.min(last_message_id, obj.getId());
                         }
 
                         if (!obj.isOut() && obj.isUnread()) {
@@ -2654,12 +3073,13 @@ public void run() {
                             readWithMid = currentMinMsgId;
                         } else {
                             if (messages.size() > 0) {
-                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, currentMinMsgId, 0, currentMaxDate, true, false);
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).getId(), currentMinMsgId, 0, currentMaxDate, true, false);
                             }
                         }
                     }
                     updateVisibleRows();
                 } else {
+                    ReplyMessageQuery.loadReplyMessagesForMessages(arr, dialog_id);
                     boolean markAsRead = false;
                     int oldCount = messages.size();
                     for (MessageObject obj : arr) {
@@ -2668,7 +3088,7 @@ public void run() {
                             TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
                             timerDrawable.setTime(action.ttl_seconds);
                         }
-                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                        if (messagesDict.containsKey(obj.getId())) {
                             continue;
                         }
                         if (minDate == 0 || obj.messageOwner.date < minDate) {
@@ -2684,15 +3104,15 @@ public void run() {
                             unread_to_load++;
                         }
 
-                        if (obj.messageOwner.id > 0) {
-                            maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
-                            minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                        if (obj.getId() > 0) {
+                            maxMessageId = Math.min(obj.getId(), maxMessageId);
+                            minMessageId = Math.max(obj.getId(), minMessageId);
                         } else if (currentEncryptedChat != null) {
-                            maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
-                            minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                            maxMessageId = Math.max(obj.getId(), maxMessageId);
+                            minMessageId = Math.min(obj.getId(), minMessageId);
                         }
                         maxDate = Math.max(maxDate, obj.messageOwner.date);
-                        messagesDict.put(obj.messageOwner.id, obj);
+                        messagesDict.put(obj.getId(), obj);
                         ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
                         if (dayArray == null) {
                             dayArray = new ArrayList<>();
@@ -2737,12 +3157,7 @@ public void run() {
                                 if (paused) {
                                     scrollToTopOnResume = true;
                                 } else {
-                                    chatListView.post(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                                        }
-                                    });
+                                    moveScrollToLastMessage();
                                 }
                             }
                         } else {
@@ -2758,7 +3173,7 @@ public void run() {
                             readWithDate = maxDate;
                             readWithMid = minMessageId;
                         } else {
-                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, true, false);
+                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).getId(), minMessageId, 0, maxDate, true, false);
                         }
                     }
                 }
@@ -2777,14 +3192,40 @@ public void run() {
                 removeSelfFromStack();
             }
         } else if (id == NotificationCenter.messagesRead) {
-            ArrayList<Integer> markAsReadMessages = (ArrayList<Integer>)args[0];
+            HashMap<Integer, Integer> inbox = (HashMap<Integer, Integer>) args[0];
+            HashMap<Integer, Integer> outbox = (HashMap<Integer, Integer>) args[1];
             boolean updated = false;
-            for (Integer ids : markAsReadMessages) {
-                MessageObject obj = messagesDict.get(ids);
-                if (obj != null) {
-                    obj.setIsRead();
-                    updated = true;
+            for (HashMap.Entry<Integer, Integer> entry : inbox.entrySet()) {
+                if (entry.getKey() != dialog_id) {
+                    continue;
                 }
+                for (int a = 0; a < messages.size(); a++) {
+                    MessageObject obj = messages.get(a);
+                    if (!obj.isOut() && obj.getId() > 0 && obj.getId() <= entry.getValue()) {
+                        if (!obj.isUnread()) {
+                            break;
+                        }
+                        obj.setIsRead();
+                        updated = true;
+                    }
+                }
+                break;
+            }
+            for (HashMap.Entry<Integer, Integer> entry : outbox.entrySet()) {
+                if (entry.getKey() != dialog_id) {
+                    continue;
+                }
+                for (int a = 0; a < messages.size(); a++) {
+                    MessageObject obj = messages.get(a);
+                    if (obj.isOut() && obj.getId() > 0 && obj.getId() <= entry.getValue()) {
+                        if (!obj.isUnread()) {
+                            break;
+                        }
+                        obj.setIsRead();
+                        updated = true;
+                    }
+                }
+                break;
             }
             if (updated) {
                 updateVisibleRows();
@@ -2866,6 +3307,9 @@ public void run() {
             int chatId = (Integer)args[0];
             if (currentChat != null && chatId == currentChat.id) {
                 info = (TLRPC.ChatParticipants)args[1];
+                if (mentionsAdapter != null) {
+                    mentionsAdapter.setChatInfo(info);
+                }
                 updateOnlineCount();
                 updateSubtitle();
                 if (isBroadcast) {
@@ -2907,7 +3351,7 @@ public void run() {
                     View view = chatListView.getChildAt(a);
                     if (view instanceof ChatAudioCell) {
                         ChatAudioCell cell = (ChatAudioCell)view;
-                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
                             cell.updateButtonState();
                             break;
                         }
@@ -2922,7 +3366,7 @@ public void run() {
                     View view = chatListView.getChildAt(a);
                     if (view instanceof ChatAudioCell) {
                         ChatAudioCell cell = (ChatAudioCell)view;
-                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
                             cell.updateProgress();
                             break;
                         }
@@ -2965,7 +3409,7 @@ public void run() {
             MessageObject messageObject = (MessageObject)args[0];
             long finalSize = (Long)args[2];
             if (finalSize != 0 && dialog_id == messageObject.getDialogId()) {
-                MessageObject currentObject = messagesDict.get(messageObject.messageOwner.id);
+                MessageObject currentObject = messagesDict.get(messageObject.getId());
                 if (currentObject != null) {
                     currentObject.messageOwner.media.video.size = (int)finalSize;
                     updateVisibleRows();
@@ -2993,7 +3437,7 @@ public void run() {
             sendSecretMessageRead(messageObject);
         } else if (id == NotificationCenter.updateMessageMedia) {
             MessageObject messageObject = (MessageObject)args[0];
-            MessageObject existMessageObject = messagesDict.get(messageObject.messageOwner.id);
+            MessageObject existMessageObject = messagesDict.get(messageObject.getId());
             if (existMessageObject != null) {
                 existMessageObject.messageOwner.media = messageObject.messageOwner.media;
                 existMessageObject.messageOwner.attachPath = messageObject.messageOwner.attachPath;
@@ -3005,9 +3449,9 @@ public void run() {
                 boolean changed = false;
                 ArrayList<MessageObject> messageObjects = (ArrayList<MessageObject>) args[1];
                 for (MessageObject messageObject : messageObjects) {
-                    MessageObject old = messagesDict.get(messageObject.messageOwner.id);
+                    MessageObject old = messagesDict.get(messageObject.getId());
                     if (old != null) {
-                        messagesDict.put(old.messageOwner.id, messageObject);
+                        messagesDict.put(old.getId(), messageObject);
                         int idx = messages.indexOf(old);
                         if (idx >= 0) {
                             messages.set(idx, messageObject);
@@ -3021,6 +3465,11 @@ public void run() {
             }
         } else if (id == NotificationCenter.notificationsSettingsUpdated) {
             updateTitleIcons();
+        } else if (id == NotificationCenter.didLoadedReplyMessages) {
+            long did = (Long) args[0];
+            if (did == dialog_id) {
+                updateVisibleRows();
+            }
         }
     }
 
@@ -3108,13 +3557,11 @@ public void onResume() {
         if (scrollToTopOnResume) {
             if (scrollToTopUnReadOnResume && scrollToMessage != null) {
                 if (chatListView != null) {
-                    final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - scrollToMessage.textHeight - AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2) : 0;
+                    final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (chatListView.getHeight() - scrollToMessage.getApproximateHeight()) / 2) : 0;
                     chatListView.setSelectionFromTop(messages.size() - messages.indexOf(scrollToMessage), -chatListView.getPaddingTop() - AndroidUtilities.dp(7) + yOffset);
                 }
             } else {
-                if (chatListView != null) {
-                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                }
+                moveScrollToLastMessage();
             }
             scrollToTopUnReadOnResume = false;
             scrollToTopOnResume = false;
@@ -3131,7 +3578,7 @@ public void onResume() {
                 }
             }
             readWhenResume = false;
-            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true, false);
+            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).getId(), readWithMid, 0, readWithDate, true, false);
         }
 
         fixLayout(true);
@@ -3141,6 +3588,23 @@ public void onResume() {
             preferences.edit().remove("dialog_" + dialog_id).commit();
             chatActivityEnterView.setFieldText(lastMessageText);
         }
+        String lastReplyMessage = preferences.getString("reply_" + dialog_id, null);
+        if (lastReplyMessage != null && lastReplyMessage.length() != 0) {
+            preferences.edit().remove("reply_" + dialog_id).commit();
+            try {
+                byte[] bytes = Base64.decode(lastReplyMessage, Base64.DEFAULT);
+                if (bytes != null) {
+                    SerializedData data = new SerializedData(bytes);
+                    TLRPC.Message message = (TLRPC.Message) TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                    if (message != null) {
+                        replyingMessageObject = new MessageObject(message, MessagesController.getInstance().getUsers(), false);
+                        showReplyForMessageObjectOrForward(true, replyingMessageObject, null, false);
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
         if (bottomOverlayChat.getVisibility() != View.VISIBLE) {
             chatActivityEnterView.setFieldFocused(true);
         }
@@ -3189,6 +3653,22 @@ public void onPause() {
             }
             chatActivityEnterView.setFieldFocused(false);
         }
+        if (replyingMessageObject != null) {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            try {
+                SerializedData data = new SerializedData();
+                replyingMessageObject.messageOwner.serializeToStream(data);
+                String string = Base64.encodeToString(data.toByteArray(), Base64.DEFAULT);
+                if (string != null && string.length() != 0) {
+                    editor.putString("reply_" + dialog_id, string);
+                }
+            } catch (Exception e) {
+                editor.remove("reply_" + dialog_id);
+                FileLog.e("tmessages", e);
+            }
+            editor.commit();
+        }
 
         MessagesController.getInstance().cancelTyping(dialog_id);
 
@@ -3212,7 +3692,7 @@ private void updateInformationForScreenshotDetector() {
                     ChatBaseCell cell = (ChatBaseCell) view;
                     object = cell.getMessageObject();
                 }
-                if (object != null && object.messageOwner.id < 0 && object.messageOwner.random_id != 0) {
+                if (object != null && object.getId() < 0 && object.messageOwner.random_id != 0) {
                     visibleMessages.add(object.messageOwner.random_id);
                 }
             }
@@ -3245,7 +3725,7 @@ public boolean onPreDraw() {
                     }
                     int padding = (AndroidUtilities.getCurrentActionBarHeight() - AndroidUtilities.dp(48)) / 2;
                     avatarContainer.setPadding(avatarContainer.getPaddingLeft(), padding, avatarContainer.getPaddingRight(), padding);
-                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)avatarContainer.getLayoutParams();
+                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) avatarContainer.getLayoutParams();
                     layoutParams.topMargin = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0);
                     avatarContainer.setLayoutParams(layoutParams);
                     return false;
@@ -3262,12 +3742,7 @@ public boolean onPreDraw() {
                     }
                     chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
                     if (lastPos >= messages.size() - 1) {
-                        chatListView.post(new Runnable() {
-                            @Override
-                            public void run() {
-                                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                            }
-                        });
+                        moveScrollToLastMessage();
                     }
                     return false;
                 }
@@ -3287,9 +3762,9 @@ public void createMenu(View v, boolean single) {
 
         MessageObject message = null;
         if (v instanceof ChatBaseCell) {
-            message = ((ChatBaseCell)v).getMessageObject();
+            message = ((ChatBaseCell) v).getMessageObject();
         } else if (v instanceof ChatActionCell) {
-            message = ((ChatActionCell)v).getMessageObject();
+            message = ((ChatActionCell) v).getMessageObject();
         }
         if (message == null) {
             return;
@@ -3311,47 +3786,114 @@ public void createMenu(View v, boolean single) {
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
 
                 CharSequence[] items = null;
+                int[] options = null;
 
                 if (type == 0) {
-                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Delete", R.string.Delete)};
+                    items = new CharSequence[]{LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Delete", R.string.Delete)};
+                    options = new int[]{0, 1};
                 } else if (type == 1) {
-                    items = new CharSequence[] {LocaleController.getString("Delete", R.string.Delete)};
+                    if (currentChat != null && !isBroadcast) {
+                        items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("Delete", R.string.Delete)};
+                        options = new int[]{8, 1};
+                    } else {
+                        items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                        options = new int[]{1};
+                    }
                 } else if (type == 7) {
-                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                    items = new CharSequence[]{LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                    options = new int[]{0, 3, 1};
                 } else {
                     if (currentEncryptedChat == null) {
-                        if (type == 2) {
-                            items = new CharSequence[]{LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
-                        } else if (type == 3) {
-                            items = new CharSequence[]{LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
-                        } else if (type == 4) {
-                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
-                                selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Share", R.string.Share), LocaleController.getString("Delete", R.string.Delete)};
-                        } else if (type == 5) {
-                            items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
-                        } else if (type == 6) {
-                            items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        if (!isBroadcast && !(currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left))) {
+                            if (type == 2) {
+                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{8, 2, 1};
+                            } else if (type == 3) {
+                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{8, 2, 3, 1};
+                            } else if (type == 4) {
+                                if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                    items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                } else {
+                                    items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                }
+                                options = new int[]{8, 4, 2, 1};
+                            } else if (type == 5) {
+                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{8, 5, 4, 2, 1};
+                            } else if (type == 6) {
+                                items = new CharSequence[]{LocaleController.getString("Reply", R.string.Reply), LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{8, 7, 6, 2, 1};
+                            }
+                        } else {
+                            if (type == 2) {
+                                items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{2, 1};
+                            } else if (type == 3) {
+                                items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{2, 3, 1};
+                            } else if (type == 4) {
+                                if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                    items = new CharSequence[]{LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                } else {
+                                    items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                }
+                                options = new int[]{4, 2, 1};
+                            } else if (type == 5) {
+                                items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{5, 4, 2, 1};
+                            } else if (type == 6) {
+                                items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                                options = new int[]{7, 6, 2, 1};
+                            }
+                            
+ //TODO:Check this part       if (type == 2) {
+ //                           items = new CharSequence[]{LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+   //                     } else if (type == 3) {
+     //                       items = new CharSequence[]{LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+       //                 } else if (type == 4) {
+         //                   items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
+           //                     selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("QuoteForward", R.string.QuoteForward), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Share", R.string.Share), LocaleController.getString("Delete", R.string.Delete)};
+             //           } else if (type == 5) {
+               //             items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                 //       } else if (type == 6) {
+                //            items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+ 
                         }
                     } else {
                         if (type == 2) {
                             items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                            options = new int[]{1};
                         } else if (type == 3) {
                             items = new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                            options = new int[]{3, 1};
                         } else if (type == 4) {
-                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "ShareFile" : "SaveToGallery",
-                                    selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.ShareFile : R.string.SaveToGallery), LocaleController.getString("Delete", R.string.Delete)};
+                            if (selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                items = new CharSequence[]{LocaleController.getString("ShareFile", R.string.ShareFile), LocaleController.getString("Delete", R.string.Delete)};
+                            } else {
+                                items = new CharSequence[]{LocaleController.getString("SaveToGallery", R.string.SaveToGallery), LocaleController.getString("Delete", R.string.Delete)};
+                            }
+                            options = new int[]{4, 1};
                         } else if (type == 5) {
                             items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("Delete", R.string.Delete)};
-                        }
+                            options = new int[]{5, 1};
+                        }/* else if (type == 6) {
+                            options = new int[]{7, 6, 2, 1};
+                        }*/
                     }
                 }
 
+                final int[] finalOptions = options;
                 builder.setItems(items, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialogInterface, int i) {
-                        if (selectedObject == null) {
+                        if (finalOptions == null || selectedObject == null || i < 0 || i >= finalOptions.length) {
                             return;
                         }
+                        processSelectedOption(finalOptions[i]);
+                        
+ // TODO: CHECK THIS ONE TOO   (replaced the whole thing with one line!!               
+ /*   
                         if (type == 0) {
                             if (i == 0) {
                                 processSelectedOption(0);
@@ -3446,7 +3988,11 @@ public void onClick(DialogInterface dialogInterface, int i) {
                             } else if (i == 2) {
                                 processSelectedOption(1);
                             }
-                        }
+                        }                    
+                      */
+      
+                        
+                        
                     }
                 });
 
@@ -3485,7 +4031,7 @@ private void processSelectedOption(int option) {
         }
         if (option == 0) {
             if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
-                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                moveScrollToLastMessage();
             }
         } else if (option == 1) {
             final MessageObject finalSelectedObject = selectedObject;
@@ -3496,7 +4042,7 @@ private void processSelectedOption(int option) {
                 @Override
                 public void onClick(DialogInterface dialogInterface, int i) {
                     ArrayList<Integer> ids = new ArrayList<>();
-                    ids.add(finalSelectedObject.messageOwner.id);
+                    ids.add(finalSelectedObject.getId());
                     removeUnreadPlane(true);
                     ArrayList<Long> random_ids = null;
                     if (currentEncryptedChat != null && finalSelectedObject.messageOwner.random_id != 0 && finalSelectedObject.type != 10) {
@@ -3518,8 +4064,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
             Bundle args = new Bundle();
             args.putBoolean("onlySelect", true);
             args.putBoolean("serverOnly", true);
-            args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
-            args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
             MessagesActivity fragment = new MessagesActivity(args);
             fragment.setDelegate(this);
             presentFragment(fragment);
@@ -3640,11 +4184,76 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 getParentActivity().startActivity(Intent.createChooser(shareIntent, "Share with"));
                 selectedObject = null;
             }
+        } else if (option == 8) {
+            showReplyForMessageObjectOrForward(true, selectedObject, null, true);
         }
         selectedObject = null;
     }
 
-    private void forwardSelectedMessages(long did, boolean fromMyName) {
+    private void openProfileWithUsername(String username) {
+        TLRPC.User user = MessagesController.getInstance().getUser(username);
+        if (user != null) {
+            Bundle args = new Bundle();
+            args.putInt("user_id", user.id);
+            presentFragment(new ProfileActivity(args));
+        } else {
+            if (getParentActivity() == null) {
+                return;
+            }
+            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+            progressDialog.setCanceledOnTouchOutside(false);
+            progressDialog.setCancelable(false);
+
+            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
+            req.username = username;
+            final long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(final TLObject response, final TLRPC.TL_error error) {
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            try {
+                                progressDialog.dismiss();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            visibleDialog = null;
+                            if (error == null) {
+                                TLRPC.User user = (TLRPC.User) response;
+                                MessagesController.getInstance().putUser(user, false);
+                                ArrayList<TLRPC.User> users = new ArrayList<>();
+                                users.add(user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", user.id);
+                                presentFragment(new ProfileActivity(args));
+                            }
+                        }
+                    });
+                }
+            });
+            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                    try {
+                        dialog.dismiss();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    visibleDialog = null;
+                }
+            });
+            visibleDialog = progressDialog;
+            progressDialog.show();
+        }
+    }
+    
+//TODO: the function "forwardSelectedMessages" was replaced with "openProfileWithUsername"
+   // FAD 
+    /*
+     private void forwardSelectedMessages(long did, boolean fromMyName) {
         if (forwaringMessage != null) {
             if (QuoteForward) {
                 if (forwaringMessage.messageOwner.id > 0) {
@@ -3670,7 +4279,11 @@ private void forwardSelectedMessages(long did, boolean fromMyName) {
             selectedMessagesIds.clear();
             actionBar.hideActionMode();
         }
-    }
+    }   
+    
+  
+    
+     */
 
     @Override
     public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
@@ -3678,6 +4291,25 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
             if (isBroadcast) {
                 param = true;
             }
+
+            ArrayList<MessageObject> fmessages = new ArrayList<>();
+            if (forwaringMessage != null) {
+                fmessages.add(forwaringMessage);
+                forwaringMessage = null;
+            } else {
+                ArrayList<Integer> ids = new ArrayList<>(selectedMessagesIds.keySet());
+                Collections.sort(ids);
+                for (Integer id : ids) {
+                    MessageObject message = selectedMessagesIds.get(id);
+                    if (message != null && id > 0) {
+                        fmessages.add(message);
+                    }
+                }
+                selectedMessagesCanCopyIds.clear();
+                selectedMessagesIds.clear();
+                actionBar.hideActionMode();
+            }
+
             if (did != dialog_id) {
                 int lower_part = (int)did;
                 if (lower_part != 0) {
@@ -3689,26 +4321,28 @@ public void didSelectDialog(MessagesActivity activity, long did, boolean param)
                         args.putInt("chat_id", -lower_part);
                     }
                     ChatActivity chatActivity = new ChatActivity(args);
-                    presentFragment(chatActivity, true);
-                    if (!AndroidUtilities.isTablet()) {
-                        removeSelfFromStack();
-                        Activity parentActivity = getParentActivity();
-                        if (parentActivity == null) {
-                            parentActivity = chatActivity.getParentActivity();
-                        }
-                        if (parentActivity != null) {
-                            parentActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+                    if (presentFragment(chatActivity, true)) {
+                        chatActivity.showReplyForMessageObjectOrForward(true, null, fmessages, false);
+                        if (!AndroidUtilities.isTablet()) {
+                            removeSelfFromStack();
+                            Activity parentActivity = getParentActivity();
+                            if (parentActivity == null) {
+                                parentActivity = chatActivity.getParentActivity();
+                            }
+                            if (parentActivity != null) {
+                                parentActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+                            }
                         }
+                    } else {
+                        activity.finishFragment();
                     }
-                    forwardSelectedMessages(did, param);
                 } else {
                     activity.finishFragment();
                 }
             } else {
                 activity.finishFragment();
-                forwardSelectedMessages(did, param);
-                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
-                scrollToTopOnResume = true;
+                moveScrollToLastMessage();
+                showReplyForMessageObjectOrForward(true, null, fmessages, AndroidUtilities.isTablet());
                 if (AndroidUtilities.isTablet()) {
                     actionBar.hideActionMode();
                 }
@@ -3753,7 +4387,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     }
                 }
             });
-            builder.setNegativeButton(R.string.Cancel, null);
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
             showAlertDialog(builder);
             return false;
         }
@@ -3772,7 +4406,7 @@ private void updateVisibleRows() {
                 boolean disableSelection = false;
                 boolean selected = false;
                 if (actionBar.isActionModeShowed()) {
-                    if (selectedMessagesIds.containsKey(cell.getMessageObject().messageOwner.id)) {
+                    if (selectedMessagesIds.containsKey(cell.getMessageObject().getId())) {
                         view.setBackgroundColor(0x6633b5e5);
                         selected = true;
                     } else {
@@ -3784,12 +4418,8 @@ private void updateVisibleRows() {
                 }
 
                 cell.setMessageObject(cell.getMessageObject());
-
                 cell.setCheckPressed(!disableSelection, disableSelection && selected);
-
-                if (highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == highlightMessageId) {
-                    cell.setCheckPressed(false, true);
-                }
+                cell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().getId() == highlightMessageId);
             }
         }
     }
@@ -3828,14 +4458,14 @@ public void updatePhotoAtIndex(int index) {
             if (view instanceof ChatMediaCell) {
                 ChatMediaCell cell = (ChatMediaCell)view;
                 MessageObject message = cell.getMessageObject();
-                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                if (message != null && message.getId() == messageObject.getId()) {
                     messageToOpen = message;
                     imageReceiver = cell.getPhotoImage();
                 }
             } else if (view instanceof ChatActionCell) {
                 ChatActionCell cell = (ChatActionCell)view;
                 MessageObject message = cell.getMessageObject();
-                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                if (message != null && message.getId() == messageObject.getId()) {
                     messageToOpen = message;
                     imageReceiver = cell.getPhotoImage();
                 }
@@ -3943,7 +4573,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                         LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                         view = li.inflate(R.layout.chat_loading_layout, viewGroup, false);
                         progressBar = view.findViewById(R.id.progressLayout);
-                        if (isCustomTheme) {
+                        if (ApplicationLoader.isCustomTheme()) {
                             progressBar.setBackgroundResource(R.drawable.system_loader2);
                         } else {
                             progressBar.setBackgroundResource(R.drawable.system_loader1);
@@ -4006,6 +4636,78 @@ public void didLongPressed(ChatBaseCell cell) {
                         public boolean canPerformActions() {
                             return actionBar != null && !actionBar.isActionModeShowed();
                         }
+
+                        @Override
+                        public void didPressUrl(String url) {
+                            if (url.startsWith("@")) {
+                                openProfileWithUsername(url.substring(1));
+                            } else if (url.startsWith("#")) {
+                                MessagesActivity fragment = new MessagesActivity(null);
+                                fragment.setSearchString(url);
+                                presentFragment(fragment);
+                            }
+                        }
+
+                        @Override
+                        public void didPressReplyMessage(ChatBaseCell cell, int id) {
+                            MessageObject object = messagesDict.get(id);
+                            boolean query = false;
+                            if (object != null) {
+                                int index = messages.indexOf(object);
+                                if (index != -1) {
+                                    highlightMessageId = id;
+                                    final int yOffset = Math.max(0, (chatListView.getHeight() - object.getApproximateHeight()) / 2);
+                                    if (messages.get(messages.size() - 1) == object) {
+                                        chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11) + yOffset);
+                                    } else {
+                                        chatListView.setSelectionFromTop(messages.size() - messages.indexOf(object), AndroidUtilities.dp(-11) + yOffset);
+                                    }
+                                    updateVisibleRows();
+                                    showPagedownButton(true, true);
+                                } else {
+                                    query = true;
+                                }
+                            } else {
+                                query = true;
+                            }
+
+                            if (query) {
+                                messagesDict.clear();
+                                messagesByDays.clear();
+                                messages.clear();
+                                if (currentEncryptedChat == null) {
+                                    maxMessageId = Integer.MAX_VALUE;
+                                    minMessageId = Integer.MIN_VALUE;
+                                } else {
+                                    maxMessageId = Integer.MIN_VALUE;
+                                    minMessageId = Integer.MAX_VALUE;
+                                }
+                                maxDate = Integer.MIN_VALUE;
+                                endReached = false;
+                                loading = false;
+                                cacheEndReaced = false;
+                                firstLoading = true;
+                                loadsCount = 0;
+                                minDate = 0;
+                                first = true;
+                                unread_to_load = 0;
+                                first_unread_id = 0;
+                                last_message_id = 0;
+                                first_message_id = 0;
+                                forward_end_reached = true;
+                                loadingForward = false;
+                                unreadMessageObject = null;
+                                scrollToMessage = null;
+                                highlightMessageId = Integer.MAX_VALUE;
+                                scrollToMessageMiddleScreen = false;
+                                loading = true;
+                                startLoadFromMessageId = id;
+                                MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, classGuid, 3, 0, 0, false);
+                                chatAdapter.notifyDataSetChanged();
+                                progressView.setVisibility(View.VISIBLE);
+                                chatListView.setEmptyView(null);
+                            }
+                        }
                     });
                     if (view instanceof ChatMediaCell) {
                         ((ChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
@@ -4185,7 +4887,7 @@ public void needOpenUserProfile(int uid) {
             boolean selected = false;
             boolean disableSelection = false;
             if (actionBar.isActionModeShowed()) {
-                if (selectedMessagesIds.containsKey(message.messageOwner.id)) {
+                if (selectedMessagesIds.containsKey(message.getId())) {
                     view.setBackgroundColor(0x6633b5e5);
                     selected = true;
                 } else {
@@ -4204,13 +4906,10 @@ public void needOpenUserProfile(int uid) {
                 if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
                     ((ChatAudioCell)view).downloadAudioIfNeed();
                 }
-                if (highlightMessageId != Integer.MAX_VALUE && message.messageOwner.id == highlightMessageId) {
-                    baseCell.setCheckPressed(false, true);
-                }
+                baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && message.getId() == highlightMessageId);
             } else if (view instanceof ChatActionCell) {
                 ChatActionCell actionCell = (ChatActionCell)view;
                 actionCell.setMessageObject(message);
-                actionCell.setUseBlackBackground(isCustomTheme);
             }
             if (type == 6) {
                 TextView messageTextView = (TextView)view.findViewById(R.id.chat_message_text);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 962d8fe5c..e2a850391 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -31,6 +31,7 @@
 
     private static Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
     private static TextPaint namePaint;
+    private static TextPaint namePaintSmall;
     private static int[] arrColors = {0xffe56555, 0xfff28c48, 0xffeec764, 0xff76c84d, 0xff5fbed5, 0xff549cdd, 0xff8e85ee, 0xfff2749a};
     private static int[] arrColorsProfiles = {0xffd86f65, 0xfff69d61, 0xfffabb3c, 0xff67b35d, 0xff56a2bb, 0xff5c98cd, 0xff8c79d2, 0xfff37fa6};
     private static int[] arrColorsProfilesBack = {0xffca6056, 0xfff18944, 0xff7d6ac4, 0xff56a14c, 0xff4492ac, 0xff4c84b6, 0xff7d6ac4, 0xff4c84b6};
@@ -39,8 +40,6 @@
     private static int[] arrColorsButtons = {R.drawable.bar_selector_red, R.drawable.bar_selector_orange, R.drawable.bar_selector_violet,
             R.drawable.bar_selector_green, R.drawable.bar_selector_cyan, R.drawable.bar_selector_blue, R.drawable.bar_selector_violet, R.drawable.bar_selector_blue};
 
-
-
     private static Drawable broadcastDrawable;
     private static Drawable photoDrawable;
 
@@ -52,6 +51,7 @@
     private boolean isProfile;
     private boolean drawBrodcast;
     private boolean drawPhoto;
+    private boolean smallStyle;
 
     public AvatarDrawable() {
         super();
@@ -61,6 +61,10 @@ public AvatarDrawable() {
             namePaint.setColor(0xffffffff);
             namePaint.setTextSize(AndroidUtilities.dp(20));
 
+            namePaintSmall = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaintSmall.setColor(0xffffffff);
+            namePaintSmall.setTextSize(AndroidUtilities.dp(14));
+
             broadcastDrawable = ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.broadcast_w);
         }
     }
@@ -89,6 +93,10 @@ public AvatarDrawable(TLRPC.Chat chat, boolean profile) {
         }
     }
 
+    public void setSmallStyle(boolean value) {
+        smallStyle = value;
+    }
+
     public static int getColorIndex(int id) {
         if (id >= 0 && id < 8) {
             return id;
@@ -205,7 +213,7 @@ public void setInfo(int id, String firstName, String lastName, boolean isBroadca
         if (text.length() > 0) {
             text = text.toUpperCase();
             try {
-                textLayout = new StaticLayout(text, namePaint, AndroidUtilities.dp(100), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                textLayout = new StaticLayout(text, (smallStyle ? namePaintSmall : namePaint), AndroidUtilities.dp(100), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                 if (textLayout.getLineCount() > 0) {
                     textLeft = textLayout.getLineLeft(0);
                     textWidth = textLayout.getLineWidth(0);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
index 0073edba1..a7472c6fa 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarUpdater.java
@@ -45,8 +45,8 @@
     private boolean clearAfterUpdate = false;
     public boolean returnOnly = false;
 
-    public static abstract interface AvatarUpdaterDelegate {
-        public abstract void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
+    public interface AvatarUpdaterDelegate {
+        void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
     }
 
     public void clear() {
@@ -76,18 +76,13 @@ public void openGallery() {
         PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(true);
         fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
             @Override
-            public void didSelectPhotos(ArrayList<String> photos) {
+            public void didSelectPhotos(ArrayList<String> photos, ArrayList<MediaController.SearchImage> webPhotos) {
                 if (!photos.isEmpty()) {
                     Bitmap bitmap = ImageLoader.loadBitmap(photos.get(0), null, 800, 800, true);
                     processBitmap(bitmap);
                 }
             }
 
-            @Override
-            public void didSelectWebPhotos(ArrayList<MediaController.SearchImage> photos) {
-
-            }
-
             @Override
             public void startPhotoSelectActivity() {
                 try {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 33fd87355..e42561c3f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -11,7 +11,6 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.graphics.Rect;
 import android.media.AudioManager;
 import android.os.Build;
 import android.os.PowerManager;
@@ -33,12 +32,14 @@
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.PopupWindow;
+import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.Emoji;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.SendMessagesHelper;
 import org.telegram.messenger.ConnectionsManager;
@@ -56,15 +57,15 @@
 
 import java.lang.reflect.Field;
 
-public class ChatActivityEnterView extends LinearLayout implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
+public class ChatActivityEnterView extends FrameLayoutFixed implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
 
-    public static interface ChatActivityEnterViewDelegate {
-        public abstract void onMessageSend();
-        public abstract void needSendTyping();
-        public abstract void onTextChanged(CharSequence text);
-        public abstract void onAttachButtonHidden();
-        public abstract void onAttachButtonShow();
-        public abstract void onWindowSizeChanged(int size);
+    public interface ChatActivityEnterViewDelegate {
+        void onMessageSend();
+        void needSendTyping();
+        void onTextChanged(CharSequence text);
+        void onAttachButtonHidden();
+        void onAttachButtonShow();
+        void onWindowSizeChanged(int size);
     }
 
     private EditText messsageEditText;
@@ -78,6 +79,8 @@
     private LinearLayout slideText;
     private SizeNotifierRelativeLayout sizeNotifierRelativeLayout;
     private FrameLayout attachButton;
+    private LinearLayout textFieldContainer;
+    private View topView;
 
     private PowerManager.WakeLock mWakeLock;
     private AnimatorSetProxy runningAnimation;
@@ -95,16 +98,21 @@
     private float startedDraggingX = -1;
     private float distCanMove = AndroidUtilities.dp(80);
     private boolean recordingAudio;
+    private boolean forceShowSendButton;
 
     private Activity parentActivity;
     private BaseFragment parentFragment;
     private long dialog_id;
     private boolean ignoreTextChange;
+    private MessageObject replyingMessageObject;
     private ChatActivityEnterViewDelegate delegate;
 
+    private float topViewAnimation;
+    private boolean needShowTopView;
+    private boolean allowShowTopView;
+
     public ChatActivityEnterView(Activity context, SizeNotifierRelativeLayout parent, BaseFragment fragment, boolean isChat) {
         super(context);
-        setOrientation(HORIZONTAL);
         setBackgroundResource(R.drawable.compose_panel);
         setFocusable(true);
         setFocusableInTouchMode(true);
@@ -125,9 +133,20 @@ public ChatActivityEnterView(Activity context, SizeNotifierRelativeLayout parent
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
         sendByEnter = preferences.getBoolean("send_by_enter", false);
 
+        textFieldContainer = new LinearLayout(context);
+        textFieldContainer.setBackgroundColor(0xffffffff);
+        textFieldContainer.setOrientation(LinearLayout.HORIZONTAL);
+        addView(textFieldContainer);
+        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+        layoutParams2.gravity = Gravity.LEFT | Gravity.TOP;
+        layoutParams2.width = LayoutParams.MATCH_PARENT;
+        layoutParams2.height = LayoutParams.WRAP_CONTENT;
+        layoutParams2.topMargin = AndroidUtilities.dp(2);
+        textFieldContainer.setLayoutParams(layoutParams2);
+
         FrameLayoutFixed frameLayout = new FrameLayoutFixed(context);
-        addView(frameLayout);
-        LayoutParams layoutParams = (LayoutParams) frameLayout.getLayoutParams();
+        textFieldContainer.addView(frameLayout);
+        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) frameLayout.getLayoutParams();
         layoutParams.width = 0;
         layoutParams.height = LayoutParams.WRAP_CONTENT;
         layoutParams.weight = 1;
@@ -142,7 +161,6 @@ public ChatActivityEnterView(Activity context, SizeNotifierRelativeLayout parent
         layoutParams1.width = AndroidUtilities.dp(48);
         layoutParams1.height = AndroidUtilities.dp(48);
         layoutParams1.gravity = Gravity.BOTTOM;
-        layoutParams1.topMargin = AndroidUtilities.dp(2);
         emojiButton.setLayoutParams(layoutParams1);
         emojiButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -269,7 +287,6 @@ public void afterTextChanged(Editable editable) {
             layoutParams1.width = AndroidUtilities.dp(48);
             layoutParams1.height = AndroidUtilities.dp(48);
             layoutParams1.gravity = Gravity.BOTTOM | Gravity.RIGHT;
-            layoutParams1.topMargin = AndroidUtilities.dp(2);
             attachButton.setLayoutParams(layoutParams1);
         }
 
@@ -281,11 +298,10 @@ public void afterTextChanged(Editable editable) {
         layoutParams1.width = FrameLayout.LayoutParams.MATCH_PARENT;
         layoutParams1.height = AndroidUtilities.dp(48);
         layoutParams1.gravity = Gravity.BOTTOM;
-        layoutParams1.topMargin = AndroidUtilities.dp(2);
         recordPanel.setLayoutParams(layoutParams1);
 
         slideText = new LinearLayout(context);
-        slideText.setOrientation(HORIZONTAL);
+        slideText.setOrientation(LinearLayout.HORIZONTAL);
         recordPanel.addView(slideText);
         layoutParams1 = (FrameLayout.LayoutParams) slideText.getLayoutParams();
         layoutParams1.width = FrameLayout.LayoutParams.WRAP_CONTENT;
@@ -297,7 +313,7 @@ public void afterTextChanged(Editable editable) {
         ImageView imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.slidearrow);
         slideText.addView(imageView);
-        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.CENTER_VERTICAL;
@@ -309,7 +325,7 @@ public void afterTextChanged(Editable editable) {
         textView.setTextColor(0xff999999);
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
         slideText.addView(textView);
-        layoutParams = (LayoutParams) textView.getLayoutParams();
+        layoutParams = (LinearLayout.LayoutParams) textView.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.CENTER_VERTICAL;
@@ -317,7 +333,7 @@ public void afterTextChanged(Editable editable) {
         textView.setLayoutParams(layoutParams);
 
         LinearLayout linearLayout = new LinearLayout(context);
-        linearLayout.setOrientation(HORIZONTAL);
+        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
         linearLayout.setPadding(AndroidUtilities.dp(13), 0, 0, 0);
         linearLayout.setBackgroundColor(0xffffffff);
         recordPanel.addView(linearLayout);
@@ -330,7 +346,7 @@ public void afterTextChanged(Editable editable) {
         imageView = new ImageView(context);
         imageView.setImageResource(R.drawable.rec);
         linearLayout.addView(imageView);
-        layoutParams = (LayoutParams) imageView.getLayoutParams();
+        layoutParams = (LinearLayout.LayoutParams) imageView.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.CENTER_VERTICAL;
@@ -342,7 +358,7 @@ public void afterTextChanged(Editable editable) {
         recordTimeText.setTextColor(0xff4d4c4b);
         recordTimeText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         linearLayout.addView(recordTimeText);
-        layoutParams = (LayoutParams) recordTimeText.getLayoutParams();
+        layoutParams = (LinearLayout.LayoutParams) recordTimeText.getLayoutParams();
         layoutParams.width = LayoutParams.WRAP_CONTENT;
         layoutParams.height = LayoutParams.WRAP_CONTENT;
         layoutParams.gravity = Gravity.CENTER_VERTICAL;
@@ -350,12 +366,11 @@ public void afterTextChanged(Editable editable) {
         recordTimeText.setLayoutParams(layoutParams);
 
         FrameLayout frameLayout1 = new FrameLayout(context);
-        addView(frameLayout1);
-        layoutParams = (LayoutParams) frameLayout1.getLayoutParams();
+        textFieldContainer.addView(frameLayout1);
+        layoutParams = (LinearLayout.LayoutParams) frameLayout1.getLayoutParams();
         layoutParams.width = AndroidUtilities.dp(48);
         layoutParams.height = AndroidUtilities.dp(48);
         layoutParams.gravity = Gravity.BOTTOM;
-        layoutParams.topMargin = AndroidUtilities.dp(2);
         frameLayout1.setLayoutParams(layoutParams);
 
         audioSendButton = new ImageView(context);
@@ -390,7 +405,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                         }
                     }
                     startedDraggingX = -1;
-                    MediaController.getInstance().startRecording(dialog_id);
+                    MediaController.getInstance().startRecording(dialog_id, replyingMessageObject);
                     updateAudioRecordIntefrace();
                     audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
                 } else if (motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
@@ -466,6 +481,135 @@ public void onClick(View view) {
         checkSendButton(false);
     }
 
+    public void addTopView(View view, int height) {
+        if (view == null) {
+            return;
+        }
+        addView(view, 0);
+        topView = view;
+        topView.setVisibility(GONE);
+        needShowTopView = false;
+        LayoutParams layoutParams = (LayoutParams) topView.getLayoutParams();
+        layoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = height;
+        layoutParams.topMargin = AndroidUtilities.dp(2);
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        topView.setLayoutParams(layoutParams);
+    }
+
+    public void setTopViewAnimation(float progress) {
+        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+        layoutParams2.topMargin = AndroidUtilities.dp(2) + (int) (topView.getLayoutParams().height * progress);
+        textFieldContainer.setLayoutParams(layoutParams2);
+    }
+
+    public float getTopViewAnimation() {
+        return topViewAnimation;
+    }
+
+    public void setForceShowSendButton(boolean value, boolean animated) {
+        forceShowSendButton = value;
+        checkSendButton(animated);
+    }
+
+    public void showTopView(boolean animated) {
+        if (topView == null) {
+            return;
+        }
+        needShowTopView = true;
+        if (allowShowTopView) {
+            topView.setVisibility(VISIBLE);
+            if (animated) {
+                AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
+                animatorSetProxy.playTogether(
+                        ObjectAnimatorProxy.ofFloat(ChatActivityEnterView.this, "topViewAnimation", 0.0f, 1.0f)
+                );
+                animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                        layoutParams2.topMargin = AndroidUtilities.dp(2) + topView.getLayoutParams().height;
+                        textFieldContainer.setLayoutParams(layoutParams2);
+                        if (!forceShowSendButton) {
+                            openKeyboard();
+                        }
+                    }
+                });
+                animatorSetProxy.setDuration(200);
+                animatorSetProxy.start();
+            } else {
+                LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                layoutParams2.topMargin = AndroidUtilities.dp(2) + topView.getLayoutParams().height;
+                textFieldContainer.setLayoutParams(layoutParams2);
+            }
+        }
+    }
+
+    public void hideTopView(boolean animated) {
+        if (topView == null) {
+            return;
+        }
+
+        needShowTopView = false;
+        if (allowShowTopView) {
+            if (animated) {
+                AnimatorSetProxy animatorSetProxy = new AnimatorSetProxy();
+                animatorSetProxy.playTogether(
+                        ObjectAnimatorProxy.ofFloat(ChatActivityEnterView.this, "topViewAnimation", 1.0f, 0.0f)
+                );
+                animatorSetProxy.addListener(new AnimatorListenerAdapterProxy() {
+                    @Override
+                    public void onAnimationEnd(Object animation) {
+                        topView.setVisibility(GONE);
+                        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                        layoutParams2.topMargin = AndroidUtilities.dp(2);
+                        textFieldContainer.setLayoutParams(layoutParams2);
+                    }
+                });
+                animatorSetProxy.setDuration(200);
+                animatorSetProxy.start();
+            } else {
+                topView.setVisibility(GONE);
+                LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                layoutParams2.topMargin = AndroidUtilities.dp(2);
+                textFieldContainer.setLayoutParams(layoutParams2);
+            }
+        }
+    }
+
+    public boolean isTopViewVisible() {
+        return topView != null && topView.getVisibility() == VISIBLE;
+    }
+
+    private void onWindowSizeChanged(int size) {
+        if (delegate != null) {
+            delegate.onWindowSizeChanged(size);
+        }
+        if (topView != null) {
+            if (size < AndroidUtilities.dp(72) + AndroidUtilities.getCurrentActionBarHeight()) {
+                if (allowShowTopView) {
+                    allowShowTopView = false;
+                    if (needShowTopView) {
+                        topView.setVisibility(View.GONE);
+                        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                        layoutParams2.topMargin = AndroidUtilities.dp(2);
+                        textFieldContainer.setLayoutParams(layoutParams2);
+                    }
+                }
+            } else {
+                if (!allowShowTopView) {
+                    allowShowTopView = true;
+                    if (needShowTopView) {
+                        topView.setVisibility(View.VISIBLE);
+                        LayoutParams layoutParams2 = (LayoutParams) textFieldContainer.getLayoutParams();
+                        layoutParams2.topMargin = AndroidUtilities.dp(2) + topView.getLayoutParams().height;
+                        textFieldContainer.setLayoutParams(layoutParams2);
+                    }
+                }
+            }
+        }
+    }
+
     public void onDestroy() {
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStarted);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStartError);
@@ -493,6 +637,10 @@ public void setDialogId(long id) {
         dialog_id = id;
     }
 
+    public void setReplyingMessageObject(MessageObject messageObject) {
+        replyingMessageObject = messageObject;
+    }
+
     private void sendMessage() {
         if (parentFragment != null) {
             String action = null;
@@ -517,6 +665,10 @@ private void sendMessage() {
             if (delegate != null) {
                 delegate.onMessageSend();
             }
+        } else if (forceShowSendButton) {
+            if (delegate != null) {
+                delegate.onMessageSend();
+            }
         }
     }
 
@@ -526,7 +678,7 @@ public boolean processSendingText(String text) {
             int count = (int) Math.ceil(text.length() / 4096.0f);
             for (int a = 0; a < count; a++) {
                 String mess = text.substring(a * 4096, Math.min((a + 1) * 4096, text.length()));
-                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id);
+                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id, replyingMessageObject);
             }
             return true;
         }
@@ -549,7 +701,7 @@ private String getTrimmedString(String src) {
 
     private void checkSendButton(final boolean animated) {
         String message = getTrimmedString(messsageEditText.getText().toString());
-        if (message.length() > 0) {
+        if (message.length() > 0 || forceShowSendButton) {
             if (audioSendButton.getVisibility() == View.VISIBLE) {
                 if (animated) {
                     if (runningAnimationType == 1) {
@@ -631,7 +783,7 @@ public void onAnimationEnd(Object animation) {
                     if (attachButton != null) {
                         attachButton.setVisibility(View.GONE);
                         attachButton.clearAnimation();
-
+                        delegate.onAttachButtonHidden();
                         FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
                         layoutParams.rightMargin = AndroidUtilities.dp(0);
                         messsageEditText.setLayoutParams(layoutParams);
@@ -710,6 +862,7 @@ public void onAnimationEnd(Object animation) {
                 sendButton.clearAnimation();
                 audioSendButton.setVisibility(View.VISIBLE);
                 if (attachButton != null) {
+                    delegate.onAttachButtonShow();
                     attachButton.setVisibility(View.VISIBLE);
                     FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) messsageEditText.getLayoutParams();
                     layoutParams.rightMargin = AndroidUtilities.dp(50);
@@ -825,12 +978,16 @@ public void onEmojiSelected(String symbol) {
                 emojiPopup = new PopupWindow(emojiView);
 
                 if (Build.VERSION.SDK_INT >= 21) {
+                    /*emojiPopup.setAnimationStyle(0);
+                    emojiPopup.setClippingEnabled(true);
+                    emojiPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
+                    emojiPopup.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED);*/
                     try {
                         Field field = PopupWindow.class.getDeclaredField("mWindowLayoutType");
                         field.setAccessible(true);
                         field.set(emojiPopup, WindowManager.LayoutParams.TYPE_SYSTEM_ERROR);
                     } catch (Exception e) {
-                        /* ignored */
+                        //ignored
                     }
                 }
             }
@@ -853,22 +1010,43 @@ public void onEmojiSelected(String symbol) {
                 emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
             }
 
-            try {
-                emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.LEFT, 0, 0);
-            } catch (Exception e) {
-                FileLog.e("tmessages", e);
-                return;
-            }
+            emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.LEFT, 0, 0);
+
+            /*if (Build.VERSION.SDK_INT < 21) {
+                try {
+
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                    return;
+                }
+            }*/
 
             if (!keyboardVisible) {
+                /*if (Build.VERSION.SDK_INT >= 21) {
+                    try {
+                        emojiPopup.showAsDropDown(this, 0, 0);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        return;
+                    }
+                }*/
                 if (sizeNotifierRelativeLayout != null) {
                     sizeNotifierRelativeLayout.setPadding(0, 0, 0, currentHeight);
                     emojiButton.setImageResource(R.drawable.ic_msg_panel_hide);
-                    if (delegate != null) {
-                        delegate.onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
-                    }
+                    onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
                 }
                 return;
+            } else {
+                /*if (Build.VERSION.SDK_INT >= 21) {
+                    try {
+                        emojiPopup.showAsDropDown(this, 0, -currentHeight - getHeight());
+                        emojiPopup.update(this, 0, -currentHeight - getHeight(), -1, -1);
+                        AndroidUtilities.hideKeyboard(messsageEditText);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        return;
+                    }
+                }*/
             }
             emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
             return;
@@ -888,9 +1066,7 @@ public void onEmojiSelected(String symbol) {
                 public void run() {
                     if (sizeNotifierRelativeLayout != null) {
                         sizeNotifierRelativeLayout.setPadding(0, 0, 0, 0);
-                        if (delegate != null) {
-                            delegate.onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
-                        }
+                        onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
                     }
                 }
             });
@@ -903,6 +1079,10 @@ public void hideEmojiPopup() {
         }
     }
 
+    public void openKeyboard() {
+        AndroidUtilities.showKeyboard(messsageEditText);
+    }
+
     public void setDelegate(ChatActivityEnterViewDelegate delegate) {
         this.delegate = delegate;
     }
@@ -915,6 +1095,27 @@ public void setFieldText(String text) {
         messsageEditText.setText(text);
         messsageEditText.setSelection(messsageEditText.getText().length());
         ignoreTextChange = false;
+        if (delegate != null) {
+            delegate.onTextChanged(messsageEditText.getText());
+        }
+    }
+
+    public int getCursorPosition() {
+        if (messsageEditText == null) {
+            return 0;
+        }
+        return messsageEditText.getSelectionStart();
+    }
+
+    public void replaceWithText(int start, int len, String text) {
+        try {
+            StringBuilder builder = new StringBuilder(messsageEditText.getText());
+            builder.replace(start, start + len, text);
+            messsageEditText.setText(builder);
+            messsageEditText.setSelection(messsageEditText.length());
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
     }
 
     public void setFieldFocused(boolean focus) {
@@ -976,9 +1177,6 @@ public void addToAttachLayout(View view) {
 
     @Override
     public void onSizeChanged(int height) {
-        Rect localRect = new Rect();
-        parentActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(localRect);
-
         WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
         if (wm == null || wm.getDefaultDisplay() == null) {
             return;
@@ -1004,6 +1202,13 @@ public void onSizeChanged(int height) {
             }
             final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams) emojiPopup.getContentView().getLayoutParams();
             if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
+                /*if (Build.VERSION.SDK_INT >= 21) {
+                    if (!keyboardVisible) {
+                        emojiPopup.update(this, 0, 0, -1, -1);
+                    } else {
+                        emojiPopup.update(this, 0, -newHeight - getHeight(), -1, -1);
+                    }
+                }*/
                 layoutParams.width = AndroidUtilities.displaySize.x;
                 layoutParams.height = newHeight;
                 wm.updateViewLayout(emojiPopup.getContentView(), layoutParams);
@@ -1014,9 +1219,7 @@ public void run() {
                             if (sizeNotifierRelativeLayout != null) {
                                 sizeNotifierRelativeLayout.setPadding(0, 0, 0, layoutParams.height);
                                 sizeNotifierRelativeLayout.requestLayout();
-                                if (delegate != null) {
-                                    delegate.onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
-                                }
+                                onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
                             }
                         }
                     });
@@ -1031,9 +1234,7 @@ public void run() {
         } else if (!keyboardVisible && keyboardVisible != oldValue && emojiPopup != null && emojiPopup.isShowing()) {
             showEmojiPopup(false);
         }
-        if (delegate != null) {
-            delegate.onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
-        }
+        onWindowSizeChanged(sizeNotifierRelativeLayout.getHeight() - sizeNotifierRelativeLayout.getPaddingBottom());
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
index d5441b706..6d6709781 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ClippingImageView.java
@@ -41,8 +41,8 @@
     private RectF bitmapRect;
     private Matrix shaderMatrix;
 
-    public static interface onDrawListener {
-        public abstract void onDraw();
+    public interface onDrawListener {
+        void onDraw();
     }
 
     public ClippingImageView(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
index ef7319a03..35ce2c4e3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ColorPickerView.java
@@ -89,11 +89,11 @@ public ColorPickerView(Context context, AttributeSet attrs, int defStyle) {
     }
 
     public interface OnColorChangedListener {
-        public void onColorChanged(int color);
+        void onColorChanged(int color);
     }
 
     public interface OnColorSelectedListener {
-        public void onColorSelected(int color);
+        void onColorSelected(int color);
     }
 
     public void setOnColorChangedListener(OnColorChangedListener listener) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
index 25af1df44..f1894e27f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/EmojiView.java
@@ -299,8 +299,8 @@ public void unregisterDataSetObserver(DataSetObserver observer) {
         }
     }
 
-    public static abstract interface Listener {
-        public abstract void onBackspace();
-        public abstract void onEmojiSelected(String paramString);
+    public interface Listener {
+        void onBackspace();
+        void onEmojiSelected(String paramString);
     }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundDetector.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundDetector.java
index b158dcac3..a1f4cf2f6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundDetector.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ForegroundDetector.java
@@ -20,8 +20,8 @@
 public class ForegroundDetector implements Application.ActivityLifecycleCallbacks {
 
     public interface Listener {
-        public void onBecameForeground();
-        public void onBecameBackground();
+        void onBecameForeground();
+        void onBecameBackground();
     }
 
     private int refs;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
index 4cc5b0915..38728e89b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/HorizontalListView.java
@@ -35,7 +35,7 @@
     private int mDisplayOffset = 0;
     protected Scroller mScroller;
     private GestureDetector mGesture;
-    private HashMap<Integer, LinkedList<View>> mRemovedViewQueue = new HashMap<Integer, LinkedList<View>>();
+    private HashMap<Integer, LinkedList<View>> mRemovedViewQueue = new HashMap<>();
     private OnItemSelectedListener mOnItemSelected;
     private OnItemClickListener mOnItemClicked;
     private OnItemLongClickListener mOnItemLongClicked;
@@ -251,7 +251,7 @@ private void removeNonVisibleItems(final int dx) {
             int type = (Integer) child.getTag();
             LinkedList<View> list = mRemovedViewQueue.get(type);
             if (list == null) {
-                list = new LinkedList<View>();
+                list = new LinkedList<>();
                 mRemovedViewQueue.put(type, list);
             }
             list.add(child);
@@ -266,7 +266,7 @@ private void removeNonVisibleItems(final int dx) {
             int type = (Integer) child.getTag();
             LinkedList<View> list = mRemovedViewQueue.get(type);
             if (list == null) {
-                list = new LinkedList<View>();
+                list = new LinkedList<>();
                 mRemovedViewQueue.put(type, list);
             }
             list.add(child);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
index 6712cf6fb..1ed6f83b6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LayoutListView.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Components;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
@@ -16,12 +17,13 @@
 
 public class LayoutListView extends ListView {
 
-    public static interface OnInterceptTouchEventListener {
-        public abstract boolean onInterceptTouchEvent(MotionEvent event);
+    public interface OnInterceptTouchEventListener {
+        boolean onInterceptTouchEvent(MotionEvent event);
     }
 
     private OnInterceptTouchEventListener onInterceptTouchEventListener;
     private int height = -1;
+    private int forceTop = Integer.MIN_VALUE;
 
     public LayoutListView(Context context) {
         super(context);
@@ -39,6 +41,10 @@ public void setOnInterceptTouchEventListener(OnInterceptTouchEventListener liste
         onInterceptTouchEventListener = listener;
     }
 
+    public void setForceTop(int value) {
+        forceTop = value;
+    }
+
     @Override
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (onInterceptTouchEventListener != null) {
@@ -47,25 +53,32 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         return super.onInterceptTouchEvent(ev);
     }
 
+    @SuppressLint("DrawAllocation")
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         View v = getChildAt(getChildCount() - 1);
+        int scrollTo = getLastVisiblePosition();
         if (v != null && height > 0 && changed && ((bottom - top) < height)) {
-            int b = height - v.getTop();
-            final int scrollTo = getLastVisiblePosition();
+            int lastTop = forceTop == Integer.MIN_VALUE ? (bottom - top) - (height - v.getTop()) - getPaddingTop() : forceTop;
+            forceTop = Integer.MIN_VALUE;
+            setSelectionFromTop(scrollTo, lastTop);
             super.onLayout(changed, left, top, right, bottom);
-            final int offset = (bottom - top) - b;
-            post(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        setSelectionFromTop(scrollTo, offset - getPaddingTop());
-                    } catch (Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-            });
+
+//            post(new Runnable() {
+//                @Override
+//                public void run() {
+//                    try {
+//                        setSelectionFromTop(scrollTo, lastTop);
+//                    } catch (Exception e) {
+//                        e.printStackTrace();
+//                    }
+//                }
+//            });
         } else {
+            if (forceTop != Integer.MIN_VALUE) {
+                setSelectionFromTop(scrollTo, forceTop);
+                forceTop = Integer.MIN_VALUE;
+            }
             try {
                 super.onLayout(changed, left, top, right, bottom);
             } catch (Exception e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
index 37efc31a6..e87f71c0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/NumberPicker.java
@@ -110,15 +110,15 @@
     }
 
     public interface OnScrollListener {
-        public static int SCROLL_STATE_IDLE = 0;
-        public static int SCROLL_STATE_TOUCH_SCROLL = 1;
-        public static int SCROLL_STATE_FLING = 2;
+        int SCROLL_STATE_IDLE = 0;
+        int SCROLL_STATE_TOUCH_SCROLL = 1;
+        int SCROLL_STATE_FLING = 2;
 
-        public void onScrollStateChange(NumberPicker view, int scrollState);
+        void onScrollStateChange(NumberPicker view, int scrollState);
     }
 
     public interface Formatter {
-        public String format(int value);
+        String format(int value);
     }
 
     private void init() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
index c568f4a78..33b34963e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PagerSlidingTabStrip.java
@@ -38,7 +38,7 @@
 public class PagerSlidingTabStrip extends HorizontalScrollView {
 
     public interface IconTabProvider {
-        public int getPageIconResId(int position);
+        int getPageIconResId(int position);
     }
 
     private LinearLayout.LayoutParams defaultTabLayoutParams;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index dfd03904d..e314602c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -59,8 +59,8 @@
 
 public class PasscodeView extends FrameLayout {
 
-    public static interface PasscodeViewDelegate {
-        public abstract void didAcceptedPassword();
+    public interface PasscodeViewDelegate {
+        void didAcceptedPassword();
     }
 
     private class AnimatingTextView extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
index 4bd9ba572..5c19b596b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
@@ -22,8 +22,8 @@
 
 public class PhotoCropView extends FrameLayout {
 
-    public static interface PhotoCropViewDelegate {
-        public abstract void needMoveImageTo(float x, float y, float s, boolean animated);
+    public interface PhotoCropViewDelegate {
+        void needMoveImageTo(float x, float y, float s, boolean animated);
     }
 
     private boolean freeformCrop = true;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
index 1d7687df3..bb92aa8ea 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoEditorSeekBar.java
@@ -28,8 +28,8 @@
     private int maxValue;
     private PhotoEditorSeekBarDelegate delegate;
 
-    public abstract interface PhotoEditorSeekBarDelegate {
-        public void onProgressChanged();
+    public interface PhotoEditorSeekBarDelegate {
+        void onProgressChanged();
     }
 
     public PhotoEditorSeekBar(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterBlurControl.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterBlurControl.java
new file mode 100644
index 000000000..8fb291765
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterBlurControl.java
@@ -0,0 +1,499 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.view.MotionEvent;
+import android.widget.FrameLayout;
+
+import org.telegram.android.AndroidUtilities;
+
+public class PhotoFilterBlurControl extends FrameLayout {
+
+    public interface PhotoFilterLinearBlurControlDelegate {
+        void valueChanged(Point centerPoint, float falloff, float size, float angle);
+    }
+
+    private final static float BlurInsetProximity = AndroidUtilities.dp(20);
+    private final static float BlurMinimumFalloff = 0.1f;
+    private final static float BlurMinimumDifference = 0.02f;
+    private final static float BlurViewCenterInset = AndroidUtilities.dp(30.0f);
+    private final static float BlurViewRadiusInset = AndroidUtilities.dp(30.0f);
+
+    private enum BlurViewActiveControl {
+        BlurViewActiveControlNone,
+        BlurViewActiveControlCenter,
+        BlurViewActiveControlInnerRadius,
+        BlurViewActiveControlOuterRadius,
+        BlurViewActiveControlWholeArea,
+        BlurViewActiveControlRotation
+    }
+
+    private final int GestureStateBegan = 1;
+    private final int GestureStateChanged = 2;
+    private final int GestureStateEnded = 3;
+    private final int GestureStateCancelled = 4;
+    private final int GestureStateFailed = 5;
+
+    private BlurViewActiveControl activeControl;
+    private Point startCenterPoint = new Point();
+    private float startDistance;
+    private float startRadius;
+    private Size actualAreaSize = new Size();
+    private Point centerPoint = new Point(0.5f, 0.5f);
+    private float falloff = 0.15f;
+    private float size = 0.35f;
+    private float angle;
+    private RectF arcRect = new RectF();
+
+    private float pointerStartX;
+    private float pointerStartY;
+    private float startPointerDistance;
+    private float pointerScale = 1;
+    private boolean isMoving;
+    private boolean isZooming;
+    private boolean checkForMoving;
+    private boolean checkForZooming;
+
+    private int type;
+
+    private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+    private Paint arcPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+
+    private PhotoFilterLinearBlurControlDelegate delegate;
+
+    public PhotoFilterBlurControl(Context context) {
+        super(context);
+        setWillNotDraw(false);
+        paint.setColor(0xffffffff);
+        arcPaint.setColor(0xffffffff);
+        arcPaint.setStrokeWidth(AndroidUtilities.dp(2));
+        arcPaint.setStyle(Paint.Style.STROKE);
+    }
+
+    public void setType(int blurType) {
+        type = blurType;
+    }
+
+    public void setDelegate(PhotoFilterLinearBlurControlDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private float getDistance(MotionEvent event) {
+        if (event.getPointerCount() != 2) {
+            return 0;
+        }
+        float x1 = event.getX(0);
+        float y1 = event.getY(0);
+        float x2 = event.getX(1);
+        float y2 = event.getY(1);
+        return (float) Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
+    }
+
+    private float degreesToRadians(float degrees) {
+        return degrees * (float) Math.PI / 180.0f;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        int action = event.getActionMasked();
+
+        switch (action) {
+            case MotionEvent.ACTION_POINTER_DOWN:
+            case MotionEvent.ACTION_DOWN: {
+                if (event.getPointerCount() == 1) {
+                    if (checkForMoving && !isMoving) {
+                        float locationX = event.getX();
+                        float locationY = event.getY();
+                        Point centerPoint = getActualCenterPoint();
+                        Point delta = new Point(locationX - centerPoint.x, locationY - centerPoint.y);
+                        float radialDistance = (float) Math.sqrt(delta.x * delta.x + delta.y * delta.y);
+                        float innerRadius = getActualInnerRadius();
+                        float outerRadius = getActualOuterRadius();
+                        boolean close = Math.abs(outerRadius - innerRadius) < BlurInsetProximity;
+                        float innerRadiusOuterInset = close ? 0 : BlurViewRadiusInset;
+                        float outerRadiusInnerInset = close ? 0 : BlurViewRadiusInset;
+
+                        if (type == 0) {
+                            float distance = (float) Math.abs(delta.x * Math.cos(degreesToRadians(angle) + Math.PI / 2) + delta.y * Math.sin(degreesToRadians(angle) + Math.PI / 2));
+                            if (radialDistance < BlurViewCenterInset) {
+                                isMoving = true;
+                            } else if (distance > innerRadius - BlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset) {
+                                isMoving = true;
+                            } else if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + BlurViewRadiusInset) {
+                                isMoving = true;
+                            } else if ((distance <= innerRadius - BlurViewRadiusInset) || distance >= outerRadius + BlurViewRadiusInset) {
+                                isMoving = true;
+                            }
+                        } else if (type == 1) {
+                            if (radialDistance < BlurViewCenterInset) {
+                                isMoving = true;
+                            } else if (radialDistance > innerRadius - BlurViewRadiusInset && radialDistance < innerRadius + innerRadiusOuterInset) {
+                                isMoving = true;
+                            } else if (radialDistance > outerRadius - outerRadiusInnerInset && radialDistance < outerRadius + BlurViewRadiusInset) {
+                                isMoving = true;
+                            }
+                        }
+                        checkForMoving = false;
+                        if (isMoving) {
+                            handlePan(GestureStateBegan, event);
+                        }
+                    }
+                } else {
+                    if (isMoving) {
+                        handlePan(GestureStateEnded, event);
+                        checkForMoving = true;
+                        isMoving = false;
+                    }
+                    if (event.getPointerCount() == 2) {
+                        if (checkForZooming && !isZooming) {
+                            handlePinch(GestureStateBegan, event);
+                            isZooming = true;
+                        }
+                    } else {
+                        handlePinch(GestureStateEnded, event);
+                        checkForZooming = true;
+                        isZooming = false;
+                    }
+                }
+                break;
+            }
+
+            case MotionEvent.ACTION_POINTER_UP:
+            case MotionEvent.ACTION_CANCEL:
+            case MotionEvent.ACTION_UP: {
+                if (isMoving) {
+                    handlePan(GestureStateEnded, event);
+                    isMoving = false;
+                } else if (isZooming) {
+                    handlePinch(GestureStateEnded, event);
+                    isZooming = false;
+                }
+                checkForMoving = true;
+                checkForZooming = true;
+                break;
+            }
+
+            case MotionEvent.ACTION_MOVE: {
+                if (isMoving) {
+                    handlePan(GestureStateChanged, event);
+                } else if (isZooming) {
+                    handlePinch(GestureStateChanged, event);
+                }
+            }
+        }
+        return true;
+    }
+
+    private void handlePan(int state, MotionEvent event) {
+        float locationX = event.getX();
+        float locationY = event.getY();
+        Point actualCenterPoint = getActualCenterPoint();
+        Point delta = new Point(locationX - actualCenterPoint.x, locationY - actualCenterPoint.y);
+        float radialDistance = (float) Math.sqrt(delta.x * delta.x + delta.y * delta.y);
+        float shorterSide = (actualAreaSize.width > actualAreaSize.height) ? actualAreaSize.height : actualAreaSize.width;
+        float innerRadius = shorterSide * falloff;
+        float outerRadius = shorterSide * size;
+        float distance = (float) Math.abs(delta.x * Math.cos(degreesToRadians(angle) + Math.PI / 2.0f) + delta.y * Math.sin(degreesToRadians(angle) + Math.PI / 2.0f));
+
+        switch (state) {
+            case GestureStateBegan: {
+                pointerStartX = event.getX();
+                pointerStartY = event.getY();
+
+                boolean close = Math.abs(outerRadius - innerRadius) < BlurInsetProximity;
+                float innerRadiusOuterInset = close ? 0 : BlurViewRadiusInset;
+                float outerRadiusInnerInset = close ? 0 : BlurViewRadiusInset;
+
+                if (type == 0) {
+                    if (radialDistance < BlurViewCenterInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlCenter;
+                        startCenterPoint = actualCenterPoint;
+                    } else if (distance > innerRadius - BlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlInnerRadius;
+                        startDistance = distance;
+                        startRadius = innerRadius;
+                    } else if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + BlurViewRadiusInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlOuterRadius;
+                        startDistance = distance;
+                        startRadius = outerRadius;
+                    } else if (distance <= innerRadius - BlurViewRadiusInset || distance >= outerRadius + BlurViewRadiusInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlRotation;
+                    }
+                } else if (type == 1) {
+                    if (radialDistance < BlurViewCenterInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlCenter;
+                        startCenterPoint = actualCenterPoint;
+                    } else if (radialDistance > innerRadius - BlurViewRadiusInset && radialDistance < innerRadius + innerRadiusOuterInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlInnerRadius;
+                        startDistance = radialDistance;
+                        startRadius = innerRadius;
+                    } else if (radialDistance > outerRadius - outerRadiusInnerInset && radialDistance < outerRadius + BlurViewRadiusInset) {
+                        activeControl = BlurViewActiveControl.BlurViewActiveControlOuterRadius;
+                        startDistance = radialDistance;
+                        startRadius = outerRadius;
+                    }
+                }
+                setSelected(true, true);
+            }
+            break;
+
+            case GestureStateChanged: {
+                if (type == 0) {
+                    switch (activeControl) {
+                        case BlurViewActiveControlCenter: {
+                            float translationX = locationX - pointerStartX;
+                            float translationY = locationY - pointerStartY;
+                            Rect actualArea = new Rect((getWidth() - actualAreaSize.width) / 2, (getHeight() - actualAreaSize.height) / 2, actualAreaSize.width, actualAreaSize.height);
+                            Point newPoint = new Point(Math.max(actualArea.x, Math.min(actualArea.x + actualArea.width, startCenterPoint.x + translationX)), Math.max(actualArea.y, Math.min(actualArea.y + actualArea.height, startCenterPoint.y + translationY)));
+                            centerPoint = new Point((newPoint.x - actualArea.x) / actualAreaSize.width, ((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);
+                        }
+                        break;
+
+                        case BlurViewActiveControlInnerRadius: {
+                            float d = distance - startDistance;
+                            falloff = Math.min(Math.max(BlurMinimumFalloff, (startRadius + d) / shorterSide), size - BlurMinimumDifference);
+                        }
+                        break;
+
+                        case BlurViewActiveControlOuterRadius: {
+                            float d = distance - startDistance;
+                            size = Math.max(falloff + BlurMinimumDifference, (startRadius + d) / shorterSide);
+                        }
+                        break;
+
+                        case BlurViewActiveControlRotation: {
+                            float translationX = locationX - pointerStartX;
+                            float translationY = locationY - pointerStartY;
+
+                            boolean clockwise = false;
+
+                            boolean right = locationX > actualCenterPoint.x;
+                            boolean bottom = locationY > actualCenterPoint.y;
+
+                            if (!right && !bottom) {
+                                if (Math.abs(translationY) > Math.abs(translationX)) {
+                                    if (translationY < 0) {
+                                        clockwise = true;
+                                    }
+                                } else {
+                                    if (translationX > 0) {
+                                        clockwise = true;
+                                    }
+                                }
+                            } else if (right && !bottom) {
+                                if (Math.abs(translationY) > Math.abs(translationX)) {
+                                    if (translationY > 0) {
+                                        clockwise = true;
+                                    }
+                                } else {
+                                    if (translationX > 0) {
+                                        clockwise = true;
+                                    }
+                                }
+                            } else if (right && bottom) {
+                                if (Math.abs(translationY) > Math.abs(translationX)) {
+                                    if (translationY > 0) {
+                                        clockwise = true;
+                                    }
+                                } else {
+                                    if (translationX < 0) {
+                                        clockwise = true;
+                                    }
+                                }
+                            } else {
+                                if (Math.abs(translationY) > Math.abs(translationX)) {
+                                    if (translationY < 0) {
+                                        clockwise = true;
+                                    }
+                                } else {
+                                    if (translationX < 0) {
+                                        clockwise = true;
+                                    }
+                                }
+                            }
+
+                            float d = (float) Math.sqrt(translationX * translationX + translationY * translationY);
+                            angle += d * ((clockwise ? 1 : 0) * 2 - 1) / (float) Math.PI / 1.15f;
+
+                            pointerStartX = locationX;
+                            pointerStartY = locationY;
+                        }
+                        break;
+
+                        default:
+                            break;
+                    }
+                } else if (type == 1) {
+                    switch (activeControl) {
+                        case BlurViewActiveControlCenter: {
+                            float translationX = locationX - pointerStartX;
+                            float translationY = locationY - pointerStartY;
+                            Rect actualArea = new Rect((getWidth() - actualAreaSize.width) / 2, (getHeight() - actualAreaSize.height) / 2, actualAreaSize.width, actualAreaSize.height);
+                            Point newPoint = new Point(Math.max(actualArea.x, Math.min(actualArea.x + actualArea.width, startCenterPoint.x + translationX)), Math.max(actualArea.y, Math.min(actualArea.y + actualArea.height, startCenterPoint.y + translationY)));
+                            centerPoint = new Point((newPoint.x - actualArea.x) / actualAreaSize.width, ((newPoint.y - actualArea.y) + (actualAreaSize.width - actualAreaSize.height) / 2) / actualAreaSize.width);
+                        }
+                        break;
+
+                        case BlurViewActiveControlInnerRadius: {
+                            float d = radialDistance - startDistance;
+                            falloff = Math.min(Math.max(BlurMinimumFalloff, (startRadius + d) / shorterSide), size - BlurMinimumDifference);
+                        }
+                        break;
+
+                        case BlurViewActiveControlOuterRadius: {
+                            float d = radialDistance - startDistance;
+                            size = Math.max(falloff + BlurMinimumDifference, (startRadius + d) / shorterSide);
+                        }
+                        break;
+
+                        default:
+                            break;
+                    }
+                }
+                invalidate();
+
+                if (delegate != null) {
+                    delegate.valueChanged(centerPoint, falloff, size, degreesToRadians(angle) + (float) Math.PI / 2.0f);
+                }
+            }
+            break;
+
+            case GestureStateEnded:
+            case GestureStateCancelled:
+            case GestureStateFailed: {
+                activeControl = BlurViewActiveControl.BlurViewActiveControlNone;
+                setSelected(false, true);
+            }
+            break;
+
+            default:
+                break;
+        }
+    }
+
+    private void handlePinch(int state, MotionEvent event) {
+
+        switch (state) {
+            case GestureStateBegan: {
+                startPointerDistance = getDistance(event);
+                pointerScale = 1;
+                activeControl = BlurViewActiveControl.BlurViewActiveControlWholeArea;
+                setSelected(true, true);
+            }
+            case GestureStateChanged: {
+                float newDistance = getDistance(event);
+                pointerScale += (newDistance - startPointerDistance) / AndroidUtilities.density * 0.01f;
+
+                falloff = Math.max(BlurMinimumFalloff, falloff * pointerScale);
+                size = Math.max(falloff + BlurMinimumDifference, size * pointerScale);
+
+                pointerScale = 1;
+                startPointerDistance = newDistance;
+
+                invalidate();
+
+                if (delegate != null) {
+                    delegate.valueChanged(centerPoint, falloff, size, degreesToRadians(angle) + (float) Math.PI / 2.0f);
+                }
+            }
+            break;
+
+            case GestureStateEnded:
+            case GestureStateCancelled:
+            case GestureStateFailed: {
+                activeControl = BlurViewActiveControl.BlurViewActiveControlNone;
+                setSelected(false, true);
+            }
+            break;
+
+            default:
+                break;
+        }
+    }
+
+    private void setSelected(boolean selected, boolean animated) {
+        /*if (animated) {
+            [UIView animateWithDuration:0.16f delay:0.0f options:UIViewAnimationOptionBeginFromCurrentState animations:^
+            {
+                self.alpha = selected ? 0.6f : 1.0f;
+            } completion:nil];
+        } else {
+            self.alpha = selected ? 0.6f : 1.0f;
+        }*/
+    }
+
+    public void setActualAreaSize(float width, float height) {
+        actualAreaSize.width = width;
+        actualAreaSize.height = height;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        Point centerPoint = getActualCenterPoint();
+        float innerRadius = getActualInnerRadius();
+        float outerRadius = getActualOuterRadius();
+        canvas.translate(centerPoint.x, centerPoint.y);
+
+        if (type == 0) {
+            canvas.rotate(angle);
+
+            float space = AndroidUtilities.dp(6.0f);
+            float length = AndroidUtilities.dp(12.0f);
+            float thickness = AndroidUtilities.dp(1.5f);
+            for (int i = 0; i < 30; i++) {
+                canvas.drawRect(i * (length + space), -innerRadius, i * (length + space) + length, thickness - innerRadius, paint);
+                canvas.drawRect(-i * (length + space) - space - length, -innerRadius, -i * (length + space) - space, thickness - innerRadius, paint);
+
+                canvas.drawRect(i * (length + space), innerRadius, length + i * (length + space), thickness + innerRadius, paint);
+                canvas.drawRect(-i * (length + space) - space - length, innerRadius, -i * (length + space) - space, thickness + innerRadius, paint);
+            }
+
+            length = AndroidUtilities.dp(6.0f);
+            for (int i = 0; i < 64; i++) {
+                canvas.drawRect(i * (length + space), -outerRadius, length + i * (length + space), thickness - outerRadius, paint);
+                canvas.drawRect(-i * (length + space) - space - length, -outerRadius, -i * (length + space) - space, thickness - outerRadius, paint);
+
+                canvas.drawRect(i * (length + space), outerRadius, length + i * (length + space), thickness + outerRadius, paint);
+                canvas.drawRect(-i * (length + space) - space - length, outerRadius, -i * (length + space) - space, thickness + outerRadius, paint);
+            }
+        } else if (type == 1) {
+            float radSpace = 6.15f;
+            float radLen = 10.2f;
+            arcRect.set(-innerRadius, -innerRadius, innerRadius, innerRadius);
+            for (int i = 0; i < 22; i++) {
+                canvas.drawArc(arcRect, i * (radSpace + radLen), radLen, false, arcPaint);
+            }
+
+            radSpace = 2.02f;
+            radLen = 3.6f;
+            arcRect.set(-outerRadius, -outerRadius, outerRadius, outerRadius);
+            for (int i = 0; i < 64; i++) {
+                canvas.drawArc(arcRect, i * (radSpace + radLen), radLen, false, arcPaint);
+            }
+        }
+        canvas.drawCircle(0, 0, AndroidUtilities.dp(8), paint);
+    }
+
+    private Point getActualCenterPoint() {
+        return new Point((getWidth() - actualAreaSize.width) / 2 + centerPoint.x * actualAreaSize.width, (getHeight() - actualAreaSize.height) / 2 - (actualAreaSize.width - actualAreaSize.height) / 2 + centerPoint.y * actualAreaSize.width);
+    }
+
+    private float getActualInnerRadius() {
+        return (actualAreaSize.width > actualAreaSize.height ? actualAreaSize.height : actualAreaSize.width) * falloff;
+    }
+
+    private float getActualOuterRadius() {
+        return (actualAreaSize.width > actualAreaSize.height ? actualAreaSize.height : actualAreaSize.width) * size;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterLinearBlurControl.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterLinearBlurControl.java
deleted file mode 100644
index 86e4505f7..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterLinearBlurControl.java
+++ /dev/null
@@ -1,417 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 2.x
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2015.
- */
-
-package org.telegram.ui.Components;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.PointF;
-import android.graphics.RectF;
-import android.util.SizeF;
-import android.widget.FrameLayout;
-
-public class PhotoFilterLinearBlurControl extends FrameLayout {
-
-    private final static float LinearBlurInsetProximity = 20;
-    private final static float LinearBlurMinimumFalloff = 0.1f;
-    private final static float LinearBlurMinimumDifference = 0.02f;
-    private final static float LinearBlurViewCenterInset = 30.0f;
-    private final static float LinearBlurViewRadiusInset = 30.0f;
-
-    private enum LinearBlurViewActiveControl {
-        TGLinearBlurViewActiveControlNone,
-        TGLinearBlurViewActiveControlCenter,
-        TGLinearBlurViewActiveControlInnerRadius,
-        TGLinearBlurViewActiveControlOuterRadius,
-        TGLinearBlurViewActiveControlWholeArea,
-        TGLinearBlurViewActiveControlRotation
-    }
-
-    private LinearBlurViewActiveControl activeControl;
-    private PointF startCenterPoint = new PointF();
-    private PointF startDistance = new PointF();
-    private PointF startRadius = new PointF();
-    private boolean isTracking;
-    private SizeF actualAreaSize;
-    private PointF centerPoint;
-    private float falloff;
-    private float size;
-    private float angle;
-
-    //@property (nonatomic, copy) void (^valueChanged)(CGPoint centerPoint, CGFloat falloff, CGFloat size, CGFloat angle);
-    //@property (nonatomic, copy) void(^interactionEnded)(void);
-    //UILongPressGestureRecognizer *_pressGestureRecognizer;
-    //UIPanGestureRecognizer *_panGestureRecognizer;
-    //UIPinchGestureRecognizer *_pinchGestureRecognizer;
-
-    public PhotoFilterLinearBlurControl(Context context) {
-        super(context);
-
-        setWillNotDraw(false);
-
-        centerPoint = new PointF(0.5f, 0.5f);
-        falloff = 0.15f;
-        size = 0.35f;
-
-        /*_pressGestureRecognizer = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handlePress:)];
-        _pressGestureRecognizer.delegate = self;
-        _pressGestureRecognizer.minimumPressDuration = 0.1f;
-        [self addGestureRecognizer:_pressGestureRecognizer];
-
-        _panGestureRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePan:)];
-        _panGestureRecognizer.delegate = self;
-        [self addGestureRecognizer:_panGestureRecognizer];
-
-        _pinchGestureRecognizer = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(handlePinch:)];
-        _pinchGestureRecognizer.delegate = self;
-        [self addGestureRecognizer:_pinchGestureRecognizer];*/
-    }
-
-
-    private void handlePress() {
-        /*switch (gestureRecognizer.state) {
-            case UIGestureRecognizerStateBegan:
-                [self setSelected:true animated:true];
-                break;
-
-            case UIGestureRecognizerStateEnded:
-            case UIGestureRecognizerStateCancelled:
-            case UIGestureRecognizerStateFailed:
-                [self setSelected:false animated:true];
-                break;
-
-            default:
-                break;
-        }*/
-    }
-
-    private void handlePan() {
-        /*CGPoint location = [gestureRecognizer locationInView:self];
-        CGPoint centerPoint = [self _actualCenterPoint];
-        CGPoint delta = CGPointMake(location.x - centerPoint.x, location.y - centerPoint.y);
-        CGFloat radialDistance = sqrtf(delta.x * delta.x + delta.y * delta.y);
-        CGFloat distance = fabsf(delta.x * cosf(self.angle + (CGFloat)M_PI_2) + delta.y * sinf(self.angle + (CGFloat)M_PI_2));
-
-        CGFloat shorterSide = (self.actualAreaSize.width > self.actualAreaSize.height) ? self.actualAreaSize.height : self.actualAreaSize.width;
-
-        CGFloat innerRadius = shorterSide * self.falloff;
-        CGFloat outerRadius = shorterSide * self.size;
-
-        switch (gestureRecognizer.state) {
-            case UIGestureRecognizerStateBegan:
-            {
-                bool close = fabsf(outerRadius - innerRadius) < TGLinearBlurInsetProximity;
-                CGFloat innerRadiusOuterInset = close ? 0 : TGLinearBlurViewRadiusInset;
-                CGFloat outerRadiusInnerInset = close ? 0 : TGLinearBlurViewRadiusInset;
-
-                if (radialDistance < TGLinearBlurViewCenterInset)
-                {
-                    _activeControl = TGLinearBlurViewActiveControlCenter;
-                    _startCenterPoint = centerPoint;
-                }
-                else if (distance > innerRadius - TGLinearBlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset)
-                {
-                    _activeControl = TGLinearBlurViewActiveControlInnerRadius;
-                    _startDistance = distance;
-                    _startRadius = innerRadius;
-                }
-                else if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + TGLinearBlurViewRadiusInset)
-                {
-                    _activeControl = TGLinearBlurViewActiveControlOuterRadius;
-                    _startDistance = distance;
-                    _startRadius = outerRadius;
-                }
-                else if (distance <= innerRadius - TGLinearBlurViewRadiusInset || distance >= outerRadius + TGLinearBlurViewRadiusInset)
-                {
-                    _activeControl = TGLinearBlurViewActiveControlRotation;
-                }
-
-                [self setSelected:true animated:true];
-            }
-            break;
-
-            case UIGestureRecognizerStateChanged:
-            {
-                switch (_activeControl)
-                {
-                    case TGLinearBlurViewActiveControlCenter:
-                    {
-                        CGPoint translation = [gestureRecognizer translationInView:self];
-
-                        CGRect actualArea = CGRectMake((self.frame.size.width - self.actualAreaSize.width) / 2, (self.frame.size.height - self.actualAreaSize.height) / 2, self.actualAreaSize.width, self.actualAreaSize.height);
-
-                        CGPoint newPoint = CGPointMake(MAX(CGRectGetMinX(actualArea), MIN(CGRectGetMaxX(actualArea), _startCenterPoint.x + translation.x)),
-                                MAX(CGRectGetMinY(actualArea), MIN(CGRectGetMaxY(actualArea), _startCenterPoint.y + translation.y)));
-
-                        CGPoint offset = CGPointMake(0, (self.actualAreaSize.width - self.actualAreaSize.height) / 2);
-                        CGPoint actualPoint = CGPointMake(newPoint.x - actualArea.origin.x, newPoint.y - actualArea.origin.y);
-                        self.centerPoint = CGPointMake((actualPoint.x + offset.x) / self.actualAreaSize.width, (actualPoint.y + offset.y) / self.actualAreaSize.width);
-                    }
-                    break;
-
-                    case TGLinearBlurViewActiveControlInnerRadius:
-                    {
-                        CGFloat delta = distance - _startDistance;
-                        self.falloff = MIN(MAX(TGLinearBlurMinimumFalloff, (_startRadius + delta) / shorterSide), self.size - TGLinearBlurMinimumDifference);
-                    }
-                    break;
-
-                    case TGLinearBlurViewActiveControlOuterRadius:
-                    {
-                        CGFloat delta = distance - _startDistance;
-                        self.size = MAX(self.falloff + TGLinearBlurMinimumDifference, (_startRadius + delta) / shorterSide);
-                    }
-                    break;
-
-                    case TGLinearBlurViewActiveControlRotation:
-                    {
-                        CGPoint translation = [gestureRecognizer translationInView:self];
-                        bool clockwise = false;
-
-                        bool right = location.x > centerPoint.x;
-                        bool bottom = location.y > centerPoint.y;
-
-                        if (!right && !bottom)
-                        {
-                            if (fabsf(translation.y) > fabsf(translation.x))
-                            {
-                                if (translation.y < 0)
-                                    clockwise = true;
-                            }
-                            else
-                            {
-                                if (translation.x > 0)
-                                    clockwise = true;
-                            }
-                        }
-                        else if (right && !bottom)
-                        {
-                            if (fabsf(translation.y) > fabsf(translation.x))
-                            {
-                                if (translation.y > 0)
-                                    clockwise = true;
-                            }
-                            else
-                            {
-                                if (translation.x > 0)
-                                    clockwise = true;
-                            }
-                        }
-                        else if (right && bottom)
-                        {
-                            if (fabsf(translation.y) > fabsf(translation.x))
-                            {
-                                if (translation.y > 0)
-                                    clockwise = true;
-                            }
-                            else
-                            {
-                                if (translation.x < 0)
-                                    clockwise = true;
-                            }
-                        }
-                        else
-                        {
-                            if (fabsf(translation.y) > fabsf(translation.x))
-                            {
-                                if (translation.y < 0)
-                                    clockwise = true;
-                            }
-                            else
-                            {
-                                if (translation.x < 0)
-                                    clockwise = true;
-                            }
-                        }
-
-                        CGFloat delta = sqrtf(translation.x * translation.x + translation.y * translation.y);
-
-                        CGFloat angleInDegrees = TGRadiansToDegrees(_angle);
-                        CGFloat newAngleInDegrees = angleInDegrees + delta * (clockwise * 2 - 1) / (CGFloat)M_PI / 1.15f;
-
-                        _angle = TGDegreesToRadians(newAngleInDegrees);
-
-                        [gestureRecognizer setTranslation:CGPointZero inView:self];
-                    }
-                    break;
-
-                    default:
-                        break;
-                }
-
-                [self setNeedsDisplay];
-
-                if (self.valueChanged != nil)
-                    self.valueChanged(self.centerPoint, self.falloff, self.size, self.angle);
-            }
-            break;
-
-            case UIGestureRecognizerStateEnded:
-            case UIGestureRecognizerStateCancelled:
-            case UIGestureRecognizerStateFailed:
-            {
-                _activeControl = TGLinearBlurViewActiveControlNone;
-
-                [self setSelected:false animated:true];
-
-                if (self.interactionEnded != nil)
-                    self.interactionEnded();
-            }
-            break;
-
-            default:
-                break;
-        }*/
-    }
-
-    private void handlePinch() {
-        /*switch (gestureRecognizer.state) {
-            case UIGestureRecognizerStateBegan: {
-                _activeControl = TGLinearBlurViewActiveControlWholeArea;
-                [self setSelected:true animated:true];
-            }
-            case UIGestureRecognizerStateChanged: {
-                CGFloat scale = gestureRecognizer.scale;
-
-                self.falloff = MAX(TGLinearBlurMinimumFalloff, self.falloff * scale);
-                self.size = MAX(self.falloff + TGLinearBlurMinimumDifference, self.size * scale);
-
-                gestureRecognizer.scale = 1.0f;
-
-                [self setNeedsDisplay];
-
-                if (self.valueChanged != nil)
-                    self.valueChanged(self.centerPoint, self.falloff, self.size, self.angle);
-            }
-            break;
-
-            case UIGestureRecognizerStateEnded: {
-                _activeControl = TGLinearBlurViewActiveControlNone;
-                [self setSelected:false animated:true];
-            }
-            break;
-
-            case UIGestureRecognizerStateCancelled:
-            case UIGestureRecognizerStateFailed: {
-                _activeControl = TGLinearBlurViewActiveControlNone;
-                [self setSelected:false animated:true];
-            }
-            break;
-
-            default:
-                break;
-        }*/
-    }
-
-    /*- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
-    {
-        if (gestureRecognizer == _pressGestureRecognizer || gestureRecognizer == _panGestureRecognizer)
-        {
-            CGPoint location = [gestureRecognizer locationInView:self];
-            CGPoint centerPoint = [self _actualCenterPoint];
-            CGPoint delta = CGPointMake(location.x - centerPoint.x, location.y - centerPoint.y);
-            CGFloat radialDistance = sqrtf(delta.x * delta.x + delta.y * delta.y);
-            CGFloat distance = fabsf(delta.x * cosf(self.angle + (CGFloat)M_PI_2) + delta.y * sinf(self.angle + (CGFloat)M_PI_2));
-
-            CGFloat innerRadius = [self _actualInnerRadius];
-            CGFloat outerRadius = [self _actualOuterRadius];
-
-            bool close = fabsf(outerRadius - innerRadius) < TGLinearBlurInsetProximity;
-            CGFloat innerRadiusOuterInset = close ? 0 : TGLinearBlurViewRadiusInset;
-            CGFloat outerRadiusInnerInset = close ? 0 : TGLinearBlurViewRadiusInset;
-
-            if (radialDistance < TGLinearBlurViewCenterInset && gestureRecognizer == _panGestureRecognizer)
-                return true;
-            else if (distance > innerRadius - TGLinearBlurViewRadiusInset && distance < innerRadius + innerRadiusOuterInset)
-                return true;
-            else if (distance > outerRadius - outerRadiusInnerInset && distance < outerRadius + TGLinearBlurViewRadiusInset)
-                return true;
-            else if ((distance <= innerRadius - TGLinearBlurViewRadiusInset) || distance >= outerRadius + TGLinearBlurViewRadiusInset)
-                return true;
-
-            return false;
-        }
-
-        return true;
-    }
-
-    - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
-    {
-        if (gestureRecognizer == _pressGestureRecognizer || otherGestureRecognizer == _pressGestureRecognizer)
-            return true;
-
-        return false;
-    }*/
-
-    private void setSelected(boolean selected, boolean animated) {
-        /*if (animated) {
-            [UIView animateWithDuration:0.16f delay:0.0f options:UIViewAnimationOptionBeginFromCurrentState animations:^
-            {
-                self.alpha = selected ? 0.6f : 1.0f;
-            } completion:nil];
-        } else {
-            self.alpha = selected ? 0.6f : 1.0f;
-        }*/
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        /*PointF centerPoint = getActualCenterPoint();
-        float innerRadius = getActualInnerRadius();
-        float outerRadius = getActualOuterRadius();
-
-        CGContextTranslateCTM(context, centerPoint.x, centerPoint.y);
-        CGContextRotateCTM(context, self.angle);
-
-        CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);
-        CGContextSetShadowWithColor(context, CGSizeZero, 2.5f, [UIColor colorWithWhite:0.0f alpha:0.3f].CGColor);
-
-        float space = 6.0f;
-        float length = 12.0f;
-        float thickness = 1.5f;
-        for (int i = 0; i < 30; i++) {
-            CGContextAddRect(context, CGRectMake(i * (length + space), -innerRadius, length, thickness));
-            CGContextAddRect(context, CGRectMake(-i * (length + space) - space - length, -innerRadius, length, thickness));
-
-            CGContextAddRect(context, CGRectMake(i * (length + space), innerRadius, length, thickness));
-            CGContextAddRect(context, CGRectMake(-i * (length + space) - space - length, innerRadius, length, thickness));
-        }
-
-        length = 6.0f;
-        thickness = 1.5f;
-        for (int i = 0; i < 64; i++) {
-            CGContextAddRect(context, CGRectMake(i * (length + space), -outerRadius, length, thickness));
-            CGContextAddRect(context, CGRectMake(-i * (length + space) - space - length, -outerRadius, length, thickness));
-
-            CGContextAddRect(context, CGRectMake(i * (length + space), outerRadius, length, thickness));
-            CGContextAddRect(context, CGRectMake(-i * (length + space) - space - length, outerRadius, length, thickness));
-        }
-
-        CGContextFillPath(context);
-
-        CGContextFillEllipseInRect(context, CGRectMake(-16 / 2, - 16 / 2, 16, 16));*/
-    }
-
-    private PointF getActualCenterPoint() {
-        RectF actualArea = new RectF((getWidth() - actualAreaSize.getWidth()) / 2, (getHeight() - actualAreaSize.getHeight()) / 2, actualAreaSize.getWidth(), actualAreaSize.getHeight());
-        PointF offset = new PointF(0, (actualAreaSize.getWidth() - actualAreaSize.getHeight()) / 2);
-        return new PointF(actualArea.left - offset.x + centerPoint.x * actualAreaSize.getWidth(), actualArea.top - offset.y + centerPoint.y * actualAreaSize.getWidth());
-    }
-
-    private float getActualInnerRadius() {
-        float shorterSide = (actualAreaSize.getWidth() > actualAreaSize.getHeight()) ? actualAreaSize.getHeight() : actualAreaSize.getWidth();
-        return shorterSide * falloff;
-    }
-
-    private float getActualOuterRadius() {
-        float shorterSide = (actualAreaSize.getWidth() > actualAreaSize.getHeight()) ? actualAreaSize.getHeight() : actualAreaSize.getWidth();
-        return shorterSide * size;
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
index 2037f1d13..da9ac0662 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterView.java
@@ -71,8 +71,8 @@
     private int shadowsTool = 6;
     private int vignetteTool = 7;
     private int grainTool = 8;
-    private int blurTool = -1;
-    private int sharpenTool = 9;
+    private int blurTool = 9;
+    private int sharpenTool = 10;
 
     private float highlightsValue = 0; //0 100
     private float contrastValue = 0; //-100 100
@@ -84,18 +84,29 @@
     private float vignetteValue = 0; //0 100
     private float grainValue = 0; //0 100
     private float sharpenValue = 0; //0 100
+    private int blurType = 0; //0 none, 1 radial, 2 linear
+    private float blurExcludeSize = 0.35f;
+    private Point blurExcludePoint = new Point(0.5f, 0.5f);
+    private float blurExcludeBlurSize = 0.15f;
+    private float blurAngle = (float) Math.PI / 2.0f;
 
     private ToolsAdapter toolsAdapter;
     private PhotoEditorSeekBar valueSeekBar;
     private FrameLayout toolsView;
     private FrameLayout editView;
     private TextView paramTextView;
+    private TextView blurTextView;
     private TextView valueTextView;
     private TextView doneTextView;
     private TextView cancelTextView;
     private TextureView textureView;
     private EGLThread eglThread;
     private RecyclerListView recyclerListView;
+    private FrameLayout blurLayout;
+    private PhotoFilterBlurControl blurControl;
+    private TextView blurOffButton;
+    private TextView blurRadialButton;
+    private TextView blurLinearButton;
 
     private Bitmap bitmapToEdit;
     private int orientation;
@@ -112,6 +123,7 @@
         private EGLSurface eglSurface;
         private GL gl;
         private boolean initied;
+        private boolean needUpdateBlurTexture = true;
 
         private Bitmap currentBitmap;
 
@@ -142,6 +154,34 @@
         private int widthHandle;
         private int heightHandle;
 
+        private int blurShaderProgram;
+        private int blurPositionHandle;
+        private int blurInputTexCoordHandle;
+        private int blurSourceImageHandle;
+        private int blurWidthHandle;
+        private int blurHeightHandle;
+
+        private int linearBlurShaderProgram;
+        private int linearBlurPositionHandle;
+        private int linearBlurInputTexCoordHandle;
+        private int linearBlurSourceImageHandle;
+        private int linearBlurSourceImage2Handle;
+        private int linearBlurExcludeSizeHandle;
+        private int linearBlurExcludePointHandle;
+        private int linearBlurExcludeBlurSizeHandle;
+        private int linearBlurAngleHandle;
+        private int linearBlurAspectRatioHandle;
+
+        private int radialBlurShaderProgram;
+        private int radialBlurPositionHandle;
+        private int radialBlurInputTexCoordHandle;
+        private int radialBlurSourceImageHandle;
+        private int radialBlurSourceImage2Handle;
+        private int radialBlurExcludeSizeHandle;
+        private int radialBlurExcludePointHandle;
+        private int radialBlurExcludeBlurSizeHandle;
+        private int radialBlurAspectRatioHandle;
+
         private int sharpenShaderProgram;
         private int sharpenHandle;
         private int sharpenWidthHandle;
@@ -156,8 +196,8 @@
         private int simpleSourceImageHandle;
 
         private int[] enhanceTextures = new int[2];
-        private int[] renderTexture = new int[2];
-        private int[] renderFrameBuffer = new int[2];
+        private int[] renderTexture = new int[3];
+        private int[] renderFrameBuffer = new int[3];
         private boolean hsvGenerated;
         private int renderBufferWidth;
         private int renderBufferHeight;
@@ -168,9 +208,81 @@
         private FloatBuffer textureBuffer;
         private FloatBuffer vertexInvertBuffer;
 
+        private boolean blured;
+
         private final static int PGPhotoEnhanceHistogramBins = 256;
         private final static int PGPhotoEnhanceSegments = 4;
 
+        private static final String radialBlurFragmentShaderCode =
+                "varying highp vec2 texCoord;" +
+                "uniform sampler2D sourceImage;" +
+                "uniform sampler2D inputImageTexture2;" +
+                "uniform lowp float excludeSize;" +
+                "uniform lowp vec2 excludePoint;" +
+                "uniform lowp float excludeBlurSize;" +
+                "uniform highp float aspectRatio;" +
+                "void main() {" +
+                    "lowp vec4 sharpImageColor = texture2D(sourceImage, texCoord);" +
+                    "lowp vec4 blurredImageColor = texture2D(inputImageTexture2, texCoord);" +
+                    "highp vec2 texCoordToUse = vec2(texCoord.x, (texCoord.y * aspectRatio + 0.5 - 0.5 * aspectRatio));" +
+                    "highp float distanceFromCenter = distance(excludePoint, texCoordToUse);" +
+                    "gl_FragColor = mix(sharpImageColor, blurredImageColor, smoothstep(excludeSize - excludeBlurSize, excludeSize, distanceFromCenter));" +
+                "}";
+
+        private static final String linearBlurFragmentShaderCode =
+                "varying highp vec2 texCoord;" +
+                "uniform sampler2D sourceImage;" +
+                "uniform sampler2D inputImageTexture2;" +
+                "uniform lowp float excludeSize;" +
+                "uniform lowp vec2 excludePoint;" +
+                "uniform lowp float excludeBlurSize;" +
+                "uniform highp float angle;" +
+                "uniform highp float aspectRatio;" +
+                "void main() {" +
+                    "lowp vec4 sharpImageColor = texture2D(sourceImage, texCoord);" +
+                    "lowp vec4 blurredImageColor = texture2D(inputImageTexture2, texCoord);" +
+                    "highp vec2 texCoordToUse = vec2(texCoord.x, (texCoord.y * aspectRatio + 0.5 - 0.5 * aspectRatio));" +
+                    "highp float distanceFromCenter = abs((texCoordToUse.x - excludePoint.x) * aspectRatio * cos(angle) + (texCoordToUse.y - excludePoint.y) * sin(angle));" +
+                    "gl_FragColor = mix(sharpImageColor, blurredImageColor, smoothstep(excludeSize - excludeBlurSize, excludeSize, distanceFromCenter));" +
+                "}";
+
+        private static final String blurVertexShaderCode =
+                "attribute vec4 position;" +
+                "attribute vec4 inputTexCoord;" +
+                "uniform highp float texelWidthOffset;" +
+                "uniform highp float texelHeightOffset;" +
+                "varying vec2 blurCoordinates[9];" +
+                "void main() {" +
+                    "gl_Position = position;" +
+                    "vec2 singleStepOffset = vec2(texelWidthOffset, texelHeightOffset);" +
+                    "blurCoordinates[0] = inputTexCoord.xy;" +
+                    "blurCoordinates[1] = inputTexCoord.xy + singleStepOffset * 1.458430;" +
+                    "blurCoordinates[2] = inputTexCoord.xy - singleStepOffset * 1.458430;" +
+                    "blurCoordinates[3] = inputTexCoord.xy + singleStepOffset * 3.403985;" +
+                    "blurCoordinates[4] = inputTexCoord.xy - singleStepOffset * 3.403985;" +
+                    "blurCoordinates[5] = inputTexCoord.xy + singleStepOffset * 5.351806;" +
+                    "blurCoordinates[6] = inputTexCoord.xy - singleStepOffset * 5.351806;" +
+                    "blurCoordinates[7] = inputTexCoord.xy + singleStepOffset * 7.302940;" +
+                    "blurCoordinates[8] = inputTexCoord.xy - singleStepOffset * 7.302940;" +
+                "}";
+
+        private static final String blurFragmentShaderCode =
+                "uniform sampler2D sourceImage;" +
+                "varying highp vec2 blurCoordinates[9];" +
+                "void main() {" +
+                    "lowp vec4 sum = vec4(0.0);" +
+                    "sum += texture2D(sourceImage, blurCoordinates[0]) * 0.133571;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[1]) * 0.233308;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[2]) * 0.233308;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[3]) * 0.135928;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[4]) * 0.135928;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[5]) * 0.051383;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[6]) * 0.051383;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[7]) * 0.012595;" +
+                    "sum += texture2D(sourceImage, blurCoordinates[8]) * 0.012595;" +
+                    "gl_FragColor = sum;" +
+                "}";
+
         private static final String rgbToHsvFragmentShaderCode =
                 "precision highp float;" +
                 "varying vec2 texCoord;" +
@@ -628,6 +740,97 @@ private boolean initGL() {
                 return false;
             }
 
+            vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, blurVertexShaderCode);
+            fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, blurFragmentShaderCode);
+
+            if (vertexShader != 0 && fragmentShader != 0) {
+                blurShaderProgram = GLES20.glCreateProgram();
+                GLES20.glAttachShader(blurShaderProgram, vertexShader);
+                GLES20.glAttachShader(blurShaderProgram, fragmentShader);
+                GLES20.glBindAttribLocation(blurShaderProgram, 0, "position");
+                GLES20.glBindAttribLocation(blurShaderProgram, 1, "inputTexCoord");
+
+                GLES20.glLinkProgram(blurShaderProgram);
+                int[] linkStatus = new int[1];
+                GLES20.glGetProgramiv(blurShaderProgram, GLES20.GL_LINK_STATUS, linkStatus, 0);
+                if (linkStatus[0] == 0) {
+                    GLES20.glDeleteProgram(blurShaderProgram);
+                    blurShaderProgram = 0;
+                } else {
+                    blurPositionHandle = GLES20.glGetAttribLocation(blurShaderProgram, "position");
+                    blurInputTexCoordHandle = GLES20.glGetAttribLocation(blurShaderProgram, "inputTexCoord");
+                    blurSourceImageHandle = GLES20.glGetUniformLocation(blurShaderProgram, "sourceImage");
+                    blurWidthHandle = GLES20.glGetUniformLocation(blurShaderProgram, "texelWidthOffset");
+                    blurHeightHandle = GLES20.glGetUniformLocation(blurShaderProgram, "texelHeightOffset");
+                }
+            } else {
+                finish();
+                return false;
+            }
+
+            vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, simpleVertexShaderCode);
+            fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, linearBlurFragmentShaderCode);
+
+            if (vertexShader != 0 && fragmentShader != 0) {
+                linearBlurShaderProgram = GLES20.glCreateProgram();
+                GLES20.glAttachShader(linearBlurShaderProgram, vertexShader);
+                GLES20.glAttachShader(linearBlurShaderProgram, fragmentShader);
+                GLES20.glBindAttribLocation(linearBlurShaderProgram, 0, "position");
+                GLES20.glBindAttribLocation(linearBlurShaderProgram, 1, "inputTexCoord");
+
+                GLES20.glLinkProgram(linearBlurShaderProgram);
+                int[] linkStatus = new int[1];
+                GLES20.glGetProgramiv(linearBlurShaderProgram, GLES20.GL_LINK_STATUS, linkStatus, 0);
+                if (linkStatus[0] == 0) {
+                    GLES20.glDeleteProgram(linearBlurShaderProgram);
+                    linearBlurShaderProgram = 0;
+                } else {
+                    linearBlurPositionHandle = GLES20.glGetAttribLocation(linearBlurShaderProgram, "position");
+                    linearBlurInputTexCoordHandle = GLES20.glGetAttribLocation(linearBlurShaderProgram, "inputTexCoord");
+                    linearBlurSourceImageHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "sourceImage");
+                    linearBlurSourceImage2Handle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "inputImageTexture2");
+                    linearBlurExcludeSizeHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "excludeSize");
+                    linearBlurExcludePointHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "excludePoint");
+                    linearBlurExcludeBlurSizeHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "excludeBlurSize");
+                    linearBlurAngleHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "angle");
+                    linearBlurAspectRatioHandle = GLES20.glGetUniformLocation(linearBlurShaderProgram, "aspectRatio");
+                }
+            } else {
+                finish();
+                return false;
+            }
+
+            vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, simpleVertexShaderCode);
+            fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, radialBlurFragmentShaderCode);
+
+            if (vertexShader != 0 && fragmentShader != 0) {
+                radialBlurShaderProgram = GLES20.glCreateProgram();
+                GLES20.glAttachShader(radialBlurShaderProgram, vertexShader);
+                GLES20.glAttachShader(radialBlurShaderProgram, fragmentShader);
+                GLES20.glBindAttribLocation(radialBlurShaderProgram, 0, "position");
+                GLES20.glBindAttribLocation(radialBlurShaderProgram, 1, "inputTexCoord");
+
+                GLES20.glLinkProgram(radialBlurShaderProgram);
+                int[] linkStatus = new int[1];
+                GLES20.glGetProgramiv(radialBlurShaderProgram, GLES20.GL_LINK_STATUS, linkStatus, 0);
+                if (linkStatus[0] == 0) {
+                    GLES20.glDeleteProgram(radialBlurShaderProgram);
+                    radialBlurShaderProgram = 0;
+                } else {
+                    radialBlurPositionHandle = GLES20.glGetAttribLocation(radialBlurShaderProgram, "position");
+                    radialBlurInputTexCoordHandle = GLES20.glGetAttribLocation(radialBlurShaderProgram, "inputTexCoord");
+                    radialBlurSourceImageHandle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "sourceImage");
+                    radialBlurSourceImage2Handle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "inputImageTexture2");
+                    radialBlurExcludeSizeHandle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "excludeSize");
+                    radialBlurExcludePointHandle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "excludePoint");
+                    radialBlurExcludeBlurSizeHandle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "excludeBlurSize");
+                    radialBlurAspectRatioHandle = GLES20.glGetUniformLocation(radialBlurShaderProgram, "aspectRatio");
+                }
+            } else {
+                finish();
+                return false;
+            }
+
             vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, simpleVertexShaderCode);
             fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, rgbToHsvFragmentShaderCode);
             if (vertexShader != 0 && fragmentShader != 0) {
@@ -728,145 +931,224 @@ public void finish() {
             }
         }
 
-        private Runnable drawRunnable = new Runnable() {
-            @Override
-            public void run() {
-                if (!initied) {
-                    return;
-                }
+        private void drawEnhancePass() {
+            if (!hsvGenerated) {
+                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[0]);
+                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[0], 0);
+                GLES20.glClear(0);
 
-                if (!eglContext.equals(egl10.eglGetCurrentContext()) || !eglSurface.equals(egl10.eglGetCurrentSurface(EGL10.EGL_DRAW))) {
-                    if (!egl10.eglMakeCurrent(eglDisplay, eglSurface, eglSurface, eglContext)) {
-                        FileLog.e("tmessages", "eglMakeCurrent failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
-                        return;
-                    }
+                GLES20.glUseProgram(rgbToHsvShaderProgram);
+                GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
+                GLES20.glUniform1i(rgbToHsvSourceImageHandle, 0);
+                GLES20.glEnableVertexAttribArray(rgbToHsvInputTexCoordHandle);
+                GLES20.glVertexAttribPointer(rgbToHsvInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+                GLES20.glEnableVertexAttribArray(rgbToHsvPositionHandle);
+                GLES20.glVertexAttribPointer(rgbToHsvPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer);
+                GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+
+                ByteBuffer hsvBuffer = ByteBuffer.allocateDirect(renderBufferWidth * renderBufferHeight * 4);
+                GLES20.glReadPixels(0, 0, renderBufferWidth, renderBufferHeight, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, hsvBuffer);
+
+                GLES20.glBindTexture(GL10.GL_TEXTURE_2D, enhanceTextures[0]);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
+                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, renderBufferWidth, renderBufferHeight, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, hsvBuffer);
+
+                ByteBuffer buffer = null;
+                try {
+                    buffer = ByteBuffer.allocateDirect(PGPhotoEnhanceSegments * PGPhotoEnhanceSegments * PGPhotoEnhanceHistogramBins * 4);
+                    Utilities.calcCDT(hsvBuffer, renderBufferWidth, renderBufferHeight, buffer);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
 
-                GLES20.glViewport(0, 0, renderBufferWidth, renderBufferHeight);
-                //enhance draw
-                if (!hsvGenerated) {
-                    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[0]);
-                    GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[0], 0);
-                    GLES20.glClear(0);
-
-                    GLES20.glUseProgram(rgbToHsvShaderProgram);
-                    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
-                    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
-                    GLES20.glUniform1i(rgbToHsvSourceImageHandle, 0);
-                    GLES20.glEnableVertexAttribArray(rgbToHsvInputTexCoordHandle);
-                    GLES20.glVertexAttribPointer(rgbToHsvInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
-                    GLES20.glEnableVertexAttribArray(rgbToHsvPositionHandle);
-                    GLES20.glVertexAttribPointer(rgbToHsvPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer);
-                    GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
-
-                    ByteBuffer hsvBuffer = ByteBuffer.allocateDirect(renderBufferWidth * renderBufferHeight * 4);
-                    GLES20.glReadPixels(0, 0, renderBufferWidth, renderBufferHeight, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, hsvBuffer);
-
-                    GLES20.glBindTexture(GL10.GL_TEXTURE_2D, enhanceTextures[0]);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
-                    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, renderBufferWidth, renderBufferHeight, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, hsvBuffer);
-
-                    ByteBuffer buffer = null;
-                    try {
-                        buffer = ByteBuffer.allocateDirect(PGPhotoEnhanceSegments * PGPhotoEnhanceSegments * PGPhotoEnhanceHistogramBins * 4);
-                        Utilities.calcCDT(hsvBuffer, renderBufferWidth, renderBufferHeight, buffer);
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
+                GLES20.glBindTexture(GL10.GL_TEXTURE_2D, enhanceTextures[1]);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
+                GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
+                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, 256, 16, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buffer);
 
-                    GLES20.glBindTexture(GL10.GL_TEXTURE_2D, enhanceTextures[1]);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
-                    GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
-                    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, 256, 16, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buffer);
+                hsvGenerated = true;
+            }
 
-                    hsvGenerated = true;
-                }
+            GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[1]);
+            GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[1], 0);
+            GLES20.glClear(0);
+
+            GLES20.glUseProgram(enhanceShaderProgram);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, enhanceTextures[0]);
+            GLES20.glUniform1i(enhanceSourceImageHandle, 0);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, enhanceTextures[1]);
+            GLES20.glUniform1i(enhanceInputImageTexture2Handle, 1);
+            if (showOriginal) {
+                GLES20.glUniform1f(enhanceIntensityHandle, 0);
+            } else {
+                GLES20.glUniform1f(enhanceIntensityHandle, getEnhanceValue());
+            }
 
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[1]);
-                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[1], 0);
-                GLES20.glClear(0);
+            GLES20.glEnableVertexAttribArray(enhanceInputTexCoordHandle);
+            GLES20.glVertexAttribPointer(enhanceInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+            GLES20.glEnableVertexAttribArray(enhancePositionHandle);
+            GLES20.glVertexAttribPointer(enhancePositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer);
+            GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        }
 
-                GLES20.glUseProgram(enhanceShaderProgram);
-                GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, enhanceTextures[0]);
-                GLES20.glUniform1i(enhanceSourceImageHandle, 0);
-                GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, enhanceTextures[1]);
-                GLES20.glUniform1i(enhanceInputImageTexture2Handle, 1);
-                if (showOriginal) {
-                    GLES20.glUniform1f(enhanceIntensityHandle, 0);
-                } else {
-                    GLES20.glUniform1f(enhanceIntensityHandle, getEnhanceValue());
-                }
+        private void drawSharpenPass() {
+            GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[0]);
+            GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[0], 0);
+            GLES20.glClear(0);
+
+            GLES20.glUseProgram(sharpenShaderProgram);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
+            GLES20.glUniform1i(sharpenSourceImageHandle, 0);
+            if (showOriginal) {
+                GLES20.glUniform1f(sharpenHandle, 0);
+            } else {
+                GLES20.glUniform1f(sharpenHandle, getSharpenValue());
+            }
+            GLES20.glUniform1f(sharpenWidthHandle, renderBufferWidth);
+            GLES20.glUniform1f(sharpenHeightHandle, renderBufferHeight);
+            GLES20.glEnableVertexAttribArray(sharpenInputTexCoordHandle);
+            GLES20.glVertexAttribPointer(sharpenInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+            GLES20.glEnableVertexAttribArray(sharpenPositionHandle);
+            GLES20.glVertexAttribPointer(sharpenPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+            GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        }
 
-                GLES20.glEnableVertexAttribArray(enhanceInputTexCoordHandle);
-                GLES20.glVertexAttribPointer(enhanceInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
-                GLES20.glEnableVertexAttribArray(enhancePositionHandle);
-                GLES20.glVertexAttribPointer(enhancePositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexBuffer);
-                GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        private void drawCustomParamsPass() {
+            GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[1]);
+            GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[1], 0);
+            GLES20.glClear(0);
+
+            GLES20.glUseProgram(toolsShaderProgram);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[0]);
+            GLES20.glUniform1i(sourceImageHandle, 0);
+            if (showOriginal) {
+                GLES20.glUniform1f(shadowsHandle, 0);
+                GLES20.glUniform1f(highlightsHandle, 1);
+                GLES20.glUniform1f(exposureHandle, 0);
+                GLES20.glUniform1f(contrastHandle, 1);
+                GLES20.glUniform1f(saturationHandle, 1);
+                GLES20.glUniform1f(warmthHandle, 0);
+                GLES20.glUniform1f(vignetteHandle, 0);
+                GLES20.glUniform1f(grainHandle, 0);
+            } else {
+                GLES20.glUniform1f(shadowsHandle, getShadowsValue());
+                GLES20.glUniform1f(highlightsHandle, getHighlightsValue());
+                GLES20.glUniform1f(exposureHandle, getExposureValue());
+                GLES20.glUniform1f(contrastHandle, getContrastValue());
+                GLES20.glUniform1f(saturationHandle, getSaturationValue());
+                GLES20.glUniform1f(warmthHandle, getWarmthValue());
+                GLES20.glUniform1f(vignetteHandle, getVignetteValue());
+                GLES20.glUniform1f(grainHandle, getGrainValue());
+            }
+            GLES20.glUniform1f(widthHandle, renderBufferWidth);
+            GLES20.glUniform1f(heightHandle, renderBufferHeight);
+            GLES20.glEnableVertexAttribArray(inputTexCoordHandle);
+            GLES20.glVertexAttribPointer(inputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+            GLES20.glEnableVertexAttribArray(positionHandle);
+            GLES20.glVertexAttribPointer(positionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+            GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        }
+
+        private boolean drawBlurPass() {
+            if (showOriginal || blurType == 0) {
+                return false;
+            }
+            if (needUpdateBlurTexture) {
+                GLES20.glUseProgram(blurShaderProgram);
+                GLES20.glUniform1i(blurSourceImageHandle, 0);
+                GLES20.glEnableVertexAttribArray(blurInputTexCoordHandle);
+                GLES20.glVertexAttribPointer(blurInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+                GLES20.glEnableVertexAttribArray(blurPositionHandle);
+                GLES20.glVertexAttribPointer(blurPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
 
-                //sharpen draw
                 GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[0]);
                 GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[0], 0);
                 GLES20.glClear(0);
-
-                GLES20.glUseProgram(sharpenShaderProgram);
                 GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
                 GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
-                GLES20.glUniform1i(sharpenSourceImageHandle, 0);
-                if (showOriginal) {
-                    GLES20.glUniform1f(sharpenHandle, 0);
-                } else {
-                    GLES20.glUniform1f(sharpenHandle, getSharpenValue());
-                }
-                GLES20.glUniform1f(sharpenWidthHandle, renderBufferWidth);
-                GLES20.glUniform1f(sharpenHeightHandle, renderBufferHeight);
-                GLES20.glEnableVertexAttribArray(sharpenInputTexCoordHandle);
-                GLES20.glVertexAttribPointer(sharpenInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
-                GLES20.glEnableVertexAttribArray(sharpenPositionHandle);
-                GLES20.glVertexAttribPointer(sharpenPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+                GLES20.glUniform1f(blurWidthHandle, 0.0f);
+                GLES20.glUniform1f(blurHeightHandle, 1.0f / renderBufferHeight);
                 GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
 
-                //custom params draw
-                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[1]);
-                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[1], 0);
+                GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[2]);
+                GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[2], 0);
                 GLES20.glClear(0);
-
-                GLES20.glUseProgram(toolsShaderProgram);
                 GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
                 GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[0]);
-                GLES20.glUniform1i(sourceImageHandle, 0);
-                if (showOriginal) {
-                    GLES20.glUniform1f(shadowsHandle, 0);
-                    GLES20.glUniform1f(highlightsHandle, 1);
-                    GLES20.glUniform1f(exposureHandle, 0);
-                    GLES20.glUniform1f(contrastHandle, 1);
-                    GLES20.glUniform1f(saturationHandle, 1);
-                    GLES20.glUniform1f(warmthHandle, 0);
-                    GLES20.glUniform1f(vignetteHandle, 0);
-                    GLES20.glUniform1f(grainHandle, 0);
-                } else {
-                    GLES20.glUniform1f(shadowsHandle, getShadowsValue());
-                    GLES20.glUniform1f(highlightsHandle, getHighlightsValue());
-                    GLES20.glUniform1f(exposureHandle, getExposureValue());
-                    GLES20.glUniform1f(contrastHandle, getContrastValue());
-                    GLES20.glUniform1f(saturationHandle, getSaturationValue());
-                    GLES20.glUniform1f(warmthHandle, getWarmthValue());
-                    GLES20.glUniform1f(vignetteHandle, getVignetteValue());
-                    GLES20.glUniform1f(grainHandle, getGrainValue());
-                }
-                GLES20.glUniform1f(widthHandle, renderBufferWidth);
-                GLES20.glUniform1f(heightHandle, renderBufferHeight);
-                GLES20.glEnableVertexAttribArray(inputTexCoordHandle);
-                GLES20.glVertexAttribPointer(inputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
-                GLES20.glEnableVertexAttribArray(positionHandle);
-                GLES20.glVertexAttribPointer(positionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+                GLES20.glUniform1f(blurWidthHandle, 1.0f / renderBufferWidth);
+                GLES20.glUniform1f(blurHeightHandle, 0.0f);
                 GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+                needUpdateBlurTexture = false;
+            }
+
+            GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[0]);
+            GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[0], 0);
+            GLES20.glClear(0);
+            if (blurType == 1) {
+                GLES20.glUseProgram(radialBlurShaderProgram);
+                GLES20.glUniform1i(radialBlurSourceImageHandle, 0);
+                GLES20.glUniform1i(radialBlurSourceImage2Handle, 1);
+                GLES20.glUniform1f(radialBlurExcludeSizeHandle, blurExcludeSize);
+                GLES20.glUniform1f(radialBlurExcludeBlurSizeHandle, blurExcludeBlurSize);
+                GLES20.glUniform2f(radialBlurExcludePointHandle, blurExcludePoint.x, blurExcludePoint.y);
+                GLES20.glUniform1f(radialBlurAspectRatioHandle, (float) renderBufferHeight / (float) renderBufferWidth);
+                GLES20.glEnableVertexAttribArray(radialBlurInputTexCoordHandle);
+                GLES20.glVertexAttribPointer(radialBlurInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+                GLES20.glEnableVertexAttribArray(radialBlurPositionHandle);
+                GLES20.glVertexAttribPointer(radialBlurPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+            } else if (blurType == 2) {
+                GLES20.glUseProgram(linearBlurShaderProgram);
+                GLES20.glUniform1i(linearBlurSourceImageHandle, 0);
+                GLES20.glUniform1i(linearBlurSourceImage2Handle, 1);
+                GLES20.glUniform1f(linearBlurExcludeSizeHandle, blurExcludeSize);
+                GLES20.glUniform1f(linearBlurExcludeBlurSizeHandle, blurExcludeBlurSize);
+                GLES20.glUniform1f(linearBlurAngleHandle, blurAngle);
+                GLES20.glUniform2f(linearBlurExcludePointHandle, blurExcludePoint.x, blurExcludePoint.y);
+                GLES20.glUniform1f(linearBlurAspectRatioHandle, (float) renderBufferHeight / (float) renderBufferWidth);
+                GLES20.glEnableVertexAttribArray(linearBlurInputTexCoordHandle);
+                GLES20.glVertexAttribPointer(linearBlurInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
+                GLES20.glEnableVertexAttribArray(linearBlurPositionHandle);
+                GLES20.glVertexAttribPointer(linearBlurPositionHandle, 2, GLES20.GL_FLOAT, false, 8, vertexInvertBuffer);
+            }
+
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
+            GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[2]);
+            GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+
+            return true;
+        }
+
+        private Runnable drawRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (!initied) {
+                    return;
+                }
+
+                if (!eglContext.equals(egl10.eglGetCurrentContext()) || !eglSurface.equals(egl10.eglGetCurrentSurface(EGL10.EGL_DRAW))) {
+                    if (!egl10.eglMakeCurrent(eglDisplay, eglSurface, eglSurface, eglContext)) {
+                        FileLog.e("tmessages", "eglMakeCurrent failed " + GLUtils.getEGLErrorString(egl10.eglGetError()));
+                        return;
+                    }
+                }
+
+                GLES20.glViewport(0, 0, renderBufferWidth, renderBufferHeight);
+                drawEnhancePass();
+                drawSharpenPass();
+                drawCustomParamsPass();
+                blured = drawBlurPass();
 
                 //onscreen draw
                 GLES20.glViewport(0, 0, surfaceWidth, surfaceHeight);
@@ -875,7 +1157,7 @@ public void run() {
 
                 GLES20.glUseProgram(simpleShaderProgram);
                 GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
-                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[1]);
+                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[blured ? 0 : 1]);
                 GLES20.glUniform1i(simpleSourceImageHandle, 0);
                 GLES20.glEnableVertexAttribArray(simpleInputTexCoordHandle);
                 GLES20.glVertexAttribPointer(simpleInputTexCoordHandle, 2, GLES20.GL_FLOAT, false, 8, textureBuffer);
@@ -905,7 +1187,7 @@ public Bitmap getTexture() {
                     @Override
                     public void run() {
                         GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, renderFrameBuffer[1]);
-                        GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[1], 0);
+                        GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, renderTexture[blured ? 0 : 1], 0);
                         GLES20.glClear(0);
                         object[0] = getRenderBufferBitmap();
                         semaphore.release();
@@ -973,8 +1255,8 @@ private void loadTexture(Bitmap bitmap) {
 
                 currentBitmap = createBitmap(bitmap, renderBufferWidth, renderBufferHeight, scale);
             }
-            GLES20.glGenFramebuffers(2, renderFrameBuffer, 0);
-            GLES20.glGenTextures(2, renderTexture, 0);
+            GLES20.glGenFramebuffers(3, renderFrameBuffer, 0);
+            GLES20.glGenTextures(3, renderTexture, 0);
 
             GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[0]);
             GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
@@ -989,6 +1271,13 @@ private void loadTexture(Bitmap bitmap) {
             GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
             GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
             GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, currentBitmap, 0);
+
+            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, renderTexture[2]);
+            GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_LINEAR);
+            GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_LINEAR);
+            GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_CLAMP_TO_EDGE);
+            GLES20.glTexParameteri(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_CLAMP_TO_EDGE);
+            GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, renderBufferWidth, renderBufferHeight, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, null);
         }
 
         public void shutdown() {
@@ -1016,9 +1305,17 @@ public void run() {
             super.run();
         }
 
-        public void requestRender() {
-            cancelRunnable(drawRunnable);
-            postRunnable(drawRunnable);
+        public void requestRender(final boolean updateBlur) {
+            postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    if (!needUpdateBlurTexture) {
+                        needUpdateBlurTexture = updateBlur;
+                    }
+                    cancelRunnable(drawRunnable);
+                    postRunnable(drawRunnable);
+                }
+            });
         }
     }
 
@@ -1046,7 +1343,7 @@ public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int hei
                 if (eglThread == null && surface != null) {
                     eglThread = new EGLThread(surface, bitmapToEdit);
                     eglThread.setSurfaceTextureSize(width, height);
-                    eglThread.requestRender();
+                    eglThread.requestRender(true);
                 }
             }
 
@@ -1054,11 +1351,11 @@ public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int hei
             public void onSurfaceTextureSizeChanged(SurfaceTexture surface, final int width, final int height) {
                 if (eglThread != null) {
                     eglThread.setSurfaceTextureSize(width, height);
-                    eglThread.requestRender();
+                    eglThread.requestRender(false);
                     eglThread.postRunnable(new Runnable() {
                         @Override
                         public void run() {
-                            eglThread.requestRender();
+                            eglThread.requestRender(false);
                         }
                     });
                 }
@@ -1079,6 +1376,27 @@ public void onSurfaceTextureUpdated(SurfaceTexture surface) {
             }
         });
 
+        blurControl = new PhotoFilterBlurControl(context);
+        blurControl.setVisibility(INVISIBLE);
+        addView(blurControl);
+        layoutParams = (LayoutParams) blurControl.getLayoutParams();
+        layoutParams.width = LayoutParams.MATCH_PARENT;
+        layoutParams.height = LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
+        blurControl.setLayoutParams(layoutParams);
+        blurControl.setDelegate(new PhotoFilterBlurControl.PhotoFilterLinearBlurControlDelegate() {
+            @Override
+            public void valueChanged(Point centerPoint, float falloff, float size, float angle) {
+                blurExcludeSize = size;
+                blurExcludePoint = centerPoint;
+                blurExcludeBlurSize = falloff;
+                blurAngle = angle;
+                if (eglThread != null) {
+                    eglThread.requestRender(false);
+                }
+            }
+        });
+
         toolsView = new FrameLayout(context);
         addView(toolsView);
         layoutParams = (LayoutParams) toolsView.getLayoutParams();
@@ -1186,7 +1504,7 @@ public void onItemClick(View view, int i) {
                     valueSeekBar.setMinMax(0, 100);
                     paramTextView.setText(LocaleController.getString("Sharpen", R.string.Sharpen));
                 } else if (i == blurTool) {
-
+                    previousValue = blurType;
                 }
                 valueSeekBar.setProgress((int) previousValue, false);
                 updateValueTextView();
@@ -1245,9 +1563,11 @@ public void onClick(View v) {
                     grainValue = previousValue;
                 } else if (selectedTool == sharpenTool) {
                     sharpenValue = previousValue;
+                } else if (selectedTool == blurTool) {
+                    blurType = (int) previousValue;
                 }
                 if (eglThread != null) {
-                    eglThread.requestRender();
+                    eglThread.requestRender(selectedTool != blurTool);
                 }
                 switchToOrFromEditMode();
             }
@@ -1271,6 +1591,18 @@ public void onClick(View v) {
             }
         });
 
+        blurTextView = new TextView(context);
+        blurTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
+        blurTextView.setTextColor(0xffffffff);
+        blurTextView.setText(LocaleController.getString("Blur", R.string.Blur));
+        frameLayout.addView(blurTextView);
+        layoutParams = (LayoutParams) blurTextView.getLayoutParams();
+        layoutParams.width = LayoutParams.WRAP_CONTENT;
+        layoutParams.height = LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
+        layoutParams.topMargin = AndroidUtilities.dp(9);
+        blurTextView.setLayoutParams(layoutParams);
+
         paramTextView = new TextView(context);
         paramTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
         paramTextView.setTextColor(0xff808080);
@@ -1321,12 +1653,12 @@ public void onProgressChanged() {
                 }
                 updateValueTextView();
                 if (eglThread != null) {
-                    eglThread.requestRender();
+                    eglThread.requestRender(true);
                 }
             }
         });
         editView.addView(valueSeekBar);
-        layoutParams = (FrameLayout.LayoutParams) valueSeekBar.getLayoutParams();
+        layoutParams = (LayoutParams) valueSeekBar.getLayoutParams();
         layoutParams.height = AndroidUtilities.dp(60);
         layoutParams.leftMargin = AndroidUtilities.dp(14);
         layoutParams.rightMargin = AndroidUtilities.dp(14);
@@ -1339,6 +1671,113 @@ public void onProgressChanged() {
             layoutParams.gravity = Gravity.LEFT | Gravity.TOP;
         }
         valueSeekBar.setLayoutParams(layoutParams);
+
+        blurLayout = new FrameLayout(context);
+        editView.addView(blurLayout);
+        layoutParams = (LayoutParams) blurLayout.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(280);
+        layoutParams.height = AndroidUtilities.dp(60);
+        layoutParams.topMargin = AndroidUtilities.dp(10);
+        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
+        blurLayout.setLayoutParams(layoutParams);
+
+        blurOffButton = new TextView(context);
+        blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off_active, 0, 0);
+        blurOffButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        blurOffButton.setTextColor(0xff51bdf3);
+        blurOffButton.setGravity(Gravity.CENTER_HORIZONTAL);
+        blurOffButton.setText(LocaleController.getString("BlurOff", R.string.BlurOff));
+        blurLayout.addView(blurOffButton);
+        layoutParams = (LayoutParams) blurOffButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(80);
+        layoutParams.height = AndroidUtilities.dp(60);
+        blurOffButton.setLayoutParams(layoutParams);
+        blurOffButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                blurType = 0;
+                updateSelectedBlurType();
+                blurControl.setVisibility(INVISIBLE);
+                if (eglThread != null) {
+                    eglThread.requestRender(false);
+                }
+            }
+        });
+
+        blurRadialButton = new TextView(context);
+        blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
+        blurRadialButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        blurRadialButton.setTextColor(0xffffffff);
+        blurRadialButton.setGravity(Gravity.CENTER_HORIZONTAL);
+        blurRadialButton.setText(LocaleController.getString("BlurRadial", R.string.BlurRadial));
+        blurLayout.addView(blurRadialButton);
+        layoutParams = (LayoutParams) blurRadialButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(80);
+        layoutParams.height = AndroidUtilities.dp(60);
+        layoutParams.leftMargin = AndroidUtilities.dp(100);
+        blurRadialButton.setLayoutParams(layoutParams);
+        blurRadialButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                blurType = 1;
+                updateSelectedBlurType();
+                blurControl.setVisibility(VISIBLE);
+                blurControl.setType(1);
+                if (eglThread != null) {
+                    eglThread.requestRender(false);
+                }
+            }
+        });
+
+        blurLinearButton = new TextView(context);
+        blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
+        blurLinearButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
+        blurLinearButton.setTextColor(0xffffffff);
+        blurLinearButton.setGravity(Gravity.CENTER_HORIZONTAL);
+        blurLinearButton.setText(LocaleController.getString("BlurLinear", R.string.BlurLinear));
+        blurLayout.addView(blurLinearButton);
+        layoutParams = (LayoutParams) blurLinearButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(80);
+        layoutParams.height = AndroidUtilities.dp(60);
+        layoutParams.leftMargin = AndroidUtilities.dp(200);
+        blurLinearButton.setLayoutParams(layoutParams);
+        blurLinearButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                blurType = 2;
+                updateSelectedBlurType();
+                blurControl.setVisibility(VISIBLE);
+                blurControl.setType(0);
+                if (eglThread != null) {
+                    eglThread.requestRender(false);
+                }
+            }
+        });
+    }
+
+    private void updateSelectedBlurType() {
+        if (blurType == 0) {
+            blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off_active, 0, 0);
+            blurOffButton.setTextColor(0xff51bdf3);
+            blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
+            blurRadialButton.setTextColor(0xffffffff);
+            blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
+            blurLinearButton.setTextColor(0xffffffff);
+        } else if (blurType == 1) {
+            blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off, 0, 0);
+            blurOffButton.setTextColor(0xffffffff);
+            blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial_active, 0, 0);
+            blurRadialButton.setTextColor(0xff51bdf3);
+            blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear, 0, 0);
+            blurLinearButton.setTextColor(0xffffffff);
+        } else if (blurType == 2) {
+            blurOffButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_off, 0, 0);
+            blurOffButton.setTextColor(0xffffffff);
+            blurRadialButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_radial, 0, 0);
+            blurRadialButton.setTextColor(0xffffffff);
+            blurLinearButton.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.blur_linear_active, 0, 0);
+            blurLinearButton.setTextColor(0xff51bdf3);
+        }
     }
 
     private void updateValueTextView() {
@@ -1387,13 +1826,13 @@ public void onTouch(MotionEvent event) {
         }
     }
 
-    public void setShowOriginal(boolean value) {
+    private void setShowOriginal(boolean value) {
         if (showOriginal == value) {
             return;
         }
         showOriginal = value;
         if (eglThread != null) {
-            eglThread.requestRender();
+            eglThread.requestRender(false);
         }
     }
 
@@ -1403,10 +1842,30 @@ public void switchToOrFromEditMode() {
         if (editView.getVisibility() == GONE) {
             viewFrom = toolsView;
             viewTo = editView;
+
+            if (selectedTool == blurTool) {
+                blurLayout.setVisibility(VISIBLE);
+                valueSeekBar.setVisibility(INVISIBLE);
+                blurTextView.setVisibility(VISIBLE);
+                paramTextView.setVisibility(INVISIBLE);
+                valueTextView.setVisibility(INVISIBLE);
+                if (blurType != 0) {
+                    blurControl.setVisibility(VISIBLE);
+                }
+                updateSelectedBlurType();
+            } else {
+                blurLayout.setVisibility(INVISIBLE);
+                valueSeekBar.setVisibility(VISIBLE);
+                blurTextView.setVisibility(INVISIBLE);
+                paramTextView.setVisibility(VISIBLE);
+                valueTextView.setVisibility(VISIBLE);
+                blurControl.setVisibility(INVISIBLE);
+            }
         } else {
             selectedTool = -1;
             viewFrom = editView;
             viewTo = toolsView;
+            blurControl.setVisibility(INVISIBLE);
         }
 
         AnimatorSetProxy animatorSet = new AnimatorSetProxy();
@@ -1495,6 +1954,11 @@ private void fixLayout(int viewWidth, int viewHeight) {
         layoutParams.height = (int) bitmapH;
         textureView.setLayoutParams(layoutParams);
 
+        blurControl.setActualAreaSize(layoutParams.width, layoutParams.height);
+        layoutParams = (LayoutParams) blurControl.getLayoutParams();
+        layoutParams.height = viewHeight + AndroidUtilities.dp(28);
+        blurControl.setLayoutParams(layoutParams);
+
         if (AndroidUtilities.isTablet()) {
             int total = AndroidUtilities.dp(86) * 10;
             layoutParams = (FrameLayout.LayoutParams) recyclerListView.getLayoutParams();
@@ -1613,7 +2077,7 @@ public ToolsAdapter(Context context) {
 
         @Override
         public int getItemCount() {
-            return 10;
+            return 11;
         }
 
         @Override
@@ -1651,7 +2115,13 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
             } else if (i == sharpenTool) {
                 ((PhotoEditToolCell) holder.itemView).setIconAndTextAndValue(R.drawable.tool_details, LocaleController.getString("Sharpen", R.string.Sharpen), sharpenValue);
             } else if (i == blurTool) {
-                ((PhotoEditToolCell) holder.itemView).setIconAndTextAndValue(R.drawable.tool_details, LocaleController.getString("Blur", R.string.Blur), 0); //TODO add value
+                String value = "";
+                if (blurType == 1) {
+                    value = "R";
+                } else if (blurType == 2) {
+                    value = "L";
+                }
+                ((PhotoEditToolCell) holder.itemView).setIconAndTextAndValue(R.drawable.tool_blur, LocaleController.getString("Blur", R.string.Blur), value);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterRadialBlurControl.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Point.java
similarity index 61%
rename from TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterRadialBlurControl.java
rename to TMessagesProj/src/main/java/org/telegram/ui/Components/Point.java
index 1dd438fb0..f22dde478 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoFilterRadialBlurControl.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Point.java
@@ -8,5 +8,16 @@
 
 package org.telegram.ui.Components;
 
-public class PhotoFilterRadialBlurControl {
+public class Point {
+    public float x;
+    public float y;
+
+    public Point() {
+
+    }
+
+    public Point(float x, float y) {
+        this.x = x;
+        this.y = y;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Rect.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Rect.java
new file mode 100644
index 000000000..9dde354b9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Rect.java
@@ -0,0 +1,23 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Components;
+
+public class Rect {
+    public float x;
+    public float y;
+    public float width;
+    public float height;
+
+    public Rect(float x, float y, float width, float height) {
+        this.x = x;
+        this.y = y;
+        this.width = width;
+        this.height = height;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
index 9ef873436..08eea19d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/RecyclerListView.java
@@ -18,7 +18,7 @@
 public class RecyclerListView extends RecyclerView {
 
     public interface OnItemClickListener {
-        public void onItemClick(View view, int position);
+        void onItemClick(View view, int position);
     }
 
     public static class RecyclerListViewItemClickListener implements RecyclerView.OnItemTouchListener {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
index 8efc59c26..bc15136a0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SeekBar.java
@@ -19,8 +19,8 @@
 
 public class SeekBar {
 
-    public abstract interface SeekBarDelegate {
-        public void onSeekBarDrag(float progress);
+    public interface SeekBarDelegate {
+        void onSeekBarDrag(float progress);
     }
 
     private static Drawable thumbDrawable1;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Size.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Size.java
new file mode 100644
index 000000000..986c40703
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Size.java
@@ -0,0 +1,23 @@
+/*
+ * This is the source code of Telegram for Android v. 2.x
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2015.
+ */
+
+package org.telegram.ui.Components;
+
+public class Size {
+    public float width;
+    public float height;
+
+    public Size() {
+
+    }
+
+    public Size(float width, float height) {
+        this.width = width;
+        this.height = height;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
index 61e685895..c2278bec5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SizeNotifierRelativeLayout.java
@@ -8,6 +8,7 @@
 
 package org.telegram.ui.Components;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Rect;
@@ -26,8 +27,8 @@
     private int keyboardHeight;
     private SizeNotifierRelativeLayoutDelegate delegate;
 
-    public abstract interface SizeNotifierRelativeLayoutDelegate {
-        public abstract void onSizeChanged(int keyboardHeight);
+    public interface SizeNotifierRelativeLayoutDelegate {
+        void onSizeChanged(int keyboardHeight);
     }
 
     public SizeNotifierRelativeLayout(Context context) {
@@ -62,16 +63,24 @@ public void setDelegate(SizeNotifierRelativeLayoutDelegate delegate) {
         this.delegate = delegate;
     }
 
+    @SuppressLint("DrawAllocation")
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        super.onLayout(changed, l, t, r, b);
-        if (delegate != null) {
+        if (changed && delegate != null) {
             View rootView = this.getRootView();
             int usableViewHeight = rootView.getHeight() - AndroidUtilities.statusBarHeight - AndroidUtilities.getViewInset(rootView);
             this.getWindowVisibleDisplayFrame(rect);
             keyboardHeight = usableViewHeight - (rect.bottom - rect.top);
-            delegate.onSizeChanged(keyboardHeight);
+            post(new Runnable() {
+                @Override
+                public void run() {
+                    if (delegate != null) {
+                        delegate.onSizeChanged(keyboardHeight);
+                    }
+                }
+            });
         }
+        super.onLayout(changed, l, t, r, b);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
index 52c56e803..4c01ff275 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/SlidingTabView.java
@@ -25,8 +25,8 @@
 
 public class SlidingTabView extends LinearLayout {
 
-    public static interface SlidingTabViewDelegate {
-        public abstract void didSelectTab(int tab);
+    public interface SlidingTabViewDelegate {
+        void didSelectTab(int tab);
     }
 
     private SlidingTabViewDelegate delegate;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
index c62ed5062..e97168ed5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoSeekBarView.java
@@ -30,8 +30,8 @@
     private boolean pressed = false;
     public SeekBarDelegate delegate;
 
-    public abstract interface SeekBarDelegate {
-        public void onSeekBarDrag(float progress);
+    public interface SeekBarDelegate {
+        void onSeekBarDrag(float progress);
     }
 
     private void init(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
index 33740781a..74da7e49f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/VideoTimelineView.java
@@ -48,9 +48,9 @@
     private int framesToLoad = 0;
     private Drawable pickDrawable = null;
 
-    public abstract interface VideoTimelineViewDelegate {
-        public void onLeftProgressChanged(float progress);
-        public void onRifhtProgressChanged(float progress);
+    public interface VideoTimelineViewDelegate {
+        void onLeftProgressChanged(float progress);
+        void onRifhtProgressChanged(float progress);
     }
 
     private void init(Context context) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index b41814bdd..288690a30 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -74,6 +74,9 @@ public boolean onFragmentCreate() {
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
+        if (avatarImage != null) {
+            avatarImage.setImageDrawable(null);
+        }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
index 6720dce7b..3dff4d25a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactsActivity.java
@@ -73,8 +73,8 @@
     private boolean allowUsernameSearch = true;
     private ContactsActivityDelegate delegate;
 
-    public static interface ContactsActivityDelegate {
-        public abstract void didSelectContact(TLRPC.User user, String param);
+    public interface ContactsActivityDelegate {
+        void didSelectContact(TLRPC.User user, String param);
     }
 
     public ContactsActivity(Bundle args) {
@@ -154,7 +154,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public void onSearchCollapse() {
+                public boolean onSearchCollapse() {
                     searchListViewAdapter.searchDialogs(null);
                     searching = false;
                     searchWas = false;
@@ -166,6 +166,7 @@ public void onSearchCollapse() {
                     listView.setFastScrollEnabled(true);
                     listView.setVerticalScrollBarEnabled(false);
                     emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                    return true;
                 }
 
                 @Override
@@ -416,13 +417,13 @@ private void didSelectResult(final TLRPC.User user, boolean useAlert, String par
             editText.setInputType(InputType.TYPE_CLASS_NUMBER);
             editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
             builder.setView(editText);
-            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                 @Override
                 public void onClick(DialogInterface dialogInterface, int i) {
                     didSelectResult(user, false, editText.getText().toString());
                 }
             });
-            builder.setNegativeButton(R.string.Cancel, null);
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
             showAlertDialog(builder);
             ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
             if (layoutParams != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 3b48f411e..414f93456 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -36,8 +36,8 @@
 
 public class CountrySelectActivity extends BaseFragment {
 
-    public static interface CountrySelectActivityDelegate {
-        public abstract void didSelectCountry(String name);
+    public interface CountrySelectActivityDelegate {
+        void didSelectCountry(String name);
     }
 
     private LetterSectionsListView listView;
@@ -84,7 +84,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public void onSearchCollapse() {
+                public boolean onSearchCollapse() {
                     searchListViewAdapter.search(null);
                     searching = false;
                     searchWas = false;
@@ -96,6 +96,8 @@ public void onSearchCollapse() {
                     listView.setVerticalScrollBarEnabled(false);
 
                     emptyTextView.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+
+                    return true;
                 }
 
                 @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
index b2229753d..1d7cc0920 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DocumentSelectActivity.java
@@ -51,9 +51,9 @@
 
 public class DocumentSelectActivity extends BaseFragment {
 
-    public static abstract interface DocumentSelectActivityDelegate {
-        public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
-        public void startDocumentSelectActivity();
+    public interface DocumentSelectActivityDelegate {
+        void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files);
+        void startDocumentSelectActivity();
     }
 
     private ListView listView;
@@ -487,7 +487,7 @@ private void showErrorBox(String error) {
         if (getParentActivity() == null) {
             return;
         }
-        new AlertDialog.Builder(getParentActivity()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(R.string.OK, null).show();
+        new AlertDialog.Builder(getParentActivity()).setTitle(LocaleController.getString("AppName", R.string.AppName)).setMessage(error).setPositiveButton(LocaleController.getString("OK", R.string.OK), null).show();
     }
 
     private void listRoots() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index 02ee365c1..38d2ae1f2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -61,8 +61,8 @@
 
 public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    public static interface GroupCreateActivityDelegate {
-        public abstract void didSelectUsers(ArrayList<Integer> ids);
+    public interface GroupCreateActivityDelegate {
+        void didSelectUsers(ArrayList<Integer> ids);
     }
 
     private class XImageSpan extends ImageSpan {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
index e73f58576..0ff48eb81 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LanguageSelectActivity.java
@@ -78,7 +78,7 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public void onSearchCollapse() {
+                public boolean onSearchCollapse() {
                     search(null);
                     searching = false;
                     searchWas = false;
@@ -86,6 +86,8 @@ public void onSearchCollapse() {
                         emptyTextView.setVisibility(View.GONE);
                         listView.setAdapter(listAdapter);
                     }
+
+                    return true;
                 }
 
                 @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
index a80b2d774..db8badfc5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LastSeenUsersActivity.java
@@ -40,8 +40,8 @@
 
 public class LastSeenUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    public static interface LastSeenUsersActivityDelegate {
-        public abstract void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
+    public interface LastSeenUsersActivityDelegate {
+        void didUpdatedUserList(ArrayList<Integer> ids, boolean added);
     }
 
     private ListView listView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 5644def4c..9d6f0a446 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -345,14 +345,14 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
         if (actionBarLayout.fragmentsStack.isEmpty()) {
             if (!UserConfig.isClientActivated() && !UserConfig.isWaitingForPasswordEnter()) {
                 actionBarLayout.addFragmentToStack(new LoginActivity());
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, false);
             } else {
                 if (UserConfig.isWaitingForPasswordEnter()) {
                     actionBarLayout.addFragmentToStack(new AccountPasswordActivity(1));
-                    drawerLayoutContainer.setAllowOpenDrawer(false);
+                    drawerLayoutContainer.setAllowOpenDrawer(false, false);
                 } else {
                     actionBarLayout.addFragmentToStack(new MessagesActivity(null));
-                    drawerLayoutContainer.setAllowOpenDrawer(true);
+                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
                 }
             }
 
@@ -414,7 +414,7 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
             if (actionBarLayout.fragmentsStack.size() == 1 && (actionBarLayout.fragmentsStack.get(0) instanceof LoginActivity || actionBarLayout.fragmentsStack.get(0) instanceof AccountPasswordActivity)) {
                 allowOpen = false;
             }
-            drawerLayoutContainer.setAllowOpenDrawer(allowOpen);
+            drawerLayoutContainer.setAllowOpenDrawer(allowOpen, false);
         }
 
         handleIntent(getIntent(), false, savedInstanceState != null, false);
@@ -431,7 +431,7 @@ private void showPasscodeActivity() {
         }
         passcodeView.onShow();
         UserConfig.isWaitingForPasscodeEnter = true;
-        drawerLayoutContainer.setAllowOpenDrawer(false);
+        drawerLayoutContainer.setAllowOpenDrawer(false, false);
         passcodeView.setDelegate(new PasscodeView.PasscodeViewDelegate() {
             @Override
             public void didAcceptedPassword() {
@@ -440,7 +440,7 @@ public void didAcceptedPassword() {
                     handleIntent(passcodeSaveIntent, passcodeSaveIntentIsNew, passcodeSaveIntentIsRestore, true);
                     passcodeSaveIntent = null;
                 }
-                drawerLayoutContainer.setAllowOpenDrawer(true);
+                drawerLayoutContainer.setAllowOpenDrawer(true, false);
                 actionBarLayout.showLastFragment();
                 if (AndroidUtilities.isTablet()) {
                     layersActionBarLayout.showLastFragment();
@@ -847,10 +847,10 @@ public void onClick(DialogInterface dialog, int which) {
                     actionBarLayout.showLastFragment();
                     rightActionBarLayout.showLastFragment();
                 }
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, false);
             } else if (open_settings != 0) {
                 actionBarLayout.presentFragment(new SettingsActivity(), false, true, true);
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, false);
                 if (AndroidUtilities.isTablet()) {
                     actionBarLayout.showLastFragment();
                     rightActionBarLayout.showLastFragment();
@@ -863,16 +863,16 @@ public void onClick(DialogInterface dialog, int which) {
                     if (!UserConfig.isClientActivated() && !UserConfig.isWaitingForPasswordEnter()) {
                         if (layersActionBarLayout.fragmentsStack.isEmpty()) {
                             layersActionBarLayout.addFragmentToStack(new LoginActivity());
-                            drawerLayoutContainer.setAllowOpenDrawer(false);
+                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         }
                     } else {
                         if (actionBarLayout.fragmentsStack.isEmpty()) {
                             if (UserConfig.isWaitingForPasswordEnter()) {
                                 layersActionBarLayout.addFragmentToStack(new AccountPasswordActivity(1));
-                                drawerLayoutContainer.setAllowOpenDrawer(false);
+                                drawerLayoutContainer.setAllowOpenDrawer(false, false);
                             } else {
                                 actionBarLayout.addFragmentToStack(new MessagesActivity(null));
-                                drawerLayoutContainer.setAllowOpenDrawer(true);
+                                drawerLayoutContainer.setAllowOpenDrawer(true, false);
                             }
                         }
                     }
@@ -880,14 +880,14 @@ public void onClick(DialogInterface dialog, int which) {
                     if (actionBarLayout.fragmentsStack.isEmpty()) {
                         if (!UserConfig.isClientActivated() && !UserConfig.isWaitingForPasswordEnter()) {
                             actionBarLayout.addFragmentToStack(new LoginActivity());
-                            drawerLayoutContainer.setAllowOpenDrawer(false);
+                            drawerLayoutContainer.setAllowOpenDrawer(false, false);
                         } else {
                             if (UserConfig.isWaitingForPasswordEnter()) {
                                 actionBarLayout.addFragmentToStack(new AccountPasswordActivity(1));
-                                drawerLayoutContainer.setAllowOpenDrawer(false);
+                                drawerLayoutContainer.setAllowOpenDrawer(false, false);
                             } else {
                                 actionBarLayout.addFragmentToStack(new MessagesActivity(null));
-                                drawerLayoutContainer.setAllowOpenDrawer(true);
+                                drawerLayoutContainer.setAllowOpenDrawer(true, false);
                             }
                         }
                     }
@@ -954,7 +954,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                     }
                 } else {
                     actionBarLayout.presentFragment(fragment, true);
-                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id, null);
                 }
             } else {
                 actionBarLayout.presentFragment(fragment, true);
@@ -963,14 +963,14 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
                     fragment.processSendingText(sendingText);
                 }
                 if (photoPathsArray != null) {
-                    SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id);
+                    SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id, null);
                 }
                 if (documentsPathsArray != null || documentsUrisArray != null) {
-                    SendMessagesHelper.prepareSendingDocuments(documentsPathsArray, documentsOriginalPathsArray, documentsUrisArray, documentsMimeType, dialog_id);
+                    SendMessagesHelper.prepareSendingDocuments(documentsPathsArray, documentsOriginalPathsArray, documentsUrisArray, documentsMimeType, dialog_id, null);
                 }
                 if (contactsToSend != null && !contactsToSend.isEmpty()) {
                     for (TLRPC.User user : contactsToSend) {
-                        SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
+                        SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null);
                     }
                 }
             }
@@ -1227,14 +1227,14 @@ public void didReceivedNotification(int id, Object... args) {
                 rightActionBarLayout.closeLastFragment(false);
                 actionBarLayout.closeLastFragment(false);
                 layersActionBarLayout.presentFragment(new AccountPasswordActivity(1), false, true, true);
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, false);
             } else {
                 for (int a = 0; a < actionBarLayout.fragmentsStack.size() - 1; a++) {
                     actionBarLayout.removeFragmentFromStack(actionBarLayout.fragmentsStack.get(0));
                     a--;
                 }
                 actionBarLayout.presentFragment(new AccountPasswordActivity(1), true);
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, false);
             }
         } else if (id == NotificationCenter.screenStateChanged) {
             if (!ApplicationLoader.mainInterfacePaused) {
@@ -1448,15 +1448,15 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
     @Override
     public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof AccountPasswordActivity) && !(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof AccountPasswordActivity) && !(fragment instanceof LoginActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
                     layersActionBarLayout.removeAllFragments();
                     layersActionBarLayout.setVisibility(View.GONE);
-                    drawerLayoutContainer.setAllowOpenDrawer(true);
+                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
                     if (!tabletFullSize) {
                         shadowTabletSide.setVisibility(View.VISIBLE);
                         if (rightActionBarLayout.fragmentsStack.isEmpty()) {
@@ -1516,7 +1516,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
                 }
             } else if (layout != layersActionBarLayout) {
                 layersActionBarLayout.setVisibility(View.VISIBLE);
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, true);
                 if (fragment instanceof LoginActivity || fragment instanceof AccountPasswordActivity) {
                     backgroundTablet.setVisibility(View.VISIBLE);
                     shadowTabletSide.setVisibility(View.GONE);
@@ -1529,7 +1529,7 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity));
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity), false);
             return true;
         }
     }
@@ -1537,15 +1537,15 @@ public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, bo
     @Override
     public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
         if (AndroidUtilities.isTablet()) {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE);
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity) && layersActionBarLayout.getVisibility() != View.VISIBLE, true);
             if (fragment instanceof MessagesActivity) {
                 MessagesActivity messagesActivity = (MessagesActivity)fragment;
-                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                if (messagesActivity.isMainDialogList() && layout != actionBarLayout) {
                     actionBarLayout.removeAllFragments();
                     actionBarLayout.addFragmentToStack(fragment);
                     layersActionBarLayout.removeAllFragments();
                     layersActionBarLayout.setVisibility(View.GONE);
-                    drawerLayoutContainer.setAllowOpenDrawer(true);
+                    drawerLayoutContainer.setAllowOpenDrawer(true, false);
                     if (!tabletFullSize) {
                         shadowTabletSide.setVisibility(View.VISIBLE);
                         if (rightActionBarLayout.fragmentsStack.isEmpty()) {
@@ -1581,7 +1581,7 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
                 }
             } else if (layout != layersActionBarLayout) {
                 layersActionBarLayout.setVisibility(View.VISIBLE);
-                drawerLayoutContainer.setAllowOpenDrawer(false);
+                drawerLayoutContainer.setAllowOpenDrawer(false, true);
                 if (fragment instanceof LoginActivity || fragment instanceof AccountPasswordActivity) {
                     backgroundTablet.setVisibility(View.VISIBLE);
                     shadowTabletSide.setVisibility(View.GONE);
@@ -1594,7 +1594,7 @@ public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout lay
             }
             return true;
         } else {
-            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity));
+            drawerLayoutContainer.setAllowOpenDrawer(!(fragment instanceof LoginActivity) && !(fragment instanceof AccountPasswordActivity), false);
             return true;
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index c3efdf404..e9c476fee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -65,8 +65,8 @@
     private final static int map_list_menu_satellite = 3;
     private final static int map_list_menu_hybrid = 4;
 
-    public static interface LocationActivityDelegate {
-        public abstract void didSelectLocation(double latitude, double longitude);
+    public interface LocationActivityDelegate {
+        void didSelectLocation(double latitude, double longitude);
     }
 
     @Override
@@ -88,6 +88,9 @@ public void onFragmentDestroy() {
         if (mapView != null) {
             mapView.onDestroy();
         }
+        if (avatarImageView != null) {
+            avatarImageView.setImageDrawable(null);
+        }
     }
 
     @Override
@@ -268,7 +271,7 @@ private Location getLastLocation() {
     private void updateUserData() {
         if (messageObject != null && avatarImageView != null) {
             int fromId = messageObject.messageOwner.from_id;
-            if (messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+            if (messageObject.isForwarded()) {
                 fromId = messageObject.messageOwner.fwd_from_id;
             }
             TLRPC.User user = MessagesController.getInstance().getUser(fromId);
@@ -279,6 +282,8 @@ private void updateUserData() {
                 }
                 avatarImageView.setImage(photo, null, new AvatarDrawable(user));
                 nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            } else {
+                avatarImageView.setImageDrawable(null);
             }
         }
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
index 4b328481e..a34f7e354 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MediaActivity.java
@@ -41,7 +41,6 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
-import org.telegram.android.SendMessagesHelper;
 import org.telegram.android.query.SharedMediaQuery;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
@@ -118,7 +117,7 @@
         private int max_id;
 
         public boolean addMessage(MessageObject messageObject, boolean isNew, boolean enc) {
-            if (messagesDict.containsKey(messageObject.messageOwner.id)) {
+            if (messagesDict.containsKey(messageObject.getId())) {
                 return false;
             }
             ArrayList<MessageObject> messageObjects = sectionArrays.get(messageObject.monthKey);
@@ -138,13 +137,13 @@ public boolean addMessage(MessageObject messageObject, boolean isNew, boolean en
                 messageObjects.add(messageObject);
                 messages.add(messageObject);
             }
-            messagesDict.put(messageObject.messageOwner.id, messageObject);
+            messagesDict.put(messageObject.getId(), messageObject);
             if (!enc) {
-                if (messageObject.messageOwner.id > 0) {
-                    max_id = Math.min(messageObject.messageOwner.id, max_id);
+                if (messageObject.getId() > 0) {
+                    max_id = Math.min(messageObject.getId(), max_id);
                 }
             } else {
-                max_id = Math.max(messageObject.messageOwner.id, max_id);
+                max_id = Math.max(messageObject.getId(), max_id);
             }
             return true;
         }
@@ -160,7 +159,7 @@ public boolean deleteMessage(int mid) {
             }
             messageObjects.remove(messageObject);
             messages.remove(messageObject);
-            messagesDict.remove(messageObject.messageOwner.id);
+            messagesDict.remove(messageObject.getId());
             if (messageObjects.isEmpty()) {
                 sectionArrays.remove(messageObject.monthKey);
                 sections.remove(messageObject.monthKey);
@@ -285,8 +284,6 @@ public void onClick(DialogInterface dialogInterface, int i) {
                         Bundle args = new Bundle();
                         args.putBoolean("onlySelect", true);
                         args.putBoolean("serverOnly", true);
-                        args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
-                        args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
                         MessagesActivity fragment = new MessagesActivity(args);
                         fragment.setDelegate(new MessagesActivity.MessagesActivityDelegate() {
                             @Override
@@ -301,11 +298,12 @@ public void didSelectDialog(MessagesActivity fragment, long did, boolean param)
                                         args.putInt("chat_id", -lower_part);
                                     }
 
+                                    ArrayList<MessageObject> fmessages = new ArrayList<>();
                                     ArrayList<Integer> ids = new ArrayList<>(selectedFiles.keySet());
                                     Collections.sort(ids);
                                     for (Integer id : ids) {
                                         if (id > 0) {
-                                            SendMessagesHelper.getInstance().sendMessage(selectedFiles.get(id), did);
+                                            fmessages.add(selectedFiles.get(id));
                                         }
                                     }
                                     selectedFiles.clear();
@@ -314,6 +312,7 @@ public void didSelectDialog(MessagesActivity fragment, long did, boolean param)
                                     NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
                                     ChatActivity chatActivity = new ChatActivity(args);
                                     presentFragment(chatActivity, true);
+                                    chatActivity.showReplyForMessageObjectOrForward(true, null, fmessages, false);
 
                                     if (!AndroidUtilities.isTablet()) {
                                         removeSelfFromStack();
@@ -347,12 +346,14 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public void onSearchCollapse() {
+                public boolean onSearchCollapse() {
                     dropDownContainer.setVisibility(View.VISIBLE);
                     documentsSearchAdapter.searchDocuments(null);
                     searching = false;
                     searchWas = false;
                     switchToCurrentSelectedMode();
+
+                    return true;
                 }
 
                 @Override
@@ -734,7 +735,7 @@ public void updatePhotoAtIndex(int index) {
                         break;
                     }
                     BackupImageView imageView = cell.getImageView(i);
-                    if (message.messageOwner.id == messageObject.messageOwner.id) {
+                    if (message.getId() == messageObject.getId()) {
                         int coords[] = new int[2];
                         imageView.getLocationInWindow(coords);
                         PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
@@ -836,7 +837,7 @@ private boolean onItemLongClick(MessageObject item, View view, int a) {
         if (actionBar.isActionModeShowed()) {
             return false;
         }
-        selectedFiles.put(item.messageOwner.id, item);
+        selectedFiles.put(item.getId(), item);
         selectedMessagesCountTextView.setText(String.format("%d", selectedFiles.size()));
         if (Build.VERSION.SDK_INT >= 11) {
             AnimatorSetProxy animatorSet = new AnimatorSetProxy();
@@ -869,10 +870,10 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
             return;
         }
         if (actionBar.isActionModeShowed()) {
-            if (selectedFiles.containsKey(message.messageOwner.id)) {
-                selectedFiles.remove(message.messageOwner.id);
+            if (selectedFiles.containsKey(message.getId())) {
+                selectedFiles.remove(message.getId());
             } else {
-                selectedFiles.put(message.messageOwner.id, message);
+                selectedFiles.put(message.getId(), message);
             }
             if (selectedFiles.isEmpty()) {
                 actionBar.hideActionMode();
@@ -881,9 +882,9 @@ private void onItemClick(int index, View view, MessageObject message, int a) {
             }
             scrolling = false;
             if (view instanceof SharedDocumentCell) {
-                ((SharedDocumentCell) view).setChecked(selectedFiles.containsKey(message.messageOwner.id), true);
+                ((SharedDocumentCell) view).setChecked(selectedFiles.containsKey(message.getId()), true);
             } else if (view instanceof SharedPhotoVideoCell) {
-                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles.containsKey(message.messageOwner.id), true);
+                ((SharedPhotoVideoCell) view).setChecked(a, selectedFiles.containsKey(message.getId()), true);
             }
         } else {
             if (selectedMode == 0) {
@@ -1056,7 +1057,7 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
                     MessageObject messageObject = messageObjects.get(position - 1);
                     sharedDocumentCell.setDocument(messageObject, position != messageObjects.size() || section == sharedMediaData[1].sections.size() - 1 && sharedMediaData[1].loading);
                     if (actionBar.isActionModeShowed()) {
-                        sharedDocumentCell.setChecked(selectedFiles.containsKey(messageObject.messageOwner.id), !scrolling);
+                        sharedDocumentCell.setChecked(selectedFiles.containsKey(messageObject.getId()), !scrolling);
                     } else {
                         sharedDocumentCell.setChecked(false, !scrolling);
                     }
@@ -1176,7 +1177,7 @@ public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObj
                             cell.setItem(a, sharedMediaData[0].messages.indexOf(messageObject), messageObject);
 
                             if (actionBar.isActionModeShowed()) {
-                                cell.setChecked(a, selectedFiles.containsKey(messageObject.messageOwner.id), !scrolling);
+                                cell.setChecked(a, selectedFiles.containsKey(messageObject.getId()), !scrolling);
                             } else {
                                 cell.setChecked(a, false, !scrolling);
                             }
@@ -1184,6 +1185,7 @@ public boolean didLongClickItem(SharedPhotoVideoCell cell, int index, MessageObj
                             cell.setItem(a, index, null);
                         }
                     }
+                    cell.requestLayout();
                 }
             } else {
                 if (convertView == null) {
@@ -1317,7 +1319,7 @@ private void processSearch(final String query) {
                 public void run() {
                     if (!sharedMediaData[1].messages.isEmpty()) {
                         MessageObject messageObject = sharedMediaData[1].messages.get(sharedMediaData[1].messages.size() - 1);
-                        queryServerSearch(query, messageObject.messageOwner.id);
+                        queryServerSearch(query, messageObject.getId());
                     }
                     final ArrayList<MessageObject> copy = new ArrayList<>();
                     copy.addAll(sharedMediaData[1].messages);
@@ -1431,7 +1433,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             MessageObject messageObject = getItem(i);
             sharedDocumentCell.setDocument(messageObject, i != getCount() - 1);
             if (actionBar.isActionModeShowed()) {
-                sharedDocumentCell.setChecked(selectedFiles.containsKey(messageObject.messageOwner.id), !scrolling);
+                sharedDocumentCell.setChecked(selectedFiles.containsKey(messageObject.getId()), !scrolling);
             } else {
                 sharedDocumentCell.setChecked(false, !scrolling);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index 21bba0e4d..a504bbd4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -83,6 +83,7 @@
     private boolean searchWas = false;
     private boolean onlySelect = false;
     private long selectedDialog;
+    private String searchString;
 
     private MessagesActivityDelegate delegate;
 
@@ -90,8 +91,8 @@
 
     private static final int passcode_menu_item = 1;
 
-    public static interface MessagesActivityDelegate {
-        public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
+    public interface MessagesActivityDelegate {
+        void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
     }
 
     public MessagesActivity(Bundle args) {
@@ -101,18 +102,6 @@ public MessagesActivity(Bundle args) {
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
 
         if (getArguments() != null) {
             onlySelect = arguments.getBoolean("onlySelect", false);
@@ -120,6 +109,23 @@ public boolean onFragmentCreate() {
             selectAlertString = arguments.getString("selectAlertString");
             selectAlertStringGroup = arguments.getString("selectAlertStringGroup");
         }
+
+        if (searchString == null) {
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.didSetPasscode);
+        }
+
+
         if (!dialogsLoaded) {
             MessagesController.getInstance().loadDialogs(0, 0, 100, true);
             ContactsController.getInstance().checkInviteText();
@@ -131,18 +137,20 @@ public boolean onFragmentCreate() {
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
-        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
+        if (searchString == null) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didSetPasscode);
+        }
         delegate = null;
     }
 
@@ -153,7 +161,7 @@ public View createView(LayoutInflater inflater) {
             searchWas = false;
 
             ActionBarMenu menu = actionBar.createMenu();
-            if (!onlySelect) {
+            if (!onlySelect && searchString == null) {
                 passcodeItem = menu.addItem(passcode_menu_item, R.drawable.lock_close);
                 updatePasscodeButton();
             }
@@ -162,9 +170,14 @@ public View createView(LayoutInflater inflater) {
                 public void onSearchExpand() {
                     searching = true;
                     if (messagesListView != null) {
-                        messagesListView.setEmptyView(searchEmptyView);
+                        if (searchString != null) {
+                            messagesListView.setEmptyView(progressView);
+                            searchEmptyView.setVisibility(View.INVISIBLE);
+                        } else {
+                            messagesListView.setEmptyView(searchEmptyView);
+                            progressView.setVisibility(View.INVISIBLE);
+                        }
                         emptyView.setVisibility(View.INVISIBLE);
-                        progressView.setVisibility(View.INVISIBLE);
                         if (!onlySelect) {
                             floatingButton.setVisibility(View.GONE);
                         }
@@ -173,7 +186,11 @@ public void onSearchExpand() {
                 }
 
                 @Override
-                public void onSearchCollapse() {
+                public boolean onSearchCollapse() {
+                    if (searchString != null) {
+                        finishFragment();
+                        return false;
+                    }
                     searching = false;
                     searchWas = false;
                     if (messagesListView != null) {
@@ -202,6 +219,7 @@ public void onSearchCollapse() {
                         dialogsSearchAdapter.searchDialogs(null, false);
                     }
                     updatePasscodeButton();
+                    return true;
                 }
 
                 @Override
@@ -229,7 +247,11 @@ public void onTextChanged(EditText editText) {
                 actionBar.setBackButtonImage(R.drawable.ic_ab_back);
                 actionBar.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
             } else {
-                actionBar.setBackButtonDrawable(new MenuDrawable());
+                if (searchString != null) {
+                    actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+                } else {
+                    actionBar.setBackButtonDrawable(new MenuDrawable());
+                }
                 actionBar.setTitle(LocaleController.getString("AppName", R.string.AppName));
             }
             actionBar.setAllowOverlayTitle(true);
@@ -253,11 +275,19 @@ public void onItemClick(int id) {
 
             fragmentView = inflater.inflate(R.layout.messages_list, null, false);
 
-            dialogsAdapter = new DialogsAdapter(getParentActivity(), serverOnly);
-            if (AndroidUtilities.isTablet() && openedDialogId != 0) {
-                dialogsAdapter.setOpenedDialogId(openedDialogId);
+            if (searchString == null) {
+                dialogsAdapter = new DialogsAdapter(getParentActivity(), serverOnly);
+                if (AndroidUtilities.isTablet() && openedDialogId != 0) {
+                    dialogsAdapter.setOpenedDialogId(openedDialogId);
+                }
+            }
+            int type = 0;
+            if (searchString != null) {
+                type = 2;
+            } else if (!onlySelect) {
+                type = 1;
             }
-            dialogsSearchAdapter = new DialogsSearchAdapter(getParentActivity(), !onlySelect);
+            dialogsSearchAdapter = new DialogsSearchAdapter(getParentActivity(), type);
             dialogsSearchAdapter.setDelegate(new DialogsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
                 @Override
                 public void searchStateChanged(boolean search) {
@@ -270,13 +300,14 @@ public void searchStateChanged(boolean search) {
             });
 
             messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
-            messagesListView.setAdapter(dialogsAdapter);
+            if (dialogsAdapter != null) {
+                messagesListView.setAdapter(dialogsAdapter);
+            }
             if (Build.VERSION.SDK_INT >= 11) {
                 messagesListView.setVerticalScrollbarPosition(LocaleController.isRTL ? ListView.SCROLLBAR_POSITION_LEFT : ListView.SCROLLBAR_POSITION_RIGHT);
             }
 
             progressView = fragmentView.findViewById(R.id.progressLayout);
-            dialogsAdapter.notifyDataSetChanged();
             searchEmptyView = fragmentView.findViewById(R.id.search_empty_view);
             searchEmptyView.setOnTouchListener(new View.OnTouchListener() {
                 @Override
@@ -296,7 +327,11 @@ public boolean onTouch(View v, MotionEvent event) {
             TextView textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text1);
             textView.setText(LocaleController.getString("NoChats", R.string.NoChats));
             textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text2);
-            textView.setText(LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp));
+            String help = LocaleController.getString("NoChatsHelp", R.string.NoChatsHelp);
+            if (AndroidUtilities.isTablet() && !AndroidUtilities.isSmallTablet()) {
+                help = help.replace("\n", " ");
+            }
+            textView.setText(help);
             textView = (TextView)fragmentView.findViewById(R.id.search_empty_text);
             textView.setText(LocaleController.getString("NoResult", R.string.NoResult));
 
@@ -375,7 +410,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         } else if (obj instanceof MessageObject) {
                             MessageObject messageObject = (MessageObject)obj;
                             dialog_id = messageObject.getDialogId();
-                            message_id = messageObject.messageOwner.id;
+                            message_id = messageObject.getId();
                         }
                     }
 
@@ -413,10 +448,17 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             if (openedDialogId == dialog_id) {
                                 return;
                             }
-                            dialogsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
-                            updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
+                            if (dialogsAdapter != null) {
+                                dialogsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
+                                updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
+                            }
+                        }
+                        if (searchString != null) {
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            presentFragment(new ChatActivity(args));
+                        } else {
+                            presentFragment(new ChatActivity(args));
                         }
-                        presentFragment(new ChatActivity(args));
                     }
                 }
             });
@@ -533,6 +575,10 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
                     }
                 }
             });
+
+            if (searchString != null) {
+                actionBar.openSearchField(searchString);
+            }
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
             if (parent != null) {
@@ -703,8 +749,12 @@ public void setDelegate(MessagesActivityDelegate delegate) {
         this.delegate = delegate;
     }
 
-    public MessagesActivityDelegate getDelegate() {
-        return delegate;
+    public void setSearchString(String string) {
+        searchString = string;
+    }
+
+    public boolean isMainDialogList() {
+        return delegate == null && searchString == null;
     }
 
     private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
@@ -754,13 +804,13 @@ private void didSelectResult(final long dialog_id, boolean useAlert, final boole
                 builder.setView(checkBox);
             }*/
             final CheckBox checkBoxFinal = checkBox;
-            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                 @Override
                 public void onClick(DialogInterface dialogInterface, int i) {
                     didSelectResult(dialog_id, false, checkBoxFinal != null && checkBoxFinal.isChecked());
                 }
             });
-            builder.setNegativeButton(R.string.Cancel, null);
+            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
             showAlertDialog(builder);
             if (checkBox != null) {
                 ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)checkBox.getLayoutParams();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
index b35674fda..64d5befe8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/NotificationsSettingsActivity.java
@@ -382,7 +382,7 @@ public void onClick(DialogInterface dialogInterface, int which) {
                                 listView.invalidateViews();
                             }
                         });
-                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                        builder.setNeutralButton(LocaleController.getString("LedDisabled", R.string.LedDisabled), new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int which) {
                                 final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
@@ -427,7 +427,7 @@ public void onClick(DialogInterface dialog, int which) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
                         builder.setItems(new CharSequence[] {
-                                LocaleController.getString("Disabled", R.string.Disabled),
+                                LocaleController.getString("VibrationDisabled", R.string.VibrationDisabled),
                                 LocaleController.getString("Default", R.string.Default),
                                 LocaleController.getString("Short", R.string.Short),
                                 LocaleController.getString("Long", R.string.Long)
@@ -484,7 +484,7 @@ public void onClick(DialogInterface dialog, int which) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                         builder.setTitle(LocaleController.getString("RepeatNotifications", R.string.RepeatNotifications));
                         builder.setItems(new CharSequence[] {
-                                LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever),
+                                LocaleController.getString("RepeatDisabled", R.string.RepeatDisabled),
                                 LocaleController.formatPluralString("Minutes", 5),
                                 LocaleController.formatPluralString("Minutes", 10),
                                 LocaleController.formatPluralString("Minutes", 30),
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
index 96c5cac9d..17f068e09 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoAlbumPickerActivity.java
@@ -45,10 +45,9 @@
 
 public class PhotoAlbumPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
 
-    public static interface PhotoAlbumPickerActivityDelegate {
-        public abstract void didSelectPhotos(ArrayList<String> photos);
-        public abstract void didSelectWebPhotos(ArrayList<MediaController.SearchImage> photos);
-        public abstract void startPhotoSelectActivity();
+    public interface PhotoAlbumPickerActivityDelegate {
+        void didSelectPhotos(ArrayList<String> photos, ArrayList<MediaController.SearchImage> webPhotos);
+        void startPhotoSelectActivity();
     }
 
     private ArrayList<MediaController.AlbumEntry> albumsSorted = null;
@@ -332,8 +331,7 @@ private void sendSelectedPhotos() {
             MessagesStorage.getInstance().putWebRecent(recentGifImages);
         }
 
-        delegate.didSelectPhotos(photos);
-        delegate.didSelectWebPhotos(webPhotos);
+        delegate.didSelectPhotos(photos, webPhotos);
     }
 
     private void fixLayout() {
@@ -466,6 +464,7 @@ public void didSelectAlbum(MediaController.AlbumEntry albumEntry) {
                         photoPickerAlbumsCell.setAlbum(a, null);
                     }
                 }
+                photoPickerAlbumsCell.requestLayout();
             } else if (type == 1) {
                 if (view == null) {
                     view = new PhotoPickerSearchCell(mContext);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
index 26a04b4e0..43e856ee3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoCropActivity.java
@@ -36,7 +36,7 @@
 public class PhotoCropActivity extends BaseFragment {
 
     public interface PhotoEditActivityDelegate {
-        public abstract void didFinishEdit(Bitmap bitmap, Bundle args);
+        void didFinishEdit(Bitmap bitmap, Bundle args);
     }
 
     private class PhotoCropView extends FrameLayout {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
index ccaef1c03..6d77c85b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoPickerActivity.java
@@ -67,9 +67,9 @@
 
 public class PhotoPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
 
-    public static interface PhotoPickerActivityDelegate {
-        public abstract void selectedPhotosChanged();
-        public abstract void actionButtonPressed(boolean canceled);
+    public interface PhotoPickerActivityDelegate {
+        void selectedPhotosChanged();
+        void actionButtonPressed(boolean canceled);
     }
 
     private RequestQueue requestQueue;
@@ -175,8 +175,9 @@ public void onSearchExpand() {
                     }
 
                     @Override
-                    public void onSearchCollapse() {
+                    public boolean onSearchCollapse() {
                         finishFragment();
+                        return false;
                     }
 
                     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 4cf2e10aa..c44ed6e47 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -405,26 +405,26 @@ public void updatePhotoAtIndex(int index) {
         }
     }
 
-    public static interface PhotoViewerProvider {
-        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+    public interface PhotoViewerProvider {
+        PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
 
-        public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
 
-        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
 
-        public void willHidePhotoViewer();
+        void willHidePhotoViewer();
 
-        public boolean isPhotoChecked(int index);
+        boolean isPhotoChecked(int index);
 
-        public void setPhotoChecked(int index);
+        void setPhotoChecked(int index);
 
-        public void cancelButtonPressed();
+        void cancelButtonPressed();
 
-        public void sendButtonPressed(int index);
+        void sendButtonPressed(int index);
 
-        public int getSelectedCount();
+        int getSelectedCount();
 
-        public void updatePhotoAtIndex(int index);
+        void updatePhotoAtIndex(int index);
     }
 
     private class FrameLayoutTouchListener extends FrameLayout {
@@ -593,18 +593,18 @@ public void didReceivedNotification(int id, Object... args) {
 
                     int added = 0;
                     for (MessageObject message : arr) {
-                        if (!imagesByIdsTemp.containsKey(message.messageOwner.id)) {
-                            imagesByIdsTemp.put(message.messageOwner.id, message);
+                        if (!imagesByIdsTemp.containsKey(message.getId())) {
+                            imagesByIdsTemp.put(message.getId(), message);
                             if (opennedFromMedia) {
                                 imagesArrTemp.add(message);
-                                if (message.messageOwner.id == currentMessage.messageOwner.id) {
+                                if (message.getId() == currentMessage.getId()) {
                                     foundIndex = added;
                                 }
                                 added++;
                             } else {
                                 added++;
                                 imagesArrTemp.add(0, message);
-                                if (message.messageOwner.id == currentMessage.messageOwner.id) {
+                                if (message.getId() == currentMessage.getId()) {
                                     foundIndex = arr.size() - added;
                                 }
                             }
@@ -631,23 +631,23 @@ public void didReceivedNotification(int id, Object... args) {
                         if (!cacheEndReached || !arr.isEmpty() && added != 0) {
                             loadingMoreImages = true;
                             if (opennedFromMedia) {
-                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(imagesArrTemp.size() - 1).messageOwner.id, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(imagesArrTemp.size() - 1).getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
                             } else {
-                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(0).messageOwner.id, SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
+                                SharedMediaQuery.loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(0).getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, true, classGuid);
                             }
                         }
                     }
                 } else {
                     int added = 0;
                     for (MessageObject message : arr) {
-                        if (!imagesByIds.containsKey(message.messageOwner.id)) {
+                        if (!imagesByIds.containsKey(message.getId())) {
                             added++;
                             if (opennedFromMedia) {
                                 imagesArr.add(message);
                             } else {
                                 imagesArr.add(0, message);
                             }
-                            imagesByIds.put(message.messageOwner.id, message);
+                            imagesByIds.put(message.getId(), message);
                         }
                     }
                     if (arr.isEmpty() && !fromCache) {
@@ -740,7 +740,7 @@ public void onItemClick(int id) {
                     } else {
                         AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(R.string.OK, null);
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                         builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
                         showAlertDialog(builder);
                     }
@@ -812,7 +812,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                 MessageObject obj = imagesArr.get(currentIndex);
                                 if (obj.isSent()) {
                                     ArrayList<Integer> arr = new ArrayList<>();
-                                    arr.add(obj.messageOwner.id);
+                                    arr.add(obj.getId());
 
                                     ArrayList<Long> random_ids = null;
                                     TLRPC.EncryptedChat encryptedChat = null;
@@ -960,7 +960,7 @@ public void onClick(View v) {
                     } else {
                         AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
                         builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                        builder.setPositiveButton(R.string.OK, null);
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                         builder.setMessage(LocaleController.getString("PleaseDownload", R.string.PleaseDownload));
                         showAlertDialog(builder);
                     }
@@ -1802,7 +1802,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             imagesArr.add(messageObject);
             if (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty) {
                 needSearchImageInArr = true;
-                imagesByIds.put(messageObject.messageOwner.id, messageObject);
+                imagesByIds.put(messageObject.getId(), messageObject);
                 if (messageObject.messageOwner.dialog_id != 0) {
                     currentDialogId = messageObject.messageOwner.dialog_id;
                 } else {
@@ -1827,7 +1827,6 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
             imagesArrLocationsSizes.add(object.size);
             avatarsArr.add(new TLRPC.TL_photoEmpty());
             bottomLayout.clearAnimation();
-            bottomLayout.setVisibility(View.GONE);
             shareButton.setVisibility(View.VISIBLE);
             menuItem.hideSubItem(gallery_menu_showall);
             setImageIndex(0, true);
@@ -1841,7 +1840,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
                 index = imagesArr.size() - index - 1;
             }
             for (MessageObject message : imagesArr) {
-                imagesByIds.put(message.messageOwner.id, message);
+                imagesByIds.put(message.getId(), message);
             }
 
             if (messageObject.messageOwner.dialog_id != 0) {
@@ -1937,14 +1936,14 @@ private void setImageIndex(int index, boolean init) {
                 if (opennedFromMedia) {
                     if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex > imagesArr.size() - 5) {
                         MessageObject lastMessage = imagesArr.get(imagesArr.size() - 1);
-                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.messageOwner.id, SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
+                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
                         loadingMoreImages = true;
                     }
                     actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, totalImagesCount));
                 } else {
                     if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex < 5) {
                         MessageObject lastMessage = imagesArr.get(0);
-                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.messageOwner.id, SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
+                        SharedMediaQuery.loadMedia(currentDialogId, 0, 100, lastMessage.getId(), SharedMediaQuery.MEDIA_PHOTOVIDEO, !cacheEndReached, classGuid);
                         loadingMoreImages = true;
                     }
                     actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
@@ -2258,7 +2257,7 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
     }
 
     public boolean isShowingImage(MessageObject object) {
-        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.messageOwner.id == object.messageOwner.id;
+        return isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.getId() == object.getId();
     }
 
     public boolean isShowingImage(TLRPC.FileLocation object) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
index 11c821ec0..ac1aeae09 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PopupNotificationActivity.java
@@ -185,7 +185,7 @@ protected void onCreate(Bundle savedInstanceState) {
         if (chatActivityEnterView != null) {
             chatActivityEnterView.onDestroy();
         }
-        chatActivityEnterView = new ChatActivityEnterView(this, contentView, null, true);
+        chatActivityEnterView = new ChatActivityEnterView(this, contentView, null, false);
         popupContainer.addView(chatActivityEnterView);
         layoutParams3 = (RelativeLayout.LayoutParams) chatActivityEnterView.getLayoutParams();
         layoutParams3.width = RelativeLayout.LayoutParams.MATCH_PARENT;
@@ -201,7 +201,7 @@ public void onMessageSend() {
                 if (currentMessageNum >= 0 && currentMessageNum < NotificationsController.getInstance().popupMessages.size()) {
                     NotificationsController.getInstance().popupMessages.remove(currentMessageNum);
                 }
-                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.messageOwner.id, Math.max(0, currentMessageObject.messageOwner.id), 0, currentMessageObject.messageOwner.date, true, true);
+                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.getId(), Math.max(0, currentMessageObject.getId()), 0, currentMessageObject.messageOwner.date, true, true);
                 currentMessageObject = null;
                 getNewMessage();
             }
@@ -802,7 +802,7 @@ private void getNewMessage() {
         boolean found = false;
         if ((currentMessageNum != 0 || chatActivityEnterView.hasText() || startedMoving) && currentMessageObject != null) {
             for (int a = 0; a < NotificationsController.getInstance().popupMessages.size(); a++) {
-                if (NotificationsController.getInstance().popupMessages.get(a).messageOwner.id == currentMessageObject.messageOwner.id) {
+                if (NotificationsController.getInstance().popupMessages.get(a).getId() == currentMessageObject.getId()) {
                     currentMessageNum = a;
                     found = true;
                     break;
@@ -1032,7 +1032,7 @@ public void didReceivedNotification(int id, Object... args) {
                     View view = messageContainer.getChildAt(a);
                     if ((Integer)view.getTag() == 3) {
                         PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
-                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
                             cell.updateButtonState();
                             break;
                         }
@@ -1047,7 +1047,7 @@ public void didReceivedNotification(int id, Object... args) {
                     View view = messageContainer.getChildAt(a);
                     if ((Integer)view.getTag() == 3) {
                         PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
-                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                        if (cell.getMessageObject() != null && cell.getMessageObject().getId() == mid) {
                             cell.updateProgress();
                             break;
                         }
@@ -1079,6 +1079,9 @@ protected void onDestroy() {
         if (wakeLock.isHeld()) {
             wakeLock.release();
         }
+        if (avatarImageView != null) {
+            avatarImageView.setImageDrawable(null);
+        }
     }
 
     protected void onFinish() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index ec241248f..f2cdcc351 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -208,6 +208,9 @@ public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
+        if (avatarImage != null) {
+            avatarImage.setImageDrawable(null);
+        }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
@@ -1213,7 +1216,7 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, bo
             presentFragment(new ChatActivity(args), true);
             removeSelfFromStack();
             TLRPC.User user = MessagesController.getInstance().getUser(user_id);
-            SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
+            SendMessagesHelper.getInstance().sendMessage(user, dialog_id, null);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
index 9e30daadc..59514828c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileNotificationsActivity.java
@@ -244,7 +244,7 @@ public void onClick(DialogInterface dialogInterface, int which) {
                                 listView.invalidateViews();
                             }
                         });
-                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                        builder.setNeutralButton(LocaleController.getString("LedDisabled", R.string.LedDisabled), new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int which) {
                                 final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
index ef77d39e2..ee5928a7e 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
@@ -176,7 +176,7 @@ public void didReceivedNotification(int id, Object... args) {
                 return;
             }
             ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
-            if (markAsDeletedMessages.contains(currentMessageObject.messageOwner.id)) {
+            if (markAsDeletedMessages.contains(currentMessageObject.getId())) {
                 closePhoto();
             }
         } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
@@ -188,7 +188,7 @@ public void didReceivedNotification(int id, Object... args) {
                 int key = mids.keyAt(i);
                 ArrayList<Integer> arr = mids.get(key);
                 for (Integer mid : arr) {
-                    if (currentMessageObject.messageOwner.id == mid) {
+                    if (currentMessageObject.getId() == mid) {
                         currentMessageObject.messageOwner.destroyTime = key;
                         secretDeleteTimer.invalidate();
                         return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 404b73071..319efe502 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -256,6 +256,9 @@ public void run() {
     @Override
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
+        if (avatarImage != null) {
+            avatarImage.setImageDrawable(null);
+        }
         MessagesController.getInstance().cancelLoadFullUser(UserConfig.getClientUserId());
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         avatarUpdater.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
index 3cf311d2b..440ee7616 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
@@ -43,6 +43,7 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -57,7 +58,7 @@
 import java.util.List;
 
 @TargetApi(16)
-public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener {
+public class VideoEditorActivity extends BaseFragment implements TextureView.SurfaceTextureListener, NotificationCenter.NotificationCenterDelegate {
 
     private boolean created = false;
     private MediaPlayer videoPlayer = null;
@@ -97,7 +98,7 @@
     private long originalSize = 0;
 
     public interface VideoEditorActivityDelegate {
-        public abstract void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration);
+        void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration);
     }
 
     private Runnable progressRunnable = new Runnable() {
@@ -198,6 +199,7 @@ public void onPrepared(MediaPlayer mp) {
             return false;
         }
 
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
         created = true;
 
         return super.onFragmentCreate();
@@ -217,6 +219,7 @@ public void onFragmentDestroy() {
                 FileLog.e("tmessages", e);
             }
         }
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
         super.onFragmentDestroy();
     }
 
@@ -407,6 +410,13 @@ public void onClick(View v) {
         return fragmentView;
     }
 
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
     private void setPlayerSurface() {
         if (textureView == null || !textureView.isAvailable() || videoPlayer == null) {
             return;
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png
new file mode 100755
index 000000000..7d255cf57
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png
new file mode 100755
index 000000000..9103cc6c2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_linear_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png
new file mode 100755
index 000000000..172256dca
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png
new file mode 100755
index 000000000..22124bcf4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_off_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png
new file mode 100755
index 000000000..0e4d1b76e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png
new file mode 100755
index 000000000..73725eea9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/blur_radial_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png
new file mode 100755
index 000000000..213ff5b50
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png
new file mode 100644
index 000000000..36d5c85d6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png
index cfa12ce25..bbe96ec85 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_reply.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_reply.png
new file mode 100755
index 000000000..2d78652e7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/reply.png b/TMessagesProj/src/main/res/drawable-hdpi/reply.png
new file mode 100755
index 000000000..98db79e65
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png
old mode 100644
new mode 100755
index 9612e61aa..65ad2140d
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png and b/TMessagesProj/src/main/res/drawable-hdpi/system_blue.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png
new file mode 100755
index 000000000..c8614ecb9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png
new file mode 100755
index 000000000..06d029c46
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png
new file mode 100755
index 000000000..c3ffe1bef
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_linear_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png
new file mode 100755
index 000000000..424aaa5b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png
new file mode 100755
index 000000000..5dfc12a2b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_off_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png
new file mode 100755
index 000000000..a30d6619b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png
new file mode 100755
index 000000000..a385ca60a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/blur_radial_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png
new file mode 100755
index 000000000..2fd1c1ac9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png
new file mode 100644
index 000000000..7f4ec885e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png
index fe943423e..5a0f86d73 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_reply.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_reply.png
new file mode 100755
index 000000000..a8d829411
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/reply.png b/TMessagesProj/src/main/res/drawable-mdpi/reply.png
new file mode 100755
index 000000000..7d71990f7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png
old mode 100644
new mode 100755
index 40f8cc607..c1ce3b4f6
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png and b/TMessagesProj/src/main/res/drawable-mdpi/system_blue.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png
new file mode 100755
index 000000000..9c0592331
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png
new file mode 100755
index 000000000..94ab2c803
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png
new file mode 100755
index 000000000..a7d39b91c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_linear_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png
new file mode 100755
index 000000000..06001a130
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png
new file mode 100755
index 000000000..c37ef8d8e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_off_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png
new file mode 100755
index 000000000..10caa4fa4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png
new file mode 100755
index 000000000..86585c39a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/blur_radial_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png
new file mode 100755
index 000000000..ce9fd147b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png
new file mode 100644
index 000000000..40af0d3dc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png
index 0957f01c9..519de969b 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_reply.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_reply.png
new file mode 100755
index 000000000..1b6cbc5b4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/reply.png b/TMessagesProj/src/main/res/drawable-xhdpi/reply.png
new file mode 100755
index 000000000..ee23fc6b6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png
old mode 100644
new mode 100755
index 0ff46944a..68c398416
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png and b/TMessagesProj/src/main/res/drawable-xhdpi/system_blue.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png
new file mode 100755
index 000000000..81511a35a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png
new file mode 100755
index 000000000..7a9a7d59d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png
new file mode 100755
index 000000000..d6802f74b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_linear_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png
new file mode 100755
index 000000000..954cd8ac5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png
new file mode 100755
index 000000000..539299f2d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_off_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png
new file mode 100755
index 000000000..d7d8bc1b8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png
new file mode 100755
index 000000000..137912f15
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/blur_radial_active.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png b/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png
new file mode 100755
index 000000000..3cfc6883e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/delete_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png b/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png
new file mode 100644
index 000000000..075a4f7f7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/forward_blue.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png
index f3c8fd6d8..3861355bf 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_fwd_forward.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_reply.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_reply.png
new file mode 100755
index 000000000..2af3db4e5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png b/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png
new file mode 100755
index 000000000..d08e72b82
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/reply.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png
old mode 100644
new mode 100755
index d47327132..1321d3c15
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/system_blue.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png
new file mode 100755
index 000000000..b935f2f74
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tool_blur.png differ
diff --git a/TMessagesProj/src/main/res/layout/messages_list.xml b/TMessagesProj/src/main/res/layout/messages_list.xml
index 7e685fb8a..6f6381a86 100644
--- a/TMessagesProj/src/main/res/layout/messages_list.xml
+++ b/TMessagesProj/src/main/res/layout/messages_list.xml
@@ -61,6 +61,8 @@
             android:gravity="center"
             android:textSize="15dp"
             android:paddingTop="6dp"
+            android:paddingLeft="8dp"
+            android:paddingRight="8dp"
             android:lineSpacingExtra="2dp"
             android:id="@+id/list_empty_view_text2"/>
 
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index e4a34d3b8..6d591f84a 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -16,7 +16,7 @@
     <string name="YourCode">رمز التفعيل</string>
     <string name="SentSmsCode">تم إرسال رسالة قصيرة تحتوي على رمز التفعيل الخاص بك</string>
     <string name="CallText">%1$d:%2$02d سنتصل بك خلال</string>
-    <string name="Calling">جارٍ الاتصال بك ...</string>
+    <string name="Calling">جاري الاتصال بك ...</string>
     <string name="Code">رمز التفعيل</string>
     <string name="WrongNumber">الرقم خاطئ؟</string>
     <string name="DidNotGetTheCode">هل استقبلت الرمز؟</string>
@@ -36,12 +36,12 @@
     <string name="NoChats">...لا توجد محادثات بعد</string>
     <string name="NoChatsHelp">إبدأ المراسلة بالضغط على\nأيقونة النقاط في أعلى يمين الشاشة\nأو اذهب لقسم جهات الاتصال.</string>
     <string name="WaitingForNetwork">في إنتظار الشبكة...</string>
-    <string name="Connecting">جارٍ الاتصال...</string>
-    <string name="Updating">جارٍ التحديث...</string>
+    <string name="Connecting">جاري الاتصال...</string>
+    <string name="Updating">جاري التحديث...</string>
     <string name="NewSecretChat">محادثة سرية جديدة</string>
     <string name="AwaitingEncryption">في إنتظار اتصال %s … </string>
     <string name="EncryptionRejected">تم إلغاء المحادثة السرية</string>
-    <string name="EncryptionProcessing">جارٍ إرسال المفاتيح المشفرة...</string>
+    <string name="EncryptionProcessing">جاري إرسال المفاتيح المشفرة...</string>
     <string name="EncryptedChatStartedOutgoing">%s قام بالدخول للمحادثة السرية.</string>
     <string name="EncryptedChatStartedIncoming">لقد قمت بالدخول للمحادثة السرية.</string>
     <string name="ClearHistory">مسح سجل المحادثات</string>
@@ -81,7 +81,7 @@
     <string name="GalleryInfo">أرسل الصورة بدون ضغطها</string>
     <!--chat view-->
     <string name="Invisible">مخفي</string>
-    <string name="Typing">جارٍ الكتابة… </string>
+    <string name="Typing">جاري الكتابة… </string>
     <string name="IsTyping">يكتب… </string>
     <string name="AreTyping">يكتبون… </string>
     <string name="GotAQuestion">هل يوجد لديك سؤال\nحول تيليجرام؟</string>
@@ -108,7 +108,7 @@
     <string name="YouWereKicked">لقد تم إخراجك من هذه المجموعة</string>
     <string name="YouLeft">لقد قمت بمغادرة المجموعة</string>
     <string name="DeleteThisGroup">حذف هذه المجموعة</string>
-    <string name="DeleteThisChat">حذف هذه المحادثة</string>
+    <string name="DeleteThisChat">حذف هذه الدردشة</string>
     <string name="SlideToCancel">قم بالسحب للإلغاء</string>
     <string name="SaveToDownloads">حفظ في الجهاز</string>
     <string name="ShareFile">مشاركة</string>
@@ -244,7 +244,7 @@
     <string name="NoSound">لا يوجد صوت</string>
     <string name="Default">افتراضي</string>
     <string name="Support">الدعم</string>
-    <string name="ChatBackground">خلفية المحادثة</string>
+    <string name="ChatBackground">خلفية الدردشة</string>
     <string name="MessagesSettings">الرسائل</string>
     <string name="SendByEnter">أرسل بزر الإدخال</string>
     <string name="TerminateAllSessions">سجل الخروج من كافة الأجهزة الأخرى</string>
@@ -300,6 +300,8 @@
     <string name="NotificationsOther">آخر</string>
     <string name="NotificationsDisabled">تعطيل</string>
     <string name="VibrationDisabled">تعطيل</string>
+    <string name="LedDisabled">تعطيل</string>
+    <string name="RepeatDisabled">إيقاف</string>
     <!--passcode view-->
     <string name="Passcode">رمز المرور</string>
     <string name="ChangePasscode">غيًر رمز المرور</string>
@@ -358,6 +360,9 @@
     <string name="Grain">الحبوب</string>
     <string name="Sharpen">زيادة الحدة</string>
     <string name="Blur">الطمس</string>
+    <string name="BlurOff">إيقاف</string>
+    <string name="BlurLinear">طولي</string>
+    <string name="BlurRadial">قطري</string>
     <string name="AreYouSureDeletePhoto">هل أنت متأكد من رغبتك في حذف هذه الصورة؟</string>
     <string name="AreYouSureDeleteVideo">هل أنت متأكد من رغبتك في حذف هذا المقطع المرئي؟</string>
     <string name="DiscardChanges">تجاهل التغييرات؟</string>
@@ -479,14 +484,14 @@
     <string name="InvalidCode">الرمز غير صحيح</string>
     <string name="InvalidFirstName">الاسم الأول غير صحيح</string>
     <string name="InvalidLastName">اسم العائلة غير صحيح</string>
-    <string name="Loading">جارٍ التحميل ...</string>
+    <string name="Loading">جاري التحميل ...</string>
     <string name="NoPlayerInstalled">ليس لديك أي مشغل مقاطع مرئية، يرجى تنزيل أية مشغل</string>
     <string name="NoMailInstalled">يرجى إرسال رسالة بواسطة البريد الإلكتروني إلى sms@telegram.org لتخبرنا عن مشكلتك.</string>
     <string name="NoHandleAppInstalled">لا يوجد لديك تطبيق يمكنه فتح \'%1$s\'، يرجى تنزيل تطبيق مناسب للإستمرار</string>
     <string name="InviteUser">هذا المستخدم ليس لديه تيليجرام بعد ، هل ترغب في دعوته الآن؟</string>
     <string name="AreYouSure">هل أنت متأكد؟</string>
     <string name="AddToTheGroup">هل ترغب في إضافة %1$s للمجموعة؟\n\nعدد الرسائل الحديثة المراد إعادة تحويلها:</string>
-    <string name="ForwardMessagesTo">هل تريد إعادة توجيه الرسائل إلى %1$s؟</string>
+    <string name="ForwardMessagesTo">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
     <string name="SendMessagesTo">هل ترغب في إرسال رسالة إلى %1$s؟</string>
     <string name="AreYouSureLogout">نرجو الأخذ بالعلم أنه يمكنك استخدام تيليجرام على أجهزتك المتعددة بسهولة تامة وفي وقت واحد.\n\nوتذكر، تسجيل الخروج يحذف كافة محادثاتك السرية.</string>
     <string name="AreYouSureSessions">هل أنت متأكد من تسجيل الخروج من جميع الأجهزة الأخرى باستثناء هذا الجهاز؟</string>
@@ -501,7 +506,7 @@
     <string name="AreYouSureClearHistory">هل أنت متأكد من رغبتك في حذف سجل المحادثات؟</string>
     <string name="AreYouSureDeleteMessages">هل أنت متأكد من رغبتك في حذف %1$s؟</string>
     <string name="SendMessagesToGroup">هل ترغب في إرسال رسالة إلى %1$s؟</string>
-    <string name="ForwardMessagesToGroup">هل تريد إعادة توجيه الرسائل إلى %1$s؟</string>
+    <string name="ForwardMessagesToGroup">؟%1$s هل تريد إعادة توجيه الرسائل إلى</string>
     <string name="FeatureUnavailable">.Sorry, this feature is currently not available in your country</string>
     <!--Intro view-->
     <string name="Page1Title">تيليجرام</string>
@@ -556,12 +561,6 @@
     <string name="items_few">%1$d ملفات</string>
     <string name="items_many">%1$d ملف</string>
     <string name="items_other">%1$d ملف</string>
-    <string name="FromContacts_zero">ليس من جهة اتصال</string>
-    <string name="FromContacts_one">من %1$d جهة اتصال</string>
-    <string name="FromContacts_two">من %1$d جهتان اتصال</string>
-    <string name="FromContacts_few">من %1$d جهات اتصال</string>
-    <string name="FromContacts_many">من %1$d جهة اتصال</string>
-    <string name="FromContacts_other">من %1$d جهة اتصال</string>
     <string name="FromChats_zero">من ولا محادثة</string>
     <string name="FromChats_one">من %1$d محادثة</string>
     <string name="FromChats_two">من %1$d محادثة</string>
@@ -616,6 +615,61 @@
     <string name="Users_few">%1$d مستخدمون</string>
     <string name="Users_many">%1$d مستخدم</string>
     <string name="Users_other">%1$d مستخدم</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d رسالة معاد توجيهها</string>
+    <string name="ForwardedMessage_one">الرسالة المعاد توجيهها</string>
+    <string name="ForwardedMessage_two">%1$d رسالة معاد توجيهها</string>
+    <string name="ForwardedMessage_few">%1$d رسالة معاد توجيهها</string>
+    <string name="ForwardedMessage_many">%1$d رسالة معاد توجيهها</string>
+    <string name="ForwardedMessage_other">%1$d رسالة معاد توجيهها</string>
+    <string name="ForwardedFile_zero">%1$d ملف معاد توجيهه</string>
+    <string name="ForwardedFile_one">ملف معاد توجيهه</string>
+    <string name="ForwardedFile_two">%1$d ملف معاد توجيهه</string>
+    <string name="ForwardedFile_few">%1$d ملف معاد توجيهه</string>
+    <string name="ForwardedFile_many">%1$d ملف معاد توجيهه</string>
+    <string name="ForwardedFile_other">%1$d ملف معاد توجيهه</string>
+    <string name="ForwardedPhoto_zero">%1$d صورة معاد توجيهها</string>
+    <string name="ForwardedPhoto_one">صورة معاد توجيهها</string>
+    <string name="ForwardedPhoto_two">%1$d صورة معاد توجيهها</string>
+    <string name="ForwardedPhoto_few">%1$d صورة معاد توجيهها</string>
+    <string name="ForwardedPhoto_many">%1$d صورة معاد توجيهها</string>
+    <string name="ForwardedPhoto_other">%1$d صورة معاد توجيهها</string>
+    <string name="ForwardedVideo_zero">%1$d مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedVideo_one">مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedVideo_two">%1$d مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedVideo_few">%1$d مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedVideo_many">%1$d مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedVideo_other">%1$d مقطع مرئي معاد توجيهه</string>
+    <string name="ForwardedAudio_zero">%1$d مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedAudio_one">مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedAudio_two">%1$d مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedAudio_few">%1$d مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedAudio_many">%1$d مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedAudio_other">%1$d مقطع صوتي معاد توجيهه</string>
+    <string name="ForwardedLocation_zero">%1$d موقع معاد توجيهه</string>
+    <string name="ForwardedLocation_one">موقع معاد توجيهه</string>
+    <string name="ForwardedLocation_two">%1$d موقع معاد توجيهه</string>
+    <string name="ForwardedLocation_few">%1$d موقع معاد توجيهه</string>
+    <string name="ForwardedLocation_many">%1$d موقع معاد توجيهه</string>
+    <string name="ForwardedLocation_other">%1$d موقع معاد توجيهه</string>
+    <string name="ForwardedContact_zero">%1$d جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedContact_one">جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedContact_two">%1$d جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedContact_few">%1$d جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedContact_many">%1$d جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedContact_other">%1$d جهة اتصال معاد توجيهها</string>
+    <string name="ForwardedSticker_zero">%1$d ملصق معاد توجيهها</string>
+    <string name="ForwardedSticker_one">ملصق معاد توجيهه</string>
+    <string name="ForwardedSticker_two">%1$d ملصق معاد توجيهه</string>
+    <string name="ForwardedSticker_few">%1$d ملصق معاد توجيهه</string>
+    <string name="ForwardedSticker_many">%1$d ملصق معاد توجيهه</string>
+    <string name="ForwardedSticker_other">%1$d ملصق معاد توجيهه</string>
+    <string name="AndOther_zero">و %1$d غيرهم</string>
+    <string name="AndOther_one">و %1$d غيره</string>
+    <string name="AndOther_two">و %1$d غيرهم</string>
+    <string name="AndOther_few">و %1$d غيرهم</string>
+    <string name="AndOther_many">و %1$d غيرهم</string>
+    <string name="AndOther_other">و %1$d غيرهم</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">MMM dd</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 17c8b51a3..bc1ca90bd 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -151,7 +151,7 @@
     <string name="NotificationContactJoined">%1$s benutzt jetzt Telegram!</string>
     <string name="NotificationUnrecognizedDevice">%1$s,\nWir haben eine Anmeldung von einem neuen Gerät am %2$s festgestellt.\n\nGerät: %3$s\nStandort: %4$s\n\nWenn du das nicht selbst gewesen bist, melde alle anderen Sitzungen in den Telegram Einstellungen unverzüglich ab.\n\nMit freundlichen Grüßen,\nDein Telegram Team</string>
     <string name="NotificationContactNewPhoto">%1$s hat das Profilbild geändert</string>
-    <string name="Reply">Beantworten</string>
+    <string name="Reply">Antworten</string>
     <string name="ReplyToGroup">%1$s antworten</string>
     <string name="ReplyToUser">%1$s antworten</string>
     <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
@@ -301,6 +301,8 @@
     <string name="NotificationsOther">Sonstige</string>
     <string name="NotificationsDisabled">Deaktiviert</string>
     <string name="VibrationDisabled">Deaktiviert</string>
+    <string name="LedDisabled">Deaktiviert</string>
+    <string name="RepeatDisabled">Aus</string>
     <!--passcode view-->
     <string name="Passcode">Pincode</string>
     <string name="ChangePasscode">Pincode ändern</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Körnung</string>
     <string name="Sharpen">Schärfe</string>
     <string name="Blur">Unschärfe</string>
+    <string name="BlurOff">Aus</string>
+    <string name="BlurLinear">Linear</string>
+    <string name="BlurRadial">Radial</string>
     <string name="AreYouSureDeletePhoto">Möchtest du wirklich dieses Bild löschen?</string>
     <string name="AreYouSureDeleteVideo">Möchtest du wirklich dieses Video löschen?</string>
     <string name="DiscardChanges">Änderungen verwerfen?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d Objekte</string>
     <string name="items_many">%1$d Objekte</string>
     <string name="items_other">%1$d Objekte</string>
-    <string name="FromContacts_zero">von keinem Kontakt</string>
-    <string name="FromContacts_one">von %1$d Kontakt</string>
-    <string name="FromContacts_two">von %1$d Kontakten</string>
-    <string name="FromContacts_few">von %1$d Kontakten</string>
-    <string name="FromContacts_many">von %1$d Kontakten</string>
-    <string name="FromContacts_other">von %1$d Kontakten</string>
     <string name="FromChats_zero">von keinen Chats</string>
     <string name="FromChats_one">von %1$d Chat</string>
     <string name="FromChats_two">von %1$d Chats</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d Nutzer</string>
     <string name="Users_many">%1$d Nutzer</string>
     <string name="Users_other">%1$d Nutzer</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d angehängten Nachrichten</string>
+    <string name="ForwardedMessage_one">Angehängte Nachricht</string>
+    <string name="ForwardedMessage_two">%1$d angehängte Nachrichten</string>
+    <string name="ForwardedMessage_few">%1$d angehängte Nachrichten</string>
+    <string name="ForwardedMessage_many">%1$d angehängte Nachrichten</string>
+    <string name="ForwardedMessage_other">%1$d angehängte Nachrichten</string>
+    <string name="ForwardedFile_zero">%1$d angehängten Dateien</string>
+    <string name="ForwardedFile_one">Angehängte Datei</string>
+    <string name="ForwardedFile_two">%1$d angehängte Dateien</string>
+    <string name="ForwardedFile_few">%1$d angehängte Dateien</string>
+    <string name="ForwardedFile_many">%1$d angehängte Dateien</string>
+    <string name="ForwardedFile_other">%1$d angehängte Dateien</string>
+    <string name="ForwardedPhoto_zero">%1$d angehängten Bilder</string>
+    <string name="ForwardedPhoto_one">Angehängtes Bild</string>
+    <string name="ForwardedPhoto_two">%1$d angehängte Bilder</string>
+    <string name="ForwardedPhoto_few">%1$d angehängte Bilder</string>
+    <string name="ForwardedPhoto_many">%1$d angehängte Bilder</string>
+    <string name="ForwardedPhoto_other">%1$d angehängte Bilder</string>
+    <string name="ForwardedVideo_zero">%1$d angehängten Videos</string>
+    <string name="ForwardedVideo_one">Angehängtes Video</string>
+    <string name="ForwardedVideo_two">%1$d angehängte Videos</string>
+    <string name="ForwardedVideo_few">%1$d angehängte Videos</string>
+    <string name="ForwardedVideo_many">%1$d angehängte Videos</string>
+    <string name="ForwardedVideo_other">%1$d angehängte Videos</string>
+    <string name="ForwardedAudio_zero">%1$d angehängten Audios</string>
+    <string name="ForwardedAudio_one">Angehängtes Audio</string>
+    <string name="ForwardedAudio_two">%1$d angehängte Audios</string>
+    <string name="ForwardedAudio_few">%1$d angehängte Audios</string>
+    <string name="ForwardedAudio_many">%1$d angehängte Audios</string>
+    <string name="ForwardedAudio_other">%1$d angehängte Audios</string>
+    <string name="ForwardedLocation_zero">%1$d weitergeleiteten Standorte</string>
+    <string name="ForwardedLocation_one">Angehängter Standort</string>
+    <string name="ForwardedLocation_two">%1$d angehängte Standorte</string>
+    <string name="ForwardedLocation_few">%1$d angehängte Standorte</string>
+    <string name="ForwardedLocation_many">%1$d angehängte Standorte</string>
+    <string name="ForwardedLocation_other">%1$d angehängte Standorte</string>
+    <string name="ForwardedContact_zero">%1$d weitergeleiteten Kontakt</string>
+    <string name="ForwardedContact_one">Angehängter Kontakt</string>
+    <string name="ForwardedContact_two">%1$d angehängte Kontakte</string>
+    <string name="ForwardedContact_few">%1$d angehängte Kontakte</string>
+    <string name="ForwardedContact_many">%1$d angehängte Kontakte</string>
+    <string name="ForwardedContact_other">%1$d angehängte Kontakte</string>
+    <string name="ForwardedSticker_zero">%1$d angehängten Sticker</string>
+    <string name="ForwardedSticker_one">Angehängter Sticker</string>
+    <string name="ForwardedSticker_two">%1$d angehängte Sticker</string>
+    <string name="ForwardedSticker_few">%1$d angehängte Sticker</string>
+    <string name="ForwardedSticker_many">%1$d angehängte Sticker</string>
+    <string name="ForwardedSticker_other">%1$d angehängte Sticker</string>
+    <string name="AndOther_zero">und %1$d andere</string>
+    <string name="AndOther_one">und %1$d anderer</string>
+    <string name="AndOther_two">und %1$d andere</string>
+    <string name="AndOther_few">und %1$d andere</string>
+    <string name="AndOther_many">und %1$d andere</string>
+    <string name="AndOther_other">und %1$d andere</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index 733e0994c..1f1ec9dcc 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -149,7 +149,7 @@
     <string name="NotificationGroupKickYou">%1$s te expulsó del grupo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s dejó el grupo %2$s</string>
     <string name="NotificationContactJoined">¡%1$s se unió a Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nDetectamos un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Privacidad y seguirdad - Cerrar todas las otras sesiones.\n\nAtentamente,\nEl equipo de Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nDetectamos un inicio de sesión en tu cuenta desde un nuevo dispositivo, el %2$s\n\nDispositivo: %3$s\nUbicación: %4$s\n\nSi no eras tú, puedes ir a Ajustes - Privacidad y seguridad - Cerrar todas las otras sesiones.\n\nAtentamente,\nEl equipo de Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s actualizó su foto de perfil</string>
     <string name="Reply">Responder</string>
     <string name="ReplyToGroup">Responder a %1$s</string>
@@ -301,6 +301,8 @@
     <string name="NotificationsOther">Otras</string>
     <string name="NotificationsDisabled">Desactivadas</string>
     <string name="VibrationDisabled">Desactivadas</string>
+    <string name="LedDisabled">Desactivado</string>
+    <string name="RepeatDisabled">Apagado</string>
     <!--passcode view-->
     <string name="Passcode">Código de acceso</string>
     <string name="ChangePasscode">Cambiar código de acceso</string>
@@ -346,7 +348,7 @@
     <string name="SearchGifs">BUSCA GIF</string>
     <string name="SearchImagesTitle">Buscar foto</string>
     <string name="SearchGifsTitle">Buscar GIF</string>
-    <string name="CropImage">Cortar imagen</string>
+    <string name="CropImage">Recortar imagen</string>
     <string name="EditImage">Editar imagen</string>
     <string name="Enhance">Realzar</string>
     <string name="Highlights">Iluminación</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Grano</string>
     <string name="Sharpen">Nitidez</string>
     <string name="Blur">Desenfoque</string>
+    <string name="BlurOff">Apagado</string>
+    <string name="BlurLinear">Lineal</string>
+    <string name="BlurRadial">Radial</string>
     <string name="AreYouSureDeletePhoto">¿Quieres eliminar esta foto?</string>
     <string name="AreYouSureDeleteVideo">¿Quieres eliminar este vídeo?</string>
     <string name="DiscardChanges">¿Descartar cambios?</string>
@@ -445,7 +450,7 @@
     <string name="DeletePhoto">Eliminar foto</string>
     <string name="Set">Establecer</string>
     <string name="OK">OK</string>
-    <string name="Crop">CORTAR</string>
+    <string name="Crop">RECORTAR</string>
     <!--messages-->
     <string name="ActionKickUser">un1 expulsó a un2</string>
     <string name="ActionLeftUser">un1 dejó el grupo</string>
@@ -553,18 +558,12 @@
     <string name="messages_few">%1$d mensajes</string>
     <string name="messages_many">%1$d mensajes</string>
     <string name="messages_other">%1$d mensajes</string>
-    <string name="items_zero">Sin ítemes</string>
+    <string name="items_zero">Sin ítems</string>
     <string name="items_one">%1$d ítem</string>
-    <string name="items_two">%1$d ítemes</string>
-    <string name="items_few">%1$d ítemes</string>
-    <string name="items_many">%1$d ítemes</string>
-    <string name="items_other">%1$d ítemes</string>
-    <string name="FromContacts_zero">unused</string>
-    <string name="FromContacts_one">de %1$d contacto</string>
-    <string name="FromContacts_two">de %1$d contactos</string>
-    <string name="FromContacts_few">de %1$d contactos</string>
-    <string name="FromContacts_many">de %1$d contactos</string>
-    <string name="FromContacts_other">de %1$d contactos</string>
+    <string name="items_two">%1$d ítems</string>
+    <string name="items_few">%1$d ítems</string>
+    <string name="items_many">%1$d ítems</string>
+    <string name="items_other">%1$d ítems</string>
     <string name="FromChats_zero">desde ningún chat</string>
     <string name="FromChats_one">desde %1$d chat</string>
     <string name="FromChats_two">desde %1$d chats</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d usuarios</string>
     <string name="Users_many">%1$d usuarios</string>
     <string name="Users_other">%1$d usuarios</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d mensajes adjuntos</string>
+    <string name="ForwardedMessage_one">Mensaje adjunto</string>
+    <string name="ForwardedMessage_two">%1$d mensajes adjuntos</string>
+    <string name="ForwardedMessage_few">%1$d mensajes adjuntos</string>
+    <string name="ForwardedMessage_many">%1$d mensajes adjuntos</string>
+    <string name="ForwardedMessage_other">%1$d mensajes adjuntos</string>
+    <string name="ForwardedFile_zero">%1$d archivos adjuntos</string>
+    <string name="ForwardedFile_one">Archivo adjunto</string>
+    <string name="ForwardedFile_two">%1$d archivos adjuntos</string>
+    <string name="ForwardedFile_few">%1$d archivos adjuntos</string>
+    <string name="ForwardedFile_many">%1$d archivos adjuntos</string>
+    <string name="ForwardedFile_other">%1$d archivos adjuntos</string>
+    <string name="ForwardedPhoto_zero">%1$d fotos adjuntas</string>
+    <string name="ForwardedPhoto_one">Foto adjunta</string>
+    <string name="ForwardedPhoto_two">%1$d fotos adjuntas</string>
+    <string name="ForwardedPhoto_few">%1$d fotos adjuntas</string>
+    <string name="ForwardedPhoto_many">%1$d fotos adjuntas</string>
+    <string name="ForwardedPhoto_other">%1$d fotos adjuntas</string>
+    <string name="ForwardedVideo_zero">%1$d vídeos adjuntos</string>
+    <string name="ForwardedVideo_one">Vídeo adjunto</string>
+    <string name="ForwardedVideo_two">%1$d vídeos adjuntos</string>
+    <string name="ForwardedVideo_few">%1$d vídeos adjuntos</string>
+    <string name="ForwardedVideo_many">%1$d vídeos adjuntos</string>
+    <string name="ForwardedVideo_other">%1$d vídeos adjuntos</string>
+    <string name="ForwardedAudio_zero">%1$d audios adjuntos</string>
+    <string name="ForwardedAudio_one">Audio adjunto</string>
+    <string name="ForwardedAudio_two">%1$d audios adjuntos</string>
+    <string name="ForwardedAudio_few">%1$d audios adjuntos</string>
+    <string name="ForwardedAudio_many">%1$d audios adjuntos</string>
+    <string name="ForwardedAudio_other">%1$d audios adjuntos</string>
+    <string name="ForwardedLocation_zero">%1$d ubicaciones adjuntas</string>
+    <string name="ForwardedLocation_one">Ubicación adjunta</string>
+    <string name="ForwardedLocation_two">%1$d ubicaciones adjuntas</string>
+    <string name="ForwardedLocation_few">%1$d ubicaciones adjuntas</string>
+    <string name="ForwardedLocation_many">%1$d ubicaciones adjuntas</string>
+    <string name="ForwardedLocation_other">%1$d ubicaciones adjuntas</string>
+    <string name="ForwardedContact_zero">%1$d contactos adjuntos</string>
+    <string name="ForwardedContact_one">Contacto adjunto</string>
+    <string name="ForwardedContact_two">%1$d contactos adjuntos</string>
+    <string name="ForwardedContact_few">%1$d contactos adjuntos</string>
+    <string name="ForwardedContact_many">%1$d contactos adjuntos</string>
+    <string name="ForwardedContact_other">%1$d contactos adjuntos</string>
+    <string name="ForwardedSticker_zero">%1$d stickers adjuntos</string>
+    <string name="ForwardedSticker_one">Sticker adjunto</string>
+    <string name="ForwardedSticker_two">%1$d stickers adjuntos</string>
+    <string name="ForwardedSticker_few">%1$d stickers adjuntos</string>
+    <string name="ForwardedSticker_many">%1$d stickers adjuntos</string>
+    <string name="ForwardedSticker_other">%1$d stickers adjuntos</string>
+    <string name="AndOther_zero">y %1$d otros</string>
+    <string name="AndOther_one">and %1$d más</string>
+    <string name="AndOther_two">y otros %1$d</string>
+    <string name="AndOther_few">y otros %1$d</string>
+    <string name="AndOther_many">y otros %1$d</string>
+    <string name="AndOther_other">y otros %1$d</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM \'de\' yyyy</string>
     <string name="formatterMonth">dd \'de\' MMM</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index d57d250c1..9f62831c1 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -36,7 +36,7 @@
     <string name="NoChats">Ancora nessuna chat…</string>
     <string name="NoChatsHelp">Inizia a scrivere premendo il tasto\nnuovo messaggio nell\'angolo in basso a destra\no apri il menu per avere più opzioni.</string>
     <string name="WaitingForNetwork">Attendo la rete...</string>
-    <string name="Connecting">Connessione in corso…</string>
+    <string name="Connecting">Connessione…</string>
     <string name="Updating">Aggiornamento…</string>
     <string name="NewSecretChat">Nuova chat segreta</string>
     <string name="AwaitingEncryption">In attesa che %s si colleghi…</string>
@@ -149,7 +149,7 @@
     <string name="NotificationGroupKickYou">%1$s ti ha espulso dal gruppo %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s ha lasciato il gruppo %2$s</string>
     <string name="NotificationContactJoined">%1$s ha iniziato a usare Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Privacy e Sicurezza - Termina tutte le sessioni.\n\nGrazie,\nil team di Telegram</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nAbbiamo rilevato un accesso al tuo account da un nuovo dispositivo il %2$s\n\nDispositivo: %3$s\nPosizione: %4$s\n\nSe non sei stato tu, puoi andare su Impostazioni - Privacy e Sicurezza - Termina tutte le sessioni.\n\nGrazie,\nil team di Telegram</string>
     <string name="NotificationContactNewPhoto">%1$s ha aggiornato la foto del profilo</string>
     <string name="Reply">Rispondi</string>
     <string name="ReplyToGroup">Rispondi a %1$s</string>
@@ -260,7 +260,7 @@
     <string name="DeleteLocalization">Eliminare la localizzazione?</string>
     <string name="IncorrectLocalization">File della localizzazione non valido</string>
     <string name="Enabled">Abilitate</string>
-    <string name="Disabled">Disabilitate</string>
+    <string name="Disabled">Disabilitata</string>
     <string name="NotificationsService">Servizio notifiche</string>
     <string name="NotificationsServiceDisableInfo">Se i servizi di Google Play sono sufficienti per ricevere le notifiche, è possibile disabilitare il Servizio notifiche. Ti raccomandiamo comunque di lasciarlo abilitato per lasciare l\'app attiva in background e ricevere le notifiche istantanee.</string>
     <string name="SortBy">Ordina per</string>
@@ -275,7 +275,7 @@
     <string name="AlwaysShowPopup">Mostra sempre i popup</string>
     <string name="BadgeNumber">Contatore Badge</string>
     <string name="Short">Breve</string>
-    <string name="Long">Lungo</string>
+    <string name="Long">Lunga</string>
     <string name="SystemDefault">Predefinito di sistema</string>
     <string name="SettingsDefault">Impostazioni predefinite</string>
     <string name="AutomaticMediaDownload">Download automatico media</string>
@@ -301,6 +301,8 @@
     <string name="NotificationsOther">Altro</string>
     <string name="NotificationsDisabled">Disabilitate</string>
     <string name="VibrationDisabled">Disabilitata</string>
+    <string name="LedDisabled">Disabilitato</string>
+    <string name="RepeatDisabled">No</string>
     <!--passcode view-->
     <string name="Passcode">Codice</string>
     <string name="ChangePasscode">Cambia codice</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Grana</string>
     <string name="Sharpen">Nitidezza</string>
     <string name="Blur">Sfocatura</string>
+    <string name="BlurOff">No</string>
+    <string name="BlurLinear">Lineare</string>
+    <string name="BlurRadial">Radiale</string>
     <string name="AreYouSureDeletePhoto">Sei sicuro di voler eliminare questa foto?</string>
     <string name="AreYouSureDeleteVideo">Sei sicuro di voler eliminare questo video?</string>
     <string name="DiscardChanges">Annullare le modifiche?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d oggetti</string>
     <string name="items_many">%1$d oggetti</string>
     <string name="items_other">%1$d oggetti</string>
-    <string name="FromContacts_zero">da nessun contatto</string>
-    <string name="FromContacts_one">da %1$d contatto</string>
-    <string name="FromContacts_two">da %1$d contatti</string>
-    <string name="FromContacts_few">da %1$d contatti</string>
-    <string name="FromContacts_many">da %1$d contatti</string>
-    <string name="FromContacts_other">da %1$d contatti</string>
     <string name="FromChats_zero">in nessuna chat</string>
     <string name="FromChats_one">in %1$d chat</string>
     <string name="FromChats_two">in %1$d chat</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d utenti</string>
     <string name="Users_many">%1$d utenti</string>
     <string name="Users_other">%1$d utenti</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d messaggi inoltrati</string>
+    <string name="ForwardedMessage_one">Messaggio inoltrato</string>
+    <string name="ForwardedMessage_two">%1$d messaggi inoltrati</string>
+    <string name="ForwardedMessage_few">%1$d messaggi inoltrati</string>
+    <string name="ForwardedMessage_many">%1$d messaggi inoltrati</string>
+    <string name="ForwardedMessage_other">%1$d messaggi inoltrati</string>
+    <string name="ForwardedFile_zero">%1$d file inoltrati</string>
+    <string name="ForwardedFile_one">FIle inoltrato</string>
+    <string name="ForwardedFile_two">%1$d file inoltrati</string>
+    <string name="ForwardedFile_few">%1$d file inoltrati</string>
+    <string name="ForwardedFile_many">%1$d file inoltrati</string>
+    <string name="ForwardedFile_other">%1$d file inoltrati</string>
+    <string name="ForwardedPhoto_zero">%1$d foto inoltrate</string>
+    <string name="ForwardedPhoto_one">Foto inoltrata</string>
+    <string name="ForwardedPhoto_two">%1$d foto inoltrate</string>
+    <string name="ForwardedPhoto_few">%1$d foto inoltrate</string>
+    <string name="ForwardedPhoto_many">%1$d foto inoltrate</string>
+    <string name="ForwardedPhoto_other">%1$d foto inoltrate</string>
+    <string name="ForwardedVideo_zero">%1$d video inoltrati</string>
+    <string name="ForwardedVideo_one">Video inoltrato</string>
+    <string name="ForwardedVideo_two">%1$d video inoltrati</string>
+    <string name="ForwardedVideo_few">%1$d video inoltrati</string>
+    <string name="ForwardedVideo_many">%1$d video inoltrati</string>
+    <string name="ForwardedVideo_other">%1$d video inoltrati</string>
+    <string name="ForwardedAudio_zero">%1$d audio inoltrati</string>
+    <string name="ForwardedAudio_one">Audio inoltrato</string>
+    <string name="ForwardedAudio_two">%1$d audio inoltrati</string>
+    <string name="ForwardedAudio_few">%1$d audio inoltrati</string>
+    <string name="ForwardedAudio_many">%1$d audio inoltrati</string>
+    <string name="ForwardedAudio_other">%1$d audio inoltrati</string>
+    <string name="ForwardedLocation_zero">%1$d posizioni inoltrate</string>
+    <string name="ForwardedLocation_one">Posizione inoltrata</string>
+    <string name="ForwardedLocation_two">%1$d posizione inoltrate</string>
+    <string name="ForwardedLocation_few">%1$d posizione inoltrate</string>
+    <string name="ForwardedLocation_many">%1$d posizione inoltrate</string>
+    <string name="ForwardedLocation_other">%1$d posizione inoltrate</string>
+    <string name="ForwardedContact_zero">%1$d contatti inoltrati</string>
+    <string name="ForwardedContact_one">Contatto inoltrato</string>
+    <string name="ForwardedContact_two">%1$d contatti inoltrati</string>
+    <string name="ForwardedContact_few">%1$d contatti inoltrati</string>
+    <string name="ForwardedContact_many">%1$d contatti inoltrati</string>
+    <string name="ForwardedContact_other">%1$d contatti inoltrati</string>
+    <string name="ForwardedSticker_zero">%1$d sticker inoltrati</string>
+    <string name="ForwardedSticker_one">Sticker inoltrato</string>
+    <string name="ForwardedSticker_two">%1$d sticker inoltrati</string>
+    <string name="ForwardedSticker_few">%1$d sticker inoltrati</string>
+    <string name="ForwardedSticker_many">%1$d sticker inoltrati</string>
+    <string name="ForwardedSticker_other">%1$d sticker inoltrati</string>
+    <string name="AndOther_zero">e altri %1$d</string>
+    <string name="AndOther_one">e %1$d altro</string>
+    <string name="AndOther_two">e altri %1$d</string>
+    <string name="AndOther_few">e altri %1$d</string>
+    <string name="AndOther_many">e altri %1$d</string>
+    <string name="AndOther_other">e altri %1$d</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-ko/strings.xml b/TMessagesProj/src/main/res/values-ko/strings.xml
index b6b777574..f83e94b5d 100644
--- a/TMessagesProj/src/main/res/values-ko/strings.xml
+++ b/TMessagesProj/src/main/res/values-ko/strings.xml
@@ -299,8 +299,10 @@
     <string name="ChangePhoneHelp">인증코드 메시지를 새 번호로 전송하겠습니다.</string>
     <string name="ChangePhoneNumberOccupied">그 번호는 이미 텔레그램 계정에 연결되어 있습니다. 새 번호로 이동하기 전에 %1$s 계정에서 탈퇴해 주세요.</string>
     <string name="NotificationsOther">기타</string>
-    <string name="NotificationsDisabled">끄기</string>
-    <string name="VibrationDisabled">끄기</string>
+    <string name="NotificationsDisabled">비활성화됨</string>
+    <string name="VibrationDisabled">비활성화됨</string>
+    <string name="LedDisabled">비활성화됨</string>
+    <string name="RepeatDisabled">끔</string>
     <!--passcode view-->
     <string name="Passcode">잠금번호</string>
     <string name="ChangePasscode">잠금번호 변경</string>
@@ -359,6 +361,9 @@
     <string name="Grain">그레인</string>
     <string name="Sharpen">선명</string>
     <string name="Blur">흐림</string>
+    <string name="BlurOff">끔</string>
+    <string name="BlurLinear">선형</string>
+    <string name="BlurRadial">방사형</string>
     <string name="AreYouSureDeletePhoto">이 사진을 삭제하시겠습니까?</string>
     <string name="AreYouSureDeleteVideo">이 동영상을 삭제하시겠습니까?</string>
     <string name="DiscardChanges">변경을 취소하시겠습니까?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d개 아이템</string>
     <string name="items_many">%1$d개 아이템</string>
     <string name="items_other">%1$d개 아이템</string>
-    <string name="FromContacts_zero">보낸곳 없음 -</string>
-    <string name="FromContacts_one">채팅방 %1$d개에서</string>
-    <string name="FromContacts_two">채팅방 %1$d개에서</string>
-    <string name="FromContacts_few">채팅방 %1$d개에서</string>
-    <string name="FromContacts_many">채팅방 %1$d개에서</string>
-    <string name="FromContacts_other">채팅방 %1$d개에서</string>
     <string name="FromChats_zero">받은 대화 없음</string>
     <string name="FromChats_one">%1$d개의 대화로부터 받음</string>
     <string name="FromChats_two">%1$d개의 대화로부터 받음</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d명의 대화상대</string>
     <string name="Users_many">%1$d명의 대화상대</string>
     <string name="Users_other">%1$d명의 대화상대</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d 개의 전달된 메시지</string>
+    <string name="ForwardedMessage_one">전달된 메시지</string>
+    <string name="ForwardedMessage_two">%1$d 개의 전달된 메시지</string>
+    <string name="ForwardedMessage_few">%1$d 개의 전달된 메시지</string>
+    <string name="ForwardedMessage_many">%1$d 개의 전달된 메시지</string>
+    <string name="ForwardedMessage_other">%1$d 개의 전달된 메시지</string>
+    <string name="ForwardedFile_zero">%1$d 개의 전달된 파일</string>
+    <string name="ForwardedFile_one">전달된 파일</string>
+    <string name="ForwardedFile_two">%1$d 개의 전달된 파일</string>
+    <string name="ForwardedFile_few">%1$d 개의 전달된 파일</string>
+    <string name="ForwardedFile_many">%1$d 개의 전달된 파일</string>
+    <string name="ForwardedFile_other">%1$d 개의 전달된 파일</string>
+    <string name="ForwardedPhoto_zero">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedPhoto_one">전달된 사진</string>
+    <string name="ForwardedPhoto_two">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedPhoto_few">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedPhoto_many">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedPhoto_other">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedVideo_zero">%1$d 개의 전달된 사진</string>
+    <string name="ForwardedVideo_one">전달된 비디오</string>
+    <string name="ForwardedVideo_two">%1$d 개의 전달된 비디오</string>
+    <string name="ForwardedVideo_few">%1$d 개의 전달된 비디오</string>
+    <string name="ForwardedVideo_many">%1$d 개의 전달된 비디오</string>
+    <string name="ForwardedVideo_other">%1$d 개의 전달된 비디오</string>
+    <string name="ForwardedAudio_zero">%1$d 개의 전달된 오디오</string>
+    <string name="ForwardedAudio_one">전달된 오디오</string>
+    <string name="ForwardedAudio_two">%1$d 개의 전달된 오디오</string>
+    <string name="ForwardedAudio_few">%1$d 개의 전달된 오디오</string>
+    <string name="ForwardedAudio_many">%1$d 개의 전달된 오디오</string>
+    <string name="ForwardedAudio_other">%1$d 개의 전달된 오디오</string>
+    <string name="ForwardedLocation_zero">%1$d 개의 전달된 위치</string>
+    <string name="ForwardedLocation_one">전달된 위치</string>
+    <string name="ForwardedLocation_two">%1$d 개의 전달된 위치</string>
+    <string name="ForwardedLocation_few">%1$d 개의 전달된 위치</string>
+    <string name="ForwardedLocation_many">%1$d 개의 전달된 위치</string>
+    <string name="ForwardedLocation_other">%1$d 개의 전달된 위치</string>
+    <string name="ForwardedContact_zero">%1$d 개의 전달된 연락처</string>
+    <string name="ForwardedContact_one">전달된 연락처</string>
+    <string name="ForwardedContact_two">%1$d 개의 전달된 연락처</string>
+    <string name="ForwardedContact_few">%1$d 개의 전달된 연락처</string>
+    <string name="ForwardedContact_many">%1$d 개의 전달된 연락처</string>
+    <string name="ForwardedContact_other">%1$d 개의 전달된 연락처</string>
+    <string name="ForwardedSticker_zero">%1$d 개의 전달된 스티커</string>
+    <string name="ForwardedSticker_one">전달된 스티커</string>
+    <string name="ForwardedSticker_two">%1$d 개의 전달된 스티커</string>
+    <string name="ForwardedSticker_few">%1$d 개의 전달된 스티커</string>
+    <string name="ForwardedSticker_many">%1$d 개의 전달된 스티커</string>
+    <string name="ForwardedSticker_other">%1$d 개의 전달된 스티커</string>
+    <string name="AndOther_zero">및 %1$d 개</string>
+    <string name="AndOther_one">및 %1$d 개</string>
+    <string name="AndOther_two">및 %1$d 개</string>
+    <string name="AndOther_few">및 %1$d 개</string>
+    <string name="AndOther_many">및 %1$d 개</string>
+    <string name="AndOther_other">및 %1$d 개</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">M\'월\' d\'일\'</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index 99d53d92c..a0a167b1f 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -301,6 +301,8 @@
     <string name="NotificationsOther">Overig</string>
     <string name="NotificationsDisabled">Uitgeschakeld</string>
     <string name="VibrationDisabled">Uitgeschakeld</string>
+    <string name="LedDisabled">Uitgeschakeld</string>
+    <string name="RepeatDisabled">Uit</string>
     <!--passcode view-->
     <string name="Passcode">Toegangscode</string>
     <string name="ChangePasscode">Toegangscode wijzigen</string>
@@ -311,7 +313,7 @@
     <string name="EnterCurrentPasscode">Huidige toegangscode invoeren</string>
     <string name="EnterNewPasscode">Nieuwe toegangscode invoeren</string>
     <string name="EnterYourPasscode">Toegangscode invoeren</string>
-    <string name="ReEnterYourPasscode">Nieuwe toegangscode opnieuw invoeren</string>
+    <string name="ReEnterYourPasscode">Toegangscode opnieuw invoeren</string>
     <string name="InvalidPasscode">Ongeldige toegangscode</string>
     <string name="PasscodeDoNotMatch">Toegangscodes komen niet overeen</string>
     <string name="AutoLock">Automatisch vergrendelen</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Korrel</string>
     <string name="Sharpen">Scherper</string>
     <string name="Blur">Vager</string>
+    <string name="BlurOff">Uit</string>
+    <string name="BlurLinear">Lineair</string>
+    <string name="BlurRadial">Radiaal</string>
     <string name="AreYouSureDeletePhoto">Foto echt verwijderen?</string>
     <string name="AreYouSureDeleteVideo">Video echt verwijderen?</string>
     <string name="DiscardChanges">Wijzigingen negeren?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d items</string>
     <string name="items_many">%1$d items</string>
     <string name="items_other">%1$d items</string>
-    <string name="FromContacts_zero">van geen enkel contact</string>
-    <string name="FromContacts_one">van %1$d contacten</string>
-    <string name="FromContacts_two">van %1$d contacten</string>
-    <string name="FromContacts_few">van %1$d contacten</string>
-    <string name="FromContacts_many">van %1$d contacten</string>
-    <string name="FromContacts_other">van %1$d contacten</string>
     <string name="FromChats_zero">van geen chats</string>
     <string name="FromChats_one">van %1$d chat</string>
     <string name="FromChats_two">van %1$d chats</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d gebruikers</string>
     <string name="Users_many">%1$d gebruikers</string>
     <string name="Users_other">%1$d gebruikers</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">+%1$d berichten</string>
+    <string name="ForwardedMessage_one">+1 bericht</string>
+    <string name="ForwardedMessage_two">+%1$d berichten</string>
+    <string name="ForwardedMessage_few">+%1$d berichten</string>
+    <string name="ForwardedMessage_many">+%1$d berichten</string>
+    <string name="ForwardedMessage_other">+%1$d berichten</string>
+    <string name="ForwardedFile_zero">+%1$d bestanden</string>
+    <string name="ForwardedFile_one">+1 bestand</string>
+    <string name="ForwardedFile_two">+%1$d bestanden</string>
+    <string name="ForwardedFile_few">+%1$d bestanden</string>
+    <string name="ForwardedFile_many">+%1$d bestanden</string>
+    <string name="ForwardedFile_other">+%1$d bestanden</string>
+    <string name="ForwardedPhoto_zero">+%1$d foto\'s</string>
+    <string name="ForwardedPhoto_one">+1 foto</string>
+    <string name="ForwardedPhoto_two">+%1$d foto\'s</string>
+    <string name="ForwardedPhoto_few">+%1$d foto\'s</string>
+    <string name="ForwardedPhoto_many">+%1$d foto\'s</string>
+    <string name="ForwardedPhoto_other">+%1$d foto\'s</string>
+    <string name="ForwardedVideo_zero">+%1$d foto\'s</string>
+    <string name="ForwardedVideo_one">+1 video</string>
+    <string name="ForwardedVideo_two">+%1$d video\'s</string>
+    <string name="ForwardedVideo_few">+%1$d video\'s</string>
+    <string name="ForwardedVideo_many">+%1$d video\'s</string>
+    <string name="ForwardedVideo_other">+%1$d video\'s</string>
+    <string name="ForwardedAudio_zero">+%1$d geluidsbestanden</string>
+    <string name="ForwardedAudio_one">+1 geluidsbestand</string>
+    <string name="ForwardedAudio_two">+%1$d geluidsbestanden</string>
+    <string name="ForwardedAudio_few">+%1$d geluidsbestanden</string>
+    <string name="ForwardedAudio_many">+%1$d geluidsbestanden</string>
+    <string name="ForwardedAudio_other">+%1$d geluidsbestanden</string>
+    <string name="ForwardedLocation_zero">+%1$d locaties</string>
+    <string name="ForwardedLocation_one">+1 locatie</string>
+    <string name="ForwardedLocation_two">+%1$d locaties</string>
+    <string name="ForwardedLocation_few">+%1$d locaties</string>
+    <string name="ForwardedLocation_many">+%1$d locaties</string>
+    <string name="ForwardedLocation_other">+%1$d locaties</string>
+    <string name="ForwardedContact_zero">+%1$d contacten</string>
+    <string name="ForwardedContact_one">+1 contact</string>
+    <string name="ForwardedContact_two">+%1$d contacten</string>
+    <string name="ForwardedContact_few">+%1$d contacten</string>
+    <string name="ForwardedContact_many">+%1$d contacten</string>
+    <string name="ForwardedContact_other">+%1$d contacten</string>
+    <string name="ForwardedSticker_zero">+%1$d stickers</string>
+    <string name="ForwardedSticker_one">+1 sticker</string>
+    <string name="ForwardedSticker_two">+%1$d stickers</string>
+    <string name="ForwardedSticker_few">+%1$d stickers</string>
+    <string name="ForwardedSticker_many">+%1$d stickers</string>
+    <string name="ForwardedSticker_other">+%1$d stickers</string>
+    <string name="AndOther_zero">en %1$d anderen</string>
+    <string name="AndOther_one">en %1$d andere</string>
+    <string name="AndOther_two">en %1$d anderen</string>
+    <string name="AndOther_few">en %1$d anderen</string>
+    <string name="AndOther_many">en %1$d anderen</string>
+    <string name="AndOther_other">en %1$d anderen</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
index d5f270994..26d174862 100644
--- a/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rBR/strings.xml
@@ -57,7 +57,7 @@
     <string name="MuteFor">Silenciar por %1$s</string>
     <string name="UnmuteNotifications">Restaurar Som</string>
     <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativar</string>
+    <string name="MuteDisable">Desativado</string>
     <!--broadcasts-->
     <string name="NewBroadcastList">Nova Lista de Transmissão</string>
     <string name="EnterListName">Digite o nome da lista</string>
@@ -300,7 +300,9 @@
     <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
     <string name="NotificationsOther">Outro</string>
     <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativado</string>
+    <string name="VibrationDisabled">Desativar</string>
+    <string name="LedDisabled">Desativado</string>
+    <string name="RepeatDisabled">Desativado</string>
     <!--passcode view-->
     <string name="Passcode">Senha</string>
     <string name="ChangePasscode">Alterar Senha</string>
@@ -348,8 +350,8 @@
     <string name="SearchGifsTitle">Procurar GIFs</string>
     <string name="CropImage">Recortar imagem</string>
     <string name="EditImage">Editar imagem</string>
-    <string name="Enhance">Aumentar</string>
-    <string name="Highlights">Realce</string>
+    <string name="Enhance">Realçar</string>
+    <string name="Highlights">Luzes</string>
     <string name="Contrast">Contraste</string>
     <string name="Exposure">Exposição</string>
     <string name="Warmth">Calor</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Granulado</string>
     <string name="Sharpen">Nitidez</string>
     <string name="Blur">Desfoque</string>
+    <string name="BlurOff">Desativado</string>
+    <string name="BlurLinear">Linear</string>
+    <string name="BlurRadial">Radial</string>
     <string name="AreYouSureDeletePhoto">Você tem certeza que deseja apagar esta foto?</string>
     <string name="AreYouSureDeleteVideo">Você tem certeza que deseja apagar este vídeo?</string>
     <string name="DiscardChanges">Descartar mudanças?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d itens</string>
     <string name="items_many">%1$d itens</string>
     <string name="items_other">%1$d itens</string>
-    <string name="FromContacts_zero">de nenhum contato</string>
-    <string name="FromContacts_one">de %1$d contato</string>
-    <string name="FromContacts_two">de %1$d contatos</string>
-    <string name="FromContacts_few">de %1$d contatos</string>
-    <string name="FromContacts_many">de %1$d contatos</string>
-    <string name="FromContacts_other">de %1$d contatos</string>
     <string name="FromChats_zero">de nenhum chat</string>
     <string name="FromChats_one">de %1$d chat</string>
     <string name="FromChats_two">de %1$d chats</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d usuários</string>
     <string name="Users_many">%1$d usuários</string>
     <string name="Users_other">%1$d usuários</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_one">Mensagem encaminhada</string>
+    <string name="ForwardedMessage_two">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_few">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_many">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_other">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedFile_zero">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_one">Arquivo encaminhado</string>
+    <string name="ForwardedFile_two">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_few">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_many">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_other">%1$d arquivos encaminhados</string>
+    <string name="ForwardedPhoto_zero">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_one">Foto encaminhada</string>
+    <string name="ForwardedPhoto_two">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_few">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_many">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_other">%1$d fotos encaminhadas</string>
+    <string name="ForwardedVideo_zero">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_one">Vídeo encaminhado</string>
+    <string name="ForwardedVideo_two">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_few">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_many">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_other">%1$d vídeos encaminhados</string>
+    <string name="ForwardedAudio_zero">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_one">Áudio encaminhado</string>
+    <string name="ForwardedAudio_two">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_few">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_many">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_other">%1$d áudios encaminhados</string>
+    <string name="ForwardedLocation_zero">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_one">Localização encaminhada</string>
+    <string name="ForwardedLocation_two">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_few">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_many">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_other">%1$d localizações encaminhadas</string>
+    <string name="ForwardedContact_zero">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_one">Contato encaminhado</string>
+    <string name="ForwardedContact_two">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_few">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_many">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_other">%1$d contatos encaminhados</string>
+    <string name="ForwardedSticker_zero">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_one">Sticker encaminhado</string>
+    <string name="ForwardedSticker_two">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_few">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_many">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_other">%1$d stickers encaminhados</string>
+    <string name="AndOther_zero">e %1$d outros</string>
+    <string name="AndOther_one">e %1$d outro</string>
+    <string name="AndOther_two">e %1$d outros</string>
+    <string name="AndOther_few">e %1$d outros</string>
+    <string name="AndOther_many">e %1$d outros</string>
+    <string name="AndOther_other">e %1$d outros</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
index 44106b7c0..f0cf3cf3b 100644
--- a/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
+++ b/TMessagesProj/src/main/res/values-pt-rPT/strings.xml
@@ -57,7 +57,7 @@
     <string name="MuteFor">Silenciar por %1$s</string>
     <string name="UnmuteNotifications">Restaurar Som</string>
     <string name="WillUnmuteIn">Em %1$s</string>
-    <string name="MuteDisable">Desativar</string>
+    <string name="MuteDisable">Desativado</string>
     <!--broadcasts-->
     <string name="NewBroadcastList">Nova Lista de Transmissão</string>
     <string name="EnterListName">Digite o nome da lista</string>
@@ -300,7 +300,9 @@
     <string name="ChangePhoneNumberOccupied">O número %1$s já possui uma conta do Telegram. Por favor, exclua esta conta antes de migrar para o novo número.</string>
     <string name="NotificationsOther">Outro</string>
     <string name="NotificationsDisabled">Desativado</string>
-    <string name="VibrationDisabled">Desativado</string>
+    <string name="VibrationDisabled">Desativar</string>
+    <string name="LedDisabled">Desativado</string>
+    <string name="RepeatDisabled">Desativado</string>
     <!--passcode view-->
     <string name="Passcode">Senha</string>
     <string name="ChangePasscode">Alterar Senha</string>
@@ -348,8 +350,8 @@
     <string name="SearchGifsTitle">Procurar GIFs</string>
     <string name="CropImage">Recortar imagem</string>
     <string name="EditImage">Editar imagem</string>
-    <string name="Enhance">Aumentar</string>
-    <string name="Highlights">Realce</string>
+    <string name="Enhance">Realçar</string>
+    <string name="Highlights">Luzes</string>
     <string name="Contrast">Contraste</string>
     <string name="Exposure">Exposição</string>
     <string name="Warmth">Calor</string>
@@ -359,6 +361,9 @@
     <string name="Grain">Granulado</string>
     <string name="Sharpen">Nitidez</string>
     <string name="Blur">Desfoque</string>
+    <string name="BlurOff">Desativado</string>
+    <string name="BlurLinear">Linear</string>
+    <string name="BlurRadial">Radial</string>
     <string name="AreYouSureDeletePhoto">Você tem certeza que deseja apagar esta foto?</string>
     <string name="AreYouSureDeleteVideo">Você tem certeza que deseja apagar este vídeo?</string>
     <string name="DiscardChanges">Descartar mudanças?</string>
@@ -559,12 +564,6 @@
     <string name="items_few">%1$d itens</string>
     <string name="items_many">%1$d itens</string>
     <string name="items_other">%1$d itens</string>
-    <string name="FromContacts_zero">de nenhum contato</string>
-    <string name="FromContacts_one">de %1$d contato</string>
-    <string name="FromContacts_two">de %1$d contatos</string>
-    <string name="FromContacts_few">de %1$d contatos</string>
-    <string name="FromContacts_many">de %1$d contatos</string>
-    <string name="FromContacts_other">de %1$d contatos</string>
     <string name="FromChats_zero">de nenhum chat</string>
     <string name="FromChats_one">de %1$d chat</string>
     <string name="FromChats_two">de %1$d chats</string>
@@ -619,6 +618,61 @@
     <string name="Users_few">%1$d usuários</string>
     <string name="Users_many">%1$d usuários</string>
     <string name="Users_other">%1$d usuários</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_one">Mensagem encaminhada</string>
+    <string name="ForwardedMessage_two">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_few">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_many">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedMessage_other">%1$d mensagens encaminhadas</string>
+    <string name="ForwardedFile_zero">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_one">Arquivo encaminhado</string>
+    <string name="ForwardedFile_two">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_few">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_many">%1$d arquivos encaminhados</string>
+    <string name="ForwardedFile_other">%1$d arquivos encaminhados</string>
+    <string name="ForwardedPhoto_zero">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_one">Foto encaminhada</string>
+    <string name="ForwardedPhoto_two">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_few">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_many">%1$d fotos encaminhadas</string>
+    <string name="ForwardedPhoto_other">%1$d fotos encaminhadas</string>
+    <string name="ForwardedVideo_zero">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_one">Vídeo encaminhado</string>
+    <string name="ForwardedVideo_two">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_few">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_many">%1$d vídeos encaminhados</string>
+    <string name="ForwardedVideo_other">%1$d vídeos encaminhados</string>
+    <string name="ForwardedAudio_zero">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_one">Áudio encaminhado</string>
+    <string name="ForwardedAudio_two">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_few">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_many">%1$d áudios encaminhados</string>
+    <string name="ForwardedAudio_other">%1$d áudios encaminhados</string>
+    <string name="ForwardedLocation_zero">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_one">Localização encaminhada</string>
+    <string name="ForwardedLocation_two">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_few">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_many">%1$d localizações encaminhadas</string>
+    <string name="ForwardedLocation_other">%1$d localizações encaminhadas</string>
+    <string name="ForwardedContact_zero">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_one">Contato encaminhado</string>
+    <string name="ForwardedContact_two">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_few">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_many">%1$d contatos encaminhados</string>
+    <string name="ForwardedContact_other">%1$d contatos encaminhados</string>
+    <string name="ForwardedSticker_zero">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_one">Sticker encaminhado</string>
+    <string name="ForwardedSticker_two">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_few">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_many">%1$d stickers encaminhados</string>
+    <string name="ForwardedSticker_other">%1$d stickers encaminhados</string>
+    <string name="AndOther_zero">e %1$d outros</string>
+    <string name="AndOther_one">e %1$d outro</string>
+    <string name="AndOther_two">e %1$d outros</string>
+    <string name="AndOther_few">e %1$d outros</string>
+    <string name="AndOther_many">e %1$d outros</string>
+    <string name="AndOther_other">e %1$d outros</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">dd MMM</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index c00bb8937..8990754bf 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -300,6 +300,8 @@
     <string name="NotificationsOther">Other</string>
     <string name="NotificationsDisabled">Disabled</string>
     <string name="VibrationDisabled">Disabled</string>
+    <string name="LedDisabled">Disabled</string>
+    <string name="RepeatDisabled">Off</string>
     <!--passcode view-->
     <string name="Passcode">Passcode</string>
     <string name="ChangePasscode">Change Passcode</string>
@@ -358,6 +360,9 @@
     <string name="Grain">Grain</string>
     <string name="Sharpen">Sharpen</string>
     <string name="Blur">Blur</string>
+    <string name="BlurOff">Off</string>
+    <string name="BlurLinear">Linear</string>
+    <string name="BlurRadial">Radial</string>
     <string name="AreYouSureDeletePhoto">Are you sure you want to delete this photo?</string>
     <string name="AreYouSureDeleteVideo">Are you sure you want to delete this video?</string>
     <string name="DiscardChanges">Discard changes?</string>
@@ -556,12 +561,6 @@
     <string name="items_few">%1$d items</string>
     <string name="items_many">%1$d items</string>
     <string name="items_other">%1$d items</string>
-    <string name="FromContacts_zero">from no contacts</string>
-    <string name="FromContacts_one">from %1$d contact</string>
-    <string name="FromContacts_two">from %1$d contacts</string>
-    <string name="FromContacts_few">from %1$d contacts</string>
-    <string name="FromContacts_many">from %1$d contacts</string>
-    <string name="FromContacts_other">from %1$d contacts</string>
     <string name="FromChats_zero">from no chats</string>
     <string name="FromChats_one">from %1$d chat</string>
     <string name="FromChats_two">from %1$d chats</string>
@@ -616,6 +615,61 @@
     <string name="Users_few">%1$d users</string>
     <string name="Users_many">%1$d users</string>
     <string name="Users_other">%1$d users</string>
+    <!--forwarded messages-->
+    <string name="ForwardedMessage_zero">%1$d forwarded messages</string>
+    <string name="ForwardedMessage_one">Forwarded message</string>
+    <string name="ForwardedMessage_two">%1$d forwarded messages</string>
+    <string name="ForwardedMessage_few">%1$d forwarded messages</string>
+    <string name="ForwardedMessage_many">%1$d forwarded messages</string>
+    <string name="ForwardedMessage_other">%1$d forwarded messages</string>
+    <string name="ForwardedFile_zero">%1$d forwarded files</string>
+    <string name="ForwardedFile_one">Forwarded file</string>
+    <string name="ForwardedFile_two">%1$d forwarded files</string>
+    <string name="ForwardedFile_few">%1$d forwarded files</string>
+    <string name="ForwardedFile_many">%1$d forwarded files</string>
+    <string name="ForwardedFile_other">%1$d forwarded files</string>
+    <string name="ForwardedPhoto_zero">%1$d forwarded photos</string>
+    <string name="ForwardedPhoto_one">Forwarded photo</string>
+    <string name="ForwardedPhoto_two">%1$d forwarded photos</string>
+    <string name="ForwardedPhoto_few">%1$d forwarded photos</string>
+    <string name="ForwardedPhoto_many">%1$d forwarded photos</string>
+    <string name="ForwardedPhoto_other">%1$d forwarded photos</string>
+    <string name="ForwardedVideo_zero">%1$d forwarded videos</string>
+    <string name="ForwardedVideo_one">Forwarded video</string>
+    <string name="ForwardedVideo_two">%1$d forwarded videos</string>
+    <string name="ForwardedVideo_few">%1$d forwarded videos</string>
+    <string name="ForwardedVideo_many">%1$d forwarded videos</string>
+    <string name="ForwardedVideo_other">%1$d forwarded videos</string>
+    <string name="ForwardedAudio_zero">%1$d forwarded audios</string>
+    <string name="ForwardedAudio_one">Forwarded audio</string>
+    <string name="ForwardedAudio_two">%1$d forwarded audios</string>
+    <string name="ForwardedAudio_few">%1$d forwarded audios</string>
+    <string name="ForwardedAudio_many">%1$d forwarded audios</string>
+    <string name="ForwardedAudio_other">%1$d forwarded audios</string>
+    <string name="ForwardedLocation_zero">%1$d forwarded locations</string>
+    <string name="ForwardedLocation_one">Forwarded location</string>
+    <string name="ForwardedLocation_two">%1$d forwarded locations</string>
+    <string name="ForwardedLocation_few">%1$d forwarded locations</string>
+    <string name="ForwardedLocation_many">%1$d forwarded locations</string>
+    <string name="ForwardedLocation_other">%1$d forwarded locations</string>
+    <string name="ForwardedContact_zero">%1$d forwarded contacts</string>
+    <string name="ForwardedContact_one">Forwarded contact</string>
+    <string name="ForwardedContact_two">%1$d forwarded contacts</string>
+    <string name="ForwardedContact_few">%1$d forwarded contacts</string>
+    <string name="ForwardedContact_many">%1$d forwarded contacts</string>
+    <string name="ForwardedContact_other">%1$d forwarded contacts</string>
+    <string name="ForwardedSticker_zero">%1$d forwarded stickers</string>
+    <string name="ForwardedSticker_one">Forwarded sticker</string>
+    <string name="ForwardedSticker_two">%1$d forwarded stickers</string>
+    <string name="ForwardedSticker_few">%1$d forwarded stickers</string>
+    <string name="ForwardedSticker_many">%1$d forwarded stickers</string>
+    <string name="ForwardedSticker_other">%1$d forwarded stickers</string>
+    <string name="AndOther_zero">and %1$d others</string>
+    <string name="AndOther_one">and %1$d other</string>
+    <string name="AndOther_two">and %1$d others</string>
+    <string name="AndOther_few">and %1$d others</string>
+    <string name="AndOther_many">and %1$d others</string>
+    <string name="AndOther_other">and %1$d others</string>
     <!--date formatters-->
     <string name="formatterMonthYear">MMMM yyyy</string>
     <string name="formatterMonth">MMM dd</string>
