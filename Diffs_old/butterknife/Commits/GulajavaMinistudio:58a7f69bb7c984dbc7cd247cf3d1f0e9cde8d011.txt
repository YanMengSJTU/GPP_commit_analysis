diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java
new file mode 100644
index 00000000..6c08cfbd
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java
@@ -0,0 +1,265 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsSpinner;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnItemClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import com.example.butterknife.library.SimpleAdapter;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnItemClickTest {
+    static class TestSpinner extends AbsSpinner {
+        public TestSpinner(Context context) {
+            super(context);
+            setAdapter(new SimpleAdapter(context));
+        }
+
+        void performItemClick(int position) {
+            if (position < 0) {
+                return;
+            }
+
+            AdapterView.OnItemClickListener listener = getOnItemClickListener();
+            if (listener != null) {
+                listener.onItemClick(this, null, position, NO_ID);
+            }
+        }
+    }
+
+    static final class Simple {
+        int clickedPosition = -1;
+
+        @OnItemClick(1) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void simple() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        Simple target = new Simple();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+
+    static final class MultipleBindings {
+        int clickedPosition1 = -1;
+        int clickedPosition2 = -1;
+
+        @OnItemClick(1) void itemClick1(int position) {
+            clickedPosition1 = position;
+        }
+
+        @OnItemClick(1) void itemClick2(int position) {
+            clickedPosition2 = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleBindings() {
+        assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        MultipleBindings target = new MultipleBindings();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition1);
+        assertEquals(-1, target.clickedPosition2);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition1);
+        assertEquals(0, target.clickedPosition2);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition1);
+        assertEquals(0, target.clickedPosition2);
+    }
+
+
+    static final class Visibilities {
+        int clickedPosition = -1;
+
+        @OnItemClick(1) public void publicItemClick(int position) {
+            clickedPosition = position;
+        }
+
+        @OnItemClick(2) void packageItemClick(int position) {
+            clickedPosition = position;
+        }
+
+        @OnItemClick(3) protected void protectedItemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void visibilities() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+        TestSpinner spinner3 = tree.findViewById(3);
+
+        Visibilities target = new Visibilities();
+        ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        spinner3.performItemClick(2);
+        assertEquals(2, target.clickedPosition);
+    }
+
+    static final class MultipleIds {
+        int clickedPosition = -1;
+
+        @OnItemClick({1, 2}) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleIds() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+
+        MultipleIds target = new MultipleIds();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner1.performItemClick(2);
+        assertEquals(1, target.clickedPosition);
+        spinner2.performItemClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class OptionalId {
+        int clickedPosition = -1;
+
+        @Optional @OnItemClick(1) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdPresent() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdAbsent() {
+        View tree = ViewTree.create(TestSpinner.class, 2);
+        TestSpinner spinner = tree.findViewById(2);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(-1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(0);
+        assertEquals(-1, target.clickedPosition);
+    }
+
+    static final class ArgumentCast {
+        interface MyInterface {}
+
+        View last;
+
+        @OnItemClick(1) void itemClickAdapterView(AdapterView<?> view) {
+            last = view;
+        }
+
+        @OnItemClick(2) void itemClickAbsSpinner(AbsSpinner view) {
+            last = view;
+        }
+
+        @OnItemClick(3) void itemClickMyInterface(ArgumentCast.MyInterface view) {
+            last = (View) view;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void argumentCast() {
+        class MySpinner extends TestSpinner implements ArgumentCast.MyInterface {
+            MySpinner(Context context) {
+                super(context);
+            }
+        }
+
+        Context context = InstrumentationRegistry.getContext();
+        TestSpinner spinner1 = new MySpinner(context);
+        spinner1.setId(1);
+        TestSpinner spinner2 = new MySpinner(context);
+        spinner2.setId(2);
+        TestSpinner spinner3 = new MySpinner(context);
+        spinner3.setId(3);
+        ViewGroup tree = new FrameLayout(context);
+        tree.addView(spinner1);
+        tree.addView(spinner2);
+        tree.addView(spinner3);
+
+        ArgumentCast target = new ArgumentCast();
+        ButterKnife.bind(target, tree);
+
+        spinner1.performItemClick(0);
+        assertSame(spinner1, target.last);
+
+        spinner2.performItemClick(0);
+        assertSame(spinner2, target.last);
+
+        spinner3.performItemClick(0);
+        assertSame(spinner3, target.last);
+    }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java
new file mode 100644
index 00000000..60a2f505
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java
@@ -0,0 +1,267 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsSpinner;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnItemLongClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.library.SimpleAdapter;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnItemLongClickTest {
+    static class TestSpinner extends AbsSpinner {
+        public TestSpinner(Context context) {
+            super(context);
+            setAdapter(new SimpleAdapter(context));
+        }
+
+        boolean performItemLongClick(int position) {
+            if (position >= 0) {
+                AdapterView.OnItemLongClickListener listener = getOnItemLongClickListener();
+                if (listener != null) {
+                    return listener.onItemLongClick(this, null, position, NO_ID);
+                }
+            }
+
+            return false;
+        }
+    }
+
+    static final class Simple {
+        boolean returnValue = true;
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) boolean itemClick(int position) {
+            clickedPosition = position;
+            return returnValue;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void simple() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        Simple target = new Simple();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        assertTrue(spinner.performItemLongClick(0));
+        assertEquals(0, target.clickedPosition);
+
+        target.returnValue = false;
+        assertFalse(spinner.performItemLongClick(1));
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class ReturnVoid {
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) void itemLongClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void returnVoid() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        ReturnVoid target = new ReturnVoid();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        assertTrue(spinner.performItemLongClick(0));
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    static final class Visibilities {
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) public boolean publicItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+
+        @OnItemLongClick(2) boolean packageItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+
+        @OnItemLongClick(3) protected boolean protectedItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void visibilities() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+        TestSpinner spinner3 = tree.findViewById(3);
+
+        Visibilities target = new Visibilities();
+        ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemLongClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        spinner3.performItemLongClick(2);
+        assertEquals(2, target.clickedPosition);
+    }
+
+    static final class MultipleIds {
+        int clickedPosition = -1;
+
+        @OnItemLongClick({1, 2}) boolean itemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleIds() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+
+        MultipleIds target = new MultipleIds();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemLongClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner1.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+        spinner2.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class OptionalId {
+        int clickedPosition = -1;
+
+        @Optional @OnItemLongClick(1) boolean itemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdPresent() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdAbsent() {
+        View tree = ViewTree.create(TestSpinner.class, 2);
+        TestSpinner spinner = tree.findViewById(2);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemLongClick(0);
+        assertEquals(-1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(0);
+        assertEquals(-1, target.clickedPosition);
+    }
+
+    static final class ArgumentCast {
+        interface MyInterface {}
+
+        View last;
+
+        @OnItemLongClick(1) boolean itemLongClickAdapterView(AdapterView<?> view) {
+            last = view;
+            return true;
+        }
+
+        @OnItemLongClick(2) boolean itemLongClickAbsSpinner(AbsSpinner view) {
+            last = view;
+            return true;
+        }
+
+        @OnItemLongClick(3) boolean itemLongClickMyInterface(ArgumentCast.MyInterface view) {
+            last = (View) view;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void argumentCast() {
+        class MySpinner extends TestSpinner implements ArgumentCast.MyInterface {
+            MySpinner(Context context) {
+                super(context);
+            }
+        }
+
+        Context context = InstrumentationRegistry.getContext();
+        TestSpinner spinner1 = new MySpinner(context);
+        spinner1.setId(1);
+        TestSpinner spinner2 = new MySpinner(context);
+        spinner2.setId(2);
+        TestSpinner spinner3 = new MySpinner(context);
+        spinner3.setId(3);
+        ViewGroup tree = new FrameLayout(context);
+        tree.addView(spinner1);
+        tree.addView(spinner2);
+        tree.addView(spinner3);
+
+        ArgumentCast target = new ArgumentCast();
+        ButterKnife.bind(target, tree);
+
+        spinner1.performItemLongClick(0);
+        assertSame(spinner1, target.last);
+
+        spinner2.performItemLongClick(0);
+        assertSame(spinner2, target.last);
+
+        spinner3.performItemLongClick(0);
+        assertSame(spinner3, target.last);
+    }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java
new file mode 100644
index 00000000..497f7096
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java
@@ -0,0 +1,264 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnTouchTest {
+  static final class Simple {
+    boolean returnValue = true;
+    int touches = 0;
+
+    @OnTouch(1) boolean touch() {
+      touches++;
+      return returnValue;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    assertTrue(performTouch(view1));
+    assertEquals(1, target.touches);
+
+    target.returnValue = false;
+    assertFalse(performTouch(view1));
+    assertEquals(2, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(2, target.touches);
+  }
+
+  static final class ReturnVoid {
+    int touches = 0;
+
+    @OnTouch(1) void touch() {
+      touches++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void returnVoid() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    ReturnVoid target = new ReturnVoid();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    assertTrue(performTouch(view1));
+    assertEquals(1, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(1, target.touches);
+  }
+
+  static final class Visibilities {
+    int touches = 0;
+
+    @OnTouch(1) public boolean publicTouch() {
+      touches++;
+      return true;
+    }
+
+    @OnTouch(2) boolean packageTouch() {
+      touches++;
+      return true;
+    }
+
+    @OnTouch(3) protected boolean protectedTouch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    performTouch(view2);
+    assertEquals(2, target.touches);
+
+    performTouch(view3);
+    assertEquals(3, target.touches);
+  }
+
+  static final class MultipleIds {
+    int touches = 0;
+
+    @OnTouch({1, 2}) boolean touch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    performTouch(view2);
+    assertEquals(2, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    performTouch(view2);
+    assertEquals(2, target.touches);
+  }
+
+  static final class OptionalId {
+    int touches = 0;
+
+    @Optional @OnTouch(1) public boolean touch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(1, target.touches);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view2);
+    assertEquals(0, target.touches);
+
+    unbinder.unbind();
+    performTouch(view2);
+    assertEquals(0, target.touches);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnTouch(1) boolean touchView(View view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(2) boolean touchTextView(TextView view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(3) boolean touchButton(Button view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(4) boolean touchMyInterface(ArgumentCast.MyInterface view) {
+      last = (View) view;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    Context context = InstrumentationRegistry.getContext();
+    View view1 = new MyView(context);
+    view1.setId(1);
+    View view2 = new MyView(context);
+    view2.setId(2);
+    View view3 = new MyView(context);
+    view3.setId(3);
+    View view4 = new MyView(context);
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(context);
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    performTouch(view1);
+    assertSame(view1, target.last);
+
+    performTouch(view2);
+    assertSame(view2, target.last);
+
+    performTouch(view3);
+    assertSame(view3, target.last);
+
+    performTouch(view4);
+    assertSame(view4, target.last);
+  }
+
+  private static boolean performTouch(View view) {
+    MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, 0, 0, 0);
+    return view.dispatchTouchEvent(event);
+  }
+}
