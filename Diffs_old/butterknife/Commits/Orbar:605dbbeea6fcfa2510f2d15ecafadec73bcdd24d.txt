diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 2dbffb9d..f489299f 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -9,6 +9,7 @@
 import android.util.Property;
 import android.view.View;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -366,6 +367,14 @@ static void bind(Object target, Object source, Finder finder) {
     }
   }
 
+  /** Apply the specified {@code action} to the view. */
+  public static <T extends View> void apply(T item, Action<? super T> action) {
+    List<T> list = new ArrayList<>();
+    list.add(item);
+    apply(list, action);
+
+  }
+
   /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
   public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {
     for (int i = 0, count = list.size(); i < count; i++) {
@@ -373,6 +382,13 @@ static void bind(Object target, Object source, Finder finder) {
     }
   }
 
+  /** Set the {@code value} using the specified {@code setter} to the view. */
+  public static <T extends View, V> void apply(T item, Setter<? super T, V> setter, V value) {
+    List<T> list = new ArrayList<>();
+    list.add(item);
+    apply(list, setter, value);
+  }
+
   /**
    * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
    */
@@ -385,6 +401,16 @@ static void bind(Object target, Object source, Finder finder) {
     }
   }
 
+  /**
+   * Apply the specified {@code value} across the {@code list} to the view using the {@code property}.
+   */
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  public static <T extends View, V> void apply(T item, Property<? super T, V> setter, V value) {
+    List<T> list = new ArrayList<>();
+    list.add(item);
+    apply(list, setter, value);
+  }
+
   /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
   public static <T extends View> T findById(View view, int id) {
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 34833428..d7345358 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -72,6 +72,14 @@ public void resetViewsCache() {
     assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
   }
 
+  @Test public void propertyAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view).isEnabled();
+    ButterKnife.apply(view, PROPERTY_ENABLED, false);
+
+    assertThat(view).isDisabled();
+  }
+
   @Test public void propertyAppliedToEveryView() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
@@ -88,6 +96,15 @@ public void resetViewsCache() {
     assertThat(view3).isDisabled();
   }
 
+  @Test public void actionAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view).isEnabled();
+
+    ButterKnife.apply(view, ACTION_DISABLE);
+
+    assertThat(view).isDisabled();
+  }
+
   @Test public void actionAppliedToEveryView() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
@@ -104,6 +121,15 @@ public void resetViewsCache() {
     assertThat(view3).isDisabled();
   }
 
+  @Test public void setterAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view).isEnabled();
+
+    ButterKnife.apply(view, SETTER_ENABLED, false);
+
+    assertThat(view).isDisabled();
+  }
+
   @Test public void setterAppliedToEveryView() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
