diff --git a/build.gradle b/build.gradle
index 16704f1f..580fe532 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,6 +3,8 @@ subprojects { project ->
   version = VERSION_NAME
 
   repositories {
+      maven { url 'http://maven.oschina.net/content/groups/public/' }
+      jcenter()
     mavenCentral()
   }
 
@@ -26,6 +28,8 @@ subprojects { project ->
 
   buildscript {
     repositories {
+        maven { url 'http://maven.oschina.net/content/groups/public/' }
+        jcenter()
       mavenCentral()
     }
     dependencies {
@@ -36,7 +40,7 @@ subprojects { project ->
 }
 
 ext {
-  minSdkVersion = 8
+  minSdkVersion = 15
   targetSdkVersion = 23
   compileSdkVersion = 23
   buildToolsVersion = '23.0.1'
@@ -46,11 +50,13 @@ ext {
 
 ext.deps = [
     // Android
-    android: 'com.google.android:android:2.1.2',
+        // 这里是由于 我本地 有 4.1.1 的库 所以改成这样 , 就不需要 再去下一遍了
+//    android: 'com.google.android:android:2.1.2',
+    android: 'com.google.android:android:4.1.1.4',
     supportv4: 'com.android.support:support-v4:23.0.1',
     supportAnnotations: 'com.android.support:support-annotations:23.0.1',
 
-    // Square
+    // Square 这是一个 用于生产.java文件的工具类 apt 的时候用到
     javapoet: 'com.squareup:javapoet:1.4.0',
 
     // Test dependencies
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 3671a751..059cae35 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -35,7 +35,7 @@
         parameters = "android.view.View"
     )
 )
-public @interface OnClick {
+public @interface  OnClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 91e6fb08..b045aded 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -68,6 +68,11 @@
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
+/**
+ * 生成代码的 入口类
+ *
+ * 解析注解 生成相应的代码
+ */
 @AutoService(Processor.class)
 public final class ButterKnifeProcessor extends AbstractProcessor {
   static final int NO_ID = -1;
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index d81e8285..cb33b841 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -10,8 +10,10 @@
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
+
 import butterknife.internal.Finder;
 import butterknife.internal.ViewBinder;
+
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -19,13 +21,13 @@
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
- * <p>
+ * <p/>
  * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
  *   {@literal @}Bind(R.id.title) EditText titleView;
  *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
- *
+ * <p/>
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
  *     setContentView(R.layout.example_activity);
@@ -38,7 +40,7 @@
  * bind can be specified along with an {@linkplain #bind(Object, Activity) activity},
  * {@linkplain #bind(Object, View) view}, or
  * {@linkplain #bind(Object, android.app.Dialog) dialog}.
- * <p>
+ * <p/>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
  * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
@@ -50,7 +52,7 @@
  * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>
  * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
  * </ul>
- * <p>
+ * <p/>
  * To bind listeners to your views you can annotate your methods:
  * <pre><code>
  * {@literal @}OnClick(R.id.submit) void onSubmit() {
@@ -63,7 +65,7 @@
  *   // React to tweet click.
  * }
  * </code></pre>
- * <p>
+ * <p/>
  * Be default, views are required to be present in the layout for both field and method bindings.
  * If a view is optional add a {@code @Nullable} annotation for fields (such as the one in the
  * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
@@ -77,268 +79,342 @@
  * {@literal @}BindInt(R.integer.columns) int columns;
  * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
+ *
+ *
+ *
+ * 主要功能的 实现 其实都依赖  Apt 生成的相关代码
+ *
+ * 这里只是调用 很多借口的方法  具体的实现 还是 apt 生成的代码里面
  */
 public final class ButterKnife {
-  private ButterKnife() {
-    throw new AssertionError("No instances.");
-  }
-
-  /** An unbinder contract that can be bind with {@link butterknife.Unbinder}. */
-  @SuppressWarnings("unused") // Used by generated code.
-  public interface ViewUnbinder<T> {
-    void unbind();
-  }
-
-  /** An action that can be applied to a list of views. */
-  public interface Action<T extends View> {
-    /** Apply the action on the {@code view} which is at {@code index} in the list. */
-    void apply(@NonNull T view, int index);
-  }
-
-  /** A setter that can apply a value to a list of views. */
-  public interface Setter<T extends View, V> {
-    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-    void set(@NonNull T view, V value, int index);
-  }
-
-  private static final String TAG = "ButterKnife";
-  private static boolean debug = false;
-
-  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
-  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
-    @Override public void bind(Finder finder, Object target, Object source) { }
-  };
-
-  /** Control whether debug logging is enabled. */
-  public static void setDebug(boolean debug) {
-    ButterKnife.debug = debug;
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@link Activity}. The current content
-   * view is used as the view root.
-   *
-   * @param target Target activity for view binding.
-   */
-  public static void bind(@NonNull Activity target) {
-    bind(target, target, Finder.ACTIVITY);
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@link View}. The view and its children
-   * are used as the view root.
-   *
-   * @param target Target view for view binding.
-   */
-  @NonNull
-  public static View bind(@NonNull View target) {
-    bind(target, target, Finder.VIEW);
-    return target;
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
-   * view is used as the view root.
-   *
-   * @param target Target dialog for view binding.
-   */
-  @SuppressWarnings("unused") // Public api.
-  public static void bind(@NonNull Dialog target) {
-    bind(target, target, Finder.DIALOG);
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link Activity} as the view root.
-   *
-   * @param target Target class for view binding.
-   * @param source Activity on which IDs will be looked up.
-   */
-  public static void bind(@NonNull Object target, @NonNull Activity source) {
-    bind(target, source, Finder.ACTIVITY);
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link View} as the view root.
-   *
-   * @param target Target class for view binding.
-   * @param source View root on which IDs will be looked up.
-   */
-  @NonNull
-  public static View bind(@NonNull Object target, @NonNull View source) {
-    bind(target, source, Finder.VIEW);
-    return source;
-  }
-
-  /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link Dialog} as the view root.
-   *
-   * @param target Target class for view binding.
-   * @param source Dialog on which IDs will be looked up.
-   */
-  @SuppressWarnings("unused") // Public api.
-  public static void bind(@NonNull Object target, @NonNull Dialog source) {
-    bind(target, source, Finder.DIALOG);
-  }
-
-  static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {
-    Class<?> targetClass = target.getClass();
-    try {
-      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
-      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
-      viewBinder.bind(finder, target, source);
-    } catch (Exception e) {
-      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
-    }
-  }
-
-  @NonNull
-  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
-      throws IllegalAccessException, InstantiationException {
-    ViewBinder<Object> viewBinder = BINDERS.get(cls);
-    if (viewBinder != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
-      return viewBinder;
-    }
-    String clsName = cls.getName();
-    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
-      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NOP_VIEW_BINDER;
-    }
-    try {
-      Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
-      //noinspection unchecked
-      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
-      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
-    } catch (ClassNotFoundException e) {
-      if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      viewBinder = findViewBinderForClass(cls.getSuperclass());
-    }
-    BINDERS.put(cls, viewBinder);
-    return viewBinder;
-  }
-
-  /** Apply the specified {@code actions} across the {@code list} of views. */
-  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(list.get(i), i);
-      }
-    }
-  }
-
-  /** Apply the specified {@code actions} across the {@code array} of views. */
-  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
-      @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(array[i], i);
-      }
-    }
-  }
-
-  /** Apply the specified {@code action} across the {@code list} of views. */
-  public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T> action) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      action.apply(list.get(i), i);
-    }
-  }
-
-  /** Apply the specified {@code action} across the {@code array} of views. */
-  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      action.apply(array[i], i);
-    }
-  }
-
-  /** Apply {@code actions} to {@code view}. */
-  @SafeVarargs public static <T extends View> void apply(@NonNull T view,
-      @NonNull Action<? super T>... actions) {
-    for (Action<? super T> action : actions) {
-      action.apply(view, 0);
-    }
-  }
-
-  /** Apply {@code action} to {@code view}. */
-  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
-    action.apply(view, 0);
-  }
-
-  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value, i);
-    }
-  }
-
-  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value, i);
-    }
-  }
-
-  /** Set {@code value} on {@code view} using {@code setter}. */
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Setter<? super T, V> setter, V value) {
-    setter.set(view, value, 0);
-  }
-
-  /**
-   * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value);
-    }
-  }
-
-  /**
-   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value);
-    }
-  }
-
-  /** Apply {@code value} to {@code view} using {@code property}. */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Property<? super T, V> setter, V value) {
-    setter.set(view, value);
-  }
-
-  /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
-    return (T) view.findViewById(id);
-  }
-
-  /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
-    return (T) activity.findViewById(id);
-  }
-
-  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
-    return (T) dialog.findViewById(id);
-  }
+	private ButterKnife() {
+		// 所有方法都是静态的 不能new 出实例对象
+		throw new AssertionError("No instances.");
+	}
+
+	/**
+	 * An unbinder contract that can be bind with {@link butterknife.Unbinder}.
+	 */
+	@SuppressWarnings("unused") // Used by generated code.
+	public interface ViewUnbinder<T> {
+		void unbind();
+	}
+
+	/**
+	 * An action that can be applied to a list of views.
+	 */
+	public interface Action<T extends View> {
+		/**
+		 * Apply the action on the {@code view} which is at {@code index} in the list.
+		 */
+		void apply(@NonNull T view, int index);
+	}
+
+	/**
+	 * A setter that can apply a value to a list of views.
+	 */
+	public interface Setter<T extends View, V> {
+		/**
+		 * Set the {@code value} on the {@code view} which is at {@code index} in the list.
+		 */
+		void set(@NonNull T view, V value, int index);
+	}
+
+	private static final String TAG = "ButterKnife";
+	private static boolean debug = false;
+
+	// Bang定数据缓存
+	static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
+
+	// 没有Bing 的一个对象  出错时使用
+	static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
+		@Override
+		public void bind(Finder finder, Object target, Object source) {
+		}
+	};
+
+	/**
+	 * Control whether debug logging is enabled.
+	 */
+	public static void setDebug(boolean debug) {
+		ButterKnife.debug = debug;
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@link Activity}. The current content
+	 * view is used as the view root.
+	 *
+	 * @param target Target activity for view binding.
+	 */
+	public static void bind(@NonNull Activity target) {
+		bind(target, target, Finder.ACTIVITY);
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@link View}. The view and its children
+	 * are used as the view root.
+	 *
+	 * @param target Target view for view binding.
+	 */
+	@NonNull
+	public static View bind(@NonNull View target) {
+		bind(target, target, Finder.VIEW);
+		return target;
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@link Dialog}. The current content
+	 * view is used as the view root.
+	 *
+	 * @param target Target dialog for view binding.
+	 */
+	@SuppressWarnings("unused") // Public api.
+	public static void bind(@NonNull Dialog target) {
+		bind(target, target, Finder.DIALOG);
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+	 * {@link Activity} as the view root.
+	 *
+	 * @param target Target class for view binding.
+	 * @param source Activity on which IDs will be looked up.
+	 */
+	public static void bind(@NonNull Object target, @NonNull Activity source) {
+		bind(target, source, Finder.ACTIVITY);
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+	 * {@link View} as the view root.
+	 *
+	 * @param target Target class for view binding.
+	 * @param source View root on which IDs will be looked up.
+	 */
+	@NonNull
+	public static View bind(@NonNull Object target, @NonNull View source) {
+		bind(target, source, Finder.VIEW);
+		return source;
+	}
+
+	/**
+	 * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+	 * {@link Dialog} as the view root.
+	 *
+	 * @param target Target class for view binding.
+	 * @param source Dialog on which IDs will be looked up.
+	 */
+	@SuppressWarnings("unused") // Public api.
+	public static void bind(@NonNull Object target, @NonNull Dialog source) {
+		bind(target, source, Finder.DIALOG);
+	}
+
+	/**
+	 *
+	 * @param target 持有View 的对象
+	 * @param source 多数情况下 是 最外层的 View
+	 * @param finder 不同 类型的finder Finder.DIALOG Finder.VIEW
+	 */
+	static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {
+		Class<?> targetClass = target.getClass();
+		try {
+			if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+			// 更具 类名 去找 自动生产的 类 中的 绑定数据
+			ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+			// Bang定数据,  自动生成类中  会执行 相关的 findViewById 的操作
+			viewBinder.bind(finder, target, source);
+		} catch (Exception e) {
+			throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
+		}
+	}
+
+	/**
+	 * 更具 Bind 的class 找到 自动生成的 对应的 类 并 实例化它
+	 * @param cls
+	 * @return
+	 * @throws IllegalAccessException
+	 * @throws InstantiationException
+	 */
+	@NonNull
+	private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
+			throws IllegalAccessException, InstantiationException {
+		// 先从缓存中 获取
+		ViewBinder<Object> viewBinder = BINDERS.get(cls);
+		if (viewBinder != null) {
+			if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
+			return viewBinder;
+		}
+		String clsName = cls.getName();
+		if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
+			// android 开头的包名 不符合要求  返回一个 没有Bang定数据的 东西
+			if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
+			return NOP_VIEW_BINDER;
+		}
+		try {
+			// 反射  实例
+			Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
+			//noinspection unchecked
+			viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
+			if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
+		} catch (ClassNotFoundException e) {
+			if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
+			// 没找到 就往 父类找 ...
+			// 这循环 有点无耻啊,  出错了就像 父类 寻找... 为什么 不直接向上 父类循环呢?
+			viewBinder = findViewBinderForClass(cls.getSuperclass());
+		}
+		// 加入缓存
+		BINDERS.put(cls, viewBinder);
+		return viewBinder;
+	}
+
+	/**
+	 * Apply the specified {@code actions} across the {@code list} of views.
+	 */
+	@SafeVarargs
+	public static <T extends View> void apply(@NonNull List<T> list,
+											  @NonNull Action<? super T>... actions) {
+		for (int i = 0, count = list.size(); i < count; i++) {
+			for (Action<? super T> action : actions) {
+				action.apply(list.get(i), i);
+			}
+		}
+	}
+
+	/**
+	 * Apply the specified {@code actions} across the {@code array} of views.
+	 */
+	@SafeVarargs
+	public static <T extends View> void apply(@NonNull T[] array,
+											  @NonNull Action<? super T>... actions) {
+		for (int i = 0, count = array.length; i < count; i++) {
+			for (Action<? super T> action : actions) {
+				action.apply(array[i], i);
+			}
+		}
+	}
+
+	/**
+	 * Apply the specified {@code action} across the {@code list} of views.
+	 */
+	public static <T extends View> void apply(@NonNull List<T> list,
+											  @NonNull Action<? super T> action) {
+		for (int i = 0, count = list.size(); i < count; i++) {
+			action.apply(list.get(i), i);
+		}
+	}
+
+	/**
+	 * Apply the specified {@code action} across the {@code array} of views.
+	 */
+	public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
+		for (int i = 0, count = array.length; i < count; i++) {
+			action.apply(array[i], i);
+		}
+	}
+
+	/**
+	 * Apply {@code actions} to {@code view}.
+	 */
+	@SafeVarargs
+	public static <T extends View> void apply(@NonNull T view,
+											  @NonNull Action<? super T>... actions) {
+		for (Action<? super T> action : actions) {
+			action.apply(view, 0);
+		}
+	}
+
+	/**
+	 * Apply {@code action} to {@code view}.
+	 */
+	public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
+		action.apply(view, 0);
+	}
+
+	/**
+	 * Set the {@code value} using the specified {@code setter} across the {@code list} of views.
+	 */
+	public static <T extends View, V> void apply(@NonNull List<T> list,
+												 @NonNull Setter<? super T, V> setter, V value) {
+		for (int i = 0, count = list.size(); i < count; i++) {
+			setter.set(list.get(i), value, i);
+		}
+	}
+
+	/**
+	 * Set the {@code value} using the specified {@code setter} across the {@code array} of views.
+	 */
+	public static <T extends View, V> void apply(@NonNull T[] array,
+												 @NonNull Setter<? super T, V> setter, V value) {
+		for (int i = 0, count = array.length; i < count; i++) {
+			setter.set(array[i], value, i);
+		}
+	}
+
+	/**
+	 * Set {@code value} on {@code view} using {@code setter}.
+	 */
+	public static <T extends View, V> void apply(@NonNull T view,
+												 @NonNull Setter<? super T, V> setter, V value) {
+		setter.set(view, value, 0);
+	}
+
+	/**
+	 * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
+	 */
+	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+	public static <T extends View, V> void apply(@NonNull List<T> list,
+												 @NonNull Property<? super T, V> setter, V value) {
+		//noinspection ForLoopReplaceableByForEach
+		for (int i = 0, count = list.size(); i < count; i++) {
+			setter.set(list.get(i), value);
+		}
+	}
+
+	/**
+	 * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
+	 */
+	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+	public static <T extends View, V> void apply(@NonNull T[] array,
+												 @NonNull Property<? super T, V> setter, V value) {
+		//noinspection ForLoopReplaceableByForEach
+		for (int i = 0, count = array.length; i < count; i++) {
+			setter.set(array[i], value);
+		}
+	}
+
+	/**
+	 * Apply {@code value} to {@code view} using {@code property}.
+	 */
+	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+	public static <T extends View, V> void apply(@NonNull T view,
+												 @NonNull Property<? super T, V> setter, V value) {
+		setter.set(view, value);
+	}
+
+	/**
+	 * Simpler version of {@link View#findViewById(int)} which infers the target type.
+	 */
+	@SuppressWarnings({"unchecked", "UnusedDeclaration"}) // Checked by runtime cast. Public API.
+	@CheckResult
+	public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
+		return (T) view.findViewById(id);
+	}
+
+	/**
+	 * Simpler version of {@link Activity#findViewById(int)} which infers the target type.
+	 */
+	@SuppressWarnings({"unchecked", "UnusedDeclaration"}) // Checked by runtime cast. Public API.
+	@CheckResult
+	public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
+		return (T) activity.findViewById(id);
+	}
+
+	/**
+	 * Simpler version of {@link Dialog#findViewById(int)} which infers the target type.
+	 */
+	@SuppressWarnings({"unchecked", "UnusedDeclaration"}) // Checked by runtime cast. Public API.
+	@CheckResult
+	public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
+		return (T) dialog.findViewById(id);
+	}
 }
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..ca8d7f59 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -5,23 +5,28 @@
 /**
  * A {@linkplain View.OnClickListener click listener} that debounces multiple clicks posted in the
  * same frame. A click on one button disables all buttons for that frame.
+ *
+ * 消除抖动 的 导致一下 点击多次的  OnclickListener
  */
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
-  static boolean enabled = true;
+	static boolean enabled = true;
 
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
+	private static final Runnable ENABLE_AGAIN = new Runnable() {
+		@Override
+		public void run() {
+			enabled = true;
+		}
+	};
 
-  @Override public final void onClick(View v) {
-    if (enabled) {
-      enabled = false;
-      v.post(ENABLE_AGAIN);
-      doClick(v);
-    }
-  }
+	@Override
+	public final void onClick(View v) {
+		if (enabled) {
+			enabled = false;
+			// 通过paost 来处理延时判断
+			v.post(ENABLE_AGAIN);
+			doClick(v);
+		}
+	}
 
-  public abstract void doClick(View v);
+	public abstract void doClick(View v);
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Finder.java b/butterknife/src/main/java/butterknife/internal/Finder.java
index effd6de4..c67073c2 100644
--- a/butterknife/src/main/java/butterknife/internal/Finder.java
+++ b/butterknife/src/main/java/butterknife/internal/Finder.java
@@ -6,106 +6,133 @@
 import android.view.View;
 
 @SuppressWarnings("UnusedDeclaration") // Used by generated code.
+
+/**
+ * 不同 的注解对象的 找View 的方法不用
+ *
+ * 这里分别弄出来了
+ *
+ * 这里是 枚举  单例
+ */
 public enum Finder {
-  VIEW {
-    @Override protected View findView(Object source, int id) {
-      return ((View) source).findViewById(id);
-    }
+	VIEW {
+		// 继承自 finder
+		@Override
+		protected View findView(Object source, int id) {
+			return ((View) source).findViewById(id);
+		}
 
-    @Override public Context getContext(Object source) {
-      return ((View) source).getContext();
-    }
+		@Override
+		public Context getContext(Object source) {
+			return ((View) source).getContext();
+		}
 
-    @Override protected String getResourceEntryName(Object source, int id) {
-      final View view = (View) source;
-      // In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
-      if (view.isInEditMode()) {
-        return "<unavailable while editing>";
-      }
-      return super.getResourceEntryName(source, id);
-    }
-  },
-  ACTIVITY {
-    @Override protected View findView(Object source, int id) {
-      return ((Activity) source).findViewById(id);
-    }
+		@Override
+		protected String getResourceEntryName(Object source, int id) {
+			final View view = (View) source;
+			// In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
+			if (view.isInEditMode()) {
+				return "<unavailable while editing>";
+			}
+			return super.getResourceEntryName(source, id);
+		}
+	},
+	ACTIVITY {
+		@Override
+		protected View findView(Object source, int id) {
+			return ((Activity) source).findViewById(id);
+		}
 
-    @Override public Context getContext(Object source) {
-      return (Activity) source;
-    }
-  },
-  DIALOG {
-    @Override protected View findView(Object source, int id) {
-      return ((Dialog) source).findViewById(id);
-    }
+		@Override
+		public Context getContext(Object source) {
+			return (Activity) source;
+		}
+	},
+	DIALOG {
+		@Override
+		protected View findView(Object source, int id) {
+			return ((Dialog) source).findViewById(id);
+		}
 
-    @Override public Context getContext(Object source) {
-      return ((Dialog) source).getContext();
-    }
-  };
+		@Override
+		public Context getContext(Object source) {
+			return ((Dialog) source).getContext();
+		}
+	};
 
-  public <T> T findRequiredView(Object source, int id, String who) {
-    T view = findOptionalView(source, id, who);
-    if (view == null) {
-      String name = getResourceEntryName(source, id);
-      throw new IllegalStateException("Required view '"
-          + name
-          + "' with ID "
-          + id
-          + " for "
-          + who
-          + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
-          + " (methods) annotation.");
-    }
-    return view;
-  }
+	public <T> T findRequiredView(Object source, int id, String who) {
+		T view = findOptionalView(source, id, who);
+		if (view == null) {
+			String name = getResourceEntryName(source, id);
+			throw new IllegalStateException("Required view '"
+					+ name
+					+ "' with ID "
+					+ id
+					+ " for "
+					+ who
+					+ " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+					+ " (methods) annotation.");
+		}
+		return view;
+	}
 
-  public <T> T findOptionalView(Object source, int id, String who) {
-    View view = findView(source, id);
-    return castView(view, id, who);
-  }
+	public <T> T findOptionalView(Object source, int id, String who) {
+		// 找到View
+		View view = findView(source, id);
+		// 转型
+		return castView(view, id, who);
+	}
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castView(View view, int id, String who) {
-    try {
-      return (T) view;
-    } catch (ClassCastException e) {
-      if (who == null) {
-        throw new AssertionError();
-      }
-      String name = getResourceEntryName(view, id);
-      throw new IllegalStateException("View '"
-          + name
-          + "' with ID "
-          + id
-          + " for "
-          + who
-          + " was of the wrong type. See cause for more info.", e);
-    }
-  }
+	@SuppressWarnings("unchecked") // That's the point.
+	/**
+	 * view 转型
+	 */
+	public <T> T castView(View view, int id, String who) {
+		try {
+			return (T) view;
+		} catch (ClassCastException e) {
+			if (who == null) {
+				throw new AssertionError();
+			}
+			String name = getResourceEntryName(view, id);
+			throw new IllegalStateException("View '"
+					+ name
+					+ "' with ID "
+					+ id
+					+ " for "
+					+ who
+					+ " was of the wrong type. See cause for more info.", e);
+		}
+	}
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-    try {
-      return (T) value;
-    } catch (ClassCastException e) {
-      throw new IllegalStateException("Parameter #"
-          + (fromPosition + 1)
-          + " of method '"
-          + from
-          + "' was of the wrong type for parameter #"
-          + (toPosition + 1)
-          + " of method '"
-          + to
-          + "'. See cause for more info.", e);
-    }
-  }
+	@SuppressWarnings("unchecked") // That's the point.
+	public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
+		try {
+			return (T) value;
+		} catch (ClassCastException e) {
+			throw new IllegalStateException("Parameter #"
+					+ (fromPosition + 1)
+					+ " of method '"
+					+ from
+					+ "' was of the wrong type for parameter #"
+					+ (toPosition + 1)
+					+ " of method '"
+					+ to
+					+ "'. See cause for more info.", e);
+		}
+	}
 
-  protected String getResourceEntryName(Object source, int id) {
-    return getContext(source).getResources().getResourceEntryName(id);
-  }
+	/**
+	 * 获取资的名字
+	 * @param source
+	 * @param id
+	 * @return
+	 */
+	protected String getResourceEntryName(Object source, int id) {
+		return getContext(source).getResources().getResourceEntryName(id);
+	}
 
-  protected abstract View findView(Object source, int id);
+	protected abstract View findView(Object source, int id);
 
-  public abstract Context getContext(Object source);
+	public abstract Context getContext(Object source);
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ImmutableList.java b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
index 35129842..19d17d81 100644
--- a/butterknife/src/main/java/butterknife/internal/ImmutableList.java
+++ b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
@@ -8,26 +8,29 @@
  * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(foo, bar)))}.
  */
 final class ImmutableList<T> extends AbstractList<T> implements RandomAccess {
-  private final T[] views;
+	private final T[] views;
 
-  ImmutableList(T[] views) {
-    this.views = views;
-  }
+	ImmutableList(T[] views) {
+		this.views = views;
+	}
 
-  @Override public T get(int index) {
-    return views[index];
-  }
+	@Override
+	public T get(int index) {
+		return views[index];
+	}
 
-  @Override public int size() {
-    return views.length;
-  }
+	@Override
+	public int size() {
+		return views.length;
+	}
 
-  @Override public boolean contains(Object o) {
-    for (T view : views) {
-      if (view == o) {
-        return true;
-      }
-    }
-    return false;
-  }
+	@Override
+	public boolean contains(Object o) {
+		for (T view : views) {
+			if (view == o) {
+				return true;
+			}
+		}
+		return false;
+	}
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index cd158d50..d6b16965 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -9,104 +9,105 @@
 import android.support.annotation.DrawableRes;
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
+
 import java.lang.reflect.Array;
 import java.util.List;
 
 @SuppressWarnings("deprecation") //
 public final class Utils {
-  private static final boolean HAS_SUPPORT_V4 = hasSupportV4();
+	private static final boolean HAS_SUPPORT_V4 = hasSupportV4();
 
-  private static boolean hasSupportV4() {
-    try {
-      Class.forName("android.support.v4.graphics.drawable.DrawableCompat");
-      return true;
-    } catch (ClassNotFoundException ignored) {
-      return false;
-    }
-  }
+	private static boolean hasSupportV4() {
+		try {
+			Class.forName("android.support.v4.graphics.drawable.DrawableCompat");
+			return true;
+		} catch (ClassNotFoundException ignored) {
+			return false;
+		}
+	}
 
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
-      @DrawableRes int id, @AttrRes int tintAttrId) {
-    if (HAS_SUPPORT_V4) {
-      return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
-    }
-    throw new RuntimeException(
-        "Android support-v4 library is required for @BindDrawable with tint.");
-  }
+	public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
+											 @DrawableRes int id, @AttrRes int tintAttrId) {
+		if (HAS_SUPPORT_V4) {
+			return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
+		}
+		throw new RuntimeException(
+				"Android support-v4 library is required for @BindDrawable with tint.");
+	}
 
-  public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColor(id);
-    }
-    return res.getColor(id, theme);
-  }
+	public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+			return res.getColor(id);
+		}
+		return res.getColor(id, theme);
+	}
 
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
-      @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColorStateList(id);
-    }
-    return res.getColorStateList(id, theme);
-  }
+	public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
+												   @ColorRes int id) {
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+			return res.getColorStateList(id);
+		}
+		return res.getColorStateList(id, theme);
+	}
 
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
-      return res.getDrawable(id);
-    }
-    return res.getDrawable(id, theme);
-  }
+	public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+			return res.getDrawable(id);
+		}
+		return res.getDrawable(id, theme);
+	}
 
-  @SafeVarargs
-  public static <T> T[] arrayOf(T... views) {
-    return filterNull(views);
-  }
+	@SafeVarargs
+	public static <T> T[] arrayOf(T... views) {
+		return filterNull(views);
+	}
 
-  @SafeVarargs
-  public static <T> List<T> listOf(T... views) {
-    return new ImmutableList<>(filterNull(views));
-  }
+	@SafeVarargs
+	public static <T> List<T> listOf(T... views) {
+		return new ImmutableList<>(filterNull(views));
+	}
 
-  private static <T> T[] filterNull(T[] views) {
-    int end = 0;
-    int length = views.length;
-    for (int i = 0; i < length; i++) {
-      T view = views[i];
-      if (view != null) {
-        views[end++] = view;
-      }
-    }
-    if (end == length) {
-      return views;
-    }
-    //noinspection unchecked
-    T[] newViews = (T[]) Array.newInstance(views.getClass().getComponentType(), end);
-    System.arraycopy(views, 0, newViews, 0, end);
-    return newViews;
-  }
+	private static <T> T[] filterNull(T[] views) {
+		int end = 0;
+		int length = views.length;
+		for (int i = 0; i < length; i++) {
+			T view = views[i];
+			if (view != null) {
+				views[end++] = view;
+			}
+		}
+		if (end == length) {
+			return views;
+		}
+		//noinspection unchecked
+		T[] newViews = (T[]) Array.newInstance(views.getClass().getComponentType(), end);
+		System.arraycopy(views, 0, newViews, 0, end);
+		return newViews;
+	}
 
-  static class SupportV4 {
-    private static final TypedValue OUT_VALUE = new TypedValue();
+	static class SupportV4 {
+		private static final TypedValue OUT_VALUE = new TypedValue();
 
-    static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
-        @AttrRes int tintAttributeId) {
-      boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
-      if (!attributeFound) {
-        throw new Resources.NotFoundException("Required tint color attribute with name "
-            + res.getResourceEntryName(tintAttributeId)
-            + " and attribute ID "
-            + tintAttributeId
-            + " was not found.");
-      }
+		static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
+										  @AttrRes int tintAttributeId) {
+			boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
+			if (!attributeFound) {
+				throw new Resources.NotFoundException("Required tint color attribute with name "
+						+ res.getResourceEntryName(tintAttributeId)
+						+ " and attribute ID "
+						+ tintAttributeId
+						+ " was not found.");
+			}
 
-      Drawable drawable = getDrawable(res, theme, id);
-      drawable = DrawableCompat.wrap(drawable.mutate());
-      int color = getColor(res, theme, OUT_VALUE.resourceId);
-      DrawableCompat.setTint(drawable, color);
-      return drawable;
-    }
-  }
+			Drawable drawable = getDrawable(res, theme, id);
+			drawable = DrawableCompat.wrap(drawable.mutate());
+			int color = getColor(res, theme, OUT_VALUE.resourceId);
+			DrawableCompat.setTint(drawable, color);
+			return drawable;
+		}
+	}
 
-  private Utils() {
-    throw new AssertionError("No instances.");
-  }
+	private Utils() {
+		throw new AssertionError("No instances.");
+	}
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinder.java b/butterknife/src/main/java/butterknife/internal/ViewBinder.java
index f0234899..c82b4019 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinder.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewBinder.java
@@ -1,5 +1,5 @@
 package butterknife.internal;
 
 public interface ViewBinder<T> {
-  void bind(Finder finder, T target, Object source);
+	void bind(Finder finder, T target, Object source);
 }
