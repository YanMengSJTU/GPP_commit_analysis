diff --git a/butterknife-integration-test/src/androidTest/font_licenses.txt b/butterknife-integration-test/src/androidTest/font_licenses.txt
new file mode 100644
index 00000000..0b83a9a7
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/font_licenses.txt
@@ -0,0 +1,93 @@
+Copyright 2006 The Inconsolata Project Authors
+
+This Font Software is licensed under the SIL Open Font License, Version 1.1.
+This license is copied below, and is also available with a FAQ at:
+http://scripts.sil.org/OFL
+
+
+-----------------------------------------------------------
+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
+-----------------------------------------------------------
+
+PREAMBLE
+The goals of the Open Font License (OFL) are to stimulate worldwide
+development of collaborative font projects, to support the font creation
+efforts of academic and linguistic communities, and to provide a free and
+open framework in which fonts may be shared and improved in partnership
+with others.
+
+The OFL allows the licensed fonts to be used, studied, modified and
+redistributed freely as long as they are not sold by themselves. The
+fonts, including any derivative works, can be bundled, embedded, 
+redistributed and/or sold with any software provided that any reserved
+names are not used by derivative works. The fonts and derivatives,
+however, cannot be released under any other type of license. The
+requirement for fonts to remain under this license does not apply
+to any document created using the fonts or their derivatives.
+
+DEFINITIONS
+"Font Software" refers to the set of files released by the Copyright
+Holder(s) under this license and clearly marked as such. This may
+include source files, build scripts and documentation.
+
+"Reserved Font Name" refers to any names specified as such after the
+copyright statement(s).
+
+"Original Version" refers to the collection of Font Software components as
+distributed by the Copyright Holder(s).
+
+"Modified Version" refers to any derivative made by adding to, deleting,
+or substituting -- in part or in whole -- any of the components of the
+Original Version, by changing formats or by porting the Font Software to a
+new environment.
+
+"Author" refers to any designer, engineer, programmer, technical
+writer or other person who contributed to the Font Software.
+
+PERMISSION & CONDITIONS
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of the Font Software, to use, study, copy, merge, embed, modify,
+redistribute, and sell modified and unmodified copies of the Font
+Software, subject to the following conditions:
+
+1) Neither the Font Software nor any of its individual components,
+in Original or Modified Versions, may be sold by itself.
+
+2) Original or Modified Versions of the Font Software may be bundled,
+redistributed and/or sold with any software, provided that each copy
+contains the above copyright notice and this license. These can be
+included either as stand-alone text files, human-readable headers or
+in the appropriate machine-readable metadata fields within text or
+binary files as long as those fields can be easily viewed by the user.
+
+3) No Modified Version of the Font Software may use the Reserved Font
+Name(s) unless explicit written permission is granted by the corresponding
+Copyright Holder. This restriction only applies to the primary font name as
+presented to the users.
+
+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
+Software shall not be used to promote, endorse or advertise any
+Modified Version, except to acknowledge the contribution(s) of the
+Copyright Holder(s) and the Author(s) or with their explicit written
+permission.
+
+5) The Font Software, modified or unmodified, in part or in whole,
+must be distributed entirely under this license, and must not be
+distributed under any other license. The requirement for fonts to
+remain under this license does not apply to any document created
+using the Font Software.
+
+TERMINATION
+This license becomes null and void if any of the above conditions are
+not met.
+
+DISCLAIMER
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
+COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
+DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
+OTHER DEALINGS IN THE FONT SOFTWARE.
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
new file mode 100644
index 00000000..fdfc9c2f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
@@ -0,0 +1,28 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import android.view.animation.Animation;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+
+public final class BindAnimTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(android.R.anim.fade_in) Animation actual;
+  }
+
+  @Test public void anim() {
+    Target target = new Target();
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertNotNull(target.actual); // Check more?
+
+    unbinder.unbind();
+    assertNotNull(target.actual);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
index e4d4846a..792b403f 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
@@ -9,12 +9,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindArrayTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class StringArrayTarget {
     @BindArray(R.array.string_one_two_three) String[] actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
index d46886cb..c918af45 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
@@ -11,12 +11,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static org.junit.Assert.assertTrue;
 
 public final class BindBitmapTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBitmap(R.drawable.pixel) Bitmap actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
index 877af1f9..6a2be219 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
@@ -9,12 +9,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindBoolTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBool(R.bool.just_true) boolean actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
index 7f7a252c..99eaa0d7 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
@@ -10,12 +10,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindColorTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindColor(R.color.red) int actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
index f9c3790f..538e643c 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
@@ -9,12 +9,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindDimenTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindDimen(R.dimen.twelve_point_two_dp) int actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
index cdcef7aa..37f47c50 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
@@ -10,12 +10,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindDrawableTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindDrawable(R.drawable.circle) Drawable actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
index 53c44f1b..5e2e1e8a 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
@@ -10,12 +10,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindFloatTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindFloat(R.dimen.twelve_point_two) float actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
new file mode 100644
index 00000000..b2cb1c57
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
@@ -0,0 +1,53 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static android.graphics.Typeface.BOLD;
+import static com.google.common.truth.Truth.assertThat;
+
+@SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+public final class BindFontTest {
+  private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
+
+  static class TargetTypeface {
+    @BindFont(R.font.inconsolata_regular) Typeface actual;
+  }
+
+  @Test public void typeface() {
+    TargetTypeface target = new TargetTypeface();
+    Typeface expected = ResourcesCompat.getFont(context, R.font.inconsolata_regular);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = BOLD) Typeface actual;
+  }
+
+  @Test public void style() {
+    TargetStyle target = new TargetStyle();
+    Typeface expected =
+        Typeface.create(ResourcesCompat.getFont(context, R.font.inconsolata_regular), BOLD);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
index b6806e74..4900d396 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
@@ -9,12 +9,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindIntTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindInt(R.integer.twelve) int actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
index 9e3586ba..6a8ce976 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
@@ -9,12 +9,11 @@
 import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindStringTest {
   private final Context context = InstrumentationRegistry.getContext();
-  private final View tree = treeWithIds(1);
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindString(R.string.hey) String actual;
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
new file mode 100644
index 00000000..7f7fd62f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
@@ -0,0 +1,27 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewTest {
+  static class TargetView {
+    @BindView(1) View actual;
+  }
+
+  @Test public void view() {
+    View tree = ViewTree.create(1);
+    View expected = tree.findViewById(1);
+
+    TargetView target = new TargetView();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
new file mode 100644
index 00000000..61370435
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
@@ -0,0 +1,47 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewsTest {
+  static class TargetViewArray {
+    @BindViews({1, 2, 3}) View[] actual;
+  }
+
+  @Test public void array() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewArray target = new TargetViewArray();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).asList().containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+  static class TargetViewList {
+    @BindViews({1, 2, 3}) List<View> actual;
+  }
+
+  @Test public void list() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewList target = new TargetViewList();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
new file mode 100644
index 00000000..d2ecc713
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
@@ -0,0 +1,238 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CompoundButton;
+import android.widget.FrameLayout;
+import android.widget.ToggleButton;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnCheckedChanged;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnCheckedChangedTest {
+  static final class Simple {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class MultipleBindings {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click1() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(1) void clicks2() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleBindings() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) public void publicClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(2) void packageClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(3) protected void protectedClick() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    view3.performClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnCheckedChanged({1, 2}) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    view2.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnCheckedChanged(1) public void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(ToggleButton.class, 2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnCheckedChanged(1) void clickTextView(CompoundButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(2) void clickButton(ToggleButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(3) void clickMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends ToggleButton implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performClick();
+    assertSame(view1, target.last);
+
+    view2.performClick();
+    assertSame(view2, target.last);
+
+    view3.performClick();
+    assertSame(view3, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
index 25688519..9893f1a4 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
@@ -7,6 +7,7 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 import butterknife.Optional;
@@ -14,7 +15,6 @@
 import com.example.butterknife.BuildConfig;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assume.assumeFalse;
@@ -29,8 +29,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void simple() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     Simple target = new Simple();
@@ -57,10 +58,11 @@
     }
   }
 
+  @UiThreadTest
   @Test public void multipleBindings() {
     assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
 
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     MultipleBindings target = new MultipleBindings();
@@ -91,8 +93,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void visibilities() {
-    View tree = treeWithIds(1, 2, 3);
+    View tree = ViewTree.create(1, 2, 3);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
     View view3 = tree.findViewById(3);
@@ -119,8 +122,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void multipleIds() {
-    View tree = treeWithIds(1, 2);
+    View tree = ViewTree.create(1, 2);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
 
@@ -148,8 +152,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void optionalIdPresent() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     OptionalId target = new OptionalId();
@@ -164,8 +169,9 @@
     assertEquals(1, target.clicks);
   }
 
+  @UiThreadTest
   @Test public void optionalIdAbsent() {
-    View tree = treeWithIds(2);
+    View tree = ViewTree.create(2);
     View view2 = tree.findViewById(2);
 
     OptionalId target = new OptionalId();
@@ -202,6 +208,7 @@
     }
   }
 
+  @UiThreadTest
   @Test public void argumentCast() {
     class MyView extends Button implements ArgumentCast.MyInterface {
       MyView(Context context) {
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
index 05ac6c4b..019f5b9e 100644
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
@@ -7,13 +7,13 @@
 import android.widget.FrameLayout;
 import android.widget.TextView;
 import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
 import butterknife.ButterKnife;
 import butterknife.OnLongClick;
 import butterknife.Optional;
 import butterknife.Unbinder;
 import org.junit.Test;
 
-import static com.example.butterknife.functional.ViewTestUtils.treeWithIds;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertSame;
@@ -31,8 +31,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void simple() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     Simple target = new Simple();
@@ -59,8 +60,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void returnVoid() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     ReturnVoid target = new ReturnVoid();
@@ -94,8 +96,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void visibilities() {
-    View tree = treeWithIds(1, 2, 3);
+    View tree = ViewTree.create(1, 2, 3);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
     View view3 = tree.findViewById(3);
@@ -123,8 +126,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void multipleIds() {
-    View tree = treeWithIds(1, 2);
+    View tree = ViewTree.create(1, 2);
     View view1 = tree.findViewById(1);
     View view2 = tree.findViewById(2);
 
@@ -153,8 +157,9 @@
     }
   }
 
+  @UiThreadTest
   @Test public void optionalIdPresent() {
-    View tree = treeWithIds(1);
+    View tree = ViewTree.create(1);
     View view1 = tree.findViewById(1);
 
     OptionalId target = new OptionalId();
@@ -169,8 +174,9 @@
     assertEquals(1, target.clicks);
   }
 
+  @UiThreadTest
   @Test public void optionalIdAbsent() {
-    View tree = treeWithIds(2);
+    View tree = ViewTree.create(2);
     View view2 = tree.findViewById(2);
 
     OptionalId target = new OptionalId();
@@ -211,6 +217,7 @@
     }
   }
 
+  @UiThreadTest
   @Test public void argumentCast() {
     class MyView extends Button implements ArgumentCast.MyInterface {
       MyView(Context context) {
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java
deleted file mode 100644
index 47b203a0..00000000
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTestUtils.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.example.butterknife.functional;
-
-import android.content.Context;
-import android.view.View;
-import android.widget.FrameLayout;
-import androidx.test.InstrumentationRegistry;
-
-final class ViewTestUtils {
-  static View treeWithIds(int... ids) {
-    Context context = InstrumentationRegistry.getContext();
-    FrameLayout group = new FrameLayout(context);
-
-    class SuperGrossView extends View {
-      SuperGrossView(Context context) {
-        super(context);
-      }
-
-      @Override public boolean post(Runnable action) {
-        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
-        action.run();
-        return true;
-      }
-    }
-
-    for (int id : ids) {
-      View view = new SuperGrossView(context);
-      view.setId(id);
-      group.addView(view);
-    }
-    return group;
-  }
-
-  private ViewTestUtils() {
-  }
-}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
new file mode 100644
index 00000000..cae85884
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
@@ -0,0 +1,52 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import java.lang.reflect.InvocationTargetException;
+
+final class ViewTree {
+  static View create(int... ids) {
+    return create(View.class, ids);
+  }
+
+  static View create(Class<? extends View> cls, int... ids) {
+    Context context = InstrumentationRegistry.getContext();
+    ViewGroup group = new FrameLayout(context);
+    for (int id : ids) {
+      View view;
+      if (cls == View.class) {
+        view = new NoPostView(context);
+      } else {
+        try {
+          view = cls.getConstructor(Context.class).newInstance(context);
+        } catch (IllegalAccessException | InstantiationException | NoSuchMethodException e) {
+          throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
+          Throwable cause = e.getCause();
+          if (cause instanceof RuntimeException) throw (RuntimeException) cause;
+          if (cause instanceof Error) throw (Error) cause;
+          throw new RuntimeException(cause);
+        }
+      }
+
+      view.setId(id);
+      group.addView(view);
+    }
+    return group;
+  }
+
+  private static final class NoPostView extends View {
+    NoPostView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean post(Runnable action) {
+      // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+      action.run();
+      return true;
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf
new file mode 100644
index 00000000..fc981ce7
Binary files /dev/null and b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf differ
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
new file mode 100644
index 00000000..79bd2521
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindAnimFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(1) String actual;
+  }
+
+  @Test public void typeMustBeAnimation() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindAnim field type must be 'Animation'. "
+              + "(com.example.butterknife.functional.BindAnimFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
new file mode 100644
index 00000000..5740af10
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
@@ -0,0 +1,31 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindArray;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindArrayFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindArray(1) String actual;
+  }
+
+  @Test public void typeMustBeSupported() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindArray field type must be one of: "
+              + "String[], int[], CharSequence[], android.content.res.TypedArray. "
+              + "(com.example.butterknife.functional.BindArrayFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
new file mode 100644
index 00000000..c46c3295
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBitmap;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBitmapFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBitmap(1) String actual;
+  }
+
+  @Test public void typeMustBeBitmap() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBitmap field type must be 'Bitmap'. "
+              + "(com.example.butterknife.functional.BindBitmapFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
new file mode 100644
index 00000000..d0b23508
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBool;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBoolFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBool(1) String actual;
+  }
+
+  @Test public void typeMustBeBool() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBool field type must be 'boolean'. "
+              + "(com.example.butterknife.functional.BindBoolFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
new file mode 100644
index 00000000..eb666f49
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindColorFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindColor(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindColor field type must be 'int' or 'ColorStateList'. "
+              + "(com.example.butterknife.functional.BindColorFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
new file mode 100644
index 00000000..8bbddfbf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDimen;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDimenFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDimen(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDimen field type must be 'int' or 'float'. "
+              + "(com.example.butterknife.functional.BindDimenFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
new file mode 100644
index 00000000..74cc0b4e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDrawable;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDrawableFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDrawable(1) String actual;
+  }
+
+  @Test public void typeMustBeDrawable() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDrawable field type must be 'Drawable'. "
+              + "(com.example.butterknife.functional.BindDrawableFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
new file mode 100644
index 00000000..c188d977
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindFloat;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFloatFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindFloat(1) String actual;
+  }
+
+  @Test public void typeMustBeFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFloat field type must be 'float'. "
+              + "(com.example.butterknife.functional.BindFloatFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
new file mode 100644
index 00000000..fcbca3fb
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
@@ -0,0 +1,51 @@
+package com.example.butterknife.functional;
+
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFontFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class TargetType {
+    @BindFont(1) String actual;
+  }
+
+  @Test public void typeMustBeTypeface() {
+    TargetType target = new TargetType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont field type must be 'Typeface'. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetType.actual)");
+    }
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = 5) Typeface actual;
+  }
+
+  @SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+  @Test public void styleMustBeValid() {
+    TargetStyle target = new TargetStyle();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetStyle.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
new file mode 100644
index 00000000..cdd970ce
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindInt;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindIntFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindInt(1) String actual;
+  }
+
+  @Test public void typeMustBeInt() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindInt field type must be 'int'. "
+              + "(com.example.butterknife.functional.BindIntFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
new file mode 100644
index 00000000..f68d78bf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindString;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindStringFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindString(1) boolean actual;
+  }
+
+  @Test public void typeMustBeString() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindString field type must be 'String'. "
+              + "(com.example.butterknife.functional.BindStringFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
new file mode 100644
index 00000000..912b68bc
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NotView {
+    @BindView(1) String actual;
+  }
+
+  @Test public void failsIfNotView() {
+    NotView target = new NotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindView fields must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewFailureTest$NotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
new file mode 100644
index 00000000..78983566
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
@@ -0,0 +1,100 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import java.util.Deque;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewsFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NoIds {
+    @BindViews({}) View[] actual;
+  }
+
+  @Test public void failsIfNoIds() {
+    NoIds target = new NoIds();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must specify at least one ID. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoIds.actual)");
+    }
+  }
+
+  static class NoGenericType {
+    @BindViews(1) List actual;
+  }
+
+  @Test public void failsIfNoGenericType() {
+    NoGenericType target = new NoGenericType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List must have a generic component. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoGenericType.actual)");
+    }
+  }
+
+  static class BadCollection {
+    @BindViews(1) Deque<View> actual;
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    BadCollection target = new BadCollection();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must be a List or array. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$BadCollection.actual)");
+    }
+  }
+
+  static class ListNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfGenericNotView() {
+    ListNotView target = new ListNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ListNotView.actual)");
+    }
+  }
+
+  static class ArrayNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfArrayNotView() {
+    ArrayNotView target = new ArrayNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ArrayNotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
index cbbd494e..fcf3fff5 100644
--- a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -17,6 +17,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.TextView;
@@ -245,6 +246,15 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
 
     int id = bindView.value();
     Class<?> viewClass = field.getType();
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindView fields must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
+    }
+
     String who = "field '" + field.getName() + "'";
     Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
     trySet(field, target, view);
@@ -271,13 +281,37 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
         // TODO real rawType impl!!!!
         viewClass = (Class<?>) viewType;
       } else {
-        throw new IllegalStateException(); // TODO
+        throw new IllegalStateException("@BindViews List must have a generic component. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
       }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindViews must be a List or array. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindViews List or array type must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
     }
 
     int[] ids = bindViews.value();
+    if (ids.length == 0) {
+      throw new IllegalStateException("@BindViews must specify at least one ID. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+
     List<Object> views = new ArrayList<>(ids.length);
     String who = "field '" + field.getName() + "'";
     for (int id : ids) {
@@ -307,14 +341,18 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     validateMember(field);
 
     int id = bindAnim.value();
-    Resources resources = source.getContext().getResources();
+    Context context = source.getContext();
 
     Object value;
     Class<?> fieldType = field.getType();
     if (fieldType == Animation.class) {
-      value = resources.getAnimation(id);
+      value = AnimationUtils.loadAnimation(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindAnim field type must be 'Animation'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -344,10 +382,20 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
       } else if (componentType == CharSequence.class) {
         value = resources.getTextArray(id);
       } else {
-        throw new IllegalStateException(); // TODO
+        throw new IllegalStateException("@BindArray field type must be one of: "
+            + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
       }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindArray field type must be one of: "
+          + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -369,7 +417,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == Bitmap.class) {
       value = BitmapFactory.decodeResource(resources, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindBitmap field type must be 'Bitmap'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -391,7 +443,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == boolean.class) {
       value = resources.getBoolean(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindBool field type must be 'boolean'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -415,7 +471,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     } else if (fieldType == ColorStateList.class) {
       value = ContextCompat.getColorStateList(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindColor field type must be 'int' or 'ColorStateList'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -439,7 +499,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     } else if (fieldType == float.class) {
       value = resources.getDimension(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindDimen field type must be 'int' or 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -464,7 +528,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
           ? Utils.getTintedDrawable(context, id, tint)
           : ContextCompat.getDrawable(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindDrawable field type must be 'Drawable'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -486,7 +554,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == float.class) {
       value = Utils.getFloat(context, id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindFloat field type must be 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -508,11 +580,29 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     Object value;
     if (fieldType == Typeface.class) {
       Typeface font = ResourcesCompat.getFont(context, id);
-      value = style != Typeface.NORMAL
-          ? Typeface.create(font, style)
-          : font;
+      switch (style) {
+        case Typeface.NORMAL:
+          value = font;
+          break;
+        case Typeface.BOLD:
+        case Typeface.ITALIC:
+        case Typeface.BOLD_ITALIC:
+          value = Typeface.create(font, style);
+          break;
+        default:
+          throw new IllegalStateException(
+              "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. ("
+                  + field.getDeclaringClass().getName()
+                  + '.'
+                  + field.getName()
+                  + ')');
+      }
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindFont field type must be 'Typeface'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -534,7 +624,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == int.class) {
       value = resources.getInteger(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindInt field type must be 'int'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
@@ -556,7 +650,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     if (fieldType == String.class) {
       value = context.getString(id);
     } else {
-      throw new IllegalStateException(); // TODO
+      throw new IllegalStateException("@BindString field type must be 'String'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
     }
     trySet(field, target, value);
 
diff --git a/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
index 282f660f..34e4a776 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
@@ -12,58 +12,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindAnimTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.animation.Animation;\n"
-        + "import butterknife.BindAnim;\n"
-        + "public class Test {\n"
-        + "  @BindAnim(1) Animation one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.view.View;\n"
-        + "import android.view.animation.AnimationUtils;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void typeMustBeAnimation() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindFontTest.java b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
index 33530604..6374c5a6 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
@@ -9,58 +9,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Test public void simpleTypeface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(1) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import androidx.core.content.res.ResourcesCompat;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void simpleIntSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -114,59 +62,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void style() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import androidx.core.content.res.ResourcesCompat;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void styleSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindViewTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
index 6bd4a21e..76bae63c 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
@@ -13,52 +13,6 @@
 import static java.util.Arrays.asList;
 
 public class BindViewTest {
-  @Test public void bindingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource())
-        .that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingViewNonDebuggable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -305,53 +259,6 @@
         .generatesSources(bindingBaseSource, bindingTestSource);
   }
 
-  @Test public void bindingViewInnerClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Outer {\n"
-        + "  public static class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
-        + "  private Outer.Test target;\n"
-        + "  @UiThread\n"
-        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Outer.Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingViewUppercasePackageName() {
     JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
         + "package com.Example;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
index 25f1de40..db927bef 100644
--- a/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
@@ -13,73 +13,6 @@
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 public class BindViewsTest {
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "  @BindViews(1) public List<View> thing1;\n"
-        + "  @BindViews(2) List<View> thing2;\n"
-        + "  @BindViews(3) protected List<View> thing3;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings();
-  }
-
-  @Test public void bindingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) View[] thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayFilteringNull(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingArrayWithGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -276,56 +209,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void bindingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) List<View> thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.listFilteringNull(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
deleted file mode 100644
index 7eec5ce4..00000000
--- a/butterknife-runtime/src/test/java/butterknife/OnCheckedChangedTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnCheckedChangedTest {
-  @Test public void checkedChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnCheckedChanged;\n"
-        + "public class Test {\n"
-        + "  @OnCheckedChanged(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.CompoundButton;\n"
-        + "import androidx.annotation.CallSuper;\n"
-        + "import androidx.annotation.UiThread;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n"
-        + "      @Override\n"
-        + "      public void onCheckedChanged(CompoundButton p0, boolean p1) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-}
