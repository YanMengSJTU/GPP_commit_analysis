diff --git a/.travis.yml b/.travis.yml
index a890e486..abbc3c43 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,16 +10,22 @@ android:
 jdk:
   - oraclejdk8
 
-before_script:
+before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
   - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
-  # Create and start an emulator for instrumentation tests.
+  # Create and start emulator for the script. Meant to race the install task.
   - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a
   - emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
+
+before_script:
   - android-wait-for-emulator
   - adb shell input keyevent 82
 
+script: ./gradlew check connectedCheck --stacktrace
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 40f287c0..87e55b6f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,19 @@
 Change Log
 ==========
 
+Version 8.8.0 *(2017-08-04)*
+----------------------------
+
+ * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When
+   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded
+   with user-friendly error messages. This reduces the amount of generated code for release builds at the
+   expense of less friendly exceptions when something breaks.
+ * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same
+   functionality.
+ * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to
+   `ResourceCompat`.
+
+
 Version 8.7.0 *(2017-07-07)*
 ----------------------------
 
diff --git a/README.md b/README.md
index f2d97a35..26cde437 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  compile 'com.jakewharton:butterknife:8.7.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
+  compile 'com.jakewharton:butterknife:8.8.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0'
 }
 ```
 
@@ -63,7 +63,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index fb7e13c0..70c0e4e5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,11 +4,11 @@ buildscript {
   ext.versions = [
       'minSdk': 14,
       'compileSdk': 26,
-      'buildTools': '26.0.0',
+      'buildTools': '26.0.1',
 
       'supportLibrary': '26.0.0',
-      'androidPlugin': '3.0.0-alpha8',
-      'androidTools': '26.0.0-alpha8',
+      'androidPlugin': '3.0.0-alpha9',
+      'androidTools': '26.0.0-alpha9',
       'kotlin': '1.1.3-2',
 
       'release': '8.7.0',
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 771a5b56..5707f2bd 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -47,13 +47,13 @@
   }
 
   @Override public boolean requiresResources(int sdk) {
-    return true;
+    return sdk >= 26;
   }
 
   @Override public CodeBlock render(int sdk) {
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
-        : CodeBlock.of("$T.getFont(res, $L)", RESOURCES_COMPAT, id.code);
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index cf270a6d..0f320906 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -2,6 +2,8 @@ package butterknife.plugin
 
 import com.android.build.gradle.AppExtension
 import com.android.build.gradle.AppPlugin
+import com.android.build.gradle.FeatureExtension
+import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
@@ -10,29 +12,61 @@ import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
 import java.io.File
+import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
 class ButterKnifePlugin : Plugin<Project> {
   override fun apply(project: Project) {
     project.plugins.all {
       when (it) {
-        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants)
-        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants)
+        is FeaturePlugin -> {
+          project.extensions[FeatureExtension::class].run {
+            configureR2Generation(project, featureVariants)
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is LibraryPlugin -> {
+          project.extensions[LibraryExtension::class].run {
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is AppPlugin -> {
+          project.extensions[AppExtension::class].run {
+            configureR2Generation(project, applicationVariants)
+          }
+        }
       }
     }
   }
 
-  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {
+  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
+      val outputDir = project.buildDir.resolve(
+          "generated/source/r2/${variant.dirName}")
+
+      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.outputs.dir(outputDir)
+      variant.registerJavaGeneratingTask(task, outputDir)
+
+      val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
-        // TODO proper task registered as source-generating?
-        processResources.doLast {
-          val pathToR = processResources.packageForR.replace('.', File.separatorChar)
+        task.dependsOn(processResources)
+
+        // Though there might be multiple outputs, their R files are all the same. Thus, we only
+        // need to configure the task once with the R.java input and action.
+        if (once.compareAndSet(false, true)) {
+          val rPackage = processResources.packageForR
+          val pathToR = rPackage.replace('.', File.separatorChar)
           val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
 
-          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,
-              processResources.packageForR, "R2")
+          task.apply {
+            inputs.file(rFile)
+
+            doLast {
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+            }
+          }
         }
       }
     }
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index a438fa91..245a4f57 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -24,6 +24,8 @@ android {
     warningsAsErrors true
     showAll true
     explainIssues true
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 
   buildTypes {
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 18e1ac26..8577bb41 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -22,6 +22,8 @@ android {
   lintOptions {
     textReport true
     textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 }
 
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index d7db4c4c..e4090708 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -5,7 +5,6 @@
 import android.app.Dialog;
 import android.os.Build;
 import android.support.annotation.CheckResult;
-import android.support.annotation.IdRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.RequiresApi;
@@ -355,25 +354,4 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
       @NonNull Property<? super T, V> setter, V value) {
     setter.set(view, value);
   }
-
-  /** @deprecated Compile against API 26 and use {@link View#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
-    return view.findViewById(id);
-  }
-
-  /** @deprecated Compile against API 26 and use {@link Activity#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
-    return activity.findViewById(id);
-  }
-
-  /** @deprecated Compile against API 26 and use {@link Dialog#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
-    return dialog.findViewById(id);
-  }
 }
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
index 6d7106b1..290853aa 100644
--- a/butterknife/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -10,7 +10,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void simpleTypeface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -116,7 +115,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void style() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -153,7 +151,7 @@
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, Typeface.BOLD);\n"
+        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
diff --git a/gradle.properties b/gradle.properties
index cd7bef1a..a4db5d39 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.7.1-SNAPSHOT
+VERSION_NAME=9.0.0-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -15,4 +15,4 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
-org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file
+org.gradle.jvmargs=-Xmx1536M
