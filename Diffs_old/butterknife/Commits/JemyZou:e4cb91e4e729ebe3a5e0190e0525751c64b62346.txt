diff --git a/.travis.yml b/.travis.yml
index a890e486..abbc3c43 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,16 +10,22 @@ android:
 jdk:
   - oraclejdk8
 
-before_script:
+before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
   - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
-  # Create and start an emulator for instrumentation tests.
+  # Create and start emulator for the script. Meant to race the install task.
   - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a
   - emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
+
+before_script:
   - android-wait-for-emulator
   - adb shell input keyevent 82
 
+script: ./gradlew check connectedCheck --stacktrace
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 40f287c0..87e55b6f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,19 @@
 Change Log
 ==========
 
+Version 8.8.0 *(2017-08-04)*
+----------------------------
+
+ * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When
+   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded
+   with user-friendly error messages. This reduces the amount of generated code for release builds at the
+   expense of less friendly exceptions when something breaks.
+ * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same
+   functionality.
+ * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to
+   `ResourceCompat`.
+
+
 Version 8.7.0 *(2017-07-07)*
 ----------------------------
 
diff --git a/README.md b/README.md
index f2d97a35..26cde437 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  compile 'com.jakewharton:butterknife:8.7.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
+  compile 'com.jakewharton:butterknife:8.8.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0'
 }
 ```
 
@@ -63,7 +63,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.0'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index f53d45af..70c0e4e5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,15 +1,17 @@
+apply plugin: 'com.github.ben-manes.versions'
+
 buildscript {
   ext.versions = [
-      'minSdk': 9,
+      'minSdk': 14,
       'compileSdk': 26,
-      'buildTools': '26.0.0',
+      'buildTools': '26.0.1',
 
-      'supportLibrary': '25.3.0',
-      'androidPlugin': '2.3.3',
-      'androidTools': '25.3.0',
-      'kotlin': '1.1.2-4',
+      'supportLibrary': '26.0.0',
+      'androidPlugin': '3.0.0-alpha9',
+      'androidTools': '26.0.0-alpha9',
+      'kotlin': '1.1.3-2',
 
-      'release': '8.6.0',
+      'release': '8.7.0',
   ]
 
   ext.deps = [
@@ -21,7 +23,7 @@ buildscript {
           'compat': "com.android.support:support-compat:${versions.supportLibrary}",
           'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
           'test': [
-              'runner': 'com.android.support.test:runner:0.5',
+              'runner': 'com.android.support.test:runner:1.0.0',
           ],
       ],
       'lint': [
@@ -31,10 +33,10 @@ buildscript {
           'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
       ],
       javapoet: 'com.squareup:javapoet:1.9.0',
-      javaparser: 'com.github.javaparser:javaparser-core:3.2.8',
+      javaparser: 'com.github.javaparser:javaparser-core:3.3.0',
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.34',
-      robolectric: 'org.robolectric:robolectric:3.4-rc2',
+      robolectric: 'org.robolectric:robolectric:3.4',
       compiletesting: 'com.google.testing.compile:compile-testing:0.11',
       'auto': [
           'service': 'com.google.auto.service:auto-service:1.0-rc3',
@@ -48,6 +50,21 @@ buildscript {
           'stdLibJre8': "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}",
       ]
   ]
+
+  repositories {
+    mavenCentral()
+    google()
+    maven {
+      url "https://plugins.gradle.org/m2/"
+    }
+  }
+
+  dependencies {
+    classpath deps.android.gradlePlugin
+    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+    classpath 'gradle.plugin.com.kageiit:lintrules:1.1.3'
+  }
 }
 
 subprojects { project ->
@@ -81,19 +98,4 @@ subprojects { project ->
       }
     }
   }
-
-  buildscript {
-    repositories {
-      mavenCentral()
-      google()
-      maven {
-        url "https://plugins.gradle.org/m2/"
-      }
-    }
-    dependencies {
-      classpath deps.android.gradlePlugin
-      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
-      classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
-    }
-  }
 }
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index 28b5784e..f96179a7 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
 sourceCompatibility = JavaVersion.VERSION_1_7
@@ -11,7 +11,7 @@ checkstyle {
 
 dependencies {
   compileOnly deps.android.runtime
-  compile deps.support.annotations
+  api deps.support.annotations
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index f6693f89..46d32b84 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,26 +1,18 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
 sourceCompatibility = JavaVersion.VERSION_1_7
 targetCompatibility = JavaVersion.VERSION_1_7
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
-
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.auto.common
-  compile deps.javapoet
+  implementation project(':butterknife-annotations')
+  implementation deps.auto.common
+  api deps.javapoet
   compileOnly deps.auto.service
   compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
 
 checkstyle {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index fa1a0f59..c5c7bc46 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -359,6 +359,9 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, bool
 
       boolean requiresCast = requiresCast(fieldBinding.getType());
       if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {
+        if (requiresCast) {
+          builder.add("($T) ", fieldBinding.getType());
+        }
         builder.add("source.findViewById($L)", binding.getId().code);
       } else {
         builder.add("$T.find", UTILS);
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 771a5b56..5707f2bd 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -47,13 +47,13 @@
   }
 
   @Override public boolean requiresResources(int sdk) {
-    return true;
+    return sdk >= 26;
   }
 
   @Override public CodeBlock render(int sdk) {
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
-        : CodeBlock.of("$T.getFont(res, $L)", RESOURCES_COMPAT, id.code);
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index 0cb53e7a..74b81994 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'kotlin'
 
 sourceCompatibility = JavaVersion.VERSION_1_8
@@ -7,15 +7,15 @@ targetCompatibility = JavaVersion.VERSION_1_8
 dependencies {
   compileOnly gradleApi()
 
-  compile deps.android.gradlePlugin
-  compile deps.javaparser
-  compile deps.javapoet
-  compile deps.kotlin.stdLibJre8
+  implementation deps.android.gradlePlugin
+  implementation deps.javaparser
+  implementation deps.javapoet
+  implementation deps.kotlin.stdLibJre8
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.support.annotations
-  testCompile deps.compiletesting
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.support.annotations
+  testImplementation deps.compiletesting
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index da715e18..0f320906 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -2,6 +2,8 @@ package butterknife.plugin
 
 import com.android.build.gradle.AppExtension
 import com.android.build.gradle.AppPlugin
+import com.android.build.gradle.FeatureExtension
+import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
@@ -10,29 +12,61 @@ import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
 import java.io.File
+import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
 class ButterKnifePlugin : Plugin<Project> {
   override fun apply(project: Project) {
     project.plugins.all {
       when (it) {
-        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants)
-        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants)
+        is FeaturePlugin -> {
+          project.extensions[FeatureExtension::class].run {
+            configureR2Generation(project, featureVariants)
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is LibraryPlugin -> {
+          project.extensions[LibraryExtension::class].run {
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is AppPlugin -> {
+          project.extensions[AppExtension::class].run {
+            configureR2Generation(project, applicationVariants)
+          }
+        }
       }
     }
   }
 
-  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {
+  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
-      variant.outputs.forEach { output ->
+      val outputDir = project.buildDir.resolve(
+          "generated/source/r2/${variant.dirName}")
+
+      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.outputs.dir(outputDir)
+      variant.registerJavaGeneratingTask(task, outputDir)
+
+      val once = AtomicBoolean()
+      variant.outputs.all { output ->
         val processResources = output.processResources
-        // TODO proper task registered as source-generating?
-        processResources.doLast {
-          val pathToR = processResources.packageForR.replace('.', File.separatorChar)
+        task.dependsOn(processResources)
+
+        // Though there might be multiple outputs, their R files are all the same. Thus, we only
+        // need to configure the task once with the R.java input and action.
+        if (once.compareAndSet(false, true)) {
+          val rPackage = processResources.packageForR
+          val pathToR = rPackage.replace('.', File.separatorChar)
           val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
 
-          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,
-              processResources.packageForR, "R2")
+          task.apply {
+            inputs.file(rFile)
+
+            doLast {
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+            }
+          }
         }
       }
     }
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index 7bf1d4a2..245a4f57 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -24,6 +24,8 @@ android {
     warningsAsErrors true
     showAll true
     explainIssues true
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 
   buildTypes {
@@ -32,13 +34,19 @@ android {
       proguardFile getDefaultProguardFile('proguard-android.txt')
     }
   }
+
+  testOptions {
+    unitTests {
+      includeAndroidResources = true
+    }
+  }
 }
 
 dependencies {
-  compile project(':butterknife')
+  implementation project(':butterknife')
   annotationProcessor project(':butterknife-compiler')
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.robolectric
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.robolectric
 }
diff --git a/butterknife-lint/build.gradle b/butterknife-lint/build.gradle
index 183534bb..8a4b91ff 100644
--- a/butterknife-lint/build.gradle
+++ b/butterknife-lint/build.gradle
@@ -1,17 +1,17 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
 sourceCompatibility = JavaVersion.VERSION_1_8
 targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
-  compile deps.lint.api
-  compile deps.lint.checks
+  implementation deps.lint.api
+  implementation deps.lint.checks
 
-  testCompile deps.junit
-  testCompile deps.lint.core
-  testCompile deps.lint.tests
-  testCompile(deps.truth) {
+  testImplementation deps.junit
+  testImplementation deps.lint.core
+  testImplementation deps.lint.tests
+  testImplementation(deps.truth) {
     exclude group: 'com.google.guava', module: 'guava'
   }
 }
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
index e495c6bf..08cdfda5 100644
--- a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -1,5 +1,6 @@
 package butterknife.lint;
 
+import com.android.tools.lint.client.api.UElementHandler;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
@@ -9,22 +10,22 @@
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.google.common.collect.ImmutableSet;
-import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.JavaRecursiveElementVisitor;
-import com.intellij.psi.PsiAnnotation;
-import com.intellij.psi.PsiClass;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiReferenceExpression;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import org.jetbrains.uast.UAnnotation;
+import org.jetbrains.uast.UClass;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UFile;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
+import org.jetbrains.uast.visitor.AbstractUastVisitor;
 
 /**
  * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
  */
-public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {
+public class InvalidR2UsageDetector extends Detector implements Detector.UastScanner {
   private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
   private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
   private static final String ISSUE_ID = "InvalidR2Usage";
@@ -38,39 +39,48 @@
 
   private static final String R2 = "R2";
 
-  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {
-    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);
+  @Override public List<Class<? extends UElement>> getApplicableUastTypes() {
+    return Collections.singletonList(UClass.class);
   }
 
-  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {
-    return new JavaElementVisitor() {
-      @Override public void visitClass(PsiClass node) {
+  @Override public UElementHandler createUastHandler(final JavaContext context) {
+    return new UElementHandler() {
+      @Override public void visitClass(UClass node) {
         node.accept(new R2UsageVisitor(context));
       }
     };
   }
 
-  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {
+  private static class R2UsageVisitor extends AbstractUastVisitor {
     private final JavaContext context;
 
     R2UsageVisitor(JavaContext context) {
       this.context = context;
     }
 
-    @Override public void visitAnnotation(PsiAnnotation annotation) {
+    @Override public boolean visitAnnotation(UAnnotation annotation) {
       // skip annotations
+      return true;
+    }
+
+    @Override public boolean visitQualifiedReferenceExpression(UQualifiedReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitQualifiedReferenceExpression(node);
     }
 
-    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {
-      detectR2(context, expression);
-      super.visitReferenceExpression(expression);
+    @Override
+    public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitSimpleNameReferenceExpression(node);
     }
 
-    private static void detectR2(JavaContext context, PsiElement node) {
-      PsiClass[] classes = context.getJavaFile().getClasses();
-      if (classes.length > 0 && classes[0].getName() != null) {
-        String qualifiedName = classes[0].getName();
-        if (qualifiedName.contains("_ViewBinder") || qualifiedName.contains("_ViewBinding")
+    private static void detectR2(JavaContext context, UElement node) {
+      UFile sourceFile = context.getUastFile();
+      List<UClass> classes = sourceFile.getClasses();
+      if (!classes.isEmpty() && classes.get(0).getName() != null) {
+        String qualifiedName = classes.get(0).getName();
+        if (qualifiedName.contains("_ViewBinder")
+            || qualifiedName.contains("_ViewBinding")
             || qualifiedName.equals(R2)) {
           // skip generated files and R2
           return;
@@ -82,15 +92,16 @@ private static void detectR2(JavaContext context, PsiElement node) {
       }
     }
 
-    private static boolean isR2Expression(PsiElement node) {
-      if (node.getParent() == null) {
+    private static boolean isR2Expression(UElement node) {
+      UElement parentNode = node.getUastParent();
+      if (parentNode == null) {
         return false;
       }
-      String text = node.getText();
-      PsiElement parent = LintUtils.skipParentheses(node.getParent());
+      String text = node.asSourceString();
+      UElement parent = LintUtils.skipParentheses(parentNode);
       return (text.equals(R2) || text.contains(".R2"))
-          && parent instanceof PsiExpression
-          && endsWithAny(parent.getText(), SUPPORTED_TYPES);
+          && parent instanceof UExpression
+          && endsWithAny(parent.asSourceString(), SUPPORTED_TYPES);
     }
 
     private static boolean endsWithAny(String text, Set<String> possibleValues) {
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
index c150724d..d655f943 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -1,15 +1,13 @@
 package butterknife.lint;
 
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.tools.lint.checks.infrastructure.TestFiles;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
-  private static final String NO_WARNINGS = "No warnings.";
-  private static final TestFile BIND_TEST = TestFiles.java(""
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
+
+public final class InvalidR2UsageDetectorTest {
+  private static final TestFile BIND_TEST = java(""
       + "package sample.r2;\n"
       + "\n"
       + "import java.lang.annotation.ElementType;\n"
@@ -21,7 +19,8 @@
       + "public @interface BindTest {\n"
       + "  int value();\n"
       + "}\n");
-  private static final TestFile R2 = TestFiles.java(""
+
+  private static final TestFile R2 = java(""
       + "package sample.r2;\n"
       + "\n"
       + "public final class R2 {\n"
@@ -62,72 +61,77 @@
       + "  }\n"
       + "}");
 
-  @Override protected Detector getDetector() {
-    return new InvalidR2UsageDetector();
-  }
-
-  @Override protected List<Issue> getIssues() {
-    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
-  }
-
-  public void testNoR2Usage() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample;\n"
-        + "\n"
-        + "class NoR2Usage {\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(R2, file));
+  @Test public void noR2Usage() {
+    lint() //
+        .files(R2, //
+            java("" //
+                + "package sample;\n" //
+                + "class NoR2Usage {}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageInAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageInAnnotations {\n"
-        + "\n"
-        + "  @BindTest(sample.r2.R2.string.res) String test;\n"
-        + "\n"
-        + "  @BindTest(R2.id.res) public void foo() { }\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(file, BIND_TEST, R2));
+  @Test public void usesR2InAnnotations() {
+    lint() //
+        .files(R2, BIND_TEST, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageInAnnotations {\n"
+                + "\n"
+                + "  @BindTest(sample.r2.R2.string.res) String test;\n"
+                + "\n"
+                + "  @BindTest(R2.id.res) public void foo() {}\n"
+                + "}\n") //
+        ) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageOutsideAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageOutsideAnnotations {\n"
-        + "\n"
-        + "  int array = sample.r2.R2.array.res;\n"
-        + "\n"
-        + "  public void foo(int color) {}\n"
-        + "\n"
-        + "  public void bar() {\n"
-        + "    foo(R2.color.res);\n"
-        + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertNotSame(NO_WARNINGS, lintOutput);
-    assertTrue(lintOutput.contains("2 errors, 0 warnings"));
+  @Test public void usesR2OutsideAnnotations() {
+    lint() //
+        .files(R2, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageOutsideAnnotations {\n"
+                + "\n"
+                + "  int array = sample.r2.R2.array.res;\n"
+                + "\n"
+                + "  public void foo(int color) {}\n"
+                + "\n"
+                + "  public void bar() {\n"
+                + "    foo(R2.color.res);\n"
+                + "  }\n"
+                + "}\n" //
+            )) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectErrorCount(2) //
+        .expectWarningCount(0);
   }
 
-  public void testR2UsageWithSuppression() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageWithSuppression {\n"
-        + "\n"
-        + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
-        + "  int bool = sample.r2.R2.bool.res;\n"
-        + "\n"
-        + "  public void foo(int attr) {}\n"
-        + "\n"
-        + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
-        + "  public void bar() {\n"
-        + "    foo(R2.attr.res);\n"
-        + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertSame(NO_WARNINGS, lintOutput);
+  @Test public void usesR2WithSuppression() {
+    lint() //
+        .files(R2, java(""
+            + "package sample.r2;\n"
+            + "\n"
+            + "public class R2UsageWithSuppression {\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  int bool = sample.r2.R2.bool.res;\n"
+            + "\n"
+            + "  public void foo(int attr) {}\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  public void bar() {\n"
+            + "    foo(R2.attr.res);\n"
+            + "  }\n"
+            + "}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 }
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
index 9ad97538..53c7480f 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
@@ -5,7 +5,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 public final class LintRegistryTest {
-  @Test public void issues() throws Exception {
+  @Test public void issues() {
     assertThat(new LintRegistry().getIssues()).contains(InvalidR2UsageDetector.ISSUE);
   }
 }
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index ec41c4f8..8577bb41 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -11,31 +11,39 @@ android {
     consumerProguardFiles 'proguard-rules.txt'
 
     testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+
+    javaCompileOptions {
+      annotationProcessorOptions {
+        includeCompileClasspath = true
+      }
+    }
   }
 
   lintOptions {
     textReport true
     textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 }
 
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.support.annotations
-  compile deps.support.compat
+  api project(':butterknife-annotations')
+  implementation deps.support.annotations
+  api deps.support.compat
 
   lintRules project(':butterknife-lint')
 
-  androidTestCompile deps.junit
-  androidTestCompile deps.truth
-  androidTestCompile deps.support.test.runner
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.support.test.runner
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.compiletesting
-  testCompile files(getRuntimeJar())
-  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
-  testCompile project(':butterknife-compiler')
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.compiletesting
+  testImplementation files(getRuntimeJar())
+  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation project(':butterknife-compiler')
 }
 
 def getRuntimeJar() {
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index d7db4c4c..e4090708 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -5,7 +5,6 @@
 import android.app.Dialog;
 import android.os.Build;
 import android.support.annotation.CheckResult;
-import android.support.annotation.IdRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.RequiresApi;
@@ -355,25 +354,4 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
       @NonNull Property<? super T, V> setter, V value) {
     setter.set(view, value);
   }
-
-  /** @deprecated Compile against API 26 and use {@link View#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
-    return view.findViewById(id);
-  }
-
-  /** @deprecated Compile against API 26 and use {@link Activity#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
-    return activity.findViewById(id);
-  }
-
-  /** @deprecated Compile against API 26 and use {@link Dialog#findViewById(int)}. */
-  @SuppressWarnings("UnusedDeclaration") // Public API.
-  @CheckResult @Deprecated
-  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
-    return dialog.findViewById(id);
-  }
 }
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
index 6d7106b1..290853aa 100644
--- a/butterknife/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -10,7 +10,6 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void simpleTypeface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -116,7 +115,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Ignore("Won't compile until we depend on support library 26.0.0")
   @Test public void style() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -153,7 +151,7 @@
         + "  @UiThread\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
         + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, Typeface.BOLD);\n"
+        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
index 317ff63a..525abe5b 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -102,6 +102,51 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void bindingViewSubclassNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) TextView thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = (TextView) source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
diff --git a/gradle.properties b/gradle.properties
index e9cc60b7..a4db5d39 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.7.1-SNAPSHOT
+VERSION_NAME=9.0.0-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 236af94f..ae3d248e 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ecb0a7cd..5ba837fa 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Fri Jun 23 16:29:33 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-rc-2-all.zip
diff --git a/sample/app/build.gradle b/sample/app/build.gradle
index a6d84fcf..7570238c 100644
--- a/sample/app/build.gradle
+++ b/sample/app/build.gradle
@@ -30,13 +30,13 @@ android {
 }
 
 dependencies {
-  compile deps.release.runtime
+  implementation deps.release.runtime
   annotationProcessor deps.release.compiler
 
-  compile project(':sample:library')
+  implementation project(':sample:library')
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
 
 afterEvaluate {
diff --git a/sample/app/src/main/AndroidManifest.xml b/sample/app/src/main/AndroidManifest.xml
index d8dc9f98..4549e5e3 100644
--- a/sample/app/src/main/AndroidManifest.xml
+++ b/sample/app/src/main/AndroidManifest.xml
@@ -5,10 +5,9 @@
 
   <application
       android:allowBackup="false"
-      android:fullBackupContent="false"
       android:label="@string/app_name"
       android:name=".SimpleApp"
-      tools:ignore="MissingApplicationIcon,UnusedAttribute">
+      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">
 
     <activity
         android:label="@string/app_name"
diff --git a/sample/library/build.gradle b/sample/library/build.gradle
index 089222b7..27111f3e 100644
--- a/sample/library/build.gradle
+++ b/sample/library/build.gradle
@@ -1,4 +1,10 @@
 buildscript {
+  repositories {
+    mavenCentral()
+    jcenter()
+    google()
+  }
+
   dependencies {
     classpath "com.jakewharton:butterknife-gradle-plugin:${versions.release}"
   }
@@ -17,9 +23,9 @@ android {
 }
 
 dependencies {
-  compile deps.release.runtime
+  implementation deps.release.runtime
   annotationProcessor deps.release.compiler
 
-  testCompile deps.junit
-  testCompile deps.truth
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 765bdf23..5f40f5af 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -1,5 +1,6 @@
 package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -54,6 +55,7 @@
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
index 921096d6..567f560b 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -1,5 +1,6 @@
 package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -30,6 +31,7 @@ public SimpleAdapter(Context context) {
     return position;
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override public View getView(int position, View view, ViewGroup parent) {
     ViewHolder holder;
     if (view != null) {
diff --git a/settings.gradle b/settings.gradle
index cc28c278..cd8829a5 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -5,7 +5,7 @@ include ':butterknife-gradle-plugin'
 include ':butterknife-lint'
 include ':butterknife-integration-test'
 
-include ':sample:app'
-include ':sample:library'
+//include ':sample:app'
+//include ':sample:library'
 
 rootProject.name = 'butterknife-parent'
