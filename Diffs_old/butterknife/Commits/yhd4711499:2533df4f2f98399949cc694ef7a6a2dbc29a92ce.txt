diff --git a/README.md b/README.md
index 59a1f063..f49970ca 100644
--- a/README.md
+++ b/README.md
@@ -6,7 +6,7 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@BindView` on fields.
+ * Eliminate `findView` calls by using `@BindView` on fields.
  * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
diff --git a/build.gradle b/build.gradle
index c869f540..f9e260e9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -52,9 +52,9 @@
 //  targetCompatibilityVersion = JavaVersion.VERSION_1_7
 //}
 
-def androidToolsVersion = '25.2.0'
-def supportLibraryVersion = '24.2.1'
-def butterknifeLatestReleaseVersion = '8.4.0'
+//def androidToolsVersion = '25.2.0'
+//def supportLibraryVersion = '24.2.1'
+//def butterknifeLatestReleaseVersion = '8.4.0'
 
 ext.deps = [
     // Android
diff --git a/butterknife/src/main/java/butterknife/ViewSource.kt b/butterknife/src/main/java/butterknife/ViewSource.kt
index 70707ac9..2135a876 100644
--- a/butterknife/src/main/java/butterknife/ViewSource.kt
+++ b/butterknife/src/main/java/butterknife/ViewSource.kt
@@ -8,9 +8,9 @@ import android.view.View
  */
 
 interface ViewSource {
-    fun findViewById(id: Int): View?
+    fun <T : View> findView(id: Int): T?
 
-    fun getContext(): Context
+    fun getContext(): Context?
 
     val isInEditMode: Boolean
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index dfd3d101..b75b6935 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -82,12 +82,12 @@ public static float getFloat(Context context, @DimenRes int id) {
 
   public static <T> T findOptionalViewAsType(ViewSource source, @IdRes int id, String who,
                                              Class<T> cls) {
-    View view = source.findViewById(id);
+    View view = source.findView(id);
     return castView(view, id, who, cls);
   }
 
   public static View findRequiredView(ViewSource source, @IdRes int id, String who) {
-    View view = source.findViewById(id);
+    View view = source.findView(id);
     if (view != null) {
       return view;
     }
@@ -155,8 +155,8 @@ public ViewWrapper(View view) {
     }
 
     @Override
-    public View findViewById(int id) {
-      return view.findViewById(id);
+     public <T extends View> T findView(int id) {
+      return (T)view.findViewById(id);
     }
 
     @Override
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index bb2a5807..632635bb 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -3,7 +3,7 @@
  * boilerplate code for you.
  * <p>
  * <ul>
- * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
+ * <li>Eliminate {@link android.view.View#findViewById findView} calls by using
  * {@link butterknife.BindView @BindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} or array.
  * Operate on all of them at once with
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
index e2e4ef95..b9cc3f8c 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -577,7 +577,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.view = source.findViewById(1);\n"
+        + "    target.view = source.findView(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
index d8b78979..753e0e59 100644
--- a/butterknife/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -401,9 +401,9 @@
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
-        + "        source.findViewById(1), \n"
-        + "        source.findViewById(2), \n"
-        + "        source.findViewById(3));\n"
+        + "        source.findView(1), \n"
+        + "        source.findView(2), \n"
+        + "        source.findView(3));\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 71e21a60..4b89489b 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -481,7 +481,7 @@
         + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
-        + "    view = source.findViewById(1);\n"
+        + "    view = source.findView(1);\n"
         + "    if (view != null) {\n"
         + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
diff --git a/website/index.html b/website/index.html
index fab8be1c..01feb42c 100644
--- a/website/index.html
+++ b/website/index.html
@@ -40,9 +40,9 @@ <h3 id="introduction">Introduction</h3>
             <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
             <pre class="prettyprint">public void bind(ExampleActivity activity) {
-  activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
-  activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
-  activity.title = (android.widget.TextView) activity.findViewById(2130968577);
+  activity.subtitle = (android.widget.TextView) activity.findView(2130968578);
+  activity.footer = (android.widget.TextView) activity.findView(2130968579);
+  activity.title = (android.widget.TextView) activity.findView(2130968577);
 }</pre>
 
             <h4 id="resource">Resource Binding</h4>
@@ -96,7 +96,7 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 }</pre>
             <p>You can see this implementation in action in the provided sample.</p>
-            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
+            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findView</code> calls.</p>
             <p>Other provided binding APIs:</p>
             <ul>
               <li>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with <code>ButterKnife.bind(this, activity)</code>.</li>
