diff --git a/build.gradle b/build.gradle
index 42dd66f8..246b2e29 100644
--- a/build.gradle
+++ b/build.gradle
@@ -39,6 +39,8 @@ subprojects { project ->
     dependencies {
       classpath 'com.android.tools.build:gradle:2.2.2'
       classpath 'gradle.plugin.com.kageiit:lintrules:1.1.2'
+      classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
+      classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
     }
   }
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBean.java b/butterknife-annotations/src/main/java/butterknife/BindBean.java
new file mode 100644
index 00000000..6ad01b34
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBean.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(TYPE)
+public @interface BindBean {
+  /** String resource ID to which the field will be bound. */
+   Class<?> value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBeanFunc.java b/butterknife-annotations/src/main/java/butterknife/BindBeanFunc.java
new file mode 100644
index 00000000..91754b29
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBeanFunc.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target({FIELD})
+public @interface BindBeanFunc {
+    int id();
+    String value();
+    BindFunc func();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBeanImage.java b/butterknife-annotations/src/main/java/butterknife/BindBeanImage.java
new file mode 100644
index 00000000..d0f05e8c
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBeanImage.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target({FIELD})
+@BindFunc("setImageURI")
+public @interface BindBeanImage {
+    int id();
+    String value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBeanText.java b/butterknife-annotations/src/main/java/butterknife/BindBeanText.java
new file mode 100644
index 00000000..d6750982
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBeanText.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target({FIELD})
+@BindFunc("setText")
+public @interface BindBeanText {
+    int id();
+    String value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFunc.java b/butterknife-annotations/src/main/java/butterknife/BindFunc.java
new file mode 100644
index 00000000..ee53f941
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFunc.java
@@ -0,0 +1,18 @@
+package butterknife;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+
+/**
+ * Created by taoisym on 17-5-5.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.ANNOTATION_TYPE})
+public @interface   BindFunc {
+    String value();
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 56332f1f..cbceaaf0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -53,13 +53,13 @@
       ClassName.get("android.support.annotation", "CallSuper");
   private static final ClassName SUPPRESS_LINT =
       ClassName.get("android.annotation", "SuppressLint");
-  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
+
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
 
 
-  private final TypeMirror beanTypeName;
+  private final TypeName beanTypeName;
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
   private final boolean isFinal;
@@ -73,7 +73,7 @@
   private final ImmutableList<ResourceBinding> resourceBindings;
   private final BindingSet parentBinding;
 
-  private BindingSet(TypeName targetTypeName,TypeMirror beanTypeName ,ClassName bindingClassName, boolean isFinal,
+  private BindingSet(TypeName targetTypeName,TypeName beanTypeName ,ClassName bindingClassName, boolean isFinal,
       boolean isView, boolean isActivity, boolean isDialog,
                      ImmutableList<FieldBeanBinding> beanBindings,
                      ImmutableList<ViewBinding> viewBindings,
@@ -111,6 +111,8 @@ private TypeSpec createType(int sdk) {
     if (parentBinding != null) {
       result.superclass(parentBinding.bindingClassName);
     } else {
+      ParameterizedTypeName UNBINDER = ParameterizedTypeName.get(ClassName.get("butterknife", "Unbinder"), beanTypeName);
+      //ClassName.get("butterknife", "Unbinder");
       result.addSuperinterface(UNBINDER);
     }
 
@@ -201,7 +203,7 @@ private MethodSpec createApplyForBean(int sdk) {
               .addAnnotation(UI_THREAD)
               .addModifiers(PUBLIC)
               .returns(TypeName.VOID)
-              .addParameter(TypeVariableName.get(beanTypeName), "bean");
+              .addParameter(beanTypeName,"bean");
       for (ResourceBinding binding : beanBindings) {
         beanApply.addStatement("$L", binding.render(sdk));
       }
@@ -702,7 +704,9 @@ static Builder newBuilder(TypeElement enclosingElement) {
         packageName.length() + 1).replace('.', '$');
     ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
     TypeMirror beanTypeMirror=null;
+
     BindBean bean = enclosingElement.getAnnotation(BindBean.class);
+    TypeName type=null;
     if(bean!=null) {
         System.out.println("check bean");
         try
@@ -712,16 +716,21 @@ static Builder newBuilder(TypeElement enclosingElement) {
         catch( MirroredTypeException mte )
         {
           beanTypeMirror=mte.getTypeMirror();
+          type= TypeName.get(beanTypeMirror);
           System.out.println(mte.getTypeMirror());
         }
+    }else {
+
+      type=ClassName.get("java.lang","Void");
     }
+
     boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
-    return new Builder(targetType, beanTypeMirror,bindingClassName, isFinal, isView, isActivity, isDialog);
+    return new Builder(targetType,type ,bindingClassName, isFinal, isView, isActivity, isDialog);
   }
 
   static final class Builder {
     private final TypeName targetTypeName;
-    private final TypeMirror beanTypeName;
+    private final TypeName beanTypeName;
     private final ClassName bindingClassName;
     private final boolean isFinal;
     private final boolean isView;
@@ -737,7 +746,7 @@ static Builder newBuilder(TypeElement enclosingElement) {
         ImmutableList.builder();
     private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
 
-    private Builder(TypeName targetTypeName,TypeMirror beanTypeName, ClassName bindingClassName, boolean isFinal,
+    private Builder(TypeName targetTypeName,TypeName beanTypeName, ClassName bindingClassName, boolean isFinal,
         boolean isView, boolean isActivity, boolean isDialog) {
       this.targetTypeName = targetTypeName;
       this.beanTypeName=beanTypeName;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 85d4ca06..4ee94490 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -2,6 +2,8 @@
 
 import butterknife.BindArray;
 import butterknife.BindBean;
+import butterknife.BindBeanFunc;
+import butterknife.BindBeanImage;
 import butterknife.BindBeanText;
 import butterknife.BindBitmap;
 import butterknife.BindBool;
@@ -25,6 +27,7 @@
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
 import butterknife.Optional;
+import butterknife.BindFunc;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 
@@ -116,6 +119,7 @@
             OnTouch.class //
     );
 
+
     private static final List<String> SUPPORTED_TYPES = Arrays.asList(
             "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
     );
@@ -289,9 +293,12 @@ public synchronized void init(ProcessingEnvironment env) {
         annotations.add(BindString.class);
         annotations.add(BindView.class);
         annotations.add(BindViews.class);
+        annotations.addAll(LISTENERS);
+
         annotations.add(BindBeanText.class);
+        annotations.add(BindBeanImage.class);
+        annotations.add(BindBeanFunc.class);
         annotations.add(BindBean.class);
-        annotations.addAll(LISTENERS);
 
         return annotations;
     }
@@ -319,15 +326,7 @@ public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env
         Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
 
         scanForRClasses(env);
-        // Process each @BindBean element.
-        for (Element element : env.getElementsAnnotatedWith(BindBeanText.class)) {
-            if (!SuperficialValidation.validateElement(element)) continue;
-            try {
-                parseBindBeans(element, builderMap, erasedTargetNames);
-            } catch (Exception e) {
-                logParsingError(element, BindBeanText.class, e);
-            }
-        }
+
         // Process each @BindArray element.
         for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
             if (!SuperficialValidation.validateElement(element)) continue;
@@ -445,6 +444,36 @@ public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env
             findAndParseListener(env, listener, builderMap, erasedTargetNames);
         }
 
+
+        // Process each @BindBeanText element.
+        for (Element element : env.getElementsAnnotatedWith(BindBeanText.class)) {
+            if (!SuperficialValidation.validateElement(element)) continue;
+            try {
+                parseBindText(element, builderMap, erasedTargetNames);
+            } catch (Exception e) {
+                logParsingError(element, BindBeanText.class, e);
+            }
+        }
+        // Process each @BindBeanText element.
+        for (Element element : env.getElementsAnnotatedWith(BindBeanImage.class)) {
+            if (!SuperficialValidation.validateElement(element)) continue;
+            try {
+                parseBindImage(element, builderMap, erasedTargetNames);
+            } catch (Exception e) {
+                logParsingError(element, BindBeanImage.class, e);
+            }
+        }
+
+        // Process each @BindBeanFunc element.
+        for (Element element : env.getElementsAnnotatedWith(BindBeanFunc.class)) {
+            if (!SuperficialValidation.validateElement(element)) continue;
+            try {
+                parseBindFunc(element, builderMap, erasedTargetNames);
+            } catch (Exception e) {
+                logParsingError(element, BindBeanFunc.class, e);
+            }
+        }
+
         // Associate superclass binders with their subclass binders. This is a queue-based tree walk
         // which starts at the roots (superclasses) and walks to the leafs (subclasses).
         Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =
@@ -592,46 +621,62 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
         erasedTargetNames.add(enclosingElement);
     }
 
-    private void parseBindBeans(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
-        boolean hasError = false;
+    private void parseBindText(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
         TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
-        // Verify that the target type is bool.
-//    if (element.asType().getKind() != TypeKind.BOOLEAN) {
-//      error(element, "@%s field type must be 'boolean'. (%s.%s)",
-//              BindBean.class.getSimpleName(), enclosingElement.getQualifiedName(),
-//              element.getSimpleName());
-//      hasError = true;
-//    }
-
-        // Verify common generated code restrictions.
-//    hasError |= isInaccessibleViaGeneratedCode(BindBean.class, "fields", element);
-//    hasError |= isBindingInWrongPackage(BindBean.class, element);
-//
-//    if (hasError) {
-//      return;
-//    }
-
-        String name = element.getSimpleName().toString();
         TypeName type = TypeName.get(element.asType());
+        String name = element.getSimpleName().toString();
         boolean required = isFieldRequired(element);
         BindBeanText bean = element.getAnnotation(BindBeanText.class);
-        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
+        BindFunc     func=bean.annotationType().getAnnotation(BindFunc.class);
 
+        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
         BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-        builder.addBeanBinding(
-                new FieldBeanBinding(getId(qualifiedId), name, bean.value(), FieldBeanBinding.Type.NAME));
+        builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),func));
 
 
         BindingSet.Builder binder = getOrCreateBindingBuilder(builderMap, enclosingElement);
         binder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
-        // Assemble information on the field.
+
+        erasedTargetNames.add(enclosingElement);
+    }
+    private void parseBindImage(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+        TypeName type = TypeName.get(element.asType());
+        String name = element.getSimpleName().toString();
+        boolean required = isFieldRequired(element);
+        BindBeanImage bean = element.getAnnotation(BindBeanImage.class);
+        BindFunc     func=bean.annotationType().getAnnotation(BindFunc.class);
+
+        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
+        BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+        builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),func));
 
 
+        BindingSet.Builder binder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+        binder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
 
         erasedTargetNames.add(enclosingElement);
     }
+    private void parseBindFunc(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
+        TypeName type = TypeName.get(element.asType());
+        String name = element.getSimpleName().toString();
+        boolean required = isFieldRequired(element);
+        BindBeanFunc bean = element.getAnnotation(BindBeanFunc.class);
+
+        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
+        BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+        builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),bean.func()));
+
+
+        BindingSet.Builder binder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+        binder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
+
+        erasedTargetNames.add(enclosingElement);
+    }
     private  QualifiedId elementToQualifiedId(Element element, int id) {
         return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
new file mode 100644
index 00000000..9d1b2efa
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
@@ -0,0 +1,77 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+import butterknife.BindFunc;
+
+final class FieldBeanBinding implements ResourceBinding{
+//  enum Type {
+//    TEXT("setText"),
+//    IMAGE("setImage");
+//
+//    private final List<BeanMethod> methods;
+//
+//    Type(BeanMethod... methods) {
+//      List<BeanMethod> methodList = new ArrayList<>(methods.length);
+//      Collections.addAll(methodList, methods);
+//      Collections.sort(methodList);
+//      Collections.reverse(methodList);
+//      this.methods = unmodifiableList(methodList);
+//    }
+//
+//    Type(String methodName) {
+//      methods = singletonList(new BeanMethod(null, methodName,  1));
+//    }
+//
+//    BeanMethod methodForSdk(int sdk) {
+//      for (BeanMethod method : methods) {
+//        if (method.sdk <= sdk) {
+//          return method;
+//        }
+//      }
+//      throw new AssertionError();
+//    }
+//  }
+
+  static final class BeanMethod implements Comparable<BeanMethod> {
+    final ClassName typeName;
+    final String name;
+
+    final int sdk;
+    BeanMethod(ClassName typeName, String name, int sdk) {
+      this.typeName = typeName;
+      this.name = name;
+      this.sdk = sdk;
+
+    }
+
+    @Override public int compareTo(BeanMethod other) {
+      return Integer.compare(sdk, other.sdk);
+    }
+  }
+
+  private final Id id;
+  private final String name;
+  private final String filed;
+  private final BindFunc func;
+  FieldBeanBinding(Id id, String name, String filed, BindFunc func) {
+    this.id = id;
+    this.name = name;
+    this.filed = filed;
+    this.func=func;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return false;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    //BeanMethod method = type.methodForSdk(sdk);
+    return CodeBlock.of("target.$L.$L(bean.$L)", name, func.value(),filed);
+  }
+}
diff --git a/butterknife-gradle-plugin/bintray.gradle b/butterknife-gradle-plugin/bintray.gradle
new file mode 100644
index 00000000..2674de3a
--- /dev/null
+++ b/butterknife-gradle-plugin/bintray.gradle
@@ -0,0 +1,125 @@
+group = PROJ_GROUP
+version = PROJ_VERSION
+project.archivesBaseName = PROJ_ARTIFACTID
+
+apply plugin: 'com.jfrog.bintray'
+apply plugin: "com.jfrog.artifactory"
+apply plugin: 'maven-publish'
+
+task sourcesJar(type: Jar) {
+    from android.sourceSets.main.java.srcDirs
+    classifier = 'sources'
+}
+
+task javadoc(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += configurations.compile
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+}
+
+task javadocJar(type: Jar, dependsOn: javadoc) {
+    classifier = 'javadoc'
+    from javadoc.destinationDir
+}
+
+javadoc {
+    options{
+        encoding "UTF-8"
+        charSet 'UTF-8'
+        author true
+        version true
+        links "http://docs.oracle.com/javase/7/docs/api"
+        title "$PROJ_NAME $PROJ_VERSION"
+    }
+}
+
+
+def pomConfig = {
+    licenses {
+        license {
+            name "The Apache Software License, Version 2.0"
+            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
+            distribution "repo"
+        }
+    }
+    developers {
+        developer {
+            id DEVELOPER_ID
+            name DEVELOPER_NAME
+            email DEVELOPER_EMAIL
+        }
+    }
+}
+
+publishing {
+    publications {
+        mavenJava(MavenPublication) {
+            artifactId PROJ_ARTIFACTID
+            artifact javadocJar
+            artifact sourcesJar
+
+            pom.withXml {
+                def root = asNode()
+                root.appendNode('description', PROJ_DESCRIPTION)
+                root.children().last() + pomConfig
+
+                def dependenciesNode = root.appendNode('dependencies')
+                configurations.compile.allDependencies.each {
+                    if (it.group && it.name && it.version) {
+                        def dependencyNode = dependenciesNode.appendNode('dependency')
+                        dependencyNode.appendNode('groupId', it.group)
+                        dependencyNode.appendNode('artifactId', it.name)
+                        dependencyNode.appendNode('version', it.version)
+                    }
+                }
+            }
+        }
+    }
+}
+
+afterEvaluate {
+    publishing.publications.mavenJava.artifact(bundleRelease)
+}
+
+bintray {
+    Properties properties = new Properties()
+    properties.load(project.rootProject.file('local.properties').newDataInputStream())
+    user = properties.getProperty("bintray.user")
+    key = properties.getProperty("bintray.apikey")
+
+    publications = ['mavenJava']
+    publish = true
+
+    pkg {
+        repo = 'maven'
+        name = PROJ_NAME
+        desc = PROJ_DESCRIPTION
+        websiteUrl = PROJ_WEBSITEURL
+        issueTrackerUrl = PROJ_ISSUETRACKERURL
+        vcsUrl = PROJ_VCSURL
+        licenses = ['Apache-2.0']
+        publicDownloadNumbers = true
+    }
+}
+
+artifactory {
+    contextUrl = 'http://oss.jfrog.org/artifactory'
+    resolve {
+        repository {
+            repoKey = 'libs-release'
+        }
+    }
+    publish {
+        repository {
+            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
+            username = bintray.user
+            password = bintray.key
+            maven = true
+        }
+        defaults {
+            //这里的名字和上面红色的名字一致即可，会将其包含的输出上传到jfrog上去
+            publications('mavenJava')
+            publishArtifacts = true
+        }
+    }
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/gradle.properties b/butterknife-gradle-plugin/gradle.properties
index 8edce620..6fd91204 100644
--- a/butterknife-gradle-plugin/gradle.properties
+++ b/butterknife-gradle-plugin/gradle.properties
@@ -1,3 +1,29 @@
 POM_NAME=Butterknife Gradle Plugin
 POM_ARTIFACT_ID=butterknife-gradle-plugin
 POM_PACKAGING=jar
+
+
+
+# 库的包名
+PROJ_GROUP=butterknife
+# 库的ID
+PROJ_ARTIFACTID=butterknife
+# 库的版本
+PROJ_VERSION=1.0.0
+### 最后 gradle引用的形式就是 $PROJ_GROUP:$PROJ_ARTIFACTID:$PROJ_VERSION
+
+# 库名
+PROJ_NAME=butterknife
+# 库的项目主页
+PROJ_WEBSITEURL=https://github.com/liungkejin/XImageView
+# 问题跟踪地址
+PROJ_ISSUETRACKERURL=https://github.com/liungkejin/XImageView/issues
+# VCS 地址
+PROJ_VCSURL=https://github.com/liungkejin/XImageView.git
+# 库的简单描述
+PROJ_DESCRIPTION=Android View for show large image
+
+# 开发者的信息, 可以随意
+DEVELOPER_ID=Kejin
+DEVELOPER_NAME=Liang Ke Jin
+DEVELOPER_EMAIL=liungkejin
\ No newline at end of file
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 44b1069d..9246398c 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -2,16 +2,19 @@
 
 import android.app.Activity;
 import android.app.Fragment;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
+import android.widget.ImageView;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import butterknife.BindBean;
+import butterknife.BindBeanImage;
 import butterknife.BindBeanText;
 import butterknife.BindString;
 import butterknife.BindView;
@@ -20,6 +23,8 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import butterknife.Unbinder;
+
 import com.example.butterknife.R;
 
 import java.util.List;
@@ -49,11 +54,15 @@
 
   @BindBean(Bean.class)
   public static class TestBean extends Fragment{
-    @BindBeanText(id=R.id.footer,value = "id")
-    TextView ggg;
+    @BindBeanImage(id=R.id.footer,value = "id()")
+    ImageView ggg;
+    void x(){
+
+    }
   }
   public static class Bean{
-    String id="Fuck u";
+    public String id="";
+    public Uri id(){return Uri.parse("Fuck u");};
   }
   @BindBeanText(id=R.id.footer,value = "id")
   TextView ggg;
@@ -79,8 +88,10 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.bind(this);
-
+    Unbinder binder = ButterKnife.bind(this);
+    binder.unbind();
+    Bean bean=null;
+    binder.apply(bean);
     // Contrived code to use the bound fields.
     title.setText(butterKnife);
     subtitle.setText(fieldMethod);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
index ccda50b4..8075a72b 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -26,7 +26,6 @@ protected static void verifySimpleActivityBound(SimpleActivity activity) {
     assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);
     assertThat(activity.hello.getId()).isEqualTo(R.id.hello);
     assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);
-    assertThat(activity.footer.getId()).isEqualTo(R.id.footer);
   }
 
   protected static void verifySimpleActivityUnbound(SimpleActivity activity) {
@@ -34,6 +33,5 @@ protected static void verifySimpleActivityUnbound(SimpleActivity activity) {
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
     assertThat(activity.listOfThings).isNull();
-    assertThat(activity.footer).isNull();
   }
 }
diff --git a/butterknife/src/main/java/butterknife/Unbinder.java b/butterknife/src/main/java/butterknife/Unbinder.java
index ce27c3e9..ea80557f 100644
--- a/butterknife/src/main/java/butterknife/Unbinder.java
+++ b/butterknife/src/main/java/butterknife/Unbinder.java
@@ -3,10 +3,14 @@
 import android.support.annotation.UiThread;
 
 /** An unbinder contract that will unbind views when called. */
-public interface Unbinder {
+public interface Unbinder<T> {
   @UiThread void unbind();
-
-  Unbinder EMPTY = new Unbinder() {
+  void apply(T bean);
+  Unbinder EMPTY = new Unbinder<Void>() {
     @Override public void unbind() { }
+    @Override
+    public  void apply(Void bean) {
+
+    }
   };
 }
diff --git a/gradle.properties b/gradle.properties
index 327dcd1c..b7a61cab 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -14,3 +14,4 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
diff --git a/gradle/gradle-mvn-push.gradle b/gradle/gradle-mvn-push.gradle
index ea3f6bbb..556340de 100644
--- a/gradle/gradle-mvn-push.gradle
+++ b/gradle/gradle-mvn-push.gradle
@@ -35,11 +35,11 @@ def getSnapshotRepositoryUrl() {
 }
 
 def getRepositoryUsername() {
-  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
+  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : "taoisym@gmail.com"
 }
 
 def getRepositoryPassword() {
-  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : "UPsymbol0"
 }
 
 afterEvaluate { project ->
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 6ffa2378..13372aef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index d8c2dae7..a1ed67a1 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Thu Feb 23 11:00:51 PST 2017
+#Thu May 04 21:55:06 CST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/gradlew b/gradlew
index 9aa616c2..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -6,30 +6,12 @@
 ##
 ##############################################################################
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -48,7 +30,6 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
-nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -59,11 +40,26 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
 esac
 
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -89,7 +85,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -161,9 +157,4 @@ function splitJvmOpts() {
 eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
 JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
 
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [[ "$(uname)" == "Darwin" ]] && [[ "$HOME" == "$PWD" ]]; then
-  cd "$(dirname "$0")"
-fi
-
 exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
index e95643d6..aec99730 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,9 +46,10 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windows variants
+@rem Get command-line arguments, handling Windowz variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -59,6 +60,11 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
