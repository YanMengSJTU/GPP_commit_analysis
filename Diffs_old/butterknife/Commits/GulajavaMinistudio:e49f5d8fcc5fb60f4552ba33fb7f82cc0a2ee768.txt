diff --git a/build.gradle b/build.gradle
index 75c7c859..f53d45af 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,8 +1,8 @@
 buildscript {
   ext.versions = [
       'minSdk': 9,
-      'compileSdk': 25,
-      'buildTools': '25.0.2',
+      'compileSdk': 26,
+      'buildTools': '26.0.0',
 
       'supportLibrary': '25.3.0',
       'androidPlugin': '2.3.3',
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
new file mode 100644
index 00000000..4a0db046
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified font resource ID.
+ * <pre><code>
+ * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindFont {
+  /** Font resource ID to which the field will be bound. */
+  /* TODO support lib 26.0.0: @FontRes */ int value();
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index b161707b..55d49d34 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -52,6 +52,8 @@
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
+  static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 
@@ -464,8 +466,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
+                builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)",
+                    UTILS, listenerPosition, method.name(), listenerPosition,
+                    methodBinding.getName(), i, parameter.getType());
               } else {
                 builder.add("p$L", listenerPosition);
               }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index cbbec0e8..1613e602 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -8,6 +8,7 @@
 import butterknife.BindDimen;
 import butterknife.BindDrawable;
 import butterknife.BindFloat;
+import butterknife.BindFont;
 import butterknife.BindInt;
 import butterknife.BindString;
 import butterknife.BindView;
@@ -96,6 +97,7 @@
   private static final String ANIMATION_TYPE = "android.view.animation.Animation";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
   private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String TYPEFACE_TYPE = "android.graphics.Typeface";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
   private static final String STRING_TYPE = "java.lang.String";
   private static final String LIST_TYPE = List.class.getCanonicalName();
@@ -172,6 +174,7 @@
     annotations.add(BindDimen.class);
     annotations.add(BindDrawable.class);
     annotations.add(BindFloat.class);
+    annotations.add(BindFont.class);
     annotations.add(BindInt.class);
     annotations.add(BindString.class);
     annotations.add(BindView.class);
@@ -285,6 +288,16 @@
       }
     }
 
+    // Process each @BindFont element.
+    for (Element element : env.getElementsAnnotatedWith(BindFont.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceFont(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindFont.class, e);
+      }
+    }
+
     // Process each @BindInt element.
     for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -807,6 +820,38 @@ private void parseResourceFloat(Element element,
     erasedTargetNames.add(enclosingElement);
   }
 
+  private void parseResourceFont(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is a Typeface.
+    if (!TYPEFACE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Typeface'. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFont.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindFont.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FONT));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
   private void parseResourceInt(Element element,
       Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index d9510525..59590a1a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -20,6 +20,8 @@
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
     FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    FONT(new ResourceMethod(BindingSet.RESOURCES_COMPAT, "getFont", false, 1),
+        new ResourceMethod(null, "getFont", true, 26)),
     INT("getInteger"),
     INT_ARRAY("getIntArray"),
     STRING("getString"),
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index a08f9c30..672da6dc 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -81,7 +81,7 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
   }
 
   private static boolean isInt(FieldDeclaration field) {
-    Type type = field.getElementType();
+    Type type = field.getCommonType();
     return type instanceof PrimitiveType
         && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
   }
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
index af44c804..a46b74a4 100644
--- a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -57,6 +57,16 @@
     }
   }
 
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      fail();
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).isEqualTo(
+          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
+    }
+  }
+
   static final class EditModeView extends View {
     EditModeView(Context context) {
       super(context);
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 52b2fc23..e9101f74 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -120,10 +120,10 @@ public static View findRequiredView(View source, @IdRes int id, String who) {
     }
   }
 
-  @SuppressWarnings("unchecked") // That's the point.
-  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos) {
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
     try {
-      return (T) value;
+      return cls.cast(value);
     } catch (ClassCastException e) {
       throw new IllegalStateException("Parameter #"
           + (fromPos + 1)
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
new file mode 100644
index 00000000..eb870f68
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -0,0 +1,134 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindFontTest {
+  @Ignore("Won't compile until we depend on support library 26.0.0")
+  @Test public void simpleTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleIntSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getFont(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindFont field type must be 'Typeface'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 3cf004a6..81b22b72 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -324,7 +324,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
@@ -332,7 +332,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0));\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
         + "      }\n"
         + "    });\n"
         + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
@@ -340,7 +340,7 @@
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0));\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
index 31ba53d2..03f334c4 100644
--- a/butterknife/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -162,7 +162,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
@@ -222,7 +222,7 @@
         + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "      @Override\n"
         + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
-        + "        target.doStuff(Utils.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0)\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
         + "        , p2);\n"
         + "      }\n"
         + "    });\n"
