diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 173a03df..2b2822e3 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -93,7 +93,7 @@ private ButterKnife() {
   @SuppressWarnings("UnusedDeclaration") // Used by generated code.
   public enum Finder {
     VIEW {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((View) source).findViewById(id);
       }
 
@@ -102,7 +102,7 @@ private ButterKnife() {
       }
     },
     ACTIVITY {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((Activity) source).findViewById(id);
       }
 
@@ -111,7 +111,7 @@ private ButterKnife() {
       }
     },
     DIALOG {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((Dialog) source).findViewById(id);
       }
 
@@ -120,16 +120,16 @@ private ButterKnife() {
       }
     };
 
-    public static <T extends View> T[] arrayOf(T... views) {
+    public static <T> T[] arrayOf(T... views) {
       return views;
     }
 
-    public static <T extends View> List<T> listOf(T... views) {
-      return new ImmutableViewList<T>(views);
+    public static <T> List<T> listOf(T... views) {
+      return new ImmutableList<T>(views);
     }
 
-    public View findRequiredView(Object source, int id, String who) {
-      View view = findOptionalView(source, id);
+    public <T> T findRequiredView(Object source, int id, String who) {
+      T view = findOptionalView(source, id, who);
       if (view == null) {
         String name = getContext(source).getResources().getResourceEntryName(id);
         throw new IllegalStateException("Required view '"
@@ -143,7 +143,48 @@ public View findRequiredView(Object source, int id, String who) {
       return view;
     }
 
-    public abstract View findOptionalView(Object source, int id);
+    public <T> T findOptionalView(Object source, int id, String who) {
+      View view = findView(source, id);
+      return castView(view, id, who);
+    }
+
+    @SuppressWarnings("unchecked") // That's the point.
+    public <T> T castView(View view, int id, String who) {
+      try {
+        return (T) view;
+      } catch (ClassCastException e) {
+        if (who == null) {
+          throw new AssertionError();
+        }
+        String name = view.getResources().getResourceEntryName(id);
+        throw new IllegalStateException("View '"
+            + name
+            + "' with ID "
+            + id
+            + " for "
+            + who
+            + " was of the wrong type. See cause for more info.", e);
+      }
+    }
+
+    @SuppressWarnings("unchecked") // That's the point.
+    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
+      try {
+        return (T) value;
+      } catch (ClassCastException e) {
+        throw new IllegalStateException("Parameter #"
+            + (fromPosition + 1)
+            + " of method '"
+            + from
+            + "' was of the wrong type for parameter #"
+            + (toPosition + 1)
+            + " of method '"
+            + to
+            + "'. See cause for more info.", e);
+      }
+    }
+
+    protected abstract View findView(Object source, int id);
 
     protected abstract Context getContext(Object source);
   }
diff --git a/butterknife/src/main/java/butterknife/ImmutableViewList.java b/butterknife/src/main/java/butterknife/ImmutableList.java
similarity index 74%
rename from butterknife/src/main/java/butterknife/ImmutableViewList.java
rename to butterknife/src/main/java/butterknife/ImmutableList.java
index 399a3671..3c3d07fa 100644
--- a/butterknife/src/main/java/butterknife/ImmutableViewList.java
+++ b/butterknife/src/main/java/butterknife/ImmutableList.java
@@ -1,6 +1,5 @@
 package butterknife;
 
-import android.view.View;
 import java.util.AbstractList;
 import java.util.RandomAccess;
 
@@ -8,10 +7,10 @@
  * An immutable list of views which is lighter than {@code
  * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(foo, bar)))}.
  */
-final class ImmutableViewList<T extends View> extends AbstractList<T> implements RandomAccess {
+final class ImmutableList<T> extends AbstractList<T> implements RandomAccess {
   private final T[] views;
 
-  ImmutableViewList(T[] views) {
+  ImmutableList(T[] views) {
     this.views = views;
   }
 
@@ -24,7 +23,7 @@
   }
 
   @Override public boolean contains(Object o) {
-    for (View view : views) {
+    for (T view : views) {
       if (view == o) {
         return true;
       }
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 550a336f..c81b446a 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -51,6 +51,7 @@
 import javax.tools.JavaFileObject;
 
 import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -228,8 +229,8 @@ private void parseInjectView(Element element, Map<TypeElement, ViewInjector> tar
       TypeVariable typeVariable = (TypeVariable) elementType;
       elementType = typeVariable.getUpperBound();
     }
-    if (!isSubtypeOfType(elementType, VIEW_TYPE)) {
-      error(element, "@InjectView fields must extend from View. (%s.%s)",
+    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
+      error(element, "@InjectView fields must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -316,8 +317,8 @@ private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> ta
     }
 
     // Verify that the target type extends from View.
-    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE)) {
-      error(element, "@InjectViews type must extend from View. (%s.%s)",
+    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
+      error(element, "@InjectViews type must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -449,9 +450,11 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
           // Verify target type is valid for a binding without an id.
           String targetType = listener.targetType();
-          if (!isSubtypeOfType(enclosingElement.asType(), targetType)) {
+          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
+              && !isInterface(enclosingElement.asType())) {
             error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\". (%s.%s)", annotationClass.getSimpleName(), targetType,
+                    + "\"%s\" or an interface. (%s.%s)",
+                    annotationClass.getSimpleName(), targetType,
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -532,7 +535,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           if (methodParameterUsed.get(j)) {
             continue;
           }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])) {
+          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+              || isInterface(methodParameterType)) {
             parameters[i] = new Parameter(j, methodParameterType.toString());
             methodParameterUsed.set(j);
             break;
@@ -591,6 +595,13 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     erasedTargetNames.add(enclosingElement.toString());
   }
 
+  private boolean isInterface(TypeMirror typeMirror) {
+    if (!(typeMirror instanceof DeclaredType)) {
+      return false;
+    }
+    return ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
+  }
+
   private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     if (otherType.equals(typeMirror.toString())) {
       return true;
diff --git a/butterknife/src/main/java/butterknife/internal/Parameter.java b/butterknife/src/main/java/butterknife/internal/Parameter.java
index df0c34ab..6949688b 100644
--- a/butterknife/src/main/java/butterknife/internal/Parameter.java
+++ b/butterknife/src/main/java/butterknife/internal/Parameter.java
@@ -19,4 +19,8 @@ int getListenerPosition() {
   String getType() {
     return type;
   }
+
+  public boolean requiresCast(String toType) {
+    return !type.equals(toType);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
index 328371fc..96ac3553 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+
 final class ViewBinding implements Binding {
   private final String name;
   private final String type;
@@ -26,4 +28,8 @@ public String getType() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean requiresCast() {
+    return !VIEW_TYPE.equals(type);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index a5219ab1..cce9545b 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -5,6 +5,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -100,7 +101,7 @@ String brewJava() {
 
   private void emitInject(StringBuilder builder) {
     builder.append("  @Override ")
-        .append("public void inject(Finder finder, final T target, Object source) {\n");
+        .append("public void inject(final Finder finder, final T target, Object source) {\n");
 
     // Emit a call to the superclass injector, if any.
     if (parentInjector != null) {
@@ -141,22 +142,18 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
       if (i > 0) {
         builder.append(',');
       }
-      builder.append("\n        ");
-      emitCastIfNeeded(builder, binding.getType());
-      if (binding.isRequired()) {
-        builder.append("finder.findRequiredView(source, ")
-            .append(ids[i])
-            .append(", \"")
-            .append(binding.getName())
-            .append("\")");
-      } else {
-        builder.append("finder.findOptionalView(source, ")
-            .append(ids[i])
-            .append(")");
-      }
+      builder.append("\n        finder.<")
+          .append(binding.getType())
+          .append(">")
+          .append(binding.isRequired() ? "findRequiredView" : "findOptionalView")
+          .append("(source, ")
+          .append(ids[i])
+          .append(", \"");
+      emitHumanDescription(builder, Collections.singleton(binding));
+      builder.append("\")");
     }
 
-    builder.append("\n    );");
+    builder.append("\n    );\n");
   }
 
   private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
@@ -166,7 +163,7 @@ private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
     if (requiredBindings.isEmpty()) {
       builder.append("finder.findOptionalView(source, ")
           .append(injection.getId())
-          .append(");\n");
+          .append(", null);\n");
     } else {
       if (injection.getId() == View.NO_ID) {
         builder.append("target;\n");
@@ -193,8 +190,16 @@ private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
       builder.append("    target.")
           .append(viewBinding.getName())
           .append(" = ");
-      emitCastIfNeeded(builder, viewBinding.getType());
-      builder.append("view;\n");
+      if (viewBinding.requiresCast()) {
+        builder.append("finder.castView(view")
+            .append(", ")
+            .append(injection.getId())
+            .append(", \"");
+        emitHumanDescription(builder, viewBindings);
+        builder.append("\");\n");
+      } else {
+        builder.append("view;\n");
+      }
     }
   }
 
@@ -296,8 +301,25 @@ private void emitListenerBindings(StringBuilder builder, ViewInjection injection
             for (int i = 0, count = parameters.size(); i < count; i++) {
               Parameter parameter = parameters.get(i);
               int listenerPosition = parameter.getListenerPosition();
-              emitCastIfNeeded(builder, listenerParameters[listenerPosition], parameter.getType());
-              builder.append('p').append(listenerPosition);
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                builder.append("finder.<")
+                    .append(parameter.getType())
+                    .append(">castParam(p")
+                    .append(listenerPosition)
+                    .append(", \"")
+                    .append(method.name())
+                    .append("\", ")
+                    .append(listenerPosition)
+                    .append(", \"")
+                    .append(binding.getName())
+                    .append("\", ")
+                    .append(i)
+                    .append(")");
+              } else {
+                builder.append('p').append(listenerPosition);
+              }
+
               if (i < count - 1) {
                 builder.append(", ");
               }
@@ -365,37 +387,26 @@ private void emitReset(StringBuilder builder) {
     builder.append("  }\n");
   }
 
-  static void emitCastIfNeeded(StringBuilder builder, String viewType) {
-    emitCastIfNeeded(builder, VIEW_TYPE, viewType);
-  }
-
-  static void emitCastIfNeeded(StringBuilder builder, String sourceType, String destinationType) {
-    // Only emit a cast if the source and destination type do not match.
-    if (!sourceType.equals(destinationType)) {
-      builder.append('(').append(destinationType).append(") ");
-    }
-  }
-
-  static void emitHumanDescription(StringBuilder builder, List<Binding> bindings) {
+  static void emitHumanDescription(StringBuilder builder, Collection<? extends Binding> bindings) {
+    Iterator<? extends Binding> iterator = bindings.iterator();
     switch (bindings.size()) {
       case 1:
-        builder.append(bindings.get(0).getDescription());
+        builder.append(iterator.next().getDescription());
         break;
       case 2:
-        builder.append(bindings.get(0).getDescription())
+        builder.append(iterator.next().getDescription())
             .append(" and ")
-            .append(bindings.get(1).getDescription());
+            .append(iterator.next().getDescription());
         break;
       default:
         for (int i = 0, count = bindings.size(); i < count; i++) {
-          Binding requiredField = bindings.get(i);
           if (i != 0) {
             builder.append(", ");
           }
           if (i == count - 1) {
             builder.append("and ");
           }
-          builder.append(requiredField.getDescription());
+          builder.append(iterator.next().getDescription());
         }
         break;
     }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index ec423b18..7d95dfc7 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
@@ -46,6 +46,43 @@
         .generatesSources(expectedSource);
   }
 
+  @Test public void injectingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @InjectView(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void reset(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
   @Test public void genericType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
@@ -65,10 +102,10 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = (android.widget.TextView) view;",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
             "  }",
             "  @Override public void reset(T target) {",
             "    target.thing = null;",
@@ -103,7 +140,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
@@ -166,9 +203,9 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
-            "    view = finder.findOptionalView(source, 1);",
+            "    view = finder.findOptionalView(source, 1, null);",
             "    target.view = view;",
             "  }",
             "  @Override public void reset(T target) {",
@@ -208,7 +245,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -226,7 +263,7 @@
             "import butterknife.ButterKnife.Finder;",
             "public class TestOne$$ViewInjector<T extends test.TestOne> ",
             "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -270,7 +307,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -288,7 +325,7 @@
             "import butterknife.ButterKnife.Finder;",
             "public class TestOne$$ViewInjector<T extends test.TestOne> ",
             "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -377,7 +414,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectView fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -495,7 +532,7 @@
         .failsToCompile()
         .withErrorContaining((
             "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\". (test.Test.doStuff)"))
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
         .in(source)
         .onLine(6);
   }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
index 53122ca7..ca6148bf 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
@@ -29,12 +29,12 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -68,12 +68,12 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -107,12 +107,12 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.arrayOf(",
-            "        (android.widget.TextView) finder.findRequiredView(source, 1, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 2, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -147,12 +147,52 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void reset(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void injectingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.InjectViews;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @InjectViews({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.listOf(",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -187,12 +227,12 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -228,12 +268,12 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    target.thing = Finder.listOf(",
-            "        finder.findOptionalView(source, 1),",
-            "        finder.findOptionalView(source, 2),",
-            "        finder.findOptionalView(source, 3)",
+            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void reset(T target) {",
@@ -318,7 +358,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -330,7 +370,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index 63c28313..b907367e 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
index 5245a89c..078bd63b 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
@@ -27,7 +27,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -67,7 +67,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
             "    view.setOnClickListener(",
@@ -119,7 +119,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
@@ -169,10 +169,12 @@
         "import android.widget.TextView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
+        "  interface TestInterface {}",
         "  @OnClick(0) void click0() {}",
         "  @OnClick(1) void click1(View view) {}",
         "  @OnClick(2) void click2(TextView view) {}",
         "  @OnClick(3) void click3(Button button) {}",
+        "  @OnClick(4) void click4(TestInterface thing) {}",
         "}"
     ));
 
@@ -183,7 +185,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -200,13 +202,19 @@
             "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
             "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2((android.widget.TextView) p0);",
+            "        target.click2(finder.<android.widget.TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
             "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3((android.widget.Button) p0);",
+            "        target.click3(finder.<android.widget.Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
+            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
+            "      @Override public void doClick(android.view.View p0) {",
+            "        target.click4(finder.<test.Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
             "      }",
             "    });",
             "  }",
@@ -240,7 +248,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
             "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
@@ -290,9 +298,9 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
-            "    view = finder.findOptionalView(source, 1);",
+            "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
             "      view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
             "        @Override public void doClick(android.view.View p0) {",
@@ -333,7 +341,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
index 2ee6c1ee..481547b3 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
index fab0dd78..6df254da 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
index 7303264a..fc49b924 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -74,7 +74,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
@@ -118,14 +118,14 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
             "      new android.widget.AdapterView.OnItemClickListener() {",
             "        @Override public void onItemClick(",
             "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff((android.widget.ListView) p0, p2);",
+            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
             "        }",
             "      });",
             "  }",
@@ -162,14 +162,14 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
             "      new android.widget.AdapterView.OnItemClickListener() {",
             "        @Override public void onItemClick(",
             "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff((android.widget.ListView) p0, p2);",
+            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
             "        }",
             "      });",
             "  }",
@@ -205,7 +205,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
             "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
index 8f296a02..dad24264 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
index 0f7a70ef..b6cc753e 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -29,7 +29,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -74,7 +74,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -121,7 +121,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
@@ -169,7 +169,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
             "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
index 0179a1de..bbf8b884 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -30,7 +30,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnLongClickListener(",
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
index 4fe37f10..4c58db45 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
index 20a9597e..6f6687cd 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
index 662f0554..1ac2fba0 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
@@ -28,7 +28,7 @@
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
             "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
diff --git a/checkstyle.xml b/checkstyle.xml
index efc74936..73070a8a 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -106,7 +106,7 @@
 
     <!-- Checks for common coding problems               -->
     <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <module name="AvoidInlineConditionals"/>
+    <!--<module name="AvoidInlineConditionals"/>-->
     <module name="CovariantEquals"/>
     <module name="DoubleCheckedLocking"/>
     <module name="EmptyStatement"/>
