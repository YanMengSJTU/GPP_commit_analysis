diff --git a/butterknife-compiler/pom.xml b/butterknife-compiler/pom.xml
index 222c7a69..c2498c05 100644
--- a/butterknife-compiler/pom.xml
+++ b/butterknife-compiler/pom.xml
@@ -18,6 +18,10 @@
       <artifactId>butterknife</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>javapoet</artifactId>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
index 483e60c6..e1231484 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
@@ -1,7 +1,18 @@
 package butterknife.internal;
 
+import android.content.res.Resources;
+import android.graphics.BitmapFactory;
 import android.view.View;
-
+import butterknife.ButterKnife;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.TypeVariableName;
+import com.squareup.javapoet.WildcardTypeName;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -14,6 +25,8 @@
 import java.util.Set;
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
 
 final class BindingClass {
   private final Map<String, ViewBindings> viewIdMap = new LinkedHashMap<>();
@@ -75,195 +88,145 @@ private ViewBindings getOrCreateViewBindings(String id) {
     return viewId;
   }
 
-  String getFqcn() {
-    return classPackage + "." + className;
-  }
-
-  String brewJava() {
-    StringBuilder builder = new StringBuilder();
-    builder.append("// Generated code from Butter Knife. Do not modify!\n");
-    builder.append("package ").append(classPackage).append(";\n\n");
-
-    if (requiresResources()) {
-      builder.append("import android.content.res.Resources;\n");
-      if (!bitmapBindings.isEmpty()) {
-        builder.append("import android.graphics.BitmapFactory;\n");
-      }
-    }
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      builder.append("import android.view.View;\n");
-    }
-    builder.append("import butterknife.ButterKnife.Finder;\n");
-    if (parentViewBinder == null) {
-      builder.append("import butterknife.ButterKnife.ViewBinder;\n");
-    }
-    builder.append('\n');
-
-    builder.append("public class ").append(className);
-    builder.append("<T extends ").append(targetClass).append(">");
+  JavaFile brewJava() {
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC)
+        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
 
     if (parentViewBinder != null) {
-      builder.append(" extends ").append(parentViewBinder).append("<T>");
+      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
+          TypeVariableName.get("T")));
     } else {
-      builder.append(" implements ViewBinder<T>");
+      result.addSuperinterface(
+          ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),
+              TypeVariableName.get("T")));
     }
-    builder.append(" {\n");
 
-    emitBindMethod(builder);
-    builder.append('\n');
-    emitUnbindMethod(builder);
+    result.addMethod(createBindMethod());
+    result.addMethod(createUnbindMethod());
 
-    builder.append("}\n");
-    return builder.toString();
+    return JavaFile.builder(classPackage, result.build())
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
   }
 
-  private void emitBindMethod(StringBuilder builder) {
-    builder.append("  @Override ")
-        .append("public void bind(final Finder finder, final T target, Object source) {\n");
+  private MethodSpec createBindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(ButterKnife.Finder.class, "finder", FINAL)
+        .addParameter(TypeVariableName.get("T"), "target", FINAL)
+        .addParameter(Object.class, "source");
 
     // Emit a call to the superclass binder, if any.
     if (parentViewBinder != null) {
-      builder.append("    super.bind(finder, target, source);\n\n");
+      result.addStatement("super.bind(finder, target, source)");
     }
 
     if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
       // Local variable in which all views will be temporarily stored.
-      builder.append("    View view;\n");
+      result.addStatement("$T view", View.class);
 
       // Loop over each view bindings and emit it.
       for (ViewBindings bindings : viewIdMap.values()) {
-        emitViewBindings(builder, bindings);
+        addViewBindings(result, bindings);
       }
 
       // Loop over each collection binding and emit it.
       for (Map.Entry<FieldCollectionViewBinding, String[]> entry : collectionBindings.entrySet()) {
-        emitCollectionBinding(builder, entry.getKey(), entry.getValue());
+        emitCollectionBinding(result, entry.getKey(), entry.getValue());
       }
     }
 
     if (requiresResources()) {
-      builder.append("    Resources res = finder.getContext(source).getResources();\n");
+      result.addStatement("$T res = finder.getContext(source).getResources()", Resources.class);
 
       if (!bitmapBindings.isEmpty()) {
         for (FieldBitmapBinding binding : bitmapBindings) {
-          builder.append("    target.")
-              .append(binding.getName())
-              .append(" = BitmapFactory.decodeResource(res, ")
-              .append(binding.getId())
-              .append(");\n");
+          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
+              BitmapFactory.class, binding.getId());
         }
       }
 
       if (!resourceBindings.isEmpty()) {
         for (FieldResourceBinding binding : resourceBindings) {
-          builder.append("    target.")
-              .append(binding.getName())
-              .append(" = res.")
-              .append(binding.getMethod())
-              .append('(')
-              .append(binding.getId())
-              .append(");\n");
+          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
+              binding.getId());
         }
       }
     }
 
-    builder.append("  }\n");
+    return result.build();
   }
 
-  private void emitCollectionBinding(StringBuilder builder, FieldCollectionViewBinding binding,
+  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
       String[] ids) {
-    builder.append("    target.").append(binding.getName()).append(" = ");
-
+    String ofName;
     switch (binding.getKind()) {
       case ARRAY:
-        builder.append("Finder.arrayOf(");
+        ofName = "arrayOf";
         break;
       case LIST:
-        builder.append("Finder.listOf(");
+        ofName = "listOf";
         break;
       default:
         throw new IllegalStateException("Unknown kind: " + binding.getKind());
     }
 
+    CodeBlock.Builder builder = CodeBlock.builder();
     for (int i = 0; i < ids.length; i++) {
       if (i > 0) {
-        builder.append(',');
+        builder.add(", ");
       }
-      builder.append("\n        finder.<")
-          .append(binding.getType())
-          .append(">")
-          .append(binding.isRequired() ? "findRequiredView" : "findOptionalView")
-          .append("(source, ")
-          .append(ids[i])
-          .append(", \"");
-      emitHumanDescription(builder, Collections.singleton(binding));
-      builder.append("\")");
+      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
+      builder.add("\nfinder.<$T>$L(source, $L, $S)", ClassName.bestGuess(binding.getType()),
+          findMethod, ids[i], asHumanDescription(Collections.singleton(binding)));
     }
 
-    builder.append("\n    );\n");
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), ButterKnife.Finder.class,
+        ofName, builder.build());
   }
 
-  private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
-    builder.append("    view = ");
-
+  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
     List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
     if (requiredViewBindings.isEmpty()) {
-      builder.append("finder.findOptionalView(source, ")
-          .append(bindings.getId())
-          .append(", null);\n");
+      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
     } else {
       if (bindings.getId().equals(ButterKnifeProcessor.NO_RESOURCE)) {
-        builder.append("target;\n");
+        result.addStatement("view = target", bindings.getId());
       } else {
-        builder.append("finder.findRequiredView(source, ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, requiredViewBindings);
-        builder.append("\");\n");
+        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
+            asHumanDescription(requiredViewBindings));
       }
     }
 
-    emitFieldBindings(builder, bindings);
-    emitMethodBindings(builder, bindings);
+    addFieldBindings(result, bindings);
+    addMethodBindings(result, bindings);
   }
 
-  private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
+  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
     Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
-    if (fieldBindings.isEmpty()) {
-      return;
-    }
-
     for (FieldViewBinding fieldBinding : fieldBindings) {
-      builder.append("    target.")
-          .append(fieldBinding.getName())
-          .append(" = ");
       if (fieldBinding.requiresCast()) {
-        builder.append("finder.castView(view")
-            .append(", ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, fieldBindings);
-        builder.append("\");\n");
+        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
+            bindings.getId(), asHumanDescription(fieldBindings));
       } else {
-        builder.append("view;\n");
+        result.addStatement("target.$L = view", fieldBinding.getName());
       }
     }
   }
 
-  private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
       return;
     }
 
-    String extraIndent = "";
-
     // We only need to emit the null check if there are zero required bindings.
     boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
     if (needsNullChecked) {
-      builder.append("    if (view != null) {\n");
-      extraIndent = "  ";
+      result.beginControlFlow("if (view != null)");
     }
 
     for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
@@ -271,126 +234,65 @@ private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
       ListenerClass listener = e.getKey();
       Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
-      // Emit: ((OWNER_TYPE) view).SETTER_NAME(
-      boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
-      builder.append(extraIndent)
-          .append("    ");
-      if (needsCast) {
-        builder.append("((").append(listener.targetType());
-        if (listener.genericArguments() > 0) {
-          builder.append('<');
-          for (int i = 0; i < listener.genericArguments(); i++) {
-            if (i > 0) {
-              builder.append(", ");
-            }
-            builder.append('?');
-          }
-          builder.append('>');
-        }
-        builder.append(") ");
-      }
-      builder.append("view");
-      if (needsCast) {
-        builder.append(')');
-      }
-      builder.append('.')
-          .append(listener.setter())
-          .append("(\n");
-
-      // Emit: new TYPE() {
-      builder.append(extraIndent)
-          .append("      new ")
-          .append(listener.type())
-          .append("() {\n");
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
 
       for (ListenerMethod method : getListenerMethods(listener)) {
-        // Emit: @Override public RETURN_TYPE METHOD_NAME(
-        builder.append(extraIndent)
-            .append("        @Override public ")
-            .append(method.returnType())
-            .append(' ')
-            .append(method.name())
-            .append("(\n");
-
-        // Emit listener method arguments, each on their own line.
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
         String[] parameterTypes = method.parameters();
         for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          builder.append(extraIndent)
-              .append("          ")
-              .append(parameterTypes[i])
-              .append(" p")
-              .append(i);
-          if (i < count - 1) {
-            builder.append(',');
-          }
-          builder.append('\n');
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
         }
 
-        // Emit end of parameters, start of body.
-        builder.append(extraIndent).append("        ) {\n");
-
-        // Set up the return statement, if needed.
-        builder.append(extraIndent).append("          ");
         boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
         if (hasReturnType) {
-          builder.append("return ");
+          builder.add("return ");
         }
 
         if (methodBindings.containsKey(method)) {
-          Set<MethodViewBinding> set = methodBindings.get(method);
-          Iterator<MethodViewBinding> iterator = set.iterator();
-
-          while (iterator.hasNext()) {
-            MethodViewBinding binding = iterator.next();
-            builder.append("target.").append(binding.getName()).append('(');
+          for (MethodViewBinding binding : methodBindings.get(method)) {
+            builder.add("target.$L(", binding.getName());
             List<Parameter> parameters = binding.getParameters();
             String[] listenerParameters = method.parameters();
             for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
               Parameter parameter = parameters.get(i);
               int listenerPosition = parameter.getListenerPosition();
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.append("finder.<")
-                    .append(parameter.getType())
-                    .append(">castParam(p")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(method.name())
-                    .append("\", ")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(binding.getName())
-                    .append("\", ")
-                    .append(i)
-                    .append(")");
+                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n",
+                    bestGuess(parameter.getType()), listenerPosition, method.name(),
+                    listenerPosition, binding.getName(), i);
               } else {
-                builder.append('p').append(listenerPosition);
+                builder.add("p$L", listenerPosition);
               }
-
-              if (i < count - 1) {
-                builder.append(", ");
-              }
-            }
-            builder.append(");");
-            if (iterator.hasNext()) {
-              builder.append("\n").append("          ");
             }
+            builder.add(");\n");
           }
         } else if (hasReturnType) {
-          builder.append(method.defaultReturn()).append(';');
+          builder.add("$L;\n", method.defaultReturn());
         }
-        builder.append('\n');
-
-        // Emit end of listener method.
-        builder.append(extraIndent).append("        }\n");
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
       }
 
-      // Emit end of listener class body and close the setter method call.
-      builder.append(extraIndent).append("      });\n");
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) view).$L($L)", bestGuess(listener.targetType()),
+            listener.setter(), callback.build());
+      } else {
+        result.addStatement("view.$L($L)", listener.setter(), callback.build());
+      }
     }
 
     if (needsNullChecked) {
-      builder.append("    }\n");
+      result.endControlFlow();
     }
   }
 
@@ -418,35 +320,36 @@ private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
     }
   }
 
-  private void emitUnbindMethod(StringBuilder builder) {
-    builder.append("  @Override public void unbind(T target) {\n");
+  private MethodSpec createUnbindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(TypeVariableName.get("T"), "target");
+
     if (parentViewBinder != null) {
-      builder.append("    super.unbind(target);\n\n");
+      result.addStatement("super.unbind(target)");
     }
     for (ViewBindings bindings : viewIdMap.values()) {
       for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
-        builder.append("    target.").append(fieldBinding.getName()).append(" = null;\n");
+        result.addStatement("target.$L = null", fieldBinding.getName());
       }
     }
     for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(fieldCollectionBinding.getName()).append(" = null;\n");
+      result.addStatement("target.$L = null", fieldCollectionBinding.getName());
     }
-    builder.append("  }\n");
+
+    return result.build();
   }
 
-  static void emitHumanDescription(StringBuilder builder,
-      Collection<? extends ViewBinding> bindings) {
+  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
     Iterator<? extends ViewBinding> iterator = bindings.iterator();
     switch (bindings.size()) {
       case 1:
-        builder.append(iterator.next().getDescription());
-        break;
+        return iterator.next().getDescription();
       case 2:
-        builder.append(iterator.next().getDescription())
-            .append(" and ")
-            .append(iterator.next().getDescription());
-        break;
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
       default:
+        StringBuilder builder = new StringBuilder();
         for (int i = 0, count = bindings.size(); i < count; i++) {
           if (i != 0) {
             builder.append(", ");
@@ -456,7 +359,34 @@ static void emitHumanDescription(StringBuilder builder,
           }
           builder.append(iterator.next().getDescription());
         }
-        break;
+        return builder.toString();
+    }
+  }
+
+  static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
     }
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 53abc38e..51c22110 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -21,7 +21,20 @@
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
-
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -40,22 +53,6 @@
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
-import javax.tools.JavaFileObject;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 
 import static butterknife.internal.InternalKeys.ANDROID_PREFIX;
 import static butterknife.internal.InternalKeys.BINDING_CLASS_SUFFIX;
@@ -131,11 +128,7 @@
       BindingClass bindingClass = entry.getValue();
 
       try {
-        JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);
-        Writer writer = jfo.openWriter();
-        writer.write(bindingClass.brewJava());
-        writer.flush();
-        writer.close();
+        bindingClass.brewJava().writeTo(filer);
       } catch (IOException e) {
         error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
             e.getMessage());
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
index 47aaab10..7ac81dbd 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getStringArray(1);",
             "  }",
@@ -56,10 +57,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getIntArray(1);",
             "  }",
@@ -89,10 +91,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getTextArray(1);",
             "  }",
@@ -123,10 +126,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.obtainTypedArray(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
index b18898d7..eefc4944 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
@@ -25,10 +25,11 @@
             "package test;",
             "import android.content.res.Resources;",
             "import android.graphics.BitmapFactory;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = BitmapFactory.decodeResource(res, 1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
index 13ca01df..4b6ff128 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getBoolean(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
index 2d156090..2a999c54 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColor(1);",
             "  }",
@@ -57,10 +58,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColorStateList(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
index 2c68dd3d..2710dd98 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimension(1);",
             "  }",
@@ -56,10 +57,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimensionPixelSize(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
index c7f28e4d..c503fbf8 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
@@ -24,10 +24,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDrawable(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
index a8e4f574..ec9f41fb 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getInteger(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
index b9ac3bac..3d4486cb 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
@@ -23,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getString(1);",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
index 9844768f..db8633b4 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
@@ -24,10 +24,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
@@ -78,10 +79,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
@@ -115,10 +117,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
@@ -153,21 +156,20 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "    target.thing1 = null;",
@@ -216,10 +218,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    target.view = view;",
@@ -257,10 +260,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -275,10 +279,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -318,10 +324,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -336,10 +343,12 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    super.bind(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -555,6 +564,7 @@
         .in(source)
         .onLine(7);
   }
+
   @Test public void bindingArray() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
@@ -570,15 +580,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -609,15 +620,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -648,15 +660,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -688,15 +702,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -728,15 +743,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -768,15 +784,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
@@ -809,15 +826,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
             "    );",
             "  }",
             "  @Override public void unbind(T target) {",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index 307fafad..28884887 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -24,14 +24,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.CompoundButton;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(android.widget.CompoundButton p0, boolean p1) {",
+            "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
+            "      @Override public void onCheckedChanged(CompoundButton p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
index feca162a..82a6f1e8 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
@@ -23,14 +23,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -63,31 +65,27 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff1();",
-            "          target.doStuff2();",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff1();",
+            "        target.doStuff2();",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "}"));
@@ -115,15 +113,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -181,39 +181,43 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.Button;",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click0();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click1(p0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2(finder.<android.widget.TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click2(finder.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3(finder.<android.widget.Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click3(finder.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click4(finder.<test.Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click4(finder.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
             "      }",
             "    });",
             "  }",
@@ -244,26 +248,28 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
@@ -294,15 +300,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
-            "      view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(android.view.View p0) {",
+            "      view.setOnClickListener(new DebouncingOnClickListener() {",
+            "        @Override public void doClick(View p0) {",
             "          target.doStuff();",
             "        }",
             "      });",
@@ -337,15 +345,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
index 3ed49133..53cd6773 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -23,15 +23,18 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.KeyEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(android.widget.TextView p0, int p1, android.view.KeyEvent p2) {",
+            "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
+            "      @Override public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {",
             "        return target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
index bd6faa2b..077c8df2 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -24,14 +24,15 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(android.view.View p0, boolean p1) {",
+            "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
+            "      @Override public void onFocusChange(View p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
index 2442e24d..99a4032c 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -2,9 +2,8 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
@@ -24,19 +23,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -70,19 +69,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(p0, p1, p2, p3);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(p0, p1, p2, p3);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -114,19 +113,20 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -158,19 +158,20 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -201,23 +202,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "          android.widget.AdapterView<?> p0,",
-            "          android.view.View p1,",
-            "          int p2,",
-            "          long p3",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
index e9aa94f0..793a4848 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -24,14 +24,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
+            "      @Override public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {",
             "        return target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
index 17ee81af..a8d10215 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -2,9 +2,8 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
@@ -25,22 +24,21 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -70,22 +68,21 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -117,23 +114,22 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -165,45 +161,38 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
index f5c60ad4..fe30f62a 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -2,9 +2,8 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
@@ -26,18 +25,18 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(",
-            "      new android.view.View.OnLongClickListener() {",
-            "        @Override public boolean onLongClick(android.view.View p0) {",
-            "          return target.doStuff();",
-            "        }",
-            "      });",
+            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
+            "      @Override public boolean onLongClick(View p0) {",
+            "        return target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
index ad7e797e..e8f8bb1f 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -23,14 +23,16 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.support.v4.view.ViewPager;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
+            "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
             "      @Override public void onPageSelected(int p0) {",
             "        target.doStuff();",
             "      }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
index 598cff50..184d9f7c 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -23,20 +23,25 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.text.Editable;",
+            "import android.text.TextWatcher;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.CharSequence;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
-            "      @Override public void onTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
+            "      @Override public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "        target.doStuff();",
             "      }",
-            "      @Override public void beforeTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "      @Override public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "      }",
-            "      @Override public void afterTextChanged(android.text.Editable p0) {",
+            "      @Override public void afterTextChanged(Editable p0) {",
             "      }",
             "    });",
             "  }",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
index 27f681f7..3fdde4d1 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
@@ -23,15 +23,17 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.MotionEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
-            "      @Override public boolean onTouch(android.view.View p0, android.view.MotionEvent p1) {",
+            "    view.setOnTouchListener(new View.OnTouchListener() {",
+            "      @Override public boolean onTouch(View p0, MotionEvent p1) {",
             "        return target.doStuff();",
             "      }",
             "    });",
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
index 9383d8ec..d7ff6277 100644
--- a/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static butterknife.internal.BindingClass.emitHumanDescription;
+import static butterknife.internal.BindingClass.asHumanDescription;
 import static java.util.Arrays.asList;
 import static org.fest.assertions.api.Assertions.assertThat;
 
@@ -12,17 +12,14 @@
     ViewBinding two = new TestViewBinding("two");
     ViewBinding three = new TestViewBinding("three");
 
-    StringBuilder builder1 = new StringBuilder();
-    emitHumanDescription(builder1, asList(one));
-    assertThat(builder1.toString()).isEqualTo("one");
+    String result1 = asHumanDescription(asList(one));
+    assertThat(result1).isEqualTo("one");
 
-    StringBuilder builder2 = new StringBuilder();
-    emitHumanDescription(builder2, asList(one, two));
-    assertThat(builder2.toString()).isEqualTo("one and two");
+    String result2 = asHumanDescription(asList(one, two));
+    assertThat(result2).isEqualTo("one and two");
 
-    StringBuilder builder3 = new StringBuilder();
-    emitHumanDescription(builder3, asList(one, two, three));
-    assertThat(builder3.toString()).isEqualTo("one, two, and three");
+    String result3 = asHumanDescription(asList(one, two, three));
+    assertThat(result3).isEqualTo("one, two, and three");
   }
 
   private static class TestViewBinding implements ViewBinding {
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerClass.java b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
index 1c992c2f..82101cc5 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
@@ -16,9 +16,6 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  /** The number of generic arguments for the type. This used used for casting the view. */
-  int genericArguments() default 0;
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
index 31ab24f0..ca62d675 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
@@ -14,7 +14,7 @@
   /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
   String[] parameters() default { };
 
-  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  /** Primitive or fully-qualified return type of the listener method. May also be {@code void}. */
   String returnType() default "void";
 
   /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
diff --git a/pom.xml b/pom.xml
index 382536c8..6b84aa5c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -37,6 +37,7 @@
     <robolectric.version>2.2</robolectric.version>
     <fest.android.version>1.0.7</fest.android.version>
     <compile-test.version>0.6</compile-test.version>
+    <javapoet.version>1.2.0</javapoet.version>
   </properties>
 
   <scm>
@@ -65,6 +66,11 @@
         <artifactId>android</artifactId>
         <version>${android.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.squareup</groupId>
+        <artifactId>javapoet</artifactId>
+        <version>${javapoet.version}</version>
+      </dependency>
       <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
