diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index bd283147..880d0c36 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -122,12 +122,12 @@ private ButterKnife() {
       }
     };
 
-    public static <T extends View> T[] arrayOf(T... views) {
+    public static <T> T[] arrayOf(T... views) {
       return views;
     }
 
-    public static <T extends View> List<T> listOf(T... views) {
-      return new ImmutableViewList<T>(views);
+    public static <T> List<T> listOf(T... views) {
+      return new ImmutableList<T>(views);
     }
 
     public View findRequiredView(Object source, int id, String who) {
diff --git a/butterknife/src/main/java/butterknife/ImmutableViewList.java b/butterknife/src/main/java/butterknife/ImmutableList.java
similarity index 78%
rename from butterknife/src/main/java/butterknife/ImmutableViewList.java
rename to butterknife/src/main/java/butterknife/ImmutableList.java
index 399a3671..d3d2a75c 100644
--- a/butterknife/src/main/java/butterknife/ImmutableViewList.java
+++ b/butterknife/src/main/java/butterknife/ImmutableList.java
@@ -8,10 +8,10 @@
  * An immutable list of views which is lighter than {@code
  * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(foo, bar)))}.
  */
-final class ImmutableViewList<T extends View> extends AbstractList<T> implements RandomAccess {
+final class ImmutableList<T> extends AbstractList<T> implements RandomAccess {
   private final T[] views;
 
-  ImmutableViewList(T[] views) {
+  ImmutableList(T[] views) {
     this.views = views;
   }
 
@@ -24,7 +24,7 @@
   }
 
   @Override public boolean contains(Object o) {
-    for (View view : views) {
+    for (T view : views) {
       if (view == o) {
         return true;
       }
