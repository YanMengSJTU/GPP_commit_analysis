diff --git a/build.gradle b/build.gradle
index 1ba74a2a..fb7e13c0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -8,7 +8,7 @@ buildscript {
 
       'supportLibrary': '26.0.0',
       'androidPlugin': '3.0.0-alpha8',
-      'androidTools': '25.3.0',
+      'androidTools': '26.0.0-alpha8',
       'kotlin': '1.1.3-2',
 
       'release': '8.7.0',
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
index e495c6bf..08cdfda5 100644
--- a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -1,5 +1,6 @@
 package butterknife.lint;
 
+import com.android.tools.lint.client.api.UElementHandler;
 import com.android.tools.lint.detector.api.Category;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
@@ -9,22 +10,22 @@
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.google.common.collect.ImmutableSet;
-import com.intellij.psi.JavaElementVisitor;
-import com.intellij.psi.JavaRecursiveElementVisitor;
-import com.intellij.psi.PsiAnnotation;
-import com.intellij.psi.PsiClass;
-import com.intellij.psi.PsiElement;
-import com.intellij.psi.PsiExpression;
-import com.intellij.psi.PsiReferenceExpression;
-
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import org.jetbrains.uast.UAnnotation;
+import org.jetbrains.uast.UClass;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UFile;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
+import org.jetbrains.uast.visitor.AbstractUastVisitor;
 
 /**
  * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
  */
-public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {
+public class InvalidR2UsageDetector extends Detector implements Detector.UastScanner {
   private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
   private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
   private static final String ISSUE_ID = "InvalidR2Usage";
@@ -38,39 +39,48 @@
 
   private static final String R2 = "R2";
 
-  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {
-    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);
+  @Override public List<Class<? extends UElement>> getApplicableUastTypes() {
+    return Collections.singletonList(UClass.class);
   }
 
-  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {
-    return new JavaElementVisitor() {
-      @Override public void visitClass(PsiClass node) {
+  @Override public UElementHandler createUastHandler(final JavaContext context) {
+    return new UElementHandler() {
+      @Override public void visitClass(UClass node) {
         node.accept(new R2UsageVisitor(context));
       }
     };
   }
 
-  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {
+  private static class R2UsageVisitor extends AbstractUastVisitor {
     private final JavaContext context;
 
     R2UsageVisitor(JavaContext context) {
       this.context = context;
     }
 
-    @Override public void visitAnnotation(PsiAnnotation annotation) {
+    @Override public boolean visitAnnotation(UAnnotation annotation) {
       // skip annotations
+      return true;
+    }
+
+    @Override public boolean visitQualifiedReferenceExpression(UQualifiedReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitQualifiedReferenceExpression(node);
     }
 
-    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {
-      detectR2(context, expression);
-      super.visitReferenceExpression(expression);
+    @Override
+    public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitSimpleNameReferenceExpression(node);
     }
 
-    private static void detectR2(JavaContext context, PsiElement node) {
-      PsiClass[] classes = context.getJavaFile().getClasses();
-      if (classes.length > 0 && classes[0].getName() != null) {
-        String qualifiedName = classes[0].getName();
-        if (qualifiedName.contains("_ViewBinder") || qualifiedName.contains("_ViewBinding")
+    private static void detectR2(JavaContext context, UElement node) {
+      UFile sourceFile = context.getUastFile();
+      List<UClass> classes = sourceFile.getClasses();
+      if (!classes.isEmpty() && classes.get(0).getName() != null) {
+        String qualifiedName = classes.get(0).getName();
+        if (qualifiedName.contains("_ViewBinder")
+            || qualifiedName.contains("_ViewBinding")
             || qualifiedName.equals(R2)) {
           // skip generated files and R2
           return;
@@ -82,15 +92,16 @@ private static void detectR2(JavaContext context, PsiElement node) {
       }
     }
 
-    private static boolean isR2Expression(PsiElement node) {
-      if (node.getParent() == null) {
+    private static boolean isR2Expression(UElement node) {
+      UElement parentNode = node.getUastParent();
+      if (parentNode == null) {
         return false;
       }
-      String text = node.getText();
-      PsiElement parent = LintUtils.skipParentheses(node.getParent());
+      String text = node.asSourceString();
+      UElement parent = LintUtils.skipParentheses(parentNode);
       return (text.equals(R2) || text.contains(".R2"))
-          && parent instanceof PsiExpression
-          && endsWithAny(parent.getText(), SUPPORTED_TYPES);
+          && parent instanceof UExpression
+          && endsWithAny(parent.asSourceString(), SUPPORTED_TYPES);
     }
 
     private static boolean endsWithAny(String text, Set<String> possibleValues) {
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
index c150724d..d655f943 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -1,15 +1,13 @@
 package butterknife.lint;
 
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.tools.lint.checks.infrastructure.TestFiles;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
-  private static final String NO_WARNINGS = "No warnings.";
-  private static final TestFile BIND_TEST = TestFiles.java(""
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
+
+public final class InvalidR2UsageDetectorTest {
+  private static final TestFile BIND_TEST = java(""
       + "package sample.r2;\n"
       + "\n"
       + "import java.lang.annotation.ElementType;\n"
@@ -21,7 +19,8 @@
       + "public @interface BindTest {\n"
       + "  int value();\n"
       + "}\n");
-  private static final TestFile R2 = TestFiles.java(""
+
+  private static final TestFile R2 = java(""
       + "package sample.r2;\n"
       + "\n"
       + "public final class R2 {\n"
@@ -62,72 +61,77 @@
       + "  }\n"
       + "}");
 
-  @Override protected Detector getDetector() {
-    return new InvalidR2UsageDetector();
-  }
-
-  @Override protected List<Issue> getIssues() {
-    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
-  }
-
-  public void testNoR2Usage() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample;\n"
-        + "\n"
-        + "class NoR2Usage {\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(R2, file));
+  @Test public void noR2Usage() {
+    lint() //
+        .files(R2, //
+            java("" //
+                + "package sample;\n" //
+                + "class NoR2Usage {}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageInAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageInAnnotations {\n"
-        + "\n"
-        + "  @BindTest(sample.r2.R2.string.res) String test;\n"
-        + "\n"
-        + "  @BindTest(R2.id.res) public void foo() { }\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(file, BIND_TEST, R2));
+  @Test public void usesR2InAnnotations() {
+    lint() //
+        .files(R2, BIND_TEST, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageInAnnotations {\n"
+                + "\n"
+                + "  @BindTest(sample.r2.R2.string.res) String test;\n"
+                + "\n"
+                + "  @BindTest(R2.id.res) public void foo() {}\n"
+                + "}\n") //
+        ) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageOutsideAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageOutsideAnnotations {\n"
-        + "\n"
-        + "  int array = sample.r2.R2.array.res;\n"
-        + "\n"
-        + "  public void foo(int color) {}\n"
-        + "\n"
-        + "  public void bar() {\n"
-        + "    foo(R2.color.res);\n"
-        + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertNotSame(NO_WARNINGS, lintOutput);
-    assertTrue(lintOutput.contains("2 errors, 0 warnings"));
+  @Test public void usesR2OutsideAnnotations() {
+    lint() //
+        .files(R2, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageOutsideAnnotations {\n"
+                + "\n"
+                + "  int array = sample.r2.R2.array.res;\n"
+                + "\n"
+                + "  public void foo(int color) {}\n"
+                + "\n"
+                + "  public void bar() {\n"
+                + "    foo(R2.color.res);\n"
+                + "  }\n"
+                + "}\n" //
+            )) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectErrorCount(2) //
+        .expectWarningCount(0);
   }
 
-  public void testR2UsageWithSuppression() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample.r2;\n"
-        + "\n"
-        + "public class R2UsageWithSuppression {\n"
-        + "\n"
-        + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
-        + "  int bool = sample.r2.R2.bool.res;\n"
-        + "\n"
-        + "  public void foo(int attr) {}\n"
-        + "\n"
-        + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
-        + "  public void bar() {\n"
-        + "    foo(R2.attr.res);\n"
-        + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertSame(NO_WARNINGS, lintOutput);
+  @Test public void usesR2WithSuppression() {
+    lint() //
+        .files(R2, java(""
+            + "package sample.r2;\n"
+            + "\n"
+            + "public class R2UsageWithSuppression {\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  int bool = sample.r2.R2.bool.res;\n"
+            + "\n"
+            + "  public void foo(int attr) {}\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  public void bar() {\n"
+            + "    foo(R2.attr.res);\n"
+            + "  }\n"
+            + "}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 }
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
index 9ad97538..53c7480f 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
@@ -5,7 +5,7 @@
 import static com.google.common.truth.Truth.assertThat;
 
 public final class LintRegistryTest {
-  @Test public void issues() throws Exception {
+  @Test public void issues() {
     assertThat(new LintRegistry().getIssues()).contains(InvalidR2UsageDetector.ISSUE);
   }
 }
