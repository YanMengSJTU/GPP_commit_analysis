diff --git a/README.md b/README.md
index 26d21abc..2e965c21 100644
--- a/README.md
+++ b/README.md
@@ -17,7 +17,7 @@ class ExampleActivity extends Activity {
   @BindView(R.id.user) EditText username;
   @BindView(R.id.pass) EditText password;
 
-  @BindString(R.string.login_error) String loginErrorMessage;
+  @BindFairString(R.string.login_error) String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
diff --git a/build.gradle b/build.gradle
index aa532e0e..cd5fa527 100644
--- a/build.gradle
+++ b/build.gradle
@@ -10,7 +10,7 @@ buildscript {
       'androidTools': '26.1.0-alpha09',
       'kotlin': '1.2.21',
 
-      'release': '8.8.1',
+      'release': '8.8.2',
   ]
 
   ext.deps = [
diff --git a/butterknife-annotations/src/main/java/butterknife/BindString.java b/butterknife-annotations/src/main/java/butterknife/BindFairString.java
similarity index 51%
rename from butterknife-annotations/src/main/java/butterknife/BindString.java
rename to butterknife-annotations/src/main/java/butterknife/BindFairString.java
index ff82aa99..a7072065 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindString.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFairString.java
@@ -1,20 +1,20 @@
 package butterknife;
 
 import android.support.annotation.StringRes;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
+@Retention(CLASS) @Target(FIELD)
 /**
- * Bind a field to the specified string resource ID.
- * <pre><code>
- * {@literal @}BindString(R.string.username_error) String usernameErrorText;
- * </code></pre>
+ * The annotation contains two values:
+ * @value the default key for use from the remote server, it is value for the annotation.
+ * @modularKey the modular key override
  */
-@Retention(CLASS) @Target(FIELD)
-public @interface BindString {
-  /** String resource ID to which the field will be bound. */
-  @StringRes int value();
-}
+public @interface BindFairString {
+    @StringRes int value() default 0;
+    String modularKey() default "";
+}
\ No newline at end of file
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 6ea7e4a7..111b319a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -7,10 +7,10 @@
 import butterknife.BindColor;
 import butterknife.BindDimen;
 import butterknife.BindDrawable;
+import butterknife.BindFairString;
 import butterknife.BindFloat;
 import butterknife.BindFont;
 import butterknife.BindInt;
-import butterknife.BindString;
 import butterknife.BindView;
 import butterknife.BindViews;
 import butterknife.OnCheckedChanged;
@@ -173,9 +173,9 @@
     annotations.add(BindFloat.class);
     annotations.add(BindFont.class);
     annotations.add(BindInt.class);
-    annotations.add(BindString.class);
     annotations.add(BindView.class);
     annotations.add(BindViews.class);
+    annotations.add(BindFairString.class);
     annotations.addAll(LISTENERS);
 
     return annotations;
@@ -303,13 +303,13 @@
       }
     }
 
-    // Process each @BindString element.
-    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
+    // Process each @BindFairString element.
+    for (Element element : env.getElementsAnnotatedWith(BindFairString.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceString(element, builderMap, erasedTargetNames);
+        parseResourceFairString(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, BindString.class, e);
+        logParsingError(element, BindFairString.class, e);
       }
     }
 
@@ -877,22 +877,22 @@ private void parseResourceInt(Element element,
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceString(Element element,
-      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+  private void parseResourceFairString(Element element,
+                                   Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
     // Verify that the target type is String.
     if (!STRING_TYPE.equals(element.asType().toString())) {
       error(element, "@%s field type must be 'String'. (%s.%s)",
-          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
+              BindFairString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+              element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
-    hasError |= isBindingInWrongPackage(BindString.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindFairString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFairString.class, element);
 
     if (hasError) {
       return;
@@ -900,11 +900,11 @@ private void parseResourceString(Element element,
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindString.class).value();
-    Id resourceId = elementToId(element, BindString.class, id);
+    int id = element.getAnnotation(BindFairString.class).value();
+    Id resourceId = elementToId(element, BindFairString.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));
+            new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));
 
     erasedTargetNames.add(enclosingElement);
   }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index d9510525..74fc61c8 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -89,6 +89,7 @@ ResourceMethod methodForSdk(int sdk) {
 
   @Override public CodeBlock render(int sdk) {
     ResourceMethod method = type.methodForSdk(sdk);
+
     if (method.typeName == null) {
       if (method.requiresResources) {
         return CodeBlock.of("target.$L = res.$L($L)", name, method.name, id.code);
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 7097639f..6a5721b3 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -9,7 +9,8 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
-import butterknife.BindString;
+
+import butterknife.BindFairString;
 import butterknife.BindView;
 import butterknife.BindViews;
 import butterknife.ButterKnife;
@@ -38,10 +39,10 @@
   @BindView(R.id.hello) Button hello;
   @BindView(R.id.list_of_things) ListView listOfThings;
   @BindView(R.id.footer) TextView footer;
-  @BindString(R.string.app_name) String butterKnife;
-  @BindString(R.string.field_method) String fieldMethod;
-  @BindString(R.string.by_jake_wharton) String byJakeWharton;
-  @BindString(R.string.say_hello) String sayHello;
+  @BindFairString(R.string.app_name) String butterKnife;
+  @BindFairString(R.string.field_method) String fieldMethod;
+  @BindFairString(R.string.by_jake_wharton) String byJakeWharton;
+  @BindFairString(R.string.say_hello) String sayHello;
 
   @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
 
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
deleted file mode 100644
index c72e0549..00000000
--- a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package butterknife.functional;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import butterknife.BindString;
-import butterknife.Unbinder;
-import butterknife.test.R;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertThat;
-
-public final class BindStringTest {
-  private final Context context = InstrumentationRegistry.getContext();
-
-  static class Target {
-    @BindString(R.string.hey) String actual;
-  }
-
-  @Test public void simpleInt() {
-    Target target = new Target();
-    String expected = context.getString(R.string.hey);
-
-    Unbinder unbinder = new BindStringTest$Target_ViewBinding(target, context);
-    assertThat(target.actual).isEqualTo(expected);
-
-    unbinder.unbind();
-    assertThat(target.actual).isEqualTo(expected);
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index e4090708..fbc4ca34 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -19,6 +19,8 @@
 import java.util.List;
 import java.util.Map;
 
+//Aaron
+
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
deleted file mode 100644
index 27d68879..00000000
--- a/butterknife/src/test/java/butterknife/BindStringTest.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public final class BindStringTest {
-  @Test public void typeMustBeString() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindString;\n"
-        + "public class Test {\n"
-        + "  @BindString(1) boolean one;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
-        .in(source).onLine(4);
-  }
-}
diff --git a/website/index.html b/website/index.html
index 6905ec97..88c6adff 100644
--- a/website/index.html
+++ b/website/index.html
@@ -46,9 +46,9 @@ <h3 id="introduction">Introduction</h3>
 }</pre>
 
             <h4 id="resource">Resource Binding</h4>
-            <p>Bind pre-defined resources with <code>@BindBool</code>, <code>@BindColor</code>, <code>@BindDimen</code>, <code>@BindDrawable</code>, <code>@BindInt</code>, <code>@BindString</code>, which binds an <code>R.bool</code> ID (or your specified type) to its corresponding field.</p>
+            <p>Bind pre-defined resources with <code>@BindBool</code>, <code>@BindColor</code>, <code>@BindDimen</code>, <code>@BindDrawable</code>, <code>@BindInt</code>, <code>@BindFairString</code>, which binds an <code>R.bool</code> ID (or your specified type) to its corresponding field.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @BindString(R.string.title) String title;
+  @BindFairString(R.string.title) String title;
   @BindDrawable(R.drawable.graphic) Drawable graphic;
   @BindColor(R.color.red) int red; // int or ColorStateList field
   @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
