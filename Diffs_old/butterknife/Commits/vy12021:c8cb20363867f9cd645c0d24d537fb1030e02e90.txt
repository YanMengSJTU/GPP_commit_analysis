diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 70fcf58a..9f262dc2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -447,6 +447,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
           callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
         }
 
+        boolean returned = false;
         boolean hasReturnType = !"void".equals(method.returnType());
         CodeBlock.Builder builder = CodeBlock.builder();
 
@@ -471,7 +472,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
                     }
                     builder.endControlFlow();
                   } else {
-                  throw new RuntimeException("Condition\" "
+                    throw new RuntimeException("Condition\" "
                           + condition + "\" must be a valid java symbol");
                   }
                 }
@@ -479,6 +480,10 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
               builder.addStatement("target.postAction(p0, $S, $S, $S)",
                       targetTypeName, methodBinding.getName(), key);
             }
+            if (hasReturnType && !returned) {
+              builder.add("return ");
+              returned = true;
+            }
             builder.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -499,8 +504,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
             }
             builder.add(");\n");
           }
-        }
-        if (hasReturnType) {
+        } else {
           builder.addStatement("return $L", method.defaultReturn());
         }
         callbackMethod.addCode(builder.build());
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
index 0926b2f3..f4dd484e 100644
--- a/butterknife/src/test/java/butterknife/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -13,12 +13,19 @@
   @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1) boolean doStuff() {\n"
+        + "import butterknife.ViewController;\n"
+        + "public class Test implements ViewController {\n"
+        + "  @OnLongClick(value = {1}, required = {\"condition\"}, key = \"Key\") boolean doStuff() {\n"
         + "    return true;\n"
         + "  }\n"
-        + "}"
+
+        + "public boolean condition() {return true;}\n"
+        + "@Override public void postAction(View view, String clazz, String method, String key) {}\n"
+        + "@Override public View getView() {return null;}\n"
+
+            + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
@@ -27,6 +34,7 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
+        + "import butterknife.ViewController;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -42,6 +50,13 @@
         + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
         + "      @Override\n"
         + "      public boolean onLongClick(View p0) {\n"
+        + "        if (!ViewController.class.isInstance(target)) {\n"
+        + "          throw new RuntimeException(\"Target must be implements from ViewController\");\n"
+        + "        }\n"
+        + "        if (!target.condition()) {\n"
+        + "          return false;\n"
+        + "        }\n"
+        + "        target.postAction(p0, \"test.Test\", \"doStuff\", \"Key\");\n"
         + "        return target.doStuff();\n"
         + "      }\n"
         + "    });\n"
diff --git a/gradle.properties b/gradle.properties
index fbe3c44f..118b2b43 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.6.1.2-snapshot
+VERSION_NAME=8.6.1.3-snapshot
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
