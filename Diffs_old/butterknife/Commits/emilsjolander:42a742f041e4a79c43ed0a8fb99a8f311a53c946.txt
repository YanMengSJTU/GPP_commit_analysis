diff --git a/butterknife/src/main/java/butterknife/ImmutableList.java b/butterknife/src/main/java/butterknife/ImmutableList.java
index d3d2a75c..3c3d07fa 100644
--- a/butterknife/src/main/java/butterknife/ImmutableList.java
+++ b/butterknife/src/main/java/butterknife/ImmutableList.java
@@ -1,6 +1,5 @@
 package butterknife;
 
-import android.view.View;
 import java.util.AbstractList;
 import java.util.RandomAccess;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 9da3868b..2fe8878e 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -448,9 +448,11 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
           // Verify target type is valid for a binding without an id.
           String targetType = listener.targetType();
-          if (!isSubtypeOfType(enclosingElement.asType(), targetType) && !isInterface(enclosingElement.asType())) {
+          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
+              && !isInterface(enclosingElement.asType())) {
             error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\" or an interface. (%s.%s)", annotationClass.getSimpleName(), targetType,
+                    + "\"%s\" or an interface. (%s.%s)",
+                    annotationClass.getSimpleName(), targetType,
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -531,7 +533,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           if (methodParameterUsed.get(j)) {
             continue;
           }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j]) || isInterface(methodParameterType)) {
+          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+              || isInterface(methodParameterType)) {
             parameters[i] = new Parameter(j, methodParameterType.toString());
             methodParameterUsed.set(j);
             break;
@@ -594,7 +597,7 @@ private boolean isInterface(TypeMirror typeMirror) {
     if (!(typeMirror instanceof DeclaredType)) {
       return false;
     }
-    return ((DeclaredType)typeMirror).asElement().getKind() == INTERFACE;
+    return ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
   }
 
   private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index 3c8d1b3c..b2769884 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -187,7 +187,6 @@ private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
       builder.append("    target.")
           .append(viewBinding.getName())
           .append(" = ");
-          
       if (viewBinding.getType().equals(VIEW_TYPE)) {
         builder.append("view;\n");
       } else {
