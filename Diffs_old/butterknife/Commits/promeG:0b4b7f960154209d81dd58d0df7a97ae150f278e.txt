diff --git a/butterknife-annotations/src/main/java/butterknife/Bind.java b/butterknife-annotations/src/main/java/butterknife/Bind.java
index c49417fa..d5353047 100644
--- a/butterknife-annotations/src/main/java/butterknife/Bind.java
+++ b/butterknife-annotations/src/main/java/butterknife/Bind.java
@@ -17,6 +17,6 @@
 @Retention(CLASS) @Target(FIELD)
 public @interface Bind {
   /** View ID to which the field will be bound. */
-  @IdRes int[] value();
-  String idName() default "";
+  @IdRes int[] value() default -1;
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index b590a037..ae5dc7b0 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.widget.CompoundButton.OnCheckedChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -42,4 +44,5 @@
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 88ab79b1..be0323ba 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.view.View.OnClickListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -38,5 +40,5 @@
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
-  String idName() default "";
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 6c02f264..7c81ba2d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.widget.TextView.OnEditorActionListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -46,4 +48,5 @@
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index 88c55425..85a19daa 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.view.View.OnFocusChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -41,4 +43,5 @@
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 1c20ff30..af587b3b 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.widget.AdapterView.OnItemClickListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -43,4 +45,5 @@
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index afc49b72..f1d80f85 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.widget.AdapterView.OnItemLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -47,4 +49,5 @@
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
index 500a8db1..499987ac 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.widget.AdapterView.OnItemSelectedListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -44,6 +46,7 @@
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 9cc1c9f3..737a6cd5 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.view.View.OnLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -42,4 +44,5 @@
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index 7dc81b42..e99177c6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
@@ -38,6 +40,7 @@
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 5669ba6f..26b7520c 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -3,11 +3,13 @@
 import android.support.annotation.IdRes;
 import android.text.TextWatcher;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
@@ -42,6 +44,7 @@
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
index dc4b69e7..350751c8 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -2,11 +2,13 @@
 
 import android.support.annotation.IdRes;
 import android.view.View;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static android.view.View.OnTouchListener;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.CLASS;
@@ -44,4 +46,5 @@
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] resName() default "";
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
index 45f92454..b86e43fd 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
@@ -1,7 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -12,6 +10,7 @@
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
 import com.squareup.javapoet.WildcardTypeName;
+
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -22,6 +21,9 @@
 import java.util.Map;
 import java.util.Set;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static butterknife.compiler.ButterKnifeProcessor.NO_ID;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
 import static java.util.Collections.singletonList;
@@ -43,7 +45,9 @@
       ClassName.get("android.graphics", "BitmapFactory");
 
   private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<String, ViewBindings> viewNameMap = new LinkedHashMap<>();
   private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, String[]> collectionNameBindings = new LinkedHashMap<>();
   private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
   private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();
   private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
@@ -71,14 +75,22 @@ void addDrawable(FieldDrawableBinding binding) {
     drawableBindings.add(binding);
   }
 
-  void addField(int id, FieldViewBinding binding) {
-    getOrCreateViewBindings(id).addFieldBinding(binding);
+  void addField(int id, String resName, FieldViewBinding binding) {
+    if (id != -1) {
+      getOrCreateViewBindings(id).addFieldBinding(binding);
+    } else {
+      getOrCreateViewBindings(resName).addFieldBinding(binding);
+    }
   }
 
   void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
     collectionBindings.put(binding, ids);
   }
 
+  void addFieldCollection(String[] resNames, FieldCollectionViewBinding binding) {
+    collectionNameBindings.put(binding, resNames);
+  }
+
   boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
       MethodViewBinding binding) {
     ViewBindings viewBindings = getOrCreateViewBindings(id);
@@ -89,6 +101,16 @@ boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
     return true;
   }
 
+  boolean addMethod(String resName, ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    ViewBindings viewBindings = getOrCreateViewBindings(resName);
+    if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+      return false;
+    }
+    viewBindings.addMethodBinding(listener, method, binding);
+    return true;
+  }
+
   void addResource(FieldResourceBinding binding) {
     resourceBindings.add(binding);
   }
@@ -110,6 +132,15 @@ private ViewBindings getOrCreateViewBindings(int id) {
     return viewId;
   }
 
+  private ViewBindings getOrCreateViewBindings(String resName) {
+    ViewBindings viewId = viewNameMap.get(resName);
+    if (viewId == null) {
+      viewId = new ViewBindings(resName);
+      viewNameMap.put(resName, viewId);
+    }
+    return viewId;
+  }
+
   JavaFile brewJava() {
     TypeSpec.Builder result = TypeSpec.classBuilder(className)
         .addModifiers(PUBLIC)
@@ -153,9 +184,11 @@ private TypeSpec createUnbinderClass() {
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
 
+
     // Throw exception if unbind called twice.
     unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
-        "Bindings already cleared.");
+            "Bindings already cleared.");
+
 
     for (ViewBindings bindings : viewIdMap.values()) {
       addFieldAndUnbindStatement(result, unbindMethod, bindings);
@@ -164,14 +197,29 @@ private TypeSpec createUnbinderClass() {
       }
     }
 
+
     for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
       unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());
     }
 
+
+    for (ViewBindings bindings : viewNameMap.values()) {
+      addFieldAndUnbindStatement(result, unbindMethod, bindings);
+      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
+        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());
+      }
+    }
+
+    for (FieldCollectionViewBinding fieldCollectionBinding : collectionNameBindings.keySet()) {
+      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());
+    }
+
+
     unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());
     unbindMethod.addStatement("target = null");
     result.addMethod(unbindMethod.build());
 
+
     return result.build();
   }
 
@@ -185,7 +233,7 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
     }
 
     // Using view id for name uniqueness.
-    String fieldName = "view" + bindings.getId();
+    String fieldName = "view" + ( bindings.getId() == -1 ? bindings.getResName() : bindings.getId());
     result.addField(VIEW, fieldName);
 
     // We only need to emit the null check if there are zero required bindings.
@@ -234,9 +282,11 @@ private MethodSpec createBindMethod() {
           unbinderBinding.getUnbinderClassName(), "target");
     }
 
+    boolean isViewDecleared = false;
     if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
       // Local variable in which all views will be temporarily stored.
       result.addStatement("$T view", VIEW);
+      isViewDecleared = true;
 
       // Loop over each view bindings and emit it.
       for (ViewBindings bindings : viewIdMap.values()) {
@@ -249,6 +299,23 @@ private MethodSpec createBindMethod() {
       }
     }
 
+    if (!viewNameMap.isEmpty() || !collectionNameBindings.isEmpty()) {
+      // Local variable in which all views will be temporarily stored.
+      if (!isViewDecleared) {
+        result.addStatement("$T view", VIEW);
+      }
+
+      // Loop over each view bindings and emit it.
+      for (ViewBindings bindings : viewNameMap.values()) {
+        addViewBindings(result, bindings);
+      }
+
+      // Loop over each collection binding and emit it.
+      for (Map.Entry<FieldCollectionViewBinding, String[]> entry : collectionNameBindings.entrySet()) {
+        emitCollectionBinding(result, entry.getKey(), entry.getValue());
+      }
+    }
+
     // Bind unbinder if was requested.
     if (hasUnbinder()) {
       result.addStatement("target.$L = unbinder", unbinderBinding.getUnbinderFieldName());
@@ -321,13 +388,42 @@ private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionVie
     result.addStatement("target.$L = $T.$L($L)", binding.getName(), UTILS, ofName, builder.build());
   }
 
+  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
+      String[] resNames) {
+    String ofName;
+    switch (binding.getKind()) {
+      case ARRAY:
+        ofName = "arrayOf";
+        break;
+      case LIST:
+        ofName = "listOf";
+        break;
+      default:
+        throw new IllegalStateException("Unknown kind: " + binding.getKind());
+    }
+
+    CodeBlock.Builder builder = CodeBlock.builder();
+    for (int i = 0; i < resNames.length; i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
+      builder.add("\nfinder.<$T>$L(source, $S, $S)", binding.getType(), findMethod, resNames[i],
+          asHumanDescription(singletonList(binding)));
+    }
+
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), UTILS, ofName, builder.build());
+  }
+
   private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
     List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
     if (requiredViewBindings.isEmpty()) {
       result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
     } else {
-      if (bindings.getId() == NO_ID) {
-        result.addStatement("view = target");
+      if (bindings.getId() == NO_ID && !"".equalsIgnoreCase(bindings.getResName())) {
+        // using resName instead of id
+        result.addStatement("view = finder.findRequiredView(source, $S, $S)", bindings.getResName(),
+                asHumanDescription(requiredViewBindings));
       } else {
         result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
             asHumanDescription(requiredViewBindings));
@@ -342,8 +438,14 @@ private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings)
     Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
     for (FieldViewBinding fieldBinding : fieldBindings) {
       if (fieldBinding.requiresCast()) {
-        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
-            bindings.getId(), asHumanDescription(fieldBindings));
+        if (bindings.getId() == NO_ID && !"".equalsIgnoreCase(bindings.getResName())) {
+          // using resName instead of id
+          result.addStatement("target.$L = finder.castView(view, $S, $S)", fieldBinding.getName(),
+                  bindings.getResName(), asHumanDescription(fieldBindings));
+        } else {
+          result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
+                  bindings.getId(), asHumanDescription(fieldBindings));
+        }
       } else {
         result.addStatement("target.$L = view", fieldBinding.getName());
       }
@@ -365,7 +467,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
 
     // Add the view reference to the unbinder.
     if (hasUnbinder()) {
-      result.addStatement("unbinder.$L = view", "view" + bindings.getId());
+      result.addStatement("unbinder.$L = view", "view" + ( bindings.getId() == -1 ? bindings.getResName() : bindings.getId()));
     }
 
     for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ae6fa7c9..a6383763 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,32 +1,10 @@
 package butterknife.compiler;
 
-import butterknife.Bind;
-import butterknife.BindArray;
-import butterknife.BindBitmap;
-import butterknife.BindBool;
-import butterknife.BindColor;
-import butterknife.BindDimen;
-import butterknife.BindDrawable;
-import butterknife.BindInt;
-import butterknife.BindString;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import butterknife.Unbinder;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
+
 import com.squareup.javapoet.TypeName;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -41,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -61,6 +40,31 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -99,13 +103,24 @@
   private Elements elementUtils;
   private Types typeUtils;
   private Filer filer;
+  private String resourcePackageName;
+  private Validator mValidator;
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
+    if (env.getOptions() == null && !env.getOptions().containsKey("resourcePackageName")
+            && env.getOptions().get("resourcePackageName") == null) {
+      throw new IllegalArgumentException("must passing with resource package name parameter.");
+    }
+    resourcePackageName = env.getOptions().get("resourcePackageName");
 
     elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
+    mValidator = new Validator(elementUtils, resourcePackageName);
+
+
+
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
@@ -131,6 +146,7 @@
   }
 
   @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+
     Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
 
     for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
@@ -368,7 +384,8 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
 
     // Assemble information on the field.
     int[] ids = element.getAnnotation(Bind.class).value();
-    if (ids.length != 1) {
+    String[] idNames = element.getAnnotation(Bind.class).resName();
+    if (ids.length > 1 || idNames.length > 1) {
       error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
           Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
           element.getSimpleName());
@@ -379,7 +396,8 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
       return;
     }
 
-    int id = ids[0];
+    int id = ids.length == 1 ? ids[0] : -1;
+    String resName = idNames.length == 1 ? idNames[0] : "";
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
@@ -401,8 +419,15 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
+    if (id == NO_ID && !"".equalsIgnoreCase(resName)) {
+      if (! mValidator.containsIdValue(resName)) {
+        error(element, "Resource name : %s not exist! ", resName);
+        throw new IllegalArgumentException(String.format("Resource name : %s not exist! ", resName));
+      }
+    }
+
     FieldViewBinding binding = new FieldViewBinding(name, type, required);
-    bindingClass.addField(id, binding);
+    bindingClass.addField(id, resName, binding);
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement.toString());
@@ -456,7 +481,8 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int[] ids = element.getAnnotation(Bind.class).value();
-    if (ids.length == 0) {
+    String[] resNames = element.getAnnotation(Bind.class).resName();
+    if (ids.length == 0 && resNames.length == 0) {
       error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
@@ -474,7 +500,18 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
-    bindingClass.addFieldCollection(ids, binding);
+    if (ids.length == 1 && ids[0] == -1 && !"".equalsIgnoreCase(resNames[0])) {
+      // using resNames
+      for (String resName : resNames){
+        if (! mValidator.containsIdValue(resName)) {
+          error(element, "Resource name : %s not exist! ", resName);
+          throw new IllegalArgumentException(String.format("Resource name : %s not exist! ", resName));
+        }
+      }
+      bindingClass.addFieldCollection(resNames, binding);
+    } else {
+      bindingClass.addFieldCollection(ids, binding);
+    }
 
     erasedTargetNames.add(enclosingElement.toString());
   }
@@ -865,12 +902,14 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     // Assemble information on the method.
     Annotation annotation = element.getAnnotation(annotationClass);
     Method annotationValue = annotationClass.getDeclaredMethod("value");
+    Method annotationResName = annotationClass.getDeclaredMethod("resName");
     if (annotationValue.getReturnType() != int[].class) {
       throw new IllegalStateException(
           String.format("@%s annotation value() type not int[].", annotationClass));
     }
 
     int[] ids = (int[]) annotationValue.invoke(annotation);
+    String[] resNames = (String[]) annotationResName.invoke(annotation);
     String name = executableElement.getSimpleName().toString();
     boolean required = isListenerRequired(executableElement);
 
@@ -894,7 +933,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     for (int id : ids) {
-      if (id == NO_ID) {
+      if (false && id == NO_ID) { // TODO enable check
         if (ids.length == 1) {
           if (!required) {
             error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",
@@ -1038,6 +1077,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     for (int id : ids) {
+      if (id == NO_ID) {
+        continue;
+      }
       if (!bindingClass.addMethod(id, listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
@@ -1045,6 +1087,21 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
+    for (String resName : resNames) {
+      if ("".equalsIgnoreCase(resName)) {
+        continue;
+      }
+      if (! mValidator.containsIdValue(resName)) {
+        error(element, "Resource name : %s not exist! ", resName);
+        throw new IllegalArgumentException(String.format("Resource name : %s not exist! ", resName));
+      }
+      if (!bindingClass.addMethod(resName, listener, method, binding)) {
+        error(element, "Multiple listener methods with return value specified for resName %d. (%s.%s)",
+                resName, enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    }
+
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement.toString());
   }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Validator.java b/butterknife-compiler/src/main/java/butterknife/compiler/Validator.java
new file mode 100644
index 00000000..a5bad24a
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Validator.java
@@ -0,0 +1,54 @@
+package butterknife.compiler;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.Elements;
+
+/**
+ * Created by guyacong on 15/10/14.
+ */
+final class Validator {
+
+    private final Elements mElements;
+
+    private final Map<Integer, String> idQualifiedNamesByIdValues = new HashMap<>();
+    private final Set<String> idQualifiedNames = new HashSet<>();
+
+    public Validator(Elements elementUtils, String resPkgName) {
+        mElements = elementUtils;
+        String rClassName = resPkgName + ".R";
+        String rIdClassName = rClassName + ".id";
+        TypeElement typeElement = mElements.getTypeElement(rIdClassName);
+
+        List<? extends Element> idEnclosedElements = typeElement.getEnclosedElements();
+
+        List<VariableElement> idFields = ElementFilter.fieldsIn(idEnclosedElements);
+
+        for (VariableElement idField : idFields) {
+
+            TypeKind fieldType = idField.asType().getKind();
+            if (fieldType.isPrimitive() && fieldType.equals(TypeKind.INT)) {
+                String idQualifiedName = idField.getSimpleName().toString();
+                idQualifiedNames.add(idQualifiedName);
+                Integer idFieldId = (Integer) idField.getConstantValue();
+                if (idFieldId != null) {
+                    idQualifiedNamesByIdValues.put(idFieldId, idQualifiedName);
+                }
+            }
+        }
+    }
+
+    public boolean containsIdValue(  String resName) {
+        return idQualifiedNames.contains(resName);
+    }
+
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
index 569d512b..08fbdc5e 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
@@ -1,7 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedHashMap;
@@ -10,14 +8,28 @@
 import java.util.Map;
 import java.util.Set;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 final class ViewBindings {
   private final int id;
+  private final String resName;
   private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
   private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
       methodBindings = new LinkedHashMap<>();
 
   ViewBindings(int id) {
     this.id = id;
+    this.resName = "";
+  }
+
+  ViewBindings(String resName) {
+    this.id = -1;
+    this.resName = resName;
+  }
+
+  public String getResName() {
+    return resName;
   }
 
   public int getId() {
diff --git a/butterknife-sample/build.gradle b/butterknife-sample/build.gradle
index 9e728385..75564d1a 100644
--- a/butterknife-sample/build.gradle
+++ b/butterknife-sample/build.gradle
@@ -20,11 +20,17 @@ android {
 
   buildTypes {
     debug {
-      minifyEnabled true
+      minifyEnabled false
     }
   }
 }
 
+apt {
+  arguments {
+    resourcePackageName android.defaultConfig.applicationId
+  }
+}
+
 dependencies {
   compile project(':butterknife')
   apt project(':butterknife-compiler')
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 5c7b3f0c..b55c8dac 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -10,7 +10,6 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import butterknife.Unbinder;
 import java.util.List;
 
 import butterknife.Bind;
@@ -18,8 +17,7 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
-
-import static android.widget.Toast.LENGTH_SHORT;
+import butterknife.Unbinder;
 
 public class SimpleActivity extends Activity {
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
@@ -32,33 +30,35 @@
     }
   };
 
-  @Bind(R.id.title) TextView title;
+  @Bind(resName="title") TextView title;
   @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.hello) Button hello;
-  @Bind(R.id.list_of_things) ListView listOfThings;
+  @Bind(R.id.hello)
+  Button hello;
+  @Bind(R.id.list_of_things)
+  ListView listOfThings;
   @Bind(R.id.footer) TextView footer;
-  @Unbinder ButterKnife.Unbinder unbinder;
+  @Unbinder
+  ButterKnife.Unbinder unbinder;
 
-  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind(resName = { "title", "subtitle", "hello" })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
 
 
-  @OnClick(R.id.hello) void sayHello() {
-    Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
+  @OnClick(resName = "hello") void sayHello() {
+    Toast.makeText(this, "Hello, views!", Toast.LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
-    Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
+  @OnLongClick(resName = {"hello", "title"}) boolean sayGetOffMe() {
+    Toast.makeText(this, "Let go of me!", Toast.LENGTH_SHORT).show();
     return true;
   }
 
-  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
-    Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
+  @OnItemClick(resName = "list_of_things") void onItemClick(int position) {
+    Toast.makeText(this, "You clicked: " + adapter.getItem(position), Toast.LENGTH_SHORT).show();
   }
-
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
@@ -66,6 +66,7 @@
 
     // Contrived code to use the bound fields.
     title.setText("Butter Knife");
+    ((TextView)headerViews.get(1)).setText("Butter Knife2");
     subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index 618065cd..12ee54cb 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -51,9 +51,9 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @Bind(R.id.word) TextView word;
-    @Bind(R.id.length) TextView length;
-    @Bind(R.id.position) TextView position;
+    @Bind(resName = "word") TextView word;
+    @Bind(resName = "length") TextView length;
+    @Bind(resName = "position") TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife/src/main/java/butterknife/internal/Finder.java b/butterknife/src/main/java/butterknife/internal/Finder.java
index effd6de4..72211398 100644
--- a/butterknife/src/main/java/butterknife/internal/Finder.java
+++ b/butterknife/src/main/java/butterknife/internal/Finder.java
@@ -12,7 +12,13 @@
       return ((View) source).findViewById(id);
     }
 
-    @Override public Context getContext(Object source) {
+      @Override
+      protected View findView(Object source, String resName) {
+          int viewId = ((View) source).getResources().getIdentifier(resName, "id", ((View) source).getContext().getPackageName());
+          return ((View) source).findViewById(viewId);
+      }
+
+      @Override public Context getContext(Object source) {
       return ((View) source).getContext();
     }
 
@@ -30,7 +36,14 @@
       return ((Activity) source).findViewById(id);
     }
 
-    @Override public Context getContext(Object source) {
+      @Override
+      protected View findView(Object source, String resName) {
+          int viewId = ((Activity) source).getResources().getIdentifier(resName, "id",
+                  ((Activity) source).getPackageName());
+          return ((Activity) source).findViewById(viewId);
+      }
+
+      @Override public Context getContext(Object source) {
       return (Activity) source;
     }
   },
@@ -39,7 +52,14 @@
       return ((Dialog) source).findViewById(id);
     }
 
-    @Override public Context getContext(Object source) {
+      @Override
+      protected View findView(Object source, String resName) {
+          int viewId = ((Dialog) source).getContext().getResources().getIdentifier(resName, "id",
+                  ((Dialog) source).getContext().getPackageName());
+          return ((Dialog) source).findViewById(viewId);
+      }
+
+      @Override public Context getContext(Object source) {
       return ((Dialog) source).getContext();
     }
   };
@@ -60,11 +80,32 @@
     return view;
   }
 
+    public <T> T findRequiredView(Object source, String resName, String who) {
+    T view = findOptionalView(source, resName, who);
+    if (view == null) {
+      String name = getResourceEntryName(source, resName);
+      throw new IllegalStateException("Required view '"
+          + name
+          + "' with resName "
+          + resName
+          + " for "
+          + who
+          + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+          + " (methods) annotation.");
+    }
+    return view;
+  }
+
   public <T> T findOptionalView(Object source, int id, String who) {
     View view = findView(source, id);
     return castView(view, id, who);
   }
 
+  public <T> T findOptionalView(Object source, String resName, String who) {
+    View view = findView(source, resName);
+    return castView(view, resName, who);
+  }
+
   @SuppressWarnings("unchecked") // That's the point.
   public <T> T castView(View view, int id, String who) {
     try {
@@ -84,6 +125,26 @@
     }
   }
 
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public <T> T castView(View view, String resName, String who) {
+    try {
+      return (T) view;
+    } catch (ClassCastException e) {
+      if (who == null) {
+        throw new AssertionError();
+      }
+      String name = getResourceEntryName(view, resName);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with resName "
+          + resName
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
   @SuppressWarnings("unchecked") // That's the point.
   public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
     try {
@@ -105,7 +166,13 @@ protected String getResourceEntryName(Object source, int id) {
     return getContext(source).getResources().getResourceEntryName(id);
   }
 
+  protected String getResourceEntryName(Object source, String resName) {
+    return resName;
+  }
+
   protected abstract View findView(Object source, int id);
 
+  protected abstract View findView(Object source, String resName);
+
   public abstract Context getContext(Object source);
 }
