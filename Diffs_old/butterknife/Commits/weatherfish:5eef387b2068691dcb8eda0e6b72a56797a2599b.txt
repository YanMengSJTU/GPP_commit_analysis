diff --git a/README.md b/README.md
index a83adde5..59a1f063 100644
--- a/README.md
+++ b/README.md
@@ -41,39 +41,13 @@ __Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
 Download
 --------
 
-Configure your project-level `build.gradle` to include the 'android-apt' plugin:
-
-```groovy
-buildscript {
-  repositories {
-    mavenCentral()
-   }
-  dependencies {
-    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
-  }
-}
-```
-
-Then, apply the 'android-apt' plugin in your module-level `build.gradle` and add the Butter Knife
-dependencies:
-
 ```groovy
-apply plugin: 'android-apt'
-
-android {
-  ...
-}
-
 dependencies {
   compile 'com.jakewharton:butterknife:8.4.0'
-  apt 'com.jakewharton:butterknife-compiler:8.4.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
 }
 ```
 
-Note: If you are using the new Jack compiler with version 2.2.0 or newer you do not need the
-'android-apt' plugin and can instead replace `apt` with `annotationProcessor` when declaring the
-compiler dependency.
-
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
 
 
diff --git a/build.gradle b/build.gradle
index 36e25575..2a4120d4 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,6 +3,7 @@ subprojects { project ->
   version = VERSION_NAME
 
   repositories {
+    mavenCentral()
     maven {
       url "https://plugins.gradle.org/m2/"
     }
@@ -30,6 +31,7 @@ subprojects { project ->
 
   buildscript {
     repositories {
+      mavenCentral()
       maven {
         url "https://plugins.gradle.org/m2/"
       }
@@ -50,7 +52,7 @@ ext {
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }
 
-def androidToolsVersion = '25.1.2'
+def androidToolsVersion = '25.2.0'
 def supportLibraryVersion = '24.2.1'
 def butterknifeLatestReleaseVersion = '8.4.0'
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 88682d36..f9b5226a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -49,21 +49,21 @@
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
   private final boolean isFinal;
-  private final List<ViewBindings> viewBindings;
-  private final List<FieldCollectionViewBinding> collectionBindings;
-  private final List<ResourceBinding> resourceBindings;
+  private final ImmutableList<ViewBinding> viewBindings;
+  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
+  private final ImmutableList<ResourceBinding> resourceBindings;
   private final BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
-      Collection<ViewBindings> viewBindings,
-      Collection<FieldCollectionViewBinding> collectionBindings,
-      Collection<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+      ImmutableList<ViewBinding> viewBindings,
+      ImmutableList<FieldCollectionViewBinding> collectionBindings,
+      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
-    this.viewBindings = ImmutableList.copyOf(viewBindings);
-    this.collectionBindings = ImmutableList.copyOf(collectionBindings);
-    this.resourceBindings = ImmutableList.copyOf(resourceBindings);
+    this.viewBindings = viewBindings;
+    this.collectionBindings = collectionBindings;
+    this.resourceBindings = resourceBindings;
     this.parentBinding = parentBinding;
   }
 
@@ -161,8 +161,8 @@ private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
         // Local variable in which all views will be temporarily stored.
         constructor.addStatement("$T view", VIEW);
       }
-      for (ViewBindings bindings : viewBindings) {
-        addViewBindings(constructor, bindings);
+      for (ViewBinding binding : viewBindings) {
+        addViewBinding(constructor, binding);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
         constructor.addStatement("$L", binding.render());
@@ -205,9 +205,9 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
           "Bindings already cleared.");
       result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");
       result.addCode("\n");
-      for (ViewBindings bindings : viewBindings) {
-        if (bindings.getFieldBinding() != null) {
-          result.addStatement("target.$L = null", bindings.getFieldBinding().getName());
+      for (ViewBinding binding : viewBindings) {
+        if (binding.getFieldBinding() != null) {
+          result.addStatement("target.$L = null", binding.getFieldBinding().getName());
         }
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
@@ -217,8 +217,8 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
 
     if (hasMethodBindings()) {
       result.addCode("\n");
-      for (ViewBindings bindings : viewBindings) {
-        addFieldAndUnbindStatement(bindingClass, result, bindings);
+      for (ViewBinding binding : viewBindings) {
+        addFieldAndUnbindStatement(bindingClass, result, binding);
       }
     }
 
@@ -230,7 +230,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
   }
 
   private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBindings bindings) {
+      ViewBinding bindings) {
     // Only add fields to the binding if there are method bindings.
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
@@ -284,23 +284,23 @@ private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemo
         : listenerClass.setter();
   }
 
-  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
-    if (bindings.isSingleFieldBinding()) {
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {
+    if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
-      FieldViewBinding fieldBinding = bindings.getFieldBinding();
+      FieldViewBinding fieldBinding = binding.getFieldBinding();
       CodeBlock.Builder builder = CodeBlock.builder()
           .add("target.$L = ", fieldBinding.getName());
 
       boolean requiresCast = requiresCast(fieldBinding.getType());
       if (!requiresCast && !fieldBinding.isRequired()) {
-        builder.add("source.findViewById($L)", bindings.getId().code);
+        builder.add("source.findViewById($L)", binding.getId().code);
       } else {
         builder.add("$T.find", UTILS);
         builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");
         if (requiresCast) {
           builder.add("AsType");
         }
-        builder.add("(source, $L", bindings.getId().code);
+        builder.add("(source, $L", binding.getId().code);
         if (fieldBinding.isRequired() || requiresCast) {
           builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));
         }
@@ -313,24 +313,24 @@ private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
       return;
     }
 
-    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
-    if (requiredViewBindings.isEmpty()) {
-      result.addStatement("view = source.findViewById($L)", bindings.getId().code);
-    } else if (!bindings.isBoundToRoot()) {
+    List<MemberViewBinding> requiredBindings = binding.getRequiredBindings();
+    if (requiredBindings.isEmpty()) {
+      result.addStatement("view = source.findViewById($L)", binding.getId().code);
+    } else if (!binding.isBoundToRoot()) {
       result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,
-          bindings.getId().code, asHumanDescription(requiredViewBindings));
+          binding.getId().code, asHumanDescription(requiredBindings));
     }
 
-    addFieldBindings(result, bindings);
-    addMethodBindings(result, bindings);
+    addFieldBinding(result, binding);
+    addMethodBindings(result, binding);
   }
 
-  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
-    FieldViewBinding fieldBinding = bindings.getFieldBinding();
+  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {
+    FieldViewBinding fieldBinding = binding.getFieldBinding();
     if (fieldBinding != null) {
       if (requiresCast(fieldBinding.getType())) {
         result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",
-            fieldBinding.getName(), UTILS, bindings.getId().code,
+            fieldBinding.getName(), UTILS, binding.getId().code,
             asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());
       } else {
         result.addStatement("target.$L = view", fieldBinding.getName());
@@ -338,15 +338,15 @@ private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings)
     }
   }
 
-  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
-        bindings.getMethodBindings();
+        binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
       return;
     }
 
     // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    boolean needsNullChecked = binding.getRequiredBindings().isEmpty();
     if (needsNullChecked) {
       result.beginControlFlow("if (view != null)");
     }
@@ -354,8 +354,8 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
     // Add the view reference to the binding.
     String fieldName = "viewSource";
     String bindName = "source";
-    if (!bindings.isBoundToRoot()) {
-      fieldName = "view" + bindings.getId().value;
+    if (!binding.isBoundToRoot()) {
+      fieldName = "view" + binding.getId().value;
       bindName = "view";
     }
     result.addStatement("$L = $N", fieldName, bindName);
@@ -385,9 +385,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
         }
 
         if (methodBindings.containsKey(method)) {
-          for (MethodViewBinding binding : methodBindings.get(method)) {
-            builder.add("target.$L(", binding.getName());
-            List<Parameter> parameters = binding.getParameters();
+          for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+            builder.add("target.$L(", methodBinding.getName());
+            List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
             for (int i = 0, count = parameters.size(); i < count; i++) {
               if (i > 0) {
@@ -399,7 +399,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
 
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
                 builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
+                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);
               } else {
                 builder.add("p$L", listenerPosition);
               }
@@ -459,8 +459,8 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings)
     }
   }
 
-  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
-    Iterator<? extends ViewBinding> iterator = bindings.iterator();
+  static String asHumanDescription(Collection<? extends MemberViewBinding> bindings) {
+    Iterator<? extends MemberViewBinding> iterator = bindings.iterator();
     switch (bindings.size()) {
       case 1:
         return iterator.next().getDescription();
@@ -534,7 +534,7 @@ private boolean hasResourceBindingsNeedingResource(int sdk) {
   }
 
   private boolean hasMethodBindings() {
-    for (ViewBindings bindings : viewBindings) {
+    for (ViewBinding bindings : viewBindings) {
       if (!bindings.getMethodBindings().isEmpty()) {
         return true;
       }
@@ -543,7 +543,7 @@ private boolean hasMethodBindings() {
   }
 
   private boolean hasFieldBindings() {
-    for (ViewBindings bindings : viewBindings) {
+    for (ViewBinding bindings : viewBindings) {
       if (bindings.getFieldBinding() != null) {
         return true;
       }
@@ -556,7 +556,7 @@ private boolean hasTargetField() {
   }
 
   private boolean hasViewLocal() {
-    for (ViewBindings bindings : viewBindings) {
+    for (ViewBinding bindings : viewBindings) {
       if (bindings.requiresLocal()) {
         return true;
       }
@@ -600,9 +600,10 @@ static Builder newBuilder(TypeElement enclosingElement) {
 
     private BindingSet parentBinding;
 
-    private final Map<Id, ViewBindings> viewIdMap = new LinkedHashMap<>();
-    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();
-    private final List<ResourceBinding> resourceBindings = new ArrayList<>();
+    private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();
+    private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =
+        ImmutableList.builder();
+    private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
 
     private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
       this.targetTypeName = targetTypeName;
@@ -623,11 +624,11 @@ boolean addMethod(
         ListenerClass listener,
         ListenerMethod method,
         MethodViewBinding binding) {
-      ViewBindings viewBindings = getOrCreateViewBindings(id);
-      if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+      ViewBinding.Builder viewBinding = getOrCreateViewBindings(id);
+      if (viewBinding.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
         return false;
       }
-      viewBindings.addMethodBinding(listener, method, binding);
+      viewBinding.addMethodBinding(listener, method, binding);
       return true;
     }
 
@@ -639,22 +640,34 @@ void setParent(BindingSet parent) {
       this.parentBinding = parent;
     }
 
-    ViewBindings getViewBinding(Id id) {
-      return viewIdMap.get(id);
+    String findExistingBindingName(Id id) {
+      ViewBinding.Builder builder = viewIdMap.get(id);
+      if (builder == null) {
+        return null;
+      }
+      FieldViewBinding fieldBinding = builder.fieldBinding;
+      if (fieldBinding == null) {
+        return null;
+      }
+      return fieldBinding.getName();
     }
 
-    private ViewBindings getOrCreateViewBindings(Id id) {
-      ViewBindings viewId = viewIdMap.get(id);
+    private ViewBinding.Builder getOrCreateViewBindings(Id id) {
+      ViewBinding.Builder viewId = viewIdMap.get(id);
       if (viewId == null) {
-        viewId = new ViewBindings(id);
+        viewId = new ViewBinding.Builder(id);
         viewIdMap.put(id, viewId);
       }
       return viewId;
     }
 
     BindingSet build() {
-      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewIdMap.values(),
-          collectionBindings, resourceBindings, parentBinding);
+      ImmutableList.Builder<ViewBinding> viewBindings = ImmutableList.builder();
+      for (ViewBinding.Builder builder : viewIdMap.values()) {
+        viewBindings.add(builder.build());
+      }
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewBindings.build(),
+          collectionBindings.build(), resourceBindings.build(), parentBinding);
     }
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 83934cdb..d8b7f46a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -440,11 +440,10 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
 
     BindingSet.Builder builder = builderMap.get(enclosingElement);
     if (builder != null) {
-      ViewBindings viewBindings = builder.getViewBinding(getId(id));
-      if (viewBindings != null && viewBindings.getFieldBinding() != null) {
-        FieldViewBinding existingBinding = viewBindings.getFieldBinding();
+      String existingBindingName = builder.findExistingBindingName(getId(id));
+      if (existingBindingName != null) {
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
-            BindView.class.getSimpleName(), id, existingBinding.getName(),
+            BindView.class.getSimpleName(), id, existingBindingName,
             enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
@@ -1037,7 +1036,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           if (methodParameterUsed.get(j)) {
             continue;
           }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+          if ((isSubtypeOfType(methodParameterType, parameterTypes[j])
+                  && isSubtypeOfType(methodParameterType, VIEW_TYPE))
+              || isTypeEqual(methodParameterType, parameterTypes[j])
               || isInterface(methodParameterType)) {
             parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
             methodParameterUsed.set(j);
@@ -1103,7 +1104,7 @@ private boolean isInterface(TypeMirror typeMirror) {
   }
 
   private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
-    if (otherType.equals(typeMirror.toString())) {
+    if (isTypeEqual(typeMirror, otherType)) {
       return true;
     }
     if (typeMirror.getKind() != TypeKind.DECLARED) {
@@ -1142,6 +1143,10 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
+  private boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
+    return otherType.equals(typeMirror.toString());
+  }
+
   private BindingSet.Builder getOrCreateBindingBuilder(
       Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {
     BindingSet.Builder builder = builderMap.get(enclosingElement);
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
index 8adeb1f1..0abd6974 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
@@ -4,7 +4,7 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 
-final class FieldViewBinding implements ViewBinding {
+final class FieldViewBinding implements MemberViewBinding {
   private final String name;
   private final TypeName type;
   private final boolean required;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java
new file mode 100644
index 00000000..6e82d46e
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java
@@ -0,0 +1,7 @@
+package butterknife.compiler;
+
+/** A field or method view binding. */
+interface MemberViewBinding {
+  /** A description of the binding in human readable form (e.g., "field 'foo'"). */
+  String getDescription();
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index 33beb621..e4d1c4b7 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -4,7 +4,7 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodViewBinding implements ViewBinding {
+final class MethodViewBinding implements MemberViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 6159caae..2761c70b 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -1,7 +1,115 @@
 package butterknife.compiler;
 
-/** A field or method view binding. */
-interface ViewBinding {
-  /** A description of the binding in human readable form (e.g., "field 'foo'"). */
-  String getDescription();
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+final class ViewBinding {
+  private final Id id;
+  private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings;
+  private final FieldViewBinding fieldBinding;
+
+  ViewBinding(Id id, Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings,
+      FieldViewBinding fieldBinding) {
+    this.id = id;
+    this.methodBindings = methodBindings;
+    this.fieldBinding = fieldBinding;
+  }
+
+  public Id getId() {
+    return id;
+  }
+
+  public FieldViewBinding getFieldBinding() {
+    return fieldBinding;
+  }
+
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
+    return methodBindings;
+  }
+
+  public List<MemberViewBinding> getRequiredBindings() {
+    List<MemberViewBinding> requiredBindings = new ArrayList<>();
+    if (fieldBinding != null && fieldBinding.isRequired()) {
+      requiredBindings.add(fieldBinding);
+    }
+    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodViewBinding> set : methodBinding.values()) {
+        for (MethodViewBinding binding : set) {
+          if (binding.isRequired()) {
+            requiredBindings.add(binding);
+          }
+        }
+      }
+    }
+    return requiredBindings;
+  }
+
+  public boolean isSingleFieldBinding() {
+    return methodBindings.isEmpty() && fieldBinding != null;
+  }
+
+  public boolean requiresLocal() {
+    if (isBoundToRoot()) {
+      return false;
+    }
+    if (isSingleFieldBinding()) {
+      return false;
+    }
+    return true;
+  }
+
+  public boolean isBoundToRoot() {
+    return ButterKnifeProcessor.NO_ID.equals(id);
+  }
+
+  public static final class Builder {
+    private final Id id;
+
+    private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
+        new LinkedHashMap<>();
+    FieldViewBinding fieldBinding;
+
+    public Builder(Id id) {
+      this.id = id;
+    }
+
+    public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
+      Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+      return methods != null && methods.containsKey(method);
+    }
+
+    public void addMethodBinding(ListenerClass listener, ListenerMethod method,
+        MethodViewBinding binding) {
+      Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+      Set<MethodViewBinding> set = null;
+      if (methods == null) {
+        methods = new LinkedHashMap<>();
+        methodBindings.put(listener, methods);
+      } else {
+        set = methods.get(method);
+      }
+      if (set == null) {
+        set = new LinkedHashSet<>();
+        methods.put(method, set);
+      }
+      set.add(binding);
+    }
+
+    public void setFieldBinding(FieldViewBinding fieldBinding) {
+      if (this.fieldBinding != null) {
+        throw new AssertionError();
+      }
+      this.fieldBinding = fieldBinding;
+    }
+
+    public ViewBinding build() {
+      return new ViewBinding(id, methodBindings, fieldBinding);
+    }
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
deleted file mode 100644
index 36372420..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package butterknife.compiler;
-
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class ViewBindings {
-  private final Id id;
-  private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
-      new LinkedHashMap<>();
-  private FieldViewBinding fieldBinding;
-
-  ViewBindings(Id id) {
-    this.id = id;
-  }
-
-  public Id getId() {
-    return id;
-  }
-
-  public FieldViewBinding getFieldBinding() {
-    return fieldBinding;
-  }
-
-  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
-    return methodBindings;
-  }
-
-  public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
-    return methods != null && methods.containsKey(method);
-  }
-
-  public void addMethodBinding(ListenerClass listener, ListenerMethod method,
-      MethodViewBinding binding) {
-    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
-    Set<MethodViewBinding> set = null;
-    if (methods == null) {
-      methods = new LinkedHashMap<>();
-      methodBindings.put(listener, methods);
-    } else {
-      set = methods.get(method);
-    }
-    if (set == null) {
-      set = new LinkedHashSet<>();
-      methods.put(method, set);
-    }
-    set.add(binding);
-  }
-
-  public void setFieldBinding(FieldViewBinding fieldBinding) {
-    if (this.fieldBinding != null) {
-      throw new AssertionError();
-    }
-    this.fieldBinding = fieldBinding;
-  }
-
-  public List<ViewBinding> getRequiredBindings() {
-    List<ViewBinding> requiredViewBindings = new ArrayList<>();
-    if (fieldBinding != null && fieldBinding.isRequired()) {
-      requiredViewBindings.add(fieldBinding);
-    }
-    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
-      for (Set<MethodViewBinding> set : methodBinding.values()) {
-        for (MethodViewBinding binding : set) {
-          if (binding.isRequired()) {
-            requiredViewBindings.add(binding);
-          }
-        }
-      }
-    }
-    return requiredViewBindings;
-  }
-
-  public boolean isSingleFieldBinding() {
-    return methodBindings.isEmpty() && fieldBinding != null;
-  }
-
-  public boolean requiresLocal() {
-    if (isBoundToRoot()) {
-      return false;
-    }
-    if (isSingleFieldBinding()) {
-      return false;
-    }
-    return true;
-  }
-
-  public boolean isBoundToRoot() {
-    return ButterKnifeProcessor.NO_ID.equals(id);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
index d5143217..26f8d78c 100644
--- a/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
@@ -9,9 +9,9 @@
 
 public class BindingSetTest {
   @Test public void humanDescriptionJoinWorks() {
-    ViewBinding one = new TestViewBinding("one");
-    ViewBinding two = new TestViewBinding("two");
-    ViewBinding three = new TestViewBinding("three");
+    MemberViewBinding one = new TestViewBinding("one");
+    MemberViewBinding two = new TestViewBinding("two");
+    MemberViewBinding three = new TestViewBinding("three");
 
     String result1 = asHumanDescription(singletonList(one));
     assertThat(result1).isEqualTo("one");
@@ -23,7 +23,7 @@
     assertThat(result3).isEqualTo("one, two, and three");
   }
 
-  private static class TestViewBinding implements ViewBinding {
+  private static class TestViewBinding implements MemberViewBinding {
     private final String description;
 
     private TestViewBinding(String description) {
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
index 50c16595..e495c6bf 100644
--- a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -1,31 +1,30 @@
 package butterknife.lint;
 
-import com.android.annotations.NonNull;
 import com.android.tools.lint.detector.api.Category;
-import com.android.tools.lint.detector.api.Context;
 import com.android.tools.lint.detector.api.Detector;
 import com.android.tools.lint.detector.api.Implementation;
 import com.android.tools.lint.detector.api.Issue;
 import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintUtils;
 import com.android.tools.lint.detector.api.Scope;
 import com.android.tools.lint.detector.api.Severity;
 import com.google.common.collect.ImmutableSet;
-import java.io.File;
+import com.intellij.psi.JavaElementVisitor;
+import com.intellij.psi.JavaRecursiveElementVisitor;
+import com.intellij.psi.PsiAnnotation;
+import com.intellij.psi.PsiClass;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiExpression;
+import com.intellij.psi.PsiReferenceExpression;
+
+import java.util.Collections;
+import java.util.List;
 import java.util.Set;
-import lombok.ast.Annotation;
-import lombok.ast.AstVisitor;
-import lombok.ast.ClassDeclaration;
-import lombok.ast.ForwardingAstVisitor;
-import lombok.ast.Identifier;
-import lombok.ast.Node;
-import lombok.ast.Select;
-import lombok.ast.VariableReference;
 
 /**
  * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
  */
-public class InvalidR2UsageDetector extends Detector implements Detector.JavaScanner {
-
+public class InvalidR2UsageDetector extends Detector implements Detector.JavaPsiScanner {
   private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
   private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
   private static final String ISSUE_ID = "InvalidR2Usage";
@@ -39,46 +38,64 @@
 
   private static final String R2 = "R2";
 
-  @Override public boolean appliesTo(@NonNull Context context, @NonNull File file) {
-    // skip generated files
-    String name = file.getName();
-    return !name.contains("_ViewBinder") && !name.contains("_ViewBinding");
+  @Override public List<Class<? extends PsiElement>> getApplicablePsiTypes() {
+    return Collections.<Class<? extends PsiElement>>singletonList(PsiClass.class);
   }
 
-  @Override public AstVisitor createJavaVisitor(@NonNull JavaContext javaContext) {
-    final JavaContext context = javaContext;
-    return new ForwardingAstVisitor() {
-
-      @Override public boolean visitClassDeclaration(ClassDeclaration node) {
-        // skip R2
-        return R2.equals(node.astName().astValue());
+  @Override public JavaElementVisitor createPsiVisitor(final JavaContext context) {
+    return new JavaElementVisitor() {
+      @Override public void visitClass(PsiClass node) {
+        node.accept(new R2UsageVisitor(context));
       }
+    };
+  }
 
-      @Override public boolean visitAnnotation(Annotation node) {
-        // skip annotations
-        return true;
-      }
+  private static class R2UsageVisitor extends JavaRecursiveElementVisitor {
+    private final JavaContext context;
 
-      @Override public boolean visitSelect(Select node) {
-        return detectR2(context, node, node.astIdentifier());
-      }
+    R2UsageVisitor(JavaContext context) {
+      this.context = context;
+    }
 
-      @Override public boolean visitVariableReference(VariableReference node) {
-        return detectR2(context, node, node.astIdentifier());
-      }
-    };
-  }
+    @Override public void visitAnnotation(PsiAnnotation annotation) {
+      // skip annotations
+    }
 
-  private static boolean detectR2(JavaContext context, Node node, Identifier identifier) {
-    boolean isR2 = node.getParent() != null
-        && (identifier.toString().equals(R2) || identifier.toString().contains(".R2."))
-        && node.getParent() instanceof Select
-        && SUPPORTED_TYPES.contains(((Select) node.getParent()).astIdentifier().toString());
+    @Override public void visitReferenceExpression(PsiReferenceExpression expression) {
+      detectR2(context, expression);
+      super.visitReferenceExpression(expression);
+    }
 
-    if (isR2 && !context.isSuppressedWithComment(node, ISSUE)) {
-      context.report(ISSUE, node, context.getLocation(identifier), LINT_ERROR_BODY);
+    private static void detectR2(JavaContext context, PsiElement node) {
+      PsiClass[] classes = context.getJavaFile().getClasses();
+      if (classes.length > 0 && classes[0].getName() != null) {
+        String qualifiedName = classes[0].getName();
+        if (qualifiedName.contains("_ViewBinder") || qualifiedName.contains("_ViewBinding")
+            || qualifiedName.equals(R2)) {
+          // skip generated files and R2
+          return;
+        }
+      }
+      boolean isR2 = isR2Expression(node);
+      if (isR2 && !context.isSuppressedWithComment(node, ISSUE)) {
+        context.report(ISSUE, node, context.getLocation(node), LINT_ERROR_BODY);
+      }
     }
 
-    return isR2;
+    private static boolean isR2Expression(PsiElement node) {
+      if (node.getParent() == null) {
+        return false;
+      }
+      String text = node.getText();
+      PsiElement parent = LintUtils.skipParentheses(node.getParent());
+      return (text.equals(R2) || text.contains(".R2"))
+          && parent instanceof PsiExpression
+          && endsWithAny(parent.getText(), SUPPORTED_TYPES);
+    }
+
+    private static boolean endsWithAny(String text, Set<String> possibleValues) {
+      String[] tokens = text.split("\\.");
+      return tokens.length > 1 && possibleValues.contains(tokens[tokens.length - 1]);
+    }
   }
 }
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
index df4d55b8..946eada9 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -6,7 +6,6 @@
 import java.util.List;
 
 public class InvalidR2UsageDetectorTest extends LintDetectorTestBase {
-
   private static final String PATH_TEST_RESOURCES = "/src/test/java/sample/r2/";
   private static final String NO_WARNINGS = "No warnings.";
   private static final String R2 = "R2.java";
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
index ac027c6e..b9a18138 100644
--- a/butterknife/src/test/java/butterknife/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
@@ -75,4 +75,155 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void textChangedWithParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import android.app.Activity;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test extends Activity {\n"
+            + "  @OnTextChanged(1) void doStuff(CharSequence p0) {}\n"
+            + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+            + "package test;\n"
+            + "import android.support.annotation.CallSuper;\n"
+            + "import android.support.annotation.UiThread;\n"
+            + "import android.text.Editable;\n"
+            + "import android.text.TextWatcher;\n"
+            + "import android.view.View;\n"
+            + "import android.widget.TextView;\n"
+            + "import butterknife.Unbinder;\n"
+            + "import butterknife.internal.Utils;\n"
+            + "import java.lang.CharSequence;\n"
+            + "import java.lang.IllegalStateException;\n"
+            + "import java.lang.Override;\n"
+            + "public class Test_ViewBinding implements Unbinder {\n"
+            + "  private Test target;\n"
+            + "  private View view1;\n"
+            + "  private TextWatcher view1TextWatcher;\n"
+            + "  @UiThread\n"
+            + "  public Test_ViewBinding(final Test target, View source) {\n"
+            + "    this.target = target;\n"
+            + "    View view;\n"
+            + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+            + "    view1 = view;\n"
+            + "    view1TextWatcher = new TextWatcher() {\n"
+            + "      @Override\n"
+            + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "        target.doStuff(p0);\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void afterTextChanged(Editable p0) {\n"
+            + "      }\n"
+            + "    };\n"
+            + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+            + "  }\n"
+            + "  @Override\n"
+            + "  @CallSuper\n"
+            + "  public void unbind() {\n"
+            + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+            + "    target = null;\n"
+            + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+            + "    view1TextWatcher = null;\n"
+            + "    view1 = null;\n"
+            + "  }\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .compilesWithoutWarnings()
+            .and()
+            .generatesSources(bindingSource);
+  }
+
+  @Test public void textChangedWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import android.app.Activity;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test extends Activity {\n"
+            + "  @OnTextChanged(1) void doStuff(CharSequence p0, int p1, int p2, int p3) {}\n"
+            + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+            + "package test;\n"
+            + "import android.support.annotation.CallSuper;\n"
+            + "import android.support.annotation.UiThread;\n"
+            + "import android.text.Editable;\n"
+            + "import android.text.TextWatcher;\n"
+            + "import android.view.View;\n"
+            + "import android.widget.TextView;\n"
+            + "import butterknife.Unbinder;\n"
+            + "import butterknife.internal.Utils;\n"
+            + "import java.lang.CharSequence;\n"
+            + "import java.lang.IllegalStateException;\n"
+            + "import java.lang.Override;\n"
+            + "public class Test_ViewBinding implements Unbinder {\n"
+            + "  private Test target;\n"
+            + "  private View view1;\n"
+            + "  private TextWatcher view1TextWatcher;\n"
+            + "  @UiThread\n"
+            + "  public Test_ViewBinding(final Test target, View source) {\n"
+            + "    this.target = target;\n"
+            + "    View view;\n"
+            + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+            + "    view1 = view;\n"
+            + "    view1TextWatcher = new TextWatcher() {\n"
+            + "      @Override\n"
+            + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "        target.doStuff(p0, p1, p2, p3);\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void afterTextChanged(Editable p0) {\n"
+            + "      }\n"
+            + "    };\n"
+            + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+            + "  }\n"
+            + "  @Override\n"
+            + "  @CallSuper\n"
+            + "  public void unbind() {\n"
+            + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+            + "    target = null;\n"
+            + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+            + "    view1TextWatcher = null;\n"
+            + "    view1 = null;\n"
+            + "  }\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .compilesWithoutWarnings()
+            .and()
+            .generatesSources(bindingSource);
+  }
+
+  @Test public void textChangedWithWrongParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import android.app.Activity;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test extends Activity {\n"
+            + "  @OnTextChanged(1) void doStuff(String p0, int p1, int p2, int p3) {}\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .failsToCompile();
+  }
+
 }
diff --git a/website/index.html b/website/index.html
index f420d078..fab8be1c 100644
--- a/website/index.html
+++ b/website/index.html
@@ -213,7 +213,7 @@ <h4 id="bonus">Bonus</h4>
             <h3 id="download">Download</h3>
             <h4>Gradle</h4>
             <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
-apt 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
+annotationProcessor 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
 
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
