diff --git a/.travis.yml b/.travis.yml
index eccde94d..ba73a426 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,14 +2,24 @@ language: android
 
 android:
   components:
-    - build-tools-23.0.1
+    - tools
+    - platform-tools
+    - build-tools-23.0.3
     - android-23
     - extra-android-m2repository
+    - sys-img-armeabi-v7a-android-18
 
 jdk:
-  - oraclejdk7
   - oraclejdk8
 
+
+before_script:
+  # Create and start an emulator for instrumentation tests.
+  - echo no | android create avd --force -n test -t android-18 --abi armeabi-v7a
+  - emulator -avd test -no-audio -no-window &
+  - android-wait-for-emulator
+  - adb shell input keyevent 82
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2fd857cc..457faf86 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,26 @@
 Change Log
 ==========
 
+Version 8.0.0 *(2016-04-25)*
+----------------------------
+
+ *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively).
+ *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces
+    the `unbind` API and adds support for being able to clear listeners.
+ *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields.
+ *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields.
+ *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute.
+ *  The runtime and compiler are now split into two artifacts.
+
+    ```groovy
+    compile 'com.jakewharton:butterknife:8.0.0'
+    apt 'com.jakewharton:butterknife-compiler:8.0.0'
+    ```
+ *  New: `apply` overloads which accept a single view and arrays of views.
+ *  ProGuard rules now ship inside of the library and are included automatically.
+ *  `@Optional` annotation is back to mark methods as being optional.
+
+
 Version 7.0.1 *(2015-06-30)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 714ba68d..8acf4fed 100644
--- a/README.md
+++ b/README.md
@@ -6,7 +6,7 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Eliminate `findViewById` calls by using `@BindView` on fields.
  * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
@@ -14,11 +14,10 @@ code for you.
 
 ```java
 class ExampleActivity extends Activity {
-  @Bind(R.id.user) EditText username;
-  @Bind(R.id.pass) EditText password;
+  @BindView(R.id.user) EditText username;
+  @BindView(R.id.pass) EditText password;
 
-  @BindString(R.string.login_error)
-  String loginErrorMessage;
+  @BindString(R.string.login_error) String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -42,53 +41,21 @@ __Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
 Download
 --------
 
-Download [the latest JAR][2] or grab via Maven:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>7.0.1</version>
-</dependency>
-```
-or Gradle:
-```groovy
-compile 'com.jakewharton:butterknife:7.0.1'
-```
-
-For the SNAPSHOT version:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>8.0.0-SNAPSHOT</version>
-</dependency>
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife-compiler</artifactId>
-  <version>8.0.0-SNAPSHOT</version>
-  <optional>true</optional>
-</dependency>
-```
-or Gradle:
 ```groovy
 buildscript {
+  repositories {
+    mavenCentral()
+   }
   dependencies {
     classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
   }
 }
 
-allprojects {
-  repositories {
-    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
-  }
-}
-```
-```groovy
 apply plugin: 'com.neenbedankt.android-apt'
 
 dependencies {
-  compile 'com.jakewharton:butterknife:8.0.0-SNAPSHOT'
-  apt 'com.jakewharton:butterknife-compiler:8.0.0-SNAPSHOT'
+  compile 'com.jakewharton:butterknife:8.0.0'
+  apt 'com.jakewharton:butterknife-compiler:8.0.0'
 }
 ```
 
diff --git a/RELEASING.md b/RELEASING.md
new file mode 100644
index 00000000..591e3a88
--- /dev/null
+++ b/RELEASING.md
@@ -0,0 +1,15 @@
+Releasing
+========
+
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT verson.
+ 2. Update the `CHANGELOG.md` for the impending release.
+ 3. Update the `README.md` with the new version.
+ 4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version)
+ 5. `./gradlew clean uploadArchives`.
+ 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+ 7. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version)
+ 8. Update the `gradle.properties` to the next SNAPSHOT version.
+ 9. `git commit -am "Prepare next development version."`
+ 10. `git push && git push --tags`
+
+If step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.
diff --git a/build.gradle b/build.gradle
index 7f9ba134..3458a8f3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -29,7 +29,7 @@ subprojects { project ->
       mavenCentral()
     }
     dependencies {
-      classpath 'com.android.tools.build:gradle:1.3.1'
+      classpath 'com.android.tools.build:gradle:2.0.0'
       classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
     }
   }
@@ -39,7 +39,7 @@ ext {
   minSdkVersion = 8
   targetSdkVersion = 23
   compileSdkVersion = 23
-  buildToolsVersion = '23.0.1'
+  buildToolsVersion = '23.0.3'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }
@@ -47,20 +47,21 @@ ext {
 ext.deps = [
     // Android
     android: 'com.google.android:android:2.1.2',
-    supportv4: 'com.android.support:support-v4:23.0.1',
-    supportAnnotations: 'com.android.support:support-annotations:23.0.1',
+    supportv4: 'com.android.support:support-v4:23.3.0',
+    supportAnnotations: 'com.android.support:support-annotations:23.3.0',
+    supportDesign: 'com.android.support:design:23.3.0',
 
     // Square
-    javapoet: 'com.squareup:javapoet:1.4.0',
+    javapoet: 'com.squareup:javapoet:1.6.1',
 
     // Other
-    rxjava: 'io.reactivex:rxjava:1.1.2',
+    rxjava: 'io.reactivex:rxjava:1.1.3',
 
     // Test dependencies
     junit: 'junit:junit:4.12',
-    truth: 'com.google.truth:truth:0.27',
+    truth: 'com.google.truth:truth:0.28',
     robolectric: 'org.robolectric:robolectric:2.2',
-    compiletesting: 'com.google.testing.compile:compile-testing:0.7',
+    compiletesting: 'com.google.testing.compile:compile-testing:0.9',
     autoservice: 'com.google.auto.service:auto-service:1.0-rc2',
-    autocommon: 'com.google.auto:auto-common:0.4'
+    autocommon: 'com.google.auto:auto-common:0.6'
 ]
diff --git a/butterknife-annotations/src/main/java/butterknife/Bind.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
similarity index 82%
rename from butterknife-annotations/src/main/java/butterknife/Bind.java
rename to butterknife-annotations/src/main/java/butterknife/BindView.java
index 82454a7a..4770bf69 100644
--- a/butterknife-annotations/src/main/java/butterknife/Bind.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -11,11 +11,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}Bind(R.id.title) TextView title;
+ * {@literal @}BindView(R.id.title) TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface Bind {
+public @interface BindView {
   /** View ID to which the field will be bound. */
-  @IdRes int[] value();
+  @IdRes int value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
new file mode 100644
index 00000000..07a0499c
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -0,0 +1,22 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the view for the specified ID. The view will automatically be cast to the field
+ * type.
+ * <pre><code>
+ * {@literal @}BindViews({ R.id.title, R.id.subtitle })
+ * List&lt;TextView&gt; titles;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindViews {
+  /** View IDs to which the field will be bound. */
+  @IdRes int[] value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTabSelected.java b/butterknife-annotations/src/main/java/butterknife/OnTabSelected.java
new file mode 100644
index 00000000..10ddfeea
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/OnTabSelected.java
@@ -0,0 +1,59 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+import android.text.TextWatcher;
+import android.view.View;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+
+/**
+ * TODO
+ */
+@Target(METHOD)
+@Retention(CLASS)
+@ListenerClass(
+        targetType = "android.support.design.widget.TabLayout",
+        setter = "setOnTabSelectedListener",
+        type = "android.support.design.widget.TabLayout.OnTabSelectedListener",
+        callbacks = OnTabSelected.Callback.class
+)
+public @interface OnTabSelected {
+    /** View IDs to which the method will be bound. */
+    @IdRes int[] value() default { View.NO_ID };
+
+    /** Listener callback to which the method will be bound. */
+    Callback callback() default Callback.TAB_SELECTED;
+
+    /** {@link TextWatcher} callback methods. */
+    enum Callback {
+        /** {@link TextWatcher#onTextChanged(CharSequence, int, int, int)} */
+        @ListenerMethod(
+                name = "onTabSelected",
+                parameters = {
+                        "android.support.design.widget.TabLayout.Tab"
+                }
+        )
+        TAB_SELECTED,
+        @ListenerMethod(
+                name = "onTabReselected",
+                parameters = {
+                        "android.support.design.widget.TabLayout.Tab"
+                }
+        )
+        TAB_RESELECTED,
+        @ListenerMethod(
+                name = "onTabUnselected",
+                parameters = {
+                        "android.support.design.widget.TabLayout.Tab"
+                }
+        )
+        TAB_UNSELECTED,
+    }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
index 46ab6bbb..585d004f 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
@@ -1,5 +1,7 @@
 package butterknife.compiler;
 
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -10,7 +12,6 @@
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
 import com.squareup.javapoet.WildcardTypeName;
-
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -21,9 +22,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
+import javax.lang.model.element.Modifier;
 
 import static butterknife.compiler.ButterKnifeProcessor.NO_ID;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
@@ -56,15 +55,18 @@
   private final Set<BindingClass> descendantBindingClasses = new LinkedHashSet<>();
   private final String classPackage;
   private final String className;
+  private final boolean isFinal;
   private final String targetClass;
   private final String classFqcn;
   private BindingClass parentBinding;
   private ClassName unbinderClassName;  // If this is null'd out, it has no unbinder and uses NOP.
   private ClassName highestUnbinderClassName; // If this is null'd out, there is no parent unbinder.
 
-  BindingClass(String classPackage, String className, String targetClass, String classFqcn) {
+  BindingClass(String classPackage, String className, boolean isFinal, String targetClass,
+      String classFqcn) {
     this.classPackage = classPackage;
     this.className = className;
+    this.isFinal = isFinal;
     this.targetClass = targetClass;
     this.classFqcn = classFqcn;
 
@@ -131,6 +133,9 @@ JavaFile brewJava() {
     TypeSpec.Builder result = TypeSpec.classBuilder(className)
         .addModifiers(PUBLIC)
         .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+    if (isFinal) {
+      result.addModifiers(Modifier.FINAL);
+    }
 
     if (hasParentBinding()) {
       result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentBinding.classFqcn),
@@ -144,8 +149,11 @@ JavaFile brewJava() {
     if (hasUnbinder() && hasViewBindings()) {
       // Create unbinding class.
       result.addType(createUnbinderClass());
-      // Now we need to provide child classes to access and override unbinder implementations.
-      createUnbinderCreateUnbinderMethod(result);
+
+      if (!isFinal) {
+        // Now we need to provide child classes to access and override unbinder implementations.
+        createUnbinderCreateUnbinderMethod(result);
+      }
     }
 
     return JavaFile.builder(classPackage, result.build())
@@ -159,6 +167,9 @@ private TypeSpec createUnbinderClass() {
         TypeSpec.classBuilder(unbinderClassName.simpleName())
             .addModifiers(PROTECTED, STATIC)
             .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+    if (isFinal) {
+      result.addModifiers(Modifier.FINAL);
+    }
 
     if (hasParentBinding() && parentBinding.hasUnbinder()) {
       result.superclass(ParameterizedTypeName.get(
@@ -170,9 +181,11 @@ private TypeSpec createUnbinderClass() {
 
     result.addMethod(createUnbinderConstructor(generic));
     if (!hasParentBinding() || !parentBinding.hasUnbinder()) {
-      result.addMethod(createUnbindInterfaceMethod());
+      result.addMethod(createUnbindInterfaceMethod(result));
+    }
+    if (!isFinal) {
+      result.addMethod(createUnbindMethod(result, generic));
     }
-    result.addMethod(createUnbindMethod(result, generic));
 
     return result.build();
   }
@@ -189,13 +202,18 @@ private MethodSpec createUnbinderConstructor(TypeName targetType) {
     return constructor.build();
   }
 
-  private MethodSpec createUnbindInterfaceMethod() {
-    return MethodSpec.methodBuilder("unbind")
+  private MethodSpec createUnbindInterfaceMethod(TypeSpec.Builder unbinderClass) {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC, FINAL)
         .addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
-            "Bindings already cleared.")
-        .addStatement("unbind(target)")
+            "Bindings already cleared.");
+    if (isFinal) {
+      populateUnbindImplementation(unbinderClass, result);
+    } else {
+      result.addStatement("unbind(target)");
+    }
+    return result
         .addStatement("target = null")
         .build();
   }
@@ -204,9 +222,16 @@ private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName t
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addModifiers(PROTECTED)
         .addParameter(targetType, "target");
-
     if (hasParentBinding() && parentBinding.hasUnbinder()) {
       result.addAnnotation(Override.class);
+    }
+    populateUnbindImplementation(unbinderClass, result);
+    return result.build();
+  }
+
+  private void populateUnbindImplementation(TypeSpec.Builder unbinderClass,
+      MethodSpec.Builder result) {
+    if (hasParentBinding() && parentBinding.hasUnbinder()) {
       result.addStatement("super.unbind(target)");
     }
 
@@ -220,8 +245,6 @@ private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName t
     for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
       result.addStatement("target.$L = null", fieldCollectionBinding.getName());
     }
-
-    return result.build();
   }
 
   private void addFieldAndUnbindStatement(
@@ -316,7 +339,11 @@ private MethodSpec createBindMethod() {
     } else if (hasViewBindings()) {
       // This is a top-level class but we do have an unbinder class, so no need to call super but
       // go ahead and create our unbinder.
-      result.addStatement("$T unbinder = createUnbinder(target)", unbinderClassName);
+      if (isFinal) {
+        result.addStatement("$1T unbinder = new $1T(target)", unbinderClassName);
+      } else {
+        result.addStatement("$T unbinder = createUnbinder(target)", unbinderClassName);
+      }
     }
 
     if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 0508342a..352c034d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,9 +1,33 @@
 package butterknife.compiler;
 
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTabSelected;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.TypeName;
-
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -18,7 +42,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -39,29 +62,6 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-import butterknife.Bind;
-import butterknife.BindArray;
-import butterknife.BindBitmap;
-import butterknife.BindBool;
-import butterknife.BindColor;
-import butterknife.BindDimen;
-import butterknife.BindDrawable;
-import butterknife.BindInt;
-import butterknife.BindString;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import rx.Observable;
 import rx.functions.Func1;
 import rx.schedulers.Schedulers;
@@ -96,6 +96,7 @@
       OnItemSelected.class, //
       OnLongClick.class, //
       OnPageChange.class, //
+      OnTabSelected.class, //
       OnTextChanged.class, //
       OnTouch.class //
   );
@@ -115,12 +116,6 @@
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> types = new LinkedHashSet<>();
 
-    types.add(Bind.class.getCanonicalName());
-
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      types.add(listener.getCanonicalName());
-    }
-
     types.add(BindArray.class.getCanonicalName());
     types.add(BindBitmap.class.getCanonicalName());
     types.add(BindBool.class.getCanonicalName());
@@ -129,6 +124,12 @@
     types.add(BindDrawable.class.getCanonicalName());
     types.add(BindInt.class.getCanonicalName());
     types.add(BindString.class.getCanonicalName());
+    types.add(BindView.class.getCanonicalName());
+    types.add(BindViews.class.getCanonicalName());
+
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      types.add(listener.getCanonicalName());
+    }
 
     return types;
   }
@@ -155,21 +156,6 @@
     Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
     Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
 
-    // Process each @Bind element.
-    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
-      if (!SuperficialValidation.validateElement(element)) continue;
-      try {
-        parseBind(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, Bind.class, e);
-      }
-    }
-
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
-    }
-
     // Process each @BindArray element.
     for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -250,6 +236,31 @@
       }
     }
 
+    // Process each @BindView element.
+    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseBindView(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindView.class, e);
+      }
+    }
+
+    // Process each @BindViews element.
+    for (Element element : env.getElementsAnnotatedWith(BindViews.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseBindViews(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindViews.class, e);
+      }
+    }
+
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    }
+
     // Try to find a parent binder for each.
     Set<BindingClass> topLevelClasses = new LinkedHashSet<>();
     for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
@@ -385,33 +396,14 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<TypeElement> erasedTargetNames) {
-    // Verify common generated code restrictions.
-    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
-        || isBindingInWrongPackage(Bind.class, element)) {
-      return;
-    }
-
-    TypeMirror elementType = element.asType();
-    if (elementType.getKind() == TypeKind.ARRAY) {
-      parseBindMany(element, targetClassMap, erasedTargetNames);
-    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
-      parseBindMany(element, targetClassMap, erasedTargetNames);
-    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
-      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
-          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
-          element.getSimpleName());
-    } else {
-      parseBindOne(element, targetClassMap, erasedTargetNames);
-    }
-  }
-
-  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<TypeElement> erasedTargetNames) {
-    boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindView.class, "fields", element)
+        || isBindingInWrongPackage(BindView.class, element);
+
     // Verify that the target type extends from View.
     TypeMirror elementType = element.asType();
     if (elementType.getKind() == TypeKind.TYPEVAR) {
@@ -420,15 +412,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     }
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
       error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
-          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Assemble information on the field.
-    int[] ids = element.getAnnotation(Bind.class).value();
-    if (ids.length != 1) {
-      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
-          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
+          BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
@@ -437,7 +421,9 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
       return;
     }
 
-    int id = ids[0];
+    // Assemble information on the field.
+    int id = element.getAnnotation(BindView.class).value();
+
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
@@ -446,7 +432,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
         if (iterator.hasNext()) {
           FieldViewBinding existingBinding = iterator.next();
           error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
-              Bind.class.getSimpleName(), id, existingBinding.getName(),
+              BindView.class.getSimpleName(), id, existingBinding.getName(),
               enclosingElement.getQualifiedName(), element.getSimpleName());
           return;
         }
@@ -466,16 +452,19 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<TypeElement> erasedTargetNames) {
-    boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindViews.class, "fields", element)
+        || isBindingInWrongPackage(BindViews.class, element);
+
     // Verify that the type is a List or an array.
     TypeMirror elementType = element.asType();
     String erasedType = doubleErasure(elementType);
     TypeMirror viewType = null;
-    FieldCollectionViewBinding.Kind kind;
+    FieldCollectionViewBinding.Kind kind = null;
     if (elementType.getKind() == TypeKind.ARRAY) {
       ArrayType arrayType = (ArrayType) elementType;
       viewType = arrayType.getComponentType();
@@ -485,7 +474,7 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
       if (typeArguments.size() != 1) {
         error(element, "@%s List must have a generic component. (%s.%s)",
-            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
             element.getSimpleName());
         hasError = true;
       } else {
@@ -493,7 +482,9 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
       }
       kind = FieldCollectionViewBinding.Kind.LIST;
     } else {
-      throw new AssertionError();
+      error(element, "@%s must be a List or array. (%s.%s)", BindViews.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
     }
     if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) viewType;
@@ -503,27 +494,30 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
       error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
-          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
+          BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
       hasError = true;
     }
 
-    if (hasError) {
-      return;
-    }
-
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(Bind.class).value();
+    int[] ids = element.getAnnotation(BindViews.class).value();
     if (ids.length == 0) {
-      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
+      error(element, "@%s must specify at least one ID. (%s.%s)", BindViews.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
-      return;
+      hasError = true;
     }
 
     Integer duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
-          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)",
+          BindViews.class.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
     }
 
     assert viewType != null; // Always false as hasError would have been true.
@@ -1118,10 +1112,11 @@ private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targe
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
+      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
       String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
       String classFqcn = getFqcn(enclosingElement) + BINDING_CLASS_SUFFIX;
 
-      bindingClass = new BindingClass(classPackage, className, targetType, classFqcn);
+      bindingClass = new BindingClass(classPackage, className, isFinal, targetType, classFqcn);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;
diff --git a/butterknife-compiler/src/test/java/butterknife/BindTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
similarity index 54%
rename from butterknife-compiler/src/test/java/butterknife/BindTest.java
rename to butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index 45f1b8d8..87416179 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -12,16 +12,16 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class BindTest {
+public class BindViewTest {
   @Test public void bindingView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
         Joiner.on('\n').join(
             "package test;",
             "import android.app.Activity;",
             "import android.view.View;",
-            "import butterknife.Bind;",
+            "import butterknife.BindView;",
             "public class Test extends Activity {",
-            "    @Bind(1) View thing;",
+            "    @BindView(1) View thing;",
             "}"
         ));
 
@@ -69,22 +69,55 @@
         .and()
         .generatesSources(expectedSource);
   }
-  @Test public void bindingViewTooManyIdsFail() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2}) View thing;",
-        "}"
-    ));
+  @Test public void bindingViewFinalClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.app.Activity;",
+            "import android.view.View;",
+            "import butterknife.BindView;",
+            "public final class Test extends Activity {",
+            "    @BindView(1) View thing;",
+            "}"
+        ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
+        + "    View view;\n"
+        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "    target.thing = view;\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected static final class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      target.thing = null;\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
-        .in(source).onLine(6);
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
   }
 
   @Test public void bindingInterface() throws Exception {
@@ -92,10 +125,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
         "    interface TestInterface {}",
-        "    @Bind(1) TestInterface thing;",
+        "    @BindView(1) TestInterface thing;",
         "}"
     ));
 
@@ -150,9 +183,9 @@
         "import android.app.Activity;",
         "import android.widget.EditText;",
         "import android.widget.TextView;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "class Test<T extends TextView> extends Activity {",
-        "    @Bind(1) T thing;",
+        "    @BindView(1) T thing;",
         "}"
     ));
 
@@ -206,10 +239,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @Bind(1) View thing1;",
+        "  @BindView(1) View thing1;",
         "  @OnClick(1) void doStuff() {}",
         "}"
     ));
@@ -274,11 +307,11 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "  @Bind(1) public View thing1;",
-        "  @Bind(2) View thing2;",
-        "  @Bind(3) protected View thing3;",
+        "  @BindView(1) public View thing1;",
+        "  @BindView(2) View thing2;",
+        "  @BindView(3) protected View thing3;",
         "}"
     ));
 
@@ -292,10 +325,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
-        "  @Nullable @Bind(1) View view;",
+        "  @Nullable @BindView(1) View view;",
         "}"
     ));
 
@@ -349,12 +382,12 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "  @Bind(1) View view;",
+        "  @BindView(1) View view;",
         "}",
         "class TestOne extends Test {",
-        "  @Bind(1) View thing;",
+        "  @BindView(1) View thing;",
         "}",
         "class TestTwo extends Test {",
         "}"
@@ -443,12 +476,12 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test<T> extends Activity {",
-        "  @Bind(1) View view;",
+        "  @BindView(1) View view;",
         "}",
         "class TestOne extends Test<String> {",
-        "  @Bind(1) View thing;",
+        "  @BindView(1) View thing;",
         "}",
         "class TestTwo extends Test<Object> {",
         "}"
@@ -535,9 +568,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test {",
-        "  @Bind(1) View thing;",
+        "  @BindView(1) View thing;",
         "}"
     ));
 
@@ -545,7 +578,7 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
+            "@BindView-annotated class incorrectly in Java framework package. (java.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -553,9 +586,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package android.test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test {",
-        "  @Bind(1) View thing;",
+        "  @BindView(1) View thing;",
         "}"
     ));
 
@@ -563,7 +596,7 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
+            "@BindView-annotated class incorrectly in Android framework package. (android.test.Test)")
         .in(source).onLine(5);
   }
 
@@ -571,10 +604,10 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test {",
         "  private static class Inner {",
-        "    @Bind(1) View thing;",
+        "    @BindView(1) View thing;",
         "  }",
         "}"
     ));
@@ -583,7 +616,7 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
+            "@BindView fields may not be contained in private classes. (test.Test.Inner.thing)")
         .in(source).onLine(5);
   }
 
@@ -591,16 +624,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "  @Bind(1) String thing;",
+        "  @BindView(1) String thing;",
         "}"
     ));
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
+        .withErrorContaining("@BindView fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -608,9 +641,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public interface Test {",
-        "    @Bind(1) View thing = null;",
+        "    @BindView(1) View thing = null;",
         "}"
     ));
 
@@ -618,7 +651,7 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "@Bind fields may only be contained in classes. (test.Test.thing)")
+            "@BindView fields may only be contained in classes. (test.Test.thing)")
         .in(source).onLine(4);
   }
 
@@ -627,16 +660,16 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "    @Bind(1) private View thing;",
+        "    @BindView(1) private View thing;",
         "}"
     ));
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -645,16 +678,16 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "    @Bind(1) static View thing;",
+        "    @BindView(1) static View thing;",
         "}"
     ));
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -663,10 +696,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "public class Test extends Activity {",
-        "    @Bind(1) View thing1;",
-        "    @Bind(1) View thing2;",
+        "    @BindView(1) View thing1;",
+        "    @BindView(1) View thing2;",
         "}"
     ));
 
@@ -674,7 +707,7 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+            "Attempt to use @BindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
         .in(source).onLine(7);
   }
 
@@ -727,529 +760,4 @@
         .in(source)
         .onLine(7);
   }
-
-  @Test public void bindingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test<T extends View> extends Activity {",
-        "    @Bind({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.listOf(\n"
-        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.listOf(\n"
-        + "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @Bind({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.listOf(\n"
-        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullableList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @interface Nullable {}",
-        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
-        + "    View view;\n"
-        + "    target.thing = Utils.listOf(\n"
-        + "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.<View>findOptionalView(source, 3, \"field 'thing'\"));\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public final void unbind() {\n"
-        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}");
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @Bind({}) List<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @Bind(1) List thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @Bind(1) Deque<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @Bind(1) List<String> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @Bind(1) String[] thing;",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
 }
diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
new file mode 100644
index 00000000..4c5424d4
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
@@ -0,0 +1,556 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindViewsTest {
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @BindViews(1) public List<View> thing1;",
+        "  @BindViews(2) List<View> thing2;",
+        "  @BindViews(3) protected List<View> thing3;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "public class Test extends Activity {",
+        "    @BindViews({1, 2, 3}) View[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "public class Test<T extends View> extends Activity {",
+        "    @BindViews({1, 2, 3}) T[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.TextView;",
+        "import butterknife.BindViews;",
+        "public class Test extends Activity {",
+        "    @BindViews({1, 2, 3}) TextView[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @BindViews({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @BindViews({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test<T extends View> extends Activity {",
+        "    @BindViews({1, 2, 3}) List<T> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @interface Nullable {}",
+        "    @Nullable @BindViews({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "    InnerUnbinder unbinder = createUnbinder(target);\n"
+        + "    View view;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"), \n"
+        + "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"), \n"
+        + "        finder.<View>findOptionalView(source, 3, \"field 'thing'\"));\n"
+        + "    return unbinder;\n"
+        + "  }\n"
+        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n"
+        + "    return new InnerUnbinder(target);\n"
+        + "  }\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    private T target;\n"
+        + "    protected InnerUnbinder(T target) {\n"
+        + "      this.target = target;\n"
+        + "    }\n"
+        + "    @Override\n"
+        + "    public final void unbind() {\n"
+        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "      unbind(target);\n"
+        + "      target = null;\n"
+        + "    }\n"
+        + "    protected void unbind(T target) {\n"
+        + "      target.thing = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}");
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @BindViews({}) List<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @BindViews(1) List thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.Deque;",
+        "public class Test {",
+        "  @BindViews(1) Deque<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @BindViews(1) List<String> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindViews;",
+        "public class Test extends Activity {",
+        "  @BindViews(1) String[] thing;",
+        "}"));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.BindViews;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @BindViews({1, 1}) List<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
index fd5c2db9..a48e4860 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
@@ -157,10 +157,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @Bind(1) View view;",
+        "  @BindView(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
@@ -509,11 +509,11 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.Bind;",
+        "import butterknife.BindView;",
         "import butterknife.OnClick;",
         "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @Bind(1) View view;",
+        "  @BindView(1) View view;",
         "  @Optional @OnClick(1) void doStuff() {}",
         "}"));
 
diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index e32a98c6..16a4a262 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -90,14 +90,14 @@
                 "package test;",
                 "import android.support.v4.app.Fragment;",
                 "import android.view.View;",
-                "import butterknife.Bind;",
+                "import butterknife.BindView;",
                 "import butterknife.ButterKnife;",
                 "import butterknife.OnClick;",
                 "import butterknife.OnLongClick;",
                 "import butterknife.Unbinder;",
                 "public class Test extends Fragment {",
-                "  @Bind(1) View view;",
-                "  @Bind(2) View view2;",
+                "  @BindView(1) View view;",
+                "  @BindView(2) View view2;",
                 "  @OnClick(1) void doStuff() {",
                 "  }",
                 "  @OnLongClick(1) boolean doMoreStuff() { return false; }",
@@ -727,12 +727,12 @@
         + "package test;\n"
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Bind;\n"
+        + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "import butterknife.ButterKnife;\n"
         + "public class C extends B {\n"
         + "  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;\n"
-        + "  @Bind(android.R.id.button1) View button1;\n"
+        + "  @BindView(android.R.id.button1) View button1;\n"
         + "  public C(View view) {\n"
         + "    super(view);\n"
         + "    ButterKnife.bind(this, view);\n"
@@ -785,13 +785,13 @@
         + "package test;\n"
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Bind;\n"
+        + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "import butterknife.ButterKnife;\n"
         + "import butterknife.OnClick;\n"
         + "public class G extends E {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
-        + "  @Bind(android.R.id.button2) View button2;\n"
+        + "  @BindView(android.R.id.button2) View button2;\n"
         + "  public G(View view) {\n"
         + "    super(view);\n"
         + "    ButterKnife.bind(this, view);\n"
@@ -804,12 +804,12 @@
         + "package test;\n"
         + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Bind;\n"
+        + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
         + "import butterknife.ButterKnife;\n"
         + "public class H extends G {\n"
         + "  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;\n"
-        + "  @Bind(android.R.id.button3) View button3;\n"
+        + "  @BindView(android.R.id.button3) View button3;\n"
         + "  public H(View view) {\n"
         + "    super(view);\n"
         + "    ButterKnife.bind(this, view);\n"
diff --git a/butterknife-sample/build.gradle b/butterknife-sample/build.gradle
index 9e728385..ff2f4846 100644
--- a/butterknife-sample/build.gradle
+++ b/butterknife-sample/build.gradle
@@ -18,6 +18,11 @@ android {
     versionName '1.0.0'
   }
 
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
+
   buildTypes {
     debug {
       minifyEnabled true
@@ -33,3 +38,14 @@ dependencies {
   testCompile deps.truth
   testCompile deps.robolectric
 }
+
+afterEvaluate {
+  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
+    task.doFirst {
+      logging.level = LogLevel.INFO
+    }
+    task.doLast {
+      logging.level = LogLevel.LIFECYCLE
+    }
+  }
+}
diff --git a/butterknife-sample/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
new file mode 100644
index 00000000..5deb2a5e
--- /dev/null
+++ b/butterknife-sample/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
@@ -0,0 +1,14 @@
+package com.example.butterknife;
+
+import android.test.ActivityInstrumentationTestCase2;
+
+public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {
+  public SimpleActivityTest() {
+    super(SimpleActivity.class);
+  }
+
+  public void testActivityStarts() {
+    getActivity(); // Trigger activity creation.
+    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup.
+  }
+}
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index e00cb240..f206e6ce 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -9,14 +9,13 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
-
-import java.util.List;
-
-import butterknife.Bind;
+import butterknife.BindView;
+import butterknife.BindViews;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
@@ -31,18 +30,16 @@
     }
   };
 
-  @Bind(R.id.title) TextView title;
-  @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.hello) Button hello;
-  @Bind(R.id.list_of_things) ListView listOfThings;
-  @Bind(R.id.footer) TextView footer;
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.hello) Button hello;
+  @BindView(R.id.list_of_things) ListView listOfThings;
+  @BindView(R.id.footer) TextView footer;
 
-  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
-  List<View> headerViews;
+  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
 
   private SimpleAdapter adapter;
 
-
   @OnClick(R.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index 618065cd..be7d18ec 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -6,8 +6,8 @@
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+import butterknife.BindView;
 import butterknife.ButterKnife;
-import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,9 +51,9 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @Bind(R.id.word) TextView word;
-    @Bind(R.id.length) TextView length;
-    @Bind(R.id.position) TextView position;
+    @BindView(R.id.word) TextView word;
+    @BindView(R.id.length) TextView length;
+    @BindView(R.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/C.java b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/C.java
index fac648ee..3772e400 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/C.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/C.java
@@ -3,14 +3,14 @@
 import android.support.annotation.ColorInt;
 import android.view.View;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
 public class C extends B {
 
   @BindColor(android.R.color.transparent) @ColorInt int transparentColor;
-  @Bind(android.R.id.button1) View button1;
+  @BindView(android.R.id.button1) View button1;
 
   public C(View view) {
     super(view);
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/G.java b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/G.java
index 21f896c5..419ef4b5 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/G.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/G.java
@@ -3,7 +3,7 @@
 import android.support.annotation.ColorInt;
 import android.view.View;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
@@ -11,7 +11,7 @@
 public class G extends E {
 
   @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
-  @Bind(android.R.id.button2) View button2;
+  @BindView(android.R.id.button2) View button2;
 
   public G(View view) {
     super(view);
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/H.java
index 6ed35ad1..e9cd4136 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/unbinder/H.java
@@ -3,14 +3,14 @@
 import android.support.annotation.ColorInt;
 import android.view.View;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
 public class H extends G {
 
   @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
-  @Bind(android.R.id.button3) View button3;
+  @BindView(android.R.id.button3) View button3;
 
   public H(View view) {
     super(view);
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index ac3837bc..8e0ec390 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -9,12 +9,18 @@ android {
 
     consumerProguardFiles 'proguard-rules.txt'
   }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
 }
 
 dependencies {
   compile project(':butterknife-annotations')
   compile deps.supportAnnotations
   provided deps.supportv4
+  provided deps.supportDesign
 
   testCompile deps.junit
   testCompile deps.truth
diff --git a/butterknife/proguard-rules.txt b/butterknife/proguard-rules.txt
index bf214acc..be8806ca 100644
--- a/butterknife/proguard-rules.txt
+++ b/butterknife/proguard-rules.txt
@@ -3,4 +3,4 @@
 
 # Prevent obfuscation of types which use ButterKnife annotations since the simple name
 # is used to reflectively look up the generated ViewBinder.
--keepclasseswithmembernames class * { @butterknife.* *; }
+-keepnames class * { @butterknife.* *; }
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 6577e469..2889cdc5 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -25,8 +25,8 @@
  * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}Bind(R.id.title) EditText titleView;
- *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}BindView(R.id.title) EditText titleView;
+ *   {@literal @}BindView(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
@@ -43,7 +43,7 @@
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -71,7 +71,7 @@
  * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
  * or the {@code @Optional} annotation for methods.
  * <pre><code>
- * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @BindView(R.id.title) TextView subtitleView;
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
@@ -113,7 +113,7 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Activity}. The current content
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
    * @param target Target activity for view binding.
@@ -123,7 +123,7 @@ public static Unbinder bind(@NonNull Activity target) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link View}. The view and its children
+   * BindView annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
    * @param target Target view for view binding.
@@ -134,7 +134,7 @@ public static Unbinder bind(@NonNull View target) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
+   * BindView annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
    * @param target Target dialog for view binding.
@@ -145,7 +145,7 @@ public static Unbinder bind(@NonNull Dialog target) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
    * @param target Target class for view binding.
@@ -156,7 +156,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
    * @param target Target class for view binding.
@@ -168,7 +168,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull View source) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index bfa469fb..bb2a5807 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -4,7 +4,7 @@
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.Bind @Bind} on fields.</li>
+ * {@link butterknife.BindView @BindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} or array.
  * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
diff --git a/gradle.properties b/gradle.properties
index 7167b693..ed8b4a70 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.0.0-SNAPSHOT
+VERSION_NAME=8.0.1-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ce09d606..802fd1d4 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-all.zip
diff --git a/website/index.html b/website/index.html
index d4f915a8..eab48a10 100644
--- a/website/index.html
+++ b/website/index.html
@@ -26,9 +26,9 @@ <h2>Field and method binding for Android views</h2>
             <h3 id="introduction">Introduction</h3>
             <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @Bind(R.id.title) TextView title;
-  @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.footer) TextView footer;
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -58,8 +58,8 @@ <h4 id="resource">Resource Binding</h4>
             <h4 id="non-activity">Non-Activity Binding</h4>
             <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @Bind(R.id.button1) Button button1;
-  @Bind(R.id.button2) Button button2;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -87,8 +87,8 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 
   static class ViewHolder {
-    @Bind(R.id.title) TextView name;
-    @Bind(R.id.job_title) TextView jobTitle;
+    @BindView(R.id.title) TextView name;
+    @BindView(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
       ButterKnife.bind(this, view);
@@ -107,7 +107,7 @@ <h4 id="non-activity">Non-Activity Binding</h4>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
@@ -161,15 +161,15 @@ <h4 id="listener-binding">Listener Binding</h4>
 </pre>
 
             <h4 id="reset">Binding Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife provides an <code>ButterKnife.ViewUnbinder</code> interface which has an <code>unbind</code> method to do this automatically. Simply bind a view unbinder with <code>@Unbinder</code> to the fragment.</p>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife returns an <code>Unbinder</code> instance when you call <code>bind</code> to do this for you. Call its <code>unbind</code> method in the appropriate lifecycle callback.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @Bind(R.id.button1) Button button1;
-  @Bind(R.id.button2) Button button2;
-  @Unbinder ViewUnbinder unbinder;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
+  private Unbinder unbinder;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.bind(this, view);
+    unbinder = ButterKnife.bind(this, view);
     // TODO Use fields...
     return view;
   }
@@ -184,7 +184,7 @@ <h4 id="optional">Optional Bindings</h4>
             <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
             <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to fields or the <code>@Optional</code> annotation to methods.</p>
             <p>Note: Any annotation named <code>@Nullable</code> can be used for fields. It is encouraged to use the <code>@Nullable</code> annotation from <a href="http://tools.android.com/tech-docs/support-annotations">Android's "support-annotations" library</a>.</p>
-            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
+            <pre class="prettyprint">@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
@@ -211,36 +211,9 @@ <h4 id="bonus">Bonus</h4>
             <p>Add a static import for <code>ButterKnife.findById</code> and enjoy even more fun.</p>
 
             <h3 id="download">Download</h3>
-            <p class="downloads">
-              <a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton&a=butterknife&v=LATEST" class="btn btn-large btn-inverse" id="download-btn">Butter Knife JAR <span class="runner-version"></span></a>
-            </p>
-            <p>The source code to the library and sample application as well as this website is <a href="http://github.com/JakeWharton/butterknife">available on GitHub</a>. The Javadoc is also <a href="javadoc/index.html">available to browse</a>.</p>
-
-            <h4>Maven</h4>
-            <p>If you are using Maven for compilation you can declare the library as a dependency.</p>
-            <pre class="prettyprint">&lt;dependency>
-  &lt;groupId>com.jakewharton&lt;/groupId>
-  &lt;artifactId>butterknife&lt;/artifactId>
-  &lt;version><span class="version"><em>(insert latest version)</em></span>&lt;/version>
-&lt;/dependency></pre>
-
             <h4>Gradle</h4>
-            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
-            <pre class="prettyprint">lintOptions {
-  disable 'InvalidPackage'
-}</pre>
-            <p>Some configurations may also require additional exclusions.</p>
-            <pre class="prettyprint">packagingOptions {
-  exclude 'META-INF/services/javax.annotation.processing.Processor'
-}</pre>
-
-            <h4 id="ide">IDE Configuration</h4>
-            <p>Some IDEs require additional configuration in order to enable annotation processing.</p>
-            <ul>
-              <li><em>IntelliJ IDEA</em> &mdash; If your project uses an external configuration (like a Maven <code>pom.xml</code>) then annotation processing should just work. If not, try <a href="ide-idea.html">manual configuration</a>.</li>
-              <li><em>Eclipse</em> &mdash; Set up <a href="ide-eclipse.html">manual configuration</a>.</li>
-            </ul>
+            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
+apt 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
 
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
@@ -269,7 +242,6 @@ <h3 id="license">License</h3>
       prettyPrint();
       $.fn.artifactVersion('com.jakewharton', 'butterknife', function(version, url) {
         $('.version').text(version);
-        $('#download-btn').text('Butter Knife v' + version + ' JAR').attr('href', url);
       });
     </script>
   </body>
