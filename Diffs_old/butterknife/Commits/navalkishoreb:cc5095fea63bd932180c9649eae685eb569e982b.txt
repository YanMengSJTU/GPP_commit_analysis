diff --git a/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
index 932593e6..b9c563f2 100644
--- a/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
+++ b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
@@ -11,6 +11,7 @@ import org.gradle.api.tasks.SourceSet
 class ButterForkPlugin implements Plugin<Project> {
 
     private Project project
+    private String packageName
 
     void apply(Project project) {
 
@@ -46,9 +47,18 @@ class ButterForkPlugin implements Plugin<Project> {
     private addTaskForVariant(final Object variant) {
 
         String taskName = 'generate' + getSubstringForTaskName(variant.name) + 'B'
+        String rFilePath = 'build/generated/source/r/' + variant.dirName + '/' +
+                getPackageName().replace('.', '/') + '/R.java'
 
-        GenerateBTask task = project.getTasks().create(taskName, GenerateBTask.class);
-        variant.javaCompile.dependsOn(taskName)
+        String bDirectoryPath = 'build/generated/source/b/' + variant.dirName
+
+        GenerateBTask task = project.tasks.create(taskName, GenerateBTask)
+        task.rFilePath = rFilePath
+        task.bDirectoryPath = bDirectoryPath
+        task.packageName = getPackageName()
+
+        variant.javaCompile.dependsOn(task)
+        variant.registerJavaGeneratingTask(task, project.file(bDirectoryPath))
     }
 
     /**
@@ -60,4 +70,19 @@ class ButterForkPlugin implements Plugin<Project> {
                 '' : variantName.capitalize()
     }
 
+    /**
+     * Helper method that parses the manifest file and returns package name
+     *
+     * @return package name defined in manifest file
+     */
+    private String getPackageName() {
+
+        if (packageName == null) {
+            File manifestFile = project.file(project.android.sourceSets.main.manifest.srcFile.toString())
+            packageName = (new XmlParser()).parse(manifestFile).@package
+        }
+
+        return packageName
+    }
+
 }
diff --git a/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/GenerateBTask.groovy b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/GenerateBTask.groovy
new file mode 100644
index 00000000..06efeda5
--- /dev/null
+++ b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/GenerateBTask.groovy
@@ -0,0 +1,25 @@
+package com.oguzbabaoglu
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.GradleException
+import org.gradle.api.tasks.TaskAction
+
+class GenerateBTask extends DefaultTask {
+
+    String rFilePath
+    String bDirectoryPath
+    String packageName
+
+    @TaskAction
+    void generate() {
+
+        File rFile = project.file(rFilePath)
+        File bFile = project.file(bDirectoryPath)
+
+        try {
+            BindingClassBuilder.brewJava(rFile, bFile, packageName)
+        } catch (Exception e) {
+            throw new GradleException("Error creating B file.", e)
+        }
+    }
+}
diff --git a/butterfork-plugin/src/main/java/com/oguzbabaoglu/BindingClassBuilder.java b/butterfork-plugin/src/main/java/com/oguzbabaoglu/BindingClassBuilder.java
new file mode 100644
index 00000000..7e09a3c7
--- /dev/null
+++ b/butterfork-plugin/src/main/java/com/oguzbabaoglu/BindingClassBuilder.java
@@ -0,0 +1,89 @@
+package com.oguzbabaoglu;
+
+import com.github.javaparser.JavaParser;
+import com.github.javaparser.ParseException;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.body.BodyDeclaration;
+import com.github.javaparser.ast.body.FieldDeclaration;
+import com.github.javaparser.ast.body.TypeDeclaration;
+import com.github.javaparser.ast.body.VariableDeclarator;
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
+
+/**
+ * Generates a B class that contains all supported field names in target R file as final values.
+ */
+final class BindingClassBuilder {
+
+  private static final String className = "B";
+  private static final String[] SUPPORTED_TYPES = {
+      "array", "drawable", "bool", "color", "dimen", "integer", "string", "id"
+  };
+
+  private BindingClassBuilder() {
+  }
+
+  static void brewJava(File resourceFile, File outputFile, String packageName)
+      throws ParseException, IOException {
+
+    CompilationUnit cu = JavaParser.parse(resourceFile);
+
+    TypeDeclaration resourceClass = cu.getTypes().get(0);
+
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC)
+        .addModifiers(FINAL);
+
+    List<String> supportedTypes = Arrays.asList(SUPPORTED_TYPES);
+
+    for (Node node : resourceClass.getChildrenNodes()) {
+      addResourceType(supportedTypes, result, (TypeDeclaration) node);
+    }
+
+    JavaFile bFile = JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Fork. Do not modify!")
+        .build();
+
+    bFile.writeTo(outputFile);
+  }
+
+  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
+      TypeDeclaration node) {
+
+    if (!supportedTypes.contains(node.getName())) {
+      return;
+    }
+
+    String type = node.getName();
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type)
+        .addModifiers(PUBLIC, STATIC, FINAL);
+
+    for (BodyDeclaration field : node.getMembers()) {
+      addResourceField(resourceType, ((FieldDeclaration) field).getVariables().get(0));
+    }
+
+    result.addType(resourceType.build());
+  }
+
+  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable) {
+
+    String fieldName = variable.getId().getName();
+    FieldSpec fieldSpec = FieldSpec.builder(String.class, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer("$S", fieldName)
+        .build();
+
+    resourceType.addField(fieldSpec);
+  }
+}
diff --git a/butterfork-plugin/src/main/java/com/oguzbabaoglu/GenerateBTask.java b/butterfork-plugin/src/main/java/com/oguzbabaoglu/GenerateBTask.java
deleted file mode 100644
index a47e7288..00000000
--- a/butterfork-plugin/src/main/java/com/oguzbabaoglu/GenerateBTask.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.oguzbabaoglu;
-
-import org.gradle.api.DefaultTask;
-import org.gradle.api.tasks.TaskAction;
-
-public class GenerateBTask extends DefaultTask {
-
-  @TaskAction
-  public void greet() {
-
-    System.out.println("Hello from Generate Task");
-  }
-
-}
