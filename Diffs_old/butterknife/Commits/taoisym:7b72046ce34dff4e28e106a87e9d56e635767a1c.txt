diff --git a/build.gradle b/build.gradle
index 42dd66f8..b3e942fd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -53,7 +53,7 @@ ext {
 }
 
 def androidToolsVersion = '25.2.0'
-def supportLibraryVersion = '25.1.0'
+def supportLibraryVersion = '25.0.1'
 def butterknifeLatestReleaseVersion = '8.4.0'
 
 ext.deps = [
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 3c99b9f9..f618e8dd 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -255,7 +255,7 @@ private MethodSpec createBindingConstructor(int sdk) {
     }
     if (hasTargetField()) {
       constructor.addStatement("this.target = target");
-      constructor.addStatement("if(binder ==null)binder=new Binder.Default()");
+      constructor.addStatement("if(binder ==null)binder=new Binder.DefaultBinder()");
       constructor.addStatement("this.binder = binder");
       constructor.addCode("\n");
     }
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 2a8f5728..1a7363ce 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -87,7 +87,7 @@ void x(){
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    Unbinder binder = ButterKnife.bind(this,null);
+    Unbinder binder = ButterKnife.bind(this);
     Bean bean=new Bean();
     binder.apply(bean);
     // Contrived code to use the bound fields.
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
index 8075a72b..e64b706c 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -15,7 +15,7 @@
   @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
 
-    Unbinder unbinder = ButterKnife.bind(activity);
+    Unbinder unbinder = ButterKnife.bind(activity,null);
     verifySimpleActivityBound(activity);
     unbinder.unbind();
     verifySimpleActivityUnbound(activity);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
index 55754140..95999f4b 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -32,7 +32,7 @@ public void verifyContentViewBinding() {
     frameLayout.addView(content);
     H h = new H(frameLayout);
 
-    Unbinder unbinder = ButterKnife.bind(h, frameLayout);
+    Unbinder unbinder = ButterKnife.bind(h, frameLayout,null);
     verifyHBound(h);
     unbinder.unbind();
     verifyHUnbound(h);
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index 9bde9ff5..9c944b58 100644
--- a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -234,14 +234,14 @@ public void resetViewsCache() {
     }
 
     Example example = new Example();
-    assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
+    assertThat(ButterKnife.bind(example,(View)null,null)).isSameAs(Unbinder.EMPTY);
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
     View view = new View(context);
     ButterKnife.bind(view);
     assertThat(ButterKnife.BINDINGS).isEmpty();
-    ButterKnife.bind(new Object(), view);
+    ButterKnife.bind(new Object(), view,null);
     assertThat(ButterKnife.BINDINGS).isEmpty();
   }
 }
diff --git a/butterknife/src/main/java/butterknife/Binder.java b/butterknife/src/main/java/butterknife/Binder.java
index dbb2e31e..827c01a9 100644
--- a/butterknife/src/main/java/butterknife/Binder.java
+++ b/butterknife/src/main/java/butterknife/Binder.java
@@ -1,15 +1,69 @@
 package butterknife;
 
+import android.net.Uri;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.StringRes;
 import android.support.annotation.UiThread;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.TextView;
 
-/** An unbinder contract that will unbind views when called. */
+import java.io.File;
+
+/** An binder will apply views property when called. */
 public interface Binder {
     @UiThread
-    <V,D>void apply(V bean,D data);
-    class Default implements Binder{
-      @Override
-      public <V, D> void apply(V bean, D data) {
-        
-      }
+    <Target,Data>void apply(Target target,Data data);
+    void apply(TextView target, CharSequence data);
+    void apply(Button target, CharSequence data);
+    void apply(TextView target, @StringRes int data);
+    void apply(Button target, @StringRes int data);
+
+    /**
+     * use setImageUri on target
+     * @param target
+     * @param data
+     */
+    void apply(ImageView target, CharSequence data);
+    void apply(ImageView target, @DrawableRes int data);
+
+    /**
+     *
+     */
+    class DefaultBinder implements Binder{
+        @Override
+        public <Target, Data> void apply(Target bean, Data data) {
+
+        }
+
+        @Override
+        public void apply(TextView target, CharSequence data) {
+            target.setText(data);
+        }
+
+        @Override
+        public void apply(Button target, CharSequence data) {
+            target.setText(data);
+        }
+
+        @Override
+        public void apply(TextView target, @StringRes int data) {
+            target.setText(data);
+        }
+
+        @Override
+        public void apply(Button target, @StringRes int data) {
+            target.setText(data);
+        }
+
+        @Override
+        public void apply(ImageView target, CharSequence data) {
+            target.setImageURI(Uri.fromFile(new File(data.toString())));
+        }
+
+        @Override
+        public void apply(ImageView target, @DrawableRes int data) {
+            target.setImageResource(data);
+        }
     }
 }
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 6e4dbb29..77a4403b 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -123,7 +123,11 @@ public static Unbinder bind(@NonNull Activity target,Binder binder) {
     View sourceView = target.getWindow().getDecorView();
     return createBinding(target, sourceView,binder);
   }
-
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Activity target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView,null);
+  }
   /**
    * BindView annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
@@ -134,7 +138,10 @@ public static Unbinder bind(@NonNull Activity target,Binder binder) {
   public static Unbinder bind(@NonNull View target,Binder binder) {
     return createBinding(target, target,binder);
   }
-
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull View target) {
+    return createBinding(target, target,null);
+  }
   /**
    * BindView annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
@@ -146,7 +153,11 @@ public static Unbinder bind(@NonNull Dialog target,Binder binder) {
     View sourceView = target.getWindow().getDecorView();
     return createBinding(target, sourceView,binder);
   }
-
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Dialog target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView,null);
+  }
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
@@ -159,7 +170,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull Activity source,Bin
     View sourceView = source.getWindow().getDecorView();
     return createBinding(target, sourceView,binder);
   }
-
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView,null);
+  }
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
@@ -171,7 +186,10 @@ public static Unbinder bind(@NonNull Object target, @NonNull Activity source,Bin
   public static Unbinder bind(@NonNull Object target, @NonNull View source,Binder binder) {
     return createBinding(target, source,binder);
   }
-
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
+    return createBinding(target, source,null);
+  }
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
@@ -184,6 +202,11 @@ public static Unbinder bind(@NonNull Object target, @NonNull Dialog source,Binde
     View sourceView = source.getWindow().getDecorView();
     return createBinding(target, sourceView,binder);
   }
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView,null);
+  }
 
   private static Unbinder createBinding(@NonNull Object target, @NonNull View source,Binder binder) {
     Class<?> targetClass = target.getClass();
