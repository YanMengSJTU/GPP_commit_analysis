diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
new file mode 100755
index 00000000..819e105d
--- /dev/null
+++ b/.buildscript/deploy_snapshot.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+#
+# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
+#
+# Adapted from https://coderwall.com/p/9b_lfq and
+# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
+
+SLUG="JakeWharton/butterknife"
+JDK="oraclejdk8"
+BRANCH="master"
+
+set -e
+
+if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then
+  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'."
+elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then
+  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'."
+elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
+  echo "Skipping snapshot deployment: was pull request."
+elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then
+  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'."
+else
+  echo "Deploying snapshot..."
+  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true
+  echo "Snapshot deployed!"
+fi
diff --git a/.buildscript/settings.xml b/.buildscript/settings.xml
new file mode 100644
index 00000000..91f444b2
--- /dev/null
+++ b/.buildscript/settings.xml
@@ -0,0 +1,9 @@
+<settings>
+  <servers>
+    <server>
+      <id>sonatype-nexus-snapshots</id>
+      <username>${env.CI_DEPLOY_USERNAME}</username>
+      <password>${env.CI_DEPLOY_PASSWORD}</password>
+    </server>
+  </servers>
+</settings>
diff --git a/.travis.yml b/.travis.yml
index 381c7bb6..da0572a8 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,9 +7,27 @@ android:
   licenses:
     - android-sdk-license-5be876d5
 
+jdk:
+  - oraclejdk7
+  - oraclejdk8
+
+after_success:
+  - .buildscript/deploy_snapshot.sh
+
+env:
+  global:
+    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A="
+    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk="
+
 branches:
   except:
     - gh-pages
 
 notifications:
   email: false
+
+sudo: false
+
+cache:
+  directories:
+    - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
index e7cd9259..2fd857cc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,53 @@
 Change Log
 ==========
 
+Version 7.0.1 *(2015-06-30)*
+----------------------------
+
+ * Fix: Correct `ClassCastException` which occurred when `@Nullable` array bindings had missing views.
+
+
+Version 7.0.0 *(2015-06-27)*
+----------------------------
+
+ * `@Bind` replaces `@InjectView` and `@InjectViews`.
+ * `ButterKnife.bind` and `ButterKnife.unbind` replaces `ButterKnife.inject` and `ButterKnife.reset`, respectively.
+ * `@Optional` has been removed. Use `@Nullable` from the 'support-annotations' library, or any other annotation
+   named "Nullable".
+ * New: Resource binding annotations!
+   * `@BindBool` binds an `R.bool` ID to a `boolean` field.
+   * `@BindColor` binds an `R.color` ID to an `int` or `ColorStateList` field.
+   * `@BindDimen` binds an `R.dimen` ID to an `int` (for pixel size) or `float` (for exact value) field.
+   * `@BindDrawable` binds an `R.drawable` ID to a `Drawable` field.
+   * `@BindInt` binds an `R.int` ID to an `int` field.
+   * `@BindString` binds an `R.string` ID to a `String` field.
+ * Fix: Missing views will be filtered out from list and array bindings.
+ * Note: If you are using Proguard, the generated class name has changed from being suffixed with `$$ViewInjector`
+   to `$$ViewBinder`.
+
+
+Version 6.1.0 *(2015-01-29)*
+----------------------------
+
+ * New: Support for injecting interface types everywhere that views were previously supported (e.g., `Checkable`).
+ * Eliminate reflection-based method invocation for injection and resetting. This makes performance slightly faster
+   (although if you are worried about the performance of Butter Knife you have other problems). The only reflection
+   in the library is a single `Class.forName` lookup for each type.
+
+
+Version 6.0.0 *(2014-10-27)*
+----------------------------
+
+ * New: Listeners can bind to the root view being injected by omitting a view ID on the annotation.
+ * New: Exceptions thrown from missing views now include the human-readable ID name (e.g., 'button1').
+ * Specifying multiple fields binding to the same ID is now considered an error.
+ * `findById` overload for view lookup on `Dialog` instances.
+ * Experimental: Click listeners are now globally debounced per frame. This means that only a single click
+   will be processed per frame preventing race conditions due to queued input events.
+ * Experimental: Multiple methods can bind to the same listener provided that listener's callback method
+   does not require a return value.
+
+
 Version 5.1.2 *(2014-08-01)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 203cd9d2..417d8ffc 100644
--- a/README.md
+++ b/README.md
@@ -3,18 +3,22 @@ Butter Knife
 
 ![Logo](website/static/logo.png)
 
-View "injection" library for Android which uses annotation processing to generate boilerplate code
-for you.
+Field and method binding for Android views which uses annotation processing to generate boilerplate
+code for you.
 
- * Eliminate `findViewById` calls by using `@InjectView` on fields.
- * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
+ * Eliminate resource lookups by using resource annotations on fields.
 
 ```java
 class ExampleActivity extends Activity {
-  @InjectView(R.id.user) EditText username;
-  @InjectView(R.id.pass) EditText password;
+  @Bind(R.id.user) EditText username;
+  @Bind(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error)
+  String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -23,8 +27,8 @@ class ExampleActivity extends Activity {
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }
 ```
@@ -43,14 +47,46 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife</artifactId>
-  <version>5.1.2</version>
+  <version>7.0.1</version>
+</dependency>
+```
+or Gradle:
+```groovy
+compile 'com.jakewharton:butterknife:7.0.1'
+```
+
+For the SNAPSHOT version:
+```xml
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife</artifactId>
+  <version>7.0.2-SNAPSHOT</version>
+</dependency>
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife-compiler</artifactId>
+  <version>7.0.2-SNAPSHOT</version>
+  <optional>true</optional>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton:butterknife:5.1.2'
+buildscript {
+  dependencies {
+    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6'
+  }
+}
+
+apply plugin: 'com.neenbedankt.android-apt'
+
+dependencies {
+  compile 'com.jakewharton:butterknife:7.0.2-SNAPSHOT'
+  apt 'com.jakewharton:butterknife-compiler:7.0.2-SNAPSHOT'
+}
 ```
 
+Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+
 
 License
 -------
@@ -72,5 +108,6 @@ License
 
 
  [1]: http://square.github.com/dagger/
- [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton&a=butterknife&v=LATEST
+ [2]: https://search.maven.org/remote_content?g=com.jakewharton&a=butterknife&v=LATEST
  [3]: http://jakewharton.github.com/butterknife/
+ [snap]: https://oss.sonatype.org/content/repositories/snapshots/
diff --git a/butterknife-compiler/pom.xml b/butterknife-compiler/pom.xml
new file mode 100644
index 00000000..f5dded40
--- /dev/null
+++ b/butterknife-compiler/pom.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.jakewharton</groupId>
+    <artifactId>butterknife-parent</artifactId>
+    <version>7.0.2-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>butterknife-compiler</artifactId>
+  <name>Butter Knife Compiler</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.jakewharton</groupId>
+      <artifactId>butterknife</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>javapoet</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.easytesting</groupId>
+      <artifactId>fest-assert-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>fest-android</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.robolectric</groupId>
+      <artifactId>robolectric</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.google.testing.compile</groupId>
+      <artifactId>compile-testing</artifactId>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.google.android</groupId>
+      <artifactId>android</artifactId>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <compilerArgument>-proc:none</compilerArgument>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
new file mode 100644
index 00000000..2e61b094
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
@@ -0,0 +1,396 @@
+package butterknife.internal;
+
+import android.content.res.Resources;
+import android.graphics.BitmapFactory;
+import android.view.View;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.TypeVariableName;
+import com.squareup.javapoet.WildcardTypeName;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static java.util.Collections.singletonList;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
+final class BindingClass {
+  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");
+  private static final ClassName VIEW_BINDER =
+      ClassName.get("butterknife", "ButterKnife", "ViewBinder");
+
+  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
+  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
+  private final String classPackage;
+  private final String className;
+  private final String targetClass;
+  private String parentViewBinder;
+
+  BindingClass(String classPackage, String className, String targetClass) {
+    this.classPackage = classPackage;
+    this.className = className;
+    this.targetClass = targetClass;
+  }
+
+  void addBitmap(FieldBitmapBinding binding) {
+    bitmapBindings.add(binding);
+  }
+
+  void addField(int id, FieldViewBinding binding) {
+    getOrCreateViewBindings(id).addFieldBinding(binding);
+  }
+
+  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
+    collectionBindings.put(binding, ids);
+  }
+
+  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    ViewBindings viewBindings = getOrCreateViewBindings(id);
+    if (viewBindings.hasMethodBinding(listener, method)
+        && !"void".equals(method.returnType())) {
+      return false;
+    }
+    viewBindings.addMethodBinding(listener, method, binding);
+    return true;
+  }
+
+  void addResource(FieldResourceBinding binding) {
+    resourceBindings.add(binding);
+  }
+
+  void setParentViewBinder(String parentViewBinder) {
+    this.parentViewBinder = parentViewBinder;
+  }
+
+  ViewBindings getViewBinding(int id) {
+    return viewIdMap.get(id);
+  }
+
+  private ViewBindings getOrCreateViewBindings(int id) {
+    ViewBindings viewId = viewIdMap.get(id);
+    if (viewId == null) {
+      viewId = new ViewBindings(id);
+      viewIdMap.put(id, viewId);
+    }
+    return viewId;
+  }
+
+  JavaFile brewJava() {
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC)
+        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+
+    if (parentViewBinder != null) {
+      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
+          TypeVariableName.get("T")));
+    } else {
+      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));
+    }
+
+    result.addMethod(createBindMethod());
+    result.addMethod(createUnbindMethod());
+
+    return JavaFile.builder(classPackage, result.build())
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
+  }
+
+  private MethodSpec createBindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(FINDER, "finder", FINAL)
+        .addParameter(TypeVariableName.get("T"), "target", FINAL)
+        .addParameter(Object.class, "source");
+
+    // Emit a call to the superclass binder, if any.
+    if (parentViewBinder != null) {
+      result.addStatement("super.bind(finder, target, source)");
+    }
+
+    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
+      // Local variable in which all views will be temporarily stored.
+      result.addStatement("$T view", View.class);
+
+      // Loop over each view bindings and emit it.
+      for (ViewBindings bindings : viewIdMap.values()) {
+        addViewBindings(result, bindings);
+      }
+
+      // Loop over each collection binding and emit it.
+      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+        emitCollectionBinding(result, entry.getKey(), entry.getValue());
+      }
+    }
+
+    if (requiresResources()) {
+      result.addStatement("$T res = finder.getContext(source).getResources()", Resources.class);
+
+      if (!bitmapBindings.isEmpty()) {
+        for (FieldBitmapBinding binding : bitmapBindings) {
+          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
+              BitmapFactory.class, binding.getId());
+        }
+      }
+
+      if (!resourceBindings.isEmpty()) {
+        for (FieldResourceBinding binding : resourceBindings) {
+          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
+              binding.getId());
+        }
+      }
+    }
+
+    return result.build();
+  }
+
+  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
+      int[] ids) {
+    String ofName;
+    switch (binding.getKind()) {
+      case ARRAY:
+        ofName = "arrayOf";
+        break;
+      case LIST:
+        ofName = "listOf";
+        break;
+      default:
+        throw new IllegalStateException("Unknown kind: " + binding.getKind());
+    }
+
+    CodeBlock.Builder builder = CodeBlock.builder();
+    for (int i = 0; i < ids.length; i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
+      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],
+          asHumanDescription(singletonList(binding)));
+    }
+
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,
+        builder.build());
+  }
+
+  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
+    if (requiredViewBindings.isEmpty()) {
+      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
+    } else {
+      if (bindings.getId() == View.NO_ID) {
+        result.addStatement("view = target", bindings.getId());
+      } else {
+        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
+            asHumanDescription(requiredViewBindings));
+      }
+    }
+
+    addFieldBindings(result, bindings);
+    addMethodBindings(result, bindings);
+  }
+
+  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.requiresCast()) {
+        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
+            bindings.getId(), asHumanDescription(fieldBindings));
+      } else {
+        result.addStatement("target.$L = view", fieldBinding.getName());
+      }
+    }
+  }
+
+  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      result.beginControlFlow("if (view != null)");
+    }
+
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
+        : classMethodBindings.entrySet()) {
+      ListenerClass listener = e.getKey();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
+
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
+
+      for (ListenerMethod method : getListenerMethods(listener)) {
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
+        String[] parameterTypes = method.parameters();
+        for (int i = 0, count = parameterTypes.length; i < count; i++) {
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+        }
+
+        boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
+        if (hasReturnType) {
+          builder.add("return ");
+        }
+
+        if (methodBindings.containsKey(method)) {
+          for (MethodViewBinding binding : methodBindings.get(method)) {
+            builder.add("target.$L(", binding.getName());
+            List<Parameter> parameters = binding.getParameters();
+            String[] listenerParameters = method.parameters();
+            for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
+              Parameter parameter = parameters.get(i);
+              int listenerPosition = parameter.getListenerPosition();
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),
+                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
+              } else {
+                builder.add("p$L", listenerPosition);
+              }
+            }
+            builder.add(");\n");
+          }
+        } else if (hasReturnType) {
+          builder.add("$L;\n", method.defaultReturn());
+        }
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
+      }
+
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) view).$L($L)", bestGuess(listener.targetType()),
+            listener.setter(), callback.build());
+      } else {
+        result.addStatement("view.$L($L)", listener.setter(), callback.build());
+      }
+    }
+
+    if (needsNullChecked) {
+      result.endControlFlow();
+    }
+  }
+
+  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  private MethodSpec createUnbindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(TypeVariableName.get("T"), "target");
+
+    if (parentViewBinder != null) {
+      result.addStatement("super.unbind(target)");
+    }
+    for (ViewBindings bindings : viewIdMap.values()) {
+      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
+        result.addStatement("target.$L = null", fieldBinding.getName());
+      }
+    }
+    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
+      result.addStatement("target.$L = null", fieldCollectionBinding.getName());
+    }
+
+    return result.build();
+  }
+
+  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
+    Iterator<? extends ViewBinding> iterator = bindings.iterator();
+    switch (bindings.size()) {
+      case 1:
+        return iterator.next().getDescription();
+      case 2:
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
+      default:
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          if (i != 0) {
+            builder.append(", ");
+          }
+          if (i == count - 1) {
+            builder.append("and ");
+          }
+          builder.append(iterator.next().getDescription());
+        }
+        return builder.toString();
+    }
+  }
+
+  static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
+    }
+  }
+
+  private boolean requiresResources() {
+    return !bitmapBindings.isEmpty() || !resourceBindings.isEmpty();
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
new file mode 100644
index 00000000..e3442fa8
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -0,0 +1,1088 @@
+package butterknife.internal;
+
+import android.view.View;
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import com.squareup.javapoet.TypeName;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.ElementKind.INTERFACE;
+import static javax.lang.model.element.ElementKind.METHOD;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.STATIC;
+import static javax.tools.Diagnostic.Kind.ERROR;
+
+public final class ButterKnifeProcessor extends AbstractProcessor {
+  static final String VIEW_TYPE = "android.view.View";
+  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
+  private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
+  private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
+  private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
+  private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
+  private static final String LIST_TYPE = List.class.getCanonicalName();
+  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
+      OnCheckedChanged.class, //
+      OnClick.class, //
+      OnEditorAction.class, //
+      OnFocusChange.class, //
+      OnItemClick.class, //
+      OnItemLongClick.class, //
+      OnItemSelected.class, //
+      OnLongClick.class, //
+      OnPageChange.class, //
+      OnTextChanged.class, //
+      OnTouch.class //
+  );
+
+  private Elements elementUtils;
+  private Types typeUtils;
+  private Filer filer;
+
+  @Override public synchronized void init(ProcessingEnvironment env) {
+    super.init(env);
+
+    elementUtils = env.getElementUtils();
+    typeUtils = env.getTypeUtils();
+    filer = env.getFiler();
+  }
+
+  @Override public Set<String> getSupportedAnnotationTypes() {
+    Set<String> types = new LinkedHashSet<>();
+
+    types.add(Bind.class.getCanonicalName());
+
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      types.add(listener.getCanonicalName());
+    }
+
+    types.add(BindArray.class.getCanonicalName());
+    types.add(BindBitmap.class.getCanonicalName());
+    types.add(BindBool.class.getCanonicalName());
+    types.add(BindColor.class.getCanonicalName());
+    types.add(BindDimen.class.getCanonicalName());
+    types.add(BindDrawable.class.getCanonicalName());
+    types.add(BindInt.class.getCanonicalName());
+    types.add(BindString.class.getCanonicalName());
+
+    return types;
+  }
+
+  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
+
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+      TypeElement typeElement = entry.getKey();
+      BindingClass bindingClass = entry.getValue();
+
+      try {
+        bindingClass.brewJava().writeTo(filer);
+      } catch (IOException e) {
+        error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
+            e.getMessage());
+      }
+    }
+
+    return true;
+  }
+
+  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
+    Set<String> erasedTargetNames = new LinkedHashSet<>();
+
+    // Process each @Bind element.
+    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
+      try {
+        parseBind(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, Bind.class, e);
+      }
+    }
+
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    }
+
+    // Process each @BindArray element.
+    for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
+      try {
+        parseResourceArray(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindArray.class, e);
+      }
+    }
+
+    // Process each @BindBitmap element.
+    for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
+      try {
+        parseResourceBitmap(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBitmap.class, e);
+      }
+    }
+
+    // Process each @BindBool element.
+    for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
+      try {
+        parseResourceBool(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBool.class, e);
+      }
+    }
+
+    // Process each @BindColor element.
+    for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
+      try {
+        parseResourceColor(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindColor.class, e);
+      }
+    }
+
+    // Process each @BindDimen element.
+    for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
+      try {
+        parseResourceDimen(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDimen.class, e);
+      }
+    }
+
+    // Process each @BindDrawable element.
+    for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
+      try {
+        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDrawable.class, e);
+      }
+    }
+
+    // Process each @BindInt element.
+    for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
+      try {
+        parseResourceInt(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindInt.class, e);
+      }
+    }
+
+    // Process each @BindString element.
+    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
+      try {
+        parseResourceString(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindString.class, e);
+      }
+    }
+
+    // Try to find a parent binder for each.
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
+      if (parentClassFqcn != null) {
+        entry.getValue().setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);
+      }
+    }
+
+    return targetClassMap;
+  }
+
+  private void logParsingError(Element element, Class<? extends Annotation> annotation,
+      Exception e) {
+    StringWriter stackTrace = new StringWriter();
+    e.printStackTrace(new PrintWriter(stackTrace));
+    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
+  }
+
+  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
+      String targetThing, Element element) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify method modifiers.
+    Set<Modifier> modifiers = element.getModifiers();
+    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
+      error(element, "@%s %s must not be private or static. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing type.
+    if (enclosingElement.getKind() != CLASS) {
+      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing class visibility is not private.
+    if (enclosingElement.getModifiers().contains(PRIVATE)) {
+      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    return hasError;
+  }
+
+  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
+      Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+    String qualifiedName = enclosingElement.getQualifiedName().toString();
+
+    if (qualifiedName.startsWith("android.")) {
+      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+    if (qualifiedName.startsWith("java.")) {
+      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+
+    return false;
+  }
+
+  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    // Verify common generated code restrictions.
+    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
+        || isBindingInWrongPackage(Bind.class, element)) {
+      return;
+    }
+
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
+      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
+          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
+          element.getSimpleName());
+    } else {
+      parseBindOne(element, targetClassMap, erasedTargetNames);
+    }
+  }
+
+  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type extends from View.
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) elementType;
+      elementType = typeVariable.getUpperBound();
+    }
+    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
+      error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Assemble information on the field.
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length != 1) {
+      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
+          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    int id = ids[0];
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass != null) {
+      ViewBindings viewBindings = bindingClass.getViewBinding(id);
+      if (viewBindings != null) {
+        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
+        if (iterator.hasNext()) {
+          FieldViewBinding existingBinding = iterator.next();
+          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+              Bind.class.getSimpleName(), id, existingBinding.getName(),
+              enclosingElement.getQualifiedName(), element.getSimpleName());
+          return;
+        }
+      }
+    } else {
+      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    }
+
+    String name = element.getSimpleName().toString();
+    TypeName type = TypeName.get(elementType);
+    boolean required = isRequiredBinding(element);
+
+    FieldViewBinding binding = new FieldViewBinding(name, type, required);
+    bindingClass.addField(id, binding);
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the type is a List or an array.
+    TypeMirror elementType = element.asType();
+    String erasedType = doubleErasure(elementType);
+    TypeMirror viewType = null;
+    FieldCollectionViewBinding.Kind kind;
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      ArrayType arrayType = (ArrayType) elementType;
+      viewType = arrayType.getComponentType();
+      kind = FieldCollectionViewBinding.Kind.ARRAY;
+    } else if (LIST_TYPE.equals(erasedType)) {
+      DeclaredType declaredType = (DeclaredType) elementType;
+      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+      if (typeArguments.size() != 1) {
+        error(element, "@%s List must have a generic component. (%s.%s)",
+            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      } else {
+        viewType = typeArguments.get(0);
+      }
+      kind = FieldCollectionViewBinding.Kind.LIST;
+    } else {
+      throw new AssertionError();
+    }
+    if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) viewType;
+      viewType = typeVariable.getUpperBound();
+    }
+
+    // Verify that the target type extends from View.
+    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
+      error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length == 0) {
+      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      return;
+    }
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
+          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
+    }
+
+    assert viewType != null; // Always false as hasError would have been true.
+    TypeName type = TypeName.get(viewType);
+    boolean required = isRequiredBinding(element);
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
+    bindingClass.addFieldCollection(ids, binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is bool.
+    if (element.asType().getKind() != TypeKind.BOOLEAN) {
+      error(element, "@%s field type must be 'boolean'. (%s.%s)",
+          BindBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBool.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBool.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBool.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isColorStateList = false;
+    TypeMirror elementType = element.asType();
+    if (COLOR_STATE_LIST_TYPE.equals(elementType.toString())) {
+      isColorStateList = true;
+    } else if (elementType.getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
+          BindColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindColor.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindColor.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindColor.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isColorStateList ? "getColorStateList" : "getColor");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isInt = false;
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.INT) {
+      isInt = true;
+    } else if (elementType.getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
+          BindDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDimen.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDimen.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDimen.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isInt ? "getDimensionPixelSize" : "getDimension");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Bitmap.
+    if (!BITMAP_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Bitmap'. (%s.%s)",
+          BindBitmap.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBitmap.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBitmap.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBitmap.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
+    bindingClass.addBitmap(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Drawable.
+    if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Drawable'. (%s.%s)",
+          BindDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDrawable.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDrawable.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDrawable.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int.
+    if (element.asType().getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int'. (%s.%s)", BindInt.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindInt.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindInt.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindInt.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is String.
+    if (!"java.lang.String".equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'String'. (%s.%s)",
+          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindString.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindString.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is supported.
+    String methodName = getArrayResourceMethodName(element);
+    if (methodName == null) {
+      error(element,
+          "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
+          BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindArray.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindArray.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindArray.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  /**
+   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * binding, null if the element type is not supported.
+   */
+  private static String getArrayResourceMethodName(Element element) {
+    TypeMirror typeMirror = element.asType();
+    if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
+      return "obtainTypedArray";
+    }
+    if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
+      ArrayType arrayType = (ArrayType) typeMirror;
+      String componentType = arrayType.getComponentType().toString();
+      if ("java.lang.String".equals(componentType)) {
+        return "getStringArray";
+      } else if ("int".equals(componentType)) {
+        return "getIntArray";
+      } else if ("java.lang.CharSequence".equals(componentType)) {
+        return "getTextArray";
+      }
+    }
+    return null;
+  }
+
+  /** Returns the first duplicate element inside an array, null if there are no duplicates. */
+  private static Integer findDuplicate(int[] array) {
+    Set<Integer> seenElements = new LinkedHashSet<>();
+
+    for (int element : array) {
+      if (!seenElements.add(element)) {
+        return element;
+      }
+    }
+
+    return null;
+  }
+
+  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
+  private String doubleErasure(TypeMirror elementType) {
+    String name = typeUtils.erasure(elementType).toString();
+    int typeParamStart = name.indexOf('<');
+    if (typeParamStart != -1) {
+      name = name.substring(0, typeParamStart);
+    }
+    return name;
+  }
+
+  private void findAndParseListener(RoundEnvironment env,
+      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
+      try {
+        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view binder for @%s.\n\n%s",
+            annotationClass.getSimpleName(), stackTrace.toString());
+      }
+    }
+  }
+
+  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
+      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames)
+      throws Exception {
+    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
+    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
+      throw new IllegalStateException(
+          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
+    }
+
+    ExecutableElement executableElement = (ExecutableElement) element;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Assemble information on the method.
+    Annotation annotation = element.getAnnotation(annotationClass);
+    Method annotationValue = annotationClass.getDeclaredMethod("value");
+    if (annotationValue.getReturnType() != int[].class) {
+      throw new IllegalStateException(
+          String.format("@%s annotation value() type not int[].", annotationClass));
+    }
+
+    int[] ids = (int[]) annotationValue.invoke(annotation);
+    String name = executableElement.getSimpleName().toString();
+    boolean required = isRequiredBinding(element);
+
+    // Verify that the method and its containing class are accessible via generated code.
+    boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
+    hasError |= isBindingInWrongPackage(annotationClass, element);
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
+          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
+    if (listener == null) {
+      throw new IllegalStateException(
+          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
+              annotationClass.getSimpleName()));
+    }
+
+    for (int id : ids) {
+      if (id == View.NO_ID) {
+        if (ids.length == 1) {
+          if (!required) {
+            error(element, "ID-free binding must not be annotated with @Nullable. (%s.%s)",
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+            hasError = true;
+          }
+
+          // Verify target type is valid for a binding without an id.
+          String targetType = listener.targetType();
+          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
+              && !isInterface(enclosingElement.asType())) {
+            error(element, "@%s annotation without an ID may only be used with an object of type "
+                    + "\"%s\" or an interface. (%s.%s)",
+                annotationClass.getSimpleName(), targetType,
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+            hasError = true;
+          }
+        } else {
+          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
+              annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
+              element.getSimpleName());
+          hasError = true;
+        }
+      }
+    }
+
+    ListenerMethod method;
+    ListenerMethod[] methods = listener.method();
+    if (methods.length > 1) {
+      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
+          annotationClass.getSimpleName()));
+    } else if (methods.length == 1) {
+      if (listener.callbacks() != ListenerClass.NONE.class) {
+        throw new IllegalStateException(
+            String.format("Both method() and callback() defined on @%s.",
+                annotationClass.getSimpleName()));
+      }
+      method = methods[0];
+    } else {
+      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
+      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
+      Field callbackField = callback.getDeclaringClass().getField(callback.name());
+      method = callbackField.getAnnotation(ListenerMethod.class);
+      if (method == null) {
+        throw new IllegalStateException(
+            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
+                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
+                callback.name()));
+      }
+    }
+
+    // Verify that the method has equal to or less than the number of parameters as the listener.
+    List<? extends VariableElement> methodParameters = executableElement.getParameters();
+    if (methodParameters.size() > method.parameters().length) {
+      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
+          annotationClass.getSimpleName(), method.parameters().length,
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify method return type matches the listener.
+    TypeMirror returnType = executableElement.getReturnType();
+    if (returnType instanceof TypeVariable) {
+      TypeVariable typeVariable = (TypeVariable) returnType;
+      returnType = typeVariable.getUpperBound();
+    }
+    if (!returnType.toString().equals(method.returnType())) {
+      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
+          annotationClass.getSimpleName(), method.returnType(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    Parameter[] parameters = Parameter.NONE;
+    if (!methodParameters.isEmpty()) {
+      parameters = new Parameter[methodParameters.size()];
+      BitSet methodParameterUsed = new BitSet(methodParameters.size());
+      String[] parameterTypes = method.parameters();
+      for (int i = 0; i < methodParameters.size(); i++) {
+        VariableElement methodParameter = methodParameters.get(i);
+        TypeMirror methodParameterType = methodParameter.asType();
+        if (methodParameterType instanceof TypeVariable) {
+          TypeVariable typeVariable = (TypeVariable) methodParameterType;
+          methodParameterType = typeVariable.getUpperBound();
+        }
+
+        for (int j = 0; j < parameterTypes.length; j++) {
+          if (methodParameterUsed.get(j)) {
+            continue;
+          }
+          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+              || isInterface(methodParameterType)) {
+            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
+            methodParameterUsed.set(j);
+            break;
+          }
+        }
+        if (parameters[i] == null) {
+          StringBuilder builder = new StringBuilder();
+          builder.append("Unable to match @")
+              .append(annotationClass.getSimpleName())
+              .append(" method arguments. (")
+              .append(enclosingElement.getQualifiedName())
+              .append('.')
+              .append(element.getSimpleName())
+              .append(')');
+          for (int j = 0; j < parameters.length; j++) {
+            Parameter parameter = parameters[j];
+            builder.append("\n\n  Parameter #")
+                .append(j + 1)
+                .append(": ")
+                .append(methodParameters.get(j).asType().toString())
+                .append("\n    ");
+            if (parameter == null) {
+              builder.append("did not match any listener parameters");
+            } else {
+              builder.append("matched listener parameter #")
+                  .append(parameter.getListenerPosition() + 1)
+                  .append(": ")
+                  .append(parameter.getType());
+            }
+          }
+          builder.append("\n\nMethods may have up to ")
+              .append(method.parameters().length)
+              .append(" parameter(s):\n");
+          for (String parameterType : method.parameters()) {
+            builder.append("\n  ").append(parameterType);
+          }
+          builder.append(
+              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
+          error(executableElement, builder.toString());
+          return;
+        }
+      }
+    }
+
+    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    for (int id : ids) {
+      if (!bindingClass.addMethod(id, listener, method, binding)) {
+        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
+            id, enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    }
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private boolean isInterface(TypeMirror typeMirror) {
+    return typeMirror instanceof DeclaredType
+        && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
+  }
+
+  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
+    if (otherType.equals(typeMirror.toString())) {
+      return true;
+    }
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
+      return false;
+    }
+    DeclaredType declaredType = (DeclaredType) typeMirror;
+    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+    if (typeArguments.size() > 0) {
+      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
+      typeString.append('<');
+      for (int i = 0; i < typeArguments.size(); i++) {
+        if (i > 0) {
+          typeString.append(',');
+        }
+        typeString.append('?');
+      }
+      typeString.append('>');
+      if (typeString.toString().equals(otherType)) {
+        return true;
+      }
+    }
+    Element element = declaredType.asElement();
+    if (!(element instanceof TypeElement)) {
+      return false;
+    }
+    TypeElement typeElement = (TypeElement) element;
+    TypeMirror superType = typeElement.getSuperclass();
+    if (isSubtypeOfType(superType, otherType)) {
+      return true;
+    }
+    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
+      if (isSubtypeOfType(interfaceType, otherType)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
+      TypeElement enclosingElement) {
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass == null) {
+      String targetType = enclosingElement.getQualifiedName().toString();
+      String classPackage = getPackageName(enclosingElement);
+      String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
+
+      bindingClass = new BindingClass(classPackage, className, targetType);
+      targetClassMap.put(enclosingElement, bindingClass);
+    }
+    return bindingClass;
+  }
+
+  private static String getClassName(TypeElement type, String packageName) {
+    int packageLen = packageName.length() + 1;
+    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
+  }
+
+  /** Finds the parent binder type in the supplied set, if any. */
+  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
+    TypeMirror type;
+    while (true) {
+      type = typeElement.getSuperclass();
+      if (type.getKind() == TypeKind.NONE) {
+        return null;
+      }
+      typeElement = (TypeElement) ((DeclaredType) type).asElement();
+      if (parents.contains(typeElement.toString())) {
+        String packageName = getPackageName(typeElement);
+        return packageName + "." + getClassName(typeElement, packageName);
+      }
+    }
+  }
+
+  @Override public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  private void error(Element element, String message, Object... args) {
+    if (args.length > 0) {
+      message = String.format(message, args);
+    }
+    processingEnv.getMessager().printMessage(ERROR, message, element);
+  }
+
+  private String getPackageName(TypeElement type) {
+    return elementUtils.getPackageOf(type).getQualifiedName().toString();
+  }
+
+  private static boolean hasAnnotationWithName(Element element, String simpleName) {
+    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
+      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
+      if (simpleName.equals(annotationName)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static boolean isRequiredBinding(Element element) {
+    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
new file mode 100644
index 00000000..f160a641
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
@@ -0,0 +1,19 @@
+package butterknife.internal;
+
+final class FieldBitmapBinding {
+  private final int id;
+  private final String name;
+
+  FieldBitmapBinding(int id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
similarity index 67%
rename from butterknife/src/main/java/butterknife/internal/CollectionBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
index 4ae18327..c6bfd6e5 100644
--- a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
@@ -1,17 +1,19 @@
 package butterknife.internal;
 
-final class CollectionBinding implements Binding {
+import com.squareup.javapoet.TypeName;
+
+final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
     LIST
   }
 
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final Kind kind;
   private final boolean required;
 
-  CollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
@@ -22,7 +24,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
new file mode 100644
index 00000000..f4f0cd04
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
@@ -0,0 +1,25 @@
+package butterknife.internal;
+
+final class FieldResourceBinding {
+  private final int id;
+  private final String name;
+  private final String method;
+
+  FieldResourceBinding(int id, String name, String method) {
+    this.id = id;
+    this.name = name;
+    this.method = method;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public String getMethod() {
+    return method;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
similarity index 50%
rename from butterknife/src/main/java/butterknife/internal/ViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
index 328371fc..0814e005 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
@@ -1,11 +1,15 @@
 package butterknife.internal;
 
-final class ViewBinding implements Binding {
+import com.squareup.javapoet.TypeName;
+
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+
+final class FieldViewBinding implements ViewBinding {
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final boolean required;
 
-  ViewBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, TypeName type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;
@@ -15,7 +19,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
@@ -26,4 +30,8 @@ public String getType() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean requiresCast() {
+    return !VIEW_TYPE.equals(type.toString());
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
similarity index 79%
rename from butterknife/src/main/java/butterknife/internal/ListenerBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
index d4c53996..fede4836 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
@@ -4,14 +4,14 @@
 import java.util.Collections;
 import java.util.List;
 
-final class ListenerBinding implements Binding {
+final class MethodViewBinding implements ViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  ListenerBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
-    this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
+    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
   }
 
diff --git a/butterknife/src/main/java/butterknife/internal/Parameter.java b/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
similarity index 61%
rename from butterknife/src/main/java/butterknife/internal/Parameter.java
rename to butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
index df0c34ab..2bcd7309 100644
--- a/butterknife/src/main/java/butterknife/internal/Parameter.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
@@ -1,13 +1,15 @@
 package butterknife.internal;
 
+import com.squareup.javapoet.TypeName;
+
 /** Represents a parameter type and its position in the listener method. */
 final class Parameter {
   static final Parameter[] NONE = new Parameter[0];
 
   private final int listenerPosition;
-  private final String type;
+  private final TypeName type;
 
-  Parameter(int listenerPosition, String type) {
+  Parameter(int listenerPosition, TypeName type) {
     this.listenerPosition = listenerPosition;
     this.type = type;
   }
@@ -16,7 +18,11 @@ int getListenerPosition() {
     return listenerPosition;
   }
 
-  String getType() {
+  TypeName getType() {
     return type;
   }
+
+  public boolean requiresCast(String toType) {
+    return !type.toString().equals(toType);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/Binding.java b/butterknife-compiler/src/main/java/butterknife/internal/ViewBinding.java
similarity index 67%
rename from butterknife/src/main/java/butterknife/internal/Binding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/ViewBinding.java
index 1ab24e66..133e31b1 100644
--- a/butterknife/src/main/java/butterknife/internal/Binding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ViewBinding.java
@@ -1,7 +1,7 @@
 package butterknife.internal;
 
-/** A field or method view injection binding. */
-interface Binding {
+/** A field or method view binding. */
+interface ViewBinding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
new file mode 100644
index 00000000..7a9e82b4
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
@@ -0,0 +1,77 @@
+package butterknife.internal;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+final class ViewBindings {
+  private final int id;
+  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
+  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
+      methodBindings = new LinkedHashMap<>();
+
+  ViewBindings(int id) {
+    this.id = id;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public Collection<FieldViewBinding> getFieldBindings() {
+    return fieldBindings;
+  }
+
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
+    return methodBindings;
+  }
+
+  public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+    return methods != null && methods.containsKey(method);
+  }
+
+  public void addMethodBinding(ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+    Set<MethodViewBinding> set = null;
+    if (methods == null) {
+      methods = new LinkedHashMap<>();
+      methodBindings.put(listener, methods);
+    } else {
+      set = methods.get(method);
+    }
+    if (set == null) {
+      set = new LinkedHashSet<>();
+      methods.put(method, set);
+    }
+    set.add(binding);
+  }
+
+  public void addFieldBinding(FieldViewBinding fieldBinding) {
+    fieldBindings.add(fieldBinding);
+  }
+
+  public List<ViewBinding> getRequiredBindings() {
+    List<ViewBinding> requiredViewBindings = new ArrayList<>();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.isRequired()) {
+        requiredViewBindings.add(fieldBinding);
+      }
+    }
+    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodViewBinding> set : methodBinding.values()) {
+        for (MethodViewBinding binding : set) {
+          if (binding.isRequired()) {
+            requiredViewBindings.add(binding);
+          }
+        }
+      }
+    }
+    return requiredViewBindings;
+  }
+}
diff --git a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/butterknife-compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
similarity index 100%
rename from butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
rename to butterknife-compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
similarity index 94%
rename from butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
index 4ee70470..dfcc78a3 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -6,8 +6,7 @@
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.TextView;
-import butterknife.InjectView;
-import butterknife.InjectViews;
+import butterknife.Bind;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -18,7 +17,6 @@
 import butterknife.OnLongClick;
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
-import butterknife.Optional;
 import com.google.common.io.Files;
 import com.google.testing.compile.JavaFileObjects;
 import java.io.File;
@@ -27,9 +25,8 @@
 import java.util.List;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 @SuppressWarnings("UnusedDeclaration")
 public class AllTheThingsTest {
@@ -39,31 +36,33 @@
 
     ASSERT.about(javaSource())
         .that(JavaFileObjects.forSourceString("butterknife.internal.AllTheThingsTest", content))
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
+  @interface Nullable {}
+
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @InjectView(10) View injectView;
-  @Optional @InjectView(20) View optinalInjectView;
+  @Bind(10) View findView;
+  @Nullable @Bind(20) View optionalBind;
 
-  @InjectView(30) TextView injectTextView;
-  @Optional @InjectView(40) TextView optinalInjectTextView;
+  @Bind(30) TextView findTextView;
+  @Nullable @Bind(40) TextView optionalFIndTextView;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @InjectViews(50) List<View> injectViewsListOne;
-  @InjectViews({ 60, 70 }) List<View> injectViewsListMultiple;
+  @Bind(50) List<View> findViewsListOne;
+  @Bind({ 60, 70 }) List<View> findViewsListMultiple;
 
-  @InjectViews(80) List<TextView> injectTextViewsListOne;
-  @InjectViews({ 90, 100 }) List<TextView> injectTextViewsListMultiple;
+  @Bind(80) List<TextView> findTextViewsListOne;
+  @Bind({ 90, 100 }) List<TextView> findTextViewsListMultiple;
 
-  @InjectViews(110) View[] injectViewsArrayOne;
-  @InjectViews({ 120, 130 }) View[] injectViewsArrayMultiple;
+  @Bind(110) View[] findViewsArrayOne;
+  @Bind({ 120, 130 }) View[] findViewsArrayMultiple;
 
-  @InjectViews(140) TextView[] injectTextViewsArrayOne;
-  @InjectViews({ 150, 160 }) TextView[] injectTextViewsArrayMultiple;
+  @Bind(140) TextView[] findTextViewsArrayOne;
+  @Bind({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
new file mode 100644
index 00000000..7ac81dbd
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
@@ -0,0 +1,167 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindArrayTest {
+  @Test public void stringArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getStringArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void intArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) int[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getIntArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void textArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) CharSequence[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getTextArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "import android.content.res.TypedArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) TypedArray one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.obtainTypedArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
new file mode 100644
index 00000000..eefc4944
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
@@ -0,0 +1,64 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBitmapTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.Bitmap;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) Bitmap one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import android.graphics.BitmapFactory;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = BitmapFactory.decodeResource(res, 1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBitmap() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
new file mode 100644
index 00000000..4b6ff128
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
@@ -0,0 +1,62 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBoolTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) boolean one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getBoolean(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBoolean() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
new file mode 100644
index 00000000..2a999c54
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
@@ -0,0 +1,97 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindColorTest {
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getColor(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.content.res.ColorStateList;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) ColorStateList one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getColorStateList(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
new file mode 100644
index 00000000..2710dd98
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
@@ -0,0 +1,96 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDimenTest {
+  @Test public void simpleFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) float one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimension(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimensionPixelSize(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
new file mode 100644
index 00000000..c503fbf8
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
@@ -0,0 +1,63 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDrawableTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.drawable.Drawable;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) Drawable one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDrawable(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeDrawable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
new file mode 100644
index 00000000..ec9f41fb
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
@@ -0,0 +1,62 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindIntTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getInteger(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
new file mode 100644
index 00000000..3d4486cb
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
@@ -0,0 +1,62 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindStringTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) String one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getString(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeString() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) boolean one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
new file mode 100644
index 00000000..db8633b4
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
@@ -0,0 +1,959 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+  @Test public void bindingViewTooManyIdsFail() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2}) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @Bind(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.EditText;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "class Test<T extends TextView> extends Activity {",
+        "    @Bind(1) T thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import butterknife.OnClick;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View thing1;",
+        "  @OnClick(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
+            "    target.thing1 = view;",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing1 = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) public View thing1;",
+        "  @Bind(2) View thing2;",
+        "  @Bind(3) protected View thing3;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @interface Nullable {}",
+        "  @Nullable @Bind(1) View view;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findOptionalView(source, 1, null);",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T> extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test<String> {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test<Object> {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package java.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package android.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  private static class Inner {",
+        "    @Bind(1) View thing;",
+        "  }",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public interface Test {",
+        "    @Bind(1) View thing = null;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) private View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) static View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing1;",
+        "    @Bind(1) View thing2;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsRootViewBindingWithBadTarget() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnItemClick;",
+            "public class Test extends View {",
+            "  @OnItemClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining((
+            "@OnItemClick annotation without an ID may only be used with an object of type "
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(6);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnClick;",
+            "public class Test extends View {",
+            "  @interface Nullable {}",
+            "  @Nullable @OnClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            ("ID-free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(7);
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) View[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) T[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) TextView[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) List<T> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @interface Nullable {}",
+        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind({}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind(1) List thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.Deque;",
+        "public class Test {",
+        "  @Bind(1) Deque<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @Bind(1) List<String> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String[] thing;",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 1}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index 6aac750a..28884887 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnCheckedChangedTest {
   @Test public void checkedChanged() {
@@ -20,28 +20,31 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import android.widget.CompoundButton;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(android.widget.CompoundButton p0, boolean p1) {",
+            "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
+            "      @Override public void onCheckedChanged(CompoundButton p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
index 636d3b2d..82a6f1e8 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
@@ -2,17 +2,15 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-
 import org.junit.Test;
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -21,28 +19,79 @@
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickMultipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import android.app.Activity;",
+        "import butterknife.OnClick;",
+        "public class Test extends Activity {",
+        "  @OnClick(1) void doStuff1() {}",
+        "  @OnClick(1) void doStuff2() {}",
+        "  @OnClick({1, 2}) void doStuff3(View v) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff1();",
+            "        target.doStuff2();",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -53,37 +102,40 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
+        "  @Bind(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -103,7 +155,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -116,53 +168,66 @@
         "import android.widget.TextView;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
+        "  interface TestInterface {}",
         "  @OnClick(0) void click0() {}",
         "  @OnClick(1) void click1(View view) {}",
         "  @OnClick(2) void click2(TextView view) {}",
         "  @OnClick(3) void click3(Button button) {}",
+        "  @OnClick(4) void click4(TestInterface thing) {}",
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import android.widget.Button;",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click0();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click1(p0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2((android.widget.TextView) p0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click2(finder.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3((android.widget.Button) p0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click3(finder.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click4(finder.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -179,40 +244,43 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -223,84 +291,88 @@
         "package test;",
         "import android.app.Activity;",
         "import butterknife.OnClick;",
-        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @Optional @OnClick(1) void doStuff() {}",
+        "  @interface Nullable {}",
+        "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
-            "    view = finder.findOptionalView(source, 1);",
+            "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
-            "      view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "        @Override public void doClick(android.view.View p0) {",
+            "      view.setOnClickListener(new DebouncingOnClickListener() {",
+            "        @Override public void doClick(View p0) {",
             "          target.doStuff();",
             "        }",
             "      });",
             "    }",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-
   @Test public void optionalAndRequiredSkipsNullCheck() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
-        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
-        "  @Optional @OnClick(1) void doStuff() {}",
+        "  @interface Nullable {}",
+        "  @Bind(1) View view;",
+        "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncedOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "    target.view = null;",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-
   @Test public void failsInJavaPackage() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package java.test;",
@@ -311,7 +383,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -328,7 +400,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -347,7 +419,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -365,7 +437,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -383,7 +455,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -401,7 +473,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnClick method arguments. (test.Test.doStuff)",
@@ -430,7 +502,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
@@ -447,7 +519,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
@@ -466,7 +538,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
index 93644da7..53cd6773 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnEditorActionTest {
   @Test public void editorAction() {
@@ -20,28 +20,32 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.KeyEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(android.widget.TextView p0, int p1, android.view.KeyEvent p2) {",
+            "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
+            "      @Override public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {",
             "        return target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
similarity index 63%
rename from butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
index 6c5f18be..077c8df2 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnFocusChangeTest {
   @Test public void focusChange() {
@@ -20,28 +20,30 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(android.view.View p0, boolean p1) {",
+            "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
+            "      @Override public void onFocusChange(View p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
new file mode 100644
index 00000000..99a4032c
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -0,0 +1,288 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
+public class OnItemClickTest {
+  @Test public void onItemClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends Activity {",
+        "  @OnItemClick(1) void doStuff() {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onItemClickBindingWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.AdapterView;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends Activity {",
+        "  @OnItemClick(1) void doStuff(",
+        "    AdapterView<?> parent,",
+        "    View view,",
+        "    int position,",
+        "    long id",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(p0, p1, p2, p3);",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubset() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends Activity {",
+        "  @OnItemClick(1) void doStuff(",
+        "    ListView parent,",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClick;",
+        "public class Test<T extends ListView> extends Activity {",
+        "  @OnItemClick(1) void doStuff(",
+        "    T parent,",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onClickRootViewBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.widget.ListView;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends ListView {",
+        "  @OnItemClick void doStuff() {}",
+        "  public Test(Context context) {",
+        "    super(context);",
+        "  }",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = target;",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends Activity {",
+        "  @OnItemClick({1, -1}) void doStuff() {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.AdapterView;",
+        "import butterknife.OnItemClick;",
+        "public class Test extends Activity {",
+        "  @OnItemClick(1) void doStuff(",
+        "    AdapterView<?> parent,",
+        "    View view,",
+        "    View whatIsThis",
+        "  ) {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(Joiner.on('\n').join(
+            "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
+            "  ",
+            "    Parameter #1: android.widget.AdapterView<?>",
+            "      matched listener parameter #1: android.widget.AdapterView<?>",
+            "  ",
+            "    Parameter #2: android.view.View",
+            "      matched listener parameter #2: android.view.View",
+            "  ",
+            "    Parameter #3: android.view.View",
+            "      did not match any listener parameters",
+            "  ",
+            "  Methods may have up to 4 parameter(s):",
+            "  ",
+            "    android.widget.AdapterView<?>",
+            "    android.view.View",
+            "    int",
+            "    long",
+            "  ",
+            "  These may be listed in any order but will be searched for from top to bottom."))
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
index 37e252a8..793a4848 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnItemLongClickTest {
   @Test public void itemLongClick() {
@@ -20,28 +20,31 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
+            "      @Override public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {",
             "        return target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
new file mode 100644
index 00000000..a8d10215
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -0,0 +1,208 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
+public class OnItemSelectedTest {
+  @Test public void defaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nonDefaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void allMethods() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1)",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void multipleBindingPermutation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected({ 1, 2 })",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
similarity index 68%
rename from butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
index 324ac311..fe30f62a 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -5,13 +5,12 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
 public class OnLongClickTest {
-  @Test public void onLongClickInjection() {
+  @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -22,29 +21,30 @@
         "  }",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(",
-            "      new android.view.View.OnLongClickListener() {",
-            "        @Override public boolean onLongClick(android.view.View p0) {",
-            "          return target.doStuff();",
-            "        }",
-            "      });",
+            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
+            "      @Override public boolean onLongClick(View p0) {",
+            "        return target.doStuff();",
+            "      }",
+            "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -62,7 +62,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
similarity index 68%
rename from butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
index 270f121f..e8f8bb1f 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnPageChangeTest {
   @Test public void pageChange() {
@@ -20,16 +20,19 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.support.v4.view.ViewPager;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
+            "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
             "      @Override public void onPageSelected(int p0) {",
             "        target.doStuff();",
             "      }",
@@ -39,13 +42,13 @@
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
similarity index 54%
rename from butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
index 09b816c5..184d9f7c 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -2,12 +2,12 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
 
 public class OnTextChangedTest {
   @Test public void textChanged() {
@@ -20,32 +20,38 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.text.Editable;",
+            "import android.text.TextWatcher;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.CharSequence;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
-            "      @Override public void onTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
+            "      @Override public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "        target.doStuff();",
             "      }",
-            "      @Override public void beforeTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "      @Override public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "      }",
-            "      @Override public void afterTextChanged(android.text.Editable p0) {",
+            "      @Override public void afterTextChanged(Editable p0) {",
             "      }",
             "    });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void unbind(T target) {",
             "  }",
             "}"
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
new file mode 100644
index 00000000..3fdde4d1
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
@@ -0,0 +1,70 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnTouchTest {
+  @Test public void touch() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnTouch;",
+        "public class Test extends Activity {",
+        "  @OnTouch(1) boolean doStuff() { return false; }",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.MotionEvent;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    view.setOnTouchListener(new View.OnTouchListener() {",
+            "      @Override public boolean onTouch(View p0, MotionEvent p1) {",
+            "        return target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnTouch;",
+        "public class Test extends Activity {",
+        "  @OnTouch(1) boolean doStuff1() {}",
+        "  @OnTouch(1) boolean doStuff2() {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
new file mode 100644
index 00000000..d7ff6277
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
@@ -0,0 +1,36 @@
+package butterknife.internal;
+
+import org.junit.Test;
+
+import static butterknife.internal.BindingClass.asHumanDescription;
+import static java.util.Arrays.asList;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class ViewBindingClassTest {
+  @Test public void humanDescriptionJoinWorks() {
+    ViewBinding one = new TestViewBinding("one");
+    ViewBinding two = new TestViewBinding("two");
+    ViewBinding three = new TestViewBinding("three");
+
+    String result1 = asHumanDescription(asList(one));
+    assertThat(result1).isEqualTo("one");
+
+    String result2 = asHumanDescription(asList(one, two));
+    assertThat(result2).isEqualTo("one and two");
+
+    String result3 = asHumanDescription(asList(one, two, three));
+    assertThat(result3).isEqualTo("one, two, and three");
+  }
+
+  private static class TestViewBinding implements ViewBinding {
+    private final String description;
+
+    private TestViewBinding(String description) {
+      this.description = description;
+    }
+
+    @Override public String getDescription() {
+      return description;
+    }
+  }
+}
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
index ef9efd7b..a61f6a42 100644
--- a/butterknife-sample/pom.xml
+++ b/butterknife-sample/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>5.1.3-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife-sample</artifactId>
@@ -19,6 +19,12 @@
       <artifactId>butterknife</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>com.jakewharton</groupId>
+      <artifactId>butterknife-compiler</artifactId>
+      <version>${project.version}</version>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
@@ -51,7 +57,7 @@
   <build>
     <plugins>
       <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+        <groupId>com.simpligility.maven.plugins</groupId>
         <artifactId>android-maven-plugin</artifactId>
         <extensions>true</extensions>
       </plugin>
diff --git a/butterknife-sample/AndroidManifest.xml b/butterknife-sample/src/main/AndroidManifest.xml
similarity index 100%
rename from butterknife-sample/AndroidManifest.xml
rename to butterknife-sample/src/main/AndroidManifest.xml
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 89fe3c13..5a0841f0 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -8,13 +8,14 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+
+import java.util.List;
+
+import butterknife.Bind;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
-import butterknife.InjectViews;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
-import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
@@ -29,17 +30,18 @@
     }
   };
 
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.hello) Button hello;
-  @InjectView(R.id.list_of_things) ListView listOfThings;
-  @InjectView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.hello) Button hello;
+  @Bind(R.id.list_of_things) ListView listOfThings;
+  @Bind(R.id.footer) TextView footer;
 
-  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
 
+
   @OnClick(R.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
@@ -57,11 +59,11 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
+    ButterKnife.bind(this);
 
-    // Contrived code to use the "injected" views.
+    // Contrived code to use the bound fields.
     title.setText("Butter Knife");
-    subtitle.setText("View \"injection\" for Android.");
+    subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
 
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index f5a00178..618065cd 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -7,7 +7,7 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
+import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,12 +51,12 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @InjectView(R.id.word) TextView word;
-    @InjectView(R.id.length) TextView length;
-    @InjectView(R.id.position) TextView position;
+    @Bind(R.id.word) TextView word;
+    @Bind(R.id.length) TextView length;
+    @Bind(R.id.position) TextView position;
 
     ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }
diff --git a/butterknife-sample/res/layout/simple_activity.xml b/butterknife-sample/src/main/res/layout/simple_activity.xml
similarity index 100%
rename from butterknife-sample/res/layout/simple_activity.xml
rename to butterknife-sample/src/main/res/layout/simple_activity.xml
diff --git a/butterknife-sample/res/layout/simple_list_item.xml b/butterknife-sample/src/main/res/layout/simple_list_item.xml
similarity index 100%
rename from butterknife-sample/res/layout/simple_list_item.xml
rename to butterknife-sample/src/main/res/layout/simple_list_item.xml
diff --git a/butterknife-sample/res/values/strings.xml b/butterknife-sample/src/main/res/values/strings.xml
similarity index 100%
rename from butterknife-sample/res/values/strings.xml
rename to butterknife-sample/src/main/res/values/strings.xml
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
index d4a2df8c..d94ed0d6 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
@@ -5,12 +5,14 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.ANDROID.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricTestRunner.class) //
+@Config(manifest = "src/main/AndroidManifest.xml")
 public class SimpleActivityTest {
-  @Test public void verifyContentViewInjection() {
+  @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
         .create() //
         .get();
@@ -21,7 +23,7 @@
     assertThat(activity.listOfThings).hasId(R.id.list_of_things);
     assertThat(activity.footer).hasId(R.id.footer);
 
-    ButterKnife.reset(activity);
+    ButterKnife.unbind(activity);
     assertThat(activity.title).isNull();
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
index be6a1450..092bb797 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
@@ -8,11 +8,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
 import static com.example.butterknife.SimpleAdapter.ViewHolder;
 import static org.fest.assertions.api.ANDROID.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(RobolectricTestRunner.class) //
+@Config(manifest = "src/main/AndroidManifest.xml")
 public class SimpleAdapterTest {
   @Test public void verifyViewHolderViews() {
     Context context = Robolectric.application;
@@ -24,7 +26,7 @@
     assertThat(holder.length).hasId(R.id.length);
     assertThat(holder.position).hasId(R.id.position);
 
-    ButterKnife.reset(holder);
+    ButterKnife.unbind(holder);
     assertThat(holder.word).isNull();
     assertThat(holder.length).isNull();
     assertThat(holder.position).isNull();
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
index 026170f9..49b920e9 100644
--- a/butterknife/pom.xml
+++ b/butterknife/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>5.1.3-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife</artifactId>
@@ -33,11 +33,6 @@
       <artifactId>robolectric</artifactId>
       <scope>test</scope>
     </dependency>
-    <dependency>
-      <groupId>com.google.testing.compile</groupId>
-      <artifactId>compile-testing</artifactId>
-      <scope>test</scope>
-    </dependency>
 
     <dependency>
       <groupId>com.google.android</groupId>
@@ -48,14 +43,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
diff --git a/butterknife/src/main/java/butterknife/InjectView.java b/butterknife/src/main/java/butterknife/Bind.java
similarity index 78%
rename from butterknife/src/main/java/butterknife/InjectView.java
rename to butterknife/src/main/java/butterknife/Bind.java
index 3d401071..2463353a 100644
--- a/butterknife/src/main/java/butterknife/InjectView.java
+++ b/butterknife/src/main/java/butterknife/Bind.java
@@ -10,13 +10,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}InjectView(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) TextView title;
  * </code></pre>
- *
- * @see Optional
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface InjectView {
+public @interface Bind {
   /** View ID to which the field will be bound. */
-  int value();
+  int[] value();
 }
diff --git a/butterknife/src/main/java/butterknife/BindArray.java b/butterknife/src/main/java/butterknife/BindArray.java
new file mode 100644
index 00000000..57992678
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindArray.java
@@ -0,0 +1,37 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified array resource ID. The type of array will be inferred from the
+ * annotated element.
+ *
+ * String array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.countries) String[] countries;
+ * </code></pre>
+ *
+ * Int array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.phones) int[] phones;
+ * </code></pre>
+ *
+ * Text array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * </code></pre>
+ *
+ * {@link android.content.res.TypedArray}:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindArray {
+  /** Array resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindBitmap.java b/butterknife/src/main/java/butterknife/BindBitmap.java
new file mode 100644
index 00000000..38cab362
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindBitmap.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import android.graphics.Bitmap;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBitmap {
+  /** Drawable resource ID from which the {@link Bitmap} will be created. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindBool.java b/butterknife/src/main/java/butterknife/BindBool.java
new file mode 100644
index 00000000..8793c582
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindBool.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified boolean resource ID.
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBool {
+  /** Boolean resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindColor.java b/butterknife/src/main/java/butterknife/BindColor.java
new file mode 100644
index 00000000..33ffd385
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindColor.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified color resource ID. Type can be {@code int} or
+ * {@link android.content.res.ColorStateList}.
+ * <pre><code>
+ * {@literal @}BindColor(R.color.background_green) int green;
+ * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindColor {
+  /** Color resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindDimen.java b/butterknife/src/main/java/butterknife/BindDimen.java
new file mode 100644
index 00000000..60682b21
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindDimen.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
+ * {@code float} for exact amount.
+ * <pre><code>
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDimen {
+  /** Dimension resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindDrawable.java b/butterknife/src/main/java/butterknife/BindDrawable.java
new file mode 100644
index 00000000..2fa48747
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindDrawable.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindDrawable(R.drawable.placeholder) Drawable placeholder;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDrawable {
+  /** Drawable resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindInt.java b/butterknife/src/main/java/butterknife/BindInt.java
new file mode 100644
index 00000000..ccfc20e8
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindInt.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified integer resource ID.
+ * <pre><code>
+ * {@literal @}BindInt(R.int.columns) int columns;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindInt {
+  /** Integer resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindString.java b/butterknife/src/main/java/butterknife/BindString.java
new file mode 100644
index 00000000..690f5af5
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindString.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindString {
+  /** String resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 3333d28e..2dbffb9d 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -3,46 +3,43 @@
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
+import android.content.Context;
 import android.os.Build;
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
-import butterknife.internal.ButterKnifeProcessor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
+
+import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;
-import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;
-
 /**
- * View "injection" utilities. Use this class to simplify finding views and attaching listeners by
- * injecting them.
+ * Field and method binding for Android views. Use this class to simplify finding views and
+ * attaching listeners by binding them with annotations.
  * <p>
- * Injecting views from your activity is as easy as:
+ * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}InjectView(R.id.title) EditText titleView;
- *   {@literal @}InjectView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}Bind(R.id.title) EditText titleView;
+ *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
  *     setContentView(R.layout.example_activity);
- *     ButterKnife.inject(this);
+ *     ButterKnife.bind(this);
  *   }
  * }
  * </code></pre>
- * Injection can be performed directly on an {@linkplain #inject(Activity) activity}, a
- * {@linkplain #inject(View) view}, or a {@linkplain #inject(Dialog) dialog}. Alternate objects to
- * inject can be specified along with an {@linkplain #inject(Object, Activity) activity},
- * {@linkplain #inject(Object, View) view}, or
- * {@linkplain #inject(Object, android.app.Dialog) dialog}.
+ * Binding can be performed directly on an {@linkplain #bind(Activity) activity}, a
+ * {@linkplain #bind(View) view}, or a {@linkplain #bind(Dialog) dialog}. Alternate objects to
+ * bind can be specified along with an {@linkplain #bind(Object, Activity) activity},
+ * {@linkplain #bind(Object, View) view}, or
+ * {@linkplain #bind(Object, android.app.Dialog) dialog}.
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -52,7 +49,7 @@
  * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
  * </ul>
  * <p>
- * To inject listeners to your views you can annotate your methods:
+ * To bind listeners to your views you can annotate your methods:
  * <pre><code>
  * {@literal @}OnClick(R.id.submit) void onSubmit() {
  *   // React to button click.
@@ -65,25 +62,18 @@
  * }
  * </code></pre>
  * <p>
- * Be default, views are required to be present in the layout for both field and method injections.
- * If a view is optional add the {@link Optional @Optional} annotation.
+ * Be default, views are required to be present in the layout for both field and method bindings.
+ * If a view is optional add a {@code @Nullable} annotation such as the one in the
+ * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
  * <pre><code>
- * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
+ * </code></pre>
+ * Resources can also be bound to fields to simplify programmatically working with views:
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
- *
- * @see InjectView
- * @see InjectViews
- * @see OnCheckedChanged
- * @see OnClick
- * @see OnEditorAction
- * @see OnFocusChange
- * @see OnItemClick
- * @see OnItemLongClick
- * @see OnItemSelected
- * @see OnLongClick
- * @see OnPageChange
- * @see OnTextChanged
- * @see OnTouch
  */
 public final class ButterKnife {
   private ButterKnife() {
@@ -91,44 +81,135 @@ private ButterKnife() {
   }
 
   /** DO NOT USE: Exposed for generated code. */
+  @SuppressWarnings("UnusedDeclaration") // Used by generated code.
   public enum Finder {
     VIEW {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((View) source).findViewById(id);
       }
+
+      @Override public Context getContext(Object source) {
+        return ((View) source).getContext();
+      }
+
+      @Override protected String getResourceEntryName(Object source, int id) {
+        final View view = (View) source;
+        // In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
+        if (view.isInEditMode()) {
+          return "<unavailable while editing>";
+        }
+        return super.getResourceEntryName(source, id);
+      }
     },
     ACTIVITY {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((Activity) source).findViewById(id);
       }
+
+      @Override public Context getContext(Object source) {
+        return (Activity) source;
+      }
     },
     DIALOG {
-      @Override public View findOptionalView(Object source, int id) {
+      @Override protected View findView(Object source, int id) {
         return ((Dialog) source).findViewById(id);
       }
+
+      @Override public Context getContext(Object source) {
+        return ((Dialog) source).getContext();
+      }
     };
 
-    public static <T extends View> T[] arrayOf(T... views) {
-      return views;
+    private static <T> T[] filterNull(T[] views) {
+      int end = 0;
+      for (int i = 0; i < views.length; i++) {
+        T view = views[i];
+        if (view != null) {
+          views[end++] = view;
+        }
+      }
+      return Arrays.copyOfRange(views, 0, end);
+    }
+
+    @SafeVarargs
+    public static <T> T[] arrayOf(T... views) {
+      return filterNull(views);
     }
 
-    public static <T extends View> List<T> listOf(T... views) {
-      return new ImmutableViewList<T>(views);
+    @SafeVarargs
+    public static <T> List<T> listOf(T... views) {
+      return new ImmutableList<>(filterNull(views));
     }
 
-    public View findRequiredView(Object source, int id, String who) {
-      View view = findOptionalView(source, id);
+    public <T> T findRequiredView(Object source, int id, String who) {
+      T view = findOptionalView(source, id, who);
       if (view == null) {
-        throw new IllegalStateException("Required view with id '"
+        String name = getResourceEntryName(source, id);
+        throw new IllegalStateException("Required view '"
+            + name
+            + "' with ID "
             + id
-            + "' for "
+            + " for "
             + who
-            + " was not found. If this view is optional add '@Optional' annotation.");
+            + " was not found. If this view is optional add '@Nullable' annotation.");
       }
       return view;
     }
 
-    public abstract View findOptionalView(Object source, int id);
+    public <T> T findOptionalView(Object source, int id, String who) {
+      View view = findView(source, id);
+      return castView(view, id, who);
+    }
+
+    @SuppressWarnings("unchecked") // That's the point.
+    public <T> T castView(View view, int id, String who) {
+      try {
+        return (T) view;
+      } catch (ClassCastException e) {
+        if (who == null) {
+          throw new AssertionError();
+        }
+        String name = getResourceEntryName(view, id);
+        throw new IllegalStateException("View '"
+            + name
+            + "' with ID "
+            + id
+            + " for "
+            + who
+            + " was of the wrong type. See cause for more info.", e);
+      }
+    }
+
+    @SuppressWarnings("unchecked") // That's the point.
+    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
+      try {
+        return (T) value;
+      } catch (ClassCastException e) {
+        throw new IllegalStateException("Parameter #"
+            + (fromPosition + 1)
+            + " of method '"
+            + from
+            + "' was of the wrong type for parameter #"
+            + (toPosition + 1)
+            + " of method '"
+            + to
+            + "'. See cause for more info.", e);
+      }
+    }
+
+    protected String getResourceEntryName(Object source, int id) {
+      return getContext(source).getResources().getResourceEntryName(id);
+    }
+
+    protected abstract View findView(Object source, int id);
+
+    public abstract Context getContext(Object source);
+  }
+
+  /** DO NOT USE: Exposed for generated code. */
+  public interface ViewBinder<T> {
+    void bind(Finder finder, T target, Object source);
+    void unbind(T target);
   }
 
   /** An action that can be applied to a list of views. */
@@ -146,9 +227,11 @@ public View findRequiredView(Object source, int id, String who) {
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, Method> INJECTORS = new LinkedHashMap<Class<?>, Method>();
-  static final Map<Class<?>, Method> RESETTERS = new LinkedHashMap<Class<?>, Method>();
-  static final Method NO_OP = null;
+  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
+  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
+    @Override public void bind(Finder finder, Object target, Object source) { }
+    @Override public void unbind(Object target) { }
+  };
 
   /** Control whether debug logging is enabled. */
   public static void setDebug(boolean debug) {
@@ -156,158 +239,124 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Activity}. The current content
+   * Bind annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
-   * @param target Target activity for field injection.
+   * @param target Target activity for view binding.
    */
-  public static void inject(Activity target) {
-    inject(target, target, Finder.ACTIVITY);
+  public static void bind(Activity target) {
+    bind(target, target, Finder.ACTIVITY);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link View}. The view and its children
+   * Bind annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
-   * @param target Target view for field injection.
+   * @param target Target view for view binding.
    */
-  public static void inject(View target) {
-    inject(target, target, Finder.VIEW);
+  public static void bind(View target) {
+    bind(target, target, Finder.VIEW);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Dialog}. The current content
+   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
-   * @param target Target dialog for field injection.
+   * @param target Target dialog for view binding.
    */
-  public static void inject(Dialog target) {
-    inject(target, target, Finder.DIALOG);
+  public static void bind(Dialog target) {
+    bind(target, target, Finder.DIALOG);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
-  public static void inject(Object target, Activity source) {
-    inject(target, source, Finder.ACTIVITY);
+  public static void bind(Object target, Activity source) {
+    bind(target, source, Finder.ACTIVITY);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source View root on which IDs will be looked up.
    */
-  public static void inject(Object target, View source) {
-    inject(target, source, Finder.VIEW);
+  public static void bind(Object target, View source) {
+    bind(target, source, Finder.VIEW);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Dialog on which IDs will be looked up.
    */
-  public static void inject(Object target, Dialog source) {
-    inject(target, source, Finder.DIALOG);
+  public static void bind(Object target, Dialog source) {
+    bind(target, source, Finder.DIALOG);
   }
 
   /**
-   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}
-   * to {@code null}.
+   * Reset fields annotated with {@link Bind @Bind} to {@code null}.
    * <p>
    * This should only be used in the {@code onDestroyView} method of a fragment.
    *
-   * @param target Target class for field reset.
+   * @param target Target class for field unbind.
    */
-  public static void reset(Object target) {
+  public static void unbind(Object target) {
     Class<?> targetClass = target.getClass();
     try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Method reset = findResettersForClass(targetClass);
-      if (reset != null) {
-        reset.invoke(null, target);
+      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+      if (viewBinder != null) {
+        viewBinder.unbind(target);
       }
-    } catch (RuntimeException e) {
-      throw e;
     } catch (Exception e) {
-      Throwable t = e;
-      if (t instanceof InvocationTargetException) {
-        t = t.getCause();
-      }
-      throw new RuntimeException("Unable to reset views for " + target, t);
+      throw new RuntimeException("Unable to unbind views for " + targetClass.getName(), e);
     }
   }
 
-  static void inject(Object target, Object source, Finder finder) {
+  static void bind(Object target, Object source, Finder finder) {
     Class<?> targetClass = target.getClass();
     try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Method inject = findInjectorForClass(targetClass);
-      if (inject != null) {
-        inject.invoke(null, finder, target, source);
+      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+      if (viewBinder != null) {
+        viewBinder.bind(finder, target, source);
       }
-    } catch (RuntimeException e) {
-      throw e;
     } catch (Exception e) {
-      Throwable t = e;
-      if (t instanceof InvocationTargetException) {
-        t = t.getCause();
-      }
-      throw new RuntimeException("Unable to inject views for " + target, t);
+      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
     }
   }
 
-  private static Method findInjectorForClass(Class<?> cls) throws NoSuchMethodException {
-    Method inject = INJECTORS.get(cls);
-    if (inject != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in injector map.");
-      return inject;
+  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
+      throws IllegalAccessException, InstantiationException {
+    ViewBinder<Object> viewBinder = BINDERS.get(cls);
+    if (viewBinder != null) {
+      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
+      return viewBinder;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NO_OP;
+      return NOP_VIEW_BINDER;
     }
     try {
-      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
-      inject = injector.getMethod("inject", Finder.class, cls, Object.class);
-      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");
+      Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
+      //noinspection unchecked
+      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
+      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      inject = findInjectorForClass(cls.getSuperclass());
+      viewBinder = findViewBinderForClass(cls.getSuperclass());
     }
-    INJECTORS.put(cls, inject);
-    return inject;
-  }
-
-  private static Method findResettersForClass(Class<?> cls) throws NoSuchMethodException {
-    Method inject = RESETTERS.get(cls);
-    if (inject != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in injector map.");
-      return inject;
-    }
-    String clsName = cls.getName();
-    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
-      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NO_OP;
-    }
-    try {
-      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
-      inject = injector.getMethod("reset", cls);
-      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");
-    } catch (ClassNotFoundException e) {
-      if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      inject = findResettersForClass(cls.getSuperclass());
-    }
-    RESETTERS.put(cls, inject);
-    return inject;
+    BINDERS.put(cls, viewBinder);
+    return viewBinder;
   }
 
   /** Apply the specified {@code action} across the {@code list} of views. */
@@ -347,4 +396,10 @@ private static Method findResettersForClass(Class<?> cls) throws NoSuchMethodExc
   public static <T extends View> T findById(Activity activity, int id) {
     return (T) activity.findViewById(id);
   }
+
+  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
+  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
+  public static <T extends View> T findById(Dialog dialog, int id) {
+    return (T) dialog.findViewById(id);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/ImmutableViewList.java b/butterknife/src/main/java/butterknife/ImmutableList.java
similarity index 74%
rename from butterknife/src/main/java/butterknife/ImmutableViewList.java
rename to butterknife/src/main/java/butterknife/ImmutableList.java
index 399a3671..3c3d07fa 100644
--- a/butterknife/src/main/java/butterknife/ImmutableViewList.java
+++ b/butterknife/src/main/java/butterknife/ImmutableList.java
@@ -1,6 +1,5 @@
 package butterknife;
 
-import android.view.View;
 import java.util.AbstractList;
 import java.util.RandomAccess;
 
@@ -8,10 +7,10 @@
  * An immutable list of views which is lighter than {@code
  * Collections.unmodifiableList(new ArrayList<>(Arrays.asList(foo, bar)))}.
  */
-final class ImmutableViewList<T extends View> extends AbstractList<T> implements RandomAccess {
+final class ImmutableList<T> extends AbstractList<T> implements RandomAccess {
   private final T[] views;
 
-  ImmutableViewList(T[] views) {
+  ImmutableList(T[] views) {
     this.views = views;
   }
 
@@ -24,7 +23,7 @@
   }
 
   @Override public boolean contains(Object o) {
-    for (View view : views) {
+    for (T view : views) {
       if (view == o) {
         return true;
       }
diff --git a/butterknife/src/main/java/butterknife/InjectViews.java b/butterknife/src/main/java/butterknife/InjectViews.java
deleted file mode 100644
index 0a5145f6..00000000
--- a/butterknife/src/main/java/butterknife/InjectViews.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.util.List;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
- * automatically be cast to the list or array type.
- * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
- * List&lt;TextView&gt; nameViews;
- *
- * {@literal @}InjectViews({R.id.address_line_1, R.id.address_line_2})
- * EditText[] addressViews;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface InjectViews {
-  /** View IDs to which the field will be bound. */
-  int[] value();
-}
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index 787c7cb1..198a5c8d 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,7 +15,7 @@
  * each ID specified.
  * <pre><code>
  * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
- *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -22,7 +23,6 @@
  * onCheckedChanged} may be used on the method.
  *
  * @see OnCheckedChangeListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -40,5 +40,5 @@
 )
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife/src/main/java/butterknife/OnClick.java
index d8faee5b..6f9aaef2 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife/src/main/java/butterknife/OnClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -13,7 +14,7 @@
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnClick(R.id.example) void onClick() {
- *   Toast.makeText(this, "Clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -21,14 +22,13 @@
  * method.
  *
  * @see OnClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnClickListener",
-    type = "butterknife.internal.DebouncedOnClickListener",
+    type = "butterknife.internal.DebouncingOnClickListener",
     method = @ListenerMethod(
         name = "doClick",
         parameters = "android.view.View"
@@ -36,5 +36,5 @@
 )
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index ab3be7f5..922e588d 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
- *   Toast.makeText(this, "Pressed: " + key, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Pressed: " + key, Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -23,7 +24,6 @@
  * onEditorAction} may be used on the method.
  *
  * @see OnEditorActionListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -44,5 +44,5 @@
 )
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife/src/main/java/butterknife/OnFocusChange.java
index 060b2c2d..075b5206 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife/src/main/java/butterknife/OnFocusChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -13,15 +14,14 @@
  * Bind a method to an {@link OnFocusChangeListener OnFocusChangeListener} on the view for each ID
  * specified.
  * <pre><code>
- * {@literal @}OnFocusChanged(R.id.example) void onFocusChanged(boolean focused) {
- *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", LENGTH_SHORT).show();
+ * {@literal @}OnFocusChange(R.id.example) void onFocusChanged(boolean focused) {
+ *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnFocusChangeListener#onFocusChange(android.view.View,
  * boolean) onFocusChange} may be used on the method.
  *
  * @see OnFocusChangeListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -39,5 +39,5 @@
 )
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife/src/main/java/butterknife/OnItemClick.java
index 367c3fc7..36d4536b 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,14 +15,13 @@
  * specified.
  * <pre><code>
  * {@literal @}OnItemClick(R.id.example_list) void onItemClick(int position) {
- *   Toast.makeText(this, "Clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnItemClickListener#onItemClick(android.widget.AdapterView,
  * android.view.View, int, long) onItemClick} may be used on the method.
  *
  * @see OnItemClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -41,5 +41,5 @@
 )
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife/src/main/java/butterknife/OnItemLongClick.java
index 88632eab..f6ef8e6d 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemLongClick(R.id.example_list) boolean onItemLongClick(int position) {
- *   Toast.makeText(this, "Long clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -23,7 +24,6 @@
  * int, long) onItemLongClick} may be used on the method.
  *
  * @see OnItemLongClickListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -45,5 +45,5 @@
 )
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife/src/main/java/butterknife/OnItemSelected.java
index a19964ce..942fa724 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife/src/main/java/butterknife/OnItemSelected.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemSelected(R.id.example_list) void onItemSelected(int position) {
- *   Toast.makeText(this, "Selected position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -25,12 +26,11 @@
  * <pre><code>
  * {@literal @}OnItemSelected(value = R.id.example_list, callback = NOTHING_SELECTED)
  * void onNothingSelected() {
- *   Toast.makeText(this, "Nothing selected!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Nothing selected!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
  * @see OnItemSelectedListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -42,7 +42,7 @@
 )
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife/src/main/java/butterknife/OnLongClick.java
index 422864e0..2ebc6c41 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -14,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnLongClick(R.id.example) boolean onLongClick() {
- *   Toast.makeText(this, "Long clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -22,7 +23,6 @@
  * used on the method.
  *
  * @see OnLongClickListener
- * @see Optional
  */
 @Retention(CLASS) @Target(METHOD)
 @ListenerClass(
@@ -40,5 +40,5 @@
 )
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife/src/main/java/butterknife/OnPageChange.java
index 19ad3874..8c7e2a1e 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife/src/main/java/butterknife/OnPageChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -12,7 +13,7 @@
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnPageChange(R.id.example_pager) void onPageSelected(int position) {
- *   Toast.makeText(this, "Selected " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@code onPageSelected} may be used on the method.
@@ -21,11 +22,9 @@
  * <pre><code>
  * {@literal @}OnPageChange(value = R.id.example_pager, callback = PAGE_SCROLL_STATE_CHANGED)
  * void onPageStateChanged(int state) {
- *   Toast.makeText(this, "State changed: " + state + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "State changed: " + state + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
- *
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -37,7 +36,7 @@
 )
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife/src/main/java/butterknife/OnTextChanged.java
index 7889180c..7302bd6c 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife/src/main/java/butterknife/OnTextChanged.java
@@ -1,6 +1,7 @@
 package butterknife;
 
 import android.text.TextWatcher;
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -13,7 +14,7 @@
  * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link TextWatcher#onTextChanged(CharSequence, int, int, int)
@@ -22,13 +23,12 @@
  * To bind to methods other than {@code onTextChanged}, specify a different {@code callback}.
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
- * void onBeforeTextChanged(CharSequence text {
- *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
+ * void onBeforeTextChanged(CharSequence text) {
+ *   Toast.makeText(this, "Before text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
  * @see TextWatcher
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -40,7 +40,7 @@
 )
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife/src/main/java/butterknife/OnTouch.java
index daf917d6..144240c5 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife/src/main/java/butterknife/OnTouch.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -12,8 +13,9 @@
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTouch(R.id.example) void onTouch() {
- *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ * {@literal @}OnTouch(R.id.example) boolean onTouch() {
+ *   Toast.makeText(this, "Touched!", Toast.LENGTH_SHORT).show();
+ *   return false;
  * }
  * </code></pre>
  * Any number of parameters from
@@ -21,7 +23,6 @@
  * on the method.
  *
  * @see OnTouchListener
- * @see Optional
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -41,5 +42,5 @@
 )
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
-  int[] value();
+  int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/Optional.java b/butterknife/src/main/java/butterknife/Optional.java
deleted file mode 100644
index 8299e22a..00000000
--- a/butterknife/src/main/java/butterknife/Optional.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Denote that the view specified by the injection is not required to be present.
- * <pre><code>
- * {@literal @}Optional @InjectView(R.id.title) TextView subtitleView;
- * </code></pre>
- */
-@Retention(CLASS) @Target({ FIELD, METHOD })
-public @interface Optional {
-}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
deleted file mode 100644
index 9eb91d7d..00000000
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ /dev/null
@@ -1,619 +0,0 @@
-package butterknife.internal;
-
-import butterknife.InjectView;
-import butterknife.InjectViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.Filer;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.annotation.processing.RoundEnvironment;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.ArrayType;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import javax.tools.JavaFileObject;
-
-import static javax.lang.model.element.ElementKind.CLASS;
-import static javax.lang.model.element.ElementKind.METHOD;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.STATIC;
-import static javax.tools.Diagnostic.Kind.ERROR;
-
-public final class ButterKnifeProcessor extends AbstractProcessor {
-  public static final String SUFFIX = "$$ViewInjector";
-  public static final String ANDROID_PREFIX = "android.";
-  public static final String JAVA_PREFIX = "java.";
-  static final String VIEW_TYPE = "android.view.View";
-  private static final String LIST_TYPE = List.class.getCanonicalName();
-  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
-      OnCheckedChanged.class, //
-      OnClick.class, //
-      OnEditorAction.class, //
-      OnFocusChange.class, //
-      OnItemClick.class, //
-      OnItemLongClick.class, //
-      OnItemSelected.class, //
-      OnLongClick.class, //
-      OnPageChange.class, //
-      OnTextChanged.class, //
-      OnTouch.class //
-  );
-
-  private Elements elementUtils;
-  private Types typeUtils;
-  private Filer filer;
-
-  @Override public synchronized void init(ProcessingEnvironment env) {
-    super.init(env);
-
-    elementUtils = env.getElementUtils();
-    typeUtils = env.getTypeUtils();
-    filer = env.getFiler();
-  }
-
-  @Override public Set<String> getSupportedAnnotationTypes() {
-    Set<String> supportTypes = new LinkedHashSet<String>();
-    supportTypes.add(InjectView.class.getCanonicalName());
-    supportTypes.add(InjectViews.class.getCanonicalName());
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      supportTypes.add(listener.getCanonicalName());
-    }
-
-    return supportTypes;
-  }
-
-  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);
-
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
-      TypeElement typeElement = entry.getKey();
-      ViewInjector viewInjector = entry.getValue();
-
-      try {
-        JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);
-        Writer writer = jfo.openWriter();
-        writer.write(viewInjector.brewJava());
-        writer.flush();
-        writer.close();
-      } catch (IOException e) {
-        error(typeElement, "Unable to write injector for type %s: %s", typeElement, e.getMessage());
-      }
-    }
-
-    return true;
-  }
-
-  private Map<TypeElement, ViewInjector> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = new LinkedHashMap<TypeElement, ViewInjector>();
-    Set<String> erasedTargetNames = new LinkedHashSet<String>();
-
-    // Process each @InjectView element.
-    for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {
-      try {
-        parseInjectView(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @InjectView.\n\n%s", stackTrace);
-      }
-    }
-
-    // Process each @InjectViews element.
-    for (Element element : env.getElementsAnnotatedWith(InjectViews.class)) {
-      try {
-        parseInjectViews(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @InjectViews.\n\n%s", stackTrace);
-      }
-    }
-
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
-    }
-
-    // Try to find a parent injector for each injector.
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
-      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
-      if (parentClassFqcn != null) {
-        entry.getValue().setParentInjector(parentClassFqcn + SUFFIX);
-      }
-    }
-
-    return targetClassMap;
-  }
-
-  private boolean isValidForGeneratedCode(Class<? extends Annotation> annotationClass,
-      String targetThing, Element element) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify method modifiers.
-    Set<Modifier> modifiers = element.getModifiers();
-    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
-      error(element, "@%s %s must not be private or static. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing type.
-    if (enclosingElement.getKind() != CLASS) {
-      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing class visibility is not private.
-    if (enclosingElement.getModifiers().contains(PRIVATE)) {
-      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    return hasError;
-  }
-
-  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
-      Element element) {
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-    String qualifiedName = enclosingElement.getQualifiedName().toString();
-
-    if (qualifiedName.startsWith(ANDROID_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-    if (qualifiedName.startsWith(JAVA_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-
-    return false;
-  }
-
-  private void parseInjectView(Element element, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type extends from View.
-    TypeMirror elementType = element.asType();
-    if (elementType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) elementType;
-      elementType = typeVariable.getUpperBound();
-    }
-    if (!isSubtypeOfType(elementType, VIEW_TYPE)) {
-      error(element, "@InjectView fields must extend from View. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isValidForGeneratedCode(InjectView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectView.class, element);
-
-    // Check for the other field annotation.
-    if (element.getAnnotation(InjectViews.class) != null) {
-      error(element, "Only one of @InjectView and @InjectViews is allowed. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the injection point.
-    String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(InjectView.class).value();
-    String type = elementType.toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
-
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    ViewBinding binding = new ViewBinding(name, type, required);
-    viewInjector.addView(id, binding);
-
-    // Add the type-erased version to the valid injection targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the type is a List or an array.
-    TypeMirror elementType = element.asType();
-    String erasedType = doubleErasure(elementType);
-    TypeMirror viewType = null;
-    CollectionBinding.Kind kind = null;
-    if (elementType.getKind() == TypeKind.ARRAY) {
-      ArrayType arrayType = (ArrayType) elementType;
-      viewType = arrayType.getComponentType();
-      kind = CollectionBinding.Kind.ARRAY;
-    } else if (LIST_TYPE.equals(erasedType)) {
-      DeclaredType declaredType = (DeclaredType) elementType;
-      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-      if (typeArguments.size() != 1) {
-        error(element, "@InjectViews List must have a generic component. (%s.%s)",
-            enclosingElement.getQualifiedName(), element.getSimpleName());
-        hasError = true;
-      } else {
-        viewType = typeArguments.get(0);
-      }
-      kind = CollectionBinding.Kind.LIST;
-    } else {
-      error(element, "@InjectViews must be a List or array. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-    if (viewType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) viewType;
-      viewType = typeVariable.getUpperBound();
-    }
-
-    // Verify that the target type extends from View.
-    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE)) {
-      error(element, "@InjectViews type must extend from View. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isValidForGeneratedCode(InjectViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectViews.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the injection point.
-    String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(InjectViews.class).value();
-    if (ids.length == 0) {
-      error(element, "@InjectViews must specify at least one ID. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      return;
-    }
-
-    assert viewType != null; // Always false as hasError would have been true.
-    String type = viewType.toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
-
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    CollectionBinding binding = new CollectionBinding(name, type, kind, required);
-    viewInjector.addCollection(ids, binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
-  private String doubleErasure(TypeMirror elementType) {
-    String name = typeUtils.erasure(elementType).toString();
-    int typeParamStart = name.indexOf('<');
-    if (typeParamStart != -1) {
-      name = name.substring(0, typeParamStart);
-    }
-    return name;
-  }
-
-  private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
-      try {
-        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @%s.\n\n%s",
-            annotationClass.getSimpleName(), stackTrace.toString());
-      }
-    }
-  }
-
-  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames)
-      throws Exception {
-    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
-    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
-      throw new IllegalStateException(
-          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
-    }
-
-    ExecutableElement executableElement = (ExecutableElement) element;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Assemble information on the injection point.
-    Annotation annotation = element.getAnnotation(annotationClass);
-    Method annotationValue = annotationClass.getDeclaredMethod("value");
-    if (annotationValue.getReturnType() != int[].class) {
-      throw new IllegalStateException(
-          String.format("@%s annotation value() type not int[].", annotationClass));
-    }
-
-    int[] ids = (int[]) annotationValue.invoke(annotation);
-    String name = executableElement.getSimpleName().toString();
-    boolean required = element.getAnnotation(Optional.class) == null;
-
-    // Verify that the method and its containing class are accessible via generated code.
-    boolean hasError = isValidForGeneratedCode(annotationClass, "methods", element);
-    hasError |= isBindingInWrongPackage(annotationClass, element);
-
-    Set<Integer> seenIds = new LinkedHashSet<Integer>();
-    for (int id : ids) {
-      if (!seenIds.add(id)) {
-        error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
-            annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
-            element.getSimpleName());
-        hasError = true;
-      }
-    }
-
-    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
-    if (listener == null) {
-      throw new IllegalStateException(
-          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
-              annotationClass.getSimpleName()));
-    }
-
-    ListenerMethod method;
-    ListenerMethod[] methods = listener.method();
-    if (methods.length > 1) {
-      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
-          annotationClass.getSimpleName()));
-    } else if (methods.length == 1) {
-      if (listener.callbacks() != ListenerClass.NONE.class) {
-        throw new IllegalStateException(
-            String.format("Both method() and callback() defined on @%s.",
-                annotationClass.getSimpleName()));
-      }
-      method = methods[0];
-    } else {
-      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
-      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
-      Field callbackField = callback.getDeclaringClass().getField(callback.name());
-      method = callbackField.getAnnotation(ListenerMethod.class);
-      if (method == null) {
-        throw new IllegalStateException(
-            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
-                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
-                callback.name()));
-      }
-    }
-
-    // Verify that the method has equal to or less than the number of parameters as the listener.
-    List<? extends VariableElement> methodParameters = executableElement.getParameters();
-    if (methodParameters.size() > method.parameters().length) {
-      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
-          annotationClass.getSimpleName(), method.parameters().length,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify method return type matches the listener.
-    TypeMirror returnType = executableElement.getReturnType();
-    if (returnType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) returnType;
-      returnType = typeVariable.getUpperBound();
-    }
-    if (!returnType.toString().equals(method.returnType())) {
-      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
-          annotationClass.getSimpleName(), method.returnType(),
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    Parameter[] parameters = Parameter.NONE;
-    if (!methodParameters.isEmpty()) {
-      parameters = new Parameter[methodParameters.size()];
-      BitSet methodParameterUsed = new BitSet(methodParameters.size());
-      String[] parameterTypes = method.parameters();
-      for (int i = 0; i < methodParameters.size(); i++) {
-        VariableElement methodParameter = methodParameters.get(i);
-        TypeMirror methodParameterType = methodParameter.asType();
-        if (methodParameterType instanceof TypeVariable) {
-          TypeVariable typeVariable = (TypeVariable) methodParameterType;
-          methodParameterType = typeVariable.getUpperBound();
-        }
-
-        for (int j = 0; j < parameterTypes.length; j++) {
-          if (methodParameterUsed.get(j)) {
-            continue;
-          }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])) {
-            parameters[i] = new Parameter(j, methodParameterType.toString());
-            methodParameterUsed.set(j);
-            break;
-          }
-        }
-        if (parameters[i] == null) {
-          StringBuilder builder = new StringBuilder();
-          builder.append("Unable to match @")
-              .append(annotationClass.getSimpleName())
-              .append(" method arguments. (")
-              .append(enclosingElement.getQualifiedName())
-              .append('.')
-              .append(element.getSimpleName())
-              .append(')');
-          for (int j = 0; j < parameters.length; j++) {
-            Parameter parameter = parameters[j];
-            builder.append("\n\n  Parameter #")
-                .append(j + 1)
-                .append(": ")
-                .append(methodParameters.get(j).asType().toString())
-                .append("\n    ");
-            if (parameter == null) {
-              builder.append("did not match any listener parameters");
-            } else {
-              builder.append("matched listener parameter #")
-                  .append(parameter.getListenerPosition() + 1)
-                  .append(": ")
-                  .append(parameter.getType());
-            }
-          }
-          builder.append("\n\nMethods may have up to ")
-              .append(method.parameters().length)
-              .append(" parameter(s):\n");
-          for (String parameterType : method.parameters()) {
-            builder.append("\n  ").append(parameterType);
-          }
-          builder.append(
-              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
-          error(executableElement, builder.toString());
-          return;
-        }
-      }
-    }
-
-    ListenerBinding binding = new ListenerBinding(name, Arrays.asList(parameters), required);
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    for (int id : ids) {
-      if (!viewInjector.addListener(id, listener, method, binding)) {
-        error(element, "Multiple @%s methods declared for ID %s in %s.",
-            annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName());
-        return;
-      }
-    }
-
-    // Add the type-erased version to the valid injection targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
-    if (otherType.equals(typeMirror.toString())) {
-      return true;
-    }
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    DeclaredType declaredType = (DeclaredType) typeMirror;
-    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-    if (typeArguments.size() > 0) {
-      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
-      typeString.append('<');
-      for (int i = 0; i < typeArguments.size(); i++) {
-        if (i > 0) {
-          typeString.append(',');
-        }
-        typeString.append('?');
-      }
-      typeString.append('>');
-      if (typeString.toString().equals(otherType)) {
-        return true;
-      }
-    }
-    Element element = declaredType.asElement();
-    if (!(element instanceof TypeElement)) {
-      return false;
-    }
-    TypeElement typeElement = (TypeElement) element;
-    TypeMirror superType = typeElement.getSuperclass();
-    if (isSubtypeOfType(superType, otherType)) {
-      return true;
-    }
-    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
-      if (isSubtypeOfType(interfaceType, otherType)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private ViewInjector getOrCreateTargetClass(Map<TypeElement, ViewInjector> targetClassMap,
-      TypeElement enclosingElement) {
-    ViewInjector viewInjector = targetClassMap.get(enclosingElement);
-    if (viewInjector == null) {
-      String targetType = enclosingElement.getQualifiedName().toString();
-      String classPackage = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, classPackage) + SUFFIX;
-
-      viewInjector = new ViewInjector(classPackage, className, targetType);
-      targetClassMap.put(enclosingElement, viewInjector);
-    }
-    return viewInjector;
-  }
-
-  private static String getClassName(TypeElement type, String packageName) {
-    int packageLen = packageName.length() + 1;
-    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
-  }
-
-  /** Finds the parent injector type in the supplied set, if any. */
-  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
-    TypeMirror type;
-    while (true) {
-      type = typeElement.getSuperclass();
-      if (type.getKind() == TypeKind.NONE) {
-        return null;
-      }
-      typeElement = (TypeElement) ((DeclaredType) type).asElement();
-      if (parents.contains(typeElement.toString())) {
-        String packageName = getPackageName(typeElement);
-        return packageName + "." + getClassName(typeElement, packageName);
-      }
-    }
-  }
-
-  @Override public SourceVersion getSupportedSourceVersion() {
-    return SourceVersion.latestSupported();
-  }
-
-  private void error(Element element, String message, Object... args) {
-    if (args.length > 0) {
-      message = String.format(message, args);
-    }
-    processingEnv.getMessager().printMessage(ERROR, message, element);
-  }
-
-  private String getPackageName(TypeElement type) {
-    return elementUtils.getPackageOf(type).getQualifiedName().toString();
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncedOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncedOnClickListener.java
deleted file mode 100644
index 9117f0ed..00000000
--- a/butterknife/src/main/java/butterknife/internal/DebouncedOnClickListener.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-
-/**
- * A {@link View.OnClickListener} that enables debouncing of multiple clicks posted in a row.
- *
- * Once a click is fired, a post is enqueued to the main thread looper queue and no further click
- * is allowed until that post is dequeued.
- *
- * A click on one button disables all buttons.
- *
- */
-public abstract class DebouncedOnClickListener implements View.OnClickListener {
-
-  /**
-   * This is static because we want to disable clicks for all click listeners.
-   */
-  private static boolean enabled = true;
-
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
-
-  @Override public final void onClick(View v) {
-    if (enabled) {
-      enabled = false;
-      v.post(ENABLE_AGAIN);
-      doClick(v);
-    }
-  }
-
-  public abstract void doClick(View v);
-}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
new file mode 100644
index 00000000..c9c73a84
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -0,0 +1,27 @@
+package butterknife.internal;
+
+import android.view.View;
+
+/**
+ * A {@linkplain View.OnClickListener click listener} that debounces multiple clicks posted in the
+ * same frame. A click on one button disables all buttons for that frame.
+ */
+public abstract class DebouncingOnClickListener implements View.OnClickListener {
+  private static boolean enabled = true;
+
+  private static final Runnable ENABLE_AGAIN = new Runnable() {
+    @Override public void run() {
+      enabled = true;
+    }
+  };
+
+  @Override public final void onClick(View v) {
+    if (enabled) {
+      enabled = false;
+      v.post(ENABLE_AGAIN);
+      doClick(v);
+    }
+  }
+
+  public abstract void doClick(View v);
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerClass.java b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
index 1c992c2f..82101cc5 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
@@ -16,9 +16,6 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  /** The number of generic arguments for the type. This used used for casting the view. */
-  int genericArguments() default 0;
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
index 31ab24f0..ca62d675 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
@@ -14,7 +14,7 @@
   /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
   String[] parameters() default { };
 
-  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  /** Primitive or fully-qualified return type of the listener method. May also be {@code void}. */
   String returnType() default "void";
 
   /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjection.java b/butterknife/src/main/java/butterknife/internal/ViewInjection.java
deleted file mode 100644
index b83c4c32..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewInjection.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package butterknife.internal;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class ViewInjection {
-  private final int id;
-  private final Set<ViewBinding> viewBindings = new LinkedHashSet<ViewBinding>();
-  private final Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> listenerBindings =
-      new LinkedHashMap<ListenerClass, Map<ListenerMethod, ListenerBinding>>();
-
-  ViewInjection(int id) {
-    this.id = id;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public Collection<ViewBinding> getViewBindings() {
-    return viewBindings;
-  }
-
-  public Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> getListenerBindings() {
-    return listenerBindings;
-  }
-
-  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, ListenerBinding> methods = listenerBindings.get(listener);
-    return methods != null && methods.containsKey(method);
-  }
-
-  public void addListenerBinding(ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    Map<ListenerMethod, ListenerBinding> methods = listenerBindings.get(listener);
-    if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, ListenerBinding>();
-      listenerBindings.put(listener, methods);
-    }
-    ListenerBinding existing = methods.get(method);
-    if (existing != null) {
-      throw new IllegalStateException("View "
-          + id
-          + " already has listener binding for "
-          + listener.type()
-          + "."
-          + method.name()
-          + " on "
-          + existing.getDescription());
-    }
-    methods.put(method, binding);
-  }
-
-  public void addViewBinding(ViewBinding viewBinding) {
-    viewBindings.add(viewBinding);
-  }
-
-  public List<Binding> getRequiredBindings() {
-    List<Binding> requiredBindings = new ArrayList<Binding>();
-    for (ViewBinding viewBinding : viewBindings) {
-      if (viewBinding.isRequired()) {
-        requiredBindings.add(viewBinding);
-      }
-    }
-    for (Map<ListenerMethod, ListenerBinding> methodBinding : listenerBindings.values()) {
-      for (ListenerBinding binding : methodBinding.values()) {
-        if (binding.isRequired()) {
-          requiredBindings.add(binding);
-        }
-      }
-    }
-    return requiredBindings;
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
deleted file mode 100644
index ff4f9c99..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ /dev/null
@@ -1,371 +0,0 @@
-package butterknife.internal;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
-
-final class ViewInjector {
-  private final Map<Integer, ViewInjection> viewIdMap = new LinkedHashMap<Integer, ViewInjection>();
-  private final Map<CollectionBinding, int[]> collectionBindings =
-      new LinkedHashMap<CollectionBinding, int[]>();
-  private final String classPackage;
-  private final String className;
-  private final String targetClass;
-  private String parentInjector;
-
-  ViewInjector(String classPackage, String className, String targetClass) {
-    this.classPackage = classPackage;
-    this.className = className;
-    this.targetClass = targetClass;
-  }
-
-  void addView(int id, ViewBinding binding) {
-    getOrCreateViewInjection(id).addViewBinding(binding);
-  }
-
-  boolean addListener(int id, ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    ViewInjection viewInjection = getOrCreateViewInjection(id);
-    if (viewInjection.hasListenerBinding(listener, method)) {
-      return false;
-    }
-    viewInjection.addListenerBinding(listener, method, binding);
-    return true;
-  }
-
-  void addCollection(int[] ids, CollectionBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  void setParentInjector(String parentInjector) {
-    this.parentInjector = parentInjector;
-  }
-
-  private ViewInjection getOrCreateViewInjection(int id) {
-    ViewInjection viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewInjection(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  String getFqcn() {
-    return classPackage + "." + className;
-  }
-
-  String brewJava() {
-    StringBuilder builder = new StringBuilder();
-    builder.append("// Generated code from Butter Knife. Do not modify!\n");
-    builder.append("package ").append(classPackage).append(";\n\n");
-    builder.append("import android.view.View;\n");
-    builder.append("import butterknife.ButterKnife.Finder;\n\n");
-    builder.append("public class ").append(className).append(" {\n");
-    emitInject(builder);
-    builder.append('\n');
-    emitReset(builder);
-    builder.append("}\n");
-    return builder.toString();
-  }
-
-  private void emitInject(StringBuilder builder) {
-    builder.append("  public static void inject(Finder finder, final ")
-        .append(targetClass)
-        .append(" target, Object source) {\n");
-
-    // Emit a call to the superclass injector, if any.
-    if (parentInjector != null) {
-      builder.append("    ")
-          .append(parentInjector)
-          .append(".inject(finder, target, source);\n\n");
-    }
-
-    // Local variable in which all views will be temporarily stored.
-    builder.append("    View view;\n");
-
-    // Loop over each view injection and emit it.
-    for (ViewInjection injection : viewIdMap.values()) {
-      emitViewInjection(builder, injection);
-    }
-
-    // Loop over each collection binding and emit it.
-    for (Map.Entry<CollectionBinding, int[]> entry : collectionBindings.entrySet()) {
-      emitCollectionBinding(builder, entry.getKey(), entry.getValue());
-    }
-
-    builder.append("  }\n");
-  }
-
-  private void emitCollectionBinding(StringBuilder builder, CollectionBinding binding, int[] ids) {
-    builder.append("    target.").append(binding.getName()).append(" = ");
-
-    switch (binding.getKind()) {
-      case ARRAY:
-        builder.append("Finder.arrayOf(");
-        break;
-      case LIST:
-        builder.append("Finder.listOf(");
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    for (int i = 0; i < ids.length; i++) {
-      if (i > 0) {
-        builder.append(',');
-      }
-      builder.append("\n        ");
-      emitCastIfNeeded(builder, binding.getType());
-      if (binding.isRequired()) {
-        builder.append("finder.findRequiredView(source, ")
-            .append(ids[i])
-            .append(", \"")
-            .append(binding.getName())
-            .append("\")");
-      } else {
-        builder.append("finder.findOptionalView(source, ")
-            .append(ids[i])
-            .append(")");
-      }
-    }
-
-    builder.append("\n    );");
-  }
-
-  private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
-    builder.append("    view = ");
-
-    List<Binding> requiredBindings = injection.getRequiredBindings();
-    if (requiredBindings.isEmpty()) {
-      builder.append("finder.findOptionalView(source, ")
-          .append(injection.getId())
-          .append(");\n");
-    } else {
-      builder.append("finder.findRequiredView(source, ")
-          .append(injection.getId())
-          .append(", \"");
-      emitHumanDescription(builder, requiredBindings);
-      builder.append("\");\n");
-    }
-
-    emitViewBindings(builder, injection);
-    emitListenerBindings(builder, injection);
-  }
-
-  private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
-    Collection<ViewBinding> viewBindings = injection.getViewBindings();
-    if (viewBindings.isEmpty()) {
-      return;
-    }
-
-    for (ViewBinding viewBinding : viewBindings) {
-      builder.append("    target.")
-          .append(viewBinding.getName())
-          .append(" = ");
-      emitCastIfNeeded(builder, viewBinding.getType());
-      builder.append("view;\n");
-    }
-  }
-
-  private void emitListenerBindings(StringBuilder builder, ViewInjection injection) {
-    Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> bindings =
-        injection.getListenerBindings();
-    if (bindings.isEmpty()) {
-      return;
-    }
-
-    String extraIndent = "";
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = injection.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      builder.append("    if (view != null) {\n");
-      extraIndent = "  ";
-    }
-
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, ListenerBinding>> e : bindings.entrySet()) {
-      ListenerClass listener = e.getKey();
-      Map<ListenerMethod, ListenerBinding> methodBindings = e.getValue();
-
-      // Emit: ((OWNER_TYPE) view).SETTER_NAME(
-      boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
-      builder.append(extraIndent)
-          .append("    ");
-      if (needsCast) {
-        builder.append("((").append(listener.targetType());
-        if (listener.genericArguments() > 0) {
-          builder.append('<');
-          for (int i = 0; i < listener.genericArguments(); i++) {
-            if (i > 0) {
-              builder.append(", ");
-            }
-            builder.append('?');
-          }
-          builder.append('>');
-        }
-        builder.append(") ");
-      }
-      builder.append("view");
-      if (needsCast) {
-        builder.append(')');
-      }
-      builder.append('.')
-          .append(listener.setter())
-          .append("(\n");
-
-      // Emit: new TYPE() {
-      builder.append(extraIndent)
-          .append("      new ")
-          .append(listener.type())
-          .append("() {\n");
-
-      for (ListenerMethod method : getListenerMethods(listener)) {
-        // Emit: @Override public RETURN_TYPE METHOD_NAME(
-        builder.append(extraIndent)
-            .append("        @Override public ")
-            .append(method.returnType())
-            .append(' ')
-            .append(method.name())
-            .append("(\n");
-
-        // Emit listener method arguments, each on their own line.
-        String[] parameterTypes = method.parameters();
-        for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          builder.append(extraIndent)
-              .append("          ")
-              .append(parameterTypes[i])
-              .append(" p")
-              .append(i);
-          if (i < count - 1) {
-            builder.append(',');
-          }
-          builder.append('\n');
-        }
-
-        // Emit end of parameters, start of body.
-        builder.append(extraIndent).append("        ) {\n");
-
-        // Set up the return statement, if needed.
-        builder.append(extraIndent).append("          ");
-        boolean hasReturnType = !"void".equals(method.returnType());
-        if (hasReturnType) {
-          builder.append("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          ListenerBinding binding = methodBindings.get(method);
-          builder.append("target.").append(binding.getName()).append('(');
-          List<Parameter> parameters = binding.getParameters();
-          String[] listenerParameters = method.parameters();
-          for (int i = 0, count = parameters.size(); i < count; i++) {
-            Parameter parameter = parameters.get(i);
-            int listenerPosition = parameter.getListenerPosition();
-            emitCastIfNeeded(builder, listenerParameters[listenerPosition], parameter.getType());
-            builder.append('p').append(listenerPosition);
-            if (i < count - 1) {
-              builder.append(", ");
-            }
-          }
-          builder.append(");");
-        } else if (hasReturnType) {
-          builder.append(method.defaultReturn()).append(';');
-        }
-        builder.append('\n');
-
-        // Emit end of listener method.
-        builder.append(extraIndent).append("        }\n");
-      }
-
-      // Emit end of listener class body and close the setter method call.
-      builder.append(extraIndent).append("      });\n");
-    }
-
-    if (needsNullChecked) {
-      builder.append("    }\n");
-    }
-  }
-
-  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
-    if (listener.method().length == 1) {
-      return Arrays.asList(listener.method());
-    }
-
-    try {
-      List<ListenerMethod> methods = new ArrayList<ListenerMethod>();
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
-        Field callbackField = callbacks.getField(callbackMethod.name());
-        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-        if (method == null) {
-          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-        }
-        methods.add(method);
-      }
-      return methods;
-    } catch (NoSuchFieldException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  private void emitReset(StringBuilder builder) {
-    builder.append("  public static void reset(").append(targetClass).append(" target) {\n");
-    if (parentInjector != null) {
-      builder.append("    ")
-          .append(parentInjector)
-          .append(".reset(target);\n\n");
-    }
-    for (ViewInjection injection : viewIdMap.values()) {
-      for (ViewBinding viewBinding : injection.getViewBindings()) {
-        builder.append("    target.").append(viewBinding.getName()).append(" = null;\n");
-      }
-    }
-    for (CollectionBinding collectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(collectionBinding.getName()).append(" = null;\n");
-    }
-    builder.append("  }\n");
-  }
-
-  static void emitCastIfNeeded(StringBuilder builder, String viewType) {
-    emitCastIfNeeded(builder, VIEW_TYPE, viewType);
-  }
-
-  static void emitCastIfNeeded(StringBuilder builder, String sourceType, String destinationType) {
-    // Only emit a cast if the source and destination type do not match.
-    if (!sourceType.equals(destinationType)) {
-      builder.append('(').append(destinationType).append(") ");
-    }
-  }
-
-  static void emitHumanDescription(StringBuilder builder, List<Binding> bindings) {
-    switch (bindings.size()) {
-      case 1:
-        builder.append(bindings.get(0).getDescription());
-        break;
-      case 2:
-        builder.append(bindings.get(0).getDescription())
-            .append(" and ")
-            .append(bindings.get(1).getDescription());
-        break;
-      default:
-        for (int i = 0, count = bindings.size(); i < count; i++) {
-          Binding requiredField = bindings.get(i);
-          if (i != 0) {
-            builder.append(", ");
-          }
-          if (i == count - 1) {
-            builder.append("and ");
-          }
-          builder.append(requiredField.getDescription());
-        }
-        break;
-    }
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2770d490..bfa469fb 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -1,12 +1,12 @@
 /**
- * View "injection" library for Android which uses annotation processing to generate boilerplate
- * code for you.
+ * Field and method binding for Android views which uses annotation processing to generate
+ * boilerplate code for you.
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.InjectView @InjectView} on fields.</li>
- * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.InjectViews @InjectViews}. Operate on all of them at once with
+ * {@link butterknife.Bind @Bind} on fields.</li>
+ * <li>Group multiple views in a {@linkplain java.util.List list} or array.
+ * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
@@ -14,6 +14,7 @@
  * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
+ * <li>Eliminate resource lookups by using resource annotations on fields.</li>
  * </ul>
  */
 package butterknife;
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 76fef637..34833428 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -5,6 +5,8 @@
 import android.view.View;
 import java.util.Arrays;
 import java.util.List;
+
+import butterknife.shadow.EditModeShadowView;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -13,9 +15,12 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+import static butterknife.ButterKnife.Finder.arrayOf;
+import static butterknife.ButterKnife.Finder.listOf;
 import static org.fest.assertions.api.ANDROID.assertThat;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.entry;
+import static org.fest.assertions.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -42,10 +47,29 @@
     }
   };
 
-  @Before @After // Clear out cache of injectors and resetters before and after each test.
+  @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.INJECTORS.clear();
-    ButterKnife.RESETTERS.clear();
+    ButterKnife.BINDERS.clear();
+  }
+
+  @Test public void listOfFiltersNull() {
+    assertThat(listOf(null, null, null)).isEmpty();
+    assertThat(listOf("One", null, null)).containsExactly("One");
+    assertThat(listOf(null, "One", null)).containsExactly("One");
+    assertThat(listOf(null, null, "One")).containsExactly("One");
+    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayOf(null, null, null)).isEmpty();
+    assertThat(arrayOf("One", null, null)).containsExactly("One");
+    assertThat(arrayOf(null, "One", null)).containsExactly("One");
+    assertThat(arrayOf(null, null, "One")).containsExactly("One");
+    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
   }
 
   @Test public void propertyAppliedToEveryView() {
@@ -96,32 +120,53 @@ public void resetViewsCache() {
     assertThat(view3).isDisabled();
   }
 
-  @Test public void zeroInjectionsInjectDoesNotThrowException() {
+  @Test public void zeroBindingsBindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
-    ButterKnife.inject(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NO_OP));
+    ButterKnife.bind(example, null, null);
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void zeroInjectionsResetDoesNotThrowException() {
+  @Test public void zeroBindingsUnbindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
-    ButterKnife.reset(example);
-    assertThat(ButterKnife.RESETTERS).contains(entry(Example.class, ButterKnife.NO_OP));
+    ButterKnife.unbind(example);
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void injectingKnownPackagesIsNoOp() {
-    ButterKnife.inject(new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
-    ButterKnife.inject(new Object(), new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
-    ButterKnife.reset(new Object());
-    assertThat(ButterKnife.RESETTERS).isEmpty();
-    ButterKnife.reset(new Activity());
-    assertThat(ButterKnife.RESETTERS).isEmpty();
+  @Test public void bindingKnownPackagesIsNoOp() {
+    ButterKnife.bind(new Activity());
+    assertThat(ButterKnife.BINDERS).isEmpty();
+    ButterKnife.bind(new Object(), new Activity());
+    assertThat(ButterKnife.BINDERS).isEmpty();
+  }
+
+  @Test public void finderThrowsNiceError() {
+    View view = new View(Robolectric.application);
+    try {
+      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view 'button1' with ID "
+          + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+    }
+  }
+
+  @Config(shadows = EditModeShadowView.class)
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    View view = new View(Robolectric.application);
+    try {
+      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+    }
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
deleted file mode 100644
index 3a0b0475..00000000
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ /dev/null
@@ -1,447 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
-
-public class InjectViewTest {
-  @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) View thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.InjectView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @InjectView(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = (android.widget.TextView) view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) View thing1;",
-        "  @InjectView(1) View thing2;",
-        "  @InjectView(1) View thing3;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1', field 'thing2', and field 'thing3'\");",
-            "    target.thing1 = view;",
-            "    target.thing2 = view;",
-            "    target.thing3 = view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing1 = null;",
-            "    target.thing2 = null;",
-            "    target.thing3 = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) public View thing1;",
-        "  @InjectView(1) View thing2;",
-        "  @InjectView(1) protected View thing3;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void optional() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
-        "public class Test extends Activity {",
-        "  @Optional @InjectView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1);",
-            "    target.view = view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @InjectView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
-            "    test.Test$$ViewInjector.inject(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  public static void reset(test.TestOne target) {",
-            "    test.Test$$ViewInjector.reset(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Optional;",
-        "public class Test<T> extends Activity {",
-        "  @InjectView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @InjectView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
-            "    test.Test$$ViewInjector.inject(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  public static void reset(test.TestOne target) {",
-            "    test.Test$$ViewInjector.reset(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  @InjectView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  @InjectView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @InjectView(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) String thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public interface Test {",
-        "    @InjectView(1) View thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) private View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) static View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfBothAnnotations() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) @InjectViews(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one of @InjectView and @InjectViews is allowed. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
deleted file mode 100644
index 31390e6d..00000000
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ /dev/null
@@ -1,444 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
-
-public class InjectViewsTest {
-  @Test public void injectingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        (android.widget.TextView) finder.findRequiredView(source, 1, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 2, \"thing\"),",
-            "        (android.widget.TextView) finder.findRequiredView(source, 3, \"thing\")",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.findRequiredView(source, 1, \"thing\"),",
-            "        finder.findRequiredView(source, 2, \"thing\"),",
-            "        finder.findRequiredView(source, 3, \"thing\")",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void optional() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import butterknife.Optional;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Optional @InjectViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.findOptionalView(source, 1),",
-            "        finder.findOptionalView(source, 2),",
-            "        finder.findOptionalView(source, 3)",
-            "    );",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @InjectViews({}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @InjectViews(1) List thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @InjectViews(1) Deque<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @InjectViews(1) List<String> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.InjectViews;",
-        "public class Test extends Activity {", "  @InjectViews(1) String[] thing;", "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test {",
-        "  @InjectViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test {",
-        "  @InjectViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @InjectViews(1) List<View> thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public interface Test {",
-        "    @InjectViews(1) List<View> thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews(1) private List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews(1) static List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
deleted file mode 100644
index d26d60b9..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ /dev/null
@@ -1,223 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
-public class OnItemClickTest {
-  @Test public void onClickInjection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameters() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    int position,",
-        "    long id",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(p0, p1, p2, p3);",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameterSubset() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    ListView parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff((android.widget.ListView) p0, p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test<T extends ListView> extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    T parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff((android.widget.ListView) p0, p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsWithInvalidParameterConfiguration() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    View whatIsThis",
-        "  ) {}",
-        "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(Joiner.on('\n').join(
-            "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
-            "  ",
-            "    Parameter #1: android.widget.AdapterView<?>",
-            "      matched listener parameter #1: android.widget.AdapterView<?>",
-            "  ",
-            "    Parameter #2: android.view.View",
-            "      matched listener parameter #2: android.view.View",
-            "  ",
-            "    Parameter #3: android.view.View",
-            "      did not match any listener parameters",
-            "  ",
-            "  Methods may have up to 4 parameter(s):",
-            "  ",
-            "    android.widget.AdapterView<?>",
-            "    android.view.View",
-            "    int",
-            "    long",
-            "  ",
-            "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
deleted file mode 100644
index 0ca9aef8..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ /dev/null
@@ -1,215 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
-public class OnItemSelectedTest {
-  @Test public void defaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nonDefaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void allMethods() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1)",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void multipleBindingPermutation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected({ 1, 2 })",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
deleted file mode 100644
index cffa3a8c..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-import static org.truth0.Truth.ASSERT;
-
-public class OnTouchTest {
-  @Test public void touch() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTouch;",
-        "public class Test extends Activity {",
-        "  @OnTouch(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
-            "      @Override public boolean onTouch(android.view.View p0, android.view.MotionEvent p1) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "  public static void reset(test.Test target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java b/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
deleted file mode 100644
index d954c309..00000000
--- a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package butterknife.internal;
-
-import java.util.Arrays;
-
-import javax.annotation.processing.Processor;
-
-final class ProcessorTestUtilities {
-  static Iterable<? extends Processor> butterknifeProcessors() {
-    return Arrays.asList(
-        new ButterKnifeProcessor()
-    );
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java b/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
deleted file mode 100644
index 46ca7932..00000000
--- a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package butterknife.internal;
-
-import org.junit.Test;
-
-import static butterknife.internal.ViewInjector.emitHumanDescription;
-import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class ViewInjectorTest {
-  @Test public void humanDescriptionJoinWorks() {
-    Binding one = new TestBinding("one");
-    Binding two = new TestBinding("two");
-    Binding three = new TestBinding("three");
-
-    StringBuilder builder1 = new StringBuilder();
-    emitHumanDescription(builder1, asList(one));
-    assertThat(builder1.toString()).isEqualTo("one");
-
-    StringBuilder builder2 = new StringBuilder();
-    emitHumanDescription(builder2, asList(one, two));
-    assertThat(builder2.toString()).isEqualTo("one and two");
-
-    StringBuilder builder3 = new StringBuilder();
-    emitHumanDescription(builder3, asList(one, two, three));
-    assertThat(builder3.toString()).isEqualTo("one, two, and three");
-  }
-
-  private static class TestBinding implements Binding {
-    private final String description;
-
-    private TestBinding(String description) {
-      this.description = description;
-    }
-
-    @Override public String getDescription() {
-      return description;
-    }
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
new file mode 100644
index 00000000..e4fd9951
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
@@ -0,0 +1,18 @@
+package butterknife.shadow;
+
+import android.view.View;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowView;
+
+/**
+ * Behaves just like standard Robolectric views, but always reports that it is in Edit Mode.
+ */
+@Implements(View.class)
+public class EditModeShadowView extends ShadowView {
+  @SuppressWarnings("UnusedDeclaration")
+  @Implementation
+  public boolean isInEditMode() {
+    return true;
+  }
+}
diff --git a/checkstyle.xml b/checkstyle.xml
index efc74936..73070a8a 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -106,7 +106,7 @@
 
     <!-- Checks for common coding problems               -->
     <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <module name="AvoidInlineConditionals"/>
+    <!--<module name="AvoidInlineConditionals"/>-->
     <module name="CovariantEquals"/>
     <module name="DoubleCheckedLocking"/>
     <module name="EmptyStatement"/>
diff --git a/pom.xml b/pom.xml
index 90e25295..37bc77d8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,30 +11,32 @@
 
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife-parent</artifactId>
-  <version>5.1.3-SNAPSHOT</version>
+  <version>7.0.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Butter Knife (Parent)</name>
-  <description>View "injection" for Android.</description>
+  <description>Field and method binding for Android views.</description>
   <url>http://github.com/JakeWharton/butterknife/</url>
   <inceptionYear>2013</inceptionYear>
 
   <modules>
     <module>butterknife</module>
+    <module>butterknife-compiler</module>
     <module>butterknife-sample</module>
   </modules>
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
-    <java.version>1.6</java.version>
+    <java.version>1.7</java.version>
     <fest.version>2.0M10</fest.version>
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
     <junit.version>4.10</junit.version>
     <robolectric.version>2.2</robolectric.version>
     <fest.android.version>1.0.7</fest.android.version>
-    <compile-test.version>0.5</compile-test.version>
+    <compile-test.version>0.6</compile-test.version>
+    <javapoet.version>1.2.0</javapoet.version>
   </properties>
 
   <scm>
@@ -63,6 +65,11 @@
         <artifactId>android</artifactId>
         <version>${android.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.squareup</groupId>
+        <artifactId>javapoet</artifactId>
+        <version>${javapoet.version}</version>
+      </dependency>
       <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
@@ -136,9 +143,9 @@
     <pluginManagement>
       <plugins>
         <plugin>
-          <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+          <groupId>com.simpligility.maven.plugins</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.0</version>
+          <version>4.1.0</version>
           <configuration>
             <sdk>
               <platform>${android.platform}</platform>
diff --git a/website/ide-eclipse.html b/website/ide-eclipse.html
index ea13e0c4..e1cf729d 100644
--- a/website/ide-eclipse.html
+++ b/website/ide-eclipse.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
@@ -27,7 +27,7 @@ <h2>View &quot;injection&quot; library for Android</h2>
             <h3 id="introduction">Eclipse Configuration</h3>
             <ol>
               <li>
-                <p>Right click on your project in the <em>Package Explorer</em>. Head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
+                <p>Right click on your project in the <em>Package Explorer</em>, go to <em>Properties</em>, head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
                 <p>Ensure the other annotation processing settings are the same as shown below:</p>
                 <p><img src="static/ide-eclipse1.png"/></p>
               </li>
@@ -36,7 +36,7 @@ <h3 id="introduction">Eclipse Configuration</h3>
                 <p><img src="static/ide-eclipse2.png"/></p>
               </li>
               <li>Click <em>"Ok"</em> to save the new settings. Eclipse will ask you to rebuild your project to which you should click <em>"Yes"</em></li>
-              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewInjector.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
+              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewBinder.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
               <li>Lastly, under <em>"Java Compiler"</em>, make sure that the <em>Compiler compliance level</em> is set to Java version 1.6 at minimum.</li>
             </ol>
 
diff --git a/website/ide-idea.html b/website/ide-idea.html
index aa57ae48..a656ac15 100644
--- a/website/ide-idea.html
+++ b/website/ide-idea.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
diff --git a/website/index.html b/website/index.html
index 454d5ab0..74a56e51 100644
--- a/website/index.html
+++ b/website/index.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,43 +18,53 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
           <p><a href="javadoc/">Javadoc</a> &middot; <a href="http://stackoverflow.com/questions/ask?tags=butterknife">StackOverflow</a></p>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@InjectView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }</pre>
-            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>inject</code> delegates to this generated code that you can see and debug.</p>
+            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
-            <pre class="prettyprint">public void inject(ExampleActivity activity) {
+            <pre class="prettyprint">public void bind(ExampleActivity activity) {
   activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
   activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }</pre>
 
-            <h4 id="non-activity">Non-Activity Injection</h4>
-            <p>You can also perform injection on arbitrary objects by supplying your own view root.</p>
+            <h4 id="resource">Resource Binding</h4>
+            <p>Bind pre-defined resources with <code>@BindBool</code>, <code>@BindColor</code>, <code>@BindDimen</code>, <code>@BindDrawable</code>, <code>@BindInt</code>, <code>@BindString</code>, which binds an <code>R.bool</code> ID (or your specified type) to its corresponding field.</p>
+            <pre class="prettyprint">class ExampleActivity extends Activity {
+  @BindString(R.string.title) String title;
+  @BindDrawable(R.drawable.graphic) Drawable graphic;
+  @BindColor(R.color.red) int red; // int or ColorStateList field
+  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
+  // ...
+}</pre>
+
+            <h4 id="non-activity">Non-Activity Binding</h4>
+            <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
-  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 }</pre>
@@ -77,52 +87,57 @@ <h4 id="non-activity">Non-Activity Injection</h4>
   }
 
   static class ViewHolder {
-    @InjectView(R.id.title) TextView name;
-    @InjectView(R.id.job_title) TextView jobTitle;
+    @Bind(R.id.title) TextView name;
+    @Bind(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }</pre>
             <p>You can see this implementation in action in the provided sample.</p>
-            <p>Calls to <code>ButterKnife.inject</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
-            <p>Other provided injection APIs:</p>
+            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
+            <p>Other provided binding APIs:</p>
             <ul>
-              <li>Inject arbitrary objects using an activity as the view root. If you use a pattern like MVC you can inject the controller using its activity with <code>ButterKnife.inject(this, activity)</code>.</li>
-              <li>Inject a view's children into fields using <code>ButterKnife.inject(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
+              <li>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with <code>ButterKnife.bind(this, activity)</code>.</li>
+              <li>Bind a view's children into fields using <code>ButterKnife.bind(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
    call this immediately after. Alternatively, custom view types inflated from
    XML can use it in the <code>onFinishInflate()</code> callback.</li>
             </ul>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);</pre>
             <p><code>Action</code> and <code>Setter</code> interfaces allow specifying simple behavior.</p>
-            <pre class="prettyprint">static final Action&lt;View> DISABLE = new Action&lt;>() {
+            <pre class="prettyprint">static final ButterKnife.Action&lt;View> DISABLE = new ButterKnife.Action&lt;View>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
   }
-}
-static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
+};
+static final ButterKnife.Setter&lt;View, Boolean> ENABLED = new ButterKnife.Setter&lt;View, Boolean>() {
   @Override public void set(View view, Boolean value, int index) {
     view.setEnabled(value);
   }
-}</pre>
+};</pre>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
-            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
+            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</pre>
 
-            <h4 id="click-injection">Click Listener Injection</h4>
-            <p>Click listeners can also automatically be configured onto methods.</p>
+            <h4 id="listener-binding">Listener Binding</h4>
+            <p>Listeners can also automatically be configured onto methods.</p>
+            <pre class="prettyprint">@OnClick(R.id.submit)
+public void submit(View view) {
+  // TODO submit data to server...
+}</pre>
+            <p>All arguments to the listener method are optional.</p>
             <pre class="prettyprint">@OnClick(R.id.submit)
 public void submit() {
   // TODO submit data to server...
 }</pre>
-            <p>You can add the view as an argument to the method. Define a specific type and it will automatically be cast.</p>
+            <p>Define a specific type and it will automatically be cast.</p>
             <pre class="prettyprint">@OnClick(R.id.submit)
 public void sayHi(Button button) {
   button.setText("Hello!");
@@ -136,32 +151,41 @@ <h4 id="click-injection">Click Listener Injection</h4>
     Toast.makeText(this, "Try again", LENGTH_SHORT).show();
   }
 }</pre>
+            <p>Custom views can bind to their own listeners by not specifying an ID.</p>
+            <pre class="prettyprint">public class FancyButton extends Button {
+  @OnClick
+  public void onClick() {
+    // TODO do something!
+  }
+}
+</pre>
 
-            <h4 id="reset">Injection Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When injecting a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has a <code>reset</code> method to do this automatically.</p>
+            <h4 id="reset">Binding Reset</h4>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
-  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 
-  @Override void onDestroyView() {
+  @Override public void onDestroyView() {
     super.onDestroyView();
-    ButterKnife.reset(this);
+    ButterKnife.unbind(this);
   }
 }</pre>
 
-            <h4 id="optional">Optional Injections</h4>
-            <p>By default, both <code>@InjectView</code> and <code>@OnClick</code> injections are required. An exception will be thrown if the target view cannot be found.</p>
-            <p>To suppress this behavior and create an optional injection, add the <code>@Optional</code> annotation to the field or method.</p>
-            <pre class="prettyprint">@Optional @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <h4 id="optional">Optional Bindings</h4>
+            <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
+            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
+            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
 
-@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
+@Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
 }</pre>
 
@@ -178,7 +202,7 @@ <h4 id="multi-method-listeners">Multi-Method Listeners</h4>
 }</pre>
 
             <h4 id="bonus">Bonus</h4>
-            <p>Also included are two <code>findById</code> methods which simplify code that still has to find views on a <code>View</code> or <code>Activity</code>. It uses generics to infer the return type and automatically performs the cast.</p>
+            <p>Also included are <code>findById</code> methods which simplify code that still has to find views on a <code>View</code>, <code>Activity</code>, or <code>Dialog</code>. It uses generics to infer the return type and automatically performs the cast.</p>
             <pre class="prettyprint">View view = LayoutInflater.from(context).inflate(R.layout.thing, null);
 TextView firstName = ButterKnife.findById(view, R.id.first_name);
 TextView lastName = ButterKnife.findById(view, R.id.last_name);
@@ -201,7 +225,7 @@ <h4>Maven</h4>
 
             <h4>Gradle</h4>
             <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>
+            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
             <pre class="prettyprint">lintOptions {
   disable 'InvalidPackage'
 }</pre>
@@ -219,10 +243,18 @@ <h4 id="ide">IDE Configuration</h4>
 
             <h4 id="proguard">ProGuard</h4>
             <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepnames</code> option is used.</p>
-            <pre>-dontwarn butterknife.internal.**
--keep class **$$ViewInjector { *; }
--keepnames class * { @butterknife.InjectView *;}</pre>
+                To prevent ProGuard renaming classes that use @Bind on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
+            <pre>-keep class butterknife.** { *; }
+-dontwarn butterknife.internal.**
+-keep class **$$ViewBinder { *; }
+
+-keepclasseswithmembernames class * {
+    @butterknife.* &lt;fields&gt;;
+}
+
+-keepclasseswithmembernames class * {
+    @butterknife.* &lt;methods&gt;;
+}</pre>
 
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
