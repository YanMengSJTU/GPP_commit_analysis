diff --git a/CHANGELOG.md b/CHANGELOG.md
index 839fe608..4dc9d9fd 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,14 @@
 Change Log
 ==========
 
+Version 9.0.0-rc2 *(2018-11-19)*
+--------------------------------
+
+ * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This
+   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older).
+ * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.
+
+
 Version 9.0.0-rc1 *(2018-10-10)*
 --------------------------------
 
diff --git a/README.md b/README.md
index 41d25f66..22cb43b5 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  implementation 'com.jakewharton:butterknife:9.0.0-rc1'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc1'
+  implementation 'com.jakewharton:butterknife:9.0.0-rc2'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc2'
 }
 ```
 
@@ -65,7 +65,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc1'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index c64dd5a2..0ef86b3c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -35,7 +35,6 @@ buildscript {
           'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
       ],
       javapoet: 'com.squareup:javapoet:1.10.0',
-      javaparser: 'com.github.javaparser:javaparser-core:3.5.14',
       junit: 'junit:junit:4.12',
       truth: 'com.google.truth:truth:0.42',
       compiletesting: 'com.google.testing.compile:compile-testing:0.15',
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 6a5e5e46..0df2479c 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -56,9 +56,8 @@
       ClassName.get("android.annotation", "SuppressLint");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
-  /* This string concat lunacy is to work around Jetifier nonsense. */
   static final ClassName CONTEXT_COMPAT_LEGACY =
-      ClassName.get("android.sup" + new String("port.v4.content"), "ContextCompat");
+      ClassName.get("android.support.v4.content", "ContextCompat");
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("androidx.core.content", "ContextCompat");
   static final ClassName ANIMATION_UTILS =
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index aaff4907..4b42d28b 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -8,7 +8,6 @@ dependencies {
   compileOnly gradleApi()
 
   implementation deps.android.gradlePlugin
-  implementation deps.javaparser
   implementation deps.javapoet
   implementation deps.kotlin.stdLibJdk8
 
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index cfc5c261..23992345 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -7,12 +7,13 @@ import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
+import com.android.build.gradle.internal.res.GenerateLibraryRFileTask
+import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask
 import groovy.util.XmlSlurper
 import org.gradle.api.DomainObjectSet
 import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
-import java.io.File
 import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
@@ -58,29 +59,31 @@ class ButterKnifePlugin : Plugin<Project> {
       val outputDir = project.buildDir.resolve(
           "generated/source/r2/${variant.dirName}")
 
-      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
-      task.inputs.property("useAndroidX", useAndroidX)
-      task.outputs.dir(outputDir)
-      variant.registerJavaGeneratingTask(task, outputDir)
-
       val rPackage = getPackageName(variant)
       val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
-        task.dependsOn(processResources)
 
         // Though there might be multiple outputs, their R files are all the same. Thus, we only
         // need to configure the task once with the R.java input and action.
         if (once.compareAndSet(false, true)) {
-          val pathToR = rPackage.replace('.', File.separatorChar)
-          val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
-
-          task.apply {
-            inputs.file(rFile)
-
-            doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", !useAndroidX)
-            }
+          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005)
+          val rFile =
+              project.files(
+                  when (processResources) {
+                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile
+                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile
+                    else -> throw RuntimeException(
+                        "Minimum supported Android Gradle Plugin is 3.1.0")
+                  })
+                  .builtBy(processResources)
+          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {
+            it.outputDir = outputDir
+            it.rFile = rFile
+            it.useAndroidX = useAndroidX
+            it.packageName = rPackage
+            it.className = "R2"
+            variant.registerJavaGeneratingTask(it, outputDir)
           }
         }
       }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
deleted file mode 100644
index 4cda90a4..00000000
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package butterknife.plugin;
-
-import com.github.javaparser.JavaParser;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.ast.Node;
-import com.github.javaparser.ast.body.BodyDeclaration;
-import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
-import com.github.javaparser.ast.body.FieldDeclaration;
-import com.github.javaparser.ast.body.TypeDeclaration;
-import com.github.javaparser.ast.body.VariableDeclarator;
-import com.github.javaparser.ast.type.PrimitiveType;
-import com.github.javaparser.ast.type.Type;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.FieldSpec;
-import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.TypeSpec;
-import java.io.File;
-import java.util.Arrays;
-import java.util.List;
-
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PUBLIC;
-import static javax.lang.model.element.Modifier.STATIC;
-
-/**
- * Generates a class that contains all supported field names in an R file as final values.
- * Also enables adding support annotations to indicate the type of resource for every field.
- */
-public final class FinalRClassBuilder {
-  private static final String ANNOTATION_PACKAGE = "androidx.annotation";
-  private static final String ANNOTATION_PACKAGE_LEGACY = "android.support.annotation";
-  private static final String[] SUPPORTED_TYPES = {
-      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
-      "string", "style", "styleable"
-  };
-
-  private FinalRClassBuilder() { }
-
-  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useLegacyTypes)
-      throws Exception {
-    CompilationUnit compilationUnit = JavaParser.parse(rFile);
-    TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
-
-    TypeSpec.Builder result = TypeSpec.classBuilder(className)
-        .addModifiers(PUBLIC, FINAL);
-
-    for (Node node : resourceClass.getChildNodes()) {
-      if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useLegacyTypes);
-      }
-    }
-
-    JavaFile finalR = JavaFile.builder(packageName, result.build())
-        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
-        .build();
-
-    finalR.writeTo(outputDir);
-  }
-
-  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node, boolean useLegacyTypes) {
-    if (!supportedTypes.contains(node.getNameAsString())) {
-      return;
-    }
-
-    String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type)
-        .addModifiers(PUBLIC, STATIC, FINAL);
-
-    for (BodyDeclaration field : node.getMembers()) {
-      if (field instanceof FieldDeclaration) {
-        FieldDeclaration declaration = (FieldDeclaration) field;
-        // Check that the field is an Int because styleable also contains Int arrays which can't be
-        // used in annotations.
-        if (isInt(declaration)) {
-          addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type, useLegacyTypes));
-        }
-      }
-    }
-
-    result.addType(resourceType.build());
-  }
-
-  private static boolean isInt(FieldDeclaration field) {
-    Type type = field.getCommonType();
-    return type instanceof PrimitiveType
-        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
-  }
-
-  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
-      ClassName annotation) {
-    String fieldName = variable.getNameAsString();
-    String fieldValue = variable.getInitializer()
-        .map(Node::toString)
-        .orElseThrow(
-            () -> new IllegalStateException("Field " + fieldName + " missing initializer"));
-    FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
-        .addModifiers(PUBLIC, STATIC, FINAL)
-        .initializer(fieldValue);
-
-    if (annotation != null) {
-      fieldSpecBuilder.addAnnotation(annotation);
-    }
-
-    resourceType.addField(fieldSpecBuilder.build());
-  }
-
-  private static ClassName getSupportAnnotationClass(String type, boolean useLegacyTypes) {
-    String supportPackage = useLegacyTypes ? ANNOTATION_PACKAGE_LEGACY : ANNOTATION_PACKAGE;
-    return ClassName.get(supportPackage, capitalize(type) + "Res");
-  }
-
-  private static String capitalize(String word) {
-    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
-  }
-}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
new file mode 100644
index 00000000..567782c8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
@@ -0,0 +1,63 @@
+package butterknife.plugin
+
+import com.squareup.javapoet.ClassName
+import com.squareup.javapoet.FieldSpec
+import com.squareup.javapoet.JavaFile
+import com.squareup.javapoet.TypeSpec
+import javax.lang.model.element.Modifier.FINAL
+import javax.lang.model.element.Modifier.PUBLIC
+import javax.lang.model.element.Modifier.STATIC
+
+
+private const val ANNOTATION_PACKAGE = "androidx.annotation"
+private const val ANNOTATION_PACKAGE_LEGACY = "android.support.annotation"
+internal val SUPPORTED_TYPES = setOf("anim", "array", "attr", "bool", "color", "dimen",
+    "drawable", "id", "integer", "layout", "menu", "plurals", "string", "style", "styleable")
+
+/**
+ * Generates a class that contains all supported field names in an R file as final values.
+ * Also enables adding support annotations to indicate the type of resource for every field.
+ */
+class FinalRClassBuilder(
+  private val packageName: String,
+  private val className: String,
+  private val useLegacyTypes: Boolean
+) {
+
+  private var resourceTypes = mutableMapOf<String, TypeSpec.Builder>()
+
+  fun build(): JavaFile {
+    val result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC, FINAL)
+    for (type in SUPPORTED_TYPES) {
+      resourceTypes.get(type)?.let {
+        result.addType(it.build())
+      }
+    }
+    return JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+        .build()
+  }
+
+  fun addResourceField(type: String, fieldName: String, fieldValue: String) {
+    if (type !in SUPPORTED_TYPES) {
+      return
+    }
+    val fieldSpecBuilder = FieldSpec.builder(Int::class.javaPrimitiveType, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer(fieldValue)
+
+    fieldSpecBuilder.addAnnotation(getSupportAnnotationClass(type))
+
+    val resourceType =
+        resourceTypes.getOrPut(type) {
+          TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL)
+        }
+    resourceType.addField(fieldSpecBuilder.build())
+  }
+
+  private fun getSupportAnnotationClass(type: String): ClassName {
+    val supportPackage = if (useLegacyTypes) ANNOTATION_PACKAGE_LEGACY else ANNOTATION_PACKAGE
+    return ClassName.get(supportPackage, type.capitalize() + "Res")
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
new file mode 100644
index 00000000..cd9d88d8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
@@ -0,0 +1,45 @@
+package butterknife.plugin
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.FileCollection
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputFiles
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+import java.io.File
+
+open class R2Generator : DefaultTask() {
+  @get:OutputDirectory
+  var outputDir: File? = null
+
+  @get:InputFiles
+  var rFile: FileCollection? = null
+
+  @get:Input
+  var useAndroidX: Boolean? = null
+
+  @get:Input
+  var packageName: String? = null
+
+  @get:Input
+  var className: String? = null
+
+  @Suppress("unused") // Invoked by Gradle.
+  @TaskAction
+  fun brewJava() {
+    brewJava(rFile!!.singleFile, outputDir!!, packageName!!, className!!, !useAndroidX!!)
+  }
+}
+
+fun brewJava(
+  rFile: File,
+  outputDir: File,
+  packageName: String,
+  className: String,
+  useLegacyTypes: Boolean
+) {
+  FinalRClassBuilder(packageName, className, useLegacyTypes)
+      .also { ResourceSymbolListReader(it).readSymbolTable(rFile) }
+      .build()
+      .writeTo(outputDir)
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
new file mode 100644
index 00000000..1bcf57fb
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
@@ -0,0 +1,28 @@
+package butterknife.plugin
+
+import java.io.File
+
+class ResourceSymbolListReader(private val builder: FinalRClassBuilder) {
+
+  fun readSymbolTable(symbolTable: File) {
+    symbolTable.forEachLine { processLine(it) }
+  }
+
+  private fun processLine(line: String) {
+    val values = line.split(' ')
+    if (values.size < 4) {
+      return
+    }
+    val javaType = values[0]
+    if (javaType != "int") {
+      return
+    }
+    val symbolType = values[1]
+    if (symbolType !in SUPPORTED_TYPES) {
+      return
+    }
+    val name = values[2]
+    val value = values[3]
+    builder.addResourceField(symbolType, name, value)
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
index 92ce2fd8..fa358db9 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
@@ -10,6 +10,9 @@ class BuildFilesRule(private val root: File) : TestRule {
     override fun apply(base: Statement, description: Description): Statement {
         return object : Statement() {
             override fun evaluate() {
+                val settingsFile = File(root, "settings.gradle")
+                val hasSettingsFile = settingsFile.exists()
+                if (!hasSettingsFile) settingsFile.writeText("")
                 val buildFile = File(root, "build.gradle")
                 val hasBuildFile = buildFile.exists()
                 if (hasBuildFile) {
@@ -29,6 +32,7 @@ class BuildFilesRule(private val root: File) : TestRule {
                 try {
                     base.evaluate()
                 } finally {
+                    if (!hasSettingsFile) settingsFile.delete()
                     if (!hasBuildFile) buildFile.delete()
                     if (!hasManifestFile) manifestFile.delete()
                 }
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
index a07dfc67..391ea62e 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -12,21 +12,20 @@ import org.junit.runners.Parameterized
 import org.junit.runners.Parameterized.Parameters
 
 @RunWith(Parameterized::class)
-class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useLegacyTypes: Boolean) {
+class FinalRClassBuilderTest(private val useLegacyTypes: Boolean) {
   @Rule @JvmField val tempFolder = TemporaryFolder()
 
   @Test fun brewJava() {
     val packageName = "com.butterknife.example"
-
-    val rFile = tempFolder.newFile("R.java").also {
-      it.writeText(javaClass.getResource("/fixtures/$rFile.java").readText())
+    val rFile = tempFolder.newFile("R.txt").also {
+      it.writeText(javaClass.getResource("/fixtures/R.txt").readText())
     }
 
     val outputDir = tempFolder.newFolder()
-    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useLegacyTypes)
+    brewJava(rFile, outputDir, packageName, "R2", useLegacyTypes)
 
     val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
-    var expected = javaClass.getResource("/fixtures/$r2File.java").readText()
+    var expected = javaClass.getResource("/fixtures/R2.java").readText()
     if (useLegacyTypes) {
       expected = expected.replace("import androidx.", "import android.support.")
     }
@@ -38,11 +37,6 @@ class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useLegac
   }
 
   companion object {
-    @JvmStatic @Parameters fun data() = listOf(
-        arrayOf("R", "R2", false),
-        arrayOf("RFinal", "R2", false),
-        arrayOf("R", "R2", true),
-        arrayOf("RFinal", "R2", true)
-    )
+    @JvmStatic @Parameters(name="useLegacyTypes={0}") fun data() = listOf(false, true)
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
deleted file mode 100644
index f02e0d09..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class unsupported {
-    public static int res = 0x7f040000;
-  }
-
-  public static final class anim {
-    public static int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static int[] resArray = { 0x7f040003 };
-    public static int res = 0x7f040015;
-  }
-}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
new file mode 100644
index 00000000..1117f0d8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
@@ -0,0 +1,18 @@
+int unsupported res 0x7f040000
+int anim res 0x7f040001
+int array res 0x7f040002
+int attr res 0x7f040003
+int bool res 0x7f040004
+int color res 0x7f040005
+int dimen res 0x7f040006
+int drawable res 0x7f040007
+int id res 0x7f040008
+int integer res 0x7f040009
+int layout res 0x7f040010
+int menu res 0x7f040011
+int plurals res 0x7f040012
+int string res 0x7f040013
+int style res 0x7f040014
+int[] styleable resArray { 0x7f040003 , 0x7f040015 }
+int styleable resArray_child 0
+int styleable resArray_child2 1
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index d70a8a41..095214bb 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -90,6 +90,9 @@
 
   public static final class styleable {
     @StyleableRes
-    public static final int res = 0x7f040015;
+    public static final int resArray_child = 0;
+
+    @StyleableRes
+    public static final int resArray_child2 = 1;
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
deleted file mode 100644
index c1391905..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class anim {
-    public static final int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static final int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static final int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static final int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static final int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static final int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static final int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static final int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static final int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static final int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static final int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static final int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static final int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static final int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static final int res = 0x7f040015;
-  }
-}
