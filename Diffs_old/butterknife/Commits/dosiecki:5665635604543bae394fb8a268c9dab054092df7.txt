diff --git a/CHANGELOG.md b/CHANGELOG.md
index b83b766f..2fd857cc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,31 @@
 Change Log
 ==========
 
+Version 7.0.1 *(2015-06-30)*
+----------------------------
+
+ * Fix: Correct `ClassCastException` which occurred when `@Nullable` array bindings had missing views.
+
+
+Version 7.0.0 *(2015-06-27)*
+----------------------------
+
+ * `@Bind` replaces `@InjectView` and `@InjectViews`.
+ * `ButterKnife.bind` and `ButterKnife.unbind` replaces `ButterKnife.inject` and `ButterKnife.reset`, respectively.
+ * `@Optional` has been removed. Use `@Nullable` from the 'support-annotations' library, or any other annotation
+   named "Nullable".
+ * New: Resource binding annotations!
+   * `@BindBool` binds an `R.bool` ID to a `boolean` field.
+   * `@BindColor` binds an `R.color` ID to an `int` or `ColorStateList` field.
+   * `@BindDimen` binds an `R.dimen` ID to an `int` (for pixel size) or `float` (for exact value) field.
+   * `@BindDrawable` binds an `R.drawable` ID to a `Drawable` field.
+   * `@BindInt` binds an `R.int` ID to an `int` field.
+   * `@BindString` binds an `R.string` ID to a `String` field.
+ * Fix: Missing views will be filtered out from list and array bindings.
+ * Note: If you are using Proguard, the generated class name has changed from being suffixed with `$$ViewInjector`
+   to `$$ViewBinder`.
+
+
 Version 6.1.0 *(2015-01-29)*
 ----------------------------
 
diff --git a/README.md b/README.md
index a27fe2dd..417d8ffc 100644
--- a/README.md
+++ b/README.md
@@ -6,15 +6,19 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@FindView` on fields.
- * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
+ * Eliminate resource lookups by using resource annotations on fields.
 
 ```java
 class ExampleActivity extends Activity {
-  @FindView(R.id.user) EditText username;
-  @FindView(R.id.pass) EditText password;
+  @Bind(R.id.user) EditText username;
+  @Bind(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error)
+  String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -43,12 +47,42 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife</artifactId>
-  <version>6.1.0</version>
+  <version>7.0.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton:butterknife:6.1.0'
+compile 'com.jakewharton:butterknife:7.0.1'
+```
+
+For the SNAPSHOT version:
+```xml
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife</artifactId>
+  <version>7.0.2-SNAPSHOT</version>
+</dependency>
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife-compiler</artifactId>
+  <version>7.0.2-SNAPSHOT</version>
+  <optional>true</optional>
+</dependency>
+```
+or Gradle:
+```groovy
+buildscript {
+  dependencies {
+    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.6'
+  }
+}
+
+apply plugin: 'com.neenbedankt.android-apt'
+
+dependencies {
+  compile 'com.jakewharton:butterknife:7.0.2-SNAPSHOT'
+  apt 'com.jakewharton:butterknife-compiler:7.0.2-SNAPSHOT'
+}
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/butterknife-compiler/pom.xml b/butterknife-compiler/pom.xml
new file mode 100644
index 00000000..f5dded40
--- /dev/null
+++ b/butterknife-compiler/pom.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.jakewharton</groupId>
+    <artifactId>butterknife-parent</artifactId>
+    <version>7.0.2-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>butterknife-compiler</artifactId>
+  <name>Butter Knife Compiler</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.jakewharton</groupId>
+      <artifactId>butterknife</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>javapoet</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.easytesting</groupId>
+      <artifactId>fest-assert-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>fest-android</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.robolectric</groupId>
+      <artifactId>robolectric</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.google.testing.compile</groupId>
+      <artifactId>compile-testing</artifactId>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
+      <groupId>com.google.android</groupId>
+      <artifactId>android</artifactId>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <compilerArgument>-proc:none</compilerArgument>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
new file mode 100644
index 00000000..50ecb2e7
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
@@ -0,0 +1,400 @@
+package butterknife.internal;
+
+import android.content.res.Resources;
+import android.graphics.BitmapFactory;
+import android.view.View;
+import butterknife.ButterKnife;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.TypeVariableName;
+import com.squareup.javapoet.WildcardTypeName;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
+final class BindingClass {
+  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
+  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
+  private final String classPackage;
+  private final String className;
+  private final String targetClass;
+  private String parentViewBinder;
+
+  BindingClass(String classPackage, String className, String targetClass) {
+    this.classPackage = classPackage;
+    this.className = className;
+    this.targetClass = targetClass;
+  }
+
+  void addBitmap(FieldBitmapBinding binding) {
+    bitmapBindings.add(binding);
+  }
+
+  void addField(int id, FieldViewBinding binding) {
+    getOrCreateViewBindings(id).addFieldBinding(binding);
+  }
+
+  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
+    collectionBindings.put(binding, ids);
+  }
+
+  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    ViewBindings viewBindings = getOrCreateViewBindings(id);
+    if (viewBindings.hasMethodBinding(listener, method)
+        && !"void".equals(method.returnType())) {
+      return false;
+    }
+    viewBindings.addMethodBinding(listener, method, binding);
+    return true;
+  }
+
+  void addResource(FieldResourceBinding binding) {
+    resourceBindings.add(binding);
+  }
+
+  void setParentViewBinder(String parentViewBinder) {
+    this.parentViewBinder = parentViewBinder;
+  }
+
+  ViewBindings getViewBinding(int id) {
+    return viewIdMap.get(id);
+  }
+
+  private ViewBindings getOrCreateViewBindings(int id) {
+    ViewBindings viewId = viewIdMap.get(id);
+    if (viewId == null) {
+      viewId = new ViewBindings(id);
+      viewIdMap.put(id, viewId);
+    }
+    return viewId;
+  }
+
+  String getFqcn() {
+    return classPackage + "." + className;
+  }
+
+  JavaFile brewJava() {
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC)
+        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+
+    if (parentViewBinder != null) {
+      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
+          TypeVariableName.get("T")));
+    } else {
+      result.addSuperinterface(
+          ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),
+              TypeVariableName.get("T")));
+    }
+
+    result.addMethod(createBindMethod());
+    result.addMethod(createUnbindMethod());
+
+    return JavaFile.builder(classPackage, result.build())
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
+  }
+
+  private MethodSpec createBindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(ButterKnife.Finder.class, "finder", FINAL)
+        .addParameter(TypeVariableName.get("T"), "target", FINAL)
+        .addParameter(Object.class, "source");
+
+    // Emit a call to the superclass binder, if any.
+    if (parentViewBinder != null) {
+      result.addStatement("super.bind(finder, target, source)");
+    }
+
+    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
+      // Local variable in which all views will be temporarily stored.
+      result.addStatement("$T view", View.class);
+
+      // Loop over each view bindings and emit it.
+      for (ViewBindings bindings : viewIdMap.values()) {
+        addViewBindings(result, bindings);
+      }
+
+      // Loop over each collection binding and emit it.
+      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+        emitCollectionBinding(result, entry.getKey(), entry.getValue());
+      }
+    }
+
+    if (requiresResources()) {
+      result.addStatement("$T res = finder.getContext(source).getResources()", Resources.class);
+
+      if (!bitmapBindings.isEmpty()) {
+        for (FieldBitmapBinding binding : bitmapBindings) {
+          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
+              BitmapFactory.class, binding.getId());
+        }
+      }
+
+      if (!resourceBindings.isEmpty()) {
+        for (FieldResourceBinding binding : resourceBindings) {
+          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
+              binding.getId());
+        }
+      }
+    }
+
+    return result.build();
+  }
+
+  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
+      int[] ids) {
+    String ofName;
+    switch (binding.getKind()) {
+      case ARRAY:
+        ofName = "arrayOf";
+        break;
+      case LIST:
+        ofName = "listOf";
+        break;
+      default:
+        throw new IllegalStateException("Unknown kind: " + binding.getKind());
+    }
+
+    CodeBlock.Builder builder = CodeBlock.builder();
+    for (int i = 0; i < ids.length; i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
+      builder.add("\nfinder.<$T>$L(source, $L, $S)", ClassName.bestGuess(binding.getType()),
+          findMethod, ids[i], asHumanDescription(Collections.singleton(binding)));
+    }
+
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), ButterKnife.Finder.class,
+        ofName, builder.build());
+  }
+
+  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
+    if (requiredViewBindings.isEmpty()) {
+      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
+    } else {
+      if (bindings.getId() == View.NO_ID) {
+        result.addStatement("view = target", bindings.getId());
+      } else {
+        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
+            asHumanDescription(requiredViewBindings));
+      }
+    }
+
+    addFieldBindings(result, bindings);
+    addMethodBindings(result, bindings);
+  }
+
+  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.requiresCast()) {
+        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
+            bindings.getId(), asHumanDescription(fieldBindings));
+      } else {
+        result.addStatement("target.$L = view", fieldBinding.getName());
+      }
+    }
+  }
+
+  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      result.beginControlFlow("if (view != null)");
+    }
+
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
+        : classMethodBindings.entrySet()) {
+      ListenerClass listener = e.getKey();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
+
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
+
+      for (ListenerMethod method : getListenerMethods(listener)) {
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
+        String[] parameterTypes = method.parameters();
+        for (int i = 0, count = parameterTypes.length; i < count; i++) {
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+        }
+
+        boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
+        if (hasReturnType) {
+          builder.add("return ");
+        }
+
+        if (methodBindings.containsKey(method)) {
+          for (MethodViewBinding binding : methodBindings.get(method)) {
+            builder.add("target.$L(", binding.getName());
+            List<Parameter> parameters = binding.getParameters();
+            String[] listenerParameters = method.parameters();
+            for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
+              Parameter parameter = parameters.get(i);
+              int listenerPosition = parameter.getListenerPosition();
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n",
+                    bestGuess(parameter.getType()), listenerPosition, method.name(),
+                    listenerPosition, binding.getName(), i);
+              } else {
+                builder.add("p$L", listenerPosition);
+              }
+            }
+            builder.add(");\n");
+          }
+        } else if (hasReturnType) {
+          builder.add("$L;\n", method.defaultReturn());
+        }
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
+      }
+
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) view).$L($L)", bestGuess(listener.targetType()),
+            listener.setter(), callback.build());
+      } else {
+        result.addStatement("view.$L($L)", listener.setter(), callback.build());
+      }
+    }
+
+    if (needsNullChecked) {
+      result.endControlFlow();
+    }
+  }
+
+  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  private MethodSpec createUnbindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(TypeVariableName.get("T"), "target");
+
+    if (parentViewBinder != null) {
+      result.addStatement("super.unbind(target)");
+    }
+    for (ViewBindings bindings : viewIdMap.values()) {
+      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
+        result.addStatement("target.$L = null", fieldBinding.getName());
+      }
+    }
+    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
+      result.addStatement("target.$L = null", fieldCollectionBinding.getName());
+    }
+
+    return result.build();
+  }
+
+  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
+    Iterator<? extends ViewBinding> iterator = bindings.iterator();
+    switch (bindings.size()) {
+      case 1:
+        return iterator.next().getDescription();
+      case 2:
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
+      default:
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          if (i != 0) {
+            builder.append(", ");
+          }
+          if (i == count - 1) {
+            builder.append("and ");
+          }
+          builder.append(iterator.next().getDescription());
+        }
+        return builder.toString();
+    }
+  }
+
+  static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
+    }
+  }
+
+  private boolean requiresResources() {
+    return !bitmapBindings.isEmpty() || !resourceBindings.isEmpty();
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
similarity index 73%
rename from butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
rename to butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index 37d8b1f7..15e28968 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -1,8 +1,15 @@
 package butterknife.internal;
 
 import android.view.View;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
 import butterknife.OnCheckedChanged;
 import butterknife.OnChildClick;
 import butterknife.OnClick;
@@ -18,16 +25,9 @@
 import butterknife.OnPageChange;
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
-import butterknife.ResourceBool;
-import butterknife.ResourceColor;
-import butterknife.ResourceDimen;
-import butterknife.ResourceDrawable;
-import butterknife.ResourceInt;
-import butterknife.ResourceString;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
-import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -57,8 +57,10 @@
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
-import javax.tools.JavaFileObject;
 
+import static butterknife.internal.InternalKeys.ANDROID_PREFIX;
+import static butterknife.internal.InternalKeys.BINDING_CLASS_SUFFIX;
+import static butterknife.internal.InternalKeys.JAVA_PREFIX;
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -67,13 +69,13 @@
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 public final class ButterKnifeProcessor extends AbstractProcessor {
-  public static final String SUFFIX = "$$ViewBinder";
-  public static final String ANDROID_PREFIX = "android.";
-  public static final String JAVA_PREFIX = "java.";
   static final String VIEW_TYPE = "android.view.View";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
+  private static final String BITMAP_TYPE = "android.graphics.Bitmap";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
+  private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
+  private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
   private static final String LIST_TYPE = List.class.getCanonicalName();
   private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
       OnCheckedChanged.class, //
@@ -106,21 +108,22 @@
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
-    Set<String> types = new LinkedHashSet<String>();
+    Set<String> types = new LinkedHashSet<>();
 
-    types.add(FindView.class.getCanonicalName());
-    types.add(FindViews.class.getCanonicalName());
+    types.add(Bind.class.getCanonicalName());
 
     for (Class<? extends Annotation> listener : LISTENERS) {
       types.add(listener.getCanonicalName());
     }
 
-    types.add(ResourceBool.class.getCanonicalName());
-    types.add(ResourceColor.class.getCanonicalName());
-    types.add(ResourceDimen.class.getCanonicalName());
-    types.add(ResourceDrawable.class.getCanonicalName());
-    types.add(ResourceInt.class.getCanonicalName());
-    types.add(ResourceString.class.getCanonicalName());
+    types.add(BindArray.class.getCanonicalName());
+    types.add(BindBitmap.class.getCanonicalName());
+    types.add(BindBool.class.getCanonicalName());
+    types.add(BindColor.class.getCanonicalName());
+    types.add(BindDimen.class.getCanonicalName());
+    types.add(BindDrawable.class.getCanonicalName());
+    types.add(BindInt.class.getCanonicalName());
+    types.add(BindString.class.getCanonicalName());
 
     return types;
   }
@@ -133,11 +136,7 @@
       BindingClass bindingClass = entry.getValue();
 
       try {
-        JavaFileObject jfo = filer.createSourceFile(bindingClass.getFqcn(), typeElement);
-        Writer writer = jfo.openWriter();
-        writer.write(bindingClass.brewJava());
-        writer.flush();
-        writer.close();
+        bindingClass.brewJava().writeTo(filer);
       } catch (IOException e) {
         error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
             e.getMessage());
@@ -148,83 +147,92 @@
   }
 
   private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();
-    Set<String> erasedTargetNames = new LinkedHashSet<String>();
+    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
+    Set<String> erasedTargetNames = new LinkedHashSet<>();
 
-    // Process each @FindView element.
-    for (Element element : env.getElementsAnnotatedWith(FindView.class)) {
+    // Process each @Bind element.
+    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
       try {
-        parseFindView(element, targetClassMap, erasedTargetNames);
+        parseBind(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, FindView.class, e);
+        logParsingError(element, Bind.class, e);
       }
     }
 
-    // Process each @FindViews element.
-    for (Element element : env.getElementsAnnotatedWith(FindViews.class)) {
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    }
+
+    // Process each @BindArray element.
+    for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       try {
-        parseFindViews(element, targetClassMap, erasedTargetNames);
+        parseResourceArray(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, FindViews.class, e);
+        logParsingError(element, BindArray.class, e);
       }
     }
 
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    // Process each @BindBitmap element.
+    for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
+      try {
+        parseResourceBitmap(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBitmap.class, e);
+      }
     }
 
-    // Process each @ResourceBool element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceBool.class)) {
+    // Process each @BindBool element.
+    for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
       try {
         parseResourceBool(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceBool.class, e);
+        logParsingError(element, BindBool.class, e);
       }
     }
 
-    // Process each @ResourceColor element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceColor.class)) {
+    // Process each @BindColor element.
+    for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
       try {
         parseResourceColor(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceColor.class, e);
+        logParsingError(element, BindColor.class, e);
       }
     }
 
-    // Process each @ResourceDimen element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceDimen.class)) {
+    // Process each @BindDimen element.
+    for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
       try {
         parseResourceDimen(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceDimen.class, e);
+        logParsingError(element, BindDimen.class, e);
       }
     }
 
-    // Process each @ResourceDrawable element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceDrawable.class)) {
+    // Process each @BindDrawable element.
+    for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
       try {
         parseResourceDrawable(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceDrawable.class, e);
+        logParsingError(element, BindDrawable.class, e);
       }
     }
 
-    // Process each @ResourceInt element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceInt.class)) {
+    // Process each @BindInt element.
+    for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
       try {
         parseResourceInt(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceInt.class, e);
+        logParsingError(element, BindInt.class, e);
       }
     }
 
-    // Process each @ResourceString element.
-    for (Element element : env.getElementsAnnotatedWith(ResourceString.class)) {
+    // Process each @BindString element.
+    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
       try {
         parseResourceString(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, ResourceString.class, e);
+        logParsingError(element, BindString.class, e);
       }
     }
 
@@ -232,7 +240,7 @@
     for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
       String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
       if (parentClassFqcn != null) {
-        entry.getValue().setParentViewBinder(parentClassFqcn + SUFFIX);
+        entry.getValue().setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);
       }
     }
 
@@ -298,7 +306,29 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseFindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    // Verify common generated code restrictions.
+    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
+        || isBindingInWrongPackage(Bind.class, element)) {
+      return;
+    }
+
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
+      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
+          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
+          element.getSimpleName());
+    } else {
+      parseBindOne(element, targetClassMap, erasedTargetNames);
+    }
+  }
+
+  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -310,19 +340,17 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
       elementType = typeVariable.getUpperBound();
     }
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@FindView fields must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindView.class, element);
-
-    // Check for the other field annotation.
-    if (element.getAnnotation(FindViews.class) != null) {
-      error(element, "Only one of @FindView and @FindViews is allowed. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+    // Assemble information on the field.
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length != 1) {
+      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
+          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
       hasError = true;
     }
 
@@ -330,20 +358,17 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
       return;
     }
 
-    // Assemble information on the field.
-    int id = element.getAnnotation(FindView.class).value();
-
+    int id = ids[0];
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
-      ViewBindings viewBindings = bindingClass.getViewInjection(id);
+      ViewBindings viewBindings = bindingClass.getViewBinding(id);
       if (viewBindings != null) {
         Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
         if (iterator.hasNext()) {
           FieldViewBinding existingBinding = iterator.next();
-          error(element,
-              "Attempt to use @FindView for an already bound ID %d on '%s'. (%s.%s)", id,
-              existingBinding.getName(), enclosingElement.getQualifiedName(),
-              element.getSimpleName());
+          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+              Bind.class.getSimpleName(), id, existingBinding.getName(),
+              enclosingElement.getQualifiedName(), element.getSimpleName());
           return;
         }
       }
@@ -353,7 +378,7 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
 
     String name = element.getSimpleName().toString();
     String type = elementType.toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
     FieldViewBinding binding = new FieldViewBinding(name, type, required);
     bindingClass.addField(id, binding);
@@ -362,7 +387,7 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
     erasedTargetNames.add(enclosingElement.toString());
   }
 
-  private void parseFindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -371,7 +396,7 @@ private void parseFindViews(Element element, Map<TypeElement, BindingClass> targ
     TypeMirror elementType = element.asType();
     String erasedType = doubleErasure(elementType);
     TypeMirror viewType = null;
-    FieldCollectionViewBinding.Kind kind = null;
+    FieldCollectionViewBinding.Kind kind;
     if (elementType.getKind() == TypeKind.ARRAY) {
       ArrayType arrayType = (ArrayType) elementType;
       viewType = arrayType.getComponentType();
@@ -380,17 +405,16 @@ private void parseFindViews(Element element, Map<TypeElement, BindingClass> targ
       DeclaredType declaredType = (DeclaredType) elementType;
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
       if (typeArguments.size() != 1) {
-        error(element, "@FindViews List must have a generic component. (%s.%s)",
-            enclosingElement.getQualifiedName(), element.getSimpleName());
+        error(element, "@%s List must have a generic component. (%s.%s)",
+            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
         hasError = true;
       } else {
         viewType = typeArguments.get(0);
       }
       kind = FieldCollectionViewBinding.Kind.LIST;
     } else {
-      error(element, "@FindViews must be a List or array. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
+      throw new AssertionError();
     }
     if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) viewType;
@@ -399,37 +423,33 @@ private void parseFindViews(Element element, Map<TypeElement, BindingClass> targ
 
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@FindViews type must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindViews.class, element);
-
     if (hasError) {
       return;
     }
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(FindViews.class).value();
+    int[] ids = element.getAnnotation(Bind.class).value();
     if (ids.length == 0) {
-      error(element, "@FindViews must specify at least one ID. (%s.%s)",
+      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
     }
 
     Integer duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@FindViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
+          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
     }
 
     assert viewType != null; // Always false as hasError would have been true.
     String type = viewType.toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
@@ -446,14 +466,14 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
     // Verify that the target type is bool.
     if (element.asType().getKind() != TypeKind.BOOLEAN) {
       error(element, "@%s field type must be 'boolean'. (%s.%s)",
-          ResourceBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          BindBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceBool.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceBool.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindBool.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBool.class, element);
 
     if (hasError) {
       return;
@@ -461,7 +481,7 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceBool.class).value();
+    int id = element.getAnnotation(BindBool.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
@@ -482,14 +502,14 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
       isColorStateList = true;
     } else if (elementType.getKind() != TypeKind.INT) {
       error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
-          ResourceColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          BindColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceColor.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceColor.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindColor.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindColor.class, element);
 
     if (hasError) {
       return;
@@ -497,7 +517,7 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceColor.class).value();
+    int id = element.getAnnotation(BindColor.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
@@ -519,14 +539,14 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
       isInt = true;
     } else if (elementType.getKind() != TypeKind.FLOAT) {
       error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
-          ResourceDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          BindDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceDimen.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceDimen.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindDimen.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDimen.class, element);
 
     if (hasError) {
       return;
@@ -534,7 +554,7 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceDimen.class).value();
+    int id = element.getAnnotation(BindDimen.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
@@ -544,6 +564,38 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
     erasedTargetNames.add(enclosingElement.toString());
   }
 
+  private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Bitmap.
+    if (!BITMAP_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Bitmap'. (%s.%s)",
+          BindBitmap.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBitmap.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBitmap.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBitmap.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
+    bindingClass.addBitmap(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
   private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
@@ -552,14 +604,14 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
     // Verify that the target type is Drawable.
     if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
       error(element, "@%s field type must be 'Drawable'. (%s.%s)",
-          ResourceDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          BindDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceDrawable.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceDrawable.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindDrawable.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDrawable.class, element);
 
     if (hasError) {
       return;
@@ -567,7 +619,7 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceDrawable.class).value();
+    int id = element.getAnnotation(BindDrawable.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
@@ -583,14 +635,14 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
 
     // Verify that the target type is int.
     if (element.asType().getKind() != TypeKind.INT) {
-      error(element, "@%s field type must be 'int'. (%s.%s)", ResourceInt.class.getSimpleName(),
+      error(element, "@%s field type must be 'int'. (%s.%s)", BindInt.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceInt.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceInt.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindInt.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindInt.class, element);
 
     if (hasError) {
       return;
@@ -598,7 +650,7 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceInt.class).value();
+    int id = element.getAnnotation(BindInt.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
@@ -615,14 +667,14 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
     // Verify that the target type is String.
     if (!"java.lang.String".equals(element.asType().toString())) {
       error(element, "@%s field type must be 'String'. (%s.%s)",
-          ResourceString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
           element.getSimpleName());
       hasError = true;
     }
 
     // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(ResourceString.class, "fields", element);
-    hasError |= isBindingInWrongPackage(ResourceString.class, element);
+    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindString.class, element);
 
     if (hasError) {
       return;
@@ -630,7 +682,7 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(ResourceString.class).value();
+    int id = element.getAnnotation(BindString.class).value();
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
@@ -639,9 +691,66 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
     erasedTargetNames.add(enclosingElement.toString());
   }
 
+  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is supported.
+    String methodName = getArrayResourceMethodName(element);
+    if (methodName == null) {
+      error(element,
+          "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
+          BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindArray.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindArray.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindArray.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  /**
+   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * binding, null if the element type is not supported.
+   */
+  private static String getArrayResourceMethodName(Element element) {
+    TypeMirror typeMirror = element.asType();
+    if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
+      return "obtainTypedArray";
+    }
+    if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
+      ArrayType arrayType = (ArrayType) typeMirror;
+      String componentType = arrayType.getComponentType().toString();
+      if ("java.lang.String".equals(componentType)) {
+        return "getStringArray";
+      } else if ("int".equals(componentType)) {
+        return "getIntArray";
+      } else if ("java.lang.CharSequence".equals(componentType)) {
+        return "getTextArray";
+      }
+    }
+    return null;
+  }
+
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
   private static Integer findDuplicate(int[] array) {
-    Set<Integer> seenElements = new LinkedHashSet<Integer>();
+    Set<Integer> seenElements = new LinkedHashSet<>();
 
     for (int element : array) {
       if (!seenElements.add(element)) {
@@ -700,7 +809,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
     int[] ids = (int[]) annotationValue.invoke(annotation);
     String name = executableElement.getSimpleName().toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
     // Verify that the method and its containing class are accessible via generated code.
     boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
@@ -725,7 +834,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       if (id == View.NO_ID) {
         if (ids.length == 1) {
           if (!required) {
-            error(element, "ID free binding must not be annotated with @Nullable. (%s.%s)",
+            error(element, "ID-free binding must not be annotated with @Nullable. (%s.%s)",
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -736,7 +845,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
               && !isInterface(enclosingElement.asType())) {
             error(element, "@%s annotation without an ID may only be used with an object of type "
                     + "\"%s\" or an interface. (%s.%s)",
-                    annotationClass.getSimpleName(), targetType,
+                annotationClass.getSimpleName(), targetType,
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -878,17 +987,15 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
   }
 
   private boolean isInterface(TypeMirror typeMirror) {
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    return ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
+    return typeMirror instanceof DeclaredType
+        && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
   }
 
   private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     if (otherType.equals(typeMirror.toString())) {
       return true;
     }
-    if (!(typeMirror instanceof DeclaredType)) {
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
       return false;
     }
     DeclaredType declaredType = (DeclaredType) typeMirror;
@@ -930,7 +1037,7 @@ private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targe
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, classPackage) + SUFFIX;
+      String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
 
       bindingClass = new BindingClass(classPackage, className, targetType);
       targetClassMap.put(enclosingElement, bindingClass);
@@ -984,7 +1091,7 @@ private static boolean hasAnnotationWithName(Element element, String simpleName)
     return false;
   }
 
-  private static boolean isRequiredInjection(Element element) {
+  private static boolean isRequiredBinding(Element element) {
     return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
new file mode 100644
index 00000000..f160a641
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
@@ -0,0 +1,19 @@
+package butterknife.internal;
+
+final class FieldBitmapBinding {
+  private final int id;
+  private final String name;
+
+  FieldBitmapBinding(int id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
diff --git a/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
diff --git a/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java
diff --git a/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
similarity index 96%
rename from butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
index c6aaa2ba..fede4836 100644
--- a/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/MethodViewBinding.java
@@ -11,7 +11,7 @@
 
   MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
-    this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
+    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
   }
 
diff --git a/butterknife/src/main/java/butterknife/internal/Parameter.java b/butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/Parameter.java
rename to butterknife-compiler/src/main/java/butterknife/internal/Parameter.java
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/ViewBinding.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/ViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/internal/ViewBinding.java
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
similarity index 85%
rename from butterknife/src/main/java/butterknife/internal/ViewBindings.java
rename to butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
index fc4a3a74..7a9e82b4 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBindings.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
@@ -10,10 +10,9 @@
 
 final class ViewBindings {
   private final int id;
-  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<FieldViewBinding>();
+  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
   private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
-      methodBindings = new LinkedHashMap<ListenerClass,
-      Map<ListenerMethod, Set<MethodViewBinding>>>();
+      methodBindings = new LinkedHashMap<>();
 
   ViewBindings(int id) {
     this.id = id;
@@ -41,13 +40,13 @@ public void addMethodBinding(ListenerClass listener, ListenerMethod method,
     Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
     Set<MethodViewBinding> set = null;
     if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, Set<MethodViewBinding>>();
+      methods = new LinkedHashMap<>();
       methodBindings.put(listener, methods);
     } else {
       set = methods.get(method);
     }
     if (set == null) {
-      set = new LinkedHashSet<MethodViewBinding>();
+      set = new LinkedHashSet<>();
       methods.put(method, set);
     }
     set.add(binding);
@@ -58,7 +57,7 @@ public void addFieldBinding(FieldViewBinding fieldBinding) {
   }
 
   public List<ViewBinding> getRequiredBindings() {
-    List<ViewBinding> requiredViewBindings = new ArrayList<ViewBinding>();
+    List<ViewBinding> requiredViewBindings = new ArrayList<>();
     for (FieldViewBinding fieldBinding : fieldBindings) {
       if (fieldBinding.isRequired()) {
         requiredViewBindings.add(fieldBinding);
diff --git a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/butterknife-compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
similarity index 100%
rename from butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
rename to butterknife-compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
index 2ab10a9c..f93d3ab3 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -7,8 +7,7 @@
 import android.widget.CompoundButton;
 import android.widget.ExpandableListView;
 import android.widget.TextView;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
 import butterknife.OnCheckedChanged;
 import butterknife.OnChildClick;
 import butterknife.OnClick;
@@ -31,7 +30,6 @@
 import java.util.List;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +41,7 @@
 
     ASSERT.about(javaSource())
         .that(JavaFileObjects.forSourceString("butterknife.internal.AllTheThingsTest", content))
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -51,25 +49,25 @@
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @FindView(10) View findView;
-  @Nullable @FindView(20) View optinalFindView;
+  @Bind(10) View findView;
+  @Nullable @Bind(20) View optionalBind;
 
-  @FindView(30) TextView findTextView;
-  @Nullable @FindView(40) TextView optinalFIndTextView;
+  @Bind(30) TextView findTextView;
+  @Nullable @Bind(40) TextView optionalFIndTextView;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @FindViews(50) List<View> findViewsListOne;
-  @FindViews({ 60, 70 }) List<View> findViewsListMultiple;
+  @Bind(50) List<View> findViewsListOne;
+  @Bind({ 60, 70 }) List<View> findViewsListMultiple;
 
-  @FindViews(80) List<TextView> findTextViewsListOne;
-  @FindViews({ 90, 100 }) List<TextView> findTextViewsListMultiple;
+  @Bind(80) List<TextView> findTextViewsListOne;
+  @Bind({ 90, 100 }) List<TextView> findTextViewsListMultiple;
 
-  @FindViews(110) View[] findViewsArrayOne;
-  @FindViews({ 120, 130 }) View[] findViewsArrayMultiple;
+  @Bind(110) View[] findViewsArrayOne;
+  @Bind({ 120, 130 }) View[] findViewsArrayMultiple;
 
-  @FindViews(140) TextView[] findTextViewsArrayOne;
-  @FindViews({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
+  @Bind(140) TextView[] findTextViewsArrayOne;
+  @Bind({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
new file mode 100644
index 00000000..7ac81dbd
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindArrayTest.java
@@ -0,0 +1,167 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindArrayTest {
+  @Test public void stringArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getStringArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void intArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) int[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getIntArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void textArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) CharSequence[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getTextArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "import android.content.res.TypedArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) TypedArray one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.obtainTypedArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
new file mode 100644
index 00000000..eefc4944
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBitmapTest.java
@@ -0,0 +1,64 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBitmapTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.Bitmap;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) Bitmap one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import android.graphics.BitmapFactory;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = BitmapFactory.decodeResource(res, 1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBitmap() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
index 86fa6326..4b6ff128 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceBoolTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindBoolTest.java
@@ -5,18 +5,17 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceBoolTest {
+public class BindBoolTest {
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceBool;",
+        "import butterknife.BindBool;",
         "public class Test extends Activity {",
-        "  @ResourceBool(1) boolean one;",
+        "  @BindBool(1) boolean one;",
         "}"
     ));
 
@@ -24,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getBoolean(1);",
             "  }",
@@ -37,7 +37,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -47,16 +47,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceBool;",
+        "import butterknife.BindBool;",
         "public class Test extends Activity {",
-        "  @ResourceBool(1) String one;",
+        "  @BindBool(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceBool field type must be 'boolean'. (test.Test.one)")
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceColorTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceColorTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
index 0ec0bd21..2a999c54 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceColorTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindColorTest.java
@@ -5,18 +5,17 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceColorTest {
+public class BindColorTest {
   @Test public void simpleInt() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceColor;",
+        "import butterknife.BindColor;",
         "public class Test extends Activity {",
-        "  @ResourceColor(1) int one;",
+        "  @BindColor(1) int one;",
         "}"
     ));
 
@@ -24,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColor(1);",
             "  }",
@@ -37,7 +37,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -48,9 +48,9 @@
         "package test;",
         "import android.app.Activity;",
         "import android.content.res.ColorStateList;",
-        "import butterknife.ResourceColor;",
+        "import butterknife.BindColor;",
         "public class Test extends Activity {",
-        "  @ResourceColor(1) ColorStateList one;",
+        "  @BindColor(1) ColorStateList one;",
         "}"
     ));
 
@@ -58,10 +58,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getColorStateList(1);",
             "  }",
@@ -71,7 +72,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -81,16 +82,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceColor;",
+        "import butterknife.BindColor;",
         "public class Test extends Activity {",
-        "  @ResourceColor(1) String one;",
+        "  @BindColor(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
index fca8cf15..2710dd98 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceDimenTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDimenTest.java
@@ -5,18 +5,17 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceDimenTest {
+public class BindDimenTest {
   @Test public void simpleFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
+        "import butterknife.BindDimen;",
         "public class Test extends Activity {",
-        "  @ResourceDimen(1) float one;",
+        "  @BindDimen(1) float one;",
         "}"
     ));
 
@@ -24,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimension(1);",
             "  }",
@@ -37,7 +37,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -47,9 +47,9 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
+        "import butterknife.BindDimen;",
         "public class Test extends Activity {",
-        "  @ResourceDimen(1) int one;",
+        "  @BindDimen(1) int one;",
         "}"
     ));
 
@@ -57,10 +57,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDimensionPixelSize(1);",
             "  }",
@@ -70,7 +71,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -80,16 +81,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceDimen;",
+        "import butterknife.BindDimen;",
         "public class Test extends Activity {",
-        "  @ResourceDimen(1) String one;",
+        "  @BindDimen(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
index 353f1d08..c503fbf8 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceDrawableTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindDrawableTest.java
@@ -5,19 +5,18 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceDrawableTest {
+public class BindDrawableTest {
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.graphics.drawable.Drawable;",
-        "import butterknife.ResourceDrawable;",
+        "import butterknife.BindDrawable;",
         "public class Test extends Activity {",
-        "  @ResourceDrawable(1) Drawable one;",
+        "  @BindDrawable(1) Drawable one;",
         "}"
     ));
 
@@ -25,10 +24,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getDrawable(1);",
             "  }",
@@ -38,7 +38,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -48,16 +48,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceDrawable;",
+        "import butterknife.BindDrawable;",
         "public class Test extends Activity {",
-        "  @ResourceDrawable(1) String one;",
+        "  @BindDrawable(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceDrawable field type must be 'Drawable'. (test.Test.one)")
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceIntTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceIntTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
index 1df98577..ec9f41fb 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceIntTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindIntTest.java
@@ -5,18 +5,17 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceIntTest {
+public class BindIntTest {
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceInt;",
+        "import butterknife.BindInt;",
         "public class Test extends Activity {",
-        "  @ResourceInt(1) int one;",
+        "  @BindInt(1) int one;",
         "}"
     ));
 
@@ -24,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getInteger(1);",
             "  }",
@@ -37,7 +37,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -47,16 +47,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceInt;",
+        "import butterknife.BindInt;",
         "public class Test extends Activity {",
-        "  @ResourceInt(1) String one;",
+        "  @BindInt(1) String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceInt field type must be 'int'. (test.Test.one)")
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/ResourceStringTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/ResourceStringTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
index 66c1c28b..3d4486cb 100644
--- a/butterknife/src/test/java/butterknife/internal/ResourceStringTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindStringTest.java
@@ -5,18 +5,17 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
-public class ResourceStringTest {
+public class BindStringTest {
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceString;",
+        "import butterknife.BindString;",
         "public class Test extends Activity {",
-        "  @ResourceString(1) String one;",
+        "  @BindString(1) String one;",
         "}"
     ));
 
@@ -24,10 +23,11 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.content.res.Resources;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    Resources res = finder.getContext(source).getResources();",
             "    target.one = res.getString(1);",
             "  }",
@@ -37,7 +37,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -47,16 +47,16 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterknife.ResourceString;",
+        "import butterknife.BindString;",
         "public class Test extends Activity {",
-        "  @ResourceString(1) boolean one;",
+        "  @BindString(1) boolean one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining("@ResourceString field type must be 'String'. (test.Test.one)")
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
         .in(source).onLine(5);
   }
 }
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
new file mode 100644
index 00000000..db8633b4
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/BindTest.java
@@ -0,0 +1,959 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+  @Test public void bindingViewTooManyIdsFail() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2}) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @Bind(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.EditText;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "class Test<T extends TextView> extends Activity {",
+        "    @Bind(1) T thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import butterknife.OnClick;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View thing1;",
+        "  @OnClick(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
+            "    target.thing1 = view;",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing1 = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) public View thing1;",
+        "  @Bind(2) View thing2;",
+        "  @Bind(3) protected View thing3;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @interface Nullable {}",
+        "  @Nullable @Bind(1) View view;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findOptionalView(source, 1, null);",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T> extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test<String> {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test<Object> {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package java.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package android.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  private static class Inner {",
+        "    @Bind(1) View thing;",
+        "  }",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public interface Test {",
+        "    @Bind(1) View thing = null;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) private View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) static View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing1;",
+        "    @Bind(1) View thing2;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsRootViewBindingWithBadTarget() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnItemClick;",
+            "public class Test extends View {",
+            "  @OnItemClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining((
+            "@OnItemClick annotation without an ID may only be used with an object of type "
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(6);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnClick;",
+            "public class Test extends View {",
+            "  @interface Nullable {}",
+            "  @Nullable @OnClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            ("ID-free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(7);
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) View[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) T[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) TextView[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.arrayOf(",
+            "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) List<T> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @interface Nullable {}",
+        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = ButterKnife.Finder.listOf(",
+            "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind({}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind(1) List thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.Deque;",
+        "public class Test {",
+        "  @Bind(1) Deque<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @Bind(1) List<String> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String[] thing;",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 1}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index cecb8eec..28884887 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -25,14 +24,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.CompoundButton;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(android.widget.CompoundButton p0, boolean p1) {",
+            "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
+            "      @Override public void onCheckedChanged(CompoundButton p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -43,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
similarity index 70%
rename from butterknife/src/test/java/butterknife/internal/OnClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
index 07998420..82a6f1e8 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnClickTest.java
@@ -6,12 +6,11 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -24,14 +23,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -42,13 +43,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickMultipleInjections() {
+  @Test public void onClickMultipleBindings() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
@@ -64,37 +65,33 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff1();",
-            "          target.doStuff2();",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff1();",
+            "        target.doStuff2();",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -105,10 +102,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.FindView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @FindView(1) View view;",
+        "  @Bind(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
@@ -116,15 +113,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -136,7 +135,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -156,7 +155,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -182,39 +181,43 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.Button;",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click0();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click1(p0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2(finder.<android.widget.TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click2(finder.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3(finder.<android.widget.Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click3(finder.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click4(finder.<test.Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click4(finder.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
             "      }",
             "    });",
             "  }",
@@ -224,7 +227,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -245,26 +248,28 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
@@ -275,7 +280,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -295,15 +300,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
-            "      view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(android.view.View p0) {",
+            "      view.setOnClickListener(new DebouncingOnClickListener() {",
+            "        @Override public void doClick(View p0) {",
             "          target.doStuff();",
             "        }",
             "      });",
@@ -315,7 +322,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -326,11 +333,11 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.FindView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
-        "  @FindView(1) View view;",
+        "  @Bind(1) View view;",
         "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
@@ -338,15 +345,17 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -358,7 +367,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -374,7 +383,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -391,7 +400,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -410,7 +419,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -428,7 +437,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -446,7 +455,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -464,7 +473,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnClick method arguments. (test.Test.doStuff)",
@@ -493,7 +502,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
@@ -510,7 +519,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
@@ -529,7 +538,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
index d484cd46..53cd6773 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -24,15 +23,18 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.KeyEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(android.widget.TextView p0, int p1, android.view.KeyEvent p2) {",
+            "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
+            "      @Override public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {",
             "        return target.doStuff();",
             "      }",
             "    });",
@@ -43,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
similarity index 68%
rename from butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
index ee06ee16..077c8df2 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -25,14 +24,15 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(android.view.View p0, boolean p1) {",
+            "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
+            "      @Override public void onFocusChange(View p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
@@ -43,7 +43,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
similarity index 62%
rename from butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
index b47c649f..99a4032c 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -2,17 +2,15 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
 public class OnItemClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onItemClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -25,19 +23,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -45,13 +43,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameters() {
+  @Test public void onItemClickBindingWithParameters() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -71,19 +69,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(p0, p1, p2, p3);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(p0, p1, p2, p3);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -91,13 +89,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubset() {
+  @Test public void onItemClickBindingWithParameterSubset() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -115,19 +113,20 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -135,13 +134,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -159,19 +158,20 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -179,13 +179,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickRootViewInjection() {
+  @Test public void onClickRootViewBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.content.Context;",
@@ -202,23 +202,19 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "          android.widget.AdapterView<?> p0,",
-            "          android.view.View p1,",
-            "          int p2,",
-            "          long p3",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -226,7 +222,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -243,7 +239,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -265,7 +261,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
similarity index 66%
rename from butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
index 64233688..793a4848 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -25,14 +24,16 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
+            "      @Override public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {",
             "        return target.doStuff();",
             "      }",
             "    });",
@@ -43,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
new file mode 100644
index 00000000..a8d10215
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -0,0 +1,208 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
+public class OnItemSelectedTest {
+  @Test public void defaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nonDefaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void allMethods() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1)",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void multipleBindingPermutation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected({ 1, 2 })",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
similarity index 70%
rename from butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
index 636fb05a..fe30f62a 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -2,17 +2,15 @@
 
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
 public class OnLongClickTest {
-  @Test public void onLongClickInjection() {
+  @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -27,18 +25,18 @@
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(",
-            "      new android.view.View.OnLongClickListener() {",
-            "        @Override public boolean onLongClick(android.view.View p0) {",
-            "          return target.doStuff();",
-            "        }",
-            "      });",
+            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
+            "      @Override public boolean onLongClick(View p0) {",
+            "        return target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "  @Override public void unbind(T target) {",
             "  }",
@@ -46,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -64,7 +62,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
similarity index 73%
rename from butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
index bc80f221..e8f8bb1f 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -24,14 +23,16 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.support.v4.view.ViewPager;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
+            "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
             "      @Override public void onPageSelected(int p0) {",
             "        target.doStuff();",
             "      }",
@@ -47,7 +48,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
index 99367d12..184d9f7c 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -24,20 +23,25 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.text.Editable;",
+            "import android.text.TextWatcher;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.ButterKnife;",
+            "import java.lang.CharSequence;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
-            "      @Override public void onTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
+            "      @Override public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "        target.doStuff();",
             "      }",
-            "      @Override public void beforeTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "      @Override public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "      }",
-            "      @Override public void afterTextChanged(android.text.Editable p0) {",
+            "      @Override public void afterTextChanged(Editable p0) {",
             "      }",
             "    });",
             "  }",
@@ -47,7 +51,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
similarity index 75%
rename from butterknife/src/test/java/butterknife/internal/OnTouchTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
index 9fef2868..3fdde4d1 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/OnTouchTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -24,15 +23,17 @@
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.MotionEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "import butterknife.ButterKnife;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ButterKnife.ViewBinder<T> {",
+            "  @Override public void bind(final ButterKnife.Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
-            "      @Override public boolean onTouch(android.view.View p0, android.view.MotionEvent p1) {",
+            "    view.setOnTouchListener(new View.OnTouchListener() {",
+            "      @Override public boolean onTouch(View p0, MotionEvent p1) {",
             "        return target.doStuff();",
             "      }",
             "    });",
@@ -43,7 +44,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -60,7 +61,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
diff --git a/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
similarity index 54%
rename from butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
rename to butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
index 9383d8ec..d7ff6277 100644
--- a/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/internal/ViewBindingClassTest.java
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static butterknife.internal.BindingClass.emitHumanDescription;
+import static butterknife.internal.BindingClass.asHumanDescription;
 import static java.util.Arrays.asList;
 import static org.fest.assertions.api.Assertions.assertThat;
 
@@ -12,17 +12,14 @@
     ViewBinding two = new TestViewBinding("two");
     ViewBinding three = new TestViewBinding("three");
 
-    StringBuilder builder1 = new StringBuilder();
-    emitHumanDescription(builder1, asList(one));
-    assertThat(builder1.toString()).isEqualTo("one");
+    String result1 = asHumanDescription(asList(one));
+    assertThat(result1).isEqualTo("one");
 
-    StringBuilder builder2 = new StringBuilder();
-    emitHumanDescription(builder2, asList(one, two));
-    assertThat(builder2.toString()).isEqualTo("one and two");
+    String result2 = asHumanDescription(asList(one, two));
+    assertThat(result2).isEqualTo("one and two");
 
-    StringBuilder builder3 = new StringBuilder();
-    emitHumanDescription(builder3, asList(one, two, three));
-    assertThat(builder3.toString()).isEqualTo("one, two, and three");
+    String result3 = asHumanDescription(asList(one, two, three));
+    assertThat(result3).isEqualTo("one, two, and three");
   }
 
   private static class TestViewBinding implements ViewBinding {
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
index 8fcf2319..a61f6a42 100644
--- a/butterknife-sample/pom.xml
+++ b/butterknife-sample/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife-sample</artifactId>
@@ -19,6 +19,12 @@
       <artifactId>butterknife</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>com.jakewharton</groupId>
+      <artifactId>butterknife-compiler</artifactId>
+      <version>${project.version}</version>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 12391036..10b77d81 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -9,8 +9,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 import butterknife.ButterKnife;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
@@ -29,13 +28,13 @@
     }
   };
 
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.hello) Button hello;
-  @FindView(R.id.list_of_things) ListView listOfThings;
-  @FindView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.hello) Button hello;
+  @Bind(R.id.list_of_things) ListView listOfThings;
+  @Bind(R.id.footer) TextView footer;
 
-  @FindViews({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index 71131356..618065cd 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -7,7 +7,7 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 import butterknife.ButterKnife;
-import butterknife.FindView;
+import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,9 +51,9 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @FindView(R.id.word) TextView word;
-    @FindView(R.id.length) TextView length;
-    @FindView(R.id.position) TextView position;
+    @Bind(R.id.word) TextView word;
+    @Bind(R.id.length) TextView length;
+    @Bind(R.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
index 676bc290..d94ed0d6 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
@@ -12,7 +12,7 @@
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
 public class SimpleActivityTest {
-  @Test public void verifyContentViewInjection() {
+  @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
         .create() //
         .get();
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
index 58f206b0..49b920e9 100644
--- a/butterknife/pom.xml
+++ b/butterknife/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife</artifactId>
@@ -33,11 +33,6 @@
       <artifactId>robolectric</artifactId>
       <scope>test</scope>
     </dependency>
-    <dependency>
-      <groupId>com.google.testing.compile</groupId>
-      <artifactId>compile-testing</artifactId>
-      <scope>test</scope>
-    </dependency>
 
     <dependency>
       <groupId>com.google.android</groupId>
@@ -48,14 +43,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
diff --git a/butterknife/src/main/java/butterknife/FindView.java b/butterknife/src/main/java/butterknife/Bind.java
similarity index 82%
rename from butterknife/src/main/java/butterknife/FindView.java
rename to butterknife/src/main/java/butterknife/Bind.java
index 7a84a73b..2463353a 100644
--- a/butterknife/src/main/java/butterknife/FindView.java
+++ b/butterknife/src/main/java/butterknife/Bind.java
@@ -10,11 +10,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}FindView(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface FindView {
+public @interface Bind {
   /** View ID to which the field will be bound. */
-  int value();
+  int[] value();
 }
diff --git a/butterknife/src/main/java/butterknife/BindArray.java b/butterknife/src/main/java/butterknife/BindArray.java
new file mode 100644
index 00000000..57992678
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindArray.java
@@ -0,0 +1,37 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified array resource ID. The type of array will be inferred from the
+ * annotated element.
+ *
+ * String array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.countries) String[] countries;
+ * </code></pre>
+ *
+ * Int array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.phones) int[] phones;
+ * </code></pre>
+ *
+ * Text array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * </code></pre>
+ *
+ * {@link android.content.res.TypedArray}:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindArray {
+  /** Array resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindBitmap.java b/butterknife/src/main/java/butterknife/BindBitmap.java
new file mode 100644
index 00000000..38cab362
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindBitmap.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import android.graphics.Bitmap;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBitmap {
+  /** Drawable resource ID from which the {@link Bitmap} will be created. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/ResourceBool.java b/butterknife/src/main/java/butterknife/BindBool.java
similarity index 81%
rename from butterknife/src/main/java/butterknife/ResourceBool.java
rename to butterknife/src/main/java/butterknife/BindBool.java
index 35c09686..8793c582 100644
--- a/butterknife/src/main/java/butterknife/ResourceBool.java
+++ b/butterknife/src/main/java/butterknife/BindBool.java
@@ -9,11 +9,11 @@
 /**
  * Bind a field to the specified boolean resource ID.
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceBool {
+public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceColor.java b/butterknife/src/main/java/butterknife/BindColor.java
similarity index 71%
rename from butterknife/src/main/java/butterknife/ResourceColor.java
rename to butterknife/src/main/java/butterknife/BindColor.java
index 06844660..33ffd385 100644
--- a/butterknife/src/main/java/butterknife/ResourceColor.java
+++ b/butterknife/src/main/java/butterknife/BindColor.java
@@ -10,12 +10,12 @@
  * Bind a field to the specified color resource ID. Type can be {@code int} or
  * {@link android.content.res.ColorStateList}.
  * <pre><code>
- * {@literal @}ResourceColor(R.color.background_green) int green;
- * {@literal @}ResourceColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * {@literal @}BindColor(R.color.background_green) int green;
+ * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceColor {
+public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceDimen.java b/butterknife/src/main/java/butterknife/BindDimen.java
similarity index 75%
rename from butterknife/src/main/java/butterknife/ResourceDimen.java
rename to butterknife/src/main/java/butterknife/BindDimen.java
index 9f1f67a0..60682b21 100644
--- a/butterknife/src/main/java/butterknife/ResourceDimen.java
+++ b/butterknife/src/main/java/butterknife/BindDimen.java
@@ -10,12 +10,12 @@
  * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
  * {@code float} for exact amount.
  * <pre><code>
- * {@literal @}ResourceDimen(R.dimen.horizontal_gap) int gapPx;
- * {@literal @}ResourceDimen(R.dimen.horizontal_gap) float gap;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceDimen {
+public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceDrawable.java b/butterknife/src/main/java/butterknife/BindDrawable.java
similarity index 78%
rename from butterknife/src/main/java/butterknife/ResourceDrawable.java
rename to butterknife/src/main/java/butterknife/BindDrawable.java
index 588dffe8..2fa48747 100644
--- a/butterknife/src/main/java/butterknife/ResourceDrawable.java
+++ b/butterknife/src/main/java/butterknife/BindDrawable.java
@@ -9,11 +9,11 @@
 /**
  * Bind a field to the specified drawable resource ID.
  * <pre><code>
- * {@literal @}ResourceDrawable(R.drawable.placeholder) Drawable placeholder;
+ * {@literal @}BindDrawable(R.drawable.placeholder) Drawable placeholder;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceDrawable {
+public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceInt.java b/butterknife/src/main/java/butterknife/BindInt.java
similarity index 82%
rename from butterknife/src/main/java/butterknife/ResourceInt.java
rename to butterknife/src/main/java/butterknife/BindInt.java
index b7a25adb..ccfc20e8 100644
--- a/butterknife/src/main/java/butterknife/ResourceInt.java
+++ b/butterknife/src/main/java/butterknife/BindInt.java
@@ -9,11 +9,11 @@
 /**
  * Bind a field to the specified integer resource ID.
  * <pre><code>
- * {@literal @}ResourceInt(R.int.columns) int columns;
+ * {@literal @}BindInt(R.int.columns) int columns;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceInt {
+public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ResourceString.java b/butterknife/src/main/java/butterknife/BindString.java
similarity index 78%
rename from butterknife/src/main/java/butterknife/ResourceString.java
rename to butterknife/src/main/java/butterknife/BindString.java
index c16ffe88..690f5af5 100644
--- a/butterknife/src/main/java/butterknife/ResourceString.java
+++ b/butterknife/src/main/java/butterknife/BindString.java
@@ -9,11 +9,11 @@
 /**
  * Bind a field to the specified string resource ID.
  * <pre><code>
- * {@literal @}ResourceString(R.string.username_error) String usernameErrorText;
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface ResourceString {
+public @interface BindString {
   /** String resource ID to which the field will be bound. */
   int value();
 }
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index d976929c..8101a35d 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -8,13 +8,15 @@
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
-import butterknife.internal.ButterKnifeProcessor;
+
+import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;
-import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;
+import static butterknife.internal.InternalKeys.ANDROID_PREFIX;
+import static butterknife.internal.InternalKeys.BINDING_CLASS_SUFFIX;
+import static butterknife.internal.InternalKeys.JAVA_PREFIX;
 
 /**
  * Field and method binding for Android views. Use this class to simplify finding views and
@@ -23,8 +25,8 @@
  * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}FindView(R.id.title) EditText titleView;
- *   {@literal @}FindView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}Bind(R.id.title) EditText titleView;
+ *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
@@ -41,7 +43,7 @@
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -68,13 +70,13 @@
  * If a view is optional add a {@code @Nullable} annotation such as the one in the
  * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
  * <pre><code>
- * {@literal @}Nullable @FindView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
- * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;
- * {@literal @}ResourceInt(R.int.columns) int columns;
- * {@literal @}ResourceColor(R.color.error_red) int errorRed;
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
  */
 public final class ButterKnife {
@@ -93,6 +95,15 @@ private ButterKnife() {
       @Override public Context getContext(Object source) {
         return ((View) source).getContext();
       }
+
+      @Override protected String getResourceEntryName(Object source, int id) {
+        final View view = (View) source;
+        // In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
+        if (view.isInEditMode()) {
+          return "<unavailable while editing>";
+        }
+        return super.getResourceEntryName(source, id);
+      }
     },
     ACTIVITY {
       @Override protected View findView(Object source, int id) {
@@ -114,24 +125,14 @@ private ButterKnife() {
     };
 
     private static <T> T[] filterNull(T[] views) {
-      int newSize = views.length;
-      for (T view : views) {
-        if (view == null) {
-          newSize -= 1;
-        }
-      }
-      if (newSize == views.length) {
-        return views;
-      }
-      //noinspection unchecked
-      T[] newViews = (T[]) new Object[newSize];
-      int nextIndex = 0;
-      for (T view : views) {
+      int end = 0;
+      for (int i = 0; i < views.length; i++) {
+        T view = views[i];
         if (view != null) {
-          newViews[nextIndex++] = view;
+          views[end++] = view;
         }
       }
-      return newViews;
+      return Arrays.copyOfRange(views, 0, end);
     }
 
     public static <T> T[] arrayOf(T... views) {
@@ -139,13 +140,13 @@ private ButterKnife() {
     }
 
     public static <T> List<T> listOf(T... views) {
-      return new ImmutableList<T>(filterNull(views));
+      return new ImmutableList<>(filterNull(views));
     }
 
     public <T> T findRequiredView(Object source, int id, String who) {
       T view = findOptionalView(source, id, who);
       if (view == null) {
-        String name = getContext(source).getResources().getResourceEntryName(id);
+        String name = getResourceEntryName(source, id);
         throw new IllegalStateException("Required view '"
             + name
             + "' with ID "
@@ -170,7 +171,7 @@ private ButterKnife() {
         if (who == null) {
           throw new AssertionError();
         }
-        String name = view.getResources().getResourceEntryName(id);
+        String name = getResourceEntryName(view, id);
         throw new IllegalStateException("View '"
             + name
             + "' with ID "
@@ -198,6 +199,10 @@ private ButterKnife() {
       }
     }
 
+    protected String getResourceEntryName(Object source, int id) {
+      return getContext(source).getResources().getResourceEntryName(id);
+    }
+
     protected abstract View findView(Object source, int id);
 
     public abstract Context getContext(Object source);
@@ -224,8 +229,7 @@ private ButterKnife() {
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, ViewBinder<Object>> INJECTORS =
-      new LinkedHashMap<Class<?>, ViewBinder<Object>>();
+  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
   static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
     @Override public void bind(Finder finder, Object target, Object source) { }
     @Override public void unbind(Object target) { }
@@ -300,8 +304,7 @@ public static void bind(Object target, Dialog source) {
   }
 
   /**
-   * Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews}
-   * to {@code null}.
+   * Reset fields annotated with {@link Bind @Bind} to {@code null}.
    * <p>
    * This should only be used in the {@code onDestroyView} method of a fragment.
    *
@@ -335,7 +338,7 @@ static void bind(Object target, Object source, Finder finder) {
 
   private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
       throws IllegalAccessException, InstantiationException {
-    ViewBinder<Object> viewBinder = INJECTORS.get(cls);
+    ViewBinder<Object> viewBinder = BINDERS.get(cls);
     if (viewBinder != null) {
       if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
       return viewBinder;
@@ -346,7 +349,7 @@ static void bind(Object target, Object source, Finder finder) {
       return NOP_VIEW_BINDER;
     }
     try {
-      Class<?> viewBindingClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
+      Class<?> viewBindingClass = Class.forName(clsName + BINDING_CLASS_SUFFIX);
       //noinspection unchecked
       viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
       if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
@@ -354,7 +357,7 @@ static void bind(Object target, Object source, Finder finder) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
       viewBinder = findViewBinderForClass(cls.getSuperclass());
     }
-    INJECTORS.put(cls, viewBinder);
+    BINDERS.put(cls, viewBinder);
     return viewBinder;
   }
 
diff --git a/butterknife/src/main/java/butterknife/FindViews.java b/butterknife/src/main/java/butterknife/FindViews.java
deleted file mode 100644
index 9db7ea36..00000000
--- a/butterknife/src/main/java/butterknife/FindViews.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.util.List;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
- * automatically be cast to the list or array type.
- * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
- * List&lt;TextView&gt; nameViews;
- *
- * {@literal @}FindViews({R.id.address_line_1, R.id.address_line_2})
- * EditText[] addressViews;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface FindViews {
-  /** View IDs to which the field will be bound. */
-  int[] value();
-}
diff --git a/butterknife/src/main/java/butterknife/internal/BindingClass.java b/butterknife/src/main/java/butterknife/internal/BindingClass.java
deleted file mode 100644
index 7f45cebc..00000000
--- a/butterknife/src/main/java/butterknife/internal/BindingClass.java
+++ /dev/null
@@ -1,442 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
-
-final class BindingClass {
-  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<Integer, ViewBindings>();
-  private final Map<FieldCollectionViewBinding, int[]> collectionBindings =
-      new LinkedHashMap<FieldCollectionViewBinding, int[]>();
-  private final List<FieldResourceBinding> resourceBindings = new ArrayList<FieldResourceBinding>();
-  private final String classPackage;
-  private final String className;
-  private final String targetClass;
-  private String parentViewBinder;
-
-  BindingClass(String classPackage, String className, String targetClass) {
-    this.classPackage = classPackage;
-    this.className = className;
-    this.targetClass = targetClass;
-  }
-
-  void addField(int id, FieldViewBinding binding) {
-    getOrCreateViewBindings(id).addFieldBinding(binding);
-  }
-
-  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
-      MethodViewBinding binding) {
-    ViewBindings viewBindings = getOrCreateViewBindings(id);
-    if (viewBindings.hasMethodBinding(listener, method)
-        && !"void".equals(method.returnType())) {
-      return false;
-    }
-    viewBindings.addMethodBinding(listener, method, binding);
-    return true;
-  }
-
-  void addResource(FieldResourceBinding binding) {
-    resourceBindings.add(binding);
-  }
-
-  void setParentViewBinder(String parentViewBinder) {
-    this.parentViewBinder = parentViewBinder;
-  }
-
-  ViewBindings getViewInjection(int id) {
-    return viewIdMap.get(id);
-  }
-
-  private ViewBindings getOrCreateViewBindings(int id) {
-    ViewBindings viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewBindings(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  String getFqcn() {
-    return classPackage + "." + className;
-  }
-
-  String brewJava() {
-    StringBuilder builder = new StringBuilder();
-    builder.append("// Generated code from Butter Knife. Do not modify!\n");
-    builder.append("package ").append(classPackage).append(";\n\n");
-
-    if (!resourceBindings.isEmpty()) {
-      builder.append("import android.content.res.Resources;\n");
-    }
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      builder.append("import android.view.View;\n");
-    }
-    builder.append("import butterknife.ButterKnife.Finder;\n");
-    if (parentViewBinder == null) {
-      builder.append("import butterknife.ButterKnife.ViewBinder;\n");
-    }
-    builder.append('\n');
-
-    builder.append("public class ").append(className);
-    builder.append("<T extends ").append(targetClass).append(">");
-
-    if (parentViewBinder != null) {
-      builder.append(" extends ").append(parentViewBinder).append("<T>");
-    } else {
-      builder.append(" implements ViewBinder<T>");
-    }
-    builder.append(" {\n");
-
-    emitBindMethod(builder);
-    builder.append('\n');
-    emitUnbindMethod(builder);
-
-    builder.append("}\n");
-    return builder.toString();
-  }
-
-  private void emitBindMethod(StringBuilder builder) {
-    builder.append("  @Override ")
-        .append("public void bind(final Finder finder, final T target, Object source) {\n");
-
-    // Emit a call to the superclass binder, if any.
-    if (parentViewBinder != null) {
-      builder.append("    super.bind(finder, target, source);\n\n");
-    }
-
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      // Local variable in which all views will be temporarily stored.
-      builder.append("    View view;\n");
-
-      // Loop over each view bindings and emit it.
-      for (ViewBindings bindings : viewIdMap.values()) {
-        emitViewBindings(builder, bindings);
-      }
-
-      // Loop over each collection binding and emit it.
-      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
-        emitCollectionBinding(builder, entry.getKey(), entry.getValue());
-      }
-    }
-
-    if (!resourceBindings.isEmpty()) {
-      builder.append("    Resources res = finder.getContext(source).getResources();\n");
-
-      for (FieldResourceBinding binding : resourceBindings) {
-        builder.append("    target.")
-            .append(binding.getName())
-            .append(" = res.")
-            .append(binding.getMethod())
-            .append('(')
-            .append(binding.getId())
-            .append(");\n");
-      }
-    }
-
-    builder.append("  }\n");
-  }
-
-  private void emitCollectionBinding(StringBuilder builder, FieldCollectionViewBinding binding,
-      int[] ids) {
-    builder.append("    target.").append(binding.getName()).append(" = ");
-
-    switch (binding.getKind()) {
-      case ARRAY:
-        builder.append("Finder.arrayOf(");
-        break;
-      case LIST:
-        builder.append("Finder.listOf(");
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    for (int i = 0; i < ids.length; i++) {
-      if (i > 0) {
-        builder.append(',');
-      }
-      builder.append("\n        finder.<")
-          .append(binding.getType())
-          .append(">")
-          .append(binding.isRequired() ? "findRequiredView" : "findOptionalView")
-          .append("(source, ")
-          .append(ids[i])
-          .append(", \"");
-      emitHumanDescription(builder, Collections.singleton(binding));
-      builder.append("\")");
-    }
-
-    builder.append("\n    );\n");
-  }
-
-  private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
-    builder.append("    view = ");
-
-    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
-    if (requiredViewBindings.isEmpty()) {
-      builder.append("finder.findOptionalView(source, ")
-          .append(bindings.getId())
-          .append(", null);\n");
-    } else {
-      if (bindings.getId() == View.NO_ID) {
-        builder.append("target;\n");
-      } else {
-        builder.append("finder.findRequiredView(source, ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, requiredViewBindings);
-        builder.append("\");\n");
-      }
-    }
-
-    emitFieldBindings(builder, bindings);
-    emitMethodBindings(builder, bindings);
-  }
-
-  private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
-    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
-    if (fieldBindings.isEmpty()) {
-      return;
-    }
-
-    for (FieldViewBinding fieldBinding : fieldBindings) {
-      builder.append("    target.")
-          .append(fieldBinding.getName())
-          .append(" = ");
-      if (fieldBinding.requiresCast()) {
-        builder.append("finder.castView(view")
-            .append(", ")
-            .append(bindings.getId())
-            .append(", \"");
-        emitHumanDescription(builder, fieldBindings);
-        builder.append("\");\n");
-      } else {
-        builder.append("view;\n");
-      }
-    }
-  }
-
-  private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
-    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
-        bindings.getMethodBindings();
-    if (classMethodBindings.isEmpty()) {
-      return;
-    }
-
-    String extraIndent = "";
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      builder.append("    if (view != null) {\n");
-      extraIndent = "  ";
-    }
-
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
-        : classMethodBindings.entrySet()) {
-      ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
-
-      // Emit: ((OWNER_TYPE) view).SETTER_NAME(
-      boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
-      builder.append(extraIndent)
-          .append("    ");
-      if (needsCast) {
-        builder.append("((").append(listener.targetType());
-        if (listener.genericArguments() > 0) {
-          builder.append('<');
-          for (int i = 0; i < listener.genericArguments(); i++) {
-            if (i > 0) {
-              builder.append(", ");
-            }
-            builder.append('?');
-          }
-          builder.append('>');
-        }
-        builder.append(") ");
-      }
-      builder.append("view");
-      if (needsCast) {
-        builder.append(')');
-      }
-      builder.append('.')
-          .append(listener.setter())
-          .append("(\n");
-
-      // Emit: new TYPE() {
-      builder.append(extraIndent)
-          .append("      new ")
-          .append(listener.type())
-          .append("() {\n");
-
-      for (ListenerMethod method : getListenerMethods(listener)) {
-        // Emit: @Override public RETURN_TYPE METHOD_NAME(
-        builder.append(extraIndent)
-            .append("        @Override public ")
-            .append(method.returnType())
-            .append(' ')
-            .append(method.name())
-            .append("(\n");
-
-        // Emit listener method arguments, each on their own line.
-        String[] parameterTypes = method.parameters();
-        for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          builder.append(extraIndent)
-              .append("          ")
-              .append(parameterTypes[i])
-              .append(" p")
-              .append(i);
-          if (i < count - 1) {
-            builder.append(',');
-          }
-          builder.append('\n');
-        }
-
-        // Emit end of parameters, start of body.
-        builder.append(extraIndent).append("        ) {\n");
-
-        // Set up the return statement, if needed.
-        builder.append(extraIndent).append("          ");
-        boolean hasReturnType = !"void".equals(method.returnType());
-        if (hasReturnType) {
-          builder.append("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          Set<MethodViewBinding> set = methodBindings.get(method);
-          Iterator<MethodViewBinding> iterator = set.iterator();
-
-          while (iterator.hasNext()) {
-            MethodViewBinding binding = iterator.next();
-            builder.append("target.").append(binding.getName()).append('(');
-            List<Parameter> parameters = binding.getParameters();
-            String[] listenerParameters = method.parameters();
-            for (int i = 0, count = parameters.size(); i < count; i++) {
-              Parameter parameter = parameters.get(i);
-              int listenerPosition = parameter.getListenerPosition();
-
-              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.append("finder.<")
-                    .append(parameter.getType())
-                    .append(">castParam(p")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(method.name())
-                    .append("\", ")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(binding.getName())
-                    .append("\", ")
-                    .append(i)
-                    .append(")");
-              } else {
-                builder.append('p').append(listenerPosition);
-              }
-
-              if (i < count - 1) {
-                builder.append(", ");
-              }
-            }
-            builder.append(");");
-            if (iterator.hasNext()) {
-              builder.append("\n").append("          ");
-            }
-          }
-        } else if (hasReturnType) {
-          builder.append(method.defaultReturn()).append(';');
-        }
-        builder.append('\n');
-
-        // Emit end of listener method.
-        builder.append(extraIndent).append("        }\n");
-      }
-
-      // Emit end of listener class body and close the setter method call.
-      builder.append(extraIndent).append("      });\n");
-    }
-
-    if (needsNullChecked) {
-      builder.append("    }\n");
-    }
-  }
-
-  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
-    if (listener.method().length == 1) {
-      return Arrays.asList(listener.method());
-    }
-
-    try {
-      List<ListenerMethod> methods = new ArrayList<ListenerMethod>();
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
-        Field callbackField = callbacks.getField(callbackMethod.name());
-        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-        if (method == null) {
-          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-        }
-        methods.add(method);
-      }
-      return methods;
-    } catch (NoSuchFieldException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  private void emitUnbindMethod(StringBuilder builder) {
-    builder.append("  @Override public void unbind(T target) {\n");
-    if (parentViewBinder != null) {
-      builder.append("    super.unbind(target);\n\n");
-    }
-    for (ViewBindings bindings : viewIdMap.values()) {
-      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
-        builder.append("    target.").append(fieldBinding.getName()).append(" = null;\n");
-      }
-    }
-    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(fieldCollectionBinding.getName()).append(" = null;\n");
-    }
-    builder.append("  }\n");
-  }
-
-  static void emitHumanDescription(StringBuilder builder,
-      Collection<? extends ViewBinding> bindings) {
-    Iterator<? extends ViewBinding> iterator = bindings.iterator();
-    switch (bindings.size()) {
-      case 1:
-        builder.append(iterator.next().getDescription());
-        break;
-      case 2:
-        builder.append(iterator.next().getDescription())
-            .append(" and ")
-            .append(iterator.next().getDescription());
-        break;
-      default:
-        for (int i = 0, count = bindings.size(); i < count; i++) {
-          if (i != 0) {
-            builder.append(", ");
-          }
-          if (i == count - 1) {
-            builder.append("and ");
-          }
-          builder.append(iterator.next().getDescription());
-        }
-        break;
-    }
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/InternalKeys.java b/butterknife/src/main/java/butterknife/internal/InternalKeys.java
new file mode 100644
index 00000000..56fd8e37
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/InternalKeys.java
@@ -0,0 +1,14 @@
+package butterknife.internal;
+
+/**
+ * Contains shared constants between the annotation processor and {@link butterknife.ButterKnife}
+ */
+public final class InternalKeys {
+  public static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
+  public static final String ANDROID_PREFIX = "android.";
+  public static final String JAVA_PREFIX = "java.";
+
+  private InternalKeys() {
+    throw new AssertionError("No instances.");
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerClass.java b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
index 1c992c2f..82101cc5 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerClass.java
@@ -16,9 +16,6 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  /** The number of generic arguments for the type. This used used for casting the view. */
-  int genericArguments() default 0;
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
index 31ab24f0..ca62d675 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
+++ b/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
@@ -14,7 +14,7 @@
   /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
   String[] parameters() default { };
 
-  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  /** Primitive or fully-qualified return type of the listener method. May also be {@code void}. */
   String returnType() default "void";
 
   /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2fd10d5c..bfa469fb 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -4,9 +4,9 @@
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.FindView @FindView} on fields.</li>
- * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.FindViews @FindViews}. Operate on all of them at once with
+ * {@link butterknife.Bind @Bind} on fields.</li>
+ * <li>Group multiple views in a {@linkplain java.util.List list} or array.
+ * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
@@ -14,6 +14,7 @@
  * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
+ * <li>Eliminate resource lookups by using resource annotations on fields.</li>
  * </ul>
  */
 package butterknife;
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 528b7c45..34833428 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -5,6 +5,8 @@
 import android.view.View;
 import java.util.Arrays;
 import java.util.List;
+
+import butterknife.shadow.EditModeShadowView;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -18,6 +20,7 @@
 import static org.fest.assertions.api.ANDROID.assertThat;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.entry;
+import static org.fest.assertions.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -44,9 +47,9 @@
     }
   };
 
-  @Before @After // Clear out cache of injectors and resetters before and after each test.
+  @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.INJECTORS.clear();
+    ButterKnife.BINDERS.clear();
   }
 
   @Test public void listOfFiltersNull() {
@@ -117,39 +120,53 @@ public void resetViewsCache() {
     assertThat(view3).isDisabled();
   }
 
-  @Test public void zeroInjectionsInjectDoesNotThrowException() {
+  @Test public void zeroBindingsBindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
     ButterKnife.bind(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void zeroInjectionsResetDoesNotThrowException() {
+  @Test public void zeroBindingsUnbindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
     ButterKnife.unbind(example);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void injectingKnownPackagesIsNoOp() {
+  @Test public void bindingKnownPackagesIsNoOp() {
     ButterKnife.bind(new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
+    assertThat(ButterKnife.BINDERS).isEmpty();
     ButterKnife.bind(new Object(), new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
+    assertThat(ButterKnife.BINDERS).isEmpty();
   }
 
   @Test public void finderThrowsNiceError() {
     View view = new View(Robolectric.application);
     try {
       ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
     } catch (IllegalStateException e) {
       assertThat(e).hasMessage("Required view 'button1' with ID "
           + android.R.id.button1
           + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
     }
   }
+
+  @Config(shadows = EditModeShadowView.class)
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    View view = new View(Robolectric.application);
+    try {
+      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+    }
+  }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewTest.java b/butterknife/src/test/java/butterknife/internal/FindViewTest.java
deleted file mode 100644
index 89597c9a..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewTest.java
+++ /dev/null
@@ -1,562 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewTest {
-  @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @FindView(1) TestInterface thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.FindView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @FindView(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
-            "    target.thing1 = view;",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing1 = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) public View thing1;",
-        "  @FindView(2) View thing2;",
-        "  @FindView(3) protected View thing3;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @FindView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test<T> extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindView(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) String thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public interface Test {",
-        "    @FindView(1) View thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) private View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) static View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfBothAnnotations() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindView(1) @FindViews(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one of @FindView and @FindViews is allowed. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfAlreadyInjected() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing1;",
-        "    @FindView(1) View thing2;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Attempt to use @FindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsRootViewInjectionWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining((
-            "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(6);
-  }
-
-  @Test public void failsOptionalRootViewInjection() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnClick;",
-            "public class Test extends View {",
-            "  @interface Nullable {}",
-            "  @Nullable @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            ("ID free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java b/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
deleted file mode 100644
index 364f2222..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
+++ /dev/null
@@ -1,510 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewsTest {
-  @Test public void injectingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @FindViews({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @interface Nullable {}",
-        "    @Nullable @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews({}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews(1) List thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @FindViews(1) Deque<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @FindViews(1) List<String> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.FindViews;",
-        "public class Test extends Activity {", "  @FindViews(1) String[] thing;", "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindViews(1) List<View> thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public interface Test {",
-        "    @FindViews(1) List<View> thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) private List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) static List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
deleted file mode 100644
index debd2062..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
-public class OnItemSelectedTest {
-  @Test public void defaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nonDefaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void allMethods() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1)",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void multipleBindingPermutation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected({ 1, 2 })",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java b/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
deleted file mode 100644
index 92f7ca42..00000000
--- a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package butterknife.internal;
-
-import java.util.Arrays;
-import javax.annotation.processing.Processor;
-
-final class ProcessorTestUtilities {
-  static Iterable<? extends Processor> butterknifeProcessors() {
-    return Arrays.asList(
-        new ButterKnifeProcessor()
-    );
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
new file mode 100644
index 00000000..e4fd9951
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
@@ -0,0 +1,18 @@
+package butterknife.shadow;
+
+import android.view.View;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowView;
+
+/**
+ * Behaves just like standard Robolectric views, but always reports that it is in Edit Mode.
+ */
+@Implements(View.class)
+public class EditModeShadowView extends ShadowView {
+  @SuppressWarnings("UnusedDeclaration")
+  @Implementation
+  public boolean isInEditMode() {
+    return true;
+  }
+}
diff --git a/pom.xml b/pom.xml
index 7d4e9d12..37bc77d8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife-parent</artifactId>
-  <version>7.0.0-SNAPSHOT</version>
+  <version>7.0.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Butter Knife (Parent)</name>
@@ -21,13 +21,14 @@
 
   <modules>
     <module>butterknife</module>
+    <module>butterknife-compiler</module>
     <module>butterknife-sample</module>
   </modules>
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
-    <java.version>1.6</java.version>
+    <java.version>1.7</java.version>
     <fest.version>2.0M10</fest.version>
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
@@ -35,6 +36,7 @@
     <robolectric.version>2.2</robolectric.version>
     <fest.android.version>1.0.7</fest.android.version>
     <compile-test.version>0.6</compile-test.version>
+    <javapoet.version>1.2.0</javapoet.version>
   </properties>
 
   <scm>
@@ -63,6 +65,11 @@
         <artifactId>android</artifactId>
         <version>${android.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.squareup</groupId>
+        <artifactId>javapoet</artifactId>
+        <version>${javapoet.version}</version>
+      </dependency>
       <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
diff --git a/website/index.html b/website/index.html
index 962c1797..0d07a222 100644
--- a/website/index.html
+++ b/website/index.html
@@ -24,11 +24,11 @@ <h2>Field and method binding for Android views</h2>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@FindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -48,8 +48,8 @@ <h3 id="introduction">Introduction</h3>
             <h4 id="non-activity">Non-Activity Binding</h4>
             <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -77,8 +77,8 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 
   static class ViewHolder {
-    @FindView(R.id.title) TextView name;
-    @FindView(R.id.job_title) TextView jobTitle;
+    @Bind(R.id.title) TextView name;
+    @Bind(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
       ButterKnife.bind(this, view);
@@ -97,24 +97,24 @@ <h4 id="non-activity">Non-Activity Binding</h4>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@FindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);</pre>
             <p><code>Action</code> and <code>Setter</code> interfaces allow specifying simple behavior.</p>
-            <pre class="prettyprint">static final Action&lt;View> DISABLE = new Action&lt;>() {
+            <pre class="prettyprint">static final ButterKnife.Action&lt;View> DISABLE = new ButterKnife.Action&lt;View>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
   }
-}
-static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
+};
+static final ButterKnife.Setter&lt;View, Boolean> ENABLED = new ButterKnife.Setter&lt;View, Boolean>() {
   @Override public void set(View view, Boolean value, int index) {
     view.setEnabled(value);
   }
-}</pre>
+};</pre>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
-            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
+            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</pre>
 
             <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
@@ -153,8 +153,8 @@ <h4 id="listener-binding">Listener Binding</h4>
             <h4 id="reset">Binding Reset</h4>
             <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -170,10 +170,10 @@ <h4 id="reset">Binding Reset</h4>
 }</pre>
 
             <h4 id="optional">Optional Bindings</h4>
-            <p>By default, both <code>@FindView</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
             <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
             <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
-            <pre class="prettyprint">@Nullable @FindView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
@@ -215,7 +215,7 @@ <h4>Maven</h4>
 
             <h4>Gradle</h4>
             <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>
+            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
             <pre class="prettyprint">lintOptions {
   disable 'InvalidPackage'
 }</pre>
@@ -233,7 +233,7 @@ <h4 id="ide">IDE Configuration</h4>
 
             <h4 id="proguard">ProGuard</h4>
             <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @FindView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
+                To prevent ProGuard renaming classes that use @Bind on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
             <pre>-keep class butterknife.** { *; }
 -dontwarn butterknife.internal.**
 -keep class **$$ViewBinder { *; }
