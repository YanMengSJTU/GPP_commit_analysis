diff --git a/butterknife-annotations/src/main/java/butterknife/BindBean.java b/butterknife-annotations/src/main/java/butterknife/BindBean.java
index 5924ebc0..0cf203e0 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBean.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBean.java
@@ -13,8 +13,9 @@
  * </code></pre>
  */
 @Retention(CLASS) @Target({FIELD})
-@BindFunc("setText")
+//@BindFunc("setText")
 public @interface BindBean {
     int id();
     String value();
+    String func() default "";
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index badf852f..6d787e3e 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -455,14 +455,14 @@ public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env
 
 
         // Process each @BindBeanFunc element.
-        for (Element element : env.getElementsAnnotatedWith(BindBeanFunc.class)) {
-            if (!SuperficialValidation.validateElement(element)) continue;
-            try {
-                parseBindFunc(element, builderMap, erasedTargetNames);
-            } catch (Exception e) {
-                logParsingError(element, BindBeanFunc.class, e);
-            }
-        }
+//        for (Element element : env.getElementsAnnotatedWith(BindBeanFunc.class)) {
+//            if (!SuperficialValidation.validateElement(element)) continue;
+//            try {
+//                parseBindFunc(element, builderMap, erasedTargetNames);
+//            } catch (Exception e) {
+//                logParsingError(element, BindBeanFunc.class, e);
+//            }
+//        }
 
         // Associate superclass binders with their subclass binders. This is a queue-based tree walk
         // which starts at the roots (superclasses) and walks to the leafs (subclasses).
@@ -620,25 +620,6 @@ private void parseBindText(Element element, Map<TypeElement, BindingSet.Builder>
         BindBean bean = element.getAnnotation(BindBean.class);
         //BindFunc     func=bean.annotationType().getAnnotation(BindFunc.class);
 
-        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
-        BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-        builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),null));
-
-
-        BindingSet.Builder binder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-        binder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
-
-        erasedTargetNames.add(enclosingElement);
-    }
-
-    private void parseBindFunc(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
-        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-        TypeName type = TypeName.get(element.asType());
-        String name = element.getSimpleName().toString();
-        boolean required = isFieldRequired(element);
-        BindBeanFunc bean = element.getAnnotation(BindBeanFunc.class);
-
         QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
         BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
         builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),bean.func()));
@@ -649,6 +630,25 @@ private void parseBindFunc(Element element, Map<TypeElement, BindingSet.Builder>
 
         erasedTargetNames.add(enclosingElement);
     }
+
+//    private void parseBindFunc(Element element, Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+//        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+//
+//        TypeName type = TypeName.get(element.asType());
+//        String name = element.getSimpleName().toString();
+//        boolean required = isFieldRequired(element);
+//        BindBeanFunc bean = element.getAnnotation(BindBeanFunc.class);
+//
+//        QualifiedId qualifiedId = elementToQualifiedId(element, bean.id());
+//        BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+//        builder.addBeanBinding(new FieldBeanBinding(getId(qualifiedId), name, bean.value(),bean.func()));
+//
+//
+//        BindingSet.Builder binder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+//        binder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
+//
+//        erasedTargetNames.add(enclosingElement);
+//    }
     private  QualifiedId elementToQualifiedId(Element element, int id) {
         return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
index 330f6318..6cb4808e 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBeanBinding.java
@@ -54,8 +54,8 @@
   private final Id id;
   private final String name;
   private final String filed;
-  private final BindFunc func;
-  FieldBeanBinding(Id id, String name, String filed, BindFunc func) {
+  private final String func;
+  FieldBeanBinding(Id id, String name, String filed, String func) {
     this.id = id;
     this.name = name;
     this.filed = filed;
@@ -72,6 +72,10 @@
 
   @Override public CodeBlock render(int sdk) {
     //BeanMethod method = type.methodForSdk(sdk);
-    return CodeBlock.of("this.binder.apply(target.$L,bean.$L)", name,filed);
+    if(func==null||func.length()==0) {
+      return CodeBlock.of("this.binder.apply(target.$L,bean.$L)", name, filed);
+    }else {
+      return CodeBlock.of("this.binder.apply(target.$L,$L(bean.$L))", name, func,filed);
+    }
   }
 }
