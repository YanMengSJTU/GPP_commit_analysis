diff --git a/butterfork-compiler/build.gradle b/butterfork-compiler/build.gradle
index 484434d0..8a3f09b0 100644
--- a/butterfork-compiler/build.gradle
+++ b/butterfork-compiler/build.gradle
@@ -9,7 +9,7 @@ dependencies {
     compile group: 'com.squareup', name: 'javapoet', version: '1.2.0'
     compile group: 'com.google.android', name: 'android', version: '4.1.1.4'
 
-    testCompile group: 'com.google.testing.compile', name: 'compile-testing', version: '0.6'
+    testCompile group: 'com.google.testing.compile', name: 'compile-testing', version: '0.7'
     testCompile group: 'junit', name: 'junit', version: '4.12'
     testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
     testCompile group: 'com.google.android', name: 'support-v4', version: 'r7'
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
index b90647ad..0a249a87 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/BindingClass.java
@@ -45,11 +45,11 @@
   private final ClassName resClass;
   private String parentViewBinder;
 
-  BindingClass(String classPackage, String className, String targetClass, TypeElement resType) {
+  BindingClass(String classPackage, String className, String targetClass, String resPackage) {
     this.classPackage = classPackage;
     this.className = className;
     this.targetClass = targetClass;
-    this.resClass = ClassName.get(resType);
+    this.resClass = ClassName.get(resPackage, "R");
   }
 
   void addBitmap(FieldBitmapBinding binding) {
diff --git a/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java b/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
index fc7335e6..5f558441 100644
--- a/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
+++ b/butterfork-compiler/src/main/java/butterfork/internal/ButterForkProcessor.java
@@ -11,6 +11,7 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.BitSet;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
@@ -32,7 +33,6 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
@@ -47,7 +47,6 @@
 import butterfork.BindDimen;
 import butterfork.BindDrawable;
 import butterfork.BindInt;
-import butterfork.BindResources;
 import butterfork.BindString;
 import butterfork.OnCheckedChanged;
 import butterfork.OnClick;
@@ -79,6 +78,7 @@
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
   private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
   private static final String LIST_TYPE = List.class.getCanonicalName();
+  private static final String JVM_ARGUMENT = "respackagename";
   private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
       OnCheckedChanged.class, //
       OnClick.class, //
@@ -96,6 +96,7 @@
   private Elements elementUtils;
   private Types typeUtils;
   private Filer filer;
+  private String resPackage;
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
@@ -103,12 +104,16 @@
     elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
+    resPackage = env.getOptions().get(JVM_ARGUMENT);
+  }
+
+  @Override public Set<String> getSupportedOptions() {
+    return Collections.singleton(JVM_ARGUMENT);
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> types = new LinkedHashSet<>();
 
-    types.add(BindResources.class.getCanonicalName());
     types.add(Bind.class.getCanonicalName());
 
     for (Class<? extends Annotation> listener : LISTENERS) {
@@ -149,15 +154,6 @@
     Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
     Set<String> erasedTargetNames = new LinkedHashSet<>();
 
-    // Process each @BindResources element. Must be done first.
-    for (Element element : env.getElementsAnnotatedWith(BindResources.class)) {
-      try {
-        parseBindResources(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        logParsingError(element, BindResources.class, e);
-      }
-    }
-
     // Process each @Bind element.
     for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
       try {
@@ -314,28 +310,6 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseBindResources(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-
-    if (element.getKind() != CLASS) {
-      error(element, "Only classes can be annotated with @%s",
-          BindResources.class.getSimpleName());
-      return;
-    }
-
-    TypeElement resClass = null;
-
-    try {
-      element.getAnnotation(BindResources.class).value();
-    } catch (MirroredTypeException exception) {
-      resClass = (TypeElement) typeUtils.asElement(exception.getTypeMirror());
-    }
-
-    createTargetClass(targetClassMap, (TypeElement) element, resClass);
-
-    erasedTargetNames.add(element.toString());
-  }
-
   private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     // Verify common generated code restrictions.
@@ -389,7 +363,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     }
 
     String id = ids[0];
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
       if (viewBindings != null) {
@@ -403,7 +377,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
         }
       }
     } else {
-      bindingClass = targetClassMap.get(enclosingElement);
+      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     }
 
     String name = element.getSimpleName().toString();
@@ -481,7 +455,7 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
     TypeName type = TypeName.get(viewType);
     boolean required = isRequiredBinding(element);
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
     bindingClass.addFieldCollection(ids, binding);
 
@@ -513,7 +487,7 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindBool.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean", "bool");
     bindingClass.addResource(binding);
 
@@ -549,7 +523,7 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindColor.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
         isColorStateList ? "getColorStateList" : "getColor", "color");
     bindingClass.addResource(binding);
@@ -586,7 +560,7 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindDimen.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
         isInt ? "getDimensionPixelSize" : "getDimension", "dimen");
     bindingClass.addResource(binding);
@@ -619,7 +593,7 @@ private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindBitmap.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
     bindingClass.addBitmap(binding);
 
@@ -651,7 +625,7 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindDrawable.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable", "drawable");
     bindingClass.addResource(binding);
 
@@ -682,7 +656,7 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindInt.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger", "integer");
     bindingClass.addResource(binding);
 
@@ -714,7 +688,7 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindString.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString", "string");
     bindingClass.addResource(binding);
 
@@ -748,7 +722,7 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
     String name = element.getSimpleName().toString();
     String id = element.getAnnotation(BindArray.class).value();
 
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName, "array");
     bindingClass.addResource(binding);
 
@@ -1003,7 +977,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     for (String id : ids) {
       if (!bindingClass.addMethod(id, listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %s. (%s.%s)",
@@ -1061,15 +1035,15 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private BindingClass createTargetClass(Map<TypeElement, BindingClass> targetClassMap,
-      TypeElement enclosingElement, TypeElement resClass) {
+  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
+      TypeElement enclosingElement) {
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass == null) {
       String targetType = enclosingElement.getQualifiedName().toString();
       String classPackage = getPackageName(enclosingElement);
       String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
 
-      bindingClass = new BindingClass(classPackage, className, targetType, resClass);
+      bindingClass = new BindingClass(classPackage, className, targetType, resPackage);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
index 5dcd5ae2..4a8504dd 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindArrayTest.java
@@ -16,8 +16,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindArray;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindArray(\"one\") String[] one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -53,8 +52,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindArray;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindArray(\"one\") int[] one;",
         "}"
@@ -79,6 +76,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -90,8 +88,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindArray;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindArray(\"one\") CharSequence[] one;",
         "}"
@@ -116,6 +112,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -127,9 +124,7 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindArray;",
-        "import butterfork.BindResources;",
         "import android.content.res.TypedArray;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindArray(\"one\") TypedArray one;",
         "}"
@@ -154,6 +149,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -165,19 +161,18 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindArray;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindArray(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@BindArray field type must be one of: String[], int[], CharSequence[], "
                 + "android.content.res.TypedArray. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
index b4c4b303..fea5b8bb 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindBitmapTest.java
@@ -17,8 +17,6 @@
         "import android.app.Activity;",
         "import android.graphics.Bitmap;",
         "import butterfork.BindBitmap;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindBitmap(\"one\") Bitmap one;",
         "}"
@@ -44,6 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -55,17 +54,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindBitmap;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindBitmap(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
index 4e5200b4..5c190e95 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindBoolTest.java
@@ -16,8 +16,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindBool;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindBool(\"one\") boolean one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -53,17 +52,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindBool;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindBool(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
index fa448677..3acb580f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindColorTest.java
@@ -16,8 +16,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindColor;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindColor(\"one\") int one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -54,8 +53,6 @@
         "import android.app.Activity;",
         "import android.content.res.ColorStateList;",
         "import butterfork.BindColor;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindColor(\"one\") ColorStateList one;",
         "}"
@@ -80,6 +77,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -91,17 +89,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindColor;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindColor(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
index 55196f59..b3bbe6db 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindDimenTest.java
@@ -16,8 +16,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindDimen;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindDimen(\"one\") float one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -53,8 +52,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindDimen;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindDimen(\"one\") int one;",
         "}"
@@ -79,6 +76,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -90,17 +88,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindDimen;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindDimen(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
index f1eddfa9..ee3b4140 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindDrawableTest.java
@@ -17,8 +17,6 @@
         "import android.app.Activity;",
         "import android.graphics.drawable.Drawable;",
         "import butterfork.BindDrawable;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindDrawable(\"one\") Drawable one;",
         "}"
@@ -43,6 +41,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -54,17 +53,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindDrawable;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindDrawable(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
index 6f6b2030..4f186ec3 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindIntTest.java
@@ -16,8 +16,6 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindInt;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindInt(\"one\") int one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -53,17 +52,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.BindInt;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindInt(\"one\") String one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
index 542f45b4..093124b3 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindStringTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.BindString;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindString(\"one\") String one;",
         "}"
@@ -42,6 +40,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -52,18 +51,17 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.BindString;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @BindString(\"one\") boolean one;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java b/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
index d1fe3e15..e4692a96 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/BindTest.java
@@ -17,8 +17,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind(\"one\") View thing;",
         "}"
@@ -45,6 +43,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -56,18 +55,17 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind({\"one\", \"two\"}) View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind for a view must only specify one ID. Found: [one, two]. (test.Test.thing)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void bindingInterface() throws Exception {
@@ -76,8 +74,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    interface TestInterface {}",
         "    @Bind(\"one\") TestInterface thing;",
@@ -105,6 +101,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -118,8 +115,6 @@
         "import android.widget.EditText;",
         "import android.widget.TextView;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "class Test<T extends TextView> extends Activity {",
         "    @Bind(\"one\") T thing;",
         "}"
@@ -146,6 +141,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -158,9 +154,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") View thing1;",
         "  @OnClick(\"one\") void doStuff() {}",
@@ -194,6 +188,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -206,8 +201,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") public View thing1;",
         "  @Bind(\"two\") View thing2;",
@@ -216,6 +209,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError();
   }
@@ -226,8 +220,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Nullable @Bind(\"one\") View view;",
@@ -255,6 +247,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -267,8 +260,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") View view;",
         "}",
@@ -323,6 +314,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -335,8 +327,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test<T> extends Activity {",
         "  @Bind(\"one\") View view;",
         "}",
@@ -391,6 +381,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -408,6 +399,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -426,6 +418,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -446,6 +439,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -458,18 +452,17 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") String thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfInInterface() {
@@ -483,6 +476,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -496,18 +490,17 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind(\"one\") private View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfStatic() {
@@ -516,18 +509,17 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind(\"one\") static View thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void duplicateBindingFails() throws Exception {
@@ -536,8 +528,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind(\"one\") View thing1;",
         "    @Bind(\"one\") View thing2;",
@@ -545,11 +535,12 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Attempt to use @Bind for an already bound ID one on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(9);
+        .in(source).onLine(7);
   }
 
   @Test public void failsRootViewBindingWithBadTarget() throws Exception {
@@ -568,6 +559,7 @@
 
     ASSERT.about(javaSource())
         .that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining((
@@ -594,6 +586,7 @@
 
     ASSERT.about(javaSource())
         .that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -608,8 +601,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind({\"one\", \"two\", \"three\"}) View[] thing;",
         "}"
@@ -639,6 +630,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -651,8 +643,6 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test<T extends View> extends Activity {",
         "    @Bind({\"one\", \"two\", \"three\"}) T[] thing;",
         "}"
@@ -682,6 +672,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -694,8 +685,6 @@
         "import android.app.Activity;",
         "import android.widget.TextView;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind({\"one\", \"two\", \"three\"}) TextView[] thing;",
         "}"
@@ -726,6 +715,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -738,9 +728,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind({\"one\", \"two\", \"three\"}) List<View> thing;",
         "}"
@@ -770,6 +758,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -781,9 +770,7 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test {",
         "    interface TestInterface {}",
         "    @Bind({\"one\", \"two\", \"three\"}) List<TestInterface> thing;",
@@ -814,6 +801,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -826,9 +814,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test<T extends View> extends Activity {",
         "    @Bind({\"one\", \"two\", \"three\"}) List<T> thing;",
         "}"
@@ -858,6 +844,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -870,9 +857,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @interface Nullable {}",
         "    @Nullable @Bind({\"one\", \"two\", \"three\"}) List<View> thing;",
@@ -903,6 +888,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -921,6 +907,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
@@ -938,6 +925,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
@@ -956,6 +944,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
@@ -967,19 +956,18 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") List<String> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfArrayNotView() {
@@ -987,17 +975,16 @@
         "package test;",
         "import android.app.Activity;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") String[] thing;",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(7);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfContainsDuplicateIds() throws Exception {
@@ -1006,18 +993,17 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import java.util.List;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "    @Bind({\"one\", \"one\"}) List<View> thing;",
         "}"
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@Bind annotation contains duplicate ID one. (test.Test.thing)")
-        .in(source).onLine(9);
+        .in(source).onLine(7);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
index 6d3badbe..395538c6 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnCheckedChangedTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnCheckedChanged;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnCheckedChanged(\"one\") void doStuff() {}",
         "}"
@@ -48,6 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
index 67850ef4..0ddaa99f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnClickTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\") void doStuff() {}",
         "}"));
@@ -47,6 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -58,9 +57,7 @@
         "package test;",
         "import android.view.View;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\") void doStuff1() {}",
         "  @OnClick(\"one\") void doStuff2() {}",
@@ -98,6 +95,7 @@
             "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -110,9 +108,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @Bind(\"one\") View view;",
         "  @OnClick(\"one\") void doStuff() {}",
@@ -145,6 +141,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -156,9 +153,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\") public void thing1() {}",
         "  @OnClick(\"two\") void thing2() {}",
@@ -167,6 +162,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError();
   }
@@ -178,9 +174,7 @@
         "import android.view.View;",
         "import android.widget.Button;",
         "import android.widget.TextView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  interface TestInterface {}",
         "  @OnClick(\"zero\") void click0() {}",
@@ -242,6 +236,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -253,9 +248,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick({\"one\", \"two\", \"three\"}) void click() {}",
         "}"
@@ -298,6 +291,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -308,9 +302,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Nullable @OnClick(\"one\") void doStuff() {}",
@@ -343,6 +335,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -355,9 +348,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterfork.Bind;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
         "  @Bind(\"one\") View view;",
@@ -391,6 +382,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -407,6 +399,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -424,6 +417,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -435,9 +429,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\")",
         "  public String doStuff() {",
@@ -445,19 +437,18 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfPrivateMethod() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\")",
         "  private void doStuff() {",
@@ -465,19 +456,18 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfStatic() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\")",
         "  public static void doStuff() {",
@@ -485,19 +475,18 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfParameterNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\")",
         "  public void doStuff(String thing) {",
@@ -505,6 +494,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
@@ -518,7 +508,7 @@
             "    android.view.View",
             "  ",
             "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfMoreThanOneParameter() {
@@ -526,9 +516,7 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick(\"one\")",
         "  public void doStuff(View thing, View otherThing) {",
@@ -536,11 +524,12 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(9);
+        .in(source).onLine(7);
   }
 
   @Test public void failsIfInInterface() {
@@ -553,6 +542,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
@@ -564,9 +554,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnClick({\"one\", \"two\", \"three\", \"one\"})",
         "  void doStuff() {",
@@ -574,10 +562,11 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID one. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
index 703c248c..acc08e1f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnEditorActionTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnEditorAction;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnEditorAction(\"one\") boolean doStuff() { return false; }",
         "}"
@@ -49,6 +47,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
index b5fd8015..18d793a2 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnFocusChangeTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnFocusChange;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnFocusChange(\"one\") void doStuff() {}",
         "}"
@@ -47,6 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
index 9746fbe7..9943b99c 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemClickTest.java
@@ -16,9 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemClick(\"one\") void doStuff() {}",
         "}"));
@@ -48,6 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -60,9 +59,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.AdapterView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemClick(\"one\") void doStuff(",
         "    AdapterView<?> parent,",
@@ -97,6 +94,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -109,9 +107,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.ListView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemClick(\"one\") void doStuff(",
         "    ListView parent,",
@@ -145,6 +141,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -157,9 +154,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.ListView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test<T extends ListView> extends Activity {",
         "  @OnItemClick(\"one\") void doStuff(",
         "    T parent,",
@@ -193,6 +188,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -204,9 +200,7 @@
         "package test;",
         "import android.content.Context;",
         "import android.widget.ListView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends ListView {",
         "  @OnItemClick void doStuff() {}",
         "  public Test(Context context) {",
@@ -238,6 +232,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -249,18 +244,17 @@
         "package test;",
         "import android.content.Context;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemClick({\"one\", \"\"}) void doStuff() {}",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains empty ID. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 
   @Test public void failsWithInvalidParameterConfiguration() {
@@ -269,9 +263,7 @@
         "import android.app.Activity;",
         "import android.view.View;",
         "import android.widget.AdapterView;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemClick(\"one\") void doStuff(",
         "    AdapterView<?> parent,",
@@ -281,6 +273,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
@@ -303,6 +296,6 @@
             "    long",
             "  ",
             "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(9);
+        .in(source).onLine(7);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
index 45540473..08c0154f 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemLongClickTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemLongClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemLongClick(\"one\") boolean doStuff() { return false; }",
         "}"
@@ -48,6 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
index 97d0b928..be3f3de7 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnItemSelectedTest.java
@@ -16,9 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemSelected;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemSelected(\"one\") void doStuff() {}",
         "}"
@@ -51,6 +49,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -61,10 +60,8 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemSelected(value = \"one\", callback = NOTHING_SELECTED)",
         "  void doStuff() {}",
@@ -98,6 +95,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -108,10 +106,8 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemSelected(\"one\")",
         "  void onItemSelected() {}",
@@ -148,6 +144,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -158,10 +155,8 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnItemSelected;",
         "import static butterfork.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnItemSelected({ \"one\", \"two\" })",
         "  void onItemSelected() {}",
@@ -214,6 +209,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
index 9721ab7b..937d56b6 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnLongClickTest.java
@@ -16,9 +16,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnLongClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnLongClick(\"one\") boolean doStuff() {",
         "    return true;",
@@ -49,6 +47,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -59,9 +58,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnLongClick;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnLongClick(\"one\")",
         "  public void doStuff() {",
@@ -69,10 +66,11 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 }
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
index afef3d39..57aac3e3 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnPageChangeTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnPageChange;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnPageChange(\"one\") void doStuff() {}",
         "}"
@@ -52,6 +50,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
index 9bb8754f..94f99bf8 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnTextChangedTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnTextChanged;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnTextChanged(\"one\") void doStuff() {}",
         "}"
@@ -55,6 +53,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
diff --git a/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java b/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
index ffa1271e..f97701d1 100644
--- a/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
+++ b/butterfork-compiler/src/test/java/butterfork/internal/OnTouchTest.java
@@ -15,9 +15,7 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnTouch;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnTouch(\"one\") boolean doStuff() { return false; }",
         "}"
@@ -48,6 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .compilesWithoutError()
         .and()
@@ -58,19 +57,18 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
-        "import butterfork.BindResources;",
         "import butterfork.OnTouch;",
-        "@BindResources(butterfork.internal.R.class)",
         "public class Test extends Activity {",
         "  @OnTouch(\"one\") boolean doStuff1() {}",
         "  @OnTouch(\"one\") boolean doStuff2() {}",
         "}"));
 
     ASSERT.about(javaSource()).that(source)
+        .withCompilerOptions("-Arespackagename=" + R.class.getPackage().getName())
         .processedWith(new ButterForkProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID one. (test.Test.doStuff2)")
-        .in(source).onLine(8);
+        .in(source).onLine(6);
   }
 }
diff --git a/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
index b9c563f2..ddde1e5d 100644
--- a/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
+++ b/butterfork-plugin/src/main/groovy/com/oguzbabaoglu/ButterForkPlugin.groovy
@@ -3,7 +3,6 @@ package com.oguzbabaoglu
 import org.gradle.api.GradleException
 import org.gradle.api.Plugin
 import org.gradle.api.Project
-import org.gradle.api.tasks.SourceSet
 
 /**
  * The ButterFork plugin will add build tasks to generate B files from R files.
@@ -11,7 +10,6 @@ import org.gradle.api.tasks.SourceSet
 class ButterForkPlugin implements Plugin<Project> {
 
     private Project project
-    private String packageName
 
     void apply(Project project) {
 
@@ -22,8 +20,11 @@ class ButterForkPlugin implements Plugin<Project> {
         }
 
         project.afterEvaluate {
+
+            String packageName = findPackageName()
+
             // The Android variants are only available at this point.
-            addGenerateTasks()
+            addGenerateTasks(packageName)
         }
     }
 
@@ -35,54 +36,48 @@ class ButterForkPlugin implements Plugin<Project> {
     /**
      * Adds generateB tasks to the project.
      */
-    private addGenerateTasks() {
+    private addGenerateTasks(String packageName) {
         getNonTestVariants().each { variant ->
-            addTaskForVariant(variant)
+            addTaskForVariant(variant, packageName)
         }
     }
 
     /**
      * Creates generateB task for a variant in an Android project.
      */
-    private addTaskForVariant(final Object variant) {
+    private addTaskForVariant(final Object variant, final String packageName) {
 
-        String taskName = 'generate' + getSubstringForTaskName(variant.name) + 'B'
+        String taskName = 'generate' + variant.name.capitalize() + 'B'
         String rFilePath = 'build/generated/source/r/' + variant.dirName + '/' +
-                getPackageName().replace('.', '/') + '/R.java'
+                packageName.replace('.', '/') + '/R.java'
 
         String bDirectoryPath = 'build/generated/source/b/' + variant.dirName
 
         GenerateBTask task = project.tasks.create(taskName, GenerateBTask)
         task.rFilePath = rFilePath
         task.bDirectoryPath = bDirectoryPath
-        task.packageName = getPackageName()
+        task.packageName = packageName
+
+        variant.outputs.each { output ->
+            if (output.name == variant.name) {
+                task.dependsOn(output.processResources)
+            }
+        }
+
+        variant.javaCompile.options.compilerArgs << "-Arespackagename=" + packageName
 
         variant.javaCompile.dependsOn(task)
         variant.registerJavaGeneratingTask(task, project.file(bDirectoryPath))
     }
 
-    /**
-     * Returns the conventional substring that represents the variant in task names,
-     * e.g., "generateDebugB"
-     */
-    static String getSubstringForTaskName(String variantName) {
-        return variantName == SourceSet.MAIN_SOURCE_SET_NAME ?
-                '' : variantName.capitalize()
-    }
-
     /**
      * Helper method that parses the manifest file and returns package name
      *
      * @return package name defined in manifest file
      */
-    private String getPackageName() {
-
-        if (packageName == null) {
-            File manifestFile = project.file(project.android.sourceSets.main.manifest.srcFile.toString())
-            packageName = (new XmlParser()).parse(manifestFile).@package
-        }
-
-        return packageName
+    private String findPackageName() {
+        File manifestFile = project.android.sourceSets.main.manifest.srcFile
+        return (new XmlParser()).parse(manifestFile).@package
     }
 
 }
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java b/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java
deleted file mode 100644
index d88b4e1d..00000000
--- a/butterfork-sample/src/main/java/com/example/butterfork/BaseActivity.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.example.butterfork;
-
-import android.app.Activity;
-
-import butterfork.BindResources;
-
-@BindResources(R.class)
-public class BaseActivity extends Activity {
-}
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
index 070b1839..692236d2 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleActivity.java
@@ -1,5 +1,6 @@
 package com.example.butterfork;
 
+import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
@@ -18,7 +19,7 @@
 
 import static android.widget.Toast.LENGTH_SHORT;
 
-public class SimpleActivity extends BaseActivity {
+public class SimpleActivity extends Activity {
   private static final ButterFork.Action<View> ALPHA_FADE = new ButterFork.Action<View>() {
     @Override public void apply(View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
@@ -29,28 +30,28 @@
     }
   };
 
-  @Bind("title") TextView title;
-  @Bind("subtitle") TextView subtitle;
-  @Bind("hello") Button hello;
-  @Bind("list_of_things") ListView listOfThings;
-  @Bind("footer") TextView footer;
+  @Bind(B.id.title) TextView title;
+  @Bind(B.id.subtitle) TextView subtitle;
+  @Bind(B.id.hello) Button hello;
+  @Bind(B.id.list_of_things) ListView listOfThings;
+  @Bind(B.id.footer) TextView footer;
 
-  @Bind({ "title", "subtitle", "hello" })
+  @Bind({ B.id.title, B.id.subtitle, B.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
 
-  @OnClick("hello") void sayHello() {
+  @OnClick(B.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterFork.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick("hello") boolean sayGetOffMe() {
+  @OnLongClick(B.id.hello) boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
 
-  @OnItemClick("list_of_things") void onItemClick(int position) {
+  @OnItemClick(B.id.list_of_things) void onItemClick(int position) {
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
diff --git a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
index 039960ec..30932222 100644
--- a/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
+++ b/butterfork-sample/src/main/java/com/example/butterfork/SimpleAdapter.java
@@ -8,7 +8,6 @@
 import android.widget.TextView;
 
 import butterfork.Bind;
-import butterfork.BindResources;
 import butterfork.ButterFork;
 
 public class SimpleAdapter extends BaseAdapter {
@@ -52,11 +51,10 @@ public SimpleAdapter(Context context) {
     return view;
   }
 
-  @BindResources(R.class)
   static class ViewHolder {
-    @Bind("word") TextView word;
-    @Bind("length") TextView length;
-    @Bind("position") TextView position;
+    @Bind(B.id.word) TextView word;
+    @Bind(B.id.length) TextView length;
+    @Bind(B.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterFork.bind(this, view);
diff --git a/butterfork/src/main/java/butterfork/BindResources.java b/butterfork/src/main/java/butterfork/BindResources.java
deleted file mode 100644
index d951c68b..00000000
--- a/butterfork/src/main/java/butterfork/BindResources.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package butterfork;
-
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.TYPE;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind an R class where Ids will be searched in.
- */
-@Retention(CLASS) @Target(TYPE) @Inherited
-public @interface BindResources {
-  /** R class. */
-  Class value();
-}
diff --git a/gradle.properties b/gradle.properties
index 1d3591c8..3b6f6801 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,4 +15,7 @@
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
\ No newline at end of file
+# org.gradle.parallel=true
+
+org.gradle.daemon=true
+org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
