diff --git a/butterknife/src/main/java/butterknife/OnGroupCollapse.java b/butterknife/src/main/java/butterknife/OnGroupCollapse.java
new file mode 100644
index 00000000..44d594c2
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/OnGroupCollapse.java
@@ -0,0 +1,41 @@
+package butterknife;
+
+import android.view.View;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static android.widget.ExpandableListView.OnGroupCollapseListener;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a method to an {@link OnGroupCollapseListener OnGroupCollapseListener} on the view for each ID
+ * specified.
+ * <pre><code>
+ * {@literal @}OnGroupCollapse(R.id.example_list) void onGroupCollapse(int position) {
+ *   Toast.makeText(this, "Collapseed group position " + position + "!", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * Any number of parameters from {@link OnGroupCollapseListener#onGroupCollapse(int) onGroupCollapse}
+ * may be used on the method.
+ */
+@Target(METHOD)
+@Retention(CLASS)
+@ListenerClass(
+    targetType = "android.widget.ExpandableListView",
+    setter = "setOnGroupCollapseListener",
+    type = "android.widget.ExpandableListView.OnGroupCollapseListener",
+    method = @ListenerMethod(
+        name = "onGroupCollapse",
+        parameters = {
+            "int"
+        },
+        returnType = "void"
+    )
+)
+public @interface OnGroupCollapse {
+  /** View IDs to which the method will be bound. */
+  int[] value() default { View.NO_ID };
+}
diff --git a/butterknife/src/main/java/butterknife/OnGroupExpand.java b/butterknife/src/main/java/butterknife/OnGroupExpand.java
new file mode 100644
index 00000000..be012e4d
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/OnGroupExpand.java
@@ -0,0 +1,41 @@
+package butterknife;
+
+import android.view.View;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static android.widget.ExpandableListView.OnGroupExpandListener;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a method to an {@link OnGroupExpandListener OnGroupExpandListener} on the view for each ID
+ * specified.
+ * <pre><code>
+ * {@literal @}OnGroupExpand(R.id.example_list) void onGroupExpand(int position) {
+ *   Toast.makeText(this, "Expanded group position " + position + "!", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * Any number of parameters from {@link OnGroupExpandListener#onGroupExpand(int) onGroupExpand}
+ * may be used on the method.
+ */
+@Target(METHOD)
+@Retention(CLASS)
+@ListenerClass(
+    targetType = "android.widget.ExpandableListView",
+    setter = "setOnGroupExpandListener",
+    type = "android.widget.ExpandableListView.OnGroupExpandListener",
+    method = @ListenerMethod(
+        name = "onGroupExpand",
+        parameters = {
+            "int"
+        },
+        returnType = "void"
+    )
+)
+public @interface OnGroupExpand {
+  /** View IDs to which the method will be bound. */
+  int[] value() default { View.NO_ID };
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index ecc1171a..37d8b1f7 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -9,6 +9,8 @@
 import butterknife.OnEditorAction;
 import butterknife.OnFocusChange;
 import butterknife.OnGroupClick;
+import butterknife.OnGroupCollapse;
+import butterknife.OnGroupExpand;
 import butterknife.OnItemClick;
 import butterknife.OnItemLongClick;
 import butterknife.OnItemSelected;
@@ -80,6 +82,8 @@
       OnEditorAction.class, //
       OnFocusChange.class, //
       OnGroupClick.class, //
+      OnGroupCollapse.class, //
+      OnGroupExpand.class, //
       OnItemClick.class, //
       OnItemLongClick.class, //
       OnItemSelected.class, //
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
index a53063b5..2ab10a9c 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -15,6 +15,8 @@
 import butterknife.OnEditorAction;
 import butterknife.OnFocusChange;
 import butterknife.OnGroupClick;
+import butterknife.OnGroupCollapse;
+import butterknife.OnGroupExpand;
 import butterknife.OnItemClick;
 import butterknife.OnItemLongClick;
 import butterknife.OnItemSelected;
@@ -470,4 +472,24 @@ void afterTextChangedAllMethods() {}
 
   @OnChildClick({ 1940, 1950 })
   boolean childClickMultiple() {return false;}
+
+  /////////////////////////////////////////////////////////////////////////////////////////////////
+
+  @OnGroupCollapse(1960)
+  void groupCollapse() {}
+  @OnGroupCollapse(1970)
+  void groupCollapse(int one) {}
+
+  @OnGroupCollapse({ 1980, 1990 })
+  void groupCollapseMultiple() {}
+
+  /////////////////////////////////////////////////////////////////////////////////////////////////
+
+  @OnGroupExpand(2000)
+  void groupExpand() {}
+  @OnGroupExpand(2010)
+  void groupExpand(int one) {}
+
+  @OnGroupExpand({ 2020, 2030 })
+  void groupExpandMultiple() {}
 }
diff --git a/butterknife/src/test/java/butterknife/internal/OnGroupCollapseTest.java b/butterknife/src/test/java/butterknife/internal/OnGroupCollapseTest.java
new file mode 100644
index 00000000..fe8e20f1
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/OnGroupCollapseTest.java
@@ -0,0 +1,180 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnGroupCollapseTest {
+  @Test public void onCollapseInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupCollapse;",
+        "public class Test extends Activity {",
+        "  @OnGroupCollapse(1) void doStuff() {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupCollapseListener(",
+            "      new android.widget.ExpandableListView.OnGroupCollapseListener() {",
+            "        @Override public void onGroupCollapse(int p0) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onCollapseInjectionWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupCollapse;",
+        "public class Test extends Activity {",
+        "  @OnGroupCollapse(1) void doStuff(",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupCollapseListener(",
+            "      new android.widget.ExpandableListView.OnGroupCollapseListener() {",
+            "        @Override public void onGroupCollapse(int p0) {",
+            "          target.doStuff(p0);",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onCollapseRootViewInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupCollapse;",
+        "public class Test extends ExpandableListView {",
+        "  @OnGroupCollapse void doStuff() {}",
+        "  public Test(Context context) {",
+        "    super(context);",
+        "  }",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = target;",
+            "    ((android.widget.ExpandableListView) view).setOnGroupCollapseListener(",
+            "      new android.widget.ExpandableListView.OnGroupCollapseListener() {",
+            "        @Override public void onGroupCollapse(int p0) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupCollapse;",
+        "public class Test extends Activity {",
+        "  @OnGroupCollapse({1, -1}) void doStuff() {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining("@OnGroupCollapse annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupCollapse;",
+        "public class Test extends Activity {",
+        "  @OnGroupCollapse(1) void doStuff(View whatIsThis) {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining(Joiner.on('\n').join(
+            "Unable to match @OnGroupCollapse method arguments. (test.Test.doStuff)",
+            "  ",
+            "    Parameter #1: android.view.View",
+            "      did not match any listener parameters",
+            "  ",
+            "  Methods may have up to 1 parameter(s):",
+            "  ",
+            "    int",
+            "  ",
+            "  These may be listed in any order but will be searched for from top to bottom."))
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnGroupExpandTest.java b/butterknife/src/test/java/butterknife/internal/OnGroupExpandTest.java
new file mode 100644
index 00000000..1589ddd9
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/OnGroupExpandTest.java
@@ -0,0 +1,180 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnGroupExpandTest {
+  @Test public void onExpandInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupExpand;",
+        "public class Test extends Activity {",
+        "  @OnGroupExpand(1) void doStuff() {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupExpandListener(",
+            "      new android.widget.ExpandableListView.OnGroupExpandListener() {",
+            "        @Override public void onGroupExpand(int p0) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onExpandInjectionWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupExpand;",
+        "public class Test extends Activity {",
+        "  @OnGroupExpand(1) void doStuff(",
+        "    int position",
+        "  ) {}",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((android.widget.ExpandableListView) view).setOnGroupExpandListener(",
+            "      new android.widget.ExpandableListView.OnGroupExpandListener() {",
+            "        @Override public void onGroupExpand(int p0) {",
+            "          target.doStuff(p0);",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void onExpandRootViewInjection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupExpand;",
+        "public class Test extends ExpandableListView {",
+        "  @OnGroupExpand void doStuff() {}",
+        "  public Test(Context context) {",
+        "    super(context);",
+        "  }",
+        "}"));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = target;",
+            "    ((android.widget.ExpandableListView) view).setOnGroupExpandListener(",
+            "      new android.widget.ExpandableListView.OnGroupExpandListener() {",
+            "        @Override public void onGroupExpand(int p0) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.content.Context;",
+        "import android.app.Activity;",
+        "import butterknife.OnGroupExpand;",
+        "public class Test extends Activity {",
+        "  @OnGroupExpand({1, -1}) void doStuff() {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining("@OnGroupExpand annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import android.widget.ExpandableListView;",
+        "import butterknife.OnGroupExpand;",
+        "public class Test extends Activity {",
+        "  @OnGroupExpand(1) void doStuff(View whatIsThis) {}",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .failsToCompile()
+        .withErrorContaining(Joiner.on('\n').join(
+            "Unable to match @OnGroupExpand method arguments. (test.Test.doStuff)",
+            "  ",
+            "    Parameter #1: android.view.View",
+            "      did not match any listener parameters",
+            "  ",
+            "  Methods may have up to 1 parameter(s):",
+            "  ",
+            "    int",
+            "  ",
+            "  These may be listed in any order but will be searched for from top to bottom."))
+        .in(source).onLine(7);
+  }
+}
