diff --git a/build.gradle b/build.gradle
index 5ccd352f..4f514777 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
       'compileSdk': 28,
 
       'supportLibrary': '28.0.0',
-      'androidTools': '26.2.0-rc03',
+      'androidTools': '26.2.0',
       'kotlin': '1.2.70',
 
       'release': '8.8.1',
@@ -61,7 +61,7 @@ buildscript {
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.2.0-rc03'
+    classpath 'com.android.tools.build:gradle:3.2.0'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index b1501b5c..c840a69a 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -30,12 +30,12 @@
 @Target(METHOD)
 @Retention(CLASS)
 @ListenerClass(
-    targetType = "android.support.v4.view.ViewPager",
-    targetTypeAndroidX = "androidx.viewpager.widget.ViewPager",
+    targetType = "androidx.viewpager.widget.ViewPager",
+    legacyTargetType = "android.support.v4.view.ViewPager",
     setter = "addOnPageChangeListener",
     remover = "removeOnPageChangeListener",
-    type = "android.support.v4.view.ViewPager.OnPageChangeListener",
-    typeAndroidX = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
+    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
+    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
 public @interface OnPageChange {
diff --git a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index 52d89e52..c736e899 100644
--- a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -10,7 +10,7 @@
 public @interface ListenerClass {
   String targetType();
 
-  String targetTypeAndroidX() default "";
+  String legacyTargetType() default "";
 
   /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */
   String setter();
@@ -24,7 +24,7 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  String typeAndroidX() default "";
+  String legacyType() default "";
 
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 194b8605..0df2479c 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -44,21 +44,21 @@
   private static final ClassName VIEW = ClassName.get("android.view", "View");
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
-  private static final ClassName UI_THREAD =
+  private static final ClassName UI_THREAD_LEGACY =
       ClassName.get("android.support.annotation", "UiThread");
-  private static final ClassName UI_THREAD_ANDROIDX =
+  private static final ClassName UI_THREAD =
       ClassName.get("androidx.annotation", "UiThread");
-  private static final ClassName CALL_SUPER =
+  private static final ClassName CALL_SUPER_LEGACY =
       ClassName.get("android.support.annotation", "CallSuper");
-  private static final ClassName CALL_SUPER_ANDROIDX =
+  private static final ClassName CALL_SUPER =
       ClassName.get("androidx.annotation", "CallSuper");
   private static final ClassName SUPPRESS_LINT =
       ClassName.get("android.annotation", "SuppressLint");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
-  static final ClassName CONTEXT_COMPAT =
+  static final ClassName CONTEXT_COMPAT_LEGACY =
       ClassName.get("android.support.v4.content", "ContextCompat");
-  static final ClassName CONTEXT_COMPAT_ANDROIDX =
+  static final ClassName CONTEXT_COMPAT =
       ClassName.get("androidx.core.content", "ContextCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
@@ -90,14 +90,14 @@ private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean
     this.parentBinding = parentBinding;
   }
 
-  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {
-    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);
+  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {
+    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);
     return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
 
-  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
+  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {
     TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
         .addModifiers(PUBLIC);
     if (isFinal) {
@@ -115,32 +115,32 @@ private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {
     }
 
     if (isView) {
-      result.addMethod(createBindingConstructorForView(useAndroidX));
+      result.addMethod(createBindingConstructorForView(useLegacyTypes));
     } else if (isActivity) {
-      result.addMethod(createBindingConstructorForActivity(useAndroidX));
+      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));
     } else if (isDialog) {
-      result.addMethod(createBindingConstructorForDialog(useAndroidX));
+      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));
     }
     if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
-      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));
+      result.addMethod(createBindingViewDelegateConstructor(useLegacyTypes));
     }
-    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));
+    result.addMethod(createBindingConstructor(sdk, debuggable, useLegacyTypes));
 
     if (hasViewBindings() || parentBinding == null) {
-      result.addMethod(createBindingUnbindMethod(result, useAndroidX));
+      result.addMethod(createBindingUnbindMethod(result, useLegacyTypes));
     }
 
     return result.build();
   }
 
-  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
+  private MethodSpec createBindingViewDelegateConstructor(boolean useLegacyTypes) {
     return MethodSpec.constructorBuilder()
         .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
                 + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
             bindingClassName, targetTypeName, CONTEXT)
         .addAnnotation(Deprecated.class)
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target")
         .addParameter(VIEW, "source")
@@ -148,9 +148,9 @@ private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {
         .build();
   }
 
-  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForView(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -161,9 +161,9 @@ private MethodSpec createBindingConstructorForView(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForActivity(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -174,9 +174,9 @@ private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
+  private MethodSpec createBindingConstructorForDialog(boolean useLegacyTypes) {
     MethodSpec.Builder builder = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC)
         .addParameter(targetTypeName, "target");
     if (constructorNeedsView()) {
@@ -187,9 +187,9 @@ private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {
     return builder.build();
   }
 
-  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {
+  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useLegacyTypes) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
-        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD)
+        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD)
         .addModifiers(PUBLIC);
 
     if (hasMethodBindings()) {
@@ -238,7 +238,7 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
         constructor.addStatement("$T view", VIEW);
       }
       for (ViewBinding binding : viewBindings) {
-        addViewBinding(constructor, binding, debuggable, useAndroidX);
+        addViewBinding(constructor, binding, debuggable, useLegacyTypes);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
         constructor.addStatement("$L", binding.render(debuggable));
@@ -264,12 +264,13 @@ private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean
     return constructor.build();
   }
 
-  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
+      boolean useLegacyTypes) {
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
     if (!isFinal && parentBinding == null) {
-      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);
+      result.addAnnotation(useLegacyTypes ? CALL_SUPER_LEGACY : CALL_SUPER);
     }
 
     if (hasTargetField()) {
@@ -293,7 +294,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
     if (hasMethodBindings()) {
       result.addCode("\n");
       for (ViewBinding binding : viewBindings) {
-        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);
+        addFieldAndUnbindStatement(bindingClass, result, binding, useLegacyTypes);
       }
     }
 
@@ -305,7 +306,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, bool
   }
 
   private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBinding bindings, boolean useAndroidX) {
+      ViewBinding bindings, boolean useLegacyTypes) {
     // Only add fields to the binding if there are method bindings.
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
@@ -331,12 +332,12 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
       boolean requiresRemoval = !"".equals(listenerClass.remover());
       String listenerField = "null";
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));
+        TypeName listenerClassName = bestGuess(getType(listenerClass, useLegacyTypes));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addField(listenerClassName, listenerField, PRIVATE);
       }
 
-      String targetType = getTargetType(listenerClass, useAndroidX);
+      String targetType = getTargetType(listenerClass, useLegacyTypes);
       if (!VIEW_TYPE.equals(targetType)) {
         unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),
             fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
@@ -357,20 +358,20 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
     }
   }
 
-  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {
+  private static String getType(ListenerClass listenerClass, boolean useLegacyTypes) {
     String type = listenerClass.type();
-    String typeAndroidX = listenerClass.typeAndroidX();
-    if (useAndroidX && !typeAndroidX.isEmpty()) {
-      type = typeAndroidX;
+    String legacyType = listenerClass.legacyType();
+    if (useLegacyTypes && !legacyType.isEmpty()) {
+      type = legacyType;
     }
     return type;
   }
 
-  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {
+  private static String getTargetType(ListenerClass listenerClass, boolean useLegacyTypes) {
     String targetType = listenerClass.targetType();
-    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();
-    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {
-      targetType = targetTypeAndroidX;
+    String legacyTargetType = listenerClass.legacyTargetType();
+    if (useLegacyTypes && !legacyTargetType.isEmpty()) {
+      targetType = legacyTargetType;
     }
     return targetType;
   }
@@ -382,7 +383,7 @@ private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemo
   }
 
   private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
-      boolean useAndroidX) {
+      boolean useLegacyTypes) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
       FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());
@@ -423,7 +424,7 @@ private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, bool
     }
 
     addFieldBinding(result, binding, debuggable);
-    addMethodBindings(result, binding, debuggable, useAndroidX);
+    addMethodBindings(result, binding, debuggable, useLegacyTypes);
   }
 
   private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
@@ -445,7 +446,7 @@ private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boo
   }
 
   private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
-      boolean useAndroidX) {
+      boolean useLegacyTypes) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
@@ -473,7 +474,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
       Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
       TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
-          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));
+          .superclass(ClassName.bestGuess(getType(listener, useLegacyTypes)));
 
       for (ListenerMethod method : getListenerMethods(listener)) {
         MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
@@ -528,12 +529,12 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, b
       boolean requiresRemoval = listener.remover().length() != 0;
       String listenerField = null;
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));
+        TypeName listenerClassName = bestGuess(getType(listener, useLegacyTypes));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addStatement("$L = $L", listenerField, callback.build());
       }
 
-      String targetType = getTargetType(listener, useAndroidX);
+      String targetType = getTargetType(listener, useLegacyTypes);
       if (!VIEW_TYPE.equals(targetType)) {
         result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,
             listener.setter(), requiresRemoval ? listenerField : callback.build());
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 7e4c2330..27093e6a 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -123,7 +123,7 @@
 
   private int sdk = 1;
   private boolean debuggable = true;
-  private boolean useAndroidX = false;
+  private boolean useLegacyTypes = false;
 
   private final RScanner rScanner = new RScanner();
 
@@ -143,7 +143,7 @@
     }
 
     debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
-    useAndroidX = hasAndroidX(env.getElementUtils());
+    useLegacyTypes = !hasAndroidX(env.getElementUtils());
 
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
@@ -193,7 +193,7 @@
       TypeElement typeElement = entry.getKey();
       BindingSet binding = entry.getValue();
 
-      JavaFile javaFile = binding.brewJava(sdk, debuggable, useAndroidX);
+      JavaFile javaFile = binding.brewJava(sdk, debuggable, useLegacyTypes);
       try {
         javaFile.writeTo(filer);
       } catch (IOException e) {
@@ -671,11 +671,11 @@ private void parseResourceColor(Element element,
     Id resourceId = elementToId(element, BindColor.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
 
-    FieldResourceBinding.Type colorStateList = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_STATE_LIST_ANDROIDX
-        : FieldResourceBinding.Type.COLOR_STATE_LIST;
-    FieldResourceBinding.Type color = useAndroidX
-        ? FieldResourceBinding.Type.COLOR_ANDROIDX
+    FieldResourceBinding.Type colorStateList = useLegacyTypes
+        ? FieldResourceBinding.Type.COLOR_STATE_LIST_LEGACY
+            : FieldResourceBinding.Type.COLOR_STATE_LIST;
+    FieldResourceBinding.Type color = useLegacyTypes
+        ? FieldResourceBinding.Type.COLOR_LEGACY
         : FieldResourceBinding.Type.COLOR;
     builder.addResource(new FieldResourceBinding(
         resourceId,
@@ -782,7 +782,7 @@ private void parseResourceDrawable(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint),
-        useAndroidX));
+        useLegacyTypes));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -854,7 +854,7 @@ private void parseResourceFont(Element element,
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     Id resourceId = elementToId(element, BindFont.class, bindFont.value());
-    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useAndroidX));
+    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useLegacyTypes));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -1362,16 +1362,11 @@ private static boolean isListenerRequired(ExecutableElement element) {
   }
 
   /**
-   * Perform two lookups to see if the androidx annotation and core libraries are on the application
-   * classpath. If both aren't present butterknife will leverage support annotations and
-   * compat libraries instead.
+   * Check for an AndroidX type required by the runtime to determine whether we're in AndroidX or
+   * using legacy support library types.
    */
-  private static boolean hasAndroidX(Elements elementUtils) {
-    boolean annotationsPresent
-        = elementUtils.getTypeElement("androidx.annotation.NonNull") != null;
-    boolean corePresent
-        = elementUtils.getTypeElement("androidx.core.content.ContextCompat") != null;
-    return annotationsPresent && corePresent;
+  private static boolean hasAndroidX(Elements elements) {
+    return elements.getTypeElement("androidx.core.content.ContextCompat") != null;
   }
 
   private static class RScanner extends TreeScanner {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 2bdac846..ac44d7e2 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -2,8 +2,8 @@
 
 import com.squareup.javapoet.CodeBlock;
 
+import static butterknife.compiler.BindingSet.CONTEXT_COMPAT_LEGACY;
 import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
-import static butterknife.compiler.BindingSet.CONTEXT_COMPAT_ANDROIDX;
 import static butterknife.compiler.BindingSet.UTILS;
 import static butterknife.internal.Constants.NO_RES_ID;
 
@@ -11,13 +11,13 @@
   private final Id id;
   private final String name;
   private final Id tintAttributeId;
-  private final boolean androidX;
+  private final boolean useLegacyTypes;
 
-  FieldDrawableBinding(Id id, String name, Id tintAttributeId, boolean useAndroidX) {
+  FieldDrawableBinding(Id id, String name, Id tintAttributeId, boolean useLegacyTypes) {
     this.id = id;
     this.name = name;
     this.tintAttributeId = tintAttributeId;
-    this.androidX = useAndroidX;
+    this.useLegacyTypes = useLegacyTypes;
   }
 
   @Override public Id id() {
@@ -37,6 +37,6 @@
       return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
     }
     return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name,
-        androidX ? CONTEXT_COMPAT_ANDROIDX : CONTEXT_COMPAT, id.code);
+        useLegacyTypes ? CONTEXT_COMPAT_LEGACY : CONTEXT_COMPAT, id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 868e3bc3..80e0a9fe 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -13,13 +13,14 @@
   enum Type {
     BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
     BOOL("getBoolean"),
-    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
+    COLOR_LEGACY(new ResourceMethod(BindingSet.CONTEXT_COMPAT_LEGACY, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX, "getColor", false, 1),
+    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+    COLOR_STATE_LIST_LEGACY(
+        new ResourceMethod(BindingSet.CONTEXT_COMPAT_LEGACY, "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
-    COLOR_STATE_LIST_ANDROIDX(new ResourceMethod(BindingSet.CONTEXT_COMPAT_ANDROIDX,
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT,
         "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
     DIMEN_AS_INT("getDimensionPixelSize"),
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 7ee422a4..b9c67bfc 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -5,9 +5,9 @@
 import com.squareup.javapoet.CodeBlock;
 
 final class FieldTypefaceBinding implements ResourceBinding {
-  private static final ClassName RESOURCES_COMPAT =
+  private static final ClassName RESOURCES_COMPAT_LEGACY =
       ClassName.get("android.support.v4.content.res", "ResourcesCompat");
-  private static final ClassName RESOURCES_COMPAT_ANDROIDX =
+  private static final ClassName RESOURCES_COMPAT =
       ClassName.get("androidx.core.content.res", "ResourcesCompat");
   private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
 
@@ -37,13 +37,13 @@
   private final Id id;
   private final String name;
   private final TypefaceStyles style;
-  private final boolean useAndroidX;
+  private final boolean useLegacyTypes;
 
-  FieldTypefaceBinding(Id id, String name, TypefaceStyles style, boolean useAndroidX) {
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style, boolean useLegacyTypes) {
     this.id = id;
     this.name = name;
     this.style = style;
-    this.useAndroidX = useAndroidX;
+    this.useLegacyTypes = useLegacyTypes;
   }
 
   @Override public Id id() {
@@ -58,7 +58,7 @@
     CodeBlock typeface = sdk >= 26
         ? CodeBlock.of("res.getFont($L)", id.code)
         : CodeBlock.of("$T.getFont(context, $L)",
-            useAndroidX ? RESOURCES_COMPAT_ANDROIDX : RESOURCES_COMPAT, id.code);
+            useLegacyTypes ? RESOURCES_COMPAT_LEGACY : RESOURCES_COMPAT, id.code);
     if (style != TypefaceStyles.NORMAL) {
       typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
     }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 4e5b618a..cfc5c261 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -79,7 +79,7 @@ class ButterKnifePlugin : Plugin<Project> {
             inputs.file(rFile)
 
             doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", useAndroidX)
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", !useAndroidX)
             }
           }
         }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index 64856586..4cda90a4 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -27,8 +27,8 @@
  * Also enables adding support annotations to indicate the type of resource for every field.
  */
 public final class FinalRClassBuilder {
-  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
-  private static final String ANDROIDX_ANNOTATION_PACKAGE = "androidx.annotation";
+  private static final String ANNOTATION_PACKAGE = "androidx.annotation";
+  private static final String ANNOTATION_PACKAGE_LEGACY = "android.support.annotation";
   private static final String[] SUPPORTED_TYPES = {
       "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
       "string", "style", "styleable"
@@ -36,17 +36,17 @@
 
   private FinalRClassBuilder() { }
 
-  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useAndroidX)
+  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useLegacyTypes)
       throws Exception {
     CompilationUnit compilationUnit = JavaParser.parse(rFile);
     TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
 
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC, FINAL);
 
     for (Node node : resourceClass.getChildNodes()) {
       if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useAndroidX);
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useLegacyTypes);
       }
     }
 
@@ -58,13 +58,14 @@ public static void brewJava(File rFile, File outputDir, String packageName, Stri
   }
 
   private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node, boolean useAndroidX) {
+      ClassOrInterfaceDeclaration node, boolean useLegacyTypes) {
     if (!supportedTypes.contains(node.getNameAsString())) {
       return;
     }
 
     String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type)
+        .addModifiers(PUBLIC, STATIC, FINAL);
 
     for (BodyDeclaration field : node.getMembers()) {
       if (field instanceof FieldDeclaration) {
@@ -73,7 +74,7 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
         // used in annotations.
         if (isInt(declaration)) {
           addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type, useAndroidX));
+                  getSupportAnnotationClass(type, useLegacyTypes));
         }
       }
     }
@@ -105,8 +106,8 @@ private static void addResourceField(TypeSpec.Builder resourceType, VariableDecl
     resourceType.addField(fieldSpecBuilder.build());
   }
 
-  private static ClassName getSupportAnnotationClass(String type, boolean useAndroidX) {
-    String supportPackage = useAndroidX ? ANDROIDX_ANNOTATION_PACKAGE : SUPPORT_ANNOTATION_PACKAGE;
+  private static ClassName getSupportAnnotationClass(String type, boolean useLegacyTypes) {
+    String supportPackage = useLegacyTypes ? ANNOTATION_PACKAGE_LEGACY : ANNOTATION_PACKAGE;
     return ClassName.get(supportPackage, capitalize(type) + "Res");
   }
 
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
index ffedd5f8..a07dfc67 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -12,7 +12,7 @@ import org.junit.runners.Parameterized
 import org.junit.runners.Parameterized.Parameters
 
 @RunWith(Parameterized::class)
-class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useAndroidX: Boolean) {
+class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useLegacyTypes: Boolean) {
   @Rule @JvmField val tempFolder = TemporaryFolder()
 
   @Test fun brewJava() {
@@ -23,12 +23,12 @@ class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useAndro
     }
 
     val outputDir = tempFolder.newFolder()
-    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useAndroidX)
+    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useLegacyTypes)
 
     val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
     var expected = javaClass.getResource("/fixtures/$r2File.java").readText()
-    if (useAndroidX) {
-      expected = expected.replace("import android.support.", "import androidx.")
+    if (useLegacyTypes) {
+      expected = expected.replace("import androidx.", "import android.support.")
     }
 
     assertEquals(expected.trim(), actual.trim())
@@ -39,10 +39,10 @@ class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useAndro
 
   companion object {
     @JvmStatic @Parameters fun data() = listOf(
-        arrayOf<Any>("R", "R2", false),
-        arrayOf<Any>("RFinal", "R2", false),
-        arrayOf<Any>("R", "R2", true),
-        arrayOf<Any>("RFinal", "R2", true)
+        arrayOf("R", "R2", false),
+        arrayOf("RFinal", "R2", false),
+        arrayOf("R", "R2", true),
+        arrayOf("RFinal", "R2", true)
     )
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index 4b44bab4..d70a8a41 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,21 +1,21 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
-import android.support.annotation.AnimRes;
-import android.support.annotation.ArrayRes;
-import android.support.annotation.AttrRes;
-import android.support.annotation.BoolRes;
-import android.support.annotation.ColorRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.IntegerRes;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.MenuRes;
-import android.support.annotation.PluralsRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-import android.support.annotation.StyleableRes;
+import androidx.annotation.AnimRes;
+import androidx.annotation.ArrayRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.BoolRes;
+import androidx.annotation.ColorRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.IntegerRes;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.MenuRes;
+import androidx.annotation.PluralsRes;
+import androidx.annotation.StringRes;
+import androidx.annotation.StyleRes;
+import androidx.annotation.StyleableRes;
 
 public final class R2 {
   public static final class anim {
