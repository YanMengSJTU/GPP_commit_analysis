diff --git a/CHANGELOG.md b/CHANGELOG.md
index b83b766f..2fd857cc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,31 @@
 Change Log
 ==========
 
+Version 7.0.1 *(2015-06-30)*
+----------------------------
+
+ * Fix: Correct `ClassCastException` which occurred when `@Nullable` array bindings had missing views.
+
+
+Version 7.0.0 *(2015-06-27)*
+----------------------------
+
+ * `@Bind` replaces `@InjectView` and `@InjectViews`.
+ * `ButterKnife.bind` and `ButterKnife.unbind` replaces `ButterKnife.inject` and `ButterKnife.reset`, respectively.
+ * `@Optional` has been removed. Use `@Nullable` from the 'support-annotations' library, or any other annotation
+   named "Nullable".
+ * New: Resource binding annotations!
+   * `@BindBool` binds an `R.bool` ID to a `boolean` field.
+   * `@BindColor` binds an `R.color` ID to an `int` or `ColorStateList` field.
+   * `@BindDimen` binds an `R.dimen` ID to an `int` (for pixel size) or `float` (for exact value) field.
+   * `@BindDrawable` binds an `R.drawable` ID to a `Drawable` field.
+   * `@BindInt` binds an `R.int` ID to an `int` field.
+   * `@BindString` binds an `R.string` ID to a `String` field.
+ * Fix: Missing views will be filtered out from list and array bindings.
+ * Note: If you are using Proguard, the generated class name has changed from being suffixed with `$$ViewInjector`
+   to `$$ViewBinder`.
+
+
 Version 6.1.0 *(2015-01-29)*
 ----------------------------
 
diff --git a/README.md b/README.md
index a27fe2dd..659df840 100644
--- a/README.md
+++ b/README.md
@@ -6,15 +6,19 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@FindView` on fields.
- * Group multiple views in a list using `@FindViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
+ * Eliminate resource lookups by using resource annotations on fields.
 
 ```java
 class ExampleActivity extends Activity {
-  @FindView(R.id.user) EditText username;
-  @FindView(R.id.pass) EditText password;
+  @Bind(R.id.user) EditText username;
+  @Bind(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error)
+  String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -43,12 +47,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife</artifactId>
-  <version>6.1.0</version>
+  <version>7.0.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton:butterknife:6.1.0'
+compile 'com.jakewharton:butterknife:7.0.1'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
index 8fcf2319..2f08c00e 100644
--- a/butterknife-sample/pom.xml
+++ b/butterknife-sample/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife-sample</artifactId>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 12391036..10b77d81 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -9,8 +9,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 import butterknife.ButterKnife;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
@@ -29,13 +28,13 @@
     }
   };
 
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.hello) Button hello;
-  @FindView(R.id.list_of_things) ListView listOfThings;
-  @FindView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.hello) Button hello;
+  @Bind(R.id.list_of_things) ListView listOfThings;
+  @Bind(R.id.footer) TextView footer;
 
-  @FindViews({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index 71131356..618065cd 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -7,7 +7,7 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 import butterknife.ButterKnife;
-import butterknife.FindView;
+import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,9 +51,9 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @FindView(R.id.word) TextView word;
-    @FindView(R.id.length) TextView length;
-    @FindView(R.id.position) TextView position;
+    @Bind(R.id.word) TextView word;
+    @Bind(R.id.length) TextView length;
+    @Bind(R.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
index 676bc290..d94ed0d6 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
@@ -12,7 +12,7 @@
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
 public class SimpleActivityTest {
-  @Test public void verifyContentViewInjection() {
+  @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
         .create() //
         .get();
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
index 58f206b0..92710ee7 100644
--- a/butterknife/pom.xml
+++ b/butterknife/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.jakewharton</groupId>
     <artifactId>butterknife-parent</artifactId>
-    <version>7.0.0-SNAPSHOT</version>
+    <version>7.0.2-SNAPSHOT</version>
   </parent>
 
   <artifactId>butterknife</artifactId>
diff --git a/butterknife/src/main/java/butterknife/FindView.java b/butterknife/src/main/java/butterknife/Bind.java
similarity index 82%
rename from butterknife/src/main/java/butterknife/FindView.java
rename to butterknife/src/main/java/butterknife/Bind.java
index 7a84a73b..2463353a 100644
--- a/butterknife/src/main/java/butterknife/FindView.java
+++ b/butterknife/src/main/java/butterknife/Bind.java
@@ -10,11 +10,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}FindView(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface FindView {
+public @interface Bind {
   /** View ID to which the field will be bound. */
-  int value();
+  int[] value();
 }
diff --git a/butterknife/src/main/java/butterknife/BindArray.java b/butterknife/src/main/java/butterknife/BindArray.java
new file mode 100644
index 00000000..57992678
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindArray.java
@@ -0,0 +1,37 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified array resource ID. The type of array will be inferred from the
+ * annotated element.
+ *
+ * String array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.countries) String[] countries;
+ * </code></pre>
+ *
+ * Int array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.phones) int[] phones;
+ * </code></pre>
+ *
+ * Text array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * </code></pre>
+ *
+ * {@link android.content.res.TypedArray}:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindArray {
+  /** Array resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindBool.java b/butterknife/src/main/java/butterknife/BindBool.java
new file mode 100644
index 00000000..8793c582
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindBool.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified boolean resource ID.
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBool {
+  /** Boolean resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindColor.java b/butterknife/src/main/java/butterknife/BindColor.java
new file mode 100644
index 00000000..33ffd385
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindColor.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified color resource ID. Type can be {@code int} or
+ * {@link android.content.res.ColorStateList}.
+ * <pre><code>
+ * {@literal @}BindColor(R.color.background_green) int green;
+ * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindColor {
+  /** Color resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindDimen.java b/butterknife/src/main/java/butterknife/BindDimen.java
new file mode 100644
index 00000000..60682b21
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindDimen.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
+ * {@code float} for exact amount.
+ * <pre><code>
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDimen {
+  /** Dimension resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindDrawable.java b/butterknife/src/main/java/butterknife/BindDrawable.java
new file mode 100644
index 00000000..2fa48747
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindDrawable.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindDrawable(R.drawable.placeholder) Drawable placeholder;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDrawable {
+  /** Drawable resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindInt.java b/butterknife/src/main/java/butterknife/BindInt.java
new file mode 100644
index 00000000..ccfc20e8
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindInt.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified integer resource ID.
+ * <pre><code>
+ * {@literal @}BindInt(R.int.columns) int columns;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindInt {
+  /** Integer resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/BindString.java b/butterknife/src/main/java/butterknife/BindString.java
new file mode 100644
index 00000000..690f5af5
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/BindString.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindString {
+  /** String resource ID to which the field will be bound. */
+  int value();
+}
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 43e6a6fb..8a9e5344 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -9,6 +9,7 @@
 import android.util.Property;
 import android.view.View;
 import butterknife.internal.ButterKnifeProcessor;
+import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -20,11 +21,11 @@
  * Field and method binding for Android views. Use this class to simplify finding views and
  * attaching listeners by binding them with annotations.
  * <p>
- * Injecting views from your activity is as easy as:
+ * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}FindView(R.id.title) EditText titleView;
- *   {@literal @}FindView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}Bind(R.id.title) EditText titleView;
+ *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
@@ -33,7 +34,7 @@
  *   }
  * }
  * </code></pre>
- * Injection can be performed directly on an {@linkplain #bind(Activity) activity}, a
+ * Binding can be performed directly on an {@linkplain #bind(Activity) activity}, a
  * {@linkplain #bind(View) view}, or a {@linkplain #bind(Dialog) dialog}. Alternate objects to
  * bind can be specified along with an {@linkplain #bind(Object, Activity) activity},
  * {@linkplain #bind(Object, View) view}, or
@@ -41,7 +42,7 @@
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -68,22 +69,14 @@
  * If a view is optional add a {@code @Nullable} annotation such as the one in the
  * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library.
  * <pre><code>
- * {@literal @}Nullable @FindView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
+ * </code></pre>
+ * Resources can also be bound to fields to simplify programmatically working with views:
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
- *
- * @see FindView
- * @see FindViews
- * @see OnCheckedChanged
- * @see OnClick
- * @see OnEditorAction
- * @see OnFocusChange
- * @see OnItemClick
- * @see OnItemLongClick
- * @see OnItemSelected
- * @see OnLongClick
- * @see OnPageChange
- * @see OnTextChanged
- * @see OnTouch
  */
 public final class ButterKnife {
   private ButterKnife() {
@@ -98,7 +91,7 @@ private ButterKnife() {
         return ((View) source).findViewById(id);
       }
 
-      @Override protected Context getContext(Object source) {
+      @Override public Context getContext(Object source) {
         return ((View) source).getContext();
       }
     },
@@ -107,7 +100,7 @@ private ButterKnife() {
         return ((Activity) source).findViewById(id);
       }
 
-      @Override protected Context getContext(Object source) {
+      @Override public Context getContext(Object source) {
         return (Activity) source;
       }
     },
@@ -116,30 +109,20 @@ private ButterKnife() {
         return ((Dialog) source).findViewById(id);
       }
 
-      @Override protected Context getContext(Object source) {
+      @Override public Context getContext(Object source) {
         return ((Dialog) source).getContext();
       }
     };
 
     private static <T> T[] filterNull(T[] views) {
-      int newSize = views.length;
-      for (T view : views) {
-        if (view == null) {
-          newSize -= 1;
-        }
-      }
-      if (newSize == views.length) {
-        return views;
-      }
-      //noinspection unchecked
-      T[] newViews = (T[]) new Object[newSize];
-      int nextIndex = 0;
-      for (T view : views) {
+      int end = 0;
+      for (int i = 0; i < views.length; i++) {
+        T view = views[i];
         if (view != null) {
-          newViews[nextIndex++] = view;
+          views[end++] = view;
         }
       }
-      return newViews;
+      return Arrays.copyOfRange(views, 0, end);
     }
 
     public static <T> T[] arrayOf(T... views) {
@@ -208,7 +191,7 @@ private ButterKnife() {
 
     protected abstract View findView(Object source, int id);
 
-    protected abstract Context getContext(Object source);
+    public abstract Context getContext(Object source);
   }
 
   /** DO NOT USE: Exposed for generated code. */
@@ -232,7 +215,7 @@ private ButterKnife() {
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, ViewBinder<Object>> INJECTORS =
+  static final Map<Class<?>, ViewBinder<Object>> BINDERS =
       new LinkedHashMap<Class<?>, ViewBinder<Object>>();
   static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
     @Override public void bind(Finder finder, Object target, Object source) { }
@@ -245,7 +228,7 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Activity}. The current content
+   * Bind annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
    * @param target Target activity for view binding.
@@ -255,7 +238,7 @@ public static void bind(Activity target) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link View}. The view and its children
+   * Bind annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
    * @param target Target view for view binding.
@@ -265,7 +248,7 @@ public static void bind(View target) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Dialog}. The current content
+   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
    * @param target Target dialog for view binding.
@@ -275,7 +258,7 @@ public static void bind(Dialog target) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
    * @param target Target class for view binding.
@@ -286,7 +269,7 @@ public static void bind(Object target, Activity source) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
    * @param target Target class for view binding.
@@ -297,7 +280,7 @@ public static void bind(Object target, View source) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
@@ -308,8 +291,7 @@ public static void bind(Object target, Dialog source) {
   }
 
   /**
-   * Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews}
-   * to {@code null}.
+   * Reset fields annotated with {@link Bind @Bind} to {@code null}.
    * <p>
    * This should only be used in the {@code onDestroyView} method of a fragment.
    *
@@ -343,7 +325,7 @@ static void bind(Object target, Object source, Finder finder) {
 
   private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
       throws IllegalAccessException, InstantiationException {
-    ViewBinder<Object> viewBinder = INJECTORS.get(cls);
+    ViewBinder<Object> viewBinder = BINDERS.get(cls);
     if (viewBinder != null) {
       if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
       return viewBinder;
@@ -362,7 +344,7 @@ static void bind(Object target, Object source, Finder finder) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
       viewBinder = findViewBinderForClass(cls.getSuperclass());
     }
-    INJECTORS.put(cls, viewBinder);
+    BINDERS.put(cls, viewBinder);
     return viewBinder;
   }
 
diff --git a/butterknife/src/main/java/butterknife/FindViews.java b/butterknife/src/main/java/butterknife/FindViews.java
deleted file mode 100644
index 9db7ea36..00000000
--- a/butterknife/src/main/java/butterknife/FindViews.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.util.List;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
- * automatically be cast to the list or array type.
- * <pre><code>
- * {@literal @}FindViews({R.id.first_name, R.id.middle_name, R.id.last_name})
- * List&lt;TextView&gt; nameViews;
- *
- * {@literal @}FindViews({R.id.address_line_1, R.id.address_line_2})
- * EditText[] addressViews;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface FindViews {
-  /** View IDs to which the field will be bound. */
-  int[] value();
-}
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index e9ed8ec5..198a5c8d 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -15,7 +15,7 @@
  * each ID specified.
  * <pre><code>
  * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
- *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife/src/main/java/butterknife/OnClick.java
index 76f69fe0..6f9aaef2 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife/src/main/java/butterknife/OnClick.java
@@ -14,7 +14,7 @@
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnClick(R.id.example) void onClick() {
- *   Toast.makeText(this, "Clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index 4d672321..922e588d 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
- *   Toast.makeText(this, "Pressed: " + key, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Pressed: " + key, Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife/src/main/java/butterknife/OnFocusChange.java
index 15c6b6fb..075b5206 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife/src/main/java/butterknife/OnFocusChange.java
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnFocusChange(R.id.example) void onFocusChanged(boolean focused) {
- *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", LENGTH_SHORT).show();
+ *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnFocusChangeListener#onFocusChange(android.view.View,
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife/src/main/java/butterknife/OnItemClick.java
index 2c29edc6..36d4536b 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemClick.java
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnItemClick(R.id.example_list) void onItemClick(int position) {
- *   Toast.makeText(this, "Clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnItemClickListener#onItemClick(android.widget.AdapterView,
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife/src/main/java/butterknife/OnItemLongClick.java
index 9cc29fa5..f6ef8e6d 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemLongClick(R.id.example_list) boolean onItemLongClick(int position) {
- *   Toast.makeText(this, "Long clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife/src/main/java/butterknife/OnItemSelected.java
index 9857cb72..942fa724 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife/src/main/java/butterknife/OnItemSelected.java
@@ -15,7 +15,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemSelected(R.id.example_list) void onItemSelected(int position) {
- *   Toast.makeText(this, "Selected position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -26,7 +26,7 @@
  * <pre><code>
  * {@literal @}OnItemSelected(value = R.id.example_list, callback = NOTHING_SELECTED)
  * void onNothingSelected() {
- *   Toast.makeText(this, "Nothing selected!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Nothing selected!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife/src/main/java/butterknife/OnLongClick.java
index 995ccb6f..2ebc6c41 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnLongClick.java
@@ -15,7 +15,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnLongClick(R.id.example) boolean onLongClick() {
- *   Toast.makeText(this, "Long clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife/src/main/java/butterknife/OnPageChange.java
index f0ec3864..8c7e2a1e 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife/src/main/java/butterknife/OnPageChange.java
@@ -13,7 +13,7 @@
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnPageChange(R.id.example_pager) void onPageSelected(int position) {
- *   Toast.makeText(this, "Selected " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@code onPageSelected} may be used on the method.
@@ -22,7 +22,7 @@
  * <pre><code>
  * {@literal @}OnPageChange(value = R.id.example_pager, callback = PAGE_SCROLL_STATE_CHANGED)
  * void onPageStateChanged(int state) {
- *   Toast.makeText(this, "State changed: " + state + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "State changed: " + state + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  */
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife/src/main/java/butterknife/OnTextChanged.java
index 0228748b..7302bd6c 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife/src/main/java/butterknife/OnTextChanged.java
@@ -14,7 +14,7 @@
  * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link TextWatcher#onTextChanged(CharSequence, int, int, int)
@@ -24,7 +24,7 @@
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
  * void onBeforeTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Before text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife/src/main/java/butterknife/OnTouch.java
index cf6be01b..144240c5 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife/src/main/java/butterknife/OnTouch.java
@@ -14,7 +14,7 @@
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTouch(R.id.example) boolean onTouch() {
- *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Touched!", Toast.LENGTH_SHORT).show();
  *   return false;
  * }
  * </code></pre>
diff --git a/butterknife/src/main/java/butterknife/internal/BindingClass.java b/butterknife/src/main/java/butterknife/internal/BindingClass.java
index 89651dde..f8377ade 100644
--- a/butterknife/src/main/java/butterknife/internal/BindingClass.java
+++ b/butterknife/src/main/java/butterknife/internal/BindingClass.java
@@ -16,8 +16,9 @@
 
 final class BindingClass {
   private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<Integer, ViewBindings>();
-  private final Map<FieldCollectionBinding, int[]> collectionBindings =
-      new LinkedHashMap<FieldCollectionBinding, int[]>();
+  private final Map<FieldCollectionViewBinding, int[]> collectionBindings =
+      new LinkedHashMap<FieldCollectionViewBinding, int[]>();
+  private final List<FieldResourceBinding> resourceBindings = new ArrayList<FieldResourceBinding>();
   private final String classPackage;
   private final String className;
   private final String targetClass;
@@ -29,15 +30,16 @@
     this.targetClass = targetClass;
   }
 
-  void addField(int id, FieldBinding binding) {
+  void addField(int id, FieldViewBinding binding) {
     getOrCreateViewBindings(id).addFieldBinding(binding);
   }
 
-  void addFieldCollection(int[] ids, FieldCollectionBinding binding) {
+  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
     collectionBindings.put(binding, ids);
   }
 
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method, MethodBinding binding) {
+  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
     ViewBindings viewBindings = getOrCreateViewBindings(id);
     if (viewBindings.hasMethodBinding(listener, method)
         && !"void".equals(method.returnType())) {
@@ -47,11 +49,15 @@ boolean addMethod(int id, ListenerClass listener, ListenerMethod method, MethodB
     return true;
   }
 
+  void addResource(FieldResourceBinding binding) {
+    resourceBindings.add(binding);
+  }
+
   void setParentViewBinder(String parentViewBinder) {
     this.parentViewBinder = parentViewBinder;
   }
 
-  ViewBindings getViewInjection(int id) {
+  ViewBindings getViewBinding(int id) {
     return viewIdMap.get(id);
   }
 
@@ -73,7 +79,12 @@ String brewJava() {
     builder.append("// Generated code from Butter Knife. Do not modify!\n");
     builder.append("package ").append(classPackage).append(";\n\n");
 
-    builder.append("import android.view.View;\n");
+    if (!resourceBindings.isEmpty()) {
+      builder.append("import android.content.res.Resources;\n");
+    }
+    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
+      builder.append("import android.view.View;\n");
+    }
     builder.append("import butterknife.ButterKnife.Finder;\n");
     if (parentViewBinder == null) {
       builder.append("import butterknife.ButterKnife.ViewBinder;\n");
@@ -107,23 +118,39 @@ private void emitBindMethod(StringBuilder builder) {
       builder.append("    super.bind(finder, target, source);\n\n");
     }
 
-    // Local variable in which all views will be temporarily stored.
-    builder.append("    View view;\n");
+    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
+      // Local variable in which all views will be temporarily stored.
+      builder.append("    View view;\n");
 
-    // Loop over each view bindings and emit it.
-    for (ViewBindings bindings : viewIdMap.values()) {
-      emitViewBindings(builder, bindings);
+      // Loop over each view bindings and emit it.
+      for (ViewBindings bindings : viewIdMap.values()) {
+        emitViewBindings(builder, bindings);
+      }
+
+      // Loop over each collection binding and emit it.
+      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+        emitCollectionBinding(builder, entry.getKey(), entry.getValue());
+      }
     }
 
-    // Loop over each collection binding and emit it.
-    for (Map.Entry<FieldCollectionBinding, int[]> entry : collectionBindings.entrySet()) {
-      emitCollectionBinding(builder, entry.getKey(), entry.getValue());
+    if (!resourceBindings.isEmpty()) {
+      builder.append("    Resources res = finder.getContext(source).getResources();\n");
+
+      for (FieldResourceBinding binding : resourceBindings) {
+        builder.append("    target.")
+            .append(binding.getName())
+            .append(" = res.")
+            .append(binding.getMethod())
+            .append('(')
+            .append(binding.getId())
+            .append(");\n");
+      }
     }
 
     builder.append("  }\n");
   }
 
-  private void emitCollectionBinding(StringBuilder builder, FieldCollectionBinding binding,
+  private void emitCollectionBinding(StringBuilder builder, FieldCollectionViewBinding binding,
       int[] ids) {
     builder.append("    target.").append(binding.getName()).append(" = ");
 
@@ -159,8 +186,8 @@ private void emitCollectionBinding(StringBuilder builder, FieldCollectionBinding
   private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
     builder.append("    view = ");
 
-    List<Binding> requiredBindings = bindings.getRequiredBindings();
-    if (requiredBindings.isEmpty()) {
+    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
+    if (requiredViewBindings.isEmpty()) {
       builder.append("finder.findOptionalView(source, ")
           .append(bindings.getId())
           .append(", null);\n");
@@ -171,7 +198,7 @@ private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
         builder.append("finder.findRequiredView(source, ")
             .append(bindings.getId())
             .append(", \"");
-        emitHumanDescription(builder, requiredBindings);
+        emitHumanDescription(builder, requiredViewBindings);
         builder.append("\");\n");
       }
     }
@@ -181,12 +208,12 @@ private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
   }
 
   private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
-    Collection<FieldBinding> fieldBindings = bindings.getFieldBindings();
+    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
     if (fieldBindings.isEmpty()) {
       return;
     }
 
-    for (FieldBinding fieldBinding : fieldBindings) {
+    for (FieldViewBinding fieldBinding : fieldBindings) {
       builder.append("    target.")
           .append(fieldBinding.getName())
           .append(" = ");
@@ -204,7 +231,7 @@ private void emitFieldBindings(StringBuilder builder, ViewBindings bindings) {
   }
 
   private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
-    Map<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> classMethodBindings =
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
       return;
@@ -219,10 +246,10 @@ private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
       extraIndent = "  ";
     }
 
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> e
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
         : classMethodBindings.entrySet()) {
       ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<MethodBinding>> methodBindings = e.getValue();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
       // Emit: ((OWNER_TYPE) view).SETTER_NAME(
       boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
@@ -290,11 +317,11 @@ private void emitMethodBindings(StringBuilder builder, ViewBindings bindings) {
         }
 
         if (methodBindings.containsKey(method)) {
-          Set<MethodBinding> set = methodBindings.get(method);
-          Iterator<MethodBinding> iterator = set.iterator();
+          Set<MethodViewBinding> set = methodBindings.get(method);
+          Iterator<MethodViewBinding> iterator = set.iterator();
 
           while (iterator.hasNext()) {
-            MethodBinding binding = iterator.next();
+            MethodViewBinding binding = iterator.next();
             builder.append("target.").append(binding.getName()).append('(');
             List<Parameter> parameters = binding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -377,18 +404,19 @@ private void emitUnbindMethod(StringBuilder builder) {
       builder.append("    super.unbind(target);\n\n");
     }
     for (ViewBindings bindings : viewIdMap.values()) {
-      for (FieldBinding fieldBinding : bindings.getFieldBindings()) {
+      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
         builder.append("    target.").append(fieldBinding.getName()).append(" = null;\n");
       }
     }
-    for (FieldCollectionBinding fieldCollectionBinding : collectionBindings.keySet()) {
+    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
       builder.append("    target.").append(fieldCollectionBinding.getName()).append(" = null;\n");
     }
     builder.append("  }\n");
   }
 
-  static void emitHumanDescription(StringBuilder builder, Collection<? extends Binding> bindings) {
-    Iterator<? extends Binding> iterator = bindings.iterator();
+  static void emitHumanDescription(StringBuilder builder,
+      Collection<? extends ViewBinding> bindings) {
+    Iterator<? extends ViewBinding> iterator = bindings.iterator();
     switch (bindings.size()) {
       case 1:
         builder.append(iterator.next().getDescription());
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index e654b35b..e610c3f4 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -1,8 +1,14 @@
 package butterknife.internal;
 
 import android.view.View;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -61,7 +67,11 @@
   public static final String ANDROID_PREFIX = "android.";
   public static final String JAVA_PREFIX = "java.";
   static final String VIEW_TYPE = "android.view.View";
+  private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
+  private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
+  private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
+  private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
   private static final String LIST_TYPE = List.class.getCanonicalName();
   private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
       OnCheckedChanged.class, //
@@ -90,14 +100,23 @@
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
-    Set<String> supportTypes = new LinkedHashSet<String>();
-    supportTypes.add(FindView.class.getCanonicalName());
-    supportTypes.add(FindViews.class.getCanonicalName());
+    Set<String> types = new LinkedHashSet<String>();
+
+    types.add(Bind.class.getCanonicalName());
+
     for (Class<? extends Annotation> listener : LISTENERS) {
-      supportTypes.add(listener.getCanonicalName());
+      types.add(listener.getCanonicalName());
     }
 
-    return supportTypes;
+    types.add(BindArray.class.getCanonicalName());
+    types.add(BindBool.class.getCanonicalName());
+    types.add(BindColor.class.getCanonicalName());
+    types.add(BindDimen.class.getCanonicalName());
+    types.add(BindDrawable.class.getCanonicalName());
+    types.add(BindInt.class.getCanonicalName());
+    types.add(BindString.class.getCanonicalName());
+
+    return types;
   }
 
   @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
@@ -126,33 +145,81 @@
     Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<TypeElement, BindingClass>();
     Set<String> erasedTargetNames = new LinkedHashSet<String>();
 
-    // Process each @FindView element.
-    for (Element element : env.getElementsAnnotatedWith(FindView.class)) {
+    // Process each @Bind element.
+    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
       try {
-        parseFindView(element, targetClassMap, erasedTargetNames);
+        parseBind(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
+        logParsingError(element, Bind.class, e);
+      }
+    }
 
-        error(element, "Unable to generate view binder for @FindView.\n\n%s", stackTrace);
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    }
+
+    // Process each @BindArray element.
+    for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
+      try {
+        parseResourceArray(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindArray.class, e);
       }
     }
 
-    // Process each @FindViews element.
-    for (Element element : env.getElementsAnnotatedWith(FindViews.class)) {
+    // Process each @BindBool element.
+    for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
       try {
-        parseFindViews(element, targetClassMap, erasedTargetNames);
+        parseResourceBool(element, targetClassMap, erasedTargetNames);
       } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
+        logParsingError(element, BindBool.class, e);
+      }
+    }
 
-        error(element, "Unable to generate view binder for @FindViews.\n\n%s", stackTrace);
+    // Process each @BindColor element.
+    for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
+      try {
+        parseResourceColor(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindColor.class, e);
       }
     }
 
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    // Process each @BindDimen element.
+    for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
+      try {
+        parseResourceDimen(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDimen.class, e);
+      }
+    }
+
+    // Process each @BindDrawable element.
+    for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
+      try {
+        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDrawable.class, e);
+      }
+    }
+
+    // Process each @BindInt element.
+    for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
+      try {
+        parseResourceInt(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindInt.class, e);
+      }
+    }
+
+    // Process each @BindString element.
+    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
+      try {
+        parseResourceString(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindString.class, e);
+      }
     }
 
     // Try to find a parent binder for each.
@@ -166,6 +233,13 @@
     return targetClassMap;
   }
 
+  private void logParsingError(Element element, Class<? extends Annotation> annotation,
+      Exception e) {
+    StringWriter stackTrace = new StringWriter();
+    e.printStackTrace(new PrintWriter(stackTrace));
+    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
+  }
+
   private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
       String targetThing, Element element) {
     boolean hasError = false;
@@ -218,31 +292,51 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseFindView(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    // Verify common generated code restrictions.
+    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
+        || isBindingInWrongPackage(Bind.class, element)) {
+      return;
+    }
+
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
+      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
+          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
+          element.getSimpleName());
+    } else {
+      parseBindOne(element, targetClassMap, erasedTargetNames);
+    }
+  }
+
+  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
     // Verify that the target type extends from View.
     TypeMirror elementType = element.asType();
-    if (elementType instanceof TypeVariable) {
+    if (elementType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) elementType;
       elementType = typeVariable.getUpperBound();
     }
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@FindView fields must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindView.class, element);
-
-    // Check for the other field annotation.
-    if (element.getAnnotation(FindViews.class) != null) {
-      error(element, "Only one of @FindView and @FindViews is allowed. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+    // Assemble information on the field.
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length != 1) {
+      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
+          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
       hasError = true;
     }
 
@@ -250,20 +344,17 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
       return;
     }
 
-    // Assemble information on the field.
-    int id = element.getAnnotation(FindView.class).value();
-
+    int id = ids[0];
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
-      ViewBindings viewBindings = bindingClass.getViewInjection(id);
+      ViewBindings viewBindings = bindingClass.getViewBinding(id);
       if (viewBindings != null) {
-        Iterator<FieldBinding> iterator = viewBindings.getFieldBindings().iterator();
+        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
         if (iterator.hasNext()) {
-          FieldBinding existingBinding = iterator.next();
-          error(element,
-              "Attempt to use @FindView for an already bound ID %d on '%s'. (%s.%s)", id,
-              existingBinding.getName(), enclosingElement.getQualifiedName(),
-              element.getSimpleName());
+          FieldViewBinding existingBinding = iterator.next();
+          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+              Bind.class.getSimpleName(), id, existingBinding.getName(),
+              enclosingElement.getQualifiedName(), element.getSimpleName());
           return;
         }
       }
@@ -273,16 +364,16 @@ private void parseFindView(Element element, Map<TypeElement, BindingClass> targe
 
     String name = element.getSimpleName().toString();
     String type = elementType.toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
-    FieldBinding binding = new FieldBinding(name, type, required);
+    FieldViewBinding binding = new FieldViewBinding(name, type, required);
     bindingClass.addField(id, binding);
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement.toString());
   }
 
-  private void parseFindViews(Element element, Map<TypeElement, BindingClass> targetClassMap,
+  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
       Set<String> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -291,73 +382,326 @@ private void parseFindViews(Element element, Map<TypeElement, BindingClass> targ
     TypeMirror elementType = element.asType();
     String erasedType = doubleErasure(elementType);
     TypeMirror viewType = null;
-    FieldCollectionBinding.Kind kind = null;
+    FieldCollectionViewBinding.Kind kind = null;
     if (elementType.getKind() == TypeKind.ARRAY) {
       ArrayType arrayType = (ArrayType) elementType;
       viewType = arrayType.getComponentType();
-      kind = FieldCollectionBinding.Kind.ARRAY;
+      kind = FieldCollectionViewBinding.Kind.ARRAY;
     } else if (LIST_TYPE.equals(erasedType)) {
       DeclaredType declaredType = (DeclaredType) elementType;
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
       if (typeArguments.size() != 1) {
-        error(element, "@FindViews List must have a generic component. (%s.%s)",
-            enclosingElement.getQualifiedName(), element.getSimpleName());
+        error(element, "@%s List must have a generic component. (%s.%s)",
+            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
         hasError = true;
       } else {
         viewType = typeArguments.get(0);
       }
-      kind = FieldCollectionBinding.Kind.LIST;
+      kind = FieldCollectionViewBinding.Kind.LIST;
     } else {
-      error(element, "@FindViews must be a List or array. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
+      throw new AssertionError();
     }
-    if (viewType instanceof TypeVariable) {
+    if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) viewType;
       viewType = typeVariable.getUpperBound();
     }
 
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@FindViews type must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
 
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(FindViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(FindViews.class, element);
-
     if (hasError) {
       return;
     }
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(FindViews.class).value();
+    int[] ids = element.getAnnotation(Bind.class).value();
     if (ids.length == 0) {
-      error(element, "@FindViews must specify at least one ID. (%s.%s)",
+      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
     }
 
     Integer duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@FindViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
+          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
     }
 
     assert viewType != null; // Always false as hasError would have been true.
     String type = viewType.toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldCollectionBinding binding = new FieldCollectionBinding(name, type, kind, required);
+    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
     bindingClass.addFieldCollection(ids, binding);
 
     erasedTargetNames.add(enclosingElement.toString());
   }
 
+  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is bool.
+    if (element.asType().getKind() != TypeKind.BOOLEAN) {
+      error(element, "@%s field type must be 'boolean'. (%s.%s)",
+          BindBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBool.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBool.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBool.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isColorStateList = false;
+    TypeMirror elementType = element.asType();
+    if (COLOR_STATE_LIST_TYPE.equals(elementType.toString())) {
+      isColorStateList = true;
+    } else if (elementType.getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
+          BindColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindColor.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindColor.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindColor.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isColorStateList ? "getColorStateList" : "getColor");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isInt = false;
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.INT) {
+      isInt = true;
+    } else if (elementType.getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
+          BindDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDimen.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDimen.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDimen.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isInt ? "getDimensionPixelSize" : "getDimension");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Drawable.
+    if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Drawable'. (%s.%s)",
+          BindDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDrawable.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDrawable.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDrawable.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int.
+    if (element.asType().getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int'. (%s.%s)", BindInt.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindInt.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindInt.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindInt.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is String.
+    if (!"java.lang.String".equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'String'. (%s.%s)",
+          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindString.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindString.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<String> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is supported.
+    String methodName = getArrayResourceMethodName(element);
+    if (methodName == null) {
+      error(element,
+          "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
+          BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindArray.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindArray.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindArray.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement.toString());
+  }
+
+  /**
+   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * binding, null if the element type is not supported.
+   */
+  private static String getArrayResourceMethodName(Element element) {
+    TypeMirror typeMirror = element.asType();
+    if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
+      return "obtainTypedArray";
+    }
+    if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
+      ArrayType arrayType = (ArrayType) typeMirror;
+      String componentType = arrayType.getComponentType().toString();
+      if ("java.lang.String".equals(componentType)) {
+        return "getStringArray";
+      } else if ("int".equals(componentType)) {
+        return "getIntArray";
+      } else if ("java.lang.CharSequence".equals(componentType)) {
+        return "getTextArray";
+      }
+    }
+    return null;
+  }
+
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
   private static Integer findDuplicate(int[] array) {
     Set<Integer> seenElements = new LinkedHashSet<Integer>();
@@ -419,7 +763,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
     int[] ids = (int[]) annotationValue.invoke(annotation);
     String name = executableElement.getSimpleName().toString();
-    boolean required = isRequiredInjection(element);
+    boolean required = isRequiredBinding(element);
 
     // Verify that the method and its containing class are accessible via generated code.
     boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
@@ -444,7 +788,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       if (id == View.NO_ID) {
         if (ids.length == 1) {
           if (!required) {
-            error(element, "ID free binding must not be annotated with @Nullable. (%s.%s)",
+            error(element, "ID-free binding must not be annotated with @Nullable. (%s.%s)",
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
@@ -582,7 +926,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    MethodBinding binding = new MethodBinding(name, Arrays.asList(parameters), required);
+    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     for (int id : ids) {
       if (!bindingClass.addMethod(id, listener, method, binding)) {
@@ -607,7 +951,7 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     if (otherType.equals(typeMirror.toString())) {
       return true;
     }
-    if (!(typeMirror instanceof DeclaredType)) {
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
       return false;
     }
     DeclaredType declaredType = (DeclaredType) typeMirror;
@@ -703,7 +1047,7 @@ private static boolean hasAnnotationWithName(Element element, String simpleName)
     return false;
   }
 
-  private static boolean isRequiredInjection(Element element) {
+  private static boolean isRequiredBinding(Element element) {
     return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
   }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java b/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
similarity index 79%
rename from butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java
rename to butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
index 350983be..534b4904 100644
--- a/butterknife/src/main/java/butterknife/internal/FieldCollectionBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/FieldCollectionViewBinding.java
@@ -1,6 +1,6 @@
 package butterknife.internal;
 
-final class FieldCollectionBinding implements Binding {
+final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
     LIST
@@ -11,7 +11,7 @@
   private final Kind kind;
   private final boolean required;
 
-  FieldCollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, String type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
diff --git a/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java b/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java
new file mode 100644
index 00000000..f4f0cd04
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/FieldResourceBinding.java
@@ -0,0 +1,25 @@
+package butterknife.internal;
+
+final class FieldResourceBinding {
+  private final int id;
+  private final String name;
+  private final String method;
+
+  FieldResourceBinding(int id, String name, String method) {
+    this.id = id;
+    this.name = name;
+    this.method = method;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public String getMethod() {
+    return method;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/FieldBinding.java b/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
similarity index 83%
rename from butterknife/src/main/java/butterknife/internal/FieldBinding.java
rename to butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
index 170cdbf8..d7f123f1 100644
--- a/butterknife/src/main/java/butterknife/internal/FieldBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/FieldViewBinding.java
@@ -2,12 +2,12 @@
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
-final class FieldBinding implements Binding {
+final class FieldViewBinding implements ViewBinding {
   private final String name;
   private final String type;
   private final boolean required;
 
-  FieldBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, String type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;
diff --git a/butterknife/src/main/java/butterknife/internal/MethodBinding.java b/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
similarity index 82%
rename from butterknife/src/main/java/butterknife/internal/MethodBinding.java
rename to butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
index a530f405..c6aaa2ba 100644
--- a/butterknife/src/main/java/butterknife/internal/MethodBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/MethodViewBinding.java
@@ -4,12 +4,12 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodBinding implements Binding {
+final class MethodViewBinding implements ViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  MethodBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
     this.required = required;
diff --git a/butterknife/src/main/java/butterknife/internal/Binding.java b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
similarity index 88%
rename from butterknife/src/main/java/butterknife/internal/Binding.java
rename to butterknife/src/main/java/butterknife/internal/ViewBinding.java
index 2804ad2e..133e31b1 100644
--- a/butterknife/src/main/java/butterknife/internal/Binding.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
@@ -1,7 +1,7 @@
 package butterknife.internal;
 
 /** A field or method view binding. */
-interface Binding {
+interface ViewBinding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBindings.java b/butterknife/src/main/java/butterknife/internal/ViewBindings.java
index ee2ed133..fc4a3a74 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBindings.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewBindings.java
@@ -10,10 +10,10 @@
 
 final class ViewBindings {
   private final int id;
-  private final Set<FieldBinding> fieldBindings = new LinkedHashSet<FieldBinding>();
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>>
+  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<FieldViewBinding>();
+  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
       methodBindings = new LinkedHashMap<ListenerClass,
-      Map<ListenerMethod, Set<MethodBinding>>>();
+      Map<ListenerMethod, Set<MethodViewBinding>>>();
 
   ViewBindings(int id) {
     this.id = id;
@@ -23,56 +23,56 @@ public int getId() {
     return id;
   }
 
-  public Collection<FieldBinding> getFieldBindings() {
+  public Collection<FieldViewBinding> getFieldBindings() {
     return fieldBindings;
   }
 
-  public Map<ListenerClass, Map<ListenerMethod, Set<MethodBinding>>> getMethodBindings() {
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
     return methodBindings;
   }
 
   public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, Set<MethodBinding>> methods = methodBindings.get(listener);
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
     return methods != null && methods.containsKey(method);
   }
 
   public void addMethodBinding(ListenerClass listener, ListenerMethod method,
-      MethodBinding binding) {
-    Map<ListenerMethod, Set<MethodBinding>> methods = methodBindings.get(listener);
-    Set<MethodBinding> set = null;
+      MethodViewBinding binding) {
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+    Set<MethodViewBinding> set = null;
     if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, Set<MethodBinding>>();
+      methods = new LinkedHashMap<ListenerMethod, Set<MethodViewBinding>>();
       methodBindings.put(listener, methods);
     } else {
       set = methods.get(method);
     }
     if (set == null) {
-      set = new LinkedHashSet<MethodBinding>();
+      set = new LinkedHashSet<MethodViewBinding>();
       methods.put(method, set);
     }
     set.add(binding);
   }
 
-  public void addFieldBinding(FieldBinding fieldBinding) {
+  public void addFieldBinding(FieldViewBinding fieldBinding) {
     fieldBindings.add(fieldBinding);
   }
 
-  public List<Binding> getRequiredBindings() {
-    List<Binding> requiredBindings = new ArrayList<Binding>();
-    for (FieldBinding fieldBinding : fieldBindings) {
+  public List<ViewBinding> getRequiredBindings() {
+    List<ViewBinding> requiredViewBindings = new ArrayList<ViewBinding>();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
       if (fieldBinding.isRequired()) {
-        requiredBindings.add(fieldBinding);
+        requiredViewBindings.add(fieldBinding);
       }
     }
-    for (Map<ListenerMethod, Set<MethodBinding>> methodBinding : methodBindings.values()) {
-      for (Set<MethodBinding> set : methodBinding.values()) {
-        for (MethodBinding binding : set) {
+    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodViewBinding> set : methodBinding.values()) {
+        for (MethodViewBinding binding : set) {
           if (binding.isRequired()) {
-            requiredBindings.add(binding);
+            requiredViewBindings.add(binding);
           }
         }
       }
     }
-    return requiredBindings;
+    return requiredViewBindings;
   }
 }
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2fd10d5c..bfa469fb 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -4,9 +4,9 @@
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.FindView @FindView} on fields.</li>
- * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.FindViews @FindViews}. Operate on all of them at once with
+ * {@link butterknife.Bind @Bind} on fields.</li>
+ * <li>Group multiple views in a {@linkplain java.util.List list} or array.
+ * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
@@ -14,6 +14,7 @@
  * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
+ * <li>Eliminate resource lookups by using resource annotations on fields.</li>
  * </ul>
  */
 package butterknife;
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 528b7c45..5f382785 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -44,9 +44,9 @@
     }
   };
 
-  @Before @After // Clear out cache of injectors and resetters before and after each test.
+  @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.INJECTORS.clear();
+    ButterKnife.BINDERS.clear();
   }
 
   @Test public void listOfFiltersNull() {
@@ -117,29 +117,29 @@ public void resetViewsCache() {
     assertThat(view3).isDisabled();
   }
 
-  @Test public void zeroInjectionsInjectDoesNotThrowException() {
+  @Test public void zeroBindingsBindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
     ButterKnife.bind(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void zeroInjectionsResetDoesNotThrowException() {
+  @Test public void zeroBindingsUnbindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
     ButterKnife.unbind(example);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
+    assertThat(ButterKnife.BINDERS).contains(entry(Example.class, ButterKnife.NOP_VIEW_BINDER));
   }
 
-  @Test public void injectingKnownPackagesIsNoOp() {
+  @Test public void bindingKnownPackagesIsNoOp() {
     ButterKnife.bind(new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
+    assertThat(ButterKnife.BINDERS).isEmpty();
     ButterKnife.bind(new Object(), new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
+    assertThat(ButterKnife.BINDERS).isEmpty();
   }
 
   @Test public void finderThrowsNiceError() {
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
index cc3c4613..8b9c1c50 100644
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
@@ -6,8 +6,7 @@
 import android.widget.AdapterView;
 import android.widget.CompoundButton;
 import android.widget.TextView;
-import butterknife.FindView;
-import butterknife.FindViews;
+import butterknife.Bind;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -26,7 +25,6 @@
 import java.util.List;
 import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -38,7 +36,7 @@
 
     ASSERT.about(javaSource())
         .that(JavaFileObjects.forSourceString("butterknife.internal.AllTheThingsTest", content))
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -46,25 +44,25 @@
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @FindView(10) View findView;
-  @Nullable @FindView(20) View optinalFindView;
+  @Bind(10) View findView;
+  @Nullable @Bind(20) View optinalBind;
 
-  @FindView(30) TextView findTextView;
-  @Nullable @FindView(40) TextView optinalFIndTextView;
+  @Bind(30) TextView findTextView;
+  @Nullable @Bind(40) TextView optinalFIndTextView;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
-  @FindViews(50) List<View> findViewsListOne;
-  @FindViews({ 60, 70 }) List<View> findViewsListMultiple;
+  @Bind(50) List<View> findViewsListOne;
+  @Bind({ 60, 70 }) List<View> findViewsListMultiple;
 
-  @FindViews(80) List<TextView> findTextViewsListOne;
-  @FindViews({ 90, 100 }) List<TextView> findTextViewsListMultiple;
+  @Bind(80) List<TextView> findTextViewsListOne;
+  @Bind({ 90, 100 }) List<TextView> findTextViewsListMultiple;
 
-  @FindViews(110) View[] findViewsArrayOne;
-  @FindViews({ 120, 130 }) View[] findViewsArrayMultiple;
+  @Bind(110) View[] findViewsArrayOne;
+  @Bind({ 120, 130 }) View[] findViewsArrayMultiple;
 
-  @FindViews(140) TextView[] findTextViewsArrayOne;
-  @FindViews({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
+  @Bind(140) TextView[] findTextViewsArrayOne;
+  @Bind({ 150, 160 }) TextView[] findTextViewsArrayMultiple;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////
 
diff --git a/butterknife/src/test/java/butterknife/internal/BindArrayTest.java b/butterknife/src/test/java/butterknife/internal/BindArrayTest.java
new file mode 100644
index 00000000..47aaab10
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindArrayTest.java
@@ -0,0 +1,163 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindArrayTest {
+  @Test public void stringArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getStringArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void intArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) int[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getIntArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void textArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) CharSequence[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getTextArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "import android.content.res.TypedArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) TypedArray one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.obtainTypedArray(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindBoolTest.java b/butterknife/src/test/java/butterknife/internal/BindBoolTest.java
new file mode 100644
index 00000000..13ca01df
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindBoolTest.java
@@ -0,0 +1,61 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBoolTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) boolean one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getBoolean(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBoolean() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindColorTest.java b/butterknife/src/test/java/butterknife/internal/BindColorTest.java
new file mode 100644
index 00000000..2d156090
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindColorTest.java
@@ -0,0 +1,95 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindColorTest {
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getColor(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.content.res.ColorStateList;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) ColorStateList one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getColorStateList(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindDimenTest.java b/butterknife/src/test/java/butterknife/internal/BindDimenTest.java
new file mode 100644
index 00000000..2c68dd3d
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindDimenTest.java
@@ -0,0 +1,94 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDimenTest {
+  @Test public void simpleFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) float one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimension(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimensionPixelSize(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindDrawableTest.java b/butterknife/src/test/java/butterknife/internal/BindDrawableTest.java
new file mode 100644
index 00000000..c7f28e4d
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindDrawableTest.java
@@ -0,0 +1,62 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDrawableTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.drawable.Drawable;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) Drawable one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDrawable(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeDrawable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindIntTest.java b/butterknife/src/test/java/butterknife/internal/BindIntTest.java
new file mode 100644
index 00000000..a8e4f574
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindIntTest.java
@@ -0,0 +1,61 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindIntTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getInteger(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) String one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindStringTest.java b/butterknife/src/test/java/butterknife/internal/BindStringTest.java
new file mode 100644
index 00000000..b9ac3bac
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindStringTest.java
@@ -0,0 +1,61 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindStringTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) String one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getString(1);",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeString() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) boolean one;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/BindTest.java b/butterknife/src/test/java/butterknife/internal/BindTest.java
new file mode 100644
index 00000000..9844768f
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/BindTest.java
@@ -0,0 +1,941 @@
+package butterknife.internal;
+
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.ASSERT;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+  @Test public void bindingViewTooManyIdsFail() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2}) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @Bind(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.EditText;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "class Test<T extends TextView> extends Activity {",
+        "    @Bind(1) T thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import butterknife.OnClick;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View thing1;",
+        "  @OnClick(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
+            "    target.thing1 = view;",
+            "    view.setOnClickListener(",
+            "      new butterknife.internal.DebouncingOnClickListener() {",
+            "        @Override public void doClick(",
+            "          android.view.View p0",
+            "        ) {",
+            "          target.doStuff();",
+            "        }",
+            "      });",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing1 = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) public View thing1;",
+        "  @Bind(2) View thing2;",
+        "  @Bind(3) protected View thing3;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @interface Nullable {}",
+        "  @Nullable @Bind(1) View view;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findOptionalView(source, 1, null);",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
+            "    extends test.Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T> extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test<String> {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test<Object> {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
+            "    extends test.Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    super.unbind(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package java.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package android.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  private static class Inner {",
+        "    @Bind(1) View thing;",
+        "  }",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public interface Test {",
+        "    @Bind(1) View thing = null;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) private View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) static View thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing1;",
+        "    @Bind(1) View thing2;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsRootViewBindingWithBadTarget() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnItemClick;",
+            "public class Test extends View {",
+            "  @OnItemClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining((
+            "@OnItemClick annotation without an ID may only be used with an object of type "
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(6);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnClick;",
+            "public class Test extends View {",
+            "  @interface Nullable {}",
+            "  @Nullable @OnClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    ASSERT.about(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            ("ID-free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(7);
+  }
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) View[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.arrayOf(",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) T[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.arrayOf(",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) TextView[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.arrayOf(",
+            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.listOf(",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.listOf(",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) List<T> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.listOf(",
+            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @interface Nullable {}",
+        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.ViewBinder;",
+            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Finder.listOf(",
+            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "  @Override public void unbind(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind({}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind(1) List thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.Deque;",
+        "public class Test {",
+        "  @Bind(1) Deque<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @Bind(1) List<String> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String[] thing;",
+        "}"));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 1}) List<View> thing;",
+        "}"
+    ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewTest.java b/butterknife/src/test/java/butterknife/internal/FindViewTest.java
deleted file mode 100644
index 89597c9a..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewTest.java
+++ /dev/null
@@ -1,562 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewTest {
-  @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @FindView(1) TestInterface thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.FindView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @FindView(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
-            "    target.thing1 = view;",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing1 = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) public View thing1;",
-        "  @FindView(2) View thing2;",
-        "  @FindView(3) protected View thing3;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @FindView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test<T> extends Activity {",
-        "  @FindView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @FindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewBinder<T extends test.TestOne> ",
-            "    extends test.Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    super.unbind(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  @FindView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindView(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "  @FindView(1) String thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public interface Test {",
-        "    @FindView(1) View thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindView fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) private View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) static View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfBothAnnotations() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindView(1) @FindViews(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one of @FindView and @FindViews is allowed. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfAlreadyInjected() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindView;",
-        "public class Test extends Activity {",
-        "    @FindView(1) View thing1;",
-        "    @FindView(1) View thing2;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Attempt to use @FindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsRootViewInjectionWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining((
-            "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(6);
-  }
-
-  @Test public void failsOptionalRootViewInjection() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnClick;",
-            "public class Test extends View {",
-            "  @interface Nullable {}",
-            "  @Nullable @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            ("ID free binding must not be annotated with @Nullable. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java b/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
deleted file mode 100644
index 364f2222..00000000
--- a/butterknife/src/test/java/butterknife/internal/FindViewsTest.java
+++ /dev/null
@@ -1,510 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class FindViewsTest {
-  @Test public void injectingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.FindViews;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @FindViews({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @FindViews({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @interface Nullable {}",
-        "    @Nullable @FindViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.ViewBinder;",
-            "public class Test$$ViewBinder<T extends test.Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void unbind(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews({}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @FindViews(1) List thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @FindViews(1) Deque<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @FindViews(1) List<String> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.FindViews;",
-        "public class Test extends Activity {", "  @FindViews(1) String[] thing;", "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "public class Test {",
-        "  @FindViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @FindViews(1) List<View> thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public interface Test {",
-        "    @FindViews(1) List<View> thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) private List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews(1) static List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@FindViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.FindViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @FindViews({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@FindViews annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
index cecb8eec..307fafad 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
index 07998420..feca162a 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnClickTest.java
@@ -6,12 +6,11 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -42,13 +41,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickMultipleInjections() {
+  @Test public void onClickMultipleBindings() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
@@ -94,7 +93,7 @@
             "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -105,10 +104,10 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.FindView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @FindView(1) View view;",
+        "  @Bind(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
@@ -136,7 +135,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -156,7 +155,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -224,7 +223,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -275,7 +274,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -315,7 +314,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -326,11 +325,11 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.FindView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
         "  @interface Nullable {}",
-        "  @FindView(1) View view;",
+        "  @Bind(1) View view;",
         "  @Nullable @OnClick(1) void doStuff() {}",
         "}"));
 
@@ -358,7 +357,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -374,7 +373,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -391,7 +390,7 @@
     ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -410,7 +409,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -428,7 +427,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -446,7 +445,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -464,7 +463,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnClick method arguments. (test.Test.doStuff)",
@@ -493,7 +492,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
@@ -510,7 +509,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
@@ -529,7 +528,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
index d484cd46..3ed49133 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
index ee06ee16..bd6faa2b 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
index b47c649f..2442e24d 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
@@ -6,13 +6,12 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
 public class OnItemClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onItemClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -45,13 +44,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameters() {
+  @Test public void onItemClickBindingWithParameters() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -91,13 +90,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubset() {
+  @Test public void onItemClickBindingWithParameterSubset() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -135,13 +134,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -179,13 +178,13 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickRootViewInjection() {
+  @Test public void onClickRootViewBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.content.Context;",
@@ -226,7 +225,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -243,7 +242,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -265,7 +264,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
index 64233688..e9aa94f0 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
index debd2062..17ee81af 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -49,7 +48,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -94,7 +93,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -142,7 +141,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -212,7 +211,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
index 636fb05a..f5c60ad4 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
@@ -6,13 +6,12 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
 public class OnLongClickTest {
-  @Test public void onLongClickInjection() {
+  @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -46,7 +45,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -64,7 +63,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
index bc80f221..ad7e797e 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -47,7 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
index 99367d12..598cff50 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -47,7 +46,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
index 9fef2868..27f681f7 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
@@ -6,7 +6,6 @@
 
 import javax.tools.JavaFileObject;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
 import static com.google.common.truth.Truth.ASSERT;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -43,7 +42,7 @@
         ));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -60,7 +59,7 @@
         "}"));
 
     ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
diff --git a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java b/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
deleted file mode 100644
index 92f7ca42..00000000
--- a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package butterknife.internal;
-
-import java.util.Arrays;
-import javax.annotation.processing.Processor;
-
-final class ProcessorTestUtilities {
-  static Iterable<? extends Processor> butterknifeProcessors() {
-    return Arrays.asList(
-        new ButterKnifeProcessor()
-    );
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/BindingClassTest.java b/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
similarity index 75%
rename from butterknife/src/test/java/butterknife/internal/BindingClassTest.java
rename to butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
index 1f218adb..9383d8ec 100644
--- a/butterknife/src/test/java/butterknife/internal/BindingClassTest.java
+++ b/butterknife/src/test/java/butterknife/internal/ViewBindingClassTest.java
@@ -6,11 +6,11 @@
 import static java.util.Arrays.asList;
 import static org.fest.assertions.api.Assertions.assertThat;
 
-public class BindingClassTest {
+public class ViewBindingClassTest {
   @Test public void humanDescriptionJoinWorks() {
-    Binding one = new TestBinding("one");
-    Binding two = new TestBinding("two");
-    Binding three = new TestBinding("three");
+    ViewBinding one = new TestViewBinding("one");
+    ViewBinding two = new TestViewBinding("two");
+    ViewBinding three = new TestViewBinding("three");
 
     StringBuilder builder1 = new StringBuilder();
     emitHumanDescription(builder1, asList(one));
@@ -25,10 +25,10 @@
     assertThat(builder3.toString()).isEqualTo("one, two, and three");
   }
 
-  private static class TestBinding implements Binding {
+  private static class TestViewBinding implements ViewBinding {
     private final String description;
 
-    private TestBinding(String description) {
+    private TestViewBinding(String description) {
       this.description = description;
     }
 
diff --git a/pom.xml b/pom.xml
index 7d4e9d12..17c02536 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife-parent</artifactId>
-  <version>7.0.0-SNAPSHOT</version>
+  <version>7.0.2-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Butter Knife (Parent)</name>
diff --git a/website/index.html b/website/index.html
index 962c1797..0d07a222 100644
--- a/website/index.html
+++ b/website/index.html
@@ -24,11 +24,11 @@ <h2>Field and method binding for Android views</h2>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@FindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @FindView(R.id.title) TextView title;
-  @FindView(R.id.subtitle) TextView subtitle;
-  @FindView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -48,8 +48,8 @@ <h3 id="introduction">Introduction</h3>
             <h4 id="non-activity">Non-Activity Binding</h4>
             <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -77,8 +77,8 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 
   static class ViewHolder {
-    @FindView(R.id.title) TextView name;
-    @FindView(R.id.job_title) TextView jobTitle;
+    @Bind(R.id.title) TextView name;
+    @Bind(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
       ButterKnife.bind(this, view);
@@ -97,24 +97,24 @@ <h4 id="non-activity">Non-Activity Binding</h4>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@FindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);</pre>
             <p><code>Action</code> and <code>Setter</code> interfaces allow specifying simple behavior.</p>
-            <pre class="prettyprint">static final Action&lt;View> DISABLE = new Action&lt;>() {
+            <pre class="prettyprint">static final ButterKnife.Action&lt;View> DISABLE = new ButterKnife.Action&lt;View>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
   }
-}
-static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
+};
+static final ButterKnife.Setter&lt;View, Boolean> ENABLED = new ButterKnife.Setter&lt;View, Boolean>() {
   @Override public void set(View view, Boolean value, int index) {
     view.setEnabled(value);
   }
-}</pre>
+};</pre>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
-            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
+            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</pre>
 
             <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
@@ -153,8 +153,8 @@ <h4 id="listener-binding">Listener Binding</h4>
             <h4 id="reset">Binding Reset</h4>
             <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @FindView(R.id.button1) Button button1;
-  @FindView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -170,10 +170,10 @@ <h4 id="reset">Binding Reset</h4>
 }</pre>
 
             <h4 id="optional">Optional Bindings</h4>
-            <p>By default, both <code>@FindView</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
             <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
             <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
-            <pre class="prettyprint">@Nullable @FindView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
@@ -215,7 +215,7 @@ <h4>Maven</h4>
 
             <h4>Gradle</h4>
             <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>
+            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
             <pre class="prettyprint">lintOptions {
   disable 'InvalidPackage'
 }</pre>
@@ -233,7 +233,7 @@ <h4 id="ide">IDE Configuration</h4>
 
             <h4 id="proguard">ProGuard</h4>
             <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @FindView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
+                To prevent ProGuard renaming classes that use @Bind on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
             <pre>-keep class butterknife.** { *; }
 -dontwarn butterknife.internal.**
 -keep class **$$ViewBinder { *; }
