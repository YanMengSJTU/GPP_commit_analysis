diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index ab3ec3b6..9da3868b 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -228,7 +228,7 @@ private void parseInjectView(Element element, Map<TypeElement, ViewInjector> tar
       elementType = typeVariable.getUpperBound();
     }
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@InjectView fields must extend from View. (%s.%s)",
+      error(element, "@InjectView fields must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -316,7 +316,7 @@ private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> ta
 
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@InjectViews type must extend from View. (%s.%s)",
+      error(element, "@InjectViews type must extend from View or be an interface. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
       hasError = true;
     }
@@ -450,7 +450,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           String targetType = listener.targetType();
           if (!isSubtypeOfType(enclosingElement.asType(), targetType) && !isInterface(enclosingElement.asType())) {
             error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\". (%s.%s)", annotationClass.getSimpleName(), targetType,
+                    + "\"%s\" or an interface. (%s.%s)", annotationClass.getSimpleName(), targetType,
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index e3bedb01..08ce0df7 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -405,7 +405,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectView fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -523,7 +523,7 @@
         .failsToCompile()
         .withErrorContaining((
             "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\". (test.Test.doStuff)"))
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
         .in(source)
         .onLine(6);
   }
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
index bfbcff16..cf61049c 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
@@ -350,7 +350,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(6);
   }
 
@@ -362,7 +362,7 @@
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
