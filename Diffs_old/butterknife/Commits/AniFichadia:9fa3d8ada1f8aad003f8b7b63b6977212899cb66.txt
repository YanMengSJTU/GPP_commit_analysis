diff --git a/.travis.yml b/.travis.yml
index 009df7de..03da3562 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -4,8 +4,8 @@ android:
   components:
     - tools
     - platform-tools
-    - build-tools-24.0.2
-    - android-24
+    - build-tools-25.0.2
+    - android-25
     - extra-android-m2repository
     - sys-img-armeabi-v7a-android-18
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index fbeef39d..590b4748 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,25 @@
 Change Log
 ==========
 
+Version 8.5.1 *(2017-01-24)*
+----------------------------
+
+ * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection.
+
+
+Version 8.5.0 *(2017-01-23)*
+----------------------------
+
+ * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning.
+ * Migrate lint checks from Lombok AST to JetBrains PSI.
+ * Annotations are no longer claimed by the processor.
+ * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is
+   released) the generated code now changes to use newer APIs when available.
+ * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses.
+ * Generated classes are no longer generic.
+ * Minimum supported SDK is now 9.
+
+
 Version 8.4.0 *(2016-08-26)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 59a1f063..81c2211c 100644
--- a/README.md
+++ b/README.md
@@ -43,8 +43,8 @@ Download
 
 ```groovy
 dependencies {
-  compile 'com.jakewharton:butterknife:8.4.0'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
+  compile 'com.jakewharton:butterknife:8.5.1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
 }
 ```
 
@@ -63,7 +63,7 @@ buildscript {
     mavenCentral()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1'
   }
 }
 ```
diff --git a/build.gradle b/build.gradle
index 2a4120d4..42dd66f8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -45,15 +45,15 @@ subprojects { project ->
 
 ext {
   minSdkVersion = 9
-  targetSdkVersion = 24
-  compileSdkVersion = 24
-  buildToolsVersion = '24.0.2'
+  targetSdkVersion = 25
+  compileSdkVersion = 25
+  buildToolsVersion = '25.0.2'
   sourceCompatibilityVersion = JavaVersion.VERSION_1_7
   targetCompatibilityVersion = JavaVersion.VERSION_1_7
 }
 
 def androidToolsVersion = '25.2.0'
-def supportLibraryVersion = '24.2.1'
+def supportLibraryVersion = '25.1.0'
 def butterknifeLatestReleaseVersion = '8.4.0'
 
 ext.deps = [
@@ -69,7 +69,7 @@ ext.deps = [
     lintTests: "com.android.tools.lint:lint-tests:$androidToolsVersion",
 
     // Square
-    javapoet: 'com.squareup:javapoet:1.7.0',
+    javapoet: 'com.squareup:javapoet:1.8.0',
 
     // Third Party
     javaparser: 'com.github.javaparser:javaparser-core:2.4.0',
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index e917f86b..45576488 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -14,9 +14,9 @@ for (File file : sdkHandler.sdkLoader.repositories) {
 
 dependencies {
   compile project(':butterknife-annotations')
-  compile deps.autoservice
   compile deps.autocommon
   compile deps.javapoet
+  compileOnly deps.autoservice
   compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 
   testCompile deps.junit
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 19915d4e..02d69fba 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -24,8 +24,12 @@
 import java.util.Set;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
 
+import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
 import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -52,18 +56,24 @@
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
   private final boolean isFinal;
+  private final boolean isView;
+  private final boolean isActivity;
+  private final boolean isDialog;
   private final ImmutableList<ViewBinding> viewBindings;
   private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
   private final ImmutableList<ResourceBinding> resourceBindings;
   private final BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
-      ImmutableList<ViewBinding> viewBindings,
+      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
       ImmutableList<FieldCollectionViewBinding> collectionBindings,
       ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
+    this.isView = isView;
+    this.isActivity = isActivity;
+    this.isDialog = isDialog;
     this.viewBindings = viewBindings;
     this.collectionBindings = collectionBindings;
     this.resourceBindings = resourceBindings;
@@ -93,42 +103,88 @@ private TypeSpec createType(int sdk) {
       result.addField(targetTypeName, "target", PRIVATE);
     }
 
+    if (isView) {
+      result.addMethod(createBindingConstructorForView());
+    } else if (isActivity) {
+      result.addMethod(createBindingConstructorForActivity());
+    } else if (isDialog) {
+      result.addMethod(createBindingConstructorForDialog());
+    }
     if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
-      result.addMethod(createBindingViewDelegateConstructor(targetTypeName));
+      result.addMethod(createBindingViewDelegateConstructor());
     }
-    result.addMethod(createBindingConstructor(targetTypeName, sdk));
+    result.addMethod(createBindingConstructor(sdk));
 
     if (hasViewBindings() || parentBinding == null) {
-      result.addMethod(createBindingUnbindMethod(result, targetTypeName));
+      result.addMethod(createBindingUnbindMethod(result));
     }
 
     return result.build();
   }
 
-  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {
+  private MethodSpec createBindingViewDelegateConstructor() {
     return MethodSpec.constructorBuilder()
         .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
                 + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
-            bindingClassName, targetType, CONTEXT)
+            bindingClassName, targetTypeName, CONTEXT)
         .addAnnotation(Deprecated.class)
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC)
-        .addParameter(targetType, "target")
+        .addParameter(targetTypeName, "target")
         .addParameter(VIEW, "source")
         .addStatement(("this(target, source.getContext())"))
         .build();
   }
 
-  private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
+  private MethodSpec createBindingConstructorForView() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target)");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForActivity() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target)");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForDialog() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructor(int sdk) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
         .addModifiers(PUBLIC);
 
     if (hasMethodBindings()) {
-      constructor.addParameter(targetType, "target", FINAL);
+      constructor.addParameter(targetTypeName, "target", FINAL);
     } else {
-      constructor.addParameter(targetType, "target");
+      constructor.addParameter(targetTypeName, "target");
     }
 
     if (constructorNeedsView()) {
@@ -197,8 +253,7 @@ private MethodSpec createBindingConstructor(TypeName targetType, int sdk) {
     return constructor.build();
   }
 
-  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
-      TypeName targetType) {
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass) {
     MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
         .addAnnotation(Override.class)
         .addModifiers(PUBLIC);
@@ -208,7 +263,7 @@ private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,
 
     if (hasTargetField()) {
       if (hasFieldBindings()) {
-        result.addStatement("$T target = this.target", targetType);
+        result.addStatement("$T target = this.target", targetTypeName);
       }
       result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
           "Bindings already cleared.");
@@ -598,7 +653,13 @@ static boolean requiresCast(TypeName type) {
   }
 
   static Builder newBuilder(TypeElement enclosingElement) {
-    TypeName targetType = TypeName.get(enclosingElement.asType());
+    TypeMirror typeMirror = enclosingElement.asType();
+
+    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);
+    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);
+    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);
+
+    TypeName targetType = TypeName.get(typeMirror);
     if (targetType instanceof ParameterizedTypeName) {
       targetType = ((ParameterizedTypeName) targetType).rawType;
     }
@@ -609,13 +670,16 @@ static Builder newBuilder(TypeElement enclosingElement) {
     ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
 
     boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
-    return new Builder(targetType, bindingClassName, isFinal);
+    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);
   }
 
   static final class Builder {
     private final TypeName targetTypeName;
     private final ClassName bindingClassName;
     private final boolean isFinal;
+    private final boolean isView;
+    private final boolean isActivity;
+    private final boolean isDialog;
 
     private BindingSet parentBinding;
 
@@ -624,10 +688,14 @@ static Builder newBuilder(TypeElement enclosingElement) {
         ImmutableList.builder();
     private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
 
-    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
+    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+        boolean isView, boolean isActivity, boolean isDialog) {
       this.targetTypeName = targetTypeName;
       this.bindingClassName = bindingClassName;
       this.isFinal = isFinal;
+      this.isView = isView;
+      this.isActivity = isActivity;
+      this.isDialog = isDialog;
     }
 
     void addField(Id id, FieldViewBinding binding) {
@@ -685,8 +753,9 @@ BindingSet build() {
       for (ViewBinding.Builder builder : viewIdMap.values()) {
         viewBindings.add(builder.build());
       }
-      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewBindings.build(),
-          collectionBindings.build(), resourceBindings.build(), parentBinding);
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,
+          viewBindings.build(), collectionBindings.build(), resourceBindings.build(),
+          parentBinding);
     }
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 2f468d8c..ce462055 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -50,6 +50,7 @@
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
@@ -62,6 +63,7 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
+import javax.lang.model.element.Name;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
@@ -86,6 +88,8 @@
   private static final String OPTION_SDK_INT = "butterknife.minSdk";
   static final Id NO_ID = new Id(-1);
   static final String VIEW_TYPE = "android.view.View";
+  static final String ACTIVITY_TYPE = "android.app.Activity";
+  static final String DIALOG_TYPE = "android.app.Dialog";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
@@ -117,7 +121,7 @@
   private Trees trees;
   private int sdk = 1;
 
-  private final Map<Integer, Id> symbols = new LinkedHashMap<>();
+  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
@@ -417,16 +421,16 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
       TypeVariable typeVariable = (TypeVariable) elementType;
       elementType = typeVariable.getUpperBound();
     }
+    Name qualifiedName = enclosingElement.getQualifiedName();
+    Name simpleName = element.getSimpleName();
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
       if (elementType.getKind() == TypeKind.ERROR) {
         note(element, "@%s field with unresolved type (%s) "
                 + "must elsewhere be generated as a View or interface. (%s.%s)",
-            BindView.class.getSimpleName(), elementType, enclosingElement.getQualifiedName(),
-            element.getSimpleName());
+            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);
       } else {
         error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
-            BindView.class.getSimpleName(), enclosingElement.getQualifiedName(),
-            element.getSimpleName());
+            BindView.class.getSimpleName(), qualifiedName, simpleName);
         hasError = true;
       }
     }
@@ -439,8 +443,9 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
     int id = element.getAnnotation(BindView.class).value();
 
     BindingSet.Builder builder = builderMap.get(enclosingElement);
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     if (builder != null) {
-      String existingBindingName = builder.findExistingBindingName(getId(id));
+      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));
       if (existingBindingName != null) {
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
             BindView.class.getSimpleName(), id, existingBindingName,
@@ -451,16 +456,20 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
       builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     }
 
-    String name = element.getSimpleName().toString();
+    String name = simpleName.toString();
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
-    builder.addField(getId(id), new FieldViewBinding(name, type, required));
+    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement);
   }
 
+  private QualifiedId elementToQualifiedId(Element element, int id) {
+    return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);
+  }
+
   private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -542,7 +551,8 @@ private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder
 
     List<Id> idVars = new ArrayList<>();
     for (int id : ids) {
-      idVars.add(getId(id));
+      QualifiedId qualifiedId = elementToQualifiedId(element, id);
+      idVars.add(getId(qualifiedId));
     }
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
@@ -575,9 +585,10 @@ private void parseResourceBool(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBool.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -610,9 +621,9 @@ private void parseResourceColor(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindColor.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name,
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
         isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
             : FieldResourceBinding.Type.COLOR));
 
@@ -647,9 +658,9 @@ private void parseResourceDimen(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDimen.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name,
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
         isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
 
     erasedTargetNames.add(enclosingElement);
@@ -679,10 +690,10 @@ private void parseResourceBitmap(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBitmap.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -712,9 +723,10 @@ private void parseResourceDrawable(Element element,
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDrawable.class).value();
     int tint = element.getAnnotation(BindDrawable.class).tint();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));
+    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -743,9 +755,10 @@ private void parseResourceFloat(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindFloat.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -773,9 +786,10 @@ private void parseResourceInt(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindInt.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -804,10 +818,10 @@ private void parseResourceString(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindString.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -838,9 +852,9 @@ private void parseResourceArray(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindArray.class).value();
-
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(id), name, type));
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -1087,7 +1101,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
-      if (!builder.addMethod(getId(id), listener, method, binding)) {
+      QualifiedId qualifiedId = elementToQualifiedId(element, id);
+      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
@@ -1103,7 +1118,7 @@ private boolean isInterface(TypeMirror typeMirror) {
         && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
   }
 
-  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
+  static boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     if (isTypeEqual(typeMirror, otherType)) {
       return true;
     }
@@ -1143,7 +1158,7 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
+  private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
     return otherType.equals(typeMirror.toString());
   }
 
@@ -1220,11 +1235,11 @@ private static AnnotationMirror getMirror(Element element,
     return null;
   }
 
-  private Id getId(int id) {
-    if (symbols.get(id) == null) {
-      symbols.put(id, new Id(id));
+  private Id getId(QualifiedId qualifiedId) {
+    if (symbols.get(qualifiedId) == null) {
+      symbols.put(qualifiedId, new Id(qualifiedId.id));
     }
-    return symbols.get(id);
+    return symbols.get(qualifiedId);
   }
 
   private void scanForRClasses(RoundEnvironment env) {
@@ -1236,17 +1251,23 @@ private void scanForRClasses(RoundEnvironment env) {
       for (Element element : env.getElementsAnnotatedWith(annotation)) {
         JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
         if (tree != null) { // tree can be null if the references are compiled types and not source
+          String respectivePackageName =
+              elementUtils.getPackageOf(element).getQualifiedName().toString();
+          scanner.setCurrentPackageName(respectivePackageName);
           tree.accept(scanner);
         }
       }
     }
 
-    for (String rClass : scanner.getRClasses()) {
-      parseRClass(rClass);
+    for (Map.Entry<String, Set<String>> packageNameToRClassSet : scanner.getRClasses().entrySet()) {
+      String respectivePackageName = packageNameToRClassSet.getKey();
+      for (String rClass : packageNameToRClassSet.getValue()) {
+        parseRClass(respectivePackageName, rClass);
+      }
     }
   }
 
-  private void parseRClass(String rClass) {
+  private void parseRClass(String respectivePackageName, String rClass) {
     Element element;
 
     try {
@@ -1257,15 +1278,15 @@ private void parseRClass(String rClass) {
 
     JCTree tree = (JCTree) trees.getTree(element);
     if (tree != null) { // tree can be null if the references are compiled types and not source
-      IdScanner idScanner =
-          new IdScanner(symbols, elementUtils.getPackageOf(element).getQualifiedName().toString());
+      IdScanner idScanner = new IdScanner(symbols, elementUtils.getPackageOf(element)
+          .getQualifiedName().toString(), respectivePackageName);
       tree.accept(idScanner);
     } else {
-      parseCompiledR((TypeElement) element);
+      parseCompiledR(respectivePackageName, (TypeElement) element);
     }
   }
 
-  private void parseCompiledR(TypeElement rClass) {
+  private void parseCompiledR(String respectivePackageName, TypeElement rClass) {
     for (Element element : rClass.getEnclosedElements()) {
       String innerClassName = element.getSimpleName().toString();
       if (SUPPORTED_TYPES.contains(innerClassName)) {
@@ -1280,7 +1301,8 @@ private void parseCompiledR(TypeElement rClass) {
                   ClassName.get(elementUtils.getPackageOf(variableElement).toString(), "R",
                       innerClassName);
               String resourceName = variableElement.getSimpleName().toString();
-              symbols.put(id, new Id(id, rClassName, resourceName));
+              QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
+              symbols.put(qualifiedId, new Id(id, rClassName, resourceName));
             }
           }
         }
@@ -1289,7 +1311,9 @@ private void parseCompiledR(TypeElement rClass) {
   }
 
   private static class RClassScanner extends TreeScanner {
-    private final Set<String> rClasses = new LinkedHashSet<>();
+    // Maps the currently evaulated rPackageName to R Classes
+    private final Map<String, Set<String>> rClasses = new LinkedHashMap<>();
+    private String currentPackageName;
 
     @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
       Symbol symbol = jcFieldAccess.sym;
@@ -1297,22 +1321,33 @@ private void parseCompiledR(TypeElement rClass) {
           && symbol.getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
-        rClasses.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());
+        Set<String> rClassSet = rClasses.get(currentPackageName);
+        if (rClassSet == null) {
+          rClassSet = new HashSet<>();
+          rClasses.put(currentPackageName, rClassSet);
+        }
+        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());
       }
     }
 
-    Set<String> getRClasses() {
+    Map<String, Set<String>> getRClasses() {
       return rClasses;
     }
+
+    void setCurrentPackageName(String respectivePackageName) {
+      this.currentPackageName = respectivePackageName;
+    }
   }
 
   private static class IdScanner extends TreeScanner {
-    private final Map<Integer, Id> ids;
-    private final String packageName;
+    private final Map<QualifiedId, Id> ids;
+    private final String rPackageName;
+    private final String respectivePackageName;
 
-    IdScanner(Map<Integer, Id> ids, String packageName) {
+    IdScanner(Map<QualifiedId, Id> ids, String rPackageName, String respectivePackageName) {
       this.ids = ids;
-      this.packageName = packageName;
+      this.rPackageName = rPackageName;
+      this.respectivePackageName = respectivePackageName;
     }
 
     @Override public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {
@@ -1321,8 +1356,8 @@ private void parseCompiledR(TypeElement rClass) {
           ClassTree classTree = (ClassTree) tree;
           String className = classTree.getSimpleName().toString();
           if (SUPPORTED_TYPES.contains(className)) {
-            ClassName rClassName = ClassName.get(packageName, "R", className);
-            VarScanner scanner = new VarScanner(ids, rClassName);
+            ClassName rClassName = ClassName.get(rPackageName, "R", className);
+            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName);
             ((JCTree) classTree).accept(scanner);
           }
         }
@@ -1331,19 +1366,23 @@ private void parseCompiledR(TypeElement rClass) {
   }
 
   private static class VarScanner extends TreeScanner {
-    private final Map<Integer, Id> ids;
+    private final Map<QualifiedId, Id> ids;
     private final ClassName className;
+    private final String respectivePackageName;
 
-    private VarScanner(Map<Integer, Id> ids, ClassName className) {
+    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,
+        String respectivePackageName) {
       this.ids = ids;
       this.className = className;
+      this.respectivePackageName = respectivePackageName;
     }
 
     @Override public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
       if ("int".equals(jcVariableDecl.getType().toString())) {
         int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());
         String resourceName = jcVariableDecl.getName().toString();
-        ids.put(id, new Id(id, className, resourceName));
+        QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
+        ids.put(qualifiedId, new Id(id, className, resourceName));
       }
     }
   }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java b/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
new file mode 100644
index 00000000..76600c89
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
@@ -0,0 +1,29 @@
+package butterknife.compiler;
+
+final class QualifiedId {
+  final String packageName;
+  final int id;
+
+  QualifiedId(String packageName, int id) {
+    this.packageName = packageName;
+    this.id = id;
+  }
+
+  @Override public String toString() {
+    return "QualifiedId{packageName='" + packageName + "', id=" + id + '}';
+  }
+
+  @Override public boolean equals(Object o) {
+    if (this == o) return true;
+    if (!(o instanceof QualifiedId)) return false;
+    QualifiedId other = (QualifiedId) o;
+    return id == other.id
+        && packageName.equals(other.packageName);
+  }
+
+  @Override public int hashCode() {
+    int result = packageName.hashCode();
+    result = 31 * result + id;
+    return result;
+  }
+}
diff --git a/butterknife/proguard-rules.txt b/butterknife/proguard-rules.txt
index 371caa00..dd010a40 100644
--- a/butterknife/proguard-rules.txt
+++ b/butterknife/proguard-rules.txt
@@ -1,5 +1,5 @@
 # Retain generated class which implement Unbinder.
--keep public class * implements butterknife.Unbinder { public <init>(...); }
+-keep public class * implements butterknife.Unbinder { public <init>(**, android.view.View); }
 
 # Prevent obfuscation of types which use ButterKnife annotations since the simple name
 # is used to reflectively look up the generated ViewBinding.
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife/src/test/java/butterknife/BindArrayTest.java
index ade8a399..7a1c69d2 100644
--- a/butterknife/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife/src/test/java/butterknife/BindArrayTest.java
@@ -12,9 +12,8 @@
   @Test public void stringArray() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindArray;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindArray(1) String[] one;\n"
         + "}"
     );
@@ -66,9 +65,8 @@
   @Test public void intArray() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindArray;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindArray(1) int[] one;\n"
         + "}"
     );
@@ -119,9 +117,8 @@
   @Test public void textArray() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindArray;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindArray(1) CharSequence[] one;\n"
         + "}"
     );
@@ -172,10 +169,9 @@
   @Test public void typedArray() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindArray;\n"
         + "import android.content.res.TypedArray;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindArray(1) TypedArray one;\n"
         + "}"
     );
@@ -226,9 +222,8 @@
   @Test public void typeMustBeSupported() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindArray;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindArray(1) String one;\n"
         + "}"
     );
@@ -239,6 +234,6 @@
         .withErrorContaining(
             "@BindArray field type must be one of: String[], int[], CharSequence[], "
                 + "android.content.res.TypedArray. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife/src/test/java/butterknife/BindBitmapTest.java
index 820b6dd0..84d371f0 100644
--- a/butterknife/src/test/java/butterknife/BindBitmapTest.java
+++ b/butterknife/src/test/java/butterknife/BindBitmapTest.java
@@ -12,10 +12,9 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.graphics.Bitmap;\n"
         + "import butterknife.BindBitmap;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindBitmap(1) Bitmap one;\n"
         + "}"
     );
@@ -67,9 +66,8 @@
   @Test public void typeMustBeBitmap() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindBitmap;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindBitmap(1) String one;\n"
         + "}"
     );
@@ -78,6 +76,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife/src/test/java/butterknife/BindBoolTest.java
index 92148b15..fc44a763 100644
--- a/butterknife/src/test/java/butterknife/BindBoolTest.java
+++ b/butterknife/src/test/java/butterknife/BindBoolTest.java
@@ -12,9 +12,8 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.BindBool;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @BindBool(1) boolean one;"
         + "}"
     );
@@ -65,9 +64,8 @@
   @Test public void typeMustBeBoolean() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindBool;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindBool(1) String one;\n"
         + "}"
     );
@@ -76,6 +74,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife/src/test/java/butterknife/BindColorTest.java
index 37a42471..e07b05de 100644
--- a/butterknife/src/test/java/butterknife/BindColorTest.java
+++ b/butterknife/src/test/java/butterknife/BindColorTest.java
@@ -12,9 +12,8 @@
   @Test public void simpleInt() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(1) int one;\n"
         + "}"
     );
@@ -64,9 +63,8 @@
   @Test public void simpleIntSdk23() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(1) int one;\n"
         + "}"
     );
@@ -115,10 +113,9 @@
   @Test public void simpleColorStateList() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.content.res.ColorStateList;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(1) ColorStateList one;\n"
         +"}"
     );
@@ -168,10 +165,9 @@
   @Test public void simpleColorStateListSdk23() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.content.res.ColorStateList;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(1) ColorStateList one;\n"
         +"}"
     );
@@ -220,9 +216,8 @@
   @Test public void typeMustBeIntOrColorStateList() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(1) String one;\n"
         + "}"
     );
@@ -231,6 +226,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife/src/test/java/butterknife/BindDimenTest.java
index 94f7db26..c8adfc81 100644
--- a/butterknife/src/test/java/butterknife/BindDimenTest.java
+++ b/butterknife/src/test/java/butterknife/BindDimenTest.java
@@ -12,9 +12,8 @@
   @Test public void simpleFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindDimen;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDimen(1) float one;\n"
         + "}"
     );
@@ -65,9 +64,8 @@
   @Test public void simpleInt() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindDimen;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDimen(1) int one;\n"
         + "}"
     );
@@ -118,9 +116,8 @@
   @Test public void typeMustBeIntOrFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindDimen;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDimen(1) String one;\n"
         + "}"
     );
@@ -129,6 +126,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife/src/test/java/butterknife/BindDrawableTest.java
index ddce3db4..14044bf4 100644
--- a/butterknife/src/test/java/butterknife/BindDrawableTest.java
+++ b/butterknife/src/test/java/butterknife/BindDrawableTest.java
@@ -12,10 +12,9 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.graphics.drawable.Drawable;\n"
         + "import butterknife.BindDrawable;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDrawable(1) Drawable one;\n"
         + "}"
     );
@@ -65,10 +64,9 @@
   @Test public void simpleSdk21() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.graphics.drawable.Drawable;\n"
         + "import butterknife.BindDrawable;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDrawable(1) Drawable one;\n"
         + "}"
     );
@@ -117,10 +115,9 @@
   @Test public void withTint() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.graphics.drawable.Drawable;\n"
         + "import butterknife.BindDrawable;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDrawable(value = 1, tint = 2) Drawable one;\n"
         + "}"
     );
@@ -170,9 +167,8 @@
   @Test public void typeMustBeDrawable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindDrawable;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindDrawable(1) String one;\n"
         + "}"
     );
@@ -181,6 +177,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife/src/test/java/butterknife/BindFloatTest.java
index 871ae519..cbbd489b 100644
--- a/butterknife/src/test/java/butterknife/BindFloatTest.java
+++ b/butterknife/src/test/java/butterknife/BindFloatTest.java
@@ -12,9 +12,8 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.BindFloat;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @BindFloat(1) float one;"
         + "}"
     );
@@ -64,9 +63,8 @@
   @Test public void typeMustBeFloat() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindFloat;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindFloat(1) String one;\n"
         + "}"
     );
@@ -75,6 +73,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindFloat field type must be 'float'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife/src/test/java/butterknife/BindIntTest.java
index 6749e747..bcb6652d 100644
--- a/butterknife/src/test/java/butterknife/BindIntTest.java
+++ b/butterknife/src/test/java/butterknife/BindIntTest.java
@@ -12,9 +12,8 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindInt;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindInt(1) int one;\n"
         + "}"
     );
@@ -65,9 +64,8 @@
   @Test public void typeMustBeInt() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindInt;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindInt(1) String one;\n"
         + "}"
     );
@@ -76,6 +74,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
index 44675a24..13482c40 100644
--- a/butterknife/src/test/java/butterknife/BindStringTest.java
+++ b/butterknife/src/test/java/butterknife/BindStringTest.java
@@ -12,9 +12,8 @@
   @Test public void simple() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindString;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindString(1) String one;\n"
         + "}"
     );
@@ -65,9 +64,8 @@
   @Test public void typeMustBeString() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindString;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindString(1) boolean one;\n"
         + "}"
     );
@@ -76,6 +74,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
index e2e4ef95..7e62eda2 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -16,10 +16,9 @@
   @Test public void bindingView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) View thing;\n"
         + "}"
     );
@@ -62,10 +61,9 @@
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindView;\n"
         + "@PerformGeneration\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) GeneratedView thing;\n"
         + "}"
     );
@@ -98,10 +96,9 @@
   @Test public void bindingViewFinalClass() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public final class Test extends Activity {\n"
+        + "public final class Test {\n"
         + "    @BindView(1) View thing;\n"
         + "}"
     );
@@ -142,10 +139,9 @@
   @Test public void bindingViewFinalClassWithBaseClass() {
     JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Base extends Activity {\n"
+        + "public class Base {\n"
         + "    @BindView(1) View thing;\n"
         + "}"
     );
@@ -222,11 +218,10 @@
   @Test public void bindingViewInnerClass() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "public class Outer {\n"
-        + "  public static class Test extends Activity {\n"
+        + "  public static class Test {\n"
         + "    @BindView(1) View thing;\n"
         + "  }\n"
         + "}"
@@ -270,10 +265,9 @@
   @Test public void bindingViewUppercasePackageName() {
     JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
         + "package com.Example;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) View thing;\n"
         + "}"
     );
@@ -316,10 +310,9 @@
   @Test public void bindingInterface() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    interface TestInterface {}\n"
         + "    @BindView(1) TestInterface thing;\n"
         + "}"
@@ -363,11 +356,10 @@
   @Test public void genericType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.widget.EditText;\n"
         + "import android.widget.TextView;\n"
         + "import butterknife.BindView;\n"
-        + "class Test<T extends TextView> extends Activity {\n"
+        + "class Test<T extends TextView> {\n"
         + "    @BindView(1) T thing;\n"
         + "}"
     );
@@ -413,11 +405,10 @@
   @Test public void oneFindPerId() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) View thing1;\n"
         + "  @OnClick(1) void doStuff() {}\n"
         + "}"
@@ -474,11 +465,10 @@
   @Test public void oneFindPerIdWithCast() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.widget.Button;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) Button thing1;\n"
         + "  @OnClick(1) void doStuff() {}\n"
         + "}"
@@ -536,10 +526,9 @@
   @Test public void fieldVisibility() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) public View thing1;\n"
         + "  @BindView(2) View thing2;\n"
         + "  @BindView(3) protected View thing3;\n"
@@ -555,10 +544,9 @@
   @Test public void nullable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @interface Nullable {}\n"
         + "  @Nullable @BindView(1) View view;\n"
         + "}"
@@ -601,10 +589,9 @@
   @Test public void superclass() {
     JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) View view;\n"
         + "}"
     );
@@ -688,10 +675,9 @@
   @Test public void genericSuperclass() {
     JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test<T> extends Activity {\n"
+        + "public class Test<T> {\n"
         + "  @BindView(1) View view;\n"
         + "}"
     );
@@ -833,9 +819,8 @@
   @Test public void failsIfNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) String thing;\n"
         + "}"
     );
@@ -845,7 +830,7 @@
         .failsToCompile()
         .withErrorContaining(
             "@BindView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 
   @Test public void failsIfInInterface() {
@@ -869,10 +854,9 @@
   @Test public void failsIfPrivate() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) private View thing;\n"
         + "}"
     );
@@ -881,16 +865,15 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfStatic() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) static View thing;\n"
         + "}"
     );
@@ -899,16 +882,15 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void duplicateBindingFails() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindView(1) View thing1;\n"
         + "    @BindView(1) View thing2;\n"
         + "}"
@@ -919,7 +901,7 @@
         .failsToCompile()
         .withErrorContaining(
             "Attempt to use @BindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
+        .in(source).onLine(6);
   }
 
   @Test public void failsOptionalRootViewBinding() throws Exception {
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
index d8b78979..f218b69b 100644
--- a/butterknife/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -16,11 +16,10 @@
   @Test public void fieldVisibility() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindViews(1) public List<View> thing1;\n"
         + "  @BindViews(2) List<View> thing2;\n"
         + "  @BindViews(3) protected List<View> thing3;\n"
@@ -36,10 +35,9 @@
   @Test public void bindingArray() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindViews({1, 2, 3}) View[] thing;\n"
         + "}"
     );
@@ -85,10 +83,9 @@
   @Test public void bindingArrayWithGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
-        + "public class Test<T extends View> extends Activity {\n"
+        + "public class Test<T extends View> {\n"
         + "    @BindViews({1, 2, 3}) T[] thing;\n"
         + "}"
     );
@@ -136,10 +133,9 @@
   @Test public void bindingArrayWithCast() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.widget.TextView;\n"
         + "import butterknife.BindViews;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindViews({1, 2, 3}) TextView[] thing;\n"
         + "}"
     );
@@ -186,11 +182,10 @@
   @Test public void bindingList() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindViews({1, 2, 3}) List<View> thing;\n"
         + "}"
     );
@@ -237,11 +232,10 @@
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
         + "@PerformGeneration\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindViews({1, 2}) List<GeneratedView> things;\n"
         + "}"
     );
@@ -274,7 +268,6 @@
   @Test public void bindingListOfInterface() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
         + "public class Test {\n"
@@ -324,11 +317,10 @@
   @Test public void bindingListWithGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test<T extends View> extends Activity {\n"
+        + "public class Test<T extends View> {\n"
         + "    @BindViews({1, 2, 3}) List<T> thing;\n"
         + "}"
     );
@@ -376,11 +368,10 @@
   @Test public void nullableList() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @interface Nullable {}\n"
         + "    @Nullable @BindViews({1, 2, 3}) List<View> thing;\n"
         + "}"
@@ -480,10 +471,9 @@
   @Test public void failsIfGenericNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindViews(1) List<String> thing;\n"
         + "}"
     );
@@ -493,15 +483,14 @@
         .failsToCompile()
         .withErrorContaining(
             "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfArrayNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindViews;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindViews(1) String[] thing;\n"
         + "}"
     );
@@ -511,17 +500,16 @@
         .failsToCompile()
         .withErrorContaining(
             "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
+        .in(source).onLine(4);
   }
 
   @Test public void failsIfContainsDuplicateIds() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindViews;\n"
         + "import java.util.List;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "    @BindViews({1, 1}) List<View> thing;\n"
         + "}"
     );
@@ -530,6 +518,6 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@BindViews annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
+        .in(source).onLine(6);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/ExtendActivityTest.java b/butterknife/src/test/java/butterknife/ExtendActivityTest.java
new file mode 100644
index 00000000..0499d3c2
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendActivityTest.java
@@ -0,0 +1,120 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendActivityTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import android.content.Context;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends Activity {"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends Activity {"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ExtendDialogTest.java b/butterknife/src/test/java/butterknife/ExtendDialogTest.java
new file mode 100644
index 00000000..dc9a76b0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendDialogTest.java
@@ -0,0 +1,126 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendDialogTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Dialog;"
+        + "import android.content.Context;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends Dialog {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getContext());\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Dialog;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends Dialog {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ExtendViewTest.java b/butterknife/src/test/java/butterknife/ExtendViewTest.java
new file mode 100644
index 00000000..1e08dc32
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendViewTest.java
@@ -0,0 +1,125 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendViewTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends View {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getContext());\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends View {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
index b1ac9f2f..b0b5fbd3 100644
--- a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
+++ b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
@@ -12,9 +12,8 @@
   @Test public void checkedChanged() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnCheckedChanged;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnCheckedChanged(1) void doStuff() {}\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 71e21a60..3cf004a6 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -12,9 +12,8 @@
   @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1) void doStuff() {}\n"
         + "}"
     );
@@ -67,9 +66,8 @@
   @Test public void onClickBindingFinalType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public final class Test extends Activity {\n"
+        + "public final class Test {\n"
         + "  @OnClick(1) void doStuff() {}\n"
         + "}"
     );
@@ -121,9 +119,8 @@
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import android.view.View;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1) void doStuff1() {}\n"
         + "  @OnClick(1) void doStuff2() {}\n"
         + "  @OnClick({1, 2}) void doStuff3(View v) {}\n"
@@ -191,11 +188,10 @@
   @Test public void findOnlyCalledOnce() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) View view;\n"
         + "  @OnClick(1) void doStuff() {}\n"
         + "}"
@@ -252,10 +248,9 @@
   @Test public void methodVisibility() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1) public void thing1() {}\n"
         + "  @OnClick(2) void thing2() {}\n"
         + "  @OnClick(3) protected void thing3() {}\n"
@@ -271,12 +266,11 @@
   @Test public void methodCastsArgument() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import android.widget.Button;\n"
         + "import android.widget.TextView;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  interface TestInterface {}\n"
         + "  @OnClick(0) void click0() {}\n"
         + "  @OnClick(1) void click1(View view) {}\n"
@@ -380,10 +374,9 @@
   @Test public void methodWithMultipleIds() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick({1, 2, 3}) void click() {}\n"
         + "}"
     );
@@ -458,10 +451,9 @@
   @Test public void nullable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
         + "import butterknife.Optional;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @Optional @OnClick(1) void doStuff() {}\n"
         + "}");
 
@@ -516,12 +508,11 @@
   @Test public void optionalAndRequiredSkipsNullCheck() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.OnClick;\n"
         + "import butterknife.Optional;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) View view;\n"
         + "  @Optional @OnClick(1) void doStuff() {}\n"
         + "}"
@@ -612,9 +603,8 @@
   @Test public void failsIfHasReturnType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1)\n"
         + "  public String doStuff() {\n"
         + "  }\n"
@@ -625,15 +615,14 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfPrivateMethod() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1)\n"
         + "  private void doStuff() {\n"
         + "  }\n"
@@ -644,15 +633,14 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfStatic() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1)\n"
         + "  public static void doStuff() {\n"
         + "  }\n"
@@ -663,15 +651,14 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfParameterNotView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1)\n"
         + "  public void doStuff(String thing) {\n"
         + "  }\n"
@@ -692,16 +679,15 @@
             + "    android.view.View\n"
             + "  \n"
             + "  These may be listed in any order but will be searched for from top to bottom.")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 
   @Test public void failsIfMoreThanOneParameter() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1)\n"
         + "  public void doStuff(View thing, View otherThing) {\n"
         + "  }\n"
@@ -713,7 +699,7 @@
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(7);
+        .in(source).onLine(6);
   }
 
   @Test public void failsIfInInterface() {
@@ -737,9 +723,8 @@
   @Test public void failsIfHasDuplicateIds() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick({1, 2, 3, 1})\n"
         + "  void doStuff() {\n"
         + "  }\n"
@@ -751,6 +736,6 @@
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
index 74d681a0..f57edfcd 100644
--- a/butterknife/src/test/java/butterknife/OnEditorActionTest.java
+++ b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
@@ -12,9 +12,8 @@
   @Test public void editorAction() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnEditorAction;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnEditorAction(1) boolean doStuff() { return false; }\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
index b503b8ea..d8216f1c 100644
--- a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
+++ b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
@@ -12,9 +12,8 @@
   @Test public void focusChange() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnFocusChange;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnFocusChange(1) void doStuff() {}\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
index 0da6d879..31ba53d2 100644
--- a/butterknife/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -13,9 +13,8 @@
   @Test public void onItemClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.OnItemClick;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @OnItemClick(1) void doStuff() {}"
         + "}"
     );
@@ -68,11 +67,10 @@
   @Test public void onItemClickBindingWithParameters() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import butterknife.OnItemClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemClick(1) void doStuff(\n"
         + "    AdapterView<?> parent,\n"
         + "    View view,\n"
@@ -130,11 +128,10 @@
   @Test public void onItemClickBindingWithParameterSubset() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import android.widget.ListView;\n"
         + "import butterknife.OnItemClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemClick(1) void doStuff(\n"
         + "    ListView parent,\n"
         + "    int position\n"
@@ -191,11 +188,10 @@
   @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import android.widget.ListView;\n"
         + "import butterknife.OnItemClick;\n"
-        + "public class Test<T extends ListView> extends Activity {\n"
+        + "public class Test<T extends ListView> {\n"
         + "  @OnItemClick(1) void doStuff(\n"
         + "    T parent,\n"
         + "    int position\n"
@@ -279,6 +275,10 @@
         + "  private Test target;\n"
         + "  private View viewSource;\n"
         + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  @UiThread\n"
         + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    viewSource = source;\n"
@@ -362,10 +362,8 @@
   @Test public void failsWithInvalidId() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnItemClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemClick({1, -1}) void doStuff() {}\n"
         + "}"
     );
@@ -374,17 +372,16 @@
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(4);
   }
 
   @Test public void failsWithInvalidParameterConfiguration() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import butterknife.OnItemClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemClick(1) void doStuff(\n"
         + "    AdapterView<?> parent,\n"
         + "    View view,\n"
@@ -416,6 +413,6 @@
             + "    long\n"
             + "  \n"
             + "  These may be listed in any order but will be searched for from top to bottom.")
-        .in(source).onLine(7);
+        .in(source).onLine(6);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
index 3584b0f7..4f809dfc 100644
--- a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
@@ -12,9 +12,8 @@
   @Test public void itemLongClick() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnItemLongClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemLongClick(1) boolean doStuff() { return false; }\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
index 1a6fd281..05c5f249 100644
--- a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
+++ b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
@@ -13,9 +13,8 @@
   @Test public void defaultMethod() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnItemSelected;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnItemSelected(1) void doStuff() {}\n"
         + "}"
     );
@@ -71,10 +70,9 @@
   @Test public void nonDefaultMethod() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.OnItemSelected;"
         + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
         + "  void doStuff() {}"
         + "}"
@@ -131,10 +129,9 @@
   @Test public void allMethods() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.OnItemSelected;"
         + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @OnItemSelected(1)"
         + "  void onItemSelected() {}"
         + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
@@ -194,10 +191,9 @@
   @Test public void multipleBindingPermutation() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;"
-        + "import android.app.Activity;"
         + "import butterknife.OnItemSelected;"
         + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
-        + "public class Test extends Activity {"
+        + "public class Test {"
         + "  @OnItemSelected({ 1, 2 })"
         + "  void onItemSelected() {}"
         + "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)"
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
index fc324b46..0926b2f3 100644
--- a/butterknife/src/test/java/butterknife/OnLongClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -13,9 +13,8 @@
   @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnLongClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnLongClick(1) boolean doStuff() {\n"
         + "    return true;\n"
         + "  }\n"
@@ -69,9 +68,8 @@
   @Test public void failsIfMissingReturnType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnLongClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnLongClick(1)\n"
         + "  public void doStuff() {\n"
         + "  }\n"
@@ -83,6 +81,6 @@
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
index 0b0cd55f..a7c7590e 100644
--- a/butterknife/src/test/java/butterknife/OnPageChangeTest.java
+++ b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
@@ -12,9 +12,8 @@
   @Test public void pageChange() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnPageChange;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnPageChange(1) void doStuff() {}\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
index b9a18138..e1b75a68 100644
--- a/butterknife/src/test/java/butterknife/OnTextChangedTest.java
+++ b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
@@ -12,9 +12,8 @@
   @Test public void textChanged() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnTextChanged;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnTextChanged(1) void doStuff() {}\n"
         + "}"
     );
@@ -79,9 +78,8 @@
   @Test public void textChangedWithParameter() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
             + "package test;\n"
-            + "import android.app.Activity;\n"
             + "import butterknife.OnTextChanged;\n"
-            + "public class Test extends Activity {\n"
+            + "public class Test {\n"
             + "  @OnTextChanged(1) void doStuff(CharSequence p0) {}\n"
             + "}"
     );
@@ -146,9 +144,8 @@
   @Test public void textChangedWithParameters() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
             + "package test;\n"
-            + "import android.app.Activity;\n"
             + "import butterknife.OnTextChanged;\n"
-            + "public class Test extends Activity {\n"
+            + "public class Test {\n"
             + "  @OnTextChanged(1) void doStuff(CharSequence p0, int p1, int p2, int p3) {}\n"
             + "}"
     );
@@ -213,9 +210,8 @@
   @Test public void textChangedWithWrongParameter() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
             + "package test;\n"
-            + "import android.app.Activity;\n"
             + "import butterknife.OnTextChanged;\n"
-            + "public class Test extends Activity {\n"
+            + "public class Test {\n"
             + "  @OnTextChanged(1) void doStuff(String p0, int p1, int p2, int p3) {}\n"
             + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/OnTouchTest.java b/butterknife/src/test/java/butterknife/OnTouchTest.java
index ad0aee51..fe9b9eb7 100644
--- a/butterknife/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife/src/test/java/butterknife/OnTouchTest.java
@@ -12,9 +12,8 @@
   @Test public void touch() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnTouch;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnTouch(1) boolean doStuff() { return false; }\n"
         + "}"
     );
@@ -69,9 +68,8 @@
   @Test public void failsMultipleListenersWithReturnValue() throws Exception {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnTouch;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnTouch(1) boolean doStuff1() {}\n"
         + "  @OnTouch(1) boolean doStuff2() {}\n"
         + "}"
@@ -82,6 +80,6 @@
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
-        .in(source).onLine(6);
+        .in(source).onLine(5);
   }
 }
diff --git a/butterknife/src/test/java/butterknife/RClassTest.java b/butterknife/src/test/java/butterknife/RClassTest.java
index 8179e875..d03bede0 100644
--- a/butterknife/src/test/java/butterknife/RClassTest.java
+++ b/butterknife/src/test/java/butterknife/RClassTest.java
@@ -80,9 +80,8 @@
   @Test public void library() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindInt;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindInt(R2.integer.res) int one;\n"
         + "}"
     );
@@ -128,12 +127,208 @@
         .generatesSources(bindingSource);
   }
 
+  @Test public void issue779() {
+    JavaFileObject r2Bar = JavaFileObjects.forSourceString("test.bar.R2", ""
+        + "package test.bar;\n"
+        + "public final class R2 {\n"
+        + "  public static final class array {\n"
+        + "    public static final int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static final int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static final int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static final int res = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class string {\n"
+        + "    public static final int res = 0x7f040005;\n"
+        + "  }\n"
+        + "}");
+
+    JavaFileObject nonFinalRBar = JavaFileObjects.forSourceString("test.bar.R", ""
+        + "package test.bar;\n"
+        + "public final class R {\n"
+        + "  public static final class array {\n"
+        + "    public static int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static int res = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class styleable {\n"
+        + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject nonFinalRFoo = JavaFileObjects.forSourceString("test.foo.R", ""
+        + "package test.foo;\n"
+        + "public final class R {\n"
+        + "  public static final class array {\n"
+        + "    public static int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static int bogus = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class styleable {\n"
+        + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject r2Foo = JavaFileObjects.forSourceString("test.foo.R2", ""
+        + "package test.foo;\n"
+        + "public final class R2 {\n"
+        + "  public static final class array {\n"
+        + "    public static final int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static final int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static final int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static final int bogus = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class string {\n"
+        + "    public static final int res = 0x7f040005;\n"
+        + "  }\n"
+        + "}");
+
+    JavaFileObject fooSource = JavaFileObjects.forSourceString("test.foo.FooTest", ""
+        + "package test.foo;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class FooTest extends Activity {\n"
+        + "  @BindView(R2.id.bogus) View one;\n"
+        + "}"
+    );
+
+    JavaFileObject barSource = JavaFileObjects.forSourceString("test.bar.Test", ""
+        + "package test.bar;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(R2.id.res) CustomView one;\n"
+        + "}"
+    );
+
+    JavaFileObject customView = JavaFileObjects.forSourceString("test.bar.CustomView", ""
+        + "package test.bar;\n"
+        + "import android.view.View;\n"
+        + "import android.content.Context;\n"
+        + "public class CustomView extends View {\n"
+        + "  public CustomView(Context context) {\n"
+        + "    super(context);"
+        + "  }"
+        + "}"
+    );
+
+    JavaFileObject bindingSourceBar = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test.bar;\n\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredViewAsType(source, R.id.res, \"field 'one'\", " +
+        "CustomView.class);\n"
+        + "  }\n\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        +
+        "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n\n"
+        + "    target.one = null;\n\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSourceFoo = JavaFileObjects.forSourceString("test/FooTest_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test.foo;\n\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class FooTest_ViewBinding implements Unbinder {\n"
+        + "  private FooTest target;\n\n"
+        + "  @UiThread\n"
+        + "  public FooTest_ViewBinding(FooTest target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(FooTest target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, R.id.bogus, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    FooTest target = this.target;\n"
+        +
+        "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n\n"
+        + "    this.target = null;\n\n"
+        + "    target.one = null;\n\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(customView, fooSource, barSource, nonFinalRBar, nonFinalRFoo, r2Bar, r2Foo))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSourceBar);
+
+    assertAbout(javaSources())
+        .that(asList(customView, fooSource, barSource, nonFinalRBar, nonFinalRFoo, r2Bar, r2Foo))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSourceFoo);
+  }
+
   @Test public void app() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindBool;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindBool(R.bool.res) boolean bool;\n"
         + "}"
     );
@@ -182,9 +377,8 @@
   @Test public void compiledRClass() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.BindColor;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindColor(android.R.color.black) int black;\n"
         + "}"
     );
diff --git a/butterknife/src/test/java/butterknife/UnbinderTest.java b/butterknife/src/test/java/butterknife/UnbinderTest.java
index e5c09b26..ef0388fc 100644
--- a/butterknife/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife/src/test/java/butterknife/UnbinderTest.java
@@ -14,12 +14,11 @@
   @Test public void multipleBindings() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.OnClick;\n"
         + "import butterknife.OnLongClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @BindView(1) View view;\n"
         + "  @BindView(2) View view2;\n"
         + "  @OnClick(1) void doStuff() {}\n"
@@ -87,9 +86,8 @@
   @Test public void unbindingThroughAbstractChild() {
     JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
-        + "import android.app.Activity;\n"
         + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
+        + "public class Test {\n"
         + "  @OnClick(1) void doStuff1() { }\n"
         + "}"
     );
diff --git a/checkstyle.xml b/checkstyle.xml
index a91a2812..58522bd3 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -70,7 +70,7 @@
       <property name="max" value="100"/>
     </module>
     <!--<module name="MethodLength"/>-->
-    <module name="ParameterNumber"/>
+    <!--<module name="ParameterNumber"/>-->
 
 
     <!-- Checks for whitespace                               -->
diff --git a/gradle.properties b/gradle.properties
index e5b152e9..327dcd1c 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.4.1-SNAPSHOT
+VERSION_NAME=8.5.2-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a65e9c08..d8c2dae7 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Sep 19 21:26:00 PDT 2016
+#Thu Feb 23 11:00:51 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
