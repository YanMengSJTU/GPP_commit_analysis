diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
index 819e105d..8d8f6cb8 100755
--- a/.buildscript/deploy_snapshot.sh
+++ b/.buildscript/deploy_snapshot.sh
@@ -21,6 +21,6 @@ elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then
   echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'."
 else
   echo "Deploying snapshot..."
-  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true
+  ./gradlew uploadArchives
   echo "Snapshot deployed!"
 fi
diff --git a/.buildscript/settings.xml b/.buildscript/settings.xml
deleted file mode 100644
index 91f444b2..00000000
--- a/.buildscript/settings.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<settings>
-  <servers>
-    <server>
-      <id>sonatype-nexus-snapshots</id>
-      <username>${env.CI_DEPLOY_USERNAME}</username>
-      <password>${env.CI_DEPLOY_PASSWORD}</password>
-    </server>
-  </servers>
-</settings>
diff --git a/.gitignore b/.gitignore
index 133735f7..92007a21 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,10 +9,6 @@ build
 out
 lib
 
-target
-pom.xml.*
-release.properties
-
 .idea
 *.iml
 classes
@@ -20,3 +16,10 @@ classes
 obj
 
 .DS_Store
+
+# Gradle
+.gradle
+jniLibs
+build
+local.properties
+reports
diff --git a/.travis.yml b/.travis.yml
index da0572a8..3c35b6bf 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,8 +2,9 @@ language: android
 
 android:
   components:
-    - build-tools-20.0.0
-    - android-16
+    - build-tools-23.0.1
+    - android-23
+    - extra-android-m2repository
   licenses:
     - android-sdk-license-5be876d5
 
@@ -16,8 +17,8 @@ after_success:
 
 env:
   global:
-    - secure: "WGiRUh1V4AWwBsCvMjjxYih+HiyOjlMS9Tz5UqxPVl7h6FccKDQmAaWVB46iwteZsgDQZBJNO+9gDrsUYuOQNW4XLSIEYdPoQAvRbBi+ExhaC/m3imsumw+SJd95MYePE2Z4UD5D4AUQi+QT/LnaVYps1n+IrGat8cSzC9Nhz6A="
-    - secure: "PQFQlep/9TwKicd4PkAS2sB7WqeRyVP8ZQF5sPnyFCHpLrqYQmKOYXaNnxqAlBoJ+UOGYxfKxFcDp7jE/jSaTTDx+zPoG/eVt6X0wq65Qq2t/Mw2b9dPzHF/MYLDRag4D/g4YF59xg6gdP5jFojr7D58ZePmp+EOcBDOFduf+Nk="
+    - secure: "ESbreW4FNMPQhV1zbFb9iBvhFWFbVHecaig3Si3+4nrJCMn9x4nqB18ZcU+Aviw67WQNcuSH4I0Hl08uknl+kzE/xKEfPLmu28bptXRCSued49aL11i2aQmRj5nqP2yxkinhtRGOQxzIo56NmFt7sIcEXODM3D5a6q7s9tlvPfw="
+    - secure: "JWEeqx0CWBqAkjcREHUg3Ei8wxqp59HZag8EidSLwmekgPJQwipwuEeXMZyPCGJCP+4ijUirtS/hRApi37BW0LYdt+XR7dI1TSZ0HFLTLqSPfWfsUcjmGpmoqVUv8FLVhC+KA42YeEhqkEaCUW92gJeAyK8swxDqGHAPT/sfKRA="
 
 branches:
   except:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index b83b766f..2fd857cc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,31 @@
 Change Log
 ==========
 
+Version 7.0.1 *(2015-06-30)*
+----------------------------
+
+ * Fix: Correct `ClassCastException` which occurred when `@Nullable` array bindings had missing views.
+
+
+Version 7.0.0 *(2015-06-27)*
+----------------------------
+
+ * `@Bind` replaces `@InjectView` and `@InjectViews`.
+ * `ButterKnife.bind` and `ButterKnife.unbind` replaces `ButterKnife.inject` and `ButterKnife.reset`, respectively.
+ * `@Optional` has been removed. Use `@Nullable` from the 'support-annotations' library, or any other annotation
+   named "Nullable".
+ * New: Resource binding annotations!
+   * `@BindBool` binds an `R.bool` ID to a `boolean` field.
+   * `@BindColor` binds an `R.color` ID to an `int` or `ColorStateList` field.
+   * `@BindDimen` binds an `R.dimen` ID to an `int` (for pixel size) or `float` (for exact value) field.
+   * `@BindDrawable` binds an `R.drawable` ID to a `Drawable` field.
+   * `@BindInt` binds an `R.int` ID to an `int` field.
+   * `@BindString` binds an `R.string` ID to a `String` field.
+ * Fix: Missing views will be filtered out from list and array bindings.
+ * Note: If you are using Proguard, the generated class name has changed from being suffixed with `$$ViewInjector`
+   to `$$ViewBinder`.
+
+
 Version 6.1.0 *(2015-01-29)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 5f824767..714ba68d 100644
--- a/README.md
+++ b/README.md
@@ -3,18 +3,22 @@ Butter Knife
 
 ![Logo](website/static/logo.png)
 
-View "injection" library for Android which uses annotation processing to generate boilerplate code
-for you.
+Field and method binding for Android views which uses annotation processing to generate boilerplate
+code for you.
 
- * Eliminate `findViewById` calls by using `@InjectView` on fields.
- * Group multiple views in a list using `@InjectViews`. Operate on all of them at once with actions,
+ * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
+ * Eliminate resource lookups by using resource annotations on fields.
 
 ```java
 class ExampleActivity extends Activity {
-  @InjectView(R.id.user) EditText username;
-  @InjectView(R.id.pass) EditText password;
+  @Bind(R.id.user) EditText username;
+  @Bind(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error)
+  String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -23,8 +27,8 @@ class ExampleActivity extends Activity {
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }
 ```
@@ -43,12 +47,49 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.jakewharton</groupId>
   <artifactId>butterknife</artifactId>
-  <version>6.1.0</version>
+  <version>7.0.1</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.jakewharton:butterknife:6.1.0'
+compile 'com.jakewharton:butterknife:7.0.1'
+```
+
+For the SNAPSHOT version:
+```xml
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife</artifactId>
+  <version>8.0.0-SNAPSHOT</version>
+</dependency>
+<dependency>
+  <groupId>com.jakewharton</groupId>
+  <artifactId>butterknife-compiler</artifactId>
+  <version>8.0.0-SNAPSHOT</version>
+  <optional>true</optional>
+</dependency>
+```
+or Gradle:
+```groovy
+buildscript {
+  dependencies {
+    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+  }
+}
+
+allprojects {
+  repositories {
+    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
+  }
+}
+```
+```groovy
+apply plugin: 'com.neenbedankt.android-apt'
+
+dependencies {
+  compile 'com.jakewharton:butterknife:8.0.0-SNAPSHOT'
+  apt 'com.jakewharton:butterknife-compiler:8.0.0-SNAPSHOT'
+}
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 00000000..16704f1f
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,63 @@
+subprojects { project ->
+  group = GROUP
+  version = VERSION_NAME
+
+  repositories {
+    mavenCentral()
+  }
+
+  apply plugin: 'checkstyle'
+
+  task checkstyle(type: Checkstyle) {
+    configFile rootProject.file('checkstyle.xml')
+    source 'src/main/java'
+    ignoreFailures false
+    showViolations true
+    include '**/*.java'
+
+    classpath = files()
+  }
+
+  afterEvaluate {
+    if (project.tasks.findByName('check')) {
+      check.dependsOn('checkstyle')
+    }
+  }
+
+  buildscript {
+    repositories {
+      mavenCentral()
+    }
+    dependencies {
+      classpath 'com.android.tools.build:gradle:1.3.1'
+      classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+    }
+  }
+}
+
+ext {
+  minSdkVersion = 8
+  targetSdkVersion = 23
+  compileSdkVersion = 23
+  buildToolsVersion = '23.0.1'
+  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
+  targetCompatibilityVersion = JavaVersion.VERSION_1_7
+}
+
+ext.deps = [
+    // Android
+    android: 'com.google.android:android:2.1.2',
+    supportv4: 'com.android.support:support-v4:23.0.1',
+    supportAnnotations: 'com.android.support:support-annotations:23.0.1',
+
+    // Square
+    javapoet: 'com.squareup:javapoet:1.4.0',
+
+    // Test dependencies
+    junit: 'junit:junit:4.12',
+    truth: 'com.google.truth:truth:0.27',
+    robolectric: 'org.robolectric:robolectric:2.2',
+    compiletesting: 'com.google.testing.compile:compile-testing:0.7',
+    autoservice: 'com.google.auto.service:auto-service:1.0-rc2',
+    autocommon: 'com.google.auto:auto-common:0.4'
+]
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
new file mode 100644
index 00000000..b7955fe6
--- /dev/null
+++ b/butterknife-annotations/build.gradle
@@ -0,0 +1,30 @@
+apply plugin: 'java'
+apply plugin: 'checkstyle'
+
+def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
+def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
+for (File file : sdkHandler.sdkLoader.repositories) {
+  repositories.maven {
+    url = file.toURI()
+  }
+}
+
+targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_7
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+}
+
+configurations {
+  provided
+  compile.extendsFrom provided
+}
+
+dependencies {
+  provided deps.android
+  compile deps.supportAnnotations
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/gradle.properties b/butterknife-annotations/gradle.properties
new file mode 100644
index 00000000..11d49ada
--- /dev/null
+++ b/butterknife-annotations/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Annotations
+POM_ARTIFACT_ID=butterknife-annotations
+POM_PACKAGING=jar
diff --git a/butterknife/src/main/java/butterknife/InjectView.java b/butterknife-annotations/src/main/java/butterknife/Bind.java
similarity index 76%
rename from butterknife/src/main/java/butterknife/InjectView.java
rename to butterknife-annotations/src/main/java/butterknife/Bind.java
index 011a2405..82454a7a 100644
--- a/butterknife/src/main/java/butterknife/InjectView.java
+++ b/butterknife-annotations/src/main/java/butterknife/Bind.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,13 +11,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}InjectView(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) TextView title;
  * </code></pre>
- *
- * @see Nullable
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface InjectView {
+public @interface Bind {
   /** View ID to which the field will be bound. */
-  int value();
+  @IdRes int[] value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindArray.java b/butterknife-annotations/src/main/java/butterknife/BindArray.java
new file mode 100644
index 00000000..b2f7be27
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java
@@ -0,0 +1,38 @@
+package butterknife;
+
+import android.support.annotation.ArrayRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified array resource ID. The type of array will be inferred from the
+ * annotated element.
+ *
+ * String array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.countries) String[] countries;
+ * </code></pre>
+ *
+ * Int array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.phones) int[] phones;
+ * </code></pre>
+ *
+ * Text array:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * </code></pre>
+ *
+ * {@link android.content.res.TypedArray}:
+ * <pre><code>
+ * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindArray {
+  /** Array resource ID to which the field will be bound. */
+  @ArrayRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
new file mode 100644
index 00000000..e12be465
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import android.graphics.Bitmap;
+import android.support.annotation.DrawableRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBitmap {
+  /** Drawable resource ID from which the {@link Bitmap} will be created. */
+  @DrawableRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBool.java b/butterknife-annotations/src/main/java/butterknife/BindBool.java
new file mode 100644
index 00000000..89112ac8
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import android.support.annotation.BoolRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified boolean resource ID.
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindBool {
+  /** Boolean resource ID to which the field will be bound. */
+  @BoolRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindColor.java b/butterknife-annotations/src/main/java/butterknife/BindColor.java
new file mode 100644
index 00000000..002616e3
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java
@@ -0,0 +1,22 @@
+package butterknife;
+
+import android.support.annotation.ColorRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified color resource ID. Type can be {@code int} or
+ * {@link android.content.res.ColorStateList}.
+ * <pre><code>
+ * {@literal @}BindColor(R.color.background_green) int green;
+ * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindColor {
+  /** Color resource ID to which the field will be bound. */
+  @ColorRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDimen.java b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
new file mode 100644
index 00000000..172871f8
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
@@ -0,0 +1,22 @@
+package butterknife;
+
+import android.support.annotation.DimenRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
+ * {@code float} for exact amount.
+ * <pre><code>
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDimen {
+  /** Dimension resource ID to which the field will be bound. */
+  @DimenRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
new file mode 100644
index 00000000..a30d20dd
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import android.support.annotation.AttrRes;
+import android.support.annotation.DrawableRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified drawable resource ID.
+ * <pre><code>
+ * {@literal @}BindDrawable(R.drawable.placeholder)
+ * Drawable placeholder;
+ * {@literal @}BindDrawable(value = R.drawable.placeholder, tint = R.attr.colorAccent)
+ * Drawable tintedPlaceholder;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindDrawable {
+  /** Drawable resource ID to which the field will be bound. */
+  @DrawableRes int value();
+
+  /** Color attribute resource ID that is used to tint the drawable. */
+  @AttrRes int tint() default 0;
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindInt.java b/butterknife-annotations/src/main/java/butterknife/BindInt.java
new file mode 100644
index 00000000..7c683548
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import android.support.annotation.IntegerRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified integer resource ID.
+ * <pre><code>
+ * {@literal @}BindInt(R.int.columns) int columns;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindInt {
+  /** Integer resource ID to which the field will be bound. */
+  @IntegerRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindString.java b/butterknife-annotations/src/main/java/butterknife/BindString.java
new file mode 100644
index 00000000..ff82aa99
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java
@@ -0,0 +1,20 @@
+package butterknife;
+
+import android.support.annotation.StringRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified string resource ID.
+ * <pre><code>
+ * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindString {
+  /** String resource ID to which the field will be bound. */
+  @StringRes int value();
+}
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
similarity index 88%
rename from butterknife/src/main/java/butterknife/OnCheckedChanged.java
rename to butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index 8017394d..b590a037 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,7 +16,7 @@
  * each ID specified.
  * <pre><code>
  * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
- *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -23,7 +24,6 @@
  * onCheckedChanged} may be used on the method.
  *
  * @see OnCheckedChangeListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -41,5 +41,5 @@
 )
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
similarity index 87%
rename from butterknife/src/main/java/butterknife/OnClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnClick.java
index 7447c909..3671a751 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -14,7 +15,7 @@
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnClick(R.id.example) void onClick() {
- *   Toast.makeText(this, "Clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -22,7 +23,6 @@
  * method.
  *
  * @see OnClickListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -37,5 +37,5 @@
 )
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
similarity index 89%
rename from butterknife/src/main/java/butterknife/OnEditorAction.java
rename to butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 1ef89c14..6c02f264 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,7 +16,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
- *   Toast.makeText(this, "Pressed: " + key, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Pressed: " + key, Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -24,7 +25,6 @@
  * onEditorAction} may be used on the method.
  *
  * @see OnEditorActionListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -45,5 +45,5 @@
 )
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
similarity index 91%
rename from butterknife/src/main/java/butterknife/OnFocusChange.java
rename to butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index f07dd253..88c55425 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,14 +16,13 @@
  * specified.
  * <pre><code>
  * {@literal @}OnFocusChange(R.id.example) void onFocusChanged(boolean focused) {
- *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", LENGTH_SHORT).show();
+ *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnFocusChangeListener#onFocusChange(android.view.View,
  * boolean) onFocusChange} may be used on the method.
  *
  * @see OnFocusChangeListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -40,5 +40,5 @@
 )
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/OnItemClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index a7145d43..1c20ff30 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,14 +16,13 @@
  * specified.
  * <pre><code>
  * {@literal @}OnItemClick(R.id.example_list) void onItemClick(int position) {
- *   Toast.makeText(this, "Clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link OnItemClickListener#onItemClick(android.widget.AdapterView,
  * android.view.View, int, long) onItemClick} may be used on the method.
  *
  * @see OnItemClickListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -42,5 +42,5 @@
 )
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/OnItemLongClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index 4b297596..afc49b72 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,7 +16,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemLongClick(R.id.example_list) boolean onItemLongClick(int position) {
- *   Toast.makeText(this, "Long clicked position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -24,7 +25,6 @@
  * int, long) onItemLongClick} may be used on the method.
  *
  * @see OnItemLongClickListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -46,5 +46,5 @@
 )
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
similarity index 92%
rename from butterknife/src/main/java/butterknife/OnItemSelected.java
rename to butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
index a74cd09d..500a8db1 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,7 +16,7 @@
  * ID specified.
  * <pre><code>
  * {@literal @}OnItemSelected(R.id.example_list) void onItemSelected(int position) {
- *   Toast.makeText(this, "Selected position " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from
@@ -26,12 +27,11 @@
  * <pre><code>
  * {@literal @}OnItemSelected(value = R.id.example_list, callback = NOTHING_SELECTED)
  * void onNothingSelected() {
- *   Toast.makeText(this, "Nothing selected!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Nothing selected!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
  * @see OnItemSelectedListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -43,7 +43,7 @@
 )
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
similarity index 88%
rename from butterknife/src/main/java/butterknife/OnLongClick.java
rename to butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index b4efda8b..9cc1c9f3 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -15,7 +16,7 @@
  * specified.
  * <pre><code>
  * {@literal @}OnLongClick(R.id.example) boolean onLongClick() {
- *   Toast.makeText(this, "Long clicked!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Long clicked!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
@@ -23,7 +24,6 @@
  * used on the method.
  *
  * @see OnLongClickListener
- * @see Nullable
  */
 @Retention(CLASS) @Target(METHOD)
 @ListenerClass(
@@ -41,5 +41,5 @@
 )
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
similarity index 88%
rename from butterknife/src/main/java/butterknife/OnPageChange.java
rename to butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index f8b3c1ba..7dc81b42 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -13,7 +14,7 @@
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnPageChange(R.id.example_pager) void onPageSelected(int position) {
- *   Toast.makeText(this, "Selected " + position + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Selected " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@code onPageSelected} may be used on the method.
@@ -22,11 +23,9 @@
  * <pre><code>
  * {@literal @}OnPageChange(value = R.id.example_pager, callback = PAGE_SCROLL_STATE_CHANGED)
  * void onPageStateChanged(int state) {
- *   Toast.makeText(this, "State changed: " + state + "!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "State changed: " + state + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
- *
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -38,7 +37,7 @@
 )
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
similarity index 90%
rename from butterknife/src/main/java/butterknife/OnTextChanged.java
rename to butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index f9423ab3..5669ba6f 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.text.TextWatcher;
 import android.view.View;
 import butterknife.internal.ListenerClass;
@@ -14,7 +15,7 @@
  * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  * Any number of parameters from {@link TextWatcher#onTextChanged(CharSequence, int, int, int)
@@ -24,12 +25,11 @@
  * <pre><code>
  * {@literal @}OnTextChanged(value = R.id.example, callback = BEFORE_TEXT_CHANGED)
  * void onBeforeTextChanged(CharSequence text) {
- *   Toast.makeText(this, "Before text changed: " + text, LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Before text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
  *
  * @see TextWatcher
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -41,7 +41,7 @@
 )
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
similarity index 89%
rename from butterknife/src/main/java/butterknife/OnTouch.java
rename to butterknife-annotations/src/main/java/butterknife/OnTouch.java
index 93e475a0..dc4b69e7 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -1,5 +1,6 @@
 package butterknife;
 
+import android.support.annotation.IdRes;
 import android.view.View;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
@@ -14,7 +15,7 @@
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTouch(R.id.example) boolean onTouch() {
- *   Toast.makeText(this, "Touched!", LENGTH_SHORT).show();
+ *   Toast.makeText(this, "Touched!", Toast.LENGTH_SHORT).show();
  *   return false;
  * }
  * </code></pre>
@@ -23,7 +24,6 @@
  * on the method.
  *
  * @see OnTouchListener
- * @see Nullable
  */
 @Target(METHOD)
 @Retention(CLASS)
@@ -43,5 +43,5 @@
 )
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
-  int[] value() default { View.NO_ID };
+  @IdRes int[] value() default { View.NO_ID };
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/Optional.java b/butterknife-annotations/src/main/java/butterknife/Optional.java
new file mode 100644
index 00000000..c525a26a
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/Optional.java
@@ -0,0 +1,17 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Denote that the view specified by the injection is not required to be present.
+ * <pre><code>
+ * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(METHOD)
+public @interface Optional {
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/Unbinder.java b/butterknife-annotations/src/main/java/butterknife/Unbinder.java
new file mode 100644
index 00000000..1bb9a617
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/Unbinder.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a target field to an un-binder instance. Use when binding in a fragment to clear view
+ * references in the {@code onDestroyView} callback.
+ * <pre><code>
+ * {@literal @}Unbinder ButterKnife.Unbinder unbinder;
+ * </code></pre>
+ */
+@Retention(CLASS)
+@Target(FIELD)
+public @interface Unbinder {
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
similarity index 88%
rename from butterknife/src/main/java/butterknife/internal/ListenerClass.java
rename to butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index 1c992c2f..82101cc5 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -16,9 +16,6 @@
   /** Fully-qualified class name of the listener type. */
   String type();
 
-  /** The number of generic arguments for the type. This used used for casting the view. */
-  int genericArguments() default 0;
-
   /** Enum which declares the listener callback methods. Mutually exclusive to {@link #method()}. */
   Class<? extends Enum<?>> callbacks() default NONE.class;
 
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
similarity index 91%
rename from butterknife/src/main/java/butterknife/internal/ListenerMethod.java
rename to butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
index 31ab24f0..ca62d675 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerMethod.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java
@@ -14,7 +14,7 @@
   /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
   String[] parameters() default { };
 
-  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  /** Primitive or fully-qualified return type of the listener method. May also be {@code void}. */
   String returnType() default "void";
 
   /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
new file mode 100644
index 00000000..85d2bd78
--- /dev/null
+++ b/butterknife-compiler/build.gradle
@@ -0,0 +1,32 @@
+apply plugin: 'java'
+apply plugin: 'checkstyle'
+
+def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
+def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
+for (File file : sdkHandler.sdkLoader.repositories) {
+  repositories.maven {
+    url = file.toURI()
+  }
+}
+
+dependencies {
+  compile project(':butterknife-annotations')
+  compile deps.autoservice
+  compile deps.autocommon
+  compile deps.javapoet
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+  testCompile deps.compiletesting
+  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+}
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+  //Remove this when tests are less verbose, i.e. using JavaPoet
+  sourceSets = [sourceSets.main]
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-compiler/gradle.properties b/butterknife-compiler/gradle.properties
new file mode 100644
index 00000000..ae693e1b
--- /dev/null
+++ b/butterknife-compiler/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Compiler
+POM_ARTIFACT_ID=butterknife-compiler
+POM_PACKAGING=jar
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
new file mode 100644
index 00000000..367c04cf
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
@@ -0,0 +1,631 @@
+package butterknife.compiler;
+
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.TypeVariableName;
+import com.squareup.javapoet.WildcardTypeName;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static butterknife.compiler.ButterKnifeProcessor.NO_ID;
+import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static java.util.Collections.singletonList;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PROTECTED;
+import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
+
+final class BindingClass {
+  private static final ClassName FINDER = ClassName.get("butterknife.internal", "Finder");
+  private static final ClassName VIEW_BINDER = ClassName.get("butterknife.internal", "ViewBinder");
+  private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
+  private static final ClassName VIEW = ClassName.get("android.view", "View");
+  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
+  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
+  private static final ClassName THEME = RESOURCES.nestedClass("Theme");
+  private static final ClassName UNBINDER =
+      ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");
+  private static final ClassName BITMAP_FACTORY =
+      ClassName.get("android.graphics", "BitmapFactory");
+
+  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
+  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();
+  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
+  private final String classPackage;
+  private final String className;
+  private final String targetClass;
+  private String parentViewBinder;
+  private UnbinderBinding unbinderBinding;
+  private String parentUnbinder;
+
+  BindingClass(String classPackage, String className, String targetClass) {
+    this.classPackage = classPackage;
+    this.className = className;
+    this.targetClass = targetClass;
+  }
+
+  void requiresUnbinder(String unbinderFieldName) {
+    unbinderBinding = new UnbinderBinding(classPackage, className, unbinderFieldName);
+  }
+
+  void addBitmap(FieldBitmapBinding binding) {
+    bitmapBindings.add(binding);
+  }
+
+  void addDrawable(FieldDrawableBinding binding) {
+    drawableBindings.add(binding);
+  }
+
+  void addField(int id, FieldViewBinding binding) {
+    getOrCreateViewBindings(id).addFieldBinding(binding);
+  }
+
+  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
+    collectionBindings.put(binding, ids);
+  }
+
+  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    ViewBindings viewBindings = getOrCreateViewBindings(id);
+    if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+      return false;
+    }
+    viewBindings.addMethodBinding(listener, method, binding);
+    return true;
+  }
+
+  void addResource(FieldResourceBinding binding) {
+    resourceBindings.add(binding);
+  }
+
+  void setParentViewBinder(String parentViewBinder) {
+    this.parentViewBinder = parentViewBinder;
+  }
+
+  void setParentUnbinder(String parentUnbinder) {
+    this.parentUnbinder = parentUnbinder;
+  }
+
+  String getParentUnbinder() {
+    return parentUnbinder;
+  }
+
+  ViewBindings getViewBinding(int id) {
+    return viewIdMap.get(id);
+  }
+
+  private ViewBindings getOrCreateViewBindings(int id) {
+    ViewBindings viewId = viewIdMap.get(id);
+    if (viewId == null) {
+      viewId = new ViewBindings(id);
+      viewIdMap.put(id, viewId);
+    }
+    return viewId;
+  }
+
+  JavaFile brewJava() {
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC)
+        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+
+    if (parentViewBinder != null) {
+      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
+          TypeVariableName.get("T")));
+    } else {
+      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));
+    }
+
+    result.addMethod(createBindMethod());
+
+    if (hasUnbinder()) {
+      // Create unbinding class.
+      result.addType(createUnbinderClass());
+      // Now we need to provide child classes to access and override unbinder implementations.
+      createUnbinderInternalAccessMethods(result);
+    }
+
+    return JavaFile.builder(classPackage, result.build())
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
+  }
+
+  private TypeSpec createUnbinderClass() {
+    TypeName generic = TypeVariableName.get("T");
+    TypeSpec.Builder result =
+        TypeSpec.classBuilder(unbinderBinding.getUnbinderClassName().simpleName())
+        .addModifiers(PUBLIC, STATIC)
+        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
+
+    if (parentUnbinder != null) {
+      result.superclass(ParameterizedTypeName.get(
+          ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),
+          generic));
+    } else {
+      result.addSuperinterface(ParameterizedTypeName.get(UNBINDER, generic));
+      result.addField(generic, "target", PRIVATE);
+    }
+
+    result.addMethod(createUnbinderConstructor(generic));
+    if (parentUnbinder == null) {
+      result.addMethod(createUnbindInterfaceMethod());
+    }
+    result.addMethod(createUnbindMethod(result, generic));
+
+    return result.build();
+  }
+
+  private MethodSpec createUnbinderConstructor(TypeName targetType) {
+    MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
+        .addModifiers(PROTECTED)
+        .addParameter(targetType, "target");
+    if (parentUnbinder != null) {
+      constructor.addStatement("super(target)");
+    } else {
+      constructor.addStatement("this.$1N = $1N", "target");
+    }
+    return constructor.build();
+  }
+
+  private MethodSpec createUnbindInterfaceMethod() {
+    return MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC, FINAL)
+        .addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
+            "Bindings already cleared.")
+        .addStatement("unbind(target)")
+        .addStatement("target = null")
+        .build();
+  }
+
+  private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName targetType) {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addModifiers(PROTECTED)
+        .addParameter(targetType, "target");
+
+    if (parentUnbinder != null) {
+      result.addAnnotation(Override.class);
+      result.addStatement("super.unbind(target)");
+    }
+
+    for (ViewBindings bindings : viewIdMap.values()) {
+      addFieldAndUnbindStatement(unbinderClass, result, bindings);
+      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
+        result.addStatement("target.$L = null", fieldBinding.getName());
+      }
+    }
+
+    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
+      result.addStatement("target.$L = null", fieldCollectionBinding.getName());
+    }
+
+    if (unbinderBinding.getUnbinderFieldName() != null) {
+      result.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());
+    }
+
+    return result.build();
+  }
+
+  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
+      ViewBindings bindings) {
+    // Only add fields to the unbinder if there are method bindings.
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // Using view id for name uniqueness.
+    String fieldName = "view" + bindings.getId();
+    result.addField(VIEW, fieldName);
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      unbindMethod.beginControlFlow("if ($L != null)", fieldName);
+    }
+
+    for (ListenerClass listenerClass : classMethodBindings.keySet()) {
+      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
+        unbindMethod.addStatement("(($T) $L).$L(null)", bestGuess(listenerClass.targetType()),
+            fieldName, listenerClass.setter());
+      } else {
+        unbindMethod.addStatement("$L.$L(null)", fieldName, listenerClass.setter());
+      }
+    }
+
+    if (needsNullChecked) {
+      unbindMethod.endControlFlow();
+    }
+  }
+
+  private void createUnbinderInternalAccessMethods(TypeSpec.Builder viewBindingClass) {
+    // Create type variable <U extends Unbinder<T>>.
+    ClassName unbinderClassName;
+    if (parentUnbinder != null) {
+      unbinderClassName = ClassName.bestGuess(parentUnbinder);
+    } else {
+      unbinderClassName = unbinderBinding.getUnbinderClassName();
+    }
+    TypeVariableName returnType = TypeVariableName.get("U", ParameterizedTypeName.get(
+        unbinderClassName, TypeVariableName.get("T")));
+
+    // We are casting inside the access methods.
+    AnnotationSpec suppressWarnign = AnnotationSpec.builder(SuppressWarnings.class)
+        .addMember("value", "\"unchecked\"")
+        .build();
+
+    MethodSpec.Builder createUnbinder = MethodSpec.methodBuilder("createUnbinder")
+        .addAnnotation(suppressWarnign)
+        .addModifiers(PROTECTED)
+        .addTypeVariable(returnType)
+        .returns(returnType)
+        .addParameter(TypeVariableName.get("T"), "target")
+        .addStatement("return ($T) new $T($L)", returnType, unbinderBinding.getUnbinderClassName(),
+            "target");
+
+    if (parentUnbinder != null) {
+      createUnbinder.addAnnotation(Override.class);
+    }
+    viewBindingClass.addMethod(createUnbinder.build());
+
+    // This method makes sense only if we actually have an unbinder requested.
+    if (unbinderBinding.getUnbinderFieldName() != null) {
+      MethodSpec.Builder accessMethod = MethodSpec.methodBuilder("accessUnbinder")
+          .addAnnotation(suppressWarnign)
+          .addModifiers(PROTECTED)
+          .addTypeVariable(returnType)
+          .returns(returnType)
+          .addParameter(TypeVariableName.get("T"), "target")
+          .addStatement("return ($T) target.$L", returnType,
+              unbinderBinding.getUnbinderFieldName());
+
+      if (parentUnbinder != null) {
+        accessMethod.addAnnotation(Override.class);
+      }
+      viewBindingClass.addMethod(accessMethod.build());
+    }
+  }
+
+  private MethodSpec createBindMethod() {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC)
+        .addParameter(FINDER, "finder", FINAL)
+        .addParameter(TypeVariableName.get("T"), "target", FINAL)
+        .addParameter(Object.class, "source");
+
+    if (hasResourceBindings()) {
+      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
+      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
+          .addMember("value", "$S", "ResourceType")
+          .build());
+    }
+
+    // Emit a call to the superclass binder, if any.
+    if (parentViewBinder != null) {
+      result.addStatement("super.bind(finder, target, source)");
+    }
+
+    // If the caller requested an unbinder, we need to create an instance of it.
+    if (hasUnbinder()) {
+      final String statment;
+      if (parentUnbinder != null) {
+        // Explicitly call super in case this class has child's as well.
+        statment = "$T unbinder = super.accessUnbinder($N)";
+      } else {
+        statment = "$T unbinder = createUnbinder($N)";
+      }
+      result.addStatement(statment, unbinderBinding.getUnbinderClassName(), "target");
+    }
+
+    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
+      // Local variable in which all views will be temporarily stored.
+      result.addStatement("$T view", VIEW);
+
+      // Loop over each view bindings and emit it.
+      for (ViewBindings bindings : viewIdMap.values()) {
+        addViewBindings(result, bindings);
+      }
+
+      // Loop over each collection binding and emit it.
+      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+        emitCollectionBinding(result, entry.getKey(), entry.getValue());
+      }
+    }
+
+    // Bind unbinder if was requested.
+    if (hasUnbinder() && unbinderBinding.getUnbinderFieldName() != null) {
+      result.addStatement("target.$L = unbinder", unbinderBinding.getUnbinderFieldName());
+    }
+
+    if (hasResourceBindings()) {
+      if (hasResourceBindingsNeedingTheme()) {
+        result.addStatement("$T context = finder.getContext(source)", CONTEXT);
+        result.addStatement("$T res = context.getResources()", RESOURCES);
+        result.addStatement("$T theme = context.getTheme()", THEME);
+      } else {
+        result.addStatement("$T res = finder.getContext(source).getResources()", RESOURCES);
+      }
+
+      for (FieldBitmapBinding binding : bitmapBindings) {
+        result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
+            BITMAP_FACTORY, binding.getId());
+      }
+
+      for (FieldDrawableBinding binding : drawableBindings) {
+        int tintAttributeId = binding.getTintAttributeId();
+        if (tintAttributeId != 0) {
+          result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",
+              binding.getName(), UTILS, binding.getId(), tintAttributeId);
+        } else {
+          result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),
+              UTILS, binding.getId());
+        }
+      }
+
+      for (FieldResourceBinding binding : resourceBindings) {
+        // TODO being themeable is poor correlation to the need to use Utils.
+        if (binding.isThemeable()) {
+          result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),
+              UTILS, binding.getMethod(), binding.getId());
+        } else {
+          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
+              binding.getId());
+        }
+      }
+    }
+
+    return result.build();
+  }
+
+  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
+      int[] ids) {
+    String ofName;
+    switch (binding.getKind()) {
+      case ARRAY:
+        ofName = "arrayOf";
+        break;
+      case LIST:
+        ofName = "listOf";
+        break;
+      default:
+        throw new IllegalStateException("Unknown kind: " + binding.getKind());
+    }
+
+    CodeBlock.Builder builder = CodeBlock.builder();
+    for (int i = 0; i < ids.length; i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
+      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],
+          asHumanDescription(singletonList(binding)));
+    }
+
+    result.addStatement("target.$L = $T.$L($L)", binding.getName(), UTILS, ofName, builder.build());
+  }
+
+  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
+    if (requiredViewBindings.isEmpty()) {
+      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
+    } else {
+      if (bindings.getId() == NO_ID) {
+        result.addStatement("view = target");
+      } else {
+        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
+            asHumanDescription(requiredViewBindings));
+      }
+    }
+
+    addFieldBindings(result, bindings);
+    addMethodBindings(result, bindings);
+  }
+
+  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.requiresCast()) {
+        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
+            bindings.getId(), asHumanDescription(fieldBindings));
+      } else {
+        result.addStatement("target.$L = view", fieldBinding.getName());
+      }
+    }
+  }
+
+  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      result.beginControlFlow("if (view != null)");
+    }
+
+    // Add the view reference to the unbinder.
+    if (hasUnbinder()) {
+      result.addStatement("unbinder.$L = view", "view" + bindings.getId());
+    }
+
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
+        : classMethodBindings.entrySet()) {
+      ListenerClass listener = e.getKey();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
+
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
+
+      for (ListenerMethod method : getListenerMethods(listener)) {
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
+        String[] parameterTypes = method.parameters();
+        for (int i = 0, count = parameterTypes.length; i < count; i++) {
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+        }
+
+        boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
+        if (hasReturnType) {
+          builder.add("return ");
+        }
+
+        if (methodBindings.containsKey(method)) {
+          for (MethodViewBinding binding : methodBindings.get(method)) {
+            builder.add("target.$L(", binding.getName());
+            List<Parameter> parameters = binding.getParameters();
+            String[] listenerParameters = method.parameters();
+            for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
+              Parameter parameter = parameters.get(i);
+              int listenerPosition = parameter.getListenerPosition();
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),
+                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
+              } else {
+                builder.add("p$L", listenerPosition);
+              }
+            }
+            builder.add(");\n");
+          }
+        } else if (hasReturnType) {
+          builder.add("$L;\n", method.defaultReturn());
+        }
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
+      }
+
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) view).$L($L)", bestGuess(listener.targetType()),
+            listener.setter(), callback.build());
+      } else {
+        result.addStatement("view.$L($L)", listener.setter(), callback.build());
+      }
+    }
+
+    if (needsNullChecked) {
+      result.endControlFlow();
+    }
+  }
+
+  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
+    Iterator<? extends ViewBinding> iterator = bindings.iterator();
+    switch (bindings.size()) {
+      case 1:
+        return iterator.next().getDescription();
+      case 2:
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
+      default:
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          if (i != 0) {
+            builder.append(", ");
+          }
+          if (i == count - 1) {
+            builder.append("and ");
+          }
+          builder.append(iterator.next().getDescription());
+        }
+        return builder.toString();
+    }
+  }
+
+  static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
+    }
+  }
+
+  boolean hasUnbinder() {
+    return unbinderBinding != null;
+  }
+
+  private boolean hasResourceBindings() {
+    return !(bitmapBindings.isEmpty() && drawableBindings.isEmpty() && resourceBindings.isEmpty());
+  }
+
+  private boolean hasResourceBindingsNeedingTheme() {
+    if (!drawableBindings.isEmpty()) {
+      return true;
+    }
+    for (FieldResourceBinding resourceBinding : resourceBindings) {
+      if (resourceBinding.isThemeable()) {
+        return true;
+      }
+    }
+    return false;
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
new file mode 100644
index 00000000..91e6fb08
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -0,0 +1,1186 @@
+package butterknife.compiler;
+
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import com.google.auto.common.SuperficialValidation;
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.TypeName;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import static javax.lang.model.element.ElementKind.CLASS;
+import static javax.lang.model.element.ElementKind.INTERFACE;
+import static javax.lang.model.element.ElementKind.METHOD;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.STATIC;
+import static javax.tools.Diagnostic.Kind.ERROR;
+
+@AutoService(Processor.class)
+public final class ButterKnifeProcessor extends AbstractProcessor {
+  static final int NO_ID = -1;
+  static final String VIEW_TYPE = "android.view.View";
+  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
+  private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
+  private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
+  private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
+  private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
+  private static final String STRING_TYPE = "java.lang.String";
+  private static final String UNBINDER_TYPE = "butterknife.ButterKnife.Unbinder<?>";
+  private static final String LIST_TYPE = List.class.getCanonicalName();
+  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
+      OnCheckedChanged.class, //
+      OnClick.class, //
+      OnEditorAction.class, //
+      OnFocusChange.class, //
+      OnItemClick.class, //
+      OnItemLongClick.class, //
+      OnItemSelected.class, //
+      OnLongClick.class, //
+      OnPageChange.class, //
+      OnTextChanged.class, //
+      OnTouch.class //
+  );
+
+  private Elements elementUtils;
+  private Types typeUtils;
+  private Filer filer;
+
+  @Override public synchronized void init(ProcessingEnvironment env) {
+    super.init(env);
+
+    elementUtils = env.getElementUtils();
+    typeUtils = env.getTypeUtils();
+    filer = env.getFiler();
+  }
+
+  @Override public Set<String> getSupportedAnnotationTypes() {
+    Set<String> types = new LinkedHashSet<>();
+
+    types.add(Bind.class.getCanonicalName());
+
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      types.add(listener.getCanonicalName());
+    }
+
+    types.add(BindArray.class.getCanonicalName());
+    types.add(BindBitmap.class.getCanonicalName());
+    types.add(BindBool.class.getCanonicalName());
+    types.add(BindColor.class.getCanonicalName());
+    types.add(BindDimen.class.getCanonicalName());
+    types.add(BindDrawable.class.getCanonicalName());
+    types.add(BindInt.class.getCanonicalName());
+    types.add(BindString.class.getCanonicalName());
+    types.add(Unbinder.class.getCanonicalName());
+
+    return types;
+  }
+
+  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
+    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
+
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+      TypeElement typeElement = entry.getKey();
+      BindingClass bindingClass = entry.getValue();
+
+      try {
+        bindingClass.brewJava().writeTo(filer);
+      } catch (IOException e) {
+        error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
+            e.getMessage());
+      }
+    }
+
+    return true;
+  }
+
+  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
+    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
+
+    // Process each @Bind element.
+    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseBind(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, Bind.class, e);
+      }
+    }
+
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
+    }
+
+    // Process each @BindArray element.
+    for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceArray(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindArray.class, e);
+      }
+    }
+
+    // Process each @BindBitmap element.
+    for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceBitmap(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBitmap.class, e);
+      }
+    }
+
+    // Process each @BindBool element.
+    for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceBool(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindBool.class, e);
+      }
+    }
+
+    // Process each @BindColor element.
+    for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceColor(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindColor.class, e);
+      }
+    }
+
+    // Process each @BindDimen element.
+    for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceDimen(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDimen.class, e);
+      }
+    }
+
+    // Process each @BindDrawable element.
+    for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindDrawable.class, e);
+      }
+    }
+
+    // Process each @BindInt element.
+    for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceInt(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindInt.class, e);
+      }
+    }
+
+    // Process each @BindString element.
+    for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceString(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindString.class, e);
+      }
+    }
+
+    // Process each @Unbinder element.
+    for (Element element : env.getElementsAnnotatedWith(Unbinder.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseBindUnbinder(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, Unbinder.class, e);
+      }
+    }
+
+    // Try to find a parent binder for each.
+    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+      TypeElement parentType = findParentType(entry.getKey(), erasedTargetNames);
+      if (parentType != null) {
+        String parentClassFqcn = getFqcn(parentType);
+        BindingClass bindingClass = entry.getValue();
+        bindingClass.setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);
+        // Check if parent requested an unbinder.
+        BindingClass parentBindingClass = targetClassMap.get(parentType);
+        if (parentBindingClass.hasUnbinder()) {
+          // Even if the child doesn't request an unbinder explicitly, we need to generate one.
+          if (!bindingClass.hasUnbinder()) {
+            bindingClass.requiresUnbinder(null);
+          }
+          // Check if the parent has a parent unbinder.
+          if (parentBindingClass.getParentUnbinder() != null) {
+            bindingClass.setParentUnbinder(parentBindingClass.getParentUnbinder());
+          } else {
+            bindingClass.setParentUnbinder(parentClassFqcn + BINDING_CLASS_SUFFIX + "."
+                + UnbinderBinding.UNBINDER_SIMPLE_NAME);
+          }
+        }
+      }
+    }
+
+    return targetClassMap;
+  }
+
+  private void logParsingError(Element element, Class<? extends Annotation> annotation,
+      Exception e) {
+    StringWriter stackTrace = new StringWriter();
+    e.printStackTrace(new PrintWriter(stackTrace));
+    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
+  }
+
+  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
+      String targetThing, Element element) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify method modifiers.
+    Set<Modifier> modifiers = element.getModifiers();
+    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
+      error(element, "@%s %s must not be private or static. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing type.
+    if (enclosingElement.getKind() != CLASS) {
+      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify containing class visibility is not private.
+    if (enclosingElement.getModifiers().contains(PRIVATE)) {
+      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
+          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    return hasError;
+  }
+
+  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
+      Element element) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+    String qualifiedName = enclosingElement.getQualifiedName().toString();
+
+    if (qualifiedName.startsWith("android.")) {
+      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+    if (qualifiedName.startsWith("java.")) {
+      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
+          annotationClass.getSimpleName(), qualifiedName);
+      return true;
+    }
+
+    return false;
+  }
+
+  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    // Verify common generated code restrictions.
+    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
+        || isBindingInWrongPackage(Bind.class, element)) {
+      return;
+    }
+
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
+      parseBindMany(element, targetClassMap, erasedTargetNames);
+    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
+      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
+          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
+          element.getSimpleName());
+    } else {
+      parseBindOne(element, targetClassMap, erasedTargetNames);
+    }
+  }
+
+  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type extends from View.
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) elementType;
+      elementType = typeVariable.getUpperBound();
+    }
+    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
+      error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Assemble information on the field.
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length != 1) {
+      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
+          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    int id = ids[0];
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass != null) {
+      ViewBindings viewBindings = bindingClass.getViewBinding(id);
+      if (viewBindings != null) {
+        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
+        if (iterator.hasNext()) {
+          FieldViewBinding existingBinding = iterator.next();
+          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+              Bind.class.getSimpleName(), id, existingBinding.getName(),
+              enclosingElement.getQualifiedName(), element.getSimpleName());
+          return;
+        }
+      }
+    } else {
+      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    }
+
+    String name = element.getSimpleName().toString();
+    TypeName type = TypeName.get(elementType);
+    boolean required = isFieldRequired(element);
+
+    FieldViewBinding binding = new FieldViewBinding(name, type, required);
+    bindingClass.addField(id, binding);
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the type is a List or an array.
+    TypeMirror elementType = element.asType();
+    String erasedType = doubleErasure(elementType);
+    TypeMirror viewType = null;
+    FieldCollectionViewBinding.Kind kind;
+    if (elementType.getKind() == TypeKind.ARRAY) {
+      ArrayType arrayType = (ArrayType) elementType;
+      viewType = arrayType.getComponentType();
+      kind = FieldCollectionViewBinding.Kind.ARRAY;
+    } else if (LIST_TYPE.equals(erasedType)) {
+      DeclaredType declaredType = (DeclaredType) elementType;
+      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+      if (typeArguments.size() != 1) {
+        error(element, "@%s List must have a generic component. (%s.%s)",
+            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      } else {
+        viewType = typeArguments.get(0);
+      }
+      kind = FieldCollectionViewBinding.Kind.LIST;
+    } else {
+      throw new AssertionError();
+    }
+    if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) viewType;
+      viewType = typeVariable.getUpperBound();
+    }
+
+    // Verify that the target type extends from View.
+    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
+      error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int[] ids = element.getAnnotation(Bind.class).value();
+    if (ids.length == 0) {
+      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      return;
+    }
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
+          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
+    }
+
+    assert viewType != null; // Always false as hasError would have been true.
+    TypeName type = TypeName.get(viewType);
+    boolean required = isFieldRequired(element);
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
+    bindingClass.addFieldCollection(ids, binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is bool.
+    if (element.asType().getKind() != TypeKind.BOOLEAN) {
+      error(element, "@%s field type must be 'boolean'. (%s.%s)",
+          BindBool.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBool.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBool.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBool.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean", false);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isColorStateList = false;
+    TypeMirror elementType = element.asType();
+    if (COLOR_STATE_LIST_TYPE.equals(elementType.toString())) {
+      isColorStateList = true;
+    } else if (elementType.getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int' or 'ColorStateList'. (%s.%s)",
+          BindColor.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindColor.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindColor.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindColor.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isColorStateList ? "getColorStateList" : "getColor", true);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int or ColorStateList.
+    boolean isInt = false;
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.INT) {
+      isInt = true;
+    } else if (elementType.getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'int' or 'float'. (%s.%s)",
+          BindDimen.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDimen.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDimen.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDimen.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name,
+        isInt ? "getDimensionPixelSize" : "getDimension", false);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Bitmap.
+    if (!BITMAP_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Bitmap'. (%s.%s)",
+          BindBitmap.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindBitmap.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindBitmap.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindBitmap.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
+    bindingClass.addBitmap(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Drawable.
+    if (!DRAWABLE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Drawable'. (%s.%s)",
+          BindDrawable.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindDrawable.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindDrawable.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindDrawable.class).value();
+    int tint = element.getAnnotation(BindDrawable.class).tint();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldDrawableBinding binding = new FieldDrawableBinding(id, name, tint);
+    bindingClass.addDrawable(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is int.
+    if (element.asType().getKind() != TypeKind.INT) {
+      error(element, "@%s field type must be 'int'. (%s.%s)", BindInt.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindInt.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindInt.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindInt.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger", false);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is String.
+    if (!STRING_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'String'. (%s.%s)",
+          BindString.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindString.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindString.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindString.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString", false);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is supported.
+    String methodName = getArrayResourceMethodName(element);
+    if (methodName == null) {
+      error(element,
+          "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
+          BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindArray.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindArray.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindArray.class).value();
+
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName, false);
+    bindingClass.addResource(binding);
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseBindUnbinder(Element element, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the element type is ButterKnife.ViewUnbinder.
+    TypeMirror elementType = element.asType();
+    if (!isSubtypeOfType(elementType, UNBINDER_TYPE) && !isInterface(elementType)) {
+      error(element,
+          "@%s field must be of type ButterKnife.ViewUnbinder. (%s.%s)",
+          Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common restrictions for generated code.
+    hasError |= isInaccessibleViaGeneratedCode(Unbinder.class, "field", element);
+    hasError |= isBindingInWrongPackage(Unbinder.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass != null) {
+      if (bindingClass.hasUnbinder()) {
+        error(element,
+            "Only one field should be annotated with @%s. (%s.%s)",
+            Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        return;
+      }
+    } else {
+      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    }
+
+    bindingClass.requiresUnbinder(element.getSimpleName().toString());
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  /**
+   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * binding, null if the element type is not supported.
+   */
+  private static String getArrayResourceMethodName(Element element) {
+    TypeMirror typeMirror = element.asType();
+    if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
+      return "obtainTypedArray";
+    }
+    if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
+      ArrayType arrayType = (ArrayType) typeMirror;
+      String componentType = arrayType.getComponentType().toString();
+      if (STRING_TYPE.equals(componentType)) {
+        return "getStringArray";
+      } else if ("int".equals(componentType)) {
+        return "getIntArray";
+      } else if ("java.lang.CharSequence".equals(componentType)) {
+        return "getTextArray";
+      }
+    }
+    return null;
+  }
+
+  /** Returns the first duplicate element inside an array, null if there are no duplicates. */
+  private static Integer findDuplicate(int[] array) {
+    Set<Integer> seenElements = new LinkedHashSet<>();
+
+    for (int element : array) {
+      if (!seenElements.add(element)) {
+        return element;
+      }
+    }
+
+    return null;
+  }
+
+  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
+  private String doubleErasure(TypeMirror elementType) {
+    String name = typeUtils.erasure(elementType).toString();
+    int typeParamStart = name.indexOf('<');
+    if (typeParamStart != -1) {
+      name = name.substring(0, typeParamStart);
+    }
+    return name;
+  }
+
+  private void findAndParseListener(RoundEnvironment env,
+      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
+      Set<TypeElement> erasedTargetNames) {
+    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        StringWriter stackTrace = new StringWriter();
+        e.printStackTrace(new PrintWriter(stackTrace));
+
+        error(element, "Unable to generate view binder for @%s.\n\n%s",
+            annotationClass.getSimpleName(), stackTrace.toString());
+      }
+    }
+  }
+
+  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
+      Map<TypeElement, BindingClass> targetClassMap, Set<TypeElement> erasedTargetNames)
+      throws Exception {
+    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
+    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
+      throw new IllegalStateException(
+          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
+    }
+
+    ExecutableElement executableElement = (ExecutableElement) element;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Assemble information on the method.
+    Annotation annotation = element.getAnnotation(annotationClass);
+    Method annotationValue = annotationClass.getDeclaredMethod("value");
+    if (annotationValue.getReturnType() != int[].class) {
+      throw new IllegalStateException(
+          String.format("@%s annotation value() type not int[].", annotationClass));
+    }
+
+    int[] ids = (int[]) annotationValue.invoke(annotation);
+    String name = executableElement.getSimpleName().toString();
+    boolean required = isListenerRequired(executableElement);
+
+    // Verify that the method and its containing class are accessible via generated code.
+    boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
+    hasError |= isBindingInWrongPackage(annotationClass, element);
+
+    Integer duplicateId = findDuplicate(ids);
+    if (duplicateId != null) {
+      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
+          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
+    if (listener == null) {
+      throw new IllegalStateException(
+          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
+              annotationClass.getSimpleName()));
+    }
+
+    for (int id : ids) {
+      if (id == NO_ID) {
+        if (ids.length == 1) {
+          if (!required) {
+            error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+            hasError = true;
+          }
+
+          // Verify target type is valid for a binding without an id.
+          String targetType = listener.targetType();
+          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
+              && !isInterface(enclosingElement.asType())) {
+            error(element, "@%s annotation without an ID may only be used with an object of type "
+                    + "\"%s\" or an interface. (%s.%s)",
+                annotationClass.getSimpleName(), targetType,
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+            hasError = true;
+          }
+        } else {
+          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
+              annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
+              element.getSimpleName());
+          hasError = true;
+        }
+      }
+    }
+
+    ListenerMethod method;
+    ListenerMethod[] methods = listener.method();
+    if (methods.length > 1) {
+      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
+          annotationClass.getSimpleName()));
+    } else if (methods.length == 1) {
+      if (listener.callbacks() != ListenerClass.NONE.class) {
+        throw new IllegalStateException(
+            String.format("Both method() and callback() defined on @%s.",
+                annotationClass.getSimpleName()));
+      }
+      method = methods[0];
+    } else {
+      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
+      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
+      Field callbackField = callback.getDeclaringClass().getField(callback.name());
+      method = callbackField.getAnnotation(ListenerMethod.class);
+      if (method == null) {
+        throw new IllegalStateException(
+            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
+                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
+                callback.name()));
+      }
+    }
+
+    // Verify that the method has equal to or less than the number of parameters as the listener.
+    List<? extends VariableElement> methodParameters = executableElement.getParameters();
+    if (methodParameters.size() > method.parameters().length) {
+      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
+          annotationClass.getSimpleName(), method.parameters().length,
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify method return type matches the listener.
+    TypeMirror returnType = executableElement.getReturnType();
+    if (returnType instanceof TypeVariable) {
+      TypeVariable typeVariable = (TypeVariable) returnType;
+      returnType = typeVariable.getUpperBound();
+    }
+    if (!returnType.toString().equals(method.returnType())) {
+      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
+          annotationClass.getSimpleName(), method.returnType(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    Parameter[] parameters = Parameter.NONE;
+    if (!methodParameters.isEmpty()) {
+      parameters = new Parameter[methodParameters.size()];
+      BitSet methodParameterUsed = new BitSet(methodParameters.size());
+      String[] parameterTypes = method.parameters();
+      for (int i = 0; i < methodParameters.size(); i++) {
+        VariableElement methodParameter = methodParameters.get(i);
+        TypeMirror methodParameterType = methodParameter.asType();
+        if (methodParameterType instanceof TypeVariable) {
+          TypeVariable typeVariable = (TypeVariable) methodParameterType;
+          methodParameterType = typeVariable.getUpperBound();
+        }
+
+        for (int j = 0; j < parameterTypes.length; j++) {
+          if (methodParameterUsed.get(j)) {
+            continue;
+          }
+          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+              || isInterface(methodParameterType)) {
+            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
+            methodParameterUsed.set(j);
+            break;
+          }
+        }
+        if (parameters[i] == null) {
+          StringBuilder builder = new StringBuilder();
+          builder.append("Unable to match @")
+              .append(annotationClass.getSimpleName())
+              .append(" method arguments. (")
+              .append(enclosingElement.getQualifiedName())
+              .append('.')
+              .append(element.getSimpleName())
+              .append(')');
+          for (int j = 0; j < parameters.length; j++) {
+            Parameter parameter = parameters[j];
+            builder.append("\n\n  Parameter #")
+                .append(j + 1)
+                .append(": ")
+                .append(methodParameters.get(j).asType().toString())
+                .append("\n    ");
+            if (parameter == null) {
+              builder.append("did not match any listener parameters");
+            } else {
+              builder.append("matched listener parameter #")
+                  .append(parameter.getListenerPosition() + 1)
+                  .append(": ")
+                  .append(parameter.getType());
+            }
+          }
+          builder.append("\n\nMethods may have up to ")
+              .append(method.parameters().length)
+              .append(" parameter(s):\n");
+          for (String parameterType : method.parameters()) {
+            builder.append("\n  ").append(parameterType);
+          }
+          builder.append(
+              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
+          error(executableElement, builder.toString());
+          return;
+        }
+      }
+    }
+
+    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    for (int id : ids) {
+      if (!bindingClass.addMethod(id, listener, method, binding)) {
+        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
+            id, enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    }
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private boolean isInterface(TypeMirror typeMirror) {
+    return typeMirror instanceof DeclaredType
+        && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
+  }
+
+  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
+    if (otherType.equals(typeMirror.toString())) {
+      return true;
+    }
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
+      return false;
+    }
+    DeclaredType declaredType = (DeclaredType) typeMirror;
+    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
+    if (typeArguments.size() > 0) {
+      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
+      typeString.append('<');
+      for (int i = 0; i < typeArguments.size(); i++) {
+        if (i > 0) {
+          typeString.append(',');
+        }
+        typeString.append('?');
+      }
+      typeString.append('>');
+      if (typeString.toString().equals(otherType)) {
+        return true;
+      }
+    }
+    Element element = declaredType.asElement();
+    if (!(element instanceof TypeElement)) {
+      return false;
+    }
+    TypeElement typeElement = (TypeElement) element;
+    TypeMirror superType = typeElement.getSuperclass();
+    if (isSubtypeOfType(superType, otherType)) {
+      return true;
+    }
+    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
+      if (isSubtypeOfType(interfaceType, otherType)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
+      TypeElement enclosingElement) {
+    BindingClass bindingClass = targetClassMap.get(enclosingElement);
+    if (bindingClass == null) {
+      String targetType = enclosingElement.getQualifiedName().toString();
+      String classPackage = getPackageName(enclosingElement);
+      String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
+
+      bindingClass = new BindingClass(classPackage, className, targetType);
+      targetClassMap.put(enclosingElement, bindingClass);
+    }
+    return bindingClass;
+  }
+
+  private static String getClassName(TypeElement type, String packageName) {
+    int packageLen = packageName.length() + 1;
+    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
+  }
+
+  /** Finds the parent binder type in the supplied set, if any. */
+  private TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
+    TypeMirror type;
+    while (true) {
+      type = typeElement.getSuperclass();
+      if (type.getKind() == TypeKind.NONE) {
+        return null;
+      }
+      typeElement = (TypeElement) ((DeclaredType) type).asElement();
+      if (parents.contains(typeElement)) {
+        return typeElement;
+      }
+    }
+  }
+
+  /** Get full-qualified class name of a {@linkplain TypeElement typeElement} */
+  private String getFqcn(TypeElement typeElement) {
+    String packageName = getPackageName(typeElement);
+    return packageName + "." + getClassName(typeElement, packageName);
+  }
+
+  @Override public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  private void error(Element element, String message, Object... args) {
+    if (args.length > 0) {
+      message = String.format(message, args);
+    }
+    processingEnv.getMessager().printMessage(ERROR, message, element);
+  }
+
+  private String getPackageName(TypeElement type) {
+    return elementUtils.getPackageOf(type).getQualifiedName().toString();
+  }
+
+  private static boolean hasAnnotationWithName(Element element, String simpleName) {
+    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
+      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
+      if (simpleName.equals(annotationName)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static boolean isFieldRequired(Element element) {
+    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
+  }
+
+  private static boolean isListenerRequired(ExecutableElement element) {
+    return element.getAnnotation(Optional.class) == null;
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
new file mode 100644
index 00000000..19b37849
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
@@ -0,0 +1,19 @@
+package butterknife.compiler;
+
+final class FieldBitmapBinding {
+  private final int id;
+  private final String name;
+
+  FieldBitmapBinding(int id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
similarity index 63%
rename from butterknife/src/main/java/butterknife/internal/CollectionBinding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 4ae18327..95c06172 100644
--- a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -1,17 +1,19 @@
-package butterknife.internal;
+package butterknife.compiler;
 
-final class CollectionBinding implements Binding {
+import com.squareup.javapoet.TypeName;
+
+final class FieldCollectionViewBinding implements ViewBinding {
   enum Kind {
     ARRAY,
     LIST
   }
 
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final Kind kind;
   private final boolean required;
 
-  CollectionBinding(String name, String type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
@@ -22,7 +24,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
new file mode 100644
index 00000000..2516186f
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -0,0 +1,25 @@
+package butterknife.compiler;
+
+final class FieldDrawableBinding {
+  private final int id;
+  private final String name;
+  private final int tintAttributeId;
+
+  FieldDrawableBinding(int id, String name, int tintAttributeId) {
+    this.id = id;
+    this.name = name;
+    this.tintAttributeId = tintAttributeId;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public int getTintAttributeId() {
+    return tintAttributeId;
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
new file mode 100644
index 00000000..7311983d
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -0,0 +1,31 @@
+package butterknife.compiler;
+
+final class FieldResourceBinding {
+  private final int id;
+  private final String name;
+  private final String method;
+  private final boolean themeable;
+
+  FieldResourceBinding(int id, String name, String method, boolean themeable) {
+    this.id = id;
+    this.name = name;
+    this.method = method;
+    this.themeable = themeable;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public String getMethod() {
+    return method;
+  }
+
+  public boolean isThemeable() {
+    return themeable;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
similarity index 52%
rename from butterknife/src/main/java/butterknife/internal/ViewBinding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
index 96ac3553..2a0cf0df 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
@@ -1,13 +1,15 @@
-package butterknife.internal;
+package butterknife.compiler;
 
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+import com.squareup.javapoet.TypeName;
 
-final class ViewBinding implements Binding {
+import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+
+final class FieldViewBinding implements ViewBinding {
   private final String name;
-  private final String type;
+  private final TypeName type;
   private final boolean required;
 
-  ViewBinding(String name, String type, boolean required) {
+  FieldViewBinding(String name, TypeName type, boolean required) {
     this.name = name;
     this.type = type;
     this.required = required;
@@ -17,7 +19,7 @@ public String getName() {
     return name;
   }
 
-  public String getType() {
+  public TypeName getType() {
     return type;
   }
 
@@ -30,6 +32,6 @@ public boolean isRequired() {
   }
 
   public boolean requiresCast() {
-    return !VIEW_TYPE.equals(type);
+    return !VIEW_TYPE.equals(type.toString());
   }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
similarity index 75%
rename from butterknife/src/main/java/butterknife/internal/ListenerBinding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index d4c53996..33beb621 100644
--- a/butterknife/src/main/java/butterknife/internal/ListenerBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -1,17 +1,17 @@
-package butterknife.internal;
+package butterknife.compiler;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-final class ListenerBinding implements Binding {
+final class MethodViewBinding implements ViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
 
-  ListenerBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
-    this.parameters = Collections.unmodifiableList(new ArrayList<Parameter>(parameters));
+    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
   }
 
diff --git a/butterknife/src/main/java/butterknife/internal/Parameter.java b/butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
similarity index 64%
rename from butterknife/src/main/java/butterknife/internal/Parameter.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
index 6949688b..308a8593 100644
--- a/butterknife/src/main/java/butterknife/internal/Parameter.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java
@@ -1,13 +1,15 @@
-package butterknife.internal;
+package butterknife.compiler;
+
+import com.squareup.javapoet.TypeName;
 
 /** Represents a parameter type and its position in the listener method. */
 final class Parameter {
   static final Parameter[] NONE = new Parameter[0];
 
   private final int listenerPosition;
-  private final String type;
+  private final TypeName type;
 
-  Parameter(int listenerPosition, String type) {
+  Parameter(int listenerPosition, TypeName type) {
     this.listenerPosition = listenerPosition;
     this.type = type;
   }
@@ -16,11 +18,11 @@ int getListenerPosition() {
     return listenerPosition;
   }
 
-  String getType() {
+  TypeName getType() {
     return type;
   }
 
   public boolean requiresCast(String toType) {
-    return !type.equals(toType);
+    return !type.toString().equals(toType);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java
new file mode 100644
index 00000000..76216fca
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java
@@ -0,0 +1,23 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+
+final class UnbinderBinding {
+  public static final String UNBINDER_SIMPLE_NAME = "Unbinder";
+
+  private final String unbinderFieldName;
+  private final ClassName unbinderClassName;
+
+  public UnbinderBinding(String packageName, String enclosingClassName, String fieldName) {
+    unbinderClassName = ClassName.get(packageName, enclosingClassName, UNBINDER_SIMPLE_NAME);
+    unbinderFieldName = fieldName;
+  }
+
+  public String getUnbinderFieldName() {
+    return unbinderFieldName;
+  }
+
+  public ClassName getUnbinderClassName() {
+    return unbinderClassName;
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/Binding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
similarity index 53%
rename from butterknife/src/main/java/butterknife/internal/Binding.java
rename to butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 1ab24e66..6159caae 100644
--- a/butterknife/src/main/java/butterknife/internal/Binding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -1,7 +1,7 @@
-package butterknife.internal;
+package butterknife.compiler;
 
-/** A field or method view injection binding. */
-interface Binding {
+/** A field or method view binding. */
+interface ViewBinding {
   /** A description of the binding in human readable form (e.g., "field 'foo'"). */
   String getDescription();
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
new file mode 100644
index 00000000..569d512b
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
@@ -0,0 +1,79 @@
+package butterknife.compiler;
+
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+final class ViewBindings {
+  private final int id;
+  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
+  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
+      methodBindings = new LinkedHashMap<>();
+
+  ViewBindings(int id) {
+    this.id = id;
+  }
+
+  public int getId() {
+    return id;
+  }
+
+  public Collection<FieldViewBinding> getFieldBindings() {
+    return fieldBindings;
+  }
+
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
+    return methodBindings;
+  }
+
+  public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+    return methods != null && methods.containsKey(method);
+  }
+
+  public void addMethodBinding(ListenerClass listener, ListenerMethod method,
+      MethodViewBinding binding) {
+    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+    Set<MethodViewBinding> set = null;
+    if (methods == null) {
+      methods = new LinkedHashMap<>();
+      methodBindings.put(listener, methods);
+    } else {
+      set = methods.get(method);
+    }
+    if (set == null) {
+      set = new LinkedHashSet<>();
+      methods.put(method, set);
+    }
+    set.add(binding);
+  }
+
+  public void addFieldBinding(FieldViewBinding fieldBinding) {
+    fieldBindings.add(fieldBinding);
+  }
+
+  public List<ViewBinding> getRequiredBindings() {
+    List<ViewBinding> requiredViewBindings = new ArrayList<>();
+    for (FieldViewBinding fieldBinding : fieldBindings) {
+      if (fieldBinding.isRequired()) {
+        requiredViewBindings.add(fieldBinding);
+      }
+    }
+    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodViewBinding> set : methodBinding.values()) {
+        for (MethodViewBinding binding : set) {
+          if (binding.isRequired()) {
+            requiredViewBindings.add(binding);
+          }
+        }
+      }
+    }
+    return requiredViewBindings;
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
new file mode 100644
index 00000000..45ccd766
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
@@ -0,0 +1,176 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindArrayTest {
+  @Test public void stringArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getStringArray(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void intArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) int[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getIntArray(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void textArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) CharSequence[] one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getTextArray(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "import android.content.res.TypedArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) TypedArray one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.obtainTypedArray(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindArray;",
+        "public class Test extends Activity {",
+        "  @BindArray(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java b/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
new file mode 100644
index 00000000..a96f6f30
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
@@ -0,0 +1,67 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBitmapTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.Bitmap;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) Bitmap one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import android.graphics.BitmapFactory;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = BitmapFactory.decodeResource(res, 1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBitmap() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBitmap;",
+        "public class Test extends Activity {",
+        "  @BindBitmap(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java b/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
new file mode 100644
index 00000000..fd9028f0
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindBoolTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) boolean one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getBoolean(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeBoolean() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindBool;",
+        "public class Test extends Activity {",
+        "  @BindBool(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindColorTest.java b/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
new file mode 100644
index 00000000..d475a98e
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
@@ -0,0 +1,110 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindColorTest {
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Context context = finder.getContext(source);",
+            "    Resources res = context.getResources();",
+            "    Resources.Theme theme = context.getTheme();",
+            "    target.one = Utils.getColor(res, theme, 1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.content.res.ColorStateList;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) ColorStateList one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Context context = finder.getContext(source);",
+            "    Resources res = context.getResources();",
+            "    Resources.Theme theme = context.getTheme();",
+            "    target.one = Utils.getColorStateList(res, theme, 1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindColor;",
+        "public class Test extends Activity {",
+        "  @BindColor(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java b/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
new file mode 100644
index 00000000..8c5e9c32
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
@@ -0,0 +1,101 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDimenTest {
+  @Test public void simpleFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) float one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimension(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void simpleInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getDimensionPixelSize(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDimen;",
+        "public class Test extends Activity {",
+        "  @BindDimen(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java b/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
new file mode 100644
index 00000000..8220fa5a
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
@@ -0,0 +1,112 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindDrawableTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.drawable.Drawable;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) Drawable one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Context context = finder.getContext(source);",
+            "    Resources res = context.getResources();",
+            "    Resources.Theme theme = context.getTheme();",
+            "    target.one = Utils.getDrawable(res, theme, 1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void withTint() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.graphics.drawable.Drawable;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(value = 1, tint = 2) Drawable one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Context context = finder.getContext(source);",
+            "    Resources res = context.getResources();",
+            "    Resources.Theme theme = context.getTheme();",
+            "    target.one = Utils.getTintedDrawable(res, theme, 1, 2);",
+            "",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeDrawable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindDrawable;",
+        "public class Test extends Activity {",
+        "  @BindDrawable(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindIntTest.java b/butterknife-compiler/src/test/java/butterknife/BindIntTest.java
new file mode 100644
index 00000000..c876d71f
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindIntTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindIntTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) int one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getInteger(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindInt;",
+        "public class Test extends Activity {",
+        "  @BindInt(1) String one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindStringTest.java b/butterknife-compiler/src/test/java/butterknife/BindStringTest.java
new file mode 100644
index 00000000..80eff6ea
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindStringTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindStringTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) String one;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.res.Resources;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "import java.lang.SuppressWarnings;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override",
+            "  @SuppressWarnings(\"ResourceType\")",
+            "  public void bind(final Finder finder, final T target, Object source) {",
+            "    Resources res = finder.getContext(source).getResources();",
+            "    target.one = res.getString(1);",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void typeMustBeString() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.BindString;",
+        "public class Test extends Activity {",
+        "  @BindString(1) boolean one;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindTest.java b/butterknife-compiler/src/test/java/butterknife/BindTest.java
new file mode 100644
index 00000000..95062f90
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/BindTest.java
@@ -0,0 +1,932 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.app.Activity;",
+            "import android.view.View;",
+            "import butterknife.Bind;",
+            "public class Test extends Activity {",
+            "    @Bind(1) View thing;",
+            "}"
+        ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+  @Test public void bindingViewTooManyIdsFail() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2}) View thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @Bind(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.EditText;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "class Test<T extends TextView> extends Activity {",
+        "    @Bind(1) T thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import butterknife.OnClick;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View thing1;",
+        "  @OnClick(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
+            "    target.thing1 = view;",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) public View thing1;",
+        "  @Bind(2) View thing2;",
+        "  @Bind(3) protected View thing3;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @interface Nullable {}",
+        "  @Nullable @Bind(1) View view;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findOptionalView(source, 1, null);",
+            "    target.view = view;",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T> extends Activity {",
+        "  @Bind(1) View view;",
+        "}",
+        "class TestOne extends Test<String> {",
+        "  @Bind(1) View thing;",
+        "}",
+        "class TestTwo extends Test<Object> {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
+            "    target.view = view;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class TestOne$$ViewBinder<T extends TestOne> ",
+            "    extends Test$$ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    super.bind(finder, target, source);",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = view;",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package java.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package android.test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  @Bind(1) View thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test {",
+        "  private static class Inner {",
+        "    @Bind(1) View thing;",
+        "  }",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public interface Test {",
+        "    @Bind(1) View thing = null;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Bind fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) private View thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) static View thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind(1) View thing1;",
+        "    @Bind(1) View thing2;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(7);
+  }
+
+  @Test public void failsRootViewBindingWithBadTarget() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnItemClick;",
+            "public class Test extends View {",
+            "  @OnItemClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    assertAbout(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining((
+            "@OnItemClick annotation without an ID may only be used with an object of type "
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(6);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "import butterknife.OnClick;",
+            "import butterknife.Optional;",
+            "public class Test extends View {",
+            "  @Optional @OnClick void doStuff() {}",
+            "  public Test(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"));
+
+    assertAbout(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            ("ID-free binding must not be annotated with @Optional. (test.Test.doStuff)"))
+        .in(source)
+        .onLine(7);
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) View[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) T[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.arrayOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.widget.TextView;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) TextView[] thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.TextView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.arrayOf(",
+            "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "    interface TestInterface {}",
+        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.listOf(",
+            "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test<T extends View> extends Activity {",
+        "    @Bind({1, 2, 3}) List<T> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.listOf(",
+            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @interface Nullable {}",
+        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.Utils;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    target.thing = Utils.listOf(",
+            "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
+            "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
+            "    );",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind({}) List<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test {",
+        "  @Bind(1) List thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.Deque;",
+        "public class Test {",
+        "  @Bind(1) Deque<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "  @Bind(1) List<String> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.Bind;",
+        "public class Test extends Activity {",
+        "  @Bind(1) String[] thing;",
+        "}"));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.Bind;",
+        "import java.util.List;",
+        "public class Test extends Activity {",
+        "    @Bind({1, 1}) List<View> thing;",
+        "}"
+    ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(7);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/ButterKnife.java b/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
new file mode 100644
index 00000000..85ad06b8
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
@@ -0,0 +1,8 @@
+package butterknife;
+
+/** STUB! Required for test sources to compile. */
+public class ButterKnife {
+  public interface ViewUnbinder<T> {
+    void unbind();
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java b/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
index b907367e..de9d0f9f 100644
--- a/butterknife/src/test/java/butterknife/internal/OnCheckedChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnCheckedChangedTest {
@@ -21,29 +20,30 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.CompoundButton;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.CompoundButton) view).setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(android.widget.CompoundButton p0, boolean p1) {",
+            "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
+            "      @Override public void onCheckedChanged(CompoundButton p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
similarity index 61%
rename from butterknife/src/test/java/butterknife/internal/OnClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnClickTest.java
index 61f71849..6bc5c35c 100644
--- a/butterknife/src/test/java/butterknife/internal/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
@@ -1,17 +1,16 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -20,35 +19,36 @@
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickMultipleInjections() {
+  @Test public void onClickMultipleBindings() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
@@ -60,41 +60,37 @@
         "  @OnClick({1, 2}) void doStuff3(View v) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff1();",
-            "          target.doStuff2();",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff1();",
+            "        target.doStuff2();",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff3(p0);",
-            "        }",
-            "      });",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.doStuff3(p0);",
+            "      }",
+            "    });",
             "  }",
-            "  @Override public void reset(T target) {",
             "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -105,38 +101,38 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
+        "  @Bind(1) View view;",
         "  @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -155,8 +151,8 @@
         "}"
     ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError();
   }
 
@@ -178,53 +174,56 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.Button;",
+            "import android.widget.TextView;",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click0();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click1(p0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click2(finder.<android.widget.TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click2(finder.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click3(finder.<android.widget.Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click3(finder.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
-            "        target.click4(finder.<test.Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
+            "        target.click4(finder.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -241,81 +240,83 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.click();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void optional() {
+  @Test public void nullable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import butterknife.OnClick;",
-        "import butterknife.Nullable;",
+        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @Nullable @OnClick(1) void doStuff() {}",
+        "  @Optional @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1, null);",
             "    if (view != null) {",
-            "      view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(android.view.View p0) {",
+            "      view.setOnClickListener(new DebouncingOnClickListener() {",
+            "        @Override public void doClick(View p0) {",
             "          target.doStuff();",
             "        }",
             "      });",
             "    }",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -326,39 +327,39 @@
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
-        "import butterknife.InjectView;",
+        "import butterknife.Bind;",
         "import butterknife.OnClick;",
-        "import butterknife.Nullable;",
+        "import butterknife.Optional;",
         "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
-        "  @Nullable @OnClick(1) void doStuff() {}",
+        "  @Bind(1) View view;",
+        "  @Optional @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.DebouncingOnClickListener;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
-            "    view.setOnClickListener(new butterknife.internal.DebouncingOnClickListener() {",
-            "      @Override public void doClick(android.view.View p0) {",
+            "    view.setOnClickListener(new DebouncingOnClickListener() {",
+            "      @Override public void doClick(View p0) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -373,8 +374,8 @@
         "}"
     ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
@@ -390,8 +391,8 @@
         "}"
     ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
@@ -409,8 +410,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -427,8 +428,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -445,8 +446,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -463,8 +464,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnClick method arguments. (test.Test.doStuff)",
@@ -492,8 +493,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
@@ -509,8 +510,8 @@
         "  void doStuff();",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
@@ -528,8 +529,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java b/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
index 481547b3..d4cb8833 100644
--- a/butterknife/src/test/java/butterknife/internal/OnEditorActionTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnEditorActionTest {
@@ -21,29 +20,31 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.KeyEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(android.widget.TextView p0, int p1, android.view.KeyEvent p2) {",
+            "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
+            "      @Override public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {",
             "        return target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java b/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
similarity index 56%
rename from butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
index 6df254da..4cbc04e5 100644
--- a/butterknife/src/test/java/butterknife/internal/OnFocusChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnFocusChangeTest {
@@ -21,29 +20,29 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new android.view.View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(android.view.View p0, boolean p1) {",
+            "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
+            "      @Override public void onFocusChange(View p0, boolean p1) {",
             "        target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
index fc49b924..94b37d71 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
@@ -1,18 +1,17 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
 public class OnItemClickTest {
-  @Test public void onClickInjection() {
+  @Test public void onItemClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -21,37 +20,36 @@
         "  @OnItemClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameters() {
+  @Test public void onItemClickBindingWithParameters() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -67,37 +65,36 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(p0, p1, p2, p3);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(p0, p1, p2, p3);",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubset() {
+  @Test public void onItemClickBindingWithParameterSubset() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -111,37 +108,37 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickInjectionWithParameterSubsetAndGenerics() {
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -155,37 +152,37 @@
         "  ) {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import android.widget.ListView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff(finder.<android.widget.ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
   }
 
-  @Test public void onClickRootViewInjection() {
+  @Test public void onClickRootViewBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.content.Context;",
@@ -198,35 +195,30 @@
         "  }",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = target;",
-            "    ((android.widget.AdapterView<?>) view).setOnItemClickListener(",
-            "      new android.widget.AdapterView.OnItemClickListener() {",
-            "        @Override public void onItemClick(",
-            "          android.widget.AdapterView<?> p0,",
-            "          android.view.View p1,",
-            "          int p2,",
-            "          long p3",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
+            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -242,8 +234,8 @@
         "  @OnItemClick({1, -1}) void doStuff() {}",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
         .in(source).onLine(6);
@@ -264,8 +256,8 @@
         "  ) {}",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(Joiner.on('\n').join(
             "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
index dad24264..e93d1809 100644
--- a/butterknife/src/test/java/butterknife/internal/OnItemLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnItemLongClickTest {
@@ -21,29 +20,30 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
+            "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
+            "      @Override public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {",
             "        return target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
new file mode 100644
index 00000000..f150bd1f
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
@@ -0,0 +1,205 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
+public class OnItemSelectedTest {
+  @Test public void defaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.doStuff();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void nonDefaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.doStuff();",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void allMethods() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected(1)",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void multipleBindingPermutation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnItemSelected;",
+        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
+        "public class Test extends Activity {",
+        "  @OnItemSelected({ 1, 2 })",
+        "  void onItemSelected() {}",
+        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
+        "  void onNothingSelected() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.AdapterView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "        target.onItemSelected();",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "      }",
+            "    });",
+            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
+            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
+            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
+            "      }",
+            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
+            "        target.onNothingSelected();",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
similarity index 60%
rename from butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
index bbf8b884..2f3c174a 100644
--- a/butterknife/src/test/java/butterknife/internal/OnLongClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
@@ -1,18 +1,17 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 /** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
 public class OnLongClickTest {
-  @Test public void onLongClickInjection() {
+  @Test public void onLongClickBinding() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
@@ -23,30 +22,29 @@
         "  }",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(",
-            "      new android.view.View.OnLongClickListener() {",
-            "        @Override public boolean onLongClick(android.view.View p0) {",
-            "          return target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
+            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
+            "      @Override public boolean onLongClick(View p0) {",
+            "        return target.doStuff();",
+            "      }",
+            "    });",
             "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -63,8 +61,8 @@
         "  }",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
diff --git a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java b/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
similarity index 63%
rename from butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
index 4c58db45..bab5f4b1 100644
--- a/butterknife/src/test/java/butterknife/internal/OnPageChangeTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnPageChangeTest {
@@ -21,17 +20,20 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.support.v4.view.ViewPager;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.support.v4.view.ViewPager) view).setOnPageChangeListener(new android.support.v4.view.ViewPager.OnPageChangeListener() {",
+            "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
             "      @Override public void onPageSelected(int p0) {",
             "        target.doStuff();",
             "      }",
@@ -41,13 +43,11 @@
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java b/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
similarity index 50%
rename from butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
index 6f6687cd..1a737593 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTextChangedTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnTextChangedTest {
@@ -21,33 +20,37 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.text.Editable;",
+            "import android.text.TextWatcher;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import android.widget.TextView;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.CharSequence;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.TextView) view).addTextChangedListener(new android.text.TextWatcher() {",
-            "      @Override public void onTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
+            "      @Override public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "        target.doStuff();",
             "      }",
-            "      @Override public void beforeTextChanged(java.lang.CharSequence p0, int p1, int p2, int p3) {",
+            "      @Override public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {",
             "      }",
-            "      @Override public void afterTextChanged(android.text.Editable p0) {",
+            "      @Override public void afterTextChanged(Editable p0) {",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
diff --git a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java b/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
similarity index 64%
rename from butterknife/src/test/java/butterknife/internal/OnTouchTest.java
rename to butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
index 1ac2fba0..a95044f3 100644
--- a/butterknife/src/test/java/butterknife/internal/OnTouchTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
@@ -1,13 +1,12 @@
-package butterknife.internal;
+package butterknife;
 
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
+import org.junit.Test;
 
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
+import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class OnTouchTest {
@@ -21,29 +20,30 @@
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
         Joiner.on('\n').join(
             "package test;",
+            "import android.view.MotionEvent;",
             "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new android.view.View.OnTouchListener() {",
-            "      @Override public boolean onTouch(android.view.View p0, android.view.MotionEvent p1) {",
+            "    view.setOnTouchListener(new View.OnTouchListener() {",
+            "      @Override public boolean onTouch(View p0, MotionEvent p1) {",
             "        return target.doStuff();",
             "      }",
             "    });",
             "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
             "}"
         ));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
         .generatesSources(expectedSource);
@@ -59,8 +59,8 @@
         "  @OnTouch(1) boolean doStuff2() {}",
         "}"));
 
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
             "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
new file mode 100644
index 00000000..2d5b3c56
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -0,0 +1,800 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class UnbinderTest {
+  @Test public void bindingUnbinder() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @OnClick(1) void doStuff() {",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff();",
+                "      }",
+                "    });",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void failWhenMultipleUnbinders() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder1;",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder2;",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Only one field should be annotated with @Unbinder. (test.Test.unbinder2)")
+        .in(source)
+        .onLine(7);
+  }
+
+  @Test public void failOnWrongUnbinderType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder Object unbinder;",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Unbinder field must be of type ButterKnife.ViewUnbinder. (test.Test.unbinder)")
+        .in(source)
+        .onLine(5);
+  }
+
+  @Test public void multipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import android.view.View;",
+                "import butterknife.Bind;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.OnLongClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @Bind(1) View view;",
+                "  @Bind(2) View view2;",
+                "  @OnClick(1) void doStuff() {",
+                "  }",
+                "  @OnLongClick(1) boolean doMoreStuff() { return false; }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");",
+                "    target.view = view;",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff();",
+                "      }",
+                "    });",
+                "    view.setOnLongClickListener(new View.OnLongClickListener() {",
+                "      @Override public boolean onLongClick(View p0) {",
+                "        return target.doMoreStuff();",
+                "      }",
+                "    });",
+                "    view = finder.findRequiredView(source, 2, \"field 'view2'\");",
+                "    target.view2 = view;",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      view1.setOnLongClickListener(null);",
+                "      target.view = null;",
+                "      target.view2 = null;",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void unbinderRespectsNullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Optional;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @Optional @OnClick(1) void doStuff() {",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findOptionalView(source, 1, null);",
+                "    if (view != null) {",
+                "      unbinder.view1 = view;",
+                "      view.setOnClickListener(new DebouncingOnClickListener() {",
+                "        @Override public void doClick(View p0) {",
+                "          target.doStuff();",
+                "        }",
+                "      });",
+                "    }",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      if (view1 != null) {",
+                "        view1.setOnClickListener(null);",
+                "      }",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void childBindsSecondUnbinder() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @OnClick(1) void doStuff1() { }",
+                "}",
+                "class TestOne extends Test {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder2;",
+                "  @OnClick(1) void doStuff2() { }",
+                "}",
+                "class TestTwo extends Test {",
+                "}"
+            ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff1();",
+                "      }",
+                "    });",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    super.bind(finder, target, source);",
+                "    Unbinder unbinder = super.accessUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff2();",
+                "      }",
+                "    });",
+                "    target.unbinder2 = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  @Override protected <U extends Test$$ViewBinder.Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  @Override protected <U extends Test$$ViewBinder.Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder2;",
+                "  }",
+                "  public static class Unbinder<T extends TestOne> extends Test$$ViewBinder.Unbinder<T> {",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      super(target);",
+                "    }",
+                "    @Override protected void unbind(T target) {",
+                "      super.unbind(target);",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder2 = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void childUsesOwnUnbinder() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @OnClick(1) void doStuff1() { }",
+                "}",
+                "class TestOne extends Test {",
+                "  @OnClick(1) void doStuff2() { }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff1();",
+                "      }",
+                "    });",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    super.bind(finder, target, source);",
+                "    Unbinder unbinder = super.accessUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff2();",
+                "      }",
+                "    });",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  @Override protected <U extends Test$$ViewBinder.Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  public static class Unbinder<T extends TestOne> extends Test$$ViewBinder.Unbinder<T> {",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      super(target);",
+                "    }",
+                "    @Override protected void unbind(T target) {",
+                "      super.unbind(target);",
+                "      view1.setOnClickListener(null);",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void childInDifferentPackage() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @OnClick(1) void doStuff1() { }",
+                "}"
+            ));
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.one.TestOne",
+        Joiner.on('\n')
+            .join(
+                "package test.one;",
+                "import test.Test;",
+                "import butterknife.OnClick;",
+                "class TestOne extends Test {",
+                "  @OnClick(2) void doStuff2() { }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff1();",
+                "      }",
+                "    });",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/one/TestOne$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test.one;",
+                "import android.view.View;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "import test.Test$$ViewBinder;",
+                "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    super.bind(finder, target, source);",
+                "    Unbinder unbinder = super.accessUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 2, \"method 'doStuff2'\");",
+                "    unbinder.view2 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff2();",
+                "      }",
+                "    });",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  @Override protected <U extends Test$$ViewBinder.Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  public static class Unbinder<T extends TestOne> extends Test$$ViewBinder.Unbinder<T> {",
+                "    View view2;",
+                "    protected Unbinder(T target) {",
+                "      super(target);",
+                "    }",
+                "    @Override protected void unbind(T target) {",
+                "      super.unbind(target);",
+                "      view2.setOnClickListener(null);",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSources()).that(asList(source1, source2))
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void unbindingThroughAbstractChild() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.support.v4.app.Fragment;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.OnClick;",
+                "import butterknife.Unbinder;",
+                "public class Test extends Fragment {",
+                "  @Unbinder ButterKnife.ViewUnbinder unbinder;",
+                "  @OnClick(1) void doStuff1() { }",
+                "}",
+                "class TestOne extends Test {",
+                "}",
+                "class TestTwo extends TestOne {",
+                "  @OnClick(1) void doStuff2() { }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.ButterKnife;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import butterknife.internal.ViewBinder;",
+                "import java.lang.IllegalStateException;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    Unbinder unbinder = createUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff1();",
+                "      }",
+                "    });",
+                "    target.unbinder = unbinder;",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  protected <U extends Unbinder<T>> U accessUnbinder(T target) {",
+                "    return (U) target.unbinder;",
+                "  }",
+                "  public static class Unbinder<T extends Test> implements ButterKnife.ViewUnbinder<T> {",
+                "    private T target;",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      this.target = target;",
+                "    }",
+                "    @Override public final void unbind() {",
+                "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
+                "      unbind(target);",
+                "      target = null;",
+                "    }",
+                "    protected void unbind(T target) {",
+                "      view1.setOnClickListener(null);",
+                "      target.unbinder = null;",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestTwo$$ViewBinder",
+        Joiner.on('\n')
+            .join(
+                "package test;",
+                "import android.view.View;",
+                "import butterknife.internal.DebouncingOnClickListener;",
+                "import butterknife.internal.Finder;",
+                "import java.lang.Object;",
+                "import java.lang.Override;",
+                "import java.lang.SuppressWarnings;",
+                "public class TestTwo$$ViewBinder<T extends TestTwo> extends Test$$ViewBinder<T> {",
+                "  @Override public void bind(final Finder finder, final T target, Object source) {",
+                "    super.bind(finder, target, source);",
+                "    Unbinder unbinder = super.accessUnbinder(target);",
+                "    View view;",
+                "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");",
+                "    unbinder.view1 = view;",
+                "    view.setOnClickListener(new DebouncingOnClickListener() {",
+                "      @Override public void doClick(View p0) {",
+                "        target.doStuff2();",
+                "      }",
+                "    });",
+                "  }",
+                "  @SuppressWarnings(\"unchecked\")",
+                "  @Override protected <U extends Test$$ViewBinder.Unbinder<T>> U createUnbinder(T target) {",
+                "    return (U) new Unbinder(target);",
+                "  }",
+                "  public static class Unbinder<T extends TestTwo> extends Test$$ViewBinder.Unbinder<T> {",
+                "    View view1;",
+                "    protected Unbinder(T target) {",
+                "      super(target);",
+                "    }",
+                "    @Override protected void unbind(T target) {",
+                "      super.unbind(target);",
+                "      view1.setOnClickListener(null);",
+                "    }",
+                "  }",
+                "}"
+            ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
new file mode 100644
index 00000000..caedd36c
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
@@ -0,0 +1,37 @@
+package butterknife.compiler;
+
+import org.junit.Test;
+
+import static butterknife.compiler.BindingClass.asHumanDescription;
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
+import static java.util.Collections.singletonList;
+
+public class ViewBindingClassTest {
+  @Test public void humanDescriptionJoinWorks() {
+    ViewBinding one = new TestViewBinding("one");
+    ViewBinding two = new TestViewBinding("two");
+    ViewBinding three = new TestViewBinding("three");
+
+    String result1 = asHumanDescription(singletonList(one));
+    assertThat(result1).isEqualTo("one");
+
+    String result2 = asHumanDescription(asList(one, two));
+    assertThat(result2).isEqualTo("one and two");
+
+    String result3 = asHumanDescription(asList(one, two, three));
+    assertThat(result3).isEqualTo("one, two, and three");
+  }
+
+  private static class TestViewBinding implements ViewBinding {
+    private final String description;
+
+    private TestViewBinding(String description) {
+      this.description = description;
+    }
+
+    @Override public String getDescription() {
+      return description;
+    }
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
new file mode 100644
index 00000000..011cd83f
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
@@ -0,0 +1,24 @@
+package butterknife.internal;
+
+import android.view.View;
+
+/**
+ * DO NOT MODIFY! This is a Stub class for DebouncingOnClickListener.java found in the butterknife
+ * module, in order to work around the fact that java projects can't depend on android libraries.
+ */
+public abstract class DebouncingOnClickListener implements View.OnClickListener {
+
+  static boolean enabled = true;
+
+  private static final Runnable ENABLE_AGAIN = new Runnable() {
+    @Override public void run() {
+      enabled = true;
+    }
+  };
+
+  @Override public final void onClick(View v) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public abstract void doClick(View v);
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/Finder.java b/butterknife-compiler/src/test/java/butterknife/internal/Finder.java
new file mode 100644
index 00000000..446c6059
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/Finder.java
@@ -0,0 +1,34 @@
+package butterknife.internal;
+
+import android.content.Context;
+import android.view.View;
+import java.util.List;
+
+public class Finder {
+
+  private static <T> T[] filterNull(T[] views) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public <T> T findRequiredView(Object source, int id, String who) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public <T> T findOptionalView(Object source, int id, String who) {
+    throw new RuntimeException("Stub!");
+  }
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public <T> T castView(View view, int id, String who) {
+    throw new RuntimeException("Stub!");
+  }
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public Context getContext(Object source) {
+    throw new RuntimeException("Stub!");
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/Utils.java b/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
new file mode 100644
index 00000000..201f5190
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
@@ -0,0 +1,33 @@
+package butterknife.internal;
+
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import java.util.List;
+
+public final class Utils {
+  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme, int id,
+      int tintAttrId) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public static int getColor(Resources res, Resources.Theme theme, int id) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme, int id) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public static Drawable getDrawable(Resources res, Resources.Theme theme, int id) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public static <T> T[] arrayOf(T... views) {
+    throw new RuntimeException("Stub!");
+  }
+
+  public static <T> List<T> listOf(T... views) {
+    throw new RuntimeException("Stub!");
+  }
+}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java b/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java
new file mode 100644
index 00000000..f0234899
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java
@@ -0,0 +1,5 @@
+package butterknife.internal;
+
+public interface ViewBinder<T> {
+  void bind(Finder finder, T target, Object source);
+}
diff --git a/butterknife-sample/build.gradle b/butterknife-sample/build.gradle
new file mode 100644
index 00000000..9e728385
--- /dev/null
+++ b/butterknife-sample/build.gradle
@@ -0,0 +1,35 @@
+apply plugin: 'com.android.application'
+apply plugin: 'com.neenbedankt.android-apt'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  compileOptions {
+    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
+    targetCompatibility rootProject.ext.targetCompatibilityVersion
+  }
+
+  defaultConfig {
+    applicationId 'com.example.butterknife'
+    minSdkVersion rootProject.ext.minSdkVersion
+    targetSdkVersion rootProject.ext.targetSdkVersion
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  buildTypes {
+    debug {
+      minifyEnabled true
+    }
+  }
+}
+
+dependencies {
+  compile project(':butterknife')
+  apt project(':butterknife-compiler')
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+}
diff --git a/butterknife-sample/pom.xml b/butterknife-sample/pom.xml
deleted file mode 100644
index 02877291..00000000
--- a/butterknife-sample/pom.xml
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton</groupId>
-    <artifactId>butterknife-parent</artifactId>
-    <version>6.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>butterknife-sample</artifactId>
-  <name>Butter Knife Sample</name>
-  <packaging>apk</packaging>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.jakewharton</groupId>
-      <artifactId>butterknife</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>fest-android</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <extensions>true</extensions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/butterknife-sample/src/main/AndroidManifest.xml b/butterknife-sample/src/main/AndroidManifest.xml
index ebc0c10a..66eab11e 100644
--- a/butterknife-sample/src/main/AndroidManifest.xml
+++ b/butterknife-sample/src/main/AndroidManifest.xml
@@ -1,21 +1,21 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    android:versionCode="1"
-    android:versionName="1.0"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.example.butterknife">
 
-  <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="17"/>
-
   <application
+      android:allowBackup="false"
+      android:fullBackupContent="false"
       android:label="@string/app_name"
-      android:name=".SimpleApp">
+      android:name=".SimpleApp"
+      tools:ignore="MissingApplicationIcon,UnusedAttribute">
 
     <activity
         android:label="@string/app_name"
         android:name=".SimpleActivity">
       <intent-filter>
         <action android:name="android.intent.action.MAIN"/>
+
         <category android:name="android.intent.category.LAUNCHER"/>
         <category android:name="android.intent.category.DEFAULT"/>
       </intent-filter>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
index 89fe3c13..61f46451 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
@@ -2,25 +2,29 @@
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+
+import butterknife.Unbinder;
+import java.util.List;
+
+import butterknife.Bind;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
-import butterknife.InjectViews;
+import butterknife.ButterKnife.ViewUnbinder;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
-import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity {
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
-    @Override public void apply(View view, int index) {
+    @Override public void apply(@NonNull View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
       alphaAnimation.setFillBefore(true);
       alphaAnimation.setDuration(500);
@@ -29,17 +33,19 @@
     }
   };
 
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.hello) Button hello;
-  @InjectView(R.id.list_of_things) ListView listOfThings;
-  @InjectView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.hello) Button hello;
+  @Bind(R.id.list_of_things) ListView listOfThings;
+  @Bind(R.id.footer) TextView footer;
+  @Unbinder ViewUnbinder unbinder;
 
-  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello })
+  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
   List<View> headerViews;
 
   private SimpleAdapter adapter;
 
+
   @OnClick(R.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
@@ -57,11 +63,11 @@
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
+    ButterKnife.bind(this);
 
-    // Contrived code to use the "injected" views.
+    // Contrived code to use the bound fields.
     title.setText("Butter Knife");
-    subtitle.setText("View \"injection\" for Android.");
+    subtitle.setText("Field and method binding for Android views.");
     footer.setText("by Jake Wharton");
     hello.setText("Say Hello");
 
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
index f5a00178..618065cd 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
@@ -7,7 +7,7 @@
 import android.widget.BaseAdapter;
 import android.widget.TextView;
 import butterknife.ButterKnife;
-import butterknife.InjectView;
+import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
   private static final String[] CONTENTS =
@@ -51,12 +51,12 @@ public SimpleAdapter(Context context) {
   }
 
   static class ViewHolder {
-    @InjectView(R.id.word) TextView word;
-    @InjectView(R.id.length) TextView length;
-    @InjectView(R.id.position) TextView position;
+    @Bind(R.id.word) TextView word;
+    @Bind(R.id.length) TextView length;
+    @Bind(R.id.position) TextView position;
 
     ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
index b71ae5bf..6af0ea8a 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
@@ -1,33 +1,33 @@
 package com.example.butterknife;
 
-import butterknife.ButterKnife;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import static org.fest.assertions.api.ANDROID.assertThat;
+import static com.google.common.truth.Truth.assertThat;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
 public class SimpleActivityTest {
-  @Test public void verifyContentViewInjection() {
+  @Test public void verifyContentViewBinding() {
     SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
         .create() //
         .get();
 
-    assertThat(activity.title).hasId(R.id.title);
-    assertThat(activity.subtitle).hasId(R.id.subtitle);
-    assertThat(activity.hello).hasId(R.id.hello);
-    assertThat(activity.listOfThings).hasId(R.id.list_of_things);
-    assertThat(activity.footer).hasId(R.id.footer);
+    assertThat(activity.title.getId()).isEqualTo(R.id.title);
+    assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);
+    assertThat(activity.hello.getId()).isEqualTo(R.id.hello);
+    assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);
+    assertThat(activity.footer.getId()).isEqualTo(R.id.footer);
 
-    ButterKnife.reset(activity);
+    activity.unbinder.unbind();
     assertThat(activity.title).isNull();
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
     assertThat(activity.listOfThings).isNull();
     assertThat(activity.footer).isNull();
+    assertThat(activity.unbinder).isNull();
   }
 }
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
index b19803be..afc96add 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
-import butterknife.ButterKnife;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -11,7 +10,7 @@
 import org.robolectric.annotation.Config;
 
 import static com.example.butterknife.SimpleAdapter.ViewHolder;
-import static org.fest.assertions.api.ANDROID.assertThat;
+import static com.google.common.truth.Truth.assertThat;
 
 @RunWith(RobolectricTestRunner.class) //
 @Config(manifest = "src/main/AndroidManifest.xml")
@@ -22,13 +21,8 @@
     View root = LayoutInflater.from(context).inflate(R.layout.simple_list_item, null);
     ViewHolder holder = new ViewHolder(root);
 
-    assertThat(holder.word).hasId(R.id.word);
-    assertThat(holder.length).hasId(R.id.length);
-    assertThat(holder.position).hasId(R.id.position);
-
-    ButterKnife.reset(holder);
-    assertThat(holder.word).isNull();
-    assertThat(holder.length).isNull();
-    assertThat(holder.position).isNull();
+    assertThat(holder.word.getId()).isEqualTo(R.id.word);
+    assertThat(holder.length.getId()).isEqualTo(R.id.length);
+    assertThat(holder.position.getId()).isEqualTo(R.id.position);
   }
 }
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
new file mode 100644
index 00000000..ac3837bc
--- /dev/null
+++ b/butterknife/build.gradle
@@ -0,0 +1,24 @@
+apply plugin: 'com.android.library'
+
+android {
+  compileSdkVersion rootProject.ext.compileSdkVersion
+  buildToolsVersion rootProject.ext.buildToolsVersion
+
+  defaultConfig {
+    minSdkVersion rootProject.ext.minSdkVersion
+
+    consumerProguardFiles 'proguard-rules.txt'
+  }
+}
+
+dependencies {
+  compile project(':butterknife-annotations')
+  compile deps.supportAnnotations
+  provided deps.supportv4
+
+  testCompile deps.junit
+  testCompile deps.truth
+  testCompile deps.robolectric
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/gradle.properties b/butterknife/gradle.properties
new file mode 100644
index 00000000..fc97e9b8
--- /dev/null
+++ b/butterknife/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife
+POM_NAME=Butterknife
+POM_PACKAGING=aar
diff --git a/butterknife/pom.xml b/butterknife/pom.xml
deleted file mode 100644
index 248ee6c2..00000000
--- a/butterknife/pom.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.jakewharton</groupId>
-    <artifactId>butterknife-parent</artifactId>
-    <version>6.1.1-SNAPSHOT</version>
-  </parent>
-
-  <artifactId>butterknife</artifactId>
-  <name>Butter Knife</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.easytesting</groupId>
-      <artifactId>fest-assert-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup</groupId>
-      <artifactId>fest-android</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.robolectric</groupId>
-      <artifactId>robolectric</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.testing.compile</groupId>
-      <artifactId>compile-testing</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <configuration>
-          <excludePackageNames>butterknife.internal:butterknife.internal.*</excludePackageNames>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/butterknife/proguard-rules.txt b/butterknife/proguard-rules.txt
new file mode 100644
index 00000000..f76e67de
--- /dev/null
+++ b/butterknife/proguard-rules.txt
@@ -0,0 +1,11 @@
+-keep class butterknife.** { *; }
+-dontwarn butterknife.internal.**
+-keep class **$$ViewBinder { *; }
+
+-keepclasseswithmembernames class * {
+    @butterknife.* <fields>;
+}
+
+-keepclasseswithmembernames class * {
+    @butterknife.* <methods>;
+}
\ No newline at end of file
diff --git a/butterknife/src/main/AndroidManifest.xml b/butterknife/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..b5e34f17
--- /dev/null
+++ b/butterknife/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="butterknife"/>
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index bb519de8..d81e8285 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -3,45 +3,45 @@
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
-import android.content.Context;
 import android.os.Build;
+import android.support.annotation.CheckResult;
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
-import butterknife.internal.ButterKnifeProcessor;
+import butterknife.internal.Finder;
+import butterknife.internal.ViewBinder;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import static butterknife.internal.ButterKnifeProcessor.ANDROID_PREFIX;
-import static butterknife.internal.ButterKnifeProcessor.JAVA_PREFIX;
-
 /**
- * View "injection" utilities. Use this class to simplify finding views and attaching listeners by
- * injecting them.
+ * Field and method binding for Android views. Use this class to simplify finding views and
+ * attaching listeners by binding them with annotations.
  * <p>
- * Injecting views from your activity is as easy as:
+ * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}InjectView(R.id.title) EditText titleView;
- *   {@literal @}InjectView(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}Bind(R.id.title) EditText titleView;
+ *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
  *     setContentView(R.layout.example_activity);
- *     ButterKnife.inject(this);
+ *     ButterKnife.bind(this);
  *   }
  * }
  * </code></pre>
- * Injection can be performed directly on an {@linkplain #inject(Activity) activity}, a
- * {@linkplain #inject(View) view}, or a {@linkplain #inject(Dialog) dialog}. Alternate objects to
- * inject can be specified along with an {@linkplain #inject(Object, Activity) activity},
- * {@linkplain #inject(Object, View) view}, or
- * {@linkplain #inject(Object, android.app.Dialog) dialog}.
+ * Binding can be performed directly on an {@linkplain #bind(Activity) activity}, a
+ * {@linkplain #bind(View) view}, or a {@linkplain #bind(Dialog) dialog}. Alternate objects to
+ * bind can be specified along with an {@linkplain #bind(Object, Activity) activity},
+ * {@linkplain #bind(Object, View) view}, or
+ * {@linkplain #bind(Object, android.app.Dialog) dialog}.
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -51,7 +51,7 @@
  * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
  * </ul>
  * <p>
- * To inject listeners to your views you can annotate your methods:
+ * To bind listeners to your views you can annotate your methods:
  * <pre><code>
  * {@literal @}OnClick(R.id.submit) void onSubmit() {
  *   // React to button click.
@@ -64,178 +64,49 @@
  * }
  * </code></pre>
  * <p>
- * Be default, views are required to be present in the layout for both field and method injections.
- * If a view is optional add the {@link Nullable @Nullable} annotation.
+ * Be default, views are required to be present in the layout for both field and method bindings.
+ * If a view is optional add a {@code @Nullable} annotation for fields (such as the one in the
+ * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
+ * or the {@code @Optional} annotation for methods.
  * <pre><code>
- * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
+ * </code></pre>
+ * Resources can also be bound to fields to simplify programmatically working with views:
+ * <pre><code>
+ * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindInt(R.integer.columns) int columns;
+ * {@literal @}BindColor(R.color.error_red) int errorRed;
  * </code></pre>
- *
- * @see InjectView
- * @see InjectViews
- * @see OnCheckedChanged
- * @see OnClick
- * @see OnEditorAction
- * @see OnFocusChange
- * @see OnItemClick
- * @see OnItemLongClick
- * @see OnItemSelected
- * @see OnLongClick
- * @see OnPageChange
- * @see OnTextChanged
- * @see OnTouch
  */
 public final class ButterKnife {
   private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
-  /** DO NOT USE: Exposed for generated code. */
-  @SuppressWarnings("UnusedDeclaration") // Used by generated code.
-  public enum Finder {
-    VIEW {
-      @Override protected View findView(Object source, int id) {
-        return ((View) source).findViewById(id);
-      }
-
-      @Override protected Context getContext(Object source) {
-        return ((View) source).getContext();
-      }
-    },
-    ACTIVITY {
-      @Override protected View findView(Object source, int id) {
-        return ((Activity) source).findViewById(id);
-      }
-
-      @Override protected Context getContext(Object source) {
-        return (Activity) source;
-      }
-    },
-    DIALOG {
-      @Override protected View findView(Object source, int id) {
-        return ((Dialog) source).findViewById(id);
-      }
-
-      @Override protected Context getContext(Object source) {
-        return ((Dialog) source).getContext();
-      }
-    };
-
-    private static <T> T[] filterNull(T[] views) {
-      int newSize = views.length;
-      for (T view : views) {
-        if (view == null) {
-          newSize -= 1;
-        }
-      }
-      if (newSize == views.length) {
-        return views;
-      }
-      //noinspection unchecked
-      T[] newViews = (T[]) new Object[newSize];
-      int nextIndex = 0;
-      for (T view : views) {
-        if (view != null) {
-          newViews[nextIndex++] = view;
-        }
-      }
-      return newViews;
-    }
-
-    public static <T> T[] arrayOf(T... views) {
-      return filterNull(views);
-    }
-
-    public static <T> List<T> listOf(T... views) {
-      return new ImmutableList<T>(filterNull(views));
-    }
-
-    public <T> T findRequiredView(Object source, int id, String who) {
-      T view = findOptionalView(source, id, who);
-      if (view == null) {
-        String name = getContext(source).getResources().getResourceEntryName(id);
-        throw new IllegalStateException("Required view '"
-            + name
-            + "' with ID "
-            + id
-            + " for "
-            + who
-            + " was not found. If this view is optional add '@Nullable' annotation.");
-      }
-      return view;
-    }
-
-    public <T> T findOptionalView(Object source, int id, String who) {
-      View view = findView(source, id);
-      return castView(view, id, who);
-    }
-
-    @SuppressWarnings("unchecked") // That's the point.
-    public <T> T castView(View view, int id, String who) {
-      try {
-        return (T) view;
-      } catch (ClassCastException e) {
-        if (who == null) {
-          throw new AssertionError();
-        }
-        String name = view.getResources().getResourceEntryName(id);
-        throw new IllegalStateException("View '"
-            + name
-            + "' with ID "
-            + id
-            + " for "
-            + who
-            + " was of the wrong type. See cause for more info.", e);
-      }
-    }
-
-    @SuppressWarnings("unchecked") // That's the point.
-    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-      try {
-        return (T) value;
-      } catch (ClassCastException e) {
-        throw new IllegalStateException("Parameter #"
-            + (fromPosition + 1)
-            + " of method '"
-            + from
-            + "' was of the wrong type for parameter #"
-            + (toPosition + 1)
-            + " of method '"
-            + to
-            + "'. See cause for more info.", e);
-      }
-    }
-
-    protected abstract View findView(Object source, int id);
-
-    protected abstract Context getContext(Object source);
-  }
-
-  /** DO NOT USE: Exposed for generated code. */
-  public interface Injector<T> {
-    void inject(Finder finder, T target, Object source);
-    void reset(T target);
+  /** An unbinder contract that can be bind with {@link butterknife.Unbinder}. */
+  @SuppressWarnings("unused") // Used by generated code.
+  public interface ViewUnbinder<T> {
+    void unbind();
   }
 
   /** An action that can be applied to a list of views. */
   public interface Action<T extends View> {
     /** Apply the action on the {@code view} which is at {@code index} in the list. */
-    void apply(T view, int index);
+    void apply(@NonNull T view, int index);
   }
 
   /** A setter that can apply a value to a list of views. */
   public interface Setter<T extends View, V> {
     /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-    void set(T view, V value, int index);
+    void set(@NonNull T view, V value, int index);
   }
 
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, Injector<Object>> INJECTORS =
-      new LinkedHashMap<Class<?>, Injector<Object>>();
-  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {
-    @Override public void inject(Finder finder, Object target, Object source) { }
-    @Override public void reset(Object target) { }
+  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
+  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
+    @Override public void bind(Finder finder, Object target, Object source) { }
   };
 
   /** Control whether debug logging is enabled. */
@@ -244,168 +115,230 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Activity}. The current content
+   * Bind annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
-   * @param target Target activity for field injection.
+   * @param target Target activity for view binding.
    */
-  public static void inject(Activity target) {
-    inject(target, target, Finder.ACTIVITY);
+  public static void bind(@NonNull Activity target) {
+    bind(target, target, Finder.ACTIVITY);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link View}. The view and its children
+   * Bind annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
-   * @param target Target view for field injection.
+   * @param target Target view for view binding.
    */
-  public static void inject(View target) {
-    inject(target, target, Finder.VIEW);
+  @NonNull
+  public static View bind(@NonNull View target) {
+    bind(target, target, Finder.VIEW);
+    return target;
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@link Dialog}. The current content
+   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
-   * @param target Target dialog for field injection.
+   * @param target Target dialog for view binding.
    */
-  public static void inject(Dialog target) {
-    inject(target, target, Finder.DIALOG);
+  @SuppressWarnings("unused") // Public api.
+  public static void bind(@NonNull Dialog target) {
+    bind(target, target, Finder.DIALOG);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
-  public static void inject(Object target, Activity source) {
-    inject(target, source, Finder.ACTIVITY);
+  public static void bind(@NonNull Object target, @NonNull Activity source) {
+    bind(target, source, Finder.ACTIVITY);
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source View root on which IDs will be looked up.
    */
-  public static void inject(Object target, View source) {
-    inject(target, source, Finder.VIEW);
+  @NonNull
+  public static View bind(@NonNull Object target, @NonNull View source) {
+    bind(target, source, Finder.VIEW);
+    return source;
   }
 
   /**
-   * Inject annotated fields and methods in the specified {@code target} using the {@code source}
+   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
-   * @param target Target class for field injection.
+   * @param target Target class for view binding.
    * @param source Dialog on which IDs will be looked up.
    */
-  public static void inject(Object target, Dialog source) {
-    inject(target, source, Finder.DIALOG);
+  @SuppressWarnings("unused") // Public api.
+  public static void bind(@NonNull Object target, @NonNull Dialog source) {
+    bind(target, source, Finder.DIALOG);
   }
 
-  /**
-   * Reset fields annotated with {@link InjectView @InjectView} and {@link InjectViews @InjectViews}
-   * to {@code null}.
-   * <p>
-   * This should only be used in the {@code onDestroyView} method of a fragment.
-   *
-   * @param target Target class for field reset.
-   */
-  public static void reset(Object target) {
+  static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {
     Class<?> targetClass = target.getClass();
     try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Injector<Object> injector = findInjectorForClass(targetClass);
-      if (injector != null) {
-        injector.reset(target);
-      }
-    } catch (Exception e) {
-      throw new RuntimeException("Unable to reset views for " + targetClass.getName(), e);
-    }
-  }
-
-  static void inject(Object target, Object source, Finder finder) {
-    Class<?> targetClass = target.getClass();
-    try {
-      if (debug) Log.d(TAG, "Looking up view injector for " + targetClass.getName());
-      Injector<Object> injector = findInjectorForClass(targetClass);
-      if (injector != null) {
-        injector.inject(finder, target, source);
-      }
+      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
+      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
+      viewBinder.bind(finder, target, source);
     } catch (Exception e) {
-      throw new RuntimeException("Unable to inject views for " + targetClass.getName(), e);
+      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
     }
   }
 
-  private static Injector<Object> findInjectorForClass(Class<?> cls)
+  @NonNull
+  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
       throws IllegalAccessException, InstantiationException {
-    Injector<Object> injector = INJECTORS.get(cls);
-    if (injector != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in injector map.");
-      return injector;
+    ViewBinder<Object> viewBinder = BINDERS.get(cls);
+    if (viewBinder != null) {
+      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
+      return viewBinder;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NOP_INJECTOR;
+      return NOP_VIEW_BINDER;
     }
     try {
-      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);
+      Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
       //noinspection unchecked
-      injector = (Injector<Object>) injectorClass.newInstance();
-      if (debug) Log.d(TAG, "HIT: Class loaded injection class.");
+      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
+      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      injector = findInjectorForClass(cls.getSuperclass());
+      viewBinder = findViewBinderForClass(cls.getSuperclass());
+    }
+    BINDERS.put(cls, viewBinder);
+    return viewBinder;
+  }
+
+  /** Apply the specified {@code actions} across the {@code list} of views. */
+  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(list.get(i), i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code actions} across the {@code array} of views. */
+  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(array[i], i);
+      }
     }
-    INJECTORS.put(cls, injector);
-    return injector;
   }
 
   /** Apply the specified {@code action} across the {@code list} of views. */
-  public static <T extends View> void apply(List<T> list, Action<? super T> action) {
+  public static <T extends View> void apply(@NonNull List<T> list,
+      @NonNull Action<? super T> action) {
     for (int i = 0, count = list.size(); i < count; i++) {
       action.apply(list.get(i), i);
     }
   }
 
+  /** Apply the specified {@code action} across the {@code array} of views. */
+  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      action.apply(array[i], i);
+    }
+  }
+
+  /** Apply {@code actions} to {@code view}. */
+  @SafeVarargs public static <T extends View> void apply(@NonNull T view,
+      @NonNull Action<? super T>... actions) {
+    for (Action<? super T> action : actions) {
+      action.apply(view, 0);
+    }
+  }
+
+  /** Apply {@code action} to {@code view}. */
+  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
+    action.apply(view, 0);
+  }
+
   /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
-  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {
+  public static <T extends View, V> void apply(@NonNull List<T> list,
+      @NonNull Setter<? super T, V> setter, V value) {
     for (int i = 0, count = list.size(); i < count; i++) {
       setter.set(list.get(i), value, i);
     }
   }
 
+  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  public static <T extends View, V> void apply(@NonNull T[] array,
+      @NonNull Setter<? super T, V> setter, V value) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value, i);
+    }
+  }
+
+  /** Set {@code value} on {@code view} using {@code setter}. */
+  public static <T extends View, V> void apply(@NonNull T view,
+      @NonNull Setter<? super T, V> setter, V value) {
+    setter.set(view, value, 0);
+  }
+
   /**
    * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
    */
   @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  public static <T extends View, V> void apply(List<T> list, Property<? super T, V> setter,
-      V value) {
+  public static <T extends View, V> void apply(@NonNull List<T> list,
+      @NonNull Property<? super T, V> setter, V value) {
     //noinspection ForLoopReplaceableByForEach
     for (int i = 0, count = list.size(); i < count; i++) {
       setter.set(list.get(i), value);
     }
   }
 
+  /**
+   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
+   */
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  public static <T extends View, V> void apply(@NonNull T[] array,
+      @NonNull Property<? super T, V> setter, V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value);
+    }
+  }
+
+  /** Apply {@code value} to {@code view} using {@code property}. */
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  public static <T extends View, V> void apply(@NonNull T view,
+      @NonNull Property<? super T, V> setter, V value) {
+    setter.set(view, value);
+  }
+
   /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(View view, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
     return (T) view.findViewById(id);
   }
 
   /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(Activity activity, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
     return (T) activity.findViewById(id);
   }
 
   /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
   @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  public static <T extends View> T findById(Dialog dialog, int id) {
+  @CheckResult
+  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
     return (T) dialog.findViewById(id);
   }
 }
diff --git a/butterknife/src/main/java/butterknife/InjectViews.java b/butterknife/src/main/java/butterknife/InjectViews.java
deleted file mode 100644
index 0a5145f6..00000000
--- a/butterknife/src/main/java/butterknife/InjectViews.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.util.List;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a field to the view for each ID specified in a {@link List} or array. Each view will
- * automatically be cast to the list or array type.
- * <pre><code>
- * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name})
- * List&lt;TextView&gt; nameViews;
- *
- * {@literal @}InjectViews({R.id.address_line_1, R.id.address_line_2})
- * EditText[] addressViews;
- * </code></pre>
- */
-@Retention(CLASS) @Target(FIELD)
-public @interface InjectViews {
-  /** View IDs to which the field will be bound. */
-  int[] value();
-}
diff --git a/butterknife/src/main/java/butterknife/Nullable.java b/butterknife/src/main/java/butterknife/Nullable.java
deleted file mode 100644
index 76c0169f..00000000
--- a/butterknife/src/main/java/butterknife/Nullable.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Denote that the view specified by the injection is not required to be present.
- * <pre><code>
- * {@literal @}Nullable @InjectView(R.id.title) TextView subtitleView;
- * </code></pre>
- * This annotation is deprecated, and will be removed in a future release. It is encouraged to use
- * the {@code @Nullable} annotation from Android's "support-annotations" library.
- * @see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>
- */
-@Deprecated
-@Retention(CLASS) @Target({ FIELD, METHOD })
-public @interface Nullable {
-}
\ No newline at end of file
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
deleted file mode 100644
index 39ad6ae9..00000000
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ /dev/null
@@ -1,707 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import butterknife.InjectView;
-import butterknife.InjectViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.Filer;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.annotation.processing.RoundEnvironment;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.ArrayType;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import javax.tools.JavaFileObject;
-
-import static javax.lang.model.element.ElementKind.CLASS;
-import static javax.lang.model.element.ElementKind.INTERFACE;
-import static javax.lang.model.element.ElementKind.METHOD;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.STATIC;
-import static javax.tools.Diagnostic.Kind.ERROR;
-
-public final class ButterKnifeProcessor extends AbstractProcessor {
-  public static final String SUFFIX = "$$ViewInjector";
-  public static final String ANDROID_PREFIX = "android.";
-  public static final String JAVA_PREFIX = "java.";
-  static final String VIEW_TYPE = "android.view.View";
-  private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
-  private static final String LIST_TYPE = List.class.getCanonicalName();
-  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
-      OnCheckedChanged.class, //
-      OnClick.class, //
-      OnEditorAction.class, //
-      OnFocusChange.class, //
-      OnItemClick.class, //
-      OnItemLongClick.class, //
-      OnItemSelected.class, //
-      OnLongClick.class, //
-      OnPageChange.class, //
-      OnTextChanged.class, //
-      OnTouch.class //
-  );
-
-  private Elements elementUtils;
-  private Types typeUtils;
-  private Filer filer;
-
-  @Override public synchronized void init(ProcessingEnvironment env) {
-    super.init(env);
-
-    elementUtils = env.getElementUtils();
-    typeUtils = env.getTypeUtils();
-    filer = env.getFiler();
-  }
-
-  @Override public Set<String> getSupportedAnnotationTypes() {
-    Set<String> supportTypes = new LinkedHashSet<String>();
-    supportTypes.add(InjectView.class.getCanonicalName());
-    supportTypes.add(InjectViews.class.getCanonicalName());
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      supportTypes.add(listener.getCanonicalName());
-    }
-
-    return supportTypes;
-  }
-
-  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);
-
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
-      TypeElement typeElement = entry.getKey();
-      ViewInjector viewInjector = entry.getValue();
-
-      try {
-        JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);
-        Writer writer = jfo.openWriter();
-        writer.write(viewInjector.brewJava());
-        writer.flush();
-        writer.close();
-      } catch (IOException e) {
-        error(typeElement, "Unable to write injector for type %s: %s", typeElement, e.getMessage());
-      }
-    }
-
-    return true;
-  }
-
-  private Map<TypeElement, ViewInjector> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, ViewInjector> targetClassMap = new LinkedHashMap<TypeElement, ViewInjector>();
-    Set<String> erasedTargetNames = new LinkedHashSet<String>();
-
-    // Process each @InjectView element.
-    for (Element element : env.getElementsAnnotatedWith(InjectView.class)) {
-      try {
-        parseInjectView(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @InjectView.\n\n%s", stackTrace);
-      }
-    }
-
-    // Process each @InjectViews element.
-    for (Element element : env.getElementsAnnotatedWith(InjectViews.class)) {
-      try {
-        parseInjectViews(element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @InjectViews.\n\n%s", stackTrace);
-      }
-    }
-
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
-    }
-
-    // Try to find a parent injector for each injector.
-    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {
-      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
-      if (parentClassFqcn != null) {
-        entry.getValue().setParentInjector(parentClassFqcn + SUFFIX);
-      }
-    }
-
-    return targetClassMap;
-  }
-
-  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass,
-      String targetThing, Element element) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify method modifiers.
-    Set<Modifier> modifiers = element.getModifiers();
-    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
-      error(element, "@%s %s must not be private or static. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing type.
-    if (enclosingElement.getKind() != CLASS) {
-      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify containing class visibility is not private.
-    if (enclosingElement.getModifiers().contains(PRIVATE)) {
-      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",
-          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    return hasError;
-  }
-
-  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass,
-      Element element) {
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-    String qualifiedName = enclosingElement.getQualifiedName().toString();
-
-    if (qualifiedName.startsWith(ANDROID_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-    if (qualifiedName.startsWith(JAVA_PREFIX)) {
-      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)",
-          annotationClass.getSimpleName(), qualifiedName);
-      return true;
-    }
-
-    return false;
-  }
-
-  private void parseInjectView(Element element, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the target type extends from View.
-    TypeMirror elementType = element.asType();
-    if (elementType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) elementType;
-      elementType = typeVariable.getUpperBound();
-    }
-    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@InjectView fields must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(InjectView.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectView.class, element);
-
-    // Check for the other field annotation.
-    if (element.getAnnotation(InjectViews.class) != null) {
-      error(element, "Only one of @InjectView and @InjectViews is allowed. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the injection point.
-    int id = element.getAnnotation(InjectView.class).value();
-
-    ViewInjector injector = targetClassMap.get(enclosingElement);
-    if (injector != null) {
-      ViewInjection viewInjection = injector.getViewInjection(id);
-      if (viewInjection != null) {
-        Iterator<ViewBinding> iterator = viewInjection.getViewBindings().iterator();
-        if (iterator.hasNext()) {
-          ViewBinding existingBinding = iterator.next();
-          error(element,
-              "Attempt to use @InjectView for an already injected ID %d on '%s'. (%s.%s)", id,
-              existingBinding.getName(), enclosingElement.getQualifiedName(),
-              element.getSimpleName());
-          return;
-        }
-      }
-    }
-
-    String name = element.getSimpleName().toString();
-    String type = elementType.toString();
-    boolean required = isRequiredInjection(element);
-
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    ViewBinding binding = new ViewBinding(name, type, required);
-    viewInjector.addView(id, binding);
-
-    // Add the type-erased version to the valid injection targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseInjectViews(Element element, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the type is a List or an array.
-    TypeMirror elementType = element.asType();
-    String erasedType = doubleErasure(elementType);
-    TypeMirror viewType = null;
-    CollectionBinding.Kind kind = null;
-    if (elementType.getKind() == TypeKind.ARRAY) {
-      ArrayType arrayType = (ArrayType) elementType;
-      viewType = arrayType.getComponentType();
-      kind = CollectionBinding.Kind.ARRAY;
-    } else if (LIST_TYPE.equals(erasedType)) {
-      DeclaredType declaredType = (DeclaredType) elementType;
-      List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-      if (typeArguments.size() != 1) {
-        error(element, "@InjectViews List must have a generic component. (%s.%s)",
-            enclosingElement.getQualifiedName(), element.getSimpleName());
-        hasError = true;
-      } else {
-        viewType = typeArguments.get(0);
-      }
-      kind = CollectionBinding.Kind.LIST;
-    } else {
-      error(element, "@InjectViews must be a List or array. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-    if (viewType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) viewType;
-      viewType = typeVariable.getUpperBound();
-    }
-
-    // Verify that the target type extends from View.
-    if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@InjectViews type must extend from View or be an interface. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common generated code restrictions.
-    hasError |= isInaccessibleViaGeneratedCode(InjectViews.class, "fields", element);
-    hasError |= isBindingInWrongPackage(InjectViews.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    // Assemble information on the injection point.
-    String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(InjectViews.class).value();
-    if (ids.length == 0) {
-      error(element, "@InjectViews must specify at least one ID. (%s.%s)",
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      return;
-    }
-
-    Integer duplicateId = findDuplicate(ids);
-    if (duplicateId != null) {
-      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-    }
-
-    assert viewType != null; // Always false as hasError would have been true.
-    String type = viewType.toString();
-    boolean required = isRequiredInjection(element);
-
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    CollectionBinding binding = new CollectionBinding(name, type, kind, required);
-    viewInjector.addCollection(ids, binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
-    Set<Integer> seenElements = new LinkedHashSet<Integer>();
-
-    for (int element : array) {
-      if (!seenElements.add(element)) {
-        return element;
-      }
-    }
-
-    return null;
-  }
-
-  /** Uses both {@link Types#erasure} and string manipulation to strip any generic types. */
-  private String doubleErasure(TypeMirror elementType) {
-    String name = typeUtils.erasure(elementType).toString();
-    int typeParamStart = name.indexOf('<');
-    if (typeParamStart != -1) {
-      name = name.substring(0, typeParamStart);
-    }
-    return name;
-  }
-
-  private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, ViewInjector> targetClassMap,
-      Set<String> erasedTargetNames) {
-    for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
-      try {
-        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
-      } catch (Exception e) {
-        StringWriter stackTrace = new StringWriter();
-        e.printStackTrace(new PrintWriter(stackTrace));
-
-        error(element, "Unable to generate view injector for @%s.\n\n%s",
-            annotationClass.getSimpleName(), stackTrace.toString());
-      }
-    }
-  }
-
-  private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames)
-      throws Exception {
-    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
-    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
-      throw new IllegalStateException(
-          String.format("@%s annotation must be on a method.", annotationClass.getSimpleName()));
-    }
-
-    ExecutableElement executableElement = (ExecutableElement) element;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Assemble information on the injection point.
-    Annotation annotation = element.getAnnotation(annotationClass);
-    Method annotationValue = annotationClass.getDeclaredMethod("value");
-    if (annotationValue.getReturnType() != int[].class) {
-      throw new IllegalStateException(
-          String.format("@%s annotation value() type not int[].", annotationClass));
-    }
-
-    int[] ids = (int[]) annotationValue.invoke(annotation);
-    String name = executableElement.getSimpleName().toString();
-    boolean required = isRequiredInjection(element);
-
-    // Verify that the method and its containing class are accessible via generated code.
-    boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
-    hasError |= isBindingInWrongPackage(annotationClass, element);
-
-    Integer duplicateId = findDuplicate(ids);
-    if (duplicateId != null) {
-      error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
-          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    ListenerClass listener = annotationClass.getAnnotation(ListenerClass.class);
-    if (listener == null) {
-      throw new IllegalStateException(
-          String.format("No @%s defined on @%s.", ListenerClass.class.getSimpleName(),
-              annotationClass.getSimpleName()));
-    }
-
-    for (int id : ids) {
-      if (id == View.NO_ID) {
-        if (ids.length == 1) {
-          if (!required) {
-            error(element, "ID free injection must not be annotated with @Nullable. (%s.%s)",
-                enclosingElement.getQualifiedName(), element.getSimpleName());
-            hasError = true;
-          }
-
-          // Verify target type is valid for a binding without an id.
-          String targetType = listener.targetType();
-          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
-              && !isInterface(enclosingElement.asType())) {
-            error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\" or an interface. (%s.%s)",
-                    annotationClass.getSimpleName(), targetType,
-                enclosingElement.getQualifiedName(), element.getSimpleName());
-            hasError = true;
-          }
-        } else {
-          error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
-              annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
-              element.getSimpleName());
-          hasError = true;
-        }
-      }
-    }
-
-    ListenerMethod method;
-    ListenerMethod[] methods = listener.method();
-    if (methods.length > 1) {
-      throw new IllegalStateException(String.format("Multiple listener methods specified on @%s.",
-          annotationClass.getSimpleName()));
-    } else if (methods.length == 1) {
-      if (listener.callbacks() != ListenerClass.NONE.class) {
-        throw new IllegalStateException(
-            String.format("Both method() and callback() defined on @%s.",
-                annotationClass.getSimpleName()));
-      }
-      method = methods[0];
-    } else {
-      Method annotationCallback = annotationClass.getDeclaredMethod("callback");
-      Enum<?> callback = (Enum<?>) annotationCallback.invoke(annotation);
-      Field callbackField = callback.getDeclaringClass().getField(callback.name());
-      method = callbackField.getAnnotation(ListenerMethod.class);
-      if (method == null) {
-        throw new IllegalStateException(
-            String.format("No @%s defined on @%s's %s.%s.", ListenerMethod.class.getSimpleName(),
-                annotationClass.getSimpleName(), callback.getDeclaringClass().getSimpleName(),
-                callback.name()));
-      }
-    }
-
-    // Verify that the method has equal to or less than the number of parameters as the listener.
-    List<? extends VariableElement> methodParameters = executableElement.getParameters();
-    if (methodParameters.size() > method.parameters().length) {
-      error(element, "@%s methods can have at most %s parameter(s). (%s.%s)",
-          annotationClass.getSimpleName(), method.parameters().length,
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify method return type matches the listener.
-    TypeMirror returnType = executableElement.getReturnType();
-    if (returnType instanceof TypeVariable) {
-      TypeVariable typeVariable = (TypeVariable) returnType;
-      returnType = typeVariable.getUpperBound();
-    }
-    if (!returnType.toString().equals(method.returnType())) {
-      error(element, "@%s methods must have a '%s' return type. (%s.%s)",
-          annotationClass.getSimpleName(), method.returnType(),
-          enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
-    }
-
-    Parameter[] parameters = Parameter.NONE;
-    if (!methodParameters.isEmpty()) {
-      parameters = new Parameter[methodParameters.size()];
-      BitSet methodParameterUsed = new BitSet(methodParameters.size());
-      String[] parameterTypes = method.parameters();
-      for (int i = 0; i < methodParameters.size(); i++) {
-        VariableElement methodParameter = methodParameters.get(i);
-        TypeMirror methodParameterType = methodParameter.asType();
-        if (methodParameterType instanceof TypeVariable) {
-          TypeVariable typeVariable = (TypeVariable) methodParameterType;
-          methodParameterType = typeVariable.getUpperBound();
-        }
-
-        for (int j = 0; j < parameterTypes.length; j++) {
-          if (methodParameterUsed.get(j)) {
-            continue;
-          }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
-              || isInterface(methodParameterType)) {
-            parameters[i] = new Parameter(j, methodParameterType.toString());
-            methodParameterUsed.set(j);
-            break;
-          }
-        }
-        if (parameters[i] == null) {
-          StringBuilder builder = new StringBuilder();
-          builder.append("Unable to match @")
-              .append(annotationClass.getSimpleName())
-              .append(" method arguments. (")
-              .append(enclosingElement.getQualifiedName())
-              .append('.')
-              .append(element.getSimpleName())
-              .append(')');
-          for (int j = 0; j < parameters.length; j++) {
-            Parameter parameter = parameters[j];
-            builder.append("\n\n  Parameter #")
-                .append(j + 1)
-                .append(": ")
-                .append(methodParameters.get(j).asType().toString())
-                .append("\n    ");
-            if (parameter == null) {
-              builder.append("did not match any listener parameters");
-            } else {
-              builder.append("matched listener parameter #")
-                  .append(parameter.getListenerPosition() + 1)
-                  .append(": ")
-                  .append(parameter.getType());
-            }
-          }
-          builder.append("\n\nMethods may have up to ")
-              .append(method.parameters().length)
-              .append(" parameter(s):\n");
-          for (String parameterType : method.parameters()) {
-            builder.append("\n  ").append(parameterType);
-          }
-          builder.append(
-              "\n\nThese may be listed in any order but will be searched for from top to bottom.");
-          error(executableElement, builder.toString());
-          return;
-        }
-      }
-    }
-
-    ListenerBinding binding = new ListenerBinding(name, Arrays.asList(parameters), required);
-    ViewInjector viewInjector = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    for (int id : ids) {
-      if (!viewInjector.addListener(id, listener, method, binding)) {
-        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
-            id, enclosingElement.getQualifiedName(), element.getSimpleName());
-        return;
-      }
-    }
-
-    // Add the type-erased version to the valid injection targets set.
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private boolean isInterface(TypeMirror typeMirror) {
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    return ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
-  }
-
-  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
-    if (otherType.equals(typeMirror.toString())) {
-      return true;
-    }
-    if (!(typeMirror instanceof DeclaredType)) {
-      return false;
-    }
-    DeclaredType declaredType = (DeclaredType) typeMirror;
-    List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
-    if (typeArguments.size() > 0) {
-      StringBuilder typeString = new StringBuilder(declaredType.asElement().toString());
-      typeString.append('<');
-      for (int i = 0; i < typeArguments.size(); i++) {
-        if (i > 0) {
-          typeString.append(',');
-        }
-        typeString.append('?');
-      }
-      typeString.append('>');
-      if (typeString.toString().equals(otherType)) {
-        return true;
-      }
-    }
-    Element element = declaredType.asElement();
-    if (!(element instanceof TypeElement)) {
-      return false;
-    }
-    TypeElement typeElement = (TypeElement) element;
-    TypeMirror superType = typeElement.getSuperclass();
-    if (isSubtypeOfType(superType, otherType)) {
-      return true;
-    }
-    for (TypeMirror interfaceType : typeElement.getInterfaces()) {
-      if (isSubtypeOfType(interfaceType, otherType)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private ViewInjector getOrCreateTargetClass(Map<TypeElement, ViewInjector> targetClassMap,
-      TypeElement enclosingElement) {
-    ViewInjector viewInjector = targetClassMap.get(enclosingElement);
-    if (viewInjector == null) {
-      String targetType = enclosingElement.getQualifiedName().toString();
-      String classPackage = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, classPackage) + SUFFIX;
-
-      viewInjector = new ViewInjector(classPackage, className, targetType);
-      targetClassMap.put(enclosingElement, viewInjector);
-    }
-    return viewInjector;
-  }
-
-  private static String getClassName(TypeElement type, String packageName) {
-    int packageLen = packageName.length() + 1;
-    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
-  }
-
-  /** Finds the parent injector type in the supplied set, if any. */
-  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
-    TypeMirror type;
-    while (true) {
-      type = typeElement.getSuperclass();
-      if (type.getKind() == TypeKind.NONE) {
-        return null;
-      }
-      typeElement = (TypeElement) ((DeclaredType) type).asElement();
-      if (parents.contains(typeElement.toString())) {
-        String packageName = getPackageName(typeElement);
-        return packageName + "." + getClassName(typeElement, packageName);
-      }
-    }
-  }
-
-  @Override public SourceVersion getSupportedSourceVersion() {
-    return SourceVersion.latestSupported();
-  }
-
-  private void error(Element element, String message, Object... args) {
-    if (args.length > 0) {
-      message = String.format(message, args);
-    }
-    processingEnv.getMessager().printMessage(ERROR, message, element);
-  }
-
-  private String getPackageName(TypeElement type) {
-    return elementUtils.getPackageOf(type).getQualifiedName().toString();
-  }
-
-  private static boolean hasAnnotationWithName(Element element, String simpleName) {
-    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
-      String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
-      if (simpleName.equals(annotationName)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private static boolean isRequiredInjection(Element element) {
-    return !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index c9c73a84..f936ff6f 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -7,7 +7,7 @@
  * same frame. A click on one button disables all buttons for that frame.
  */
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
-  private static boolean enabled = true;
+  static boolean enabled = true;
 
   private static final Runnable ENABLE_AGAIN = new Runnable() {
     @Override public void run() {
diff --git a/butterknife/src/main/java/butterknife/internal/Finder.java b/butterknife/src/main/java/butterknife/internal/Finder.java
new file mode 100644
index 00000000..effd6de4
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/Finder.java
@@ -0,0 +1,111 @@
+package butterknife.internal;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.view.View;
+
+@SuppressWarnings("UnusedDeclaration") // Used by generated code.
+public enum Finder {
+  VIEW {
+    @Override protected View findView(Object source, int id) {
+      return ((View) source).findViewById(id);
+    }
+
+    @Override public Context getContext(Object source) {
+      return ((View) source).getContext();
+    }
+
+    @Override protected String getResourceEntryName(Object source, int id) {
+      final View view = (View) source;
+      // In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
+      if (view.isInEditMode()) {
+        return "<unavailable while editing>";
+      }
+      return super.getResourceEntryName(source, id);
+    }
+  },
+  ACTIVITY {
+    @Override protected View findView(Object source, int id) {
+      return ((Activity) source).findViewById(id);
+    }
+
+    @Override public Context getContext(Object source) {
+      return (Activity) source;
+    }
+  },
+  DIALOG {
+    @Override protected View findView(Object source, int id) {
+      return ((Dialog) source).findViewById(id);
+    }
+
+    @Override public Context getContext(Object source) {
+      return ((Dialog) source).getContext();
+    }
+  };
+
+  public <T> T findRequiredView(Object source, int id, String who) {
+    T view = findOptionalView(source, id, who);
+    if (view == null) {
+      String name = getResourceEntryName(source, id);
+      throw new IllegalStateException("Required view '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+          + " (methods) annotation.");
+    }
+    return view;
+  }
+
+  public <T> T findOptionalView(Object source, int id, String who) {
+    View view = findView(source, id);
+    return castView(view, id, who);
+  }
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public <T> T castView(View view, int id, String who) {
+    try {
+      return (T) view;
+    } catch (ClassCastException e) {
+      if (who == null) {
+        throw new AssertionError();
+      }
+      String name = getResourceEntryName(view, id);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
+  @SuppressWarnings("unchecked") // That's the point.
+  public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
+    try {
+      return (T) value;
+    } catch (ClassCastException e) {
+      throw new IllegalStateException("Parameter #"
+          + (fromPosition + 1)
+          + " of method '"
+          + from
+          + "' was of the wrong type for parameter #"
+          + (toPosition + 1)
+          + " of method '"
+          + to
+          + "'. See cause for more info.", e);
+    }
+  }
+
+  protected String getResourceEntryName(Object source, int id) {
+    return getContext(source).getResources().getResourceEntryName(id);
+  }
+
+  protected abstract View findView(Object source, int id);
+
+  public abstract Context getContext(Object source);
+}
diff --git a/butterknife/src/main/java/butterknife/ImmutableList.java b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
similarity index 95%
rename from butterknife/src/main/java/butterknife/ImmutableList.java
rename to butterknife/src/main/java/butterknife/internal/ImmutableList.java
index 3c3d07fa..35129842 100644
--- a/butterknife/src/main/java/butterknife/ImmutableList.java
+++ b/butterknife/src/main/java/butterknife/internal/ImmutableList.java
@@ -1,4 +1,4 @@
-package butterknife;
+package butterknife.internal;
 
 import java.util.AbstractList;
 import java.util.RandomAccess;
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
new file mode 100644
index 00000000..cd158d50
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -0,0 +1,112 @@
+package butterknife.internal;
+
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.support.annotation.AttrRes;
+import android.support.annotation.ColorRes;
+import android.support.annotation.DrawableRes;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.util.TypedValue;
+import java.lang.reflect.Array;
+import java.util.List;
+
+@SuppressWarnings("deprecation") //
+public final class Utils {
+  private static final boolean HAS_SUPPORT_V4 = hasSupportV4();
+
+  private static boolean hasSupportV4() {
+    try {
+      Class.forName("android.support.v4.graphics.drawable.DrawableCompat");
+      return true;
+    } catch (ClassNotFoundException ignored) {
+      return false;
+    }
+  }
+
+  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
+      @DrawableRes int id, @AttrRes int tintAttrId) {
+    if (HAS_SUPPORT_V4) {
+      return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
+    }
+    throw new RuntimeException(
+        "Android support-v4 library is required for @BindDrawable with tint.");
+  }
+
+  public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+      return res.getColor(id);
+    }
+    return res.getColor(id, theme);
+  }
+
+  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
+      @ColorRes int id) {
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+      return res.getColorStateList(id);
+    }
+    return res.getColorStateList(id, theme);
+  }
+
+  public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+      return res.getDrawable(id);
+    }
+    return res.getDrawable(id, theme);
+  }
+
+  @SafeVarargs
+  public static <T> T[] arrayOf(T... views) {
+    return filterNull(views);
+  }
+
+  @SafeVarargs
+  public static <T> List<T> listOf(T... views) {
+    return new ImmutableList<>(filterNull(views));
+  }
+
+  private static <T> T[] filterNull(T[] views) {
+    int end = 0;
+    int length = views.length;
+    for (int i = 0; i < length; i++) {
+      T view = views[i];
+      if (view != null) {
+        views[end++] = view;
+      }
+    }
+    if (end == length) {
+      return views;
+    }
+    //noinspection unchecked
+    T[] newViews = (T[]) Array.newInstance(views.getClass().getComponentType(), end);
+    System.arraycopy(views, 0, newViews, 0, end);
+    return newViews;
+  }
+
+  static class SupportV4 {
+    private static final TypedValue OUT_VALUE = new TypedValue();
+
+    static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
+        @AttrRes int tintAttributeId) {
+      boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
+      if (!attributeFound) {
+        throw new Resources.NotFoundException("Required tint color attribute with name "
+            + res.getResourceEntryName(tintAttributeId)
+            + " and attribute ID "
+            + tintAttributeId
+            + " was not found.");
+      }
+
+      Drawable drawable = getDrawable(res, theme, id);
+      drawable = DrawableCompat.wrap(drawable.mutate());
+      int color = getColor(res, theme, OUT_VALUE.resourceId);
+      DrawableCompat.setTint(drawable, color);
+      return drawable;
+    }
+  }
+
+  private Utils() {
+    throw new AssertionError("No instances.");
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinder.java b/butterknife/src/main/java/butterknife/internal/ViewBinder.java
new file mode 100644
index 00000000..f0234899
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/ViewBinder.java
@@ -0,0 +1,5 @@
+package butterknife.internal;
+
+public interface ViewBinder<T> {
+  void bind(Finder finder, T target, Object source);
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjection.java b/butterknife/src/main/java/butterknife/internal/ViewInjection.java
deleted file mode 100644
index 4f31ca20..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewInjection.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package butterknife.internal;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class ViewInjection {
-  private final int id;
-  private final Set<ViewBinding> viewBindings = new LinkedHashSet<ViewBinding>();
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>>
-      listenerBindings = new LinkedHashMap<ListenerClass,
-      Map<ListenerMethod, Set<ListenerBinding>>>();
-
-  ViewInjection(int id) {
-    this.id = id;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public Collection<ViewBinding> getViewBindings() {
-    return viewBindings;
-  }
-
-  public Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> getListenerBindings() {
-    return listenerBindings;
-  }
-
-  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);
-    return methods != null && methods.containsKey(method);
-  }
-
-  public void addListenerBinding(ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);
-    Set<ListenerBinding> set = null;
-    if (methods == null) {
-      methods = new LinkedHashMap<ListenerMethod, Set<ListenerBinding>>();
-      listenerBindings.put(listener, methods);
-    } else {
-      set = methods.get(method);
-    }
-    if (set == null) {
-      set = new LinkedHashSet<ListenerBinding>();
-      methods.put(method, set);
-    }
-    set.add(binding);
-  }
-
-  public void addViewBinding(ViewBinding viewBinding) {
-    viewBindings.add(viewBinding);
-  }
-
-  public List<Binding> getRequiredBindings() {
-    List<Binding> requiredBindings = new ArrayList<Binding>();
-    for (ViewBinding viewBinding : viewBindings) {
-      if (viewBinding.isRequired()) {
-        requiredBindings.add(viewBinding);
-      }
-    }
-    for (Map<ListenerMethod, Set<ListenerBinding>> methodBinding : listenerBindings.values()) {
-      for (Set<ListenerBinding> set : methodBinding.values()) {
-        for (ListenerBinding binding : set) {
-          if (binding.isRequired()) {
-            requiredBindings.add(binding);
-          }
-        }
-      }
-    }
-    return requiredBindings;
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
deleted file mode 100644
index cce9545b..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ /dev/null
@@ -1,414 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
-
-final class ViewInjector {
-  private final Map<Integer, ViewInjection> viewIdMap = new LinkedHashMap<Integer, ViewInjection>();
-  private final Map<CollectionBinding, int[]> collectionBindings =
-      new LinkedHashMap<CollectionBinding, int[]>();
-  private final String classPackage;
-  private final String className;
-  private final String targetClass;
-  private String parentInjector;
-
-  ViewInjector(String classPackage, String className, String targetClass) {
-    this.classPackage = classPackage;
-    this.className = className;
-    this.targetClass = targetClass;
-  }
-
-  void addView(int id, ViewBinding binding) {
-    getOrCreateViewInjection(id).addViewBinding(binding);
-  }
-
-  boolean addListener(int id, ListenerClass listener, ListenerMethod method,
-      ListenerBinding binding) {
-    ViewInjection viewInjection = getOrCreateViewInjection(id);
-    if (viewInjection.hasListenerBinding(listener, method)
-        && !"void".equals(method.returnType())) {
-      return false;
-    }
-    viewInjection.addListenerBinding(listener, method, binding);
-    return true;
-  }
-
-  void addCollection(int[] ids, CollectionBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  void setParentInjector(String parentInjector) {
-    this.parentInjector = parentInjector;
-  }
-
-  ViewInjection getViewInjection(int id) {
-    return viewIdMap.get(id);
-  }
-
-  private ViewInjection getOrCreateViewInjection(int id) {
-    ViewInjection viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewInjection(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  String getFqcn() {
-    return classPackage + "." + className;
-  }
-
-  String brewJava() {
-    StringBuilder builder = new StringBuilder();
-    builder.append("// Generated code from Butter Knife. Do not modify!\n");
-    builder.append("package ").append(classPackage).append(";\n\n");
-
-    builder.append("import android.view.View;\n");
-    builder.append("import butterknife.ButterKnife.Finder;\n");
-    if (parentInjector == null) {
-      builder.append("import butterknife.ButterKnife.Injector;\n");
-    }
-    builder.append('\n');
-
-    builder.append("public class ").append(className);
-    builder.append("<T extends ").append(targetClass).append(">");
-
-    if (parentInjector != null) {
-      builder.append(" extends ").append(parentInjector).append("<T>");
-    } else {
-      builder.append(" implements Injector<T>");
-    }
-    builder.append(" {\n");
-
-    emitInject(builder);
-    builder.append('\n');
-    emitReset(builder);
-
-    builder.append("}\n");
-    return builder.toString();
-  }
-
-  private void emitInject(StringBuilder builder) {
-    builder.append("  @Override ")
-        .append("public void inject(final Finder finder, final T target, Object source) {\n");
-
-    // Emit a call to the superclass injector, if any.
-    if (parentInjector != null) {
-      builder.append("    super.inject(finder, target, source);\n\n");
-    }
-
-    // Local variable in which all views will be temporarily stored.
-    builder.append("    View view;\n");
-
-    // Loop over each view injection and emit it.
-    for (ViewInjection injection : viewIdMap.values()) {
-      emitViewInjection(builder, injection);
-    }
-
-    // Loop over each collection binding and emit it.
-    for (Map.Entry<CollectionBinding, int[]> entry : collectionBindings.entrySet()) {
-      emitCollectionBinding(builder, entry.getKey(), entry.getValue());
-    }
-
-    builder.append("  }\n");
-  }
-
-  private void emitCollectionBinding(StringBuilder builder, CollectionBinding binding, int[] ids) {
-    builder.append("    target.").append(binding.getName()).append(" = ");
-
-    switch (binding.getKind()) {
-      case ARRAY:
-        builder.append("Finder.arrayOf(");
-        break;
-      case LIST:
-        builder.append("Finder.listOf(");
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    for (int i = 0; i < ids.length; i++) {
-      if (i > 0) {
-        builder.append(',');
-      }
-      builder.append("\n        finder.<")
-          .append(binding.getType())
-          .append(">")
-          .append(binding.isRequired() ? "findRequiredView" : "findOptionalView")
-          .append("(source, ")
-          .append(ids[i])
-          .append(", \"");
-      emitHumanDescription(builder, Collections.singleton(binding));
-      builder.append("\")");
-    }
-
-    builder.append("\n    );\n");
-  }
-
-  private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
-    builder.append("    view = ");
-
-    List<Binding> requiredBindings = injection.getRequiredBindings();
-    if (requiredBindings.isEmpty()) {
-      builder.append("finder.findOptionalView(source, ")
-          .append(injection.getId())
-          .append(", null);\n");
-    } else {
-      if (injection.getId() == View.NO_ID) {
-        builder.append("target;\n");
-      } else {
-        builder.append("finder.findRequiredView(source, ")
-            .append(injection.getId())
-            .append(", \"");
-        emitHumanDescription(builder, requiredBindings);
-        builder.append("\");\n");
-      }
-    }
-
-    emitViewBindings(builder, injection);
-    emitListenerBindings(builder, injection);
-  }
-
-  private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
-    Collection<ViewBinding> viewBindings = injection.getViewBindings();
-    if (viewBindings.isEmpty()) {
-      return;
-    }
-
-    for (ViewBinding viewBinding : viewBindings) {
-      builder.append("    target.")
-          .append(viewBinding.getName())
-          .append(" = ");
-      if (viewBinding.requiresCast()) {
-        builder.append("finder.castView(view")
-            .append(", ")
-            .append(injection.getId())
-            .append(", \"");
-        emitHumanDescription(builder, viewBindings);
-        builder.append("\");\n");
-      } else {
-        builder.append("view;\n");
-      }
-    }
-  }
-
-  private void emitListenerBindings(StringBuilder builder, ViewInjection injection) {
-    Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> bindings =
-        injection.getListenerBindings();
-    if (bindings.isEmpty()) {
-      return;
-    }
-
-    String extraIndent = "";
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = injection.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      builder.append("    if (view != null) {\n");
-      extraIndent = "  ";
-    }
-
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> e
-        : bindings.entrySet()) {
-      ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<ListenerBinding>> methodBindings = e.getValue();
-
-      // Emit: ((OWNER_TYPE) view).SETTER_NAME(
-      boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
-      builder.append(extraIndent)
-          .append("    ");
-      if (needsCast) {
-        builder.append("((").append(listener.targetType());
-        if (listener.genericArguments() > 0) {
-          builder.append('<');
-          for (int i = 0; i < listener.genericArguments(); i++) {
-            if (i > 0) {
-              builder.append(", ");
-            }
-            builder.append('?');
-          }
-          builder.append('>');
-        }
-        builder.append(") ");
-      }
-      builder.append("view");
-      if (needsCast) {
-        builder.append(')');
-      }
-      builder.append('.')
-          .append(listener.setter())
-          .append("(\n");
-
-      // Emit: new TYPE() {
-      builder.append(extraIndent)
-          .append("      new ")
-          .append(listener.type())
-          .append("() {\n");
-
-      for (ListenerMethod method : getListenerMethods(listener)) {
-        // Emit: @Override public RETURN_TYPE METHOD_NAME(
-        builder.append(extraIndent)
-            .append("        @Override public ")
-            .append(method.returnType())
-            .append(' ')
-            .append(method.name())
-            .append("(\n");
-
-        // Emit listener method arguments, each on their own line.
-        String[] parameterTypes = method.parameters();
-        for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          builder.append(extraIndent)
-              .append("          ")
-              .append(parameterTypes[i])
-              .append(" p")
-              .append(i);
-          if (i < count - 1) {
-            builder.append(',');
-          }
-          builder.append('\n');
-        }
-
-        // Emit end of parameters, start of body.
-        builder.append(extraIndent).append("        ) {\n");
-
-        // Set up the return statement, if needed.
-        builder.append(extraIndent).append("          ");
-        boolean hasReturnType = !"void".equals(method.returnType());
-        if (hasReturnType) {
-          builder.append("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          Set<ListenerBinding> set = methodBindings.get(method);
-          Iterator<ListenerBinding> iterator = set.iterator();
-
-          while (iterator.hasNext()) {
-            ListenerBinding binding = iterator.next();
-            builder.append("target.").append(binding.getName()).append('(');
-            List<Parameter> parameters = binding.getParameters();
-            String[] listenerParameters = method.parameters();
-            for (int i = 0, count = parameters.size(); i < count; i++) {
-              Parameter parameter = parameters.get(i);
-              int listenerPosition = parameter.getListenerPosition();
-
-              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.append("finder.<")
-                    .append(parameter.getType())
-                    .append(">castParam(p")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(method.name())
-                    .append("\", ")
-                    .append(listenerPosition)
-                    .append(", \"")
-                    .append(binding.getName())
-                    .append("\", ")
-                    .append(i)
-                    .append(")");
-              } else {
-                builder.append('p').append(listenerPosition);
-              }
-
-              if (i < count - 1) {
-                builder.append(", ");
-              }
-            }
-            builder.append(");");
-            if (iterator.hasNext()) {
-              builder.append("\n").append("          ");
-            }
-          }
-        } else if (hasReturnType) {
-          builder.append(method.defaultReturn()).append(';');
-        }
-        builder.append('\n');
-
-        // Emit end of listener method.
-        builder.append(extraIndent).append("        }\n");
-      }
-
-      // Emit end of listener class body and close the setter method call.
-      builder.append(extraIndent).append("      });\n");
-    }
-
-    if (needsNullChecked) {
-      builder.append("    }\n");
-    }
-  }
-
-  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
-    if (listener.method().length == 1) {
-      return Arrays.asList(listener.method());
-    }
-
-    try {
-      List<ListenerMethod> methods = new ArrayList<ListenerMethod>();
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
-        Field callbackField = callbacks.getField(callbackMethod.name());
-        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-        if (method == null) {
-          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-        }
-        methods.add(method);
-      }
-      return methods;
-    } catch (NoSuchFieldException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  private void emitReset(StringBuilder builder) {
-    builder.append("  @Override public void reset(T target) {\n");
-    if (parentInjector != null) {
-      builder.append("    super.reset(target);\n\n");
-    }
-    for (ViewInjection injection : viewIdMap.values()) {
-      for (ViewBinding viewBinding : injection.getViewBindings()) {
-        builder.append("    target.").append(viewBinding.getName()).append(" = null;\n");
-      }
-    }
-    for (CollectionBinding collectionBinding : collectionBindings.keySet()) {
-      builder.append("    target.").append(collectionBinding.getName()).append(" = null;\n");
-    }
-    builder.append("  }\n");
-  }
-
-  static void emitHumanDescription(StringBuilder builder, Collection<? extends Binding> bindings) {
-    Iterator<? extends Binding> iterator = bindings.iterator();
-    switch (bindings.size()) {
-      case 1:
-        builder.append(iterator.next().getDescription());
-        break;
-      case 2:
-        builder.append(iterator.next().getDescription())
-            .append(" and ")
-            .append(iterator.next().getDescription());
-        break;
-      default:
-        for (int i = 0, count = bindings.size(); i < count; i++) {
-          if (i != 0) {
-            builder.append(", ");
-          }
-          if (i == count - 1) {
-            builder.append("and ");
-          }
-          builder.append(iterator.next().getDescription());
-        }
-        break;
-    }
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index 2770d490..bfa469fb 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -1,12 +1,12 @@
 /**
- * View "injection" library for Android which uses annotation processing to generate boilerplate
- * code for you.
+ * Field and method binding for Android views which uses annotation processing to generate
+ * boilerplate code for you.
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.InjectView @InjectView} on fields.</li>
- * <li>Group multiple views in a {@linkplain java.util.List list} using
- * {@link butterknife.InjectViews @InjectViews}. Operate on all of them at once with
+ * {@link butterknife.Bind @Bind} on fields.</li>
+ * <li>Group multiple views in a {@linkplain java.util.List list} or array.
+ * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
  * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
  * butterknife.ButterKnife.Setter, Object) setters}, or
@@ -14,6 +14,7 @@
  * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
+ * <li>Eliminate resource lookups by using resource annotations on fields.</li>
  * </ul>
  */
 package butterknife;
diff --git a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
deleted file mode 100644
index dda8ba87..00000000
--- a/butterknife/src/main/resources/META-INF/services/javax.annotation.processing.Processor
+++ /dev/null
@@ -1 +0,0 @@
-butterknife.internal.ButterKnifeProcessor
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index 7901ca93..4798d698 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -1,6 +1,7 @@
 package butterknife;
 
 import android.app.Activity;
+import android.support.annotation.NonNull;
 import android.util.Property;
 import android.view.View;
 import java.util.Arrays;
@@ -13,11 +14,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import static butterknife.ButterKnife.Finder.arrayOf;
-import static butterknife.ButterKnife.Finder.listOf;
-import static org.fest.assertions.api.ANDROID.assertThat;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.entry;
+import static com.google.common.truth.Truth.assertThat;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -34,122 +31,225 @@
       };
   private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
       new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(View view, Boolean value, int index) {
+        @Override public void set(@NonNull View view, Boolean value, int index) {
           view.setEnabled(value);
         }
       };
   private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(View view, int index) {
+    @Override public void apply(@NonNull View view, int index) {
       view.setEnabled(false);
     }
   };
+  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
+    @Override public void apply(@NonNull View view, int index) {
+      view.setAlpha(0f);
+    }
+  };
 
-  @Before @After // Clear out cache of injectors and resetters before and after each test.
+  @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.INJECTORS.clear();
+    ButterKnife.BINDERS.clear();
   }
 
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
+  @Test public void propertyAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view.isEnabled()).isTrue();
 
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
+    ButterKnife.apply(view, PROPERTY_ENABLED, false);
+    assertThat(view.isEnabled()).isFalse();
   }
 
-  @Test public void propertyAppliedToEveryView() {
+  @Test public void propertyAppliedToEveryViewInList() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
     View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
     ButterKnife.apply(views, PROPERTY_ENABLED, false);
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInArray() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view.isEnabled()).isTrue();
+
+    ButterKnife.apply(view, ACTION_DISABLE);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view.isEnabled()).isTrue();
+    assertThat(view.getAlpha()).isEqualTo(1f);
+
+    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+    assertThat(view.isEnabled()).isFalse();
+    assertThat(view.getAlpha()).isEqualTo(0f);
   }
 
-  @Test public void actionAppliedToEveryView() {
+  @Test public void actionAppliedToEveryViewInList() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
     View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
     List<View> views = Arrays.asList(view1, view2, view3);
     ButterKnife.apply(views, ACTION_DISABLE);
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToEveryViewInArray() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
-  @Test public void setterAppliedToEveryView() {
+  @Test public void actionsAppliedToEveryViewInList() {
     View view1 = new View(Robolectric.application);
     View view2 = new View(Robolectric.application);
     View view3 = new View(Robolectric.application);
-    assertThat(view1).isEnabled();
-    assertThat(view2).isEnabled();
-    assertThat(view3).isEnabled();
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
 
     List<View> views = Arrays.asList(view1, view2, view3);
-    ButterKnife.apply(views, SETTER_ENABLED, false);
+    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
 
-    assertThat(view1).isDisabled();
-    assertThat(view2).isDisabled();
-    assertThat(view3).isDisabled();
+  @Test public void actionsAppliedToEveryViewInArray() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
   }
 
-  @Test public void zeroInjectionsInjectDoesNotThrowException() {
-    class Example {
-    }
+  @Test public void setterAppliedToView() {
+    View view = new View(Robolectric.application);
+    assertThat(view.isEnabled()).isTrue();
 
-    Example example = new Example();
-    ButterKnife.inject(example, null, null);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_INJECTOR));
+    ButterKnife.apply(view, SETTER_ENABLED, false);
+
+    assertThat(view.isEnabled()).isFalse();
   }
 
-  @Test public void zeroInjectionsResetDoesNotThrowException() {
-    class Example {
-    }
+  @Test public void setterAppliedToEveryViewInList() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
 
-    Example example = new Example();
-    ButterKnife.reset(example);
-    assertThat(ButterKnife.INJECTORS).contains(entry(Example.class, ButterKnife.NOP_INJECTOR));
+    List<View> views = Arrays.asList(view1, view2, view3);
+    ButterKnife.apply(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
-  @Test public void injectingKnownPackagesIsNoOp() {
-    ButterKnife.inject(new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
-    ButterKnife.inject(new Object(), new Activity());
-    assertThat(ButterKnife.INJECTORS).isEmpty();
+  @Test public void setterAppliedToEveryViewInArray() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ButterKnife.apply(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
   }
 
-  @Test public void finderThrowsNiceError() {
+  @Test public void bindingViewReturnsView() {
     View view = new View(Robolectric.application);
-    try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view 'button1' with ID "
-          + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
+
+    View one = ButterKnife.bind(view);
+    assertThat(one).isSameAs(view);
+
+    View two = ButterKnife.bind(new Object(), view);
+    assertThat(two).isSameAs(view);
+  }
+
+  @Test public void zeroBindingsBindDoesNotThrowException() {
+    class Example {
     }
+
+    Example example = new Example();
+    ButterKnife.bind(example, null, null);
+    assertThat(ButterKnife.BINDERS).containsEntry(Example.class, ButterKnife.NOP_VIEW_BINDER);
+  }
+
+  @Test public void bindingKnownPackagesIsNoOp() {
+    ButterKnife.bind(new Activity());
+    assertThat(ButterKnife.BINDERS).isEmpty();
+    ButterKnife.bind(new Object(), new Activity());
+    assertThat(ButterKnife.BINDERS).isEmpty();
   }
 }
diff --git a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java b/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
deleted file mode 100644
index 2d85949d..00000000
--- a/butterknife/src/test/java/butterknife/internal/AllTheThingsTest.java
+++ /dev/null
@@ -1,399 +0,0 @@
-package butterknife.internal;
-
-import android.text.Editable;
-import android.view.KeyEvent;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.CompoundButton;
-import android.widget.TextView;
-import butterknife.InjectView;
-import butterknife.InjectViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.Nullable;
-import com.google.common.io.Files;
-import com.google.testing.compile.JavaFileObjects;
-import java.io.File;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.List;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-@SuppressWarnings("UnusedDeclaration")
-public class AllTheThingsTest {
-  @Test public void allTheThings() throws IOException {
-    File file = new File("src/test/java/butterknife/internal/AllTheThingsTest.java");
-    String content = Files.toString(file, StandardCharsets.UTF_8);
-
-    ASSERT.about(javaSource())
-        .that(JavaFileObjects.forSourceString("butterknife.internal.AllTheThingsTest", content))
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @InjectView(10) View injectView;
-  @Nullable @InjectView(20) View optinalInjectView;
-
-  @InjectView(30) TextView injectTextView;
-  @Nullable @InjectView(40) TextView optinalInjectTextView;
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @InjectViews(50) List<View> injectViewsListOne;
-  @InjectViews({ 60, 70 }) List<View> injectViewsListMultiple;
-
-  @InjectViews(80) List<TextView> injectTextViewsListOne;
-  @InjectViews({ 90, 100 }) List<TextView> injectTextViewsListMultiple;
-
-  @InjectViews(110) View[] injectViewsArrayOne;
-  @InjectViews({ 120, 130 }) View[] injectViewsArrayMultiple;
-
-  @InjectViews(140) TextView[] injectTextViewsArrayOne;
-  @InjectViews({ 150, 160 }) TextView[] injectTextViewsArrayMultiple;
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnCheckedChanged(170)
-  void checkedChanged() {}
-  @OnCheckedChanged(180)
-  void checkedChanged(CompoundButton one) {}
-  @OnCheckedChanged(190)
-  void checkedChanged(boolean two) {}
-  @OnCheckedChanged(200)
-  void checkedChanged(CompoundButton one, boolean two) {}
-
-  @OnCheckedChanged({ 210, 220 })
-  void checkedChangedMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnClick(240)
-  void click() {}
-  @OnClick(250)
-  void click(View one) {}
-
-  @OnClick({ 260, 270 })
-  void clickMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnEditorAction(290)
-  boolean editorAction() { return false; }
-  @OnEditorAction(300)
-  boolean editorAction(TextView one) { return false; }
-  @OnEditorAction(310)
-  boolean editorAction(int one) { return false; }
-  @OnEditorAction(320)
-  boolean editorAction(KeyEvent one) { return false; }
-  @OnEditorAction(330)
-  boolean editorAction(TextView one, int two) { return false; }
-  @OnEditorAction(340)
-  boolean editorAction(TextView one, KeyEvent two) { return false; }
-  @OnEditorAction(350)
-  boolean editorAction(int one, KeyEvent two) { return false; }
-  @OnEditorAction(360)
-  boolean editorAction(TextView one, int two, KeyEvent three) { return false; }
-
-  @OnEditorAction({ 370, 380 })
-  boolean editorActionMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnFocusChange(400)
-  void focusChange() {}
-  @OnFocusChange(410)
-  void focusChange(View one) {}
-  @OnFocusChange(420)
-  void focusChange(boolean one) {}
-  @OnFocusChange(430)
-  void focusChange(View one, boolean two) {}
-
-  @OnFocusChange({ 440, 450 })
-  void focusChangeMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemClick(470)
-  void itemClick() {}
-  @OnItemClick(480)
-  void itemClick(AdapterView<?> one) {}
-  @OnItemClick(490)
-  void itemClick(View one) {}
-  @OnItemClick(500)
-  void itemClick(int one) {}
-  @OnItemClick(510)
-  void itemClick(long one) {}
-  @OnItemClick(520)
-  void itemClick(AdapterView<?> one, View two) {}
-  @OnItemClick(530)
-  void itemClick(AdapterView<?> one, int two) {}
-  @OnItemClick(540)
-  void itemClick(AdapterView<?> one, long two) {}
-  @OnItemClick(550)
-  void itemClick(View one, long two) {}
-  @OnItemClick(560)
-  void itemClick(int one, long two) {}
-  @OnItemClick(570)
-  void itemClick(AdapterView<?> one, View two, int three) {}
-  @OnItemClick(580)
-  void itemClick(AdapterView<?> one, View two, long three) {}
-  @OnItemClick(590)
-  void itemClick(AdapterView<?> one, int two, long three) {}
-  @OnItemClick(600)
-  void itemClick(View one, int two, long three) {}
-  @OnItemClick(610)
-  void itemClick(AdapterView<?> one, View two, int three, long four) {}
-
-  @OnItemClick({ 620, 630 })
-  void itemClickMultiple() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemLongClick(650)
-  boolean itemLongClick() { return false; }
-  @OnItemLongClick(660)
-  boolean itemLongClick(AdapterView<?> one) { return false; }
-  @OnItemLongClick(670)
-  boolean itemLongClick(View one) { return false; }
-  @OnItemLongClick(680)
-  boolean itemLongClick(int one) { return false; }
-  @OnItemLongClick(690)
-  boolean itemLongClick(long one) { return false; }
-  @OnItemLongClick(700)
-  boolean itemLongClick(AdapterView<?> one, View two) { return false; }
-  @OnItemLongClick(710)
-  boolean itemLongClick(AdapterView<?> one, int two) { return false; }
-  @OnItemLongClick(720)
-  boolean itemLongClick(AdapterView<?> one, long two) { return false; }
-  @OnItemLongClick(730)
-  boolean itemLongClick(View one, long two) { return false; }
-  @OnItemLongClick(740)
-  boolean itemLongClick(int one, long two) { return false; }
-  @OnItemLongClick(750)
-  boolean itemLongClick(AdapterView<?> one, View two, int three) { return false; }
-  @OnItemLongClick(760)
-  boolean itemLongClick(AdapterView<?> one, View two, long three) { return false; }
-  @OnItemLongClick(770)
-  boolean itemLongClick(AdapterView<?> one, int two, long three) { return false; }
-  @OnItemLongClick(780)
-  boolean itemLongClick(View one, int two, long three) { return false; }
-  @OnItemLongClick(790)
-  boolean itemLongClick(AdapterView<?> one, View two, int three, long four) { return false; }
-
-  @OnItemLongClick({ 800, 810 })
-  boolean itemLongClickMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnItemSelected(830)
-  void itemSelected() {}
-  @OnItemSelected(840)
-  void itemSelected(AdapterView<?> one) {}
-  @OnItemSelected(850)
-  void itemSelected(View one) {}
-  @OnItemSelected(860)
-  void itemSelected(int one) {}
-  @OnItemSelected(870)
-  void itemSelected(long one) {}
-  @OnItemSelected(880)
-  void itemSelected(AdapterView<?> one, View two) {}
-  @OnItemSelected(890)
-  void itemSelected(AdapterView<?> one, int two) {}
-  @OnItemSelected(900)
-  void itemSelected(AdapterView<?> one, long two) {}
-  @OnItemSelected(910)
-  void itemSelected(View one, long two) {}
-  @OnItemSelected(920)
-  void itemSelected(int one, long two) {}
-  @OnItemSelected(930)
-  void itemSelected(AdapterView<?> one, View two, int three) {}
-  @OnItemSelected(940)
-  void itemSelected(AdapterView<?> one, View two, long three) {}
-  @OnItemSelected(950)
-  void itemSelected(AdapterView<?> one, int two, long three) {}
-  @OnItemSelected(960)
-  void itemSelected(View one, int two, long three) {}
-  @OnItemSelected(970)
-  void itemSelected(AdapterView<?> one, View two, int three, long four) {}
-
-  @OnItemSelected({ 980, 990 })
-  void itemSelectedMultiple() {}
-  @OnItemSelected(value = { 1000, 1010 }, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelectedMultiple() {}
-
-  @OnItemSelected(value = 1020, callback = OnItemSelected.Callback.ITEM_SELECTED)
-  void itemSelectedQualifiedDefault() {}
-
-  @OnItemSelected(value = 1030, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelected() {}
-  @OnItemSelected(value = 1040, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelected(AdapterView<?> one) {}
-
-  @OnItemSelected(1050)
-  void itemSelectedBothMethods() {}
-  @OnItemSelected(value = 1050, callback = OnItemSelected.Callback.NOTHING_SELECTED)
-  void nothingSelectedBothMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnLongClick(1060)
-  boolean longClick() { return false; }
-  @OnLongClick(1070)
-  boolean longClick(View one) { return false; }
-
-  @OnLongClick({ 1080, 1090 })
-  boolean longClickMultiple() { return false; }
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnPageChange(1110)
-  void pageChange() {}
-  @OnPageChange(1120)
-  void pageChange(int one) {}
-
-  @OnPageChange({ 1130, 1140 })
-  void pageChangeMultiple() {}
-
-  @OnPageChange(value = 1150, callback = OnPageChange.Callback.PAGE_SELECTED)
-  void pageChangeQualifiedDefault() {}
-
-  @OnPageChange(value = 1160, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled() {}
-  @OnPageChange(value = 1170, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one) {}
-  @OnPageChange(value = 1180, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(float two) {}
-  // A single-argument method matching the third parameter can't happen.
-  //@OnPageChange(value = 1190, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  //void pageScrolled(int three) {}
-  @OnPageChange(value = 1200, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one, float two) {}
-  @OnPageChange(value = 1210, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(float one, int two) {}
-  @OnPageChange(value = 1220, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolled(int one, float two, int three) {}
-
-  @OnPageChange(value = { 1230, 1240 }, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledMultiple() {}
-
-  @OnPageChange(value = 1250, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChanged() {}
-  @OnPageChange(value = 1260, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChanged(int one) {}
-
-  @OnPageChange(value = { 1270, 1280 }, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedMultiple() {}
-
-  @OnPageChange(1290)
-  void pageChangeFirstTwoMethods() {}
-  @OnPageChange(value = 1290, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledFirstTwoMethods() {}
-
-  @OnPageChange(value = 1300, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledSecondTwoMethods() {}
-  @OnPageChange(value = 1300, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedSecondTwoMethods() {}
-
-  @OnPageChange(1310)
-  void pageChangeOuterTwoMethods() {}
-  @OnPageChange(value = 1310, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedOuterTwoMethods() {}
-
-  @OnPageChange(1320)
-  void pageChangeAllMethods() {}
-  @OnPageChange(value = 1320, callback = OnPageChange.Callback.PAGE_SCROLLED)
-  void pageScrolledAllMethods() {}
-  @OnPageChange(value = 1320, callback = OnPageChange.Callback.PAGE_SCROLL_STATE_CHANGED)
-  void pageScrollStateChangedAllMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-
-  @OnTextChanged(1330)
-  void textChanged() {}
-  @OnTextChanged(1340)
-  void textChanged(CharSequence one) {}
-  @OnTextChanged(1350)
-  void textChanged(int one) {}
-  @OnTextChanged(1360)
-  void textChanged(CharSequence one, int two) {}
-  @OnTextChanged(1370)
-  void textChanged(int one, int two) {}
-  @OnTextChanged(1380)
-  void textChanged(CharSequence one, int two, int three) {}
-  @OnTextChanged(1390)
-  void textChanged(int one, int two, int three) {}
-  @OnTextChanged(1400)
-  void textChanged(CharSequence one, int two, int three, int four) {}
-
-  @OnTextChanged({ 1410, 1420 })
-  void textChangedMultiple() {}
-
-  @OnTextChanged(value = 1430, callback = OnTextChanged.Callback.TEXT_CHANGED)
-  void textChangedQualifiedDefault() {}
-
-  @OnTextChanged(value = 1440, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged() {}
-  @OnTextChanged(value = 1450, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one) {}
-  @OnTextChanged(value = 1460, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one) {}
-  @OnTextChanged(value = 1470, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two) {}
-  @OnTextChanged(value = 1480, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one, int two) {}
-  @OnTextChanged(value = 1490, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two, int three) {}
-  @OnTextChanged(value = 1500, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(int one, int two, int three) {}
-  @OnTextChanged(value = 1510, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChanged(CharSequence one, int two, int three, int four) {}
-
-  @OnTextChanged(value = { 1520, 1530 }, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedMultiple() {}
-
-  @OnTextChanged(value = 1540, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChanged() {}
-  @OnTextChanged(value = 1550, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChanged(Editable one) {}
-
-  @OnTextChanged(value = { 1560, 1570}, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedMultiple() {}
-
-  @OnTextChanged(1580)
-  void textChangedFirstTwoMethods() {}
-  @OnTextChanged(value = 1580, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedFirstTwoMethods() {}
-
-  @OnTextChanged(value = 1590, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedSecondTwoMethods() {}
-  @OnTextChanged(value = 1590, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedSecondTwoMethods() {}
-
-  @OnTextChanged(1600)
-  void textChangedOuterTwoMethods() {}
-  @OnTextChanged(value = 1600, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedOuterTwoMethods() {}
-
-  @OnTextChanged(1610)
-  void textChangedAllMethods() {}
-  @OnTextChanged(value = 1610, callback = OnTextChanged.Callback.BEFORE_TEXT_CHANGED)
-  void beforeTextChangedAllMethods() {}
-  @OnTextChanged(value = 1610, callback = OnTextChanged.Callback.AFTER_TEXT_CHANGED)
-  void afterTextChangedAllMethods() {}
-
-  /////////////////////////////////////////////////////////////////////////////////////////////////
-}
diff --git a/butterknife/src/test/java/butterknife/internal/FinderTest.java b/butterknife/src/test/java/butterknife/internal/FinderTest.java
new file mode 100644
index 00000000..7b0ed113
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/FinderTest.java
@@ -0,0 +1,41 @@
+package butterknife.internal;
+
+import android.view.View;
+import butterknife.shadow.EditModeShadowView;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public final class FinderTest {
+  @Test public void finderThrowsNiceError() {
+    View view = new View(Robolectric.application);
+    try {
+      Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view 'button1' with ID "
+          + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  @Config(shadows = EditModeShadowView.class)
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    View view = new View(Robolectric.application);
+    try {
+      Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
deleted file mode 100644
index 9163e1e1..00000000
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ /dev/null
@@ -1,606 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class InjectViewTest {
-  @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) View thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @InjectView(1) TestInterface thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.InjectView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @InjectView(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
-            "    target.thing1 = view;",
-            "    view.setOnClickListener(",
-            "      new butterknife.internal.DebouncingOnClickListener() {",
-            "        @Override public void doClick(",
-            "          android.view.View p0",
-            "        ) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing1 = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) public View thing1;",
-        "  @InjectView(2) View thing2;",
-        "  @InjectView(3) protected View thing3;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError();
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.Nullable;",
-        "public class Test extends Activity {",
-        "  @Nullable @InjectView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullableExternalPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import java.lang.annotation.Retention;",
-        "import java.lang.annotation.Target;",
-        "import static java.lang.annotation.ElementType.FIELD;",
-        "import static java.lang.annotation.ElementType.METHOD;",
-        "import static java.lang.annotation.RetentionPolicy.CLASS;",
-        "public class Test extends Activity {",
-        "  @Retention(CLASS) @Target({ FIELD, METHOD })",
-        "  @interface Nullable {",
-        "  }",
-        "  @Nullable @InjectView(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @InjectView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
-            "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    super.inject(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    super.reset(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test<T> extends Activity {",
-        "  @InjectView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @InjectView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.view = null;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
-            "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    super.inject(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    super.reset(target);",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  @InjectView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  @InjectView(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @InjectView(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "  @InjectView(1) String thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public interface Test {",
-        "    @InjectView(1) View thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectView fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) private View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) static View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectView fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfBothAnnotations() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) @InjectViews(1) View thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one of @InjectView and @InjectViews is allowed. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfAlreadyInjected() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectView;",
-        "public class Test extends Activity {",
-        "    @InjectView(1) View thing1;",
-        "    @InjectView(1) View thing2;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "Attempt to use @InjectView for an already injected ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsRootViewInjectionWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining((
-            "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(6);
-  }
-
-  @Test public void failsOptionalRootViewInjection() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.Nullable;",
-            "import butterknife.OnClick;",
-            "public class Test extends View {",
-            "  @Nullable @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    ASSERT.about(javaSource())
-        .that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            ("ID free injection must not be annotated with @Nullable. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
deleted file mode 100644
index 9c4bdb41..00000000
--- a/butterknife/src/test/java/butterknife/internal/InjectViewsTest.java
+++ /dev/null
@@ -1,510 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class InjectViewsTest {
-  @Test public void injectingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.InjectViews;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.arrayOf(",
-            "        finder.<android.widget.TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.widget.TextView>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @InjectViews({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<test.Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void injectingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @InjectViews({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import butterknife.Nullable;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Nullable @InjectViews({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Finder.listOf(",
-            "        finder.<android.view.View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<android.view.View>findOptionalView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "    target.thing = null;",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @InjectViews({}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @InjectViews(1) List thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @InjectViews(1) Deque<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @InjectViews(1) List<String> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;", "import android.app.Activity;", "import butterknife.InjectViews;",
-        "public class Test extends Activity {", "  @InjectViews(1) String[] thing;", "}"));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test {",
-        "  @InjectViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "public class Test {",
-        "  @InjectViews(1) View[] thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @InjectViews(1) List<View> thing;",
-        "  }",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public interface Test {",
-        "    @InjectViews(1) List<View> thing = null;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews(1) private List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews(1) static List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining("@InjectViews fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.InjectViews;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @InjectViews({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .failsToCompile()
-        .withErrorContaining(
-            "@InjectViews annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
deleted file mode 100644
index b6cc753e..00000000
--- a/butterknife/src/test/java/butterknife/internal/OnItemSelectedTest.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package butterknife.internal;
-
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;
-import static com.google.common.truth.Truth.ASSERT;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
-public class OnItemSelectedTest {
-  @Test public void defaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.doStuff();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nonDefaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void allMethods() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1)",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void multipleBindingPermutation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected({ 1, 2 })",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife.Finder;",
-            "import butterknife.ButterKnife.Injector;",
-            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "          target.onItemSelected();",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "        }",
-            "      });",
-            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((android.widget.AdapterView<?>) view).setOnItemSelectedListener(",
-            "      new android.widget.AdapterView.OnItemSelectedListener() {",
-            "        @Override public void onItemSelected(",
-            "            android.widget.AdapterView<?> p0, android.view.View p1, int p2, long p3) {",
-            "        }",
-            "        @Override public void onNothingSelected(",
-            "            android.widget.AdapterView<?> p0) {",
-            "          target.onNothingSelected();",
-            "        }",
-            "      });",
-            "  }",
-            "  @Override public void reset(T target) {",
-            "  }",
-            "}"
-        ));
-
-    ASSERT.about(javaSource()).that(source)
-        .processedWith(butterknifeProcessors())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java b/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
deleted file mode 100644
index 92f7ca42..00000000
--- a/butterknife/src/test/java/butterknife/internal/ProcessorTestUtilities.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package butterknife.internal;
-
-import java.util.Arrays;
-import javax.annotation.processing.Processor;
-
-final class ProcessorTestUtilities {
-  static Iterable<? extends Processor> butterknifeProcessors() {
-    return Arrays.asList(
-        new ButterKnifeProcessor()
-    );
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/UtilsTest.java b/butterknife/src/test/java/butterknife/internal/UtilsTest.java
new file mode 100644
index 00000000..3608c8e3
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/internal/UtilsTest.java
@@ -0,0 +1,29 @@
+package butterknife.internal;
+
+import org.junit.Test;
+
+import static butterknife.internal.Utils.arrayOf;
+import static butterknife.internal.Utils.listOf;
+import static com.google.common.truth.Truth.assertThat;
+
+public final class UtilsTest {
+  @Test public void listOfFiltersNull() {
+    assertThat(listOf(null, null, null)).isEmpty();
+    assertThat(listOf("One", null, null)).containsExactly("One");
+    assertThat(listOf(null, "One", null)).containsExactly("One");
+    assertThat(listOf(null, null, "One")).containsExactly("One");
+    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayOf(null, null, null)).isEmpty();
+    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java b/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
deleted file mode 100644
index 46ca7932..00000000
--- a/butterknife/src/test/java/butterknife/internal/ViewInjectorTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package butterknife.internal;
-
-import org.junit.Test;
-
-import static butterknife.internal.ViewInjector.emitHumanDescription;
-import static java.util.Arrays.asList;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class ViewInjectorTest {
-  @Test public void humanDescriptionJoinWorks() {
-    Binding one = new TestBinding("one");
-    Binding two = new TestBinding("two");
-    Binding three = new TestBinding("three");
-
-    StringBuilder builder1 = new StringBuilder();
-    emitHumanDescription(builder1, asList(one));
-    assertThat(builder1.toString()).isEqualTo("one");
-
-    StringBuilder builder2 = new StringBuilder();
-    emitHumanDescription(builder2, asList(one, two));
-    assertThat(builder2.toString()).isEqualTo("one and two");
-
-    StringBuilder builder3 = new StringBuilder();
-    emitHumanDescription(builder3, asList(one, two, three));
-    assertThat(builder3.toString()).isEqualTo("one, two, and three");
-  }
-
-  private static class TestBinding implements Binding {
-    private final String description;
-
-    private TestBinding(String description) {
-      this.description = description;
-    }
-
-    @Override public String getDescription() {
-      return description;
-    }
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
new file mode 100644
index 00000000..e4fd9951
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
@@ -0,0 +1,18 @@
+package butterknife.shadow;
+
+import android.view.View;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowView;
+
+/**
+ * Behaves just like standard Robolectric views, but always reports that it is in Edit Mode.
+ */
+@Implements(View.class)
+public class EditModeShadowView extends ShadowView {
+  @SuppressWarnings("UnusedDeclaration")
+  @Implementation
+  public boolean isInEditMode() {
+    return true;
+  }
+}
diff --git a/checkstyle.xml b/checkstyle.xml
index 73070a8a..6d840642 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -27,7 +27,7 @@
   </module>
 
   <module name="TreeWalker">
-    <property name="cacheFile" value="${checkstyle.cache.file}"/>
+    <!--<property name="cacheFile" value="${checkstyle.cache.file}"/>-->
 
     <!-- Checks for Javadoc comments.                     -->
     <!-- See http://checkstyle.sf.net/config_javadoc.html -->
@@ -108,7 +108,7 @@
     <!-- See http://checkstyle.sf.net/config_coding.html -->
     <!--<module name="AvoidInlineConditionals"/>-->
     <module name="CovariantEquals"/>
-    <module name="DoubleCheckedLocking"/>
+    <!--<module name="DoubleCheckedLocking"/>-->
     <module name="EmptyStatement"/>
     <module name="EqualsAvoidNull"/>
     <module name="EqualsHashCode"/>
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 00000000..7167b693
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,16 @@
+GROUP=com.jakewharton
+VERSION_NAME=8.0.0-SNAPSHOT
+
+POM_DESCRIPTION=Field and method binding for Android views.
+
+POM_URL=https://github.com/JakeWharton/butterknife/
+POM_SCM_URL=https://github.com/JakeWharton/butterknife/
+POM_SCM_CONNECTION=scm:git:git://github.com/JakeWharton/butterknife.git
+POM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/JakeWharton/butterknife.git
+
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+
+POM_DEVELOPER_ID=jakewharton
+POM_DEVELOPER_NAME=Jake Wharton
diff --git a/gradle/gradle-mvn-push.gradle b/gradle/gradle-mvn-push.gradle
new file mode 100644
index 00000000..ea3f6bbb
--- /dev/null
+++ b/gradle/gradle-mvn-push.gradle
@@ -0,0 +1,218 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+version = VERSION_NAME
+group = GROUP
+
+def isReleaseBuild() {
+  return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+      : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
+}
+
+def getRepositoryPassword() {
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
+}
+
+afterEvaluate { project ->
+  uploadArchives {
+    repositories {
+      mavenDeployer {
+        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        repository(url: getReleaseRepositoryUrl()) {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+        snapshotRepository(url: getSnapshotRepositoryUrl()) {
+          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+        }
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+  }
+
+  signing {
+    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+    sign configurations.archives
+  }
+
+  if (project.getPlugins().hasPlugin('com.android.application') ||
+      project.getPlugins().hasPlugin('com.android.library')) {
+    task install(type: Upload, dependsOn: assemble) {
+      repositories.mavenInstaller {
+        configuration = configurations.archives
+
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task androidJavadocs(type: Javadoc) {
+      source = android.sourceSets.main.java.source
+      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    }
+
+    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+      classifier = 'javadoc'
+      from androidJavadocs.destinationDir
+    }
+
+    task androidSourcesJar(type: Jar) {
+      classifier = 'sources'
+      from android.sourceSets.main.java.source
+    }
+  } else {
+    install {
+      repositories.mavenInstaller {
+        pom.groupId = GROUP
+        pom.artifactId = POM_ARTIFACT_ID
+        pom.version = VERSION_NAME
+
+        pom.project {
+          name POM_NAME
+          packaging POM_PACKAGING
+          description POM_DESCRIPTION
+          url POM_URL
+
+          scm {
+            url POM_SCM_URL
+            connection POM_SCM_CONNECTION
+            developerConnection POM_SCM_DEV_CONNECTION
+          }
+
+          licenses {
+            license {
+              name POM_LICENCE_NAME
+              url POM_LICENCE_URL
+              distribution POM_LICENCE_DIST
+            }
+          }
+
+          developers {
+            developer {
+              id POM_DEVELOPER_ID
+              name POM_DEVELOPER_NAME
+            }
+          }
+        }
+      }
+    }
+
+    task sourcesJar(type: Jar, dependsOn:classes) {
+      classifier = 'sources'
+      from sourceSets.main.allSource
+    }
+
+    task javadocJar(type: Jar, dependsOn:javadoc) {
+      classifier = 'javadoc'
+      from javadoc.destinationDir
+    }
+  }
+
+  if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+      tasks.withType(Javadoc) {
+        options.addStringOption('Xdoclint:none', '-quiet')
+      }
+    }
+  }
+
+  artifacts {
+    if (project.getPlugins().hasPlugin('com.android.application') ||
+        project.getPlugins().hasPlugin('com.android.library')) {
+      archives androidSourcesJar
+      archives androidJavadocsJar
+    } else {
+      archives sourcesJar
+      archives javadocJar
+    }
+  }
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..8c0fb64a
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..ce09d606
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index 686e9c96..00000000
--- a/pom.xml
+++ /dev/null
@@ -1,160 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife-parent</artifactId>
-  <version>6.1.1-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Butter Knife (Parent)</name>
-  <description>View "injection" for Android.</description>
-  <url>http://github.com/JakeWharton/butterknife/</url>
-  <inceptionYear>2013</inceptionYear>
-
-  <modules>
-    <module>butterknife</module>
-    <module>butterknife-sample</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-
-    <java.version>1.6</java.version>
-    <fest.version>2.0M10</fest.version>
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <junit.version>4.10</junit.version>
-    <robolectric.version>2.2</robolectric.version>
-    <fest.android.version>1.0.7</fest.android.version>
-    <compile-test.version>0.6</compile-test.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/JakeWharton/butterknife/</url>
-    <connection>scm:git:git://github.com/JakeWharton/butterknife.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/JakeWharton/butterknife.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/JakeWharton/butterknife/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>${junit.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.easytesting</groupId>
-        <artifactId>fest-assert-core</artifactId>
-        <version>${fest.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup</groupId>
-        <artifactId>fest-android</artifactId>
-        <version>${fest.android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.robolectric</groupId>
-        <artifactId>robolectric</artifactId>
-        <version>${robolectric.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.testing.compile</groupId>
-        <artifactId>compile-testing</artifactId>
-        <version>${compile-test.version}</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.0</version>
-        <configuration>
-          <source>${java.version}</source>
-          <target>${java.version}</target>
-          <showWarnings>true</showWarnings>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.9.1</version>
-        <configuration>
-          <failsOnError>true</failsOnError>
-          <configLocation>checkstyle.xml</configLocation>
-          <consoleOutput>true</consoleOutput>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>verify</phase>
-            <goals>
-              <goal>checkstyle</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.4</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>com.simpligility.maven.plugins</groupId>
-          <artifactId>android-maven-plugin</artifactId>
-          <version>4.1.0</version>
-          <configuration>
-            <sdk>
-              <platform>${android.platform}</platform>
-            </sdk>
-          </configuration>
-        </plugin>
-
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-javadoc-plugin</artifactId>
-          <version>2.9</version>
-          <configuration>
-            <additionalparam>-Xdoclint:none</additionalparam>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-  </build>
-</project>
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..04ac3757
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,6 @@
+include ':butterknife'
+include ':butterknife-annotations'
+include ':butterknife-compiler'
+include ':butterknife-sample'
+
+rootProject.name = 'butterknife-parent'
diff --git a/website/ide-eclipse.html b/website/ide-eclipse.html
index ea13e0c4..e1cf729d 100644
--- a/website/ide-eclipse.html
+++ b/website/ide-eclipse.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
@@ -27,7 +27,7 @@ <h2>View &quot;injection&quot; library for Android</h2>
             <h3 id="introduction">Eclipse Configuration</h3>
             <ol>
               <li>
-                <p>Right click on your project in the <em>Package Explorer</em>. Head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
+                <p>Right click on your project in the <em>Package Explorer</em>, go to <em>Properties</em>, head to <em>Java Compiler &rarr; Annotation Processing</em> and check <em>"Enable project specific settings"</em>.<p>
                 <p>Ensure the other annotation processing settings are the same as shown below:</p>
                 <p><img src="static/ide-eclipse1.png"/></p>
               </li>
@@ -36,7 +36,7 @@ <h3 id="introduction">Eclipse Configuration</h3>
                 <p><img src="static/ide-eclipse2.png"/></p>
               </li>
               <li>Click <em>"Ok"</em> to save the new settings. Eclipse will ask you to rebuild your project to which you should click <em>"Yes"</em></li>
-              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewInjector.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
+              <li>Make sure that the <code>.apt_generated/</code> folder is in your project root. It should contain files like <code>YOURACTIVITY$$ViewBinder.java</code>. If these files are not present trigger a clean build by selected <em>Project &rarr; Clean</em>. This folder and files should not be checked into revision control.
               <li>Lastly, under <em>"Java Compiler"</em>, make sure that the <em>Compiler compliance level</em> is set to Java version 1.6 at minimum.</li>
             </ol>
 
diff --git a/website/ide-idea.html b/website/ide-idea.html
index aa57ae48..a656ac15 100644
--- a/website/ide-idea.html
+++ b/website/ide-idea.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,7 +18,7 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
diff --git a/website/index.html b/website/index.html
index 3aca5594..13c447ed 100644
--- a/website/index.html
+++ b/website/index.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,43 +18,53 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
           <p><a href="javadoc/">Javadoc</a> &middot; <a href="http://stackoverflow.com/questions/ask?tags=butterknife">StackOverflow</a></p>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@InjectView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.footer) TextView footer;
+  @Bind(R.id.title) TextView title;
+  @Bind(R.id.subtitle) TextView subtitle;
+  @Bind(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }</pre>
-            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>inject</code> delegates to this generated code that you can see and debug.</p>
+            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
-            <pre class="prettyprint">public void inject(ExampleActivity activity) {
+            <pre class="prettyprint">public void bind(ExampleActivity activity) {
   activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
   activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }</pre>
 
-            <h4 id="non-activity">Non-Activity Injection</h4>
-            <p>You can also perform injection on arbitrary objects by supplying your own view root.</p>
+            <h4 id="resource">Resource Binding</h4>
+            <p>Bind pre-defined resources with <code>@BindBool</code>, <code>@BindColor</code>, <code>@BindDimen</code>, <code>@BindDrawable</code>, <code>@BindInt</code>, <code>@BindString</code>, which binds an <code>R.bool</code> ID (or your specified type) to its corresponding field.</p>
+            <pre class="prettyprint">class ExampleActivity extends Activity {
+  @BindString(R.string.title) String title;
+  @BindDrawable(R.drawable.graphic) Drawable graphic;
+  @BindColor(R.color.red) int red; // int or ColorStateList field
+  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
+  // ...
+}</pre>
+
+            <h4 id="non-activity">Non-Activity Binding</h4>
+            <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 }</pre>
@@ -77,46 +87,46 @@ <h4 id="non-activity">Non-Activity Injection</h4>
   }
 
   static class ViewHolder {
-    @InjectView(R.id.title) TextView name;
-    @InjectView(R.id.job_title) TextView jobTitle;
+    @Bind(R.id.title) TextView name;
+    @Bind(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }</pre>
             <p>You can see this implementation in action in the provided sample.</p>
-            <p>Calls to <code>ButterKnife.inject</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
-            <p>Other provided injection APIs:</p>
+            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
+            <p>Other provided binding APIs:</p>
             <ul>
-              <li>Inject arbitrary objects using an activity as the view root. If you use a pattern like MVC you can inject the controller using its activity with <code>ButterKnife.inject(this, activity)</code>.</li>
-              <li>Inject a view's children into fields using <code>ButterKnife.inject(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
+              <li>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with <code>ButterKnife.bind(this, activity)</code>.</li>
+              <li>Bind a view's children into fields using <code>ButterKnife.bind(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
    call this immediately after. Alternatively, custom view types inflated from
    XML can use it in the <code>onFinishInflate()</code> callback.</li>
             </ul>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);</pre>
             <p><code>Action</code> and <code>Setter</code> interfaces allow specifying simple behavior.</p>
-            <pre class="prettyprint">static final Action&lt;View> DISABLE = new Action&lt;>() {
+            <pre class="prettyprint">static final ButterKnife.Action&lt;View> DISABLE = new ButterKnife.Action&lt;View>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
   }
-}
-static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
+};
+static final ButterKnife.Setter&lt;View, Boolean> ENABLED = new ButterKnife.Setter&lt;View, Boolean>() {
   @Override public void set(View view, Boolean value, int index) {
     view.setEnabled(value);
   }
-}</pre>
+};</pre>
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
-            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
+            <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</pre>
 
-            <h4 id="click-injection">Listener Injection</h4>
+            <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
             <pre class="prettyprint">@OnClick(R.id.submit)
 public void submit(View view) {
@@ -150,32 +160,33 @@ <h4 id="click-injection">Listener Injection</h4>
 }
 </pre>
 
-            <h4 id="reset">Injection Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When injecting a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has a <code>reset</code> method to do this automatically.</p>
+            <h4 id="reset">Binding Reset</h4>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife provides an <code>ButterKnife.ViewUnbinder</code> interface which has an <code>unbind</code> method to do this automatically. Simply bind a view unbinder with <code>@Unbinder</code> to the fragment.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @Bind(R.id.button1) Button button1;
+  @Bind(R.id.button2) Button button2;
+  @Unbinder ViewUnbinder unbinder;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 
   @Override public void onDestroyView() {
     super.onDestroyView();
-    ButterKnife.reset(this);
+    unbinder.unbind();
   }
 }</pre>
 
-            <h4 id="optional">Optional Injections</h4>
-            <p>By default, both <code>@InjectView</code> and listener injections are required. An exception will be thrown if the target view cannot be found.</p>
-            <p>To suppress this behavior and create an optional injection, add a <code>@Nullable</code> annotation to the field or method.</p>
-            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose, either from Butter Knife or from a different package. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
-            <pre class="prettyprint">@Nullable @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <h4 id="optional">Optional Bindings</h4>
+            <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to fields or the <code>@Optional</code> annotation to methods.</p>
+            <p>Note: Any annotation named <code>@Nullable</code> or can be used for fields. It is encouraged to use the <code>@Nullable</code> annotation from <a href="http://tools.android.com/tech-docs/support-annotations">Android's "support-annotations" library</a>.</p>
+            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
 
-@Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
+@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
 }</pre>
 
@@ -215,7 +226,7 @@ <h4>Maven</h4>
 
             <h4>Gradle</h4>
             <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>
+            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
             <pre class="prettyprint">lintOptions {
   disable 'InvalidPackage'
 }</pre>
@@ -231,21 +242,6 @@ <h4 id="ide">IDE Configuration</h4>
               <li><em>Eclipse</em> &mdash; Set up <a href="ide-eclipse.html">manual configuration</a>.</li>
             </ul>
 
-            <h4 id="proguard">ProGuard</h4>
-            <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
-            <pre>-keep class butterknife.** { *; }
--dontwarn butterknife.internal.**
--keep class **$$ViewInjector { *; }
-
--keepclasseswithmembernames class * {
-    @butterknife.* &lt;fields&gt;;
-}
-
--keepclasseswithmembernames class * {
-    @butterknife.* &lt;methods&gt;;
-}</pre>
-
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
 
