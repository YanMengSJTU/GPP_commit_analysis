diff --git a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java b/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
index 4ae18327..e67baceb 100644
--- a/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/CollectionBinding.java
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+
 final class CollectionBinding implements Binding {
   enum Kind {
     ARRAY,
@@ -37,4 +39,8 @@ public boolean isRequired() {
   @Override public String getDescription() {
     return "field '" + name + "'";
   }
+
+  public boolean requiresCast() {
+    return !VIEW_TYPE.equals(type);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinding.java b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
index 328371fc..96ac3553 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewBinding.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewBinding.java
@@ -1,5 +1,7 @@
 package butterknife.internal;
 
+import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
+
 final class ViewBinding implements Binding {
   private final String name;
   private final String type;
@@ -26,4 +28,8 @@ public String getType() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean requiresCast() {
+    return !VIEW_TYPE.equals(type);
+  }
 }
diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index b2769884..f5e79dad 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -129,7 +129,7 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
         builder.append(',');
       }
       builder.append("\n        ");
-      if (!binding.getType().equals(VIEW_TYPE)) {
+      if (binding.requiresCast()) {
         builder.append("finder.cast(");
       }
       if (binding.isRequired()) {
@@ -143,7 +143,7 @@ private void emitCollectionBinding(StringBuilder builder, CollectionBinding bind
             .append(ids[i])
             .append(")");
       }
-      if (!binding.getType().equals(VIEW_TYPE)) {
+      if (binding.requiresCast()) {
         builder.append(", " + ids[i]);
         builder.append(", " + binding.getType() + ".class");
         builder.append(")");
@@ -187,13 +187,13 @@ private void emitViewBindings(StringBuilder builder, ViewInjection injection) {
       builder.append("    target.")
           .append(viewBinding.getName())
           .append(" = ");
-      if (viewBinding.getType().equals(VIEW_TYPE)) {
-        builder.append("view;\n");
-      } else {
+      if (viewBinding.requiresCast()) {
         builder.append("finder.cast(view");
         builder.append(", " + injection.getId());
         builder.append(", " + viewBinding.getType() + ".class");
         builder.append(");\n");
+      } else {
+        builder.append("view;\n");
       }
     }
   }
