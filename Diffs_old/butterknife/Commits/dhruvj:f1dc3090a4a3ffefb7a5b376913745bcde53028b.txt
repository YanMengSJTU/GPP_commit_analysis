diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 3671a751..3b653ca6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -38,4 +38,6 @@
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+
+  boolean track() default true;
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index b20aff4a..937a7d94 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -465,6 +465,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
         if (methodBindings.containsKey(method)) {
           for (MethodViewBinding methodBinding : methodBindings.get(method)) {
             builder.add("target.$L(", methodBinding.getName());
+            if (methodBinding instanceof TrackMethodViewBinding) {
+              builder.add("p0,"+ "\""+((TrackMethodViewBinding) methodBinding).getFunctionName()+"\"");
+            }
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
             for (int i = 0, count = parameters.size(); i < count; i++) {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 8faac8b1..65b726e3 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -49,6 +49,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
+import java.util.Collections;
 import java.util.Deque;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
@@ -1041,12 +1042,14 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     // Assemble information on the method.
     Annotation annotation = element.getAnnotation(annotationClass);
     Method annotationValue = annotationClass.getDeclaredMethod("value");
+
     if (annotationValue.getReturnType() != int[].class) {
       throw new IllegalStateException(
           String.format("@%s annotation value() type not int[].", annotationClass));
     }
 
     int[] ids = (int[]) annotationValue.invoke(annotation);
+
     String name = executableElement.getSimpleName().toString();
     boolean required = isListenerRequired(executableElement);
 
@@ -1206,6 +1209,20 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
       QualifiedId qualifiedId = elementToQualifiedId(element, id);
+      if (annotationClass == OnClick.class) {
+        Method annotationTrack = annotationClass.getDeclaredMethod("track");
+        boolean track = (boolean) annotationTrack.invoke(annotation);
+        if (track) {
+          Parameter functionName = new Parameter(0, TypeName.get(String.class));
+          MethodViewBinding trackBinding = new TrackMethodViewBinding(
+                  "trackOnClick",
+                  Collections.<Parameter>emptyList(),
+                  true,
+                  binding.getName()
+          );
+          builder.addMethod(getId(qualifiedId), listener, method, trackBinding);
+        }
+      }
       if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index e4d1c4b7..71817b79 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -4,7 +4,7 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodViewBinding implements MemberViewBinding {
+class MethodViewBinding implements MemberViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/TrackMethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/TrackMethodViewBinding.java
new file mode 100644
index 00000000..972abc40
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/TrackMethodViewBinding.java
@@ -0,0 +1,21 @@
+package butterknife.compiler;
+
+import java.util.List;
+
+/**
+ * Created by Dhruv on 3/23/18.
+ */
+
+public class TrackMethodViewBinding extends MethodViewBinding {
+
+    private final String mFunctionName;
+
+    TrackMethodViewBinding(String name, List<Parameter> parameters, boolean required, String functionName) {
+        super(name, parameters, required);
+        mFunctionName = functionName;
+    }
+
+    public String getFunctionName() {
+        return mFunctionName;
+    }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 7097639f..cdb55667 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -47,7 +47,11 @@
 
   private SimpleAdapter adapter;
 
-  @OnClick(R.id.hello) void sayHello() {
+  void trackOnClick(View s, String ss) {
+
+  }
+
+  @OnClick(value = R.id.hello, track = true) void sayHello(View v) {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
@@ -75,4 +79,8 @@
     adapter = new SimpleAdapter(this);
     listOfThings.setAdapter(adapter);
   }
+
+  public void trackData(View v) {
+
+  }
 }
diff --git a/gradle.properties b/gradle.properties
index a4db5d39..b6081c71 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-GROUP=com.jakewharton
-VERSION_NAME=9.0.0-SNAPSHOT
+GROUP=com.vyom.android.custombutterknife
+VERSION_NAME=9.0.5-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -15,4 +15,5 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
-org.gradle.jvmargs=-Xmx1536M
+org.gradle.daemon=true
+org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5102
\ No newline at end of file
diff --git a/gradle/gradle-mvn-push.gradle b/gradle/gradle-mvn-push.gradle
index ea3f6bbb..97be587b 100644
--- a/gradle/gradle-mvn-push.gradle
+++ b/gradle/gradle-mvn-push.gradle
@@ -26,12 +26,12 @@ def isReleaseBuild() {
 
 def getReleaseRepositoryUrl() {
   return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
-      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+      : "http://artifactory.rivigo.com/artifactory/libs-snapshot-local/"
 }
 
 def getSnapshotRepositoryUrl() {
   return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
-      : "https://oss.sonatype.org/content/repositories/snapshots/"
+      : "http://artifactory.rivigo.com/artifactory/libs-snapshot-local/"
 }
 
 def getRepositoryUsername() {
