diff --git a/butterknife/src/main/java/butterknife/UiThread.java b/butterknife/src/main/java/butterknife/UiThread.java
new file mode 100644
index 00000000..8ad15ced
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/UiThread.java
@@ -0,0 +1,16 @@
+package butterknife;
+
+
+import android.content.Context;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+@Target(METHOD)
+@Retention(CLASS)
+public @interface UiThread {
+  long delay() default 0;
+}
diff --git a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index c8b696ff..0d69418a 100644
--- a/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -20,6 +20,8 @@
 import butterknife.ResourceDrawable;
 import butterknife.ResourceInt;
 import butterknife.ResourceString;
+import butterknife.UiThread;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -114,6 +116,8 @@
     types.add(ResourceInt.class.getCanonicalName());
     types.add(ResourceString.class.getCanonicalName());
 
+    types.add(UiThread.class.getCanonicalName());
+
     return types;
   }
 
@@ -220,6 +224,14 @@
       }
     }
 
+    for (Element element : env.getElementsAnnotatedWith(UiThread.class)) {
+      try {
+        parseUiThread(element, targetClassMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, UiThread.class, e);
+      }
+    }
+
     // Try to find a parent binder for each.
     for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
       String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
@@ -869,6 +881,33 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     erasedTargetNames.add(enclosingElement.toString());
   }
 
+  private void parseUiThread(Element element, Map<TypeElement, BindingClass> targetClassMap,
+    Set<String> erasedTargetNames) throws Exception {
+    boolean hasError = false;
+
+    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
+      error(element, "@%s annotation must be on a method.", UiThread.class.getSimpleName());
+      hasError = true;
+    }
+
+    hasError = isBindingInWrongPackage(UiThread.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    ExecutableElement executableElement = (ExecutableElement) element;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    UiThread annotation = element.getAnnotation(UiThread.class);
+    Method annotationValue = UiThread.class.getDeclaredMethod("delay");
+    if (annotationValue.getReturnType() != long.class) {
+      error(element, "%s annotation delay() type not long.", UiThread.class.getSimpleName());
+    }
+
+    processingEnv.getMessager().printMessage(ERROR, "HI", element);
+  }
+
   private boolean isInterface(TypeMirror typeMirror) {
     if (!(typeMirror instanceof DeclaredType)) {
       return false;
diff --git a/butterknife/src/main/java/butterknife/internal/RunnableMethod.java b/butterknife/src/main/java/butterknife/internal/RunnableMethod.java
new file mode 100644
index 00000000..9b95060b
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/RunnableMethod.java
@@ -0,0 +1,25 @@
+package butterknife.internal;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Created by minkyu on 15. 3. 27..
+ */
+@Retention(RUNTIME) @Target(FIELD)
+public @interface RunnableMethod {
+  /** Name of the listener method for which this annotation applies. */
+  String name();
+
+  /** List of method parameters. If the type is not a primitive it must be fully-qualified. */
+  String[] parameters() default { };
+
+  /** Primative or fully-qualified return type of the listener method. May also be {@code void}. */
+  String returnType() default "void";
+
+  /** If {@link #returnType()} is not {@code void} this value is returned when no binding exists. */
+  String defaultReturn() default "null";
+}
diff --git a/local.properties b/local.properties
new file mode 100644
index 00000000..0a4dc5aa
--- /dev/null
+++ b/local.properties
@@ -0,0 +1,11 @@
+## This file is automatically generated by Android Studio.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must *NOT* be checked into Version Control Systems,
+# as it contains information specific to your local configuration.
+#
+# Location of the SDK. This is only used by Gradle.
+# For customization when using a Version Control System, please read the
+# header note.
+#Mon Mar 30 13:53:58 KST 2015
+sdk.dir=/Users/minkyu/Library/Android/sdk
