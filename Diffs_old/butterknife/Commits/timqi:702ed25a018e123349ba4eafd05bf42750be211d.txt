diff --git a/butterknife-annotations/src/main/java/butterknife/OnProgressChange.java b/butterknife-annotations/src/main/java/butterknife/OnProgressChange.java
new file mode 100644
index 00000000..35eb298c
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/OnProgressChange.java
@@ -0,0 +1,78 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+import android.view.View;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Bind a method to an {@code OnSeekBarChangeListener} on the view for each ID specified.
+ * <pre><code>
+ * {@literal @}OnProgressChange(R.id.example_seekbar) void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+ *   Toast.makeText(this, "progress " + progress + "!", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * Any number of parameters from {@code onProgressChanged} may be used on the method.
+ * <p>
+ * To bind to methods other than {@code onProgressChanged}, specify a different {@code callback}.
+ * <pre><code>
+ * {@literal @}OnProgressChange(value = R.id.example_seekbar, callback = START_TRACKING_TOUCH)
+ * void onStartTrackingTouch(SeekBar seekBar) {
+ *   Toast.makeText(this, "start tracking", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ * <pre><code>
+ * {@literal @}OnProgressChange(value = R.id.example_seekbar, callback = STOP_TRACKING_TOUCH)
+ * void onStopTrackingTouch(SeekBar seekBar) {
+ *   Toast.makeText(this, "stop tracking", Toast.LENGTH_SHORT).show();
+ * }
+ * </code></pre>
+ */
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.CLASS)
+@ListenerClass(
+    targetType = "android.widget.SeekBar",
+    setter = "setOnSeekBarChangeListener",
+    type = "android.widget.SeekBar.OnSeekBarChangeListener",
+    callbacks = OnProgressChange.Callback.class
+)
+public @interface OnProgressChange {
+  /** View IDs to which the method will be bound. */
+  @IdRes int[] value() default {View.NO_ID};
+
+  /** Listener callback to which the method will be bound. */
+  Callback callback() default Callback.PROGRESS_CHANGED;
+
+  /** {@code ViewPager.OnPageChangeListener} callback methods. */
+  enum Callback {
+    /** {@code onProgressChanged(android.widget.SeekBar, int, boolean)} */
+    @ListenerMethod(
+        name = "onProgressChanged",
+        parameters = {
+            "android.widget.SeekBar",
+            "int",
+            "boolean"
+        }
+    )
+    PROGRESS_CHANGED,
+
+    /** {@code onStartTrackingTouch(android.widget.SeekBar)} */
+    @ListenerMethod(
+        name = "onStartTrackingTouch",
+        parameters = "android.widget.SeekBar"
+    )
+    START_TRACKING_TOUCH,
+
+    /** {@code onStopTrackingTouch(android.widget.SeekBar)} */
+    @ListenerMethod(
+        name = "onStopTrackingTouch",
+        parameters = "android.widget.SeekBar"
+    )
+    STOP_TRACKING_TOUCH,
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ae6fa7c9..7c2df2fe 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,32 +1,9 @@
 package butterknife.compiler;
 
-import butterknife.Bind;
-import butterknife.BindArray;
-import butterknife.BindBitmap;
-import butterknife.BindBool;
-import butterknife.BindColor;
-import butterknife.BindDimen;
-import butterknife.BindDrawable;
-import butterknife.BindInt;
-import butterknife.BindString;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import butterknife.Unbinder;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.TypeName;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -41,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -61,6 +39,32 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnProgressChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -93,7 +97,8 @@
       OnLongClick.class, //
       OnPageChange.class, //
       OnTextChanged.class, //
-      OnTouch.class //
+      OnTouch.class, //
+      OnProgressChange.class //
   );
 
   private Elements elementUtils;
diff --git a/butterknife-compiler/src/test/java/butterknife/OnProgressChangeTest.java b/butterknife-compiler/src/test/java/butterknife/OnProgressChangeTest.java
new file mode 100644
index 00000000..65638cd0
--- /dev/null
+++ b/butterknife-compiler/src/test/java/butterknife/OnProgressChangeTest.java
@@ -0,0 +1,57 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.base.Joiner;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnProgressChangeTest {
+  @Test
+  public void progressChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import butterknife.OnProgressChange;",
+        "public class Test extends Activity {",
+        "  @OnProgressChange(1) void doStuff() {}",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import android.widget.SeekBar;",
+            "import butterknife.internal.Finder;",
+            "import butterknife.internal.ViewBinder;",
+            "import java.lang.Object;",
+            "import java.lang.Override;",
+            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
+            "  @Override public void bind(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
+            "    ((SeekBar) view).setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {",
+            "      @Override public void onProgressChanged(SeekBar p0, int p1, boolean p2) {",
+            "        target.doStuff();",
+            "      }",
+            "      @Override public void onStartTrackingTouch(SeekBar p0) {",
+            "      }",
+            "      @Override public void onStopTrackingTouch(SeekBar p0) {",
+            "      }",
+            "    });",
+            "  }",
+            "}"
+        ));
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+}
