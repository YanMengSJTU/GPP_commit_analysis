diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index ac2cce60..4e2d5ed4 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -40,4 +40,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
+  boolean handle() default false;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 50072e1e..711b9516 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -45,4 +45,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
+  boolean handle() default false;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index eb40822c..d359f359 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -49,4 +49,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
+  boolean handle() default false;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index e5e19a4c..05f0bb32 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -44,4 +44,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
+  boolean handle() default false;
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index ef1fb11f..0d44dee9 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -38,6 +38,7 @@
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 /** A set of all the bindings requested by a single type. */
@@ -57,6 +58,9 @@
   static final ClassName CONTEXT_COMPAT =
       ClassName.get("android.support.v4.content", "ContextCompat");
   private static final ClassName VIEW_CONTROLLER = ClassName.get("butterknife", "ViewController");
+  private static final ClassName CLICK_SESSION = ClassName.get("butterknife.internal", "ClickSession");
+  private static final ClassName METHOD_EXECUTOR = ClassName.get("butterknife.internal", "MethodExecutor");
+  private static final ClassName CONDITION = ClassName.get("butterknife.internal", "Condition");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 
@@ -456,7 +460,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
             .returns(bestGuess(method.returnType()));
         String[] parameterTypes = method.parameters();
         for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i, FINAL);
         }
 
         boolean returned = false;
@@ -465,63 +469,127 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
 
         if (methodBindings.containsKey(method)) {
           for (MethodViewBinding methodBinding : methodBindings.get(method)) {
-            String[] conditions = methodBinding.getConditions();
+
+            boolean handle = methodBinding.isHandle();
+            String[] requireds = methodBinding.getRequireds();
             String key = methodBinding.getKey();
-            if ((null != conditions && conditions.length > 0) || (null != key && !"".equals(key))) {
-              if (null != conditions && conditions.length > 0) {
-                for (String condition : conditions) {
-                  if (checkJavaSymbol(condition)) {
-                    builder.beginControlFlow("if (!target.$L())", condition);
-                    if (hasReturnType) {
-                      builder.addStatement("return $L", method.defaultReturn());
-                    } else {
-                      builder.addStatement("return");
-                    }
-                    builder.endControlFlow();
-                  } else {
-                    throw new RuntimeException("Condition\" "
-                          + condition + "\" must be a valid java symbol");
-                  }
+            // Condition[] conditions = new Condition[requireds.length];
+            builder.addStatement("$T[] conditions = new $T[$L]", CONDITION, CONDITION, requireds.length);
+
+            // TODO generate MethodExecutor
+            /*MethodExecutor executor = new MethodExecutor() {
+              @Override
+              protected Object execute() {
+                target.postAction(View, Class, Method, key);
+                if (hasReturn) {
+                  return target.Method(View...);
+                } else {
+                  target.Method(View...);
+                  return null;
                 }
               }
-              if (null != key && !"".equals(key)) {
-                builder.beginControlFlow("if (!$T.class.isInstance(target))",
-                        VIEW_CONTROLLER)
-                        .addStatement("throw new RuntimeException("
-                                + "\"Target must be implements from $T\")", VIEW_CONTROLLER)
-                        .endControlFlow();
-                builder.addStatement("target.postAction(p0, $S, $S, $S)",
-                        targetTypeName, methodBinding.getName(), key);
-              }
+            };*/
+            TypeSpec.Builder executorType = TypeSpec.anonymousClassBuilder("")
+                    .superclass(METHOD_EXECUTOR);
+            MethodSpec.Builder methodExecute = MethodSpec.methodBuilder("execute")
+                    .addAnnotation(Override.class)
+                    .returns(Object.class)
+                    .addModifiers(PUBLIC);
+            // TODO generate method block
+            CodeBlock.Builder methodBlock = CodeBlock.builder();
+            if (hasReturnType) {
+              methodBlock.add("Object result = ");
             }
-            if (hasReturnType && !returned) {
-              builder.add("return ");
-              returned = true;
-            }
-            builder.add("target.$L(", methodBinding.getName());
+            methodBlock.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
             for (int i = 0, count = parameters.size(); i < count; i++) {
               if (i > 0) {
                 builder.add(", ");
               }
-
               Parameter parameter = parameters.get(i);
               int listenerPosition = parameter.getListenerPosition();
-
               if (parameter.requiresCast(listenerParameters[listenerPosition])) {
                 if (debuggable) {
-                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,
-                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,
-                      parameter.getType());
+                  methodBlock.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,
+                          listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,
+                          parameter.getType());
                 } else {
-                  builder.add("($T) p$L", parameter.getType(), listenerPosition);
+                  methodBlock.add("($T) p$L", parameter.getType(), listenerPosition);
                 }
               } else {
-                builder.add("p$L", listenerPosition);
+                methodBlock.add("p$L", listenerPosition);
+              }
+            }
+            methodBlock.add(");\n");
+            // TODO generate postAction()
+            if (null != key && !"".equals(key)) {
+              methodBlock.beginControlFlow("if (!$T.class.isInstance(target))",
+                      VIEW_CONTROLLER)
+                      .addStatement("throw new RuntimeException("
+                              + "\"Target must be implements from $T\")", VIEW_CONTROLLER)
+                      .endControlFlow();
+              methodBlock.addStatement("target.postAction(p0, $S, $S, $S)",
+                      targetTypeName, methodBinding.getName(), key);
+            }
+            if (hasReturnType) {
+              methodBlock.addStatement("return result");
+            } else {
+              methodBlock.addStatement("return null");
+            }
+            methodExecute.addCode(methodBlock.build());
+            executorType.addMethod(methodExecute.build());
+            builder.addStatement("$T executor = $L", METHOD_EXECUTOR, executorType.build());
+
+            // final ClickSession session = new ClickSession(target, p0, conditions, executor);
+            builder.addStatement("final $T session = new $T(target, p0, conditions, executor)",
+                    CLICK_SESSION, CLICK_SESSION);
+
+            // TODO generate conditions
+            /*for (int i = 0; i < requireds.length; i++) {
+              conditions[i] = new Condition("condition") {
+                @Override
+                protected boolean require() {
+                  if (handle) {
+                    return target.condition();
+                  } else {
+                    return target.condition(session);
+                  }
+                }
+              };
+            }*/
+            if (requireds.length > 0) {
+              String required;
+              for (int i = 0; i < requireds.length; i++) {
+                if (checkJavaSymbol(required = requireds[i])) {
+                  TypeSpec.Builder typeCondition = TypeSpec.anonymousClassBuilder("$S", required)
+                          .superclass(CONDITION);
+                  MethodSpec.Builder methodRequired = MethodSpec.methodBuilder("require")
+                          .addAnnotation(Override.class)
+                          .addModifiers(PROTECTED)
+                          .returns(boolean.class);
+                  if (!handle) {
+                    methodRequired.addStatement("return target.$L()", required);
+                  } else {
+                    methodRequired.addStatement("return target.$L(session)", required);
+                  }
+                  typeCondition.addMethod(methodRequired.build());
+                  builder.addStatement("conditions[$L] = $L", i, typeCondition.build());
+                } else {
+                  throw new RuntimeException("Condition\" "
+                        + required + "\" must be a valid java symbol");
+                }
               }
             }
-            builder.add(");\n");
+
+            // TODO do real action
+            // session.execute(true);
+            builder.addStatement("session.execute(true)");
+
+            if (hasReturnType && !returned) {
+              builder.addStatement("return ($L) session.getInvokeReturned()", method.returnType());
+              returned = true;
+            }
           }
         } else {
           builder.addStatement("return $L", method.defaultReturn());
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 8d50e40b..ae8c971f 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1146,6 +1146,13 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       conditions = (String[]) annotationRequired.invoke(annotation);
     }
 
+    // TODO isHandle
+    boolean handle = false;
+    Method annotationRetry = annotationClass.getDeclaredMethod("handle");
+    if (annotationRetry.getReturnType() == boolean.class) {
+      handle = (boolean) annotationRetry.invoke(annotation);
+    }
+
     // TODO getKey
     String key = null;
     Method annotationKey = annotationClass.getDeclaredMethod("key");
@@ -1294,7 +1301,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name,
-            Arrays.asList(parameters), conditions, key, required);
+            Arrays.asList(parameters), conditions, handle, key, required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
       QualifiedId qualifiedId = elementToQualifiedId(element, id);
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index 58f6c00d..3103df07 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -8,23 +8,26 @@
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
-  private final String[] conditions;
+  private final String[] requireds;
   private final String key;
+  private final boolean handle;
 
   MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
-    this.conditions = null;
+    this.requireds = null;
     this.key = null;
+    this.handle = false;
   }
 
   MethodViewBinding(String name, List<Parameter> parameters,
-                    String[] conditions, String key, boolean required) {
+                    String[] requireds, boolean handle, String key, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
-    this.conditions = conditions;
+    this.requireds = requireds;
+    this.handle = handle;
     this.key = key;
   }
 
@@ -36,8 +39,12 @@ public String getName() {
     return parameters;
   }
 
-  public String[] getConditions() {
-    return conditions;
+  public String[] getRequireds() {
+    return null == requireds ? new String[0] : requireds;
+  }
+
+  public boolean isHandle() {
+    return handle;
   }
 
   public String getKey() {
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 0f320906..a7306fb5 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -73,6 +73,6 @@ class ButterKnifePlugin : Plugin<Project> {
   }
 
   private operator fun <T : Any> ExtensionContainer.get(type: KClass<T>): T {
-    return getByType(type.java)!!
+    return getByType(type.java)
   }
 }
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
index fa2eed7d..265293a9 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/Condition.java
@@ -1,5 +1,7 @@
 package com.example.butterknife.library;
 
+import butterknife.internal.ClickSession;
+
 /**
  * Conditions for ViewController
  *
@@ -10,5 +12,6 @@
 public interface Condition {
 
     boolean condition();
+    boolean condition(ClickSession session);
 
 }
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index c2518cd6..82979d3f 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.util.Log;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
@@ -10,6 +11,10 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.example.butterknife.R;
+
+import java.util.List;
+
 import butterknife.Bind;
 import butterknife.BindString;
 import butterknife.BindView;
@@ -19,14 +24,14 @@
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
 import butterknife.ViewController;
-
-import com.example.butterknife.R;
-
-import java.util.List;
+import butterknife.internal.ClickSession;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity implements ViewController, Condition {
+
+  private final static String TAG = SimpleActivity.class.getSimpleName();
+
   private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
     @Override public void apply(@NonNull View view, int index) {
       AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
@@ -49,10 +54,11 @@
 
   @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
 
+  private boolean retryFlag;
   private SimpleAdapter adapter;
 
-  @OnClick(value = {R.id.hello}, required = {"condition"}, key = "hello") void sayHello() {
-    // Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
+  @OnClick(value = {R.id.hello}, required = {"condition"}, handle = true, key = "hello") void sayHello() {
+    Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
@@ -82,7 +88,7 @@
 
   @Override
   public void postAction(View view, String clazz, String method, String key) {
-    Toast.makeText(this, clazz + "." + method + ": " + key, LENGTH_SHORT).show();
+    Log.e(TAG, clazz + "." + method + ": " + key);
   }
 
   @NonNull
@@ -93,8 +99,23 @@ public View getView() {
 
   @Override
   public boolean condition() {
-    Toast.makeText(this, "Click to test condition", LENGTH_SHORT).show();
-    return true;
+    Log.e(TAG, "Click to test condition: ");
+    return retryFlag;
+  }
+
+  @Override
+  public boolean condition(final ClickSession session) {
+    Log.e(TAG, "Click to test condition session: " + retryFlag);
+    if (!retryFlag) {
+      getView().postDelayed(new Runnable() {
+        @Override
+        public void run() {
+          retryFlag = !retryFlag;
+          session.execute(true);
+        }
+      }, 3000);
+    }
+    return retryFlag;
   }
 
 }
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 750bfbac..e24da560 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -48,7 +48,7 @@ dependencies {
 
 def getRuntimeJar() {
   try {
-    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
+    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
     File runtimeJar = new File(javaBase, "lib/rt.jar")
     if (runtimeJar.exists()) {
       return runtimeJar
diff --git a/butterknife/src/main/AndroidManifest.xml b/butterknife/src/main/AndroidManifest.xml
index b5e34f17..be8c7afb 100644
--- a/butterknife/src/main/AndroidManifest.xml
+++ b/butterknife/src/main/AndroidManifest.xml
@@ -1,2 +1,2 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="butterknife"/>
+    package="butterknife.binder"/>
diff --git a/butterknife/src/main/java/butterknife/internal/ClickSession.java b/butterknife/src/main/java/butterknife/internal/ClickSession.java
new file mode 100644
index 00000000..94d7b0b5
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/ClickSession.java
@@ -0,0 +1,44 @@
+package butterknife.internal;
+
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import butterknife.OnClick;
+import butterknife.ViewController;
+
+public class ClickSession {
+
+  public final Object target;
+  public final View view;
+  private final Condition[] conditions;
+  private final MethodExecutor executor;
+
+  public ClickSession(Object target, View view,
+                      @Nullable Condition[] conditions, MethodExecutor executor) {
+    this.target = target;
+    this.view = view;
+    this.conditions = conditions;
+    this.executor = executor;
+  }
+
+  /**
+   * run Action
+   * @param checkRequired true, check conditions of {@link OnClick#required()}
+   */
+  public final boolean execute(boolean checkRequired) {
+    if (checkRequired && null != conditions && conditions.length > 0) {
+      for (Condition condition : conditions) {
+        if (!condition.require()) {
+          return false;
+        }
+      }
+    }
+    executor.invoke();
+    return true;
+  }
+
+  public final Object getInvokeReturned() {
+    return executor.getReturned();
+  }
+
+}
diff --git a/butterknife/src/main/java/butterknife/internal/Condition.java b/butterknife/src/main/java/butterknife/internal/Condition.java
new file mode 100644
index 00000000..d0ad2a08
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/Condition.java
@@ -0,0 +1,25 @@
+package butterknife.internal;
+
+import butterknife.OnClick;
+
+/**
+ * The class wrapper for {@link OnClick#required()}
+ */
+public abstract class Condition {
+
+  /**
+   * {@link OnClick#required()}
+   */
+  public final String required;
+
+  public Condition(String required) {
+    this.required = required;
+  }
+
+  /**
+   * checkRequired
+   * @return  condition check result
+   */
+  protected abstract boolean require();
+
+}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..86b04f85 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -7,7 +7,8 @@
  * same frame. A click on one button disables all buttons for that frame.
  */
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
-  static boolean enabled = true;
+
+  private static boolean enabled = true;
 
   private static final Runnable ENABLE_AGAIN = new Runnable() {
     @Override public void run() {
diff --git a/butterknife/src/main/java/butterknife/internal/MethodExecutor.java b/butterknife/src/main/java/butterknife/internal/MethodExecutor.java
new file mode 100644
index 00000000..bd4a5875
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/internal/MethodExecutor.java
@@ -0,0 +1,31 @@
+package butterknife.internal;
+
+import android.support.annotation.Nullable;
+
+/**
+ * method delegate
+ */
+public abstract class MethodExecutor {
+
+  private boolean invoked;
+  private Object returned;
+
+  @Nullable
+  protected abstract Object execute();
+
+  final void invoke() {
+    if (!invoked) {
+      invoked = true;
+      returned = execute();
+    }
+  }
+
+  public final Object getReturned() {
+    return returned;
+  }
+
+  public final boolean isInvoked() {
+    return invoked;
+  }
+
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 37f845d0..315099c6 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -1,10 +1,13 @@
 package butterknife;
 
-import butterknife.compiler.ButterKnifeProcessor;
 import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
+
 import org.junit.Test;
 
+import javax.tools.JavaFileObject;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
@@ -14,10 +17,13 @@
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.OnClick;\n"
+        + "import butterknife.internal.ClickSession;\n"
+        + "import butterknife.internal.Condition;\n"
         + "import butterknife.ViewController;\n"
         + "public class Test implements ViewController {\n"
-        + "  @OnClick(value = {1}, required = {\"condition\"}, key = \"Key\") void doStuff() {}\n"
+        + "  @OnClick(value = {1}, required = {\"condition\"}, handle = true, key = \"Key\") void doStuff() {}\n"
 
+            + "public boolean condition(ClickSession session) {return true;}\n"
             + "public boolean condition() {return true;}\n"
             + "@Override public void postAction(View view, String clazz, String method, String key) {}\n"
             + "@Override public View getView() {return null;}\n"
@@ -32,9 +38,13 @@
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.ViewController;\n"
+        + "import butterknife.internal.ClickSession;\n"
+        + "import butterknife.internal.Condition;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.MethodExecutor;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding implements Unbinder {\n"
         + "  private Test target;\n"
@@ -47,15 +57,29 @@
         + "    view1 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        if (!ViewController.class.isInstance(target)) {\n"
-        + "          throw new RuntimeException(\"Target must be implements from ViewController\");\n"
-        + "        }\n"
-        + "        if (!target.condition()) {\n"
-        + "          return;\n"
-        + "        }\n"
-        + "        target.postAction(p0, \"test.Test\", \"doStuff\", \"Key\");\n"
-        + "        target.doStuff();\n"
+        + "      public void doClick(final View p0) {\n"
+        + "        Condition[] conditions = new Condition[1];\n"
+        + "        MethodExecutor executor = new MethodExecutor() {\n"
+        + "          @Override\n"
+        + "          public Object execute() {\n"
+        + "            target.doStuff();\n"
+        + "            if (!ViewController.class.isInstance(target)) {\n"
+        + "              throw new RuntimeException(\"Target must be implements from ViewController\");\n"
+        + "            }\n"
+        + "            target.postAction(p0, \"test.Test\", \"doStuff\", \"Key\");\n"
+        + "            return null;\n"
+        + "          }\n"
+        + "        };\n"
+        + "        final ClickSession session = new ClickSession(target, p0, conditions, executor);\n"
+        + "        conditions[0] = new Condition(\"condition\") {\n"
+        + "          @Override\n"
+        + "          protected boolean require() {\n"
+        //+ "            return target.condition();\n"
+        + "            return target.condition(session);\n"
+        + "          }\n"
+        + "        };\n"
+        + "        session.execute(true);\n"
+        //+ "        return;\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
diff --git a/gradle.properties b/gradle.properties
index 0cdfdcee..8c41c4b8 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.8.1.5-SNAPSHOT
+VERSION_NAME=8.8.1.6-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -15,7 +15,7 @@ POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
-systemProp.http.proxyHost=127.0.0.1
-systemProp.http.proxyPort=1080
-systemProp.https.proxyHost=127.0.0.1
-systemProp.https.proxyPort=1080
+#systemProp.http.proxyHost=127.0.0.1
+#systemProp.http.proxyPort=1080
+#systemProp.https.proxyHost=127.0.0.1
+#systemProp.https.proxyPort=1080
