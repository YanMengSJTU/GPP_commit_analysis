diff --git a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
index 5d3f5aff..483e60c6 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java
@@ -16,8 +16,8 @@
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
 final class BindingClass {
-  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
-  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
+  private final Map<String, ViewBindings> viewIdMap = new LinkedHashMap<>();
+  private final Map<FieldCollectionViewBinding, String[]> collectionBindings = new LinkedHashMap<>();
   private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
   private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
   private final String classPackage;
@@ -35,15 +35,15 @@ void addBitmap(FieldBitmapBinding binding) {
     bitmapBindings.add(binding);
   }
 
-  void addField(int id, FieldViewBinding binding) {
+  void addField(String id, FieldViewBinding binding) {
     getOrCreateViewBindings(id).addFieldBinding(binding);
   }
 
-  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
+  void addFieldCollection(String[] ids, FieldCollectionViewBinding binding) {
     collectionBindings.put(binding, ids);
   }
 
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
+  boolean addMethod(String id, ListenerClass listener, ListenerMethod method,
       MethodViewBinding binding) {
     ViewBindings viewBindings = getOrCreateViewBindings(id);
     if (viewBindings.hasMethodBinding(listener, method)
@@ -62,11 +62,11 @@ void setParentViewBinder(String parentViewBinder) {
     this.parentViewBinder = parentViewBinder;
   }
 
-  ViewBindings getViewBinding(int id) {
+  ViewBindings getViewBinding(String id) {
     return viewIdMap.get(id);
   }
 
-  private ViewBindings getOrCreateViewBindings(int id) {
+  private ViewBindings getOrCreateViewBindings(String id) {
     ViewBindings viewId = viewIdMap.get(id);
     if (viewId == null) {
       viewId = new ViewBindings(id);
@@ -136,7 +136,7 @@ private void emitBindMethod(StringBuilder builder) {
       }
 
       // Loop over each collection binding and emit it.
-      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
+      for (Map.Entry<FieldCollectionViewBinding, String[]> entry : collectionBindings.entrySet()) {
         emitCollectionBinding(builder, entry.getKey(), entry.getValue());
       }
     }
@@ -171,7 +171,7 @@ private void emitBindMethod(StringBuilder builder) {
   }
 
   private void emitCollectionBinding(StringBuilder builder, FieldCollectionViewBinding binding,
-      int[] ids) {
+      String[] ids) {
     builder.append("    target.").append(binding.getName()).append(" = ");
 
     switch (binding.getKind()) {
@@ -212,7 +212,7 @@ private void emitViewBindings(StringBuilder builder, ViewBindings bindings) {
           .append(bindings.getId())
           .append(", null);\n");
     } else {
-      if (bindings.getId() == View.NO_ID) {
+      if (bindings.getId().equals(ButterKnifeProcessor.NO_RESOURCE)) {
         builder.append("target;\n");
       } else {
         builder.append("finder.findRequiredView(source, ")
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java
new file mode 100644
index 00000000..d4bd49cf
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeAbstractProcessor.java
@@ -0,0 +1,309 @@
+package butterknife.internal;
+
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import org.w3c.dom.Document;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic.Kind;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import java.io.File;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static javax.tools.Diagnostic.Kind.ERROR;
+
+abstract class ButterKnifeAbstractProcessor extends AbstractProcessor {
+
+    public static final String NO_RESOURCE = InternalKeys.NO_RESOURCE;
+    public static final String MANIFEST_FILE = "androidManifestFile";
+    public static final String RESOURCE_PACKAGE_NAME = "resourcePackageName";
+
+    private static final String[] SUPPORTED_OPTIONS =
+            {MANIFEST_FILE, RESOURCE_PACKAGE_NAME};
+
+    private static final String NULL = "null";
+
+    private static final String PACKAGE = "package";
+    private static final String VALUE = "value";
+    private static final String RESOURCE = "res";
+
+    private static final String NONE_DECLARED_ERROR = "@%s has no resource id or name declared. You must declare " +
+            "exactly one value for field (%s.%s)";
+    private static final String BOTH_DECLARED_ERROR = "@%s is declaring both id and resource name. You can only declare " +
+            "one value type per field. (%s.%s)";
+    private static final String INVALID_ANNOTATION_ERROR = "@%s is not a valid resource annotation. (%s.%s)";
+    private static final String UNRECOGNISED_ANNOTATION_ERROR = "@%s is not a recognised annotation. (%s.%s)";
+
+    private static final Map<Class<? extends Annotation>, String> BINDING_CLASS_TYPE_MAP = new HashMap<>();
+
+    static {
+        BINDING_CLASS_TYPE_MAP.put(Bind.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(BindArray.class, "array");
+        BINDING_CLASS_TYPE_MAP.put(BindBitmap.class, "drawable");
+        BINDING_CLASS_TYPE_MAP.put(BindBool.class, "bool");
+        BINDING_CLASS_TYPE_MAP.put(BindColor.class, "color");
+        BINDING_CLASS_TYPE_MAP.put(BindDimen.class, "dimen");
+        BINDING_CLASS_TYPE_MAP.put(BindDrawable.class, "drawable");
+        BINDING_CLASS_TYPE_MAP.put(BindInt.class, "integer");
+        BINDING_CLASS_TYPE_MAP.put(BindString.class, "string");
+        BINDING_CLASS_TYPE_MAP.put(OnCheckedChanged.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnClick.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnEditorAction.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnFocusChange.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnItemClick.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnItemLongClick.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnItemSelected.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnLongClick.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnPageChange.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnTextChanged.class, "id");
+        BINDING_CLASS_TYPE_MAP.put(OnTouch.class, "id");
+    }
+
+    private String mResourcePackageName;
+
+    @Override
+    public Set<String> getSupportedOptions() {
+        Set<String> options = new HashSet<>();
+        Collections.addAll(options, SUPPORTED_OPTIONS);
+        return options;
+    }
+
+    @Override
+    public synchronized void init(ProcessingEnvironment env) {
+        super.init(env);
+        setResourcePackageName(env.getOptions().get(RESOURCE_PACKAGE_NAME));
+        setManifestFile(env.getOptions().get(MANIFEST_FILE));
+    }
+
+    protected void setManifestFile(String manifestFile) {
+        if (!emptyOrNull(manifestFile)) {
+            File androidManifestFile = new File(manifestFile);
+            if (androidManifestFile.exists()) {
+                String packageName = parsePackageName(androidManifestFile);
+                if (!emptyOrNull(packageName)) {
+                    setResourcePackageName(packageName);
+                } else {
+                    printError("Could not parse package name from manifest file (%s). " +
+                            "Consider passing the resource package directly as an apt argument " +
+                            "[resourcePackageName]", manifestFile);
+                }
+            } else {
+                printError("Manifest file (%s) not found. " +
+                        "Consider passing the resource package directly as an apt argument " +
+                        "[resourcePackageName]", manifestFile);
+            }
+        }
+    }
+
+    private String parsePackageName(File manifestFile) {
+        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
+
+        Document doc;
+        try {
+            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
+            doc = docBuilder.parse(manifestFile);
+        } catch (Exception e) {
+            return null;
+        }
+
+        org.w3c.dom.Element documentElement = doc.getDocumentElement();
+        documentElement.normalize();
+
+        return documentElement.getAttribute(PACKAGE);
+    }
+
+    protected void setResourcePackageName(String packageName) {
+        if (emptyOrNull(mResourcePackageName)) {
+            if (!emptyOrNull(packageName)) {
+                mResourcePackageName = packageName + ".R";
+            }
+        } else if (!emptyOrNull(packageName)) {
+            printError("Resource package name has already been set [%s], " +
+                    "remove duplicate declaration [%s].", mResourcePackageName, packageName);
+        }
+    }
+
+    protected String getPackageName() {
+        if (!emptyOrNull(mResourcePackageName)) {
+            return mResourcePackageName;
+        } else {
+            processingEnv.getMessager().printMessage(ERROR, "Resource package name is null. " +
+                            "Make sure to add the [resourcePackageName] apt argument to your projects " +
+                            "build.gradle if you wish to reference resources via name.");
+            return null;
+        }
+    }
+
+    protected String[] getViewIds(Element element) {
+        // Assemble information on the field
+        String type = BINDING_CLASS_TYPE_MAP.get(Bind.class);
+        String[] ids = getValidResourceIds(element.getAnnotation(Bind.class).value());
+        String[] resources = getValidResourceNames(element.getAnnotation(Bind.class).res(), type);
+        if (ids.length <= 0 && resources.length <= 0) {
+            printError(element, NONE_DECLARED_ERROR, Bind.class.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+        } else if (ids.length > 0 && resources.length > 0) {
+            printError(element, BOTH_DECLARED_ERROR, Bind.class.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+            return new String[]{};
+        }
+        // At this point, only one of the values can possible be set
+        return ids.length > 0 ? ids : resources;
+    }
+
+    protected String[] getListenerIds(Element element, Class<? extends Annotation> annotationClass) {
+        // Assemble information on the method.
+        Annotation annotation = element.getAnnotation(annotationClass);
+        String type = BINDING_CLASS_TYPE_MAP.get(annotationClass);
+        if (type == null) {
+            printError(element, UNRECOGNISED_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+            return new String[]{};
+        }
+        try {
+            Method annotationValue = annotationClass.getDeclaredMethod(VALUE);
+            Method annotationResource = annotationClass.getDeclaredMethod(RESOURCE);
+            if (annotationValue.getReturnType() != int[].class || annotationResource.getReturnType() != String[].class) {
+                throw new IllegalStateException(
+                        String.format(INVALID_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                                ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName()));
+            }
+            String[] ids = getValidResourceIds((int[]) annotationValue.invoke(annotation));
+            String[] resources = getValidResourceNames((String[]) annotationResource.invoke(annotation), type);
+
+            if (ids.length <= 0 && resources.length <= 0) {
+                // No ID means we're declaring our own listener, ButterKnife expects this value
+                resources = new String[]{NO_RESOURCE};
+            } else if (ids.length > 0 && resources.length > 0) {
+                printError(element, BOTH_DECLARED_ERROR, annotationClass,
+                        ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+                return new String[]{};
+            }
+            // At this point, only one of the values can possible be set
+            return ids.length > 0 ? ids : resources;
+        } catch (Exception e) {
+            printError(element, INVALID_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+            return new String[]{};
+        }
+    }
+
+    protected String getResourceId(Element element, Class<? extends Annotation> annotationClass) {
+        Annotation annotation = element.getAnnotation(annotationClass);
+        String type = BINDING_CLASS_TYPE_MAP.get(annotationClass);
+        if (type == null) {
+            printError(element, UNRECOGNISED_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+            return NO_RESOURCE;
+        }
+        try {
+            Method annotationValue = annotationClass.getDeclaredMethod(VALUE);
+            Method annotationResource = annotationClass.getDeclaredMethod(RESOURCE);
+            if (annotationValue.getReturnType() != int.class || annotationResource.getReturnType() != String.class) {
+                throw new IllegalStateException(
+                        String.format(INVALID_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                                ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName()));
+            }
+            int value = (Integer) annotationValue.invoke(annotation);
+            String resource = (String) annotationResource.invoke(annotation);
+            return getActualResourceId(element, value, resource, annotationClass, type);
+        } catch (Exception e) {
+            printError(element, INVALID_ANNOTATION_ERROR, annotationClass.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+            return NO_RESOURCE;
+        }
+    }
+
+    protected String getActualResourceId(Element element, int value, String resource, Class annotation,
+                                         String type) {
+        if (value <= 0 && (resource == null || resource.length() <= 0)) {
+            printError(element, NONE_DECLARED_ERROR, annotation.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+        } else if (value > 0 && resource != null && resource.length() > 0) {
+            printError(element, BOTH_DECLARED_ERROR, annotation.getSimpleName(),
+                    ((TypeElement) element.getEnclosingElement()).getQualifiedName(), element.getSimpleName());
+        }
+        // At this point, only one of the values can possible be set
+        if (value > 0) {
+            return String.valueOf(value);
+        } else {
+            return getPackageName() + "." + type + "." + resource;
+        }
+    }
+
+    String[] getValidResourceIds(int[] ids) {
+        List<String> validIds = new ArrayList<>();
+        for (int i : ids) {
+            if (i > 0) {
+                validIds.add(String.valueOf(i));
+            }
+        }
+        String[] tempIds = new String[validIds.size()];
+        return validIds.toArray(tempIds);
+    }
+
+    String[] getValidResourceNames(String[] names, String type) {
+        List<String> validIds = new ArrayList<>();
+        for (String name : names) {
+            if (name != null && name.length() > 0) {
+                validIds.add(getPackageName() + "." + type + "." + name);
+            }
+        }
+        String[] tempIds = new String[validIds.size()];
+        return validIds.toArray(tempIds);
+    }
+
+    protected void printError(String message, Object... args) {
+        printError(null, message, args);
+    }
+
+    protected void printError(Element element, String message, Object... args) {
+        printMessage(element, message, ERROR, args);
+    }
+
+    protected void printMessage(Element element, String message, Kind kind, Object... args) {
+        if (args.length > 0) {
+            message = String.format(message, args);
+        }
+        if (element != null) {
+            processingEnv.getMessager().printMessage(kind, message, element);
+        } else {
+            processingEnv.getMessager().printMessage(kind, message);
+        }
+    }
+
+    protected boolean emptyOrNull(String string) {
+        return string == null || NULL.equals(string);
+    }
+
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
index c641a676..53abc38e 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java
@@ -67,7 +67,7 @@
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
-public final class ButterKnifeProcessor extends AbstractProcessor {
+public final class ButterKnifeProcessor extends ButterKnifeAbstractProcessor {
   static final String VIEW_TYPE = "android.view.View";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
@@ -345,7 +345,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
     }
 
     // Assemble information on the field.
-    int[] ids = element.getAnnotation(Bind.class).value();
+    String[] ids = getViewIds(element);
     if (ids.length != 1) {
       error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
           Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
@@ -357,7 +357,7 @@ private void parseBindOne(Element element, Map<TypeElement, BindingClass> target
       return;
     }
 
-    int id = ids[0];
+    String id = ids[0];
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
@@ -433,14 +433,14 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(Bind.class).value();
+    String[] ids = getViewIds(element);
     if (ids.length == 0) {
       error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
       return;
     }
 
-    Integer duplicateId = findDuplicate(ids);
+    String duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
       error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
           duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
@@ -480,7 +480,7 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindBool.class).value();
+    String id = getResourceId(element, BindBool.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean");
@@ -516,7 +516,7 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindColor.class).value();
+    String id = getResourceId(element, BindColor.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
@@ -553,7 +553,7 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindDimen.class).value();
+    String id = getResourceId(element, BindDimen.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name,
@@ -586,7 +586,7 @@ private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindBitmap.class).value();
+    String id = getResourceId(element, BindBitmap.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
@@ -618,7 +618,7 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindDrawable.class).value();
+    String id = getResourceId(element, BindDrawable.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getDrawable");
@@ -649,7 +649,7 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindInt.class).value();
+    String id = getResourceId(element, BindInt.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger");
@@ -681,7 +681,7 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindString.class).value();
+    String id = getResourceId(element, BindString.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString");
@@ -715,7 +715,7 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int id = element.getAnnotation(BindArray.class).value();
+    String id = getResourceId(element, BindArray.class);
 
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName);
@@ -748,10 +748,10 @@ private static String getArrayResourceMethodName(Element element) {
   }
 
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
-    Set<Integer> seenElements = new LinkedHashSet<>();
+  private static String findDuplicate(String[] array) {
+    Set<String> seenElements = new LinkedHashSet<>();
 
-    for (int element : array) {
+    for (String element : array) {
       if (!seenElements.add(element)) {
         return element;
       }
@@ -806,7 +806,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           String.format("@%s annotation value() type not int[].", annotationClass));
     }
 
-    int[] ids = (int[]) annotationValue.invoke(annotation);
+    String[] ids = getListenerIds(element, annotationClass);
     String name = executableElement.getSimpleName().toString();
     boolean required = isRequiredBinding(element);
 
@@ -814,7 +814,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     boolean hasError = isInaccessibleViaGeneratedCode(annotationClass, "methods", element);
     hasError |= isBindingInWrongPackage(annotationClass, element);
 
-    Integer duplicateId = findDuplicate(ids);
+    String duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
       error(element, "@%s annotation for method contains duplicate ID %d. (%s.%s)",
           annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
@@ -829,8 +829,8 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
               annotationClass.getSimpleName()));
     }
 
-    for (int id : ids) {
-      if (id == View.NO_ID) {
+    for (String id : ids) {
+      if (id.equals(NO_RESOURCE)) {
         if (ids.length == 1) {
           if (!required) {
             error(element, "ID-free binding must not be annotated with @Nullable. (%s.%s)",
@@ -973,7 +973,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
     BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    for (int id : ids) {
+    for (String id : ids) {
       if (!bindingClass.addMethod(id, listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
index f160a641..b41d9bd6 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldBitmapBinding.java
@@ -1,15 +1,15 @@
 package butterknife.internal;
 
 final class FieldBitmapBinding {
-  private final int id;
+  private final String id;
   private final String name;
 
-  FieldBitmapBinding(int id, String name) {
+  FieldBitmapBinding(String id, String name) {
     this.id = id;
     this.name = name;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
index f4f0cd04..60b036fa 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldResourceBinding.java
@@ -1,17 +1,17 @@
 package butterknife.internal;
 
 final class FieldResourceBinding {
-  private final int id;
+  private final String id;
   private final String name;
   private final String method;
 
-  FieldResourceBinding(int id, String name, String method) {
+  FieldResourceBinding(String id, String name, String method) {
     this.id = id;
     this.name = name;
     this.method = method;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
diff --git a/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
index 7a9e82b4..61f96e3d 100644
--- a/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
+++ b/butterknife-compiler/src/main/java/butterknife/internal/ViewBindings.java
@@ -9,16 +9,16 @@
 import java.util.Set;
 
 final class ViewBindings {
-  private final int id;
+  private final String id;
   private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
   private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
       methodBindings = new LinkedHashMap<>();
 
-  ViewBindings(int id) {
+  ViewBindings(String id) {
     this.id = id;
   }
 
-  public int getId() {
+  public String getId() {
     return id;
   }
 
diff --git a/butterknife/src/main/java/butterknife/Bind.java b/butterknife/src/main/java/butterknife/Bind.java
index 2463353a..31ec154b 100644
--- a/butterknife/src/main/java/butterknife/Bind.java
+++ b/butterknife/src/main/java/butterknife/Bind.java
@@ -7,14 +7,18 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the view for the specified ID. The view will automatically be cast to the field
- * type.
+ * Bind a field to the view for the specified ID or resource name. The view will automatically be
+ * cast to the field type.
+ *
  * <pre><code>
- * {@literal @}Bind(R.id.title) TextView title;
+ * {@literal @}Bind(R.id.title) or {@literal @}Bind(res = "title")
+ * TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface Bind {
   /** View ID to which the field will be bound. */
-  int[] value();
+  int[] value() default { butterknife.internal.InternalKeys.NO_ID };
+  /** View ID to which the field will be bound, expressed as a {@link String}. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/BindArray.java b/butterknife/src/main/java/butterknife/BindArray.java
index 57992678..c42d9dd1 100644
--- a/butterknife/src/main/java/butterknife/BindArray.java
+++ b/butterknife/src/main/java/butterknife/BindArray.java
@@ -7,31 +7,37 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified array resource ID. The type of array will be inferred from the
- * annotated element.
+ * Bind a field to the specified array resource ID or name. The type of array will be inferred
+ * from the annotated element.
  *
  * String array:
  * <pre><code>
- * {@literal @}BindArray(R.array.countries) String[] countries;
+ * {@literal @}BindArray(R.array.countries) or {@literal @}BindArray(res = "countries")
+ * String[] countries;
  * </code></pre>
  *
  * Int array:
  * <pre><code>
- * {@literal @}BindArray(R.array.phones) int[] phones;
+ * {@literal @}BindArray(R.array.phones) or {@literal @}BindArray(res = "phones")
+ * int[] phones;
  * </code></pre>
  *
  * Text array:
  * <pre><code>
- * {@literal @}BindArray(R.array.options) CharSequence[] options;
+ * {@literal @}BindArray(R.array.options) or {@literal @}BindArray(res = "options")
+ * CharSequence[] options;
  * </code></pre>
  *
  * {@link android.content.res.TypedArray}:
  * <pre><code>
- * {@literal @}BindArray(R.array.icons) TypedArray icons;
+ * {@literal @}BindArray(R.array.icons) or {@literal @}BindArray(res = "icons")
+ * TypedArray icons;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Array resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindBitmap.java b/butterknife/src/main/java/butterknife/BindBitmap.java
index 38cab362..2363d429 100644
--- a/butterknife/src/main/java/butterknife/BindBitmap.java
+++ b/butterknife/src/main/java/butterknife/BindBitmap.java
@@ -8,13 +8,19 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
+ * Bind a field to a {@link Bitmap} from the specified drawable resource ID or name.
+ *
  * <pre><code>
- * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
+ * {@literal @}BindBitmap(R.drawable.logo) or {@literal @}BindBitmap(res = "logo")
+ * Bitmap logo;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBitmap {
   /** Drawable resource ID from which the {@link Bitmap} will be created. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Drawable resource ID from which the {@link Bitmap} will be created,
+   * expressed as a {@link String}.
+   */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindBool.java b/butterknife/src/main/java/butterknife/BindBool.java
index 8793c582..e0d131ff 100644
--- a/butterknife/src/main/java/butterknife/BindBool.java
+++ b/butterknife/src/main/java/butterknife/BindBool.java
@@ -7,13 +7,17 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified boolean resource ID.
+ * Bind a field to the specified boolean resource ID or name.
+ *
  * <pre><code>
- * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
+ * {@literal @}BindBool(R.bool.is_tablet) or {@literal @}BindBool(res = "is_tablet")
+ * boolean isTablet;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Boolean resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindColor.java b/butterknife/src/main/java/butterknife/BindColor.java
index 33ffd385..b6f86c3c 100644
--- a/butterknife/src/main/java/butterknife/BindColor.java
+++ b/butterknife/src/main/java/butterknife/BindColor.java
@@ -7,15 +7,23 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified color resource ID. Type can be {@code int} or
+ * Bind a field to the specified color resource ID or name. Type can be {@code int} or
  * {@link android.content.res.ColorStateList}.
+ *
  * <pre><code>
- * {@literal @}BindColor(R.color.background_green) int green;
- * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
+ * {@literal @}BindColor(R.color.background_green)
+ * or @literal @}BindColor(res = "background_green")
+ * int backgroundGreen;
+ *
+ * {@literal @}BindColor(R.color.background_green_selector)
+ * or @literal @}BindColor(res = "background_green_selector")
+ * ColorStateList backgroundGreenSelector;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Color resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindDimen.java b/butterknife/src/main/java/butterknife/BindDimen.java
index 60682b21..7ca2d86a 100644
--- a/butterknife/src/main/java/butterknife/BindDimen.java
+++ b/butterknife/src/main/java/butterknife/BindDimen.java
@@ -7,15 +7,21 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
- * {@code float} for exact amount.
+ * Bind a field to the specified dimension resource ID or name. Type can be {@code int} for pixel
+ * size or {@code float} for exact amount.
+ *
  * <pre><code>
- * {@literal @}BindDimen(R.dimen.horizontal_gap) int gapPx;
- * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) or {@literal @}BindDimen(res = "horizontal_gap")
+ * int horizontalGap;
+ *
+ * {@literal @}BindDimen(R.dimen.horizontal_gap) or {@literal @}BindDimen(res = "horizontal_gap")
+ * float horizontalGap;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Dimension resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindDrawable.java b/butterknife/src/main/java/butterknife/BindDrawable.java
index 2fa48747..688460c4 100644
--- a/butterknife/src/main/java/butterknife/BindDrawable.java
+++ b/butterknife/src/main/java/butterknife/BindDrawable.java
@@ -7,13 +7,18 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified drawable resource ID.
+ * Bind a field to the specified drawable resource ID or name.
+ *
  * <pre><code>
- * {@literal @}BindDrawable(R.drawable.placeholder) Drawable placeholder;
+ * {@literal @}BindDrawable(R.drawable.placeholder)
+ * or {@literal @}BindDrawable(res = "placeholder")
+ * Drawable placeholder;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Drawable resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindInt.java b/butterknife/src/main/java/butterknife/BindInt.java
index ccfc20e8..d76c45e2 100644
--- a/butterknife/src/main/java/butterknife/BindInt.java
+++ b/butterknife/src/main/java/butterknife/BindInt.java
@@ -7,13 +7,17 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified integer resource ID.
+ * Bind a field to the specified integer resource ID or name.
+ *
  * <pre><code>
- * {@literal @}BindInt(R.int.columns) int columns;
+ * {@literal @}BindInt(R.int.columns) or {@literal @}BindInt(res = "columns")
+ * int columns;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** Integer resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/BindString.java b/butterknife/src/main/java/butterknife/BindString.java
index 690f5af5..37629407 100644
--- a/butterknife/src/main/java/butterknife/BindString.java
+++ b/butterknife/src/main/java/butterknife/BindString.java
@@ -7,13 +7,18 @@
 import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
- * Bind a field to the specified string resource ID.
+ * Bind a field to the specified string resource ID or name.
+ *
  * <pre><code>
- * {@literal @}BindString(R.string.username_error) String usernameErrorText;
+ * {@literal @}BindString(R.string.username_error)
+ * or {@literal @}BindString(res = "username_error")
+ * String usernameError;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
 public @interface BindString {
   /** String resource ID to which the field will be bound. */
-  int value();
+  int value() default butterknife.internal.InternalKeys.NO_ID;
+  /** String resource ID to which the field will be bound, expressed as a {@link String}. */
+  String res() default butterknife.internal.InternalKeys.NO_RESOURCE;
 }
diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index 198a5c8d..7f2064ff 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnCheckedChangeListener OnCheckedChangeListener} on the view for
  * each ID specified.
  * <pre><code>
- * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
+ * {@literal @}OnCheckedChanged(R.id.example) or {@literal @}OnCheckedChanged(res = "example")
+ * void onChecked(boolean checked) {
  *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -41,4 +42,6 @@
 public @interface OnCheckedChanged {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnClick.java b/butterknife/src/main/java/butterknife/OnClick.java
index 6f9aaef2..8021977e 100644
--- a/butterknife/src/main/java/butterknife/OnClick.java
+++ b/butterknife/src/main/java/butterknife/OnClick.java
@@ -13,7 +13,8 @@
 /**
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnClick(R.id.example) void onClick() {
+ * {@literal @}OnClick(R.id.example) or {@literal @}OnClick(res = "example")
+ * void onClick() {
  *   Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -37,4 +38,6 @@
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index 922e588d..58af8b00 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnEditorActionListener OnEditorActionListener} on the view for each
  * ID specified.
  * <pre><code>
- * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
+ * {@literal @}OnEditorAction(R.id.example) or {@literal @}OnEditorAction(res = "example")
+ * boolean onEditorAction(KeyEvent key) {
  *   Toast.makeText(this, "Pressed: " + key, Toast.LENGTH_SHORT).show();
  *   return true;
  * }
@@ -45,4 +46,6 @@
 public @interface OnEditorAction {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnFocusChange.java b/butterknife/src/main/java/butterknife/OnFocusChange.java
index 075b5206..6bb63ef1 100644
--- a/butterknife/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife/src/main/java/butterknife/OnFocusChange.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnFocusChangeListener OnFocusChangeListener} on the view for each ID
  * specified.
  * <pre><code>
- * {@literal @}OnFocusChange(R.id.example) void onFocusChanged(boolean focused) {
+ * {@literal @}OnFocusChange(R.id.example) or {@literal @}OnFocusChange(res = "example")
+ * void onFocusChanged(boolean focused) {
  *   Toast.makeText(this, focused ? "Gained focus" : "Lost focus", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -40,4 +41,6 @@
 public @interface OnFocusChange {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemClick.java b/butterknife/src/main/java/butterknife/OnItemClick.java
index 36d4536b..2d0315cc 100644
--- a/butterknife/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemClick.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnItemClickListener OnItemClickListener} on the view for each ID
  * specified.
  * <pre><code>
- * {@literal @}OnItemClick(R.id.example_list) void onItemClick(int position) {
+ * {@literal @}OnItemClick(R.id.example) or {@literal @}OnItemClick(res = "example")
+ * void onItemClick(int position) {
  *   Toast.makeText(this, "Clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -42,4 +43,6 @@
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemLongClick.java b/butterknife/src/main/java/butterknife/OnItemLongClick.java
index f6ef8e6d..71714627 100644
--- a/butterknife/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnItemLongClick.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnItemLongClickListener OnItemLongClickListener} on the view for each
  * ID specified.
  * <pre><code>
- * {@literal @}OnItemLongClick(R.id.example_list) boolean onItemLongClick(int position) {
+ * {@literal @}OnItemLongClick(R.id.example) or {@literal @}OnItemLongClick(res = "example")
+ * boolean onItemLongClick(int position) {
  *   Toast.makeText(this, "Long clicked position " + position + "!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
@@ -46,4 +47,6 @@
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnItemSelected.java b/butterknife/src/main/java/butterknife/OnItemSelected.java
index 942fa724..0f2d002b 100644
--- a/butterknife/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife/src/main/java/butterknife/OnItemSelected.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnItemSelectedListener OnItemSelectedListener} on the view for each
  * ID specified.
  * <pre><code>
- * {@literal @}OnItemSelected(R.id.example_list) void onItemSelected(int position) {
+ * {@literal @}OnItemSelected(R.id.example) or {@literal @}OnItemSelected(res = "example")
+ * void onItemSelected(int position) {
  *   Toast.makeText(this, "Selected position " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -43,6 +44,8 @@
 public @interface OnItemSelected {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.ITEM_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnLongClick.java b/butterknife/src/main/java/butterknife/OnLongClick.java
index 2ebc6c41..61bf461e 100644
--- a/butterknife/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife/src/main/java/butterknife/OnLongClick.java
@@ -14,7 +14,8 @@
  * Bind a method to an {@link OnLongClickListener OnLongClickListener} on the view for each ID
  * specified.
  * <pre><code>
- * {@literal @}OnLongClick(R.id.example) boolean onLongClick() {
+ * {@literal @}OnLongClick(R.id.example) or {@literal @}OnLongClick(res = "example")
+ * boolean onLongClick() {
  *   Toast.makeText(this, "Long clicked!", Toast.LENGTH_SHORT).show();
  *   return true;
  * }
@@ -41,4 +42,6 @@
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/OnPageChange.java b/butterknife/src/main/java/butterknife/OnPageChange.java
index 8c7e2a1e..4ab1528e 100644
--- a/butterknife/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife/src/main/java/butterknife/OnPageChange.java
@@ -12,7 +12,8 @@
 /**
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnPageChange(R.id.example_pager) void onPageSelected(int position) {
+ * {@literal @}OnPageChange(R.id.example) or {@literal @}OnPageChange(res = "example")
+ * void onPageSelected(int position) {
  *   Toast.makeText(this, "Selected " + position + "!", Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -37,6 +38,8 @@
 public @interface OnPageChange {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.PAGE_SELECTED;
diff --git a/butterknife/src/main/java/butterknife/OnTextChanged.java b/butterknife/src/main/java/butterknife/OnTextChanged.java
index 7302bd6c..bd7d1a81 100644
--- a/butterknife/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife/src/main/java/butterknife/OnTextChanged.java
@@ -13,7 +13,8 @@
 /**
  * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
+ * {@literal @}OnTextChanged(R.id.example) or {@literal @}OnTextChanged(res = "example")
+ * void onTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
  * }
  * </code></pre>
@@ -41,6 +42,8 @@
 public @interface OnTextChanged {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 
   /** Listener callback to which the method will be bound. */
   Callback callback() default Callback.TEXT_CHANGED;
diff --git a/butterknife/src/main/java/butterknife/OnTouch.java b/butterknife/src/main/java/butterknife/OnTouch.java
index 144240c5..ca259550 100644
--- a/butterknife/src/main/java/butterknife/OnTouch.java
+++ b/butterknife/src/main/java/butterknife/OnTouch.java
@@ -13,7 +13,8 @@
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
  * <pre><code>
- * {@literal @}OnTouch(R.id.example) boolean onTouch() {
+ * {@literal @}OnTouch(R.id.example) or {@literal @}OnTouch(res = "example")
+ * boolean onTouch() {
  *   Toast.makeText(this, "Touched!", Toast.LENGTH_SHORT).show();
  *   return false;
  * }
@@ -43,4 +44,6 @@
 public @interface OnTouch {
   /** View IDs to which the method will be bound. */
   int[] value() default { View.NO_ID };
+  /** View IDs to which the method will be bound, expressed as {@link String}s. */
+  String[] res() default { butterknife.internal.InternalKeys.NO_RESOURCE };
 }
diff --git a/butterknife/src/main/java/butterknife/internal/InternalKeys.java b/butterknife/src/main/java/butterknife/internal/InternalKeys.java
index 56fd8e37..9b4bc6b0 100644
--- a/butterknife/src/main/java/butterknife/internal/InternalKeys.java
+++ b/butterknife/src/main/java/butterknife/internal/InternalKeys.java
@@ -8,6 +8,9 @@
   public static final String ANDROID_PREFIX = "android.";
   public static final String JAVA_PREFIX = "java.";
 
+  public static final int NO_ID = android.view.View.NO_ID;
+  public static final String NO_RESOURCE = "";
+
   private InternalKeys() {
     throw new AssertionError("No instances.");
   }
