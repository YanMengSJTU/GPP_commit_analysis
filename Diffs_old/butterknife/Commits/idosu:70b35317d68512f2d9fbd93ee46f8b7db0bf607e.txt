diff --git a/butterknife/src/main/java/butterknife/butterui/ButterActivity.java b/butterknife/src/main/java/butterknife/butterui/ButterActivity.java
index dc9cf213..a4ed1b25 100644
--- a/butterknife/src/main/java/butterknife/butterui/ButterActivity.java
+++ b/butterknife/src/main/java/butterknife/butterui/ButterActivity.java
@@ -5,6 +5,7 @@
 import android.os.PersistableBundle;
 
 import butterknife.ButterKnife;
+import butterknife.Unbinder;
 
 /**
  * Extenders of this class can remove another part of the unneeded noise in the class.<br>
@@ -32,6 +33,8 @@
  *      <br>Jul 31 2016 idosu
  */
 public abstract class ButterActivity extends Activity {
+    private Unbinder unbinder;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -46,6 +49,10 @@ public void onCreate(Bundle savedInstanceState, PersistableBundle persistentStat
 
     private void bind() {
         setContentView(BindLayoutUtil.getBindLayout(getClass()));
-        ButterKnife.bind(this);
+        unbinder = ButterKnife.bind(this);
+    }
+
+    protected Unbinder getUnbinder() {
+        return unbinder;
     }
 }
\ No newline at end of file
diff --git a/butterknife/src/main/java/butterknife/butterui/ButterFragment.java b/butterknife/src/main/java/butterknife/butterui/ButterFragment.java
index b82a6d00..23a16ca5 100644
--- a/butterknife/src/main/java/butterknife/butterui/ButterFragment.java
+++ b/butterknife/src/main/java/butterknife/butterui/ButterFragment.java
@@ -8,6 +8,7 @@
 import android.view.ViewGroup;
 
 import butterknife.ButterKnife;
+import butterknife.Unbinder;
 
 /**
  * Extenders of this class can remove another part of the unneeded noise in the class.<br>
@@ -35,12 +36,17 @@
  *      <br>Jul 31 2016 idosu
  */
 public abstract class ButterFragment extends Fragment {
-    @Nullable
+    private Unbinder unbinder;
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         // TODO(idosu): Add a way to configure attachToRoot
         View view = inflater.inflate(BindLayoutUtil.getBindLayout(getClass()), container);
-        ButterKnife.bind(this, view);
+        unbinder = ButterKnife.bind(this, view);
         return view;
     }
+
+    protected Unbinder getUnbinder() {
+        return unbinder;
+    }
 }
\ No newline at end of file
diff --git a/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java b/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java
index aafc0842..8c4d8301 100644
--- a/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java
+++ b/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java
@@ -4,7 +4,8 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 /**
  * @author
diff --git a/butterknife/src/test/java/butterknife/butterui/ButterActivityTest.java b/butterknife/src/test/java/butterknife/butterui/ButterActivityTest.java
new file mode 100644
index 00000000..f5d8112a
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/butterui/ButterActivityTest.java
@@ -0,0 +1,75 @@
+package butterknife.butterui;
+
+import android.support.annotation.LayoutRes;
+import android.test.mock.MockContentProvider;
+import android.test.mock.MockContentResolver;
+import android.test.mock.MockContext;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
+
+/**
+ * @author
+ *      <br>Aug 02 2016 idosu
+ */
+@RunWith(RobolectricTestRunner.class)
+public class ButterActivityTest {
+    private static class ActivityNoAnnotation extends ButterActivity {
+    }
+
+    @BindLayout(ActivityWithAnnotation.res)
+    private static class ActivityWithAnnotation extends ButterActivity {
+        @LayoutRes
+        public static final int res = 1337;
+
+        public Integer layoutResID = null;
+
+        // This is a mock with argument capture
+        @Override
+        public void setContentView(int layoutResID) {
+            this.layoutResID = layoutResID;
+        }
+    }
+
+    @Test
+    public void testNoAnnotation() {
+        try {
+            Robolectric.setupActivity(ActivityNoAnnotation.class);
+            fail();
+        } catch (IllegalStateException e) {
+            assertEquals("Must set BindLayout to use this feature", e.getMessage());
+        }
+    }
+
+    @Test
+    public void testWithAnnotationOnCreate1() {
+        ActivityWithAnnotation activity = Robolectric.setupActivity(ActivityWithAnnotation.class);
+
+        assertNotNull("Method setContentView was not called", activity.layoutResID);
+        assertEquals(ActivityWithAnnotation.res, activity.layoutResID.intValue());
+
+        assertNotNull("It must be because ButterKnife.bind() was not called", activity.getUnbinder());
+    }
+
+    @Ignore
+    @Test
+    public void testWithAnnotationOnCreate2() {
+        // TODO: Test this with android:persistableMode="persistAcrossReboots"
+
+        ActivityWithAnnotation activity = Robolectric.setupActivity(ActivityWithAnnotation.class);
+
+        assertNotNull("Method setContentView was not called", activity.layoutResID);
+        assertEquals(ActivityWithAnnotation.res, activity.layoutResID.intValue());
+
+        assertNotNull("It must be because ButterKnife.bind() was not called", activity.getUnbinder());
+    }
+}
\ No newline at end of file
diff --git a/butterknife/src/test/java/butterknife/butterui/ButterFragmentTest.java b/butterknife/src/test/java/butterknife/butterui/ButterFragmentTest.java
new file mode 100644
index 00000000..03e9abd0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/butterui/ButterFragmentTest.java
@@ -0,0 +1,54 @@
+package butterknife.butterui;
+
+import android.support.annotation.LayoutRes;
+
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
+
+/**
+ * @author
+ *      <br>Aug 02 2016 idosu
+ */
+@RunWith(RobolectricTestRunner.class)
+public class ButterFragmentTest {
+    public static class FragmentNoAnnotation extends ButterFragment {
+    }
+
+    @BindLayout(FragmentWithAnnotation.res)
+    public static class FragmentWithAnnotation extends ButterFragment {
+        @LayoutRes
+        public static final int res = 1337;
+
+        public Integer layoutResID = null;
+    }
+
+    @Test
+    public void testNoAnnotation() {
+        try {
+            Robolectric.buildFragment(FragmentNoAnnotation.class).create().get();
+            fail();
+        } catch (IllegalStateException e) {
+            assertEquals("Must set BindLayout to use this feature", e.getMessage());
+        }
+    }
+
+    @Ignore
+    @Test
+    public void testWithAnnotationOnCreate() {
+        // TODO: Mock the inflater
+
+        FragmentWithAnnotation fragment = Robolectric.buildFragment(FragmentWithAnnotation.class).create().get();
+
+        assertNotNull("Method was not called", fragment.layoutResID);
+        assertEquals(FragmentWithAnnotation.res, fragment.layoutResID.intValue());
+
+        assertNotNull("It must be because ButterKnife.bind() was not called", fragment.getUnbinder());
+    }
+}
\ No newline at end of file
