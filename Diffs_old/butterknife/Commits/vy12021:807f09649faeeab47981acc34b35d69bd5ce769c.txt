diff --git a/build.gradle b/build.gradle
index b0467505..3b85fa52 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,13 +3,13 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 14,
-      'compileSdk': 27,
-      'buildTools': '27.0.2',
+      'compileSdk': 28,
+      'buildTools': '28.0.3',
 
-      'supportLibrary': '27.0.2',
-      'androidPlugin': '3.0.1',
-      'androidTools': '26.0.0',
-      'kotlin': '1.2.31',
+      'supportLibrary': '28.0.0',
+      'androidPlugin': '3.2.1',
+      'androidTools': '26.2.1',
+      'kotlin': '1.2.71',
 
       'release': '8.8.1.5',
   ]
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 4e2d5ed4..2550929a 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -40,5 +40,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
-  boolean handle() default false;
+  boolean retry() default true;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 711b9516..0bb8572b 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -45,5 +45,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
-  boolean handle() default false;
+  boolean retry() default true;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index d359f359..44157124 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -49,5 +49,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
-  boolean handle() default false;
+  boolean retry() default true;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 05f0bb32..706764b7 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -44,5 +44,5 @@
   @IdRes int[] value() default { View.NO_ID };
   String[] required() default {};
   String key() default "";
-  boolean handle() default false;
+  boolean retry() default true;
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 78a59194..1b757420 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -474,7 +474,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
         if (methodBindings.containsKey(method)) {
           for (MethodViewBinding methodBinding : methodBindings.get(method)) {
 
-            boolean handle = methodBinding.isHandle();
+            boolean retry = methodBinding.pendingRetry();
             String[] requireds = methodBinding.getRequireds();
             String key = methodBinding.getKey();
             // Condition[] conditions = new Condition[requireds.length];
@@ -527,7 +527,7 @@ protected Object execute() {
               }
             }
             methodBlock.add(");\n");
-            // TODO generate postAction() method, will remove in the future.
+            // TODO generate postAction() method, will removed in the future.
             if (null != key && !"".equals(key)) {
               if (!isBinder) {
                 throw new RuntimeException(
@@ -547,19 +547,15 @@ protected Object execute() {
             builder.addStatement("$T executor = $L", METHOD_EXECUTOR, executorType.build());
 
             // final ClickSession session = new ClickSession(target, p0, conditions, executor);
-            builder.addStatement("final $T session = new $T(target, p0, $S, conditions, executor)",
-                    CLICK_SESSION, CLICK_SESSION, key);
+            builder.addStatement("final $T session = new $T(target, p0, $S, conditions, executor, $L)",
+                    CLICK_SESSION, CLICK_SESSION, key, retry);
 
             // TODO generate conditions
             /*for (int i = 0; i < requireds.length; i++) {
               conditions[i] = new Condition("condition") {
                 @Override
                 protected boolean require() {
-                  if (handle) {
-                    return target.condition();
-                  } else {
-                    return target.condition(session);
-                  }
+                  return target.condition(session);
                 }
               };
             }*/
@@ -573,11 +569,7 @@ protected boolean require() {
                           .addAnnotation(Override.class)
                           .addModifiers(PROTECTED)
                           .returns(boolean.class);
-                  if (!handle) {
-                    methodRequired.addStatement("return target.$L()", required);
-                  } else {
-                    methodRequired.addStatement("return target.$L(session)", required);
-                  }
+                  methodRequired.addStatement("return target.$L(session)", required);
                   typeCondition.addMethod(methodRequired.build());
                   builder.addStatement("conditions[$L] = $L", i, typeCondition.build());
                 } else {
@@ -704,7 +696,7 @@ private static TypeName bestGuess(String type) {
             left = type.indexOf('<', left + 1);
           } while (left != -1);
           return ParameterizedTypeName.get(typeClassName,
-              typeArguments.toArray(new TypeName[typeArguments.size()]));
+              typeArguments.toArray(new TypeName[0]));
         }
         return ClassName.bestGuess(type);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 4e0af7b2..eea54fcf 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1065,13 +1065,11 @@ private void parseResourceArray(Element element,
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
   private static Integer findDuplicate(int[] array) {
     Set<Integer> seenElements = new LinkedHashSet<>();
-
     for (int element : array) {
       if (!seenElements.add(element)) {
         return element;
       }
     }
-
     return null;
   }
 
@@ -1147,11 +1145,11 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       requireds = (String[]) annotationRequired.invoke(annotation);
     }
 
-    // TODO isHandle
-    boolean handle = false;
-    Method annotationRetry = annotationClass.getDeclaredMethod("handle");
+    // TODO pendingRetry
+    boolean pendingRetry = false;
+    Method annotationRetry = annotationClass.getDeclaredMethod("retry");
     if (annotationRetry.getReturnType() == boolean.class) {
-      handle = (boolean) annotationRetry.invoke(annotation);
+      pendingRetry = (boolean) annotationRetry.invoke(annotation);
     }
 
     // TODO getKey
@@ -1302,7 +1300,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name,
-            Arrays.asList(parameters), requireds, handle, key, required);
+            Arrays.asList(parameters), requireds, pendingRetry, key, required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
       QualifiedId qualifiedId = elementToQualifiedId(element, id);
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index 3103df07..8ea5c6ad 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -10,24 +10,15 @@
   private final boolean required;
   private final String[] requireds;
   private final String key;
-  private final boolean handle;
-
-  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
-    this.name = name;
-    this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
-    this.required = required;
-    this.requireds = null;
-    this.key = null;
-    this.handle = false;
-  }
+  private final boolean pendingRetry;
 
   MethodViewBinding(String name, List<Parameter> parameters,
-                    String[] requireds, boolean handle, String key, boolean required) {
+                    String[] requireds, boolean pendingRetry, String key, boolean required) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
     this.requireds = requireds;
-    this.handle = handle;
+    this.pendingRetry = pendingRetry;
     this.key = key;
   }
 
@@ -43,8 +34,8 @@ public String getName() {
     return null == requireds ? new String[0] : requireds;
   }
 
-  public boolean isHandle() {
-    return handle;
+  public boolean pendingRetry() {
+    return pendingRetry;
   }
 
   public String getKey() {
@@ -58,4 +49,5 @@ public String getKey() {
   public boolean isRequired() {
     return required;
   }
+
 }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index a7306fb5..93cef457 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -7,6 +7,7 @@ import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
+import groovy.util.XmlSlurper
 import org.gradle.api.DomainObjectSet
 import org.gradle.api.Plugin
 import org.gradle.api.Project
@@ -39,15 +40,30 @@ class ButterKnifePlugin : Plugin<Project> {
     }
   }
 
+  // Parse the variant's main manifest file in order to get the package id which is used to create
+  // R.java in the right place.
+  private fun getPackageName(variant : BaseVariant) : String {
+    val slurper = XmlSlurper(false, false)
+    val list = variant.sourceSets.map { it.manifestFile }
+
+    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones.
+    // So the first file in the sourceSets list should be main.
+    val result = slurper.parse(list[0])
+    return result.getProperty("@package").toString()
+  }
+
   private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
+      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false
       val outputDir = project.buildDir.resolve(
-          "generated/source/r2/${variant.dirName}")
+              "generated/source/r2/${variant.dirName}")
 
       val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.inputs.property("useAndroidX", useAndroidX)
       task.outputs.dir(outputDir)
       variant.registerJavaGeneratingTask(task, outputDir)
 
+      val rPackage = getPackageName(variant)
       val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
@@ -56,7 +72,6 @@ class ButterKnifePlugin : Plugin<Project> {
         // Though there might be multiple outputs, their R files are all the same. Thus, we only
         // need to configure the task once with the R.java input and action.
         if (once.compareAndSet(false, true)) {
-          val rPackage = processResources.packageForR
           val pathToR = rPackage.replace('.', File.separatorChar)
           val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
 
@@ -64,7 +79,7 @@ class ButterKnifePlugin : Plugin<Project> {
             inputs.file(rFile)
 
             doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", !useAndroidX)
             }
           }
         }
@@ -73,6 +88,6 @@ class ButterKnifePlugin : Plugin<Project> {
   }
 
   private operator fun <T : Any> ExtensionContainer.get(type: KClass<T>): T {
-    return getByType(type.java)
+    return getByType(type.java)!!
   }
-}
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
index 672da6dc..9a9797de 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -27,43 +27,45 @@
  * Also enables adding support annotations to indicate the type of resource for every field.
  */
 public final class FinalRClassBuilder {
-  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
+  private static final String ANNOTATION_PACKAGE = "androidx.annotation";
+  private static final String ANNOTATION_PACKAGE_LEGACY = "android.support.annotation";
   private static final String[] SUPPORTED_TYPES = {
-      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
-      "string", "style", "styleable"
+          "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
+          "string", "style", "styleable"
   };
 
   private FinalRClassBuilder() { }
 
-  public static void brewJava(File rFile, File outputDir, String packageName, String className)
-      throws Exception {
+  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useLegacyTypes)
+          throws Exception {
     CompilationUnit compilationUnit = JavaParser.parse(rFile);
     TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
 
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
+    TypeSpec.Builder result = TypeSpec.classBuilder(className)
+            .addModifiers(PUBLIC, FINAL);
 
     for (Node node : resourceClass.getChildNodes()) {
       if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useLegacyTypes);
       }
     }
 
     JavaFile finalR = JavaFile.builder(packageName, result.build())
-        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
-        .build();
+            .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+            .build();
 
     finalR.writeTo(outputDir);
   }
 
   private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node) {
+                                      ClassOrInterfaceDeclaration node, boolean useLegacyTypes) {
     if (!supportedTypes.contains(node.getNameAsString())) {
       return;
     }
 
     String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type)
+            .addModifiers(PUBLIC, STATIC, FINAL);
 
     for (BodyDeclaration field : node.getMembers()) {
       if (field instanceof FieldDeclaration) {
@@ -72,7 +74,7 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
         // used in annotations.
         if (isInt(declaration)) {
           addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type));
+                  getSupportAnnotationClass(type, useLegacyTypes));
         }
       }
     }
@@ -83,16 +85,19 @@ private static void addResourceType(List<String> supportedTypes, TypeSpec.Builde
   private static boolean isInt(FieldDeclaration field) {
     Type type = field.getCommonType();
     return type instanceof PrimitiveType
-        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
+            && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
   }
 
   private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
-      ClassName annotation) {
+                                       ClassName annotation) {
     String fieldName = variable.getNameAsString();
-    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);
+    String fieldValue = variable.getInitializer()
+            .map(Node::toString)
+            .orElseThrow(
+                    () -> new IllegalStateException("Field " + fieldName + " missing initializer"));
     FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
-        .addModifiers(PUBLIC, STATIC, FINAL)
-        .initializer(fieldValue);
+            .addModifiers(PUBLIC, STATIC, FINAL)
+            .initializer(fieldValue);
 
     if (annotation != null) {
       fieldSpecBuilder.addAnnotation(annotation);
@@ -101,11 +106,12 @@ private static void addResourceField(TypeSpec.Builder resourceType, VariableDecl
     resourceType.addField(fieldSpecBuilder.build());
   }
 
-  private static ClassName getSupportAnnotationClass(String type) {
-    return ClassName.get(SUPPORT_ANNOTATION_PACKAGE, capitalize(type) + "Res");
+  private static ClassName getSupportAnnotationClass(String type, boolean useLegacyTypes) {
+    String supportPackage = useLegacyTypes ? ANNOTATION_PACKAGE_LEGACY : ANNOTATION_PACKAGE;
+    return ClassName.get(supportPackage, capitalize(type) + "Res");
   }
 
   private static String capitalize(String word) {
     return Character.toUpperCase(word.charAt(0)) + word.substring(1);
   }
-}
+}
\ No newline at end of file
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 43787a77..0f389fdd 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -57,12 +57,12 @@
   private boolean retryFlag;
   private SimpleAdapter adapter;
 
-  @OnClick(value = {R.id.hello}, required = {"condition"}, handle = true, key = "hello") void sayHello() {
+  @OnClick(value = {R.id.hello}, required = {"condition"}, retry = true, key = "hello") void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(value = R.id.hello, required = {"condition"}, handle = true, key = "hello Long") boolean sayGetOffMe() {
+  @OnLongClick(value = R.id.hello, required = {"condition"}, retry = true, key = "hello Long") boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
diff --git a/butterknife/src/main/java/butterknife/internal/ClickSession.java b/butterknife/src/main/java/butterknife/internal/ClickSession.java
index 3c420916..bf84a9d6 100644
--- a/butterknife/src/main/java/butterknife/internal/ClickSession.java
+++ b/butterknife/src/main/java/butterknife/internal/ClickSession.java
@@ -41,14 +41,20 @@
    * A delegate for method binding invoke.
    */
   public final MethodExecutor executor;
+  /**
+   * Whether invoke executor when conditions valid.
+   */
+  public final boolean pendingRetry;
 
   public ClickSession(@Nullable Object target, @Nullable View view, @Nullable String key,
-                      @Nullable Condition[] conditions, MethodExecutor executor) {
+                      @Nullable Condition[] conditions, MethodExecutor executor,
+                      boolean pendingRetry) {
     this.target = target;
     this.view = view;
     this.key = key;
     this.conditions = conditions;
     this.executor = executor;
+    this.pendingRetry = pendingRetry;
   }
 
   /**
@@ -81,7 +87,7 @@ protected Object execute() {
                 action.run();
                 return null;
               }
-            });
+            }, true);
   }
 
   /**
@@ -112,7 +118,7 @@ protected Object execute() {
                 action.run();
                 return null;
               }
-            });
+            }, true);
     for (int i = 0; i < requireds.length; i++) {
       conditions[i] = new Condition(requireds[i]) {
         @Override
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
index 28f8de50..86e1532c 100644
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -21,10 +21,9 @@
         + "import butterknife.internal.Condition;\n"
         + "import butterknife.ViewBinder;\n"
         + "public class Test implements ViewBinder {\n"
-        + "  @OnClick(value = {1}, required = {\"condition\"}, handle = true, key = \"Key\") void doStuff() {}\n"
+        + "  @OnClick(value = {1}, required = {\"condition\"}, retry = true, key = \"Key\") void doStuff() {}\n"
 
             + "public boolean condition(ClickSession session) {return true;}\n"
-            + "public boolean condition() {return true;}\n"
             + "public void onPreClick(ClickSession session) {}\n"
             + "public void onPostClick(ClickSession session) {}\n"
             + "@Override public void postAction(View view, String clazz, String method, String key) {}\n"
@@ -39,7 +38,6 @@
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        //+ "import butterknife.ViewBinder;\n"
         + "import butterknife.internal.ClickSession;\n"
         + "import butterknife.internal.Condition;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
@@ -69,11 +67,10 @@
         + "            return null;\n"
         + "          }\n"
         + "        };\n"
-        + "        final ClickSession session = new ClickSession(target, p0, \"Key\", conditions, executor);\n"
+        + "        final ClickSession session = new ClickSession(target, p0, \"Key\", conditions, executor, true);\n"
         + "        conditions[0] = new Condition(\"condition\") {\n"
         + "          @Override\n"
         + "          protected boolean require() {\n"
-        //+ "            return target.condition();\n"
         + "            return target.condition(session);\n"
         + "          }\n"
         + "        };\n"
@@ -82,7 +79,6 @@
         + "        if (result) {\n"
         + "          target.onPostClick(session);\n"
         + "        }\n"
-        //+ "        return;\n"
         + "      }\n"
         + "    });\n"
         + "  }\n"
diff --git a/gradle.properties b/gradle.properties
index 0c33a252..ee4967ef 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.8.1.12-SNAPSHOT
+VERSION_NAME=8.8.1.15-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
diff --git a/gradle/gradle-mvn-push.gradle b/gradle/gradle-mvn-push.gradle
index c3a701a0..ccf21388 100644
--- a/gradle/gradle-mvn-push.gradle
+++ b/gradle/gradle-mvn-push.gradle
@@ -39,7 +39,7 @@ def getRepositoryUsername() {
 }
 
 def getRepositoryPassword() {
-  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
+  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : "Qzpm121121"
 }
 
 /*def getReleaseRepositoryUrl() {
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ccb18e1f..67d812be 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
