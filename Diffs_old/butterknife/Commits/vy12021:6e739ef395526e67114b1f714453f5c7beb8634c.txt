diff --git a/.gitignore b/.gitignore
index 92007a21..678b1e72 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,6 +20,5 @@ obj
 # Gradle
 .gradle
 jniLibs
-build
 local.properties
 reports
diff --git a/build.gradle b/build.gradle
index ce43435e..36312ce7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
       'buildTools': '25.0.2',
 
       'supportLibrary': '25.1.0',
-      'androidPlugin': '2.2.0',
+      'androidPlugin': '2.3.0',
       'androidTools': '25.2.0',
       'kotlin': '1.1.2-3',
 
diff --git a/butterknife-annotations/src/main/java/butterknife/Bind.java b/butterknife-annotations/src/main/java/butterknife/Bind.java
new file mode 100644
index 00000000..682cf201
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/Bind.java
@@ -0,0 +1,23 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the view for the specified ID. The view will automatically be cast to the field
+ * type.
+ * <pre><code>
+ * {@literal @}BindView(R.id.title) TextView title;
+ * </code></pre>
+ */
+@Deprecated
+@Retention(CLASS) @Target(FIELD)
+public @interface Bind {
+  /** View ID to which the field will be bound. */
+  @IdRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 3671a751..b8f2d2af 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -38,4 +38,6 @@
 public @interface OnClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] required() default {""};
+  String[] key() default {""};
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 1c20ff30..d69fd20b 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -43,4 +43,6 @@
 public @interface OnItemClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] required() default {""};
+  String[] key() default {""};
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index afc49b72..672a2123 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -47,4 +47,6 @@
 public @interface OnItemLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] required() default {""};
+  String[] key() default {""};
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 9cc1c9f3..0af43f54 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -42,4 +42,6 @@
 public @interface OnLongClick {
   /** View IDs to which the method will be bound. */
   @IdRes int[] value() default { View.NO_ID };
+  String[] required() default {""};
+  String[] key() default {""};
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ce462055..a8e62b0b 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,30 +1,5 @@
 package butterknife.compiler;
 
-import butterknife.BindArray;
-import butterknife.BindBitmap;
-import butterknife.BindBool;
-import butterknife.BindColor;
-import butterknife.BindDimen;
-import butterknife.BindDrawable;
-import butterknife.BindFloat;
-import butterknife.BindInt;
-import butterknife.BindString;
-import butterknife.BindView;
-import butterknife.BindViews;
-import butterknife.OnCheckedChanged;
-import butterknife.OnClick;
-import butterknife.OnEditorAction;
-import butterknife.OnFocusChange;
-import butterknife.OnItemClick;
-import butterknife.OnItemLongClick;
-import butterknife.OnItemSelected;
-import butterknife.OnLongClick;
-import butterknife.OnPageChange;
-import butterknife.OnTextChanged;
-import butterknife.OnTouch;
-import butterknife.Optional;
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.ClassName;
@@ -35,6 +10,7 @@
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.tree.JCTree;
 import com.sun.tools.javac.tree.TreeScanner;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -47,12 +23,13 @@
 import java.util.BitSet;
 import java.util.Collections;
 import java.util.Deque;
+import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -76,6 +53,33 @@
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
+import butterknife.Bind;
+import butterknife.BindArray;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.BindColor;
+import butterknife.BindDimen;
+import butterknife.BindDrawable;
+import butterknife.BindFloat;
+import butterknife.BindInt;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.OnCheckedChanged;
+import butterknife.OnClick;
+import butterknife.OnEditorAction;
+import butterknife.OnFocusChange;
+import butterknife.OnItemClick;
+import butterknife.OnItemLongClick;
+import butterknife.OnItemSelected;
+import butterknife.OnLongClick;
+import butterknife.OnPageChange;
+import butterknife.OnTextChanged;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -173,6 +177,7 @@
     annotations.add(BindString.class);
     annotations.add(BindView.class);
     annotations.add(BindViews.class);
+    annotations.add(Bind.class);
     annotations.addAll(LISTENERS);
 
     return annotations;
@@ -303,6 +308,17 @@
       }
     }
 
+    // Process each @Bind element.
+    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
+      // we don't SuperficialValidation.validateElement(element)
+      // so that an unresolved View type can be generated by later processing rounds
+      try {
+        parseBind(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, Bind.class, e);
+      }
+    }
+
     // Process each @BindViews element.
     for (Element element : env.getElementsAnnotatedWith(BindViews.class)) {
       // we don't SuperficialValidation.validateElement(element)
@@ -407,6 +423,66 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
+  @Deprecated
+  private void parseBind(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
+                             Set<TypeElement> erasedTargetNames) {
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
+            || isBindingInWrongPackage(Bind.class, element);
+
+    // Verify that the target type extends from View.
+    TypeMirror elementType = element.asType();
+    if (elementType.getKind() == TypeKind.TYPEVAR) {
+      TypeVariable typeVariable = (TypeVariable) elementType;
+      elementType = typeVariable.getUpperBound();
+    }
+    Name qualifiedName = enclosingElement.getQualifiedName();
+    Name simpleName = element.getSimpleName();
+    if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
+      if (elementType.getKind() == TypeKind.ERROR) {
+        note(element, "@%s field with unresolved type (%s) "
+                        + "must elsewhere be generated as a View or interface. (%s.%s)",
+                Bind.class.getSimpleName(), elementType, qualifiedName, simpleName);
+      } else {
+        error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+                Bind.class.getSimpleName(), qualifiedName, simpleName);
+        hasError = true;
+      }
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    int id = element.getAnnotation(Bind.class).value();
+
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    if (builder != null) {
+      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));
+      if (existingBindingName != null) {
+        error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+                Bind.class.getSimpleName(), id, existingBindingName,
+                enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
+      }
+    } else {
+      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    }
+
+    String name = simpleName.toString();
+    TypeName type = TypeName.get(elementType);
+    boolean required = isFieldRequired(element);
+
+    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
+
+    // Add the type-erased version to the valid binding targets set.
+    erasedTargetNames.add(enclosingElement);
+  }
+
   private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index ec41c4f8..6fd33b21 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -41,14 +41,14 @@ dependencies {
 def getRuntimeJar() {
   try {
     final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
-    File runtimeJar = new File(javaBase, "lib/rt.jar");
+    File runtimeJar = new File(javaBase, "lib/rt.jar")
     if (runtimeJar.exists()) {
-      return runtimeJar;
+      return runtimeJar
     }
-    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
-    return runtimeJar.exists() ? runtimeJar : null;
+    runtimeJar = new File(javaBase, "jre/lib/rt.jar")
+    return runtimeJar.exists() ? runtimeJar : null
   } catch (IOException e) {
-    throw new RuntimeException(e);
+    throw new RuntimeException(e)
   }
 }
 
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
index 7e62eda2..f6b7dd4a 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -18,8 +18,10 @@
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.BindView;\n"
+        + "import butterknife.Bind;\n"
         + "public class Test {\n"
         + "    @BindView(1) View thing;\n"
+        + "    @Bind(2) View thingOld;\n"
         + "}"
     );
 
@@ -38,6 +40,7 @@
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "    target.thingOld = Utils.findRequiredView(source, 2, \"field 'thingOld'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
@@ -46,6 +49,7 @@
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
         + "    this.target = null;\n"
         + "    target.thing = null;\n"
+        + "    target.thingOld = null;\n"
         + "  }\n"
         + "}"
     );
diff --git a/gradle.properties b/gradle.properties
index f1f2febc..0b7bd46c 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -14,3 +14,8 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+systemProp.http.proxyHost=127.0.0.1
+systemProp.http.proxyPort=7777
+systemProp.https.proxyHost=127.0.0.1
+systemProp.https.proxyPort=7777
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 4391436b..453595d6 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon May 08 12:19:25 PDT 2017
+#Tue May 30 10:43:58 CST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-milestone-1-all.zip
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 765bdf23..a141f8c7 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -31,7 +31,7 @@
   };
 
   @BindView(R2.id.title) TextView title;
-  @BindView(R2.id.subtitle) TextView subtitle;
+  @Bind(R2.id.subtitle) TextView subtitle;
   @BindView(R2.id.hello) Button hello;
   @BindView(R2.id.list_of_things) ListView listOfThings;
   @BindView(R2.id.footer) TextView footer;
