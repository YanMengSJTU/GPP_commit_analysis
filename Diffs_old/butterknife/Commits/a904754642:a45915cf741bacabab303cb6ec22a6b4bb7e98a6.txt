diff --git a/.travis.yml b/.travis.yml
index bdec6648..31ff57fe 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,11 +1,5 @@
 language: android
 
-android:
-  components:
-    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out.
-    - tools
-    - platform-tools
-
 jdk:
   - oraclejdk8
 
@@ -13,6 +7,7 @@ before_install:
   # Install SDK license so Android Gradle plugin can install deps.
   - mkdir "$ANDROID_HOME/licenses" || true
   - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
+  - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> "$ANDROID_HOME/licenses/android-sdk-license"
   # Install the rest of tools (e.g., avdmanager)
   - sdkmanager tools
   # Install the system image
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a61b410e..5a78f11c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,109 @@
 Change Log
 ==========
 
+Version 10.1.0 *(2019-02-13)*
+-----------------------------
+
+ * New: Listeners which require return values (e.g., long click) can now be bound to methods returning `void`.
+   The default value of `true` will be returned in this case.
+ * New: Add support for `@OnTextChanged` and `@OnPageChange` to reflection backend.
+ * Remove enforcement of required views in the reflection backend. Most `@Nullable` annotations do not have
+   runtime retention so they can't be checked at runtime with reflection. Instead of forcing everyone to find
+   a new annotation, this enforcement is now dropped. While this might lead to nulls in otherwise required
+   view bindings, they'll either be unused or quickly cause a `NullPointerException`.
+
+
+Version 10.0.0 *(2019-01-03)*
+-----------------------------
+
+ * Equivalent to 9.0.0 but only supports AndroidX-enabled builds.
+ * Removed APIs deprecated in 9.0.0.
+
+
+Version 9.0.0 *(2019-01-03)*
+----------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+ 
+ * Helpers such as `apply` have been deprecated on `ButterKnife` and are now available on the `ViewCollections` class.
+
+ * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This
+   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older).
+ * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Correct generated resource annotation names when running Turkish locale.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy
+   multiple times.
+ * Deprecated methods from 8.x have been removed.
+
+
+Version 9.0.0-rc3 *(2018-12-20)*
+--------------------------------
+
+ * Fix: Correct generated resource annotation names when running Turkish locale.
+ * Cache the fact that a class hierarchy has no remaining bindings to prevent traversing the hierarchy
+   multiple times.
+
+
+Version 9.0.0-rc2 *(2018-11-19)*
+--------------------------------
+
+ * Add support for Android Gradle plugin 3.3 and newer where `R` is no longer generated as Java source. This
+   has a side-effect of removing support for Android Gradle plugin 3.0.x (and older).
+ * Use Java 8 bytecode for all artifacts as announced in RC1 release notes.
+
+
+Version 9.0.0-rc1 *(2018-10-10)*
+--------------------------------
+
+ * New: Support for AndroidX. Requires `android.useAndroidX=true` in `gradle.properties` to generate
+   AndroidX code.
+
+ * New: A `butterknife-runtime` artifact has been extracted from `butterknife` which contains the APIs
+   required for the generated code but does not contain the code to reflectively look up the generated
+   code. This allows you to reference the generated code directly such that R8/ProGuard optimization can
+   rename both the generated code and your classes. `ButterKnife.bind` and the consumer R8/ProGuard rules
+   remain in the old `butterknife` artifact.
+ 
+ * New: Experimental `butterknife-reflect` artifact eliminates the need to run the annotation
+   processor for IDE builds. This artifact is binary compatible with `butterknife` so it can be interchanged
+   depending on how your build is being invoked. See [its README](butterknife-reflect/README.md) for more
+   information. Currently about 90% of functionality is covered. File bugs for anything that does not work.
+
+   Note: This artifact requires Java 8. There's no good reason for this except to push the ecosystem to
+   having this be a default. As of AGP 3.2 there is no reason not to do this.
+
+ * New: Lint checks have been ported to UAST and now work on Kotlin code.
+
+ * Fix: Allow `@BindFont` to work prior to API 26 using `ResourcesCompat`.
+ * Fix: Update Android Gradle plugin to 3.1 or newer to fix binary incompatibilities.
+ * Fix: Use the application ID instead of the resource package for generating `R2`.
+ * Deprecated methods from 8.x have been removed.
+
+Note: The next release candidate will switch all artifacts to require Java 8 bytecode which will force
+your applications to enable Java 8 bytecode. As of AGP 3.2 there is no cost to this, and there is no
+reason to have it set any lower.
+
+
 Version 8.8.1 *(2017-08-09)*
 ----------------------------
 
diff --git a/README.md b/README.md
index c9a97a17..de9ede17 100644
--- a/README.md
+++ b/README.md
@@ -34,7 +34,7 @@ class ExampleActivity extends Activity {
 
 For documentation and additional information see [the website][3].
 
-__Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
+__Remember: A butter knife is like a [dagger][1], only infinitely less sharp.__
 
 
 
@@ -42,9 +42,18 @@ Download
 --------
 
 ```groovy
+android {
+  ...
+  // Butterknife requires Java 8.
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+}
+
 dependencies {
-  compile 'com.jakewharton:butterknife:8.8.1'
-  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+  implementation 'com.jakewharton:butterknife:10.1.0'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
 }
 ```
 
@@ -63,9 +72,10 @@ To use Butter Knife in a library, add the plugin to your `buildscript`:
 buildscript {
   repositories {
     mavenCentral()
+    google()
    }
   dependencies {
-    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:10.1.0'
   }
 }
 ```
@@ -108,7 +118,7 @@ License
 
 
 
- [1]: http://square.github.com/dagger/
+ [1]: https://dagger.dev/
  [2]: https://search.maven.org/remote_content?g=com.jakewharton&a=butterknife&v=LATEST
  [3]: http://jakewharton.github.com/butterknife/
  [snap]: https://oss.sonatype.org/content/repositories/snapshots/
diff --git a/build.gradle b/build.gradle
index 72a14d5a..c411ba8e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,12 +3,10 @@ apply plugin: 'com.github.ben-manes.versions'
 buildscript {
   ext.versions = [
       'minSdk': 14,
-      'compileSdk': 26,
+      'compileSdk': 28,
 
-      'supportLibrary': '27.0.0',
-      'androidPlugin': '3.0.0',
-      'androidTools': '26.0.0',
-      'kotlin': '1.1.51',
+      'androidTools': '26.2.0',
+      'kotlin': '1.2.71',
 
       'release': '8.8.1',
   ]
@@ -16,13 +14,15 @@ buildscript {
   ext.deps = [
       android: [
           'runtime': 'com.google.android:android:4.1.1.4',
-          'gradlePlugin': "com.android.tools.build:gradle:${versions.androidPlugin}",
+          'gradlePlugin': "com.android.tools.build:gradle:3.1.4",
       ],
-      'support': [
-          'compat': "com.android.support:support-compat:${versions.supportLibrary}",
-          'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
+      'androidx': [
+          'core': "androidx.core:core:1.0.0",
+          'viewpager': "androidx.viewpager:viewpager:1.0.0",
+          'annotations': "androidx.annotation:annotation:1.0.0",
           'test': [
-              'runner': 'com.android.support.test:runner:1.0.1',
+              'runner': 'androidx.test:runner:1.1.0',
+              'rules': 'androidx.test:rules:1.1.0',
           ],
       ],
       'lint': [
@@ -31,36 +31,36 @@ buildscript {
           'checks': "com.android.tools.lint:lint-checks:${versions.androidTools}",
           'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
       ],
-      javapoet: 'com.squareup:javapoet:1.9.0',
-      javaparser: 'com.github.javaparser:javaparser-core:3.5.0',
+      javapoet: 'com.squareup:javapoet:1.10.0',
       junit: 'junit:junit:4.12',
-      truth: 'com.google.truth:truth:0.36',
-      robolectric: 'org.robolectric:robolectric:3.5',
-      compiletesting: 'com.google.testing.compile:compile-testing:0.12',
+      truth: 'com.google.truth:truth:0.42',
+      compiletesting: 'com.google.testing.compile:compile-testing:0.15',
       'auto': [
-          'service': 'com.google.auto.service:auto-service:1.0-rc3',
-          'common': 'com.google.auto:auto-common:0.8',
+          'service': 'com.google.auto.service:auto-service:1.0-rc4',
+          'common': 'com.google.auto:auto-common:0.10',
       ],
-      'guava': 'com.google.guava:guava:23.0',
+      'guava': 'com.google.guava:guava:24.0-jre',
       'release': [
           'runtime': "com.jakewharton:butterknife:${versions.release}",
           'compiler': "com.jakewharton:butterknife-compiler:${versions.release}"
       ],
       'kotlin': [
-          'stdLibJre8': "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}",
+          'stdLibJdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",
       ]
   ]
 
   repositories {
     mavenCentral()
-    jcenter()
     google()
+    jcenter()
+    gradlePluginPortal()
   }
 
   dependencies {
-    classpath deps.android.gradlePlugin
+    classpath 'com.android.tools.build:gradle:3.2.0'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
     classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
+    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.16'
   }
 }
 
@@ -70,10 +70,31 @@ subprojects { project ->
 
   repositories {
     mavenCentral()
-    jcenter()
     google()
+    jcenter()
   }
 
+  apply plugin: 'net.ltgt.errorprone'
+
+  dependencies {
+    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
+  }
+
+  // TODO figure out why this causes codegen to fail in android tests.
+  //def nullaway = dependencies.create('com.uber.nullaway:nullaway:0.5.5')
+  //configurations.all { Configuration configuration ->
+  //  if (configuration.name.endsWith('nnotationProcessor')) {
+  //    configuration.dependencies.add(nullaway)
+  //  }
+  //}
+  //
+  //tasks.withType(JavaCompile) {
+  //  options.compilerArgs += [
+  //      '-Xep:NullAway:ERROR',
+  //      '-XepOpt:NullAway:AnnotatedPackages=butterknife',
+  //  ]
+  //}
+
   if (!project.name.equals('butterknife-gradle-plugin')) {
     apply plugin: 'checkstyle'
 
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index f96179a7..03d03882 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
@@ -11,7 +11,7 @@ checkstyle {
 
 dependencies {
   compileOnly deps.android.runtime
-  api deps.support.annotations
+  api deps.androidx.annotations
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
index 62c30778..95d7e073 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindAnim.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -1,12 +1,11 @@
 package butterknife;
 
-import android.support.annotation.AnimRes;
-
+import androidx.annotation.AnimRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified animation resource ID.
@@ -14,7 +13,8 @@
  * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindAnim {
   /** Animation resource ID to which the field will be bound. */
   @AnimRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindArray.java b/butterknife-annotations/src/main/java/butterknife/BindArray.java
index b2f7be27..b590b69d 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindArray.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindArray.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.ArrayRes;
+import androidx.annotation.ArrayRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified array resource ID. The type of array will be inferred from the
@@ -31,7 +31,7 @@
  * {@literal @}BindArray(R.array.icons) TypedArray icons;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindArray {
   /** Array resource ID to which the field will be bound. */
   @ArrayRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
index e12be465..795b230e 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBitmap.java
@@ -1,12 +1,12 @@
 package butterknife;
 
 import android.graphics.Bitmap;
-import android.support.annotation.DrawableRes;
+import androidx.annotation.DrawableRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to a {@link Bitmap} from the specified drawable resource ID.
@@ -14,7 +14,8 @@
  * {@literal @}BindBitmap(R.drawable.logo) Bitmap logo;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindBitmap {
   /** Drawable resource ID from which the {@link Bitmap} will be created. */
   @DrawableRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindBool.java b/butterknife-annotations/src/main/java/butterknife/BindBool.java
index 89112ac8..eb6347dd 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindBool.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindBool.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.BoolRes;
+import androidx.annotation.BoolRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified boolean resource ID.
@@ -13,7 +13,8 @@
  * {@literal @}BindBool(R.bool.is_tablet) boolean isTablet;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindBool {
   /** Boolean resource ID to which the field will be bound. */
   @BoolRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindColor.java b/butterknife-annotations/src/main/java/butterknife/BindColor.java
index 002616e3..2691cf5a 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindColor.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.ColorRes;
+import androidx.annotation.ColorRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified color resource ID. Type can be {@code int} or
@@ -15,7 +15,8 @@
  * {@literal @}BindColor(R.color.background_green_selector) ColorStateList greenSelector;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindColor {
   /** Color resource ID to which the field will be bound. */
   @ColorRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDimen.java b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
index 172871f8..49fa9185 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDimen.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.DimenRes;
+import androidx.annotation.DimenRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified dimension resource ID. Type can be {@code int} for pixel size or
@@ -15,7 +15,8 @@
  * {@literal @}BindDimen(R.dimen.horizontal_gap) float gap;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindDimen {
   /** Dimension resource ID to which the field will be bound. */
   @DimenRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
index a30d20dd..76fa9a03 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java
@@ -1,12 +1,13 @@
 package butterknife;
 
-import android.support.annotation.AttrRes;
-import android.support.annotation.DrawableRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.DrawableRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import static butterknife.internal.Constants.NO_RES_ID;
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified drawable resource ID.
@@ -17,11 +18,12 @@
  * Drawable tintedPlaceholder;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindDrawable {
   /** Drawable resource ID to which the field will be bound. */
   @DrawableRes int value();
 
   /** Color attribute resource ID that is used to tint the drawable. */
-  @AttrRes int tint() default 0;
+  @AttrRes int tint() default NO_RES_ID;
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFloat.java b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
index 49a1a482..400e844f 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFloat.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.DimenRes;
+import androidx.annotation.DimenRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified dimension resource ID whose type is explicitly defined as float.
@@ -17,7 +17,8 @@
  * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindFloat {
   /** Float resource ID to which the field will be bound. */
   @DimenRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
index 5e6e7666..ff3420ac 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindFont.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -1,14 +1,15 @@
 package butterknife;
 
 import android.graphics.Typeface;
-import android.support.annotation.IntDef;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.FontRes;
+import androidx.annotation.IntDef;
+import androidx.annotation.RestrictTo;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified font resource ID.
@@ -16,10 +17,11 @@
  * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindFont {
   /** Font resource ID to which the field will be bound. */
-  /* TODO support lib 26.0.0: @FontRes */ int value();
+  @FontRes int value();
 
   @TypefaceStyle int style() default Typeface.NORMAL;
 
diff --git a/butterknife-annotations/src/main/java/butterknife/BindInt.java b/butterknife-annotations/src/main/java/butterknife/BindInt.java
index 7c683548..15593081 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindInt.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindInt.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.IntegerRes;
+import androidx.annotation.IntegerRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified integer resource ID.
@@ -13,7 +13,8 @@
  * {@literal @}BindInt(R.int.columns) int columns;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Target(FIELD)
+@Retention(RUNTIME)
 public @interface BindInt {
   /** Integer resource ID to which the field will be bound. */
   @IntegerRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindString.java b/butterknife-annotations/src/main/java/butterknife/BindString.java
index ff82aa99..a31b5509 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindString.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindString.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.StringRes;
+import androidx.annotation.StringRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the specified string resource ID.
@@ -13,7 +13,7 @@
  * {@literal @}BindString(R.string.username_error) String usernameErrorText;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindString {
   /** String resource ID to which the field will be bound. */
   @StringRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindView.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
index 4770bf69..13c56dab 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindView.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
+import androidx.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
@@ -14,7 +14,7 @@
  * {@literal @}BindView(R.id.title) TextView title;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindView {
   /** View ID to which the field will be bound. */
   @IdRes int value();
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
index 07a0499c..890b5693 100644
--- a/butterknife-annotations/src/main/java/butterknife/BindViews.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -1,11 +1,11 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
+import androidx.annotation.IdRes;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
@@ -15,7 +15,7 @@
  * List&lt;TextView&gt; titles;
  * </code></pre>
  */
-@Retention(CLASS) @Target(FIELD)
+@Retention(RUNTIME) @Target(FIELD)
 public @interface BindViews {
   /** View IDs to which the field will be bound. */
   @IdRes int[] value();
diff --git a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
index b590a037..4d9b280d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.widget.CompoundButton.OnCheckedChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnCheckedChangeListener OnCheckedChangeListener} on the view for
@@ -26,7 +26,7 @@
  * @see OnCheckedChangeListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.CompoundButton",
     setter = "setOnCheckedChangeListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnClick.java b/butterknife-annotations/src/main/java/butterknife/OnClick.java
index 3671a751..ffebeb06 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnClickListener OnClickListener} on the view for each ID specified.
@@ -25,7 +25,7 @@
  * @see OnClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
index 6c02f264..ebaa57c6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.widget.TextView.OnEditorActionListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnEditorActionListener OnEditorActionListener} on the view for each
@@ -23,11 +23,13 @@
  * Any number of parameters from
  * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
  * onEditorAction} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnEditorActionListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "setOnEditorActionListener",
@@ -40,7 +42,7 @@
             "android.view.KeyEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnEditorAction {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
index 88c55425..a388812f 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnFocusChangeListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnFocusChangeListener OnFocusChangeListener} on the view for each ID
@@ -25,7 +25,7 @@
  * @see OnFocusChangeListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnFocusChangeListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
index 1c20ff30..4362f79e 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.widget.AdapterView.OnItemClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnItemClickListener OnItemClickListener} on the view for each ID
@@ -25,7 +25,7 @@
  * @see OnItemClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.AdapterView<?>",
     setter = "setOnItemClickListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
index afc49b72..0f1ca8b9 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.widget.AdapterView.OnItemLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnItemLongClickListener OnItemLongClickListener} on the view for each
@@ -23,11 +23,13 @@
  * Any number of parameters from
  * {@link OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View,
  * int, long) onItemLongClick} may be used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnItemLongClickListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.AdapterView<?>",
     setter = "setOnItemLongClickListener",
@@ -41,7 +43,7 @@
             "long"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnItemLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
index 500a8db1..22a8664d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnItemSelected.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
diff --git a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
index 9cc1c9f3..55d7fed6 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnLongClickListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnLongClickListener OnLongClickListener} on the view for each ID
@@ -22,10 +22,13 @@
  * </code></pre>
  * Any number of parameters from {@link OnLongClickListener#onLongClick(android.view.View)} may be
  * used on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnLongClickListener
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnLongClickListener",
@@ -36,7 +39,7 @@
             "android.view.View"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnLongClick {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index 3c792e6d..8cf18b57 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -1,14 +1,14 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@code OnPageChangeListener} on the view for each ID specified.
@@ -28,12 +28,12 @@
  * </code></pre>
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
-    targetType = "android.support.v4.view.ViewPager",
+    targetType = "androidx.viewpager.widget.ViewPager",
     setter = "addOnPageChangeListener",
     remover = "removeOnPageChangeListener",
-    type = "android.support.v4.view.ViewPager.OnPageChangeListener",
+    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
 public @interface OnPageChange {
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 89adb820..b823b443 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -1,18 +1,18 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.text.TextWatcher;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * Bind a method to an {@link TextWatcher TextWatcher} on the view for each ID specified.
+ * Bind a method to a {@link TextWatcher TextWatcher} on the view for each ID specified.
  * <pre><code>
  * {@literal @}OnTextChanged(R.id.example) void onTextChanged(CharSequence text) {
  *   Toast.makeText(this, "Text changed: " + text, Toast.LENGTH_SHORT).show();
@@ -32,7 +32,7 @@
  * @see TextWatcher
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTouch.java b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
index dc4b69e7..669e0f6d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTouch.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java
@@ -1,7 +1,7 @@
 package butterknife;
 
-import android.support.annotation.IdRes;
 import android.view.View;
+import androidx.annotation.IdRes;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
@@ -9,7 +9,7 @@
 
 import static android.view.View.OnTouchListener;
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Bind a method to an {@link OnTouchListener OnTouchListener} on the view for each ID specified.
@@ -22,11 +22,13 @@
  * Any number of parameters from
  * {@link OnTouchListener#onTouch(android.view.View, android.view.MotionEvent) onTouch} may be used
  * on the method.
+ * <p>
+ * If the return type of the method is {@code void}, true will be returned from the listener.
  *
  * @see OnTouchListener
  */
 @Target(METHOD)
-@Retention(CLASS)
+@Retention(RUNTIME)
 @ListenerClass(
     targetType = "android.view.View",
     setter = "setOnTouchListener",
@@ -38,7 +40,7 @@
             "android.view.MotionEvent"
         },
         returnType = "boolean",
-        defaultReturn = "false"
+        defaultReturn = "true"
     )
 )
 public @interface OnTouch {
diff --git a/butterknife-annotations/src/main/java/butterknife/Optional.java b/butterknife-annotations/src/main/java/butterknife/Optional.java
index c525a26a..adc95d2c 100644
--- a/butterknife-annotations/src/main/java/butterknife/Optional.java
+++ b/butterknife-annotations/src/main/java/butterknife/Optional.java
@@ -4,7 +4,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Denote that the view specified by the injection is not required to be present.
@@ -12,6 +12,7 @@
  * {@literal @}Optional @OnClick(R.id.subtitle) void onSubtitleClick() {}
  * </code></pre>
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(RUNTIME)
 public @interface Optional {
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/internal/Constants.java b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java
new file mode 100644
index 00000000..bde58d1f
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java
@@ -0,0 +1,8 @@
+package butterknife.internal;
+
+public class Constants {
+
+  private Constants() { }
+
+  public static final int NO_RES_ID = -1;
+}
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 5775e644..077bc65d 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-sourceCompatibility = JavaVersion.VERSION_1_7
-targetCompatibility = JavaVersion.VERSION_1_7
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
 
 dependencies {
   implementation project(':butterknife-annotations')
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index c5c7bc46..e5a891d0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
@@ -32,6 +33,7 @@
 import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
 import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
+import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -43,15 +45,15 @@
   private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
   private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
   private static final ClassName UI_THREAD =
-      ClassName.get("android.support.annotation", "UiThread");
+      ClassName.get("androidx.annotation", "UiThread");
   private static final ClassName CALL_SUPER =
-      ClassName.get("android.support.annotation", "CallSuper");
+      ClassName.get("androidx.annotation", "CallSuper");
   private static final ClassName SUPPRESS_LINT =
       ClassName.get("android.annotation", "SuppressLint");
   private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
   static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
   static final ClassName CONTEXT_COMPAT =
-      ClassName.get("android.support.v4.content", "ContextCompat");
+      ClassName.get("androidx.core.content", "ContextCompat");
   static final ClassName ANIMATION_UTILS =
           ClassName.get("android.view.animation", "AnimationUtils");
 
@@ -64,12 +66,12 @@
   private final ImmutableList<ViewBinding> viewBindings;
   private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
   private final ImmutableList<ResourceBinding> resourceBindings;
-  private final BindingSet parentBinding;
+  private final @Nullable BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
       boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
       ImmutableList<FieldCollectionViewBinding> collectionBindings,
-      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+      ImmutableList<ResourceBinding> resourceBindings, @Nullable BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
@@ -83,7 +85,8 @@ private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean
   }
 
   JavaFile brewJava(int sdk, boolean debuggable) {
-    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))
+    TypeSpec bindingConfiguration = createType(sdk, debuggable);
+    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)
         .addFileComment("Generated code from Butter Knife. Do not modify!")
         .build();
   }
@@ -304,7 +307,10 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
       return;
     }
 
-    String fieldName = bindings.isBoundToRoot() ? "viewSource" : "view" + bindings.getId().value;
+    String fieldName =
+        bindings.isBoundToRoot()
+            ? "viewSource"
+            : "view" + Integer.toHexString(bindings.getId().value);
     result.addField(VIEW, fieldName, PRIVATE);
 
     // We only need to emit the null check if there are zero required bindings.
@@ -324,8 +330,9 @@ private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Buil
         result.addField(listenerClassName, listenerField, PRIVATE);
       }
 
-      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
-        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),
+      String targetType = listenerClass.targetType();
+      if (!VIEW_TYPE.equals(targetType)) {
+        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),
             fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
       } else {
         unbindMethod.addStatement("$N.$N($N)", fieldName,
@@ -353,7 +360,7 @@ private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemo
   private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
-      FieldViewBinding fieldBinding = binding.getFieldBinding();
+      FieldViewBinding fieldBinding = requireNonNull(binding.getFieldBinding());
       CodeBlock.Builder builder = CodeBlock.builder()
           .add("target.$L = ", fieldBinding.getName());
 
@@ -430,7 +437,7 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
     String fieldName = "viewSource";
     String bindName = "source";
     if (!binding.isBoundToRoot()) {
-      fieldName = "view" + binding.getId().value;
+      fieldName = "view" + Integer.toHexString(binding.getId().value);
       bindName = "view";
     }
     result.addStatement("$L = $N", fieldName, bindName);
@@ -453,14 +460,15 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
           callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
         }
 
-        boolean hasReturnType = !"void".equals(method.returnType());
+        boolean hasReturnValue = false;
         CodeBlock.Builder builder = CodeBlock.builder();
-        if (hasReturnType) {
-          builder.add("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+        Set<MethodViewBinding> methodViewBindings = methodBindings.get(method);
+        if (methodViewBindings != null) {
+          for (MethodViewBinding methodBinding : methodViewBindings) {
+            if (methodBinding.hasReturnValue()) {
+              hasReturnValue = true;
+              builder.add("return "); // TODO what about multiple methods?
+            }
             builder.add("target.$L(", methodBinding.getName());
             List<Parameter> parameters = methodBinding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -486,9 +494,12 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
             }
             builder.add(");\n");
           }
-        } else if (hasReturnType) {
-          builder.add("$L;\n", method.defaultReturn());
         }
+
+        if (!"void".equals(method.returnType()) && !hasReturnValue) {
+          builder.add("return $L;\n", method.defaultReturn());
+        }
+
         callbackMethod.addCode(builder.build());
         callback.addMethod(callbackMethod.build());
       }
@@ -501,8 +512,9 @@ private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
         result.addStatement("$L = $L", listenerField, callback.build());
       }
 
-      if (!VIEW_TYPE.equals(listener.targetType())) {
-        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,
+      String targetType = listener.targetType();
+      if (!VIEW_TYPE.equals(targetType)) {
+        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,
             listener.setter(), requiresRemoval ? listenerField : callback.build());
       } else {
         result.addStatement("$N.$L($L)", bindName, listener.setter(),
@@ -657,7 +669,7 @@ private boolean hasViewLocal() {
   /** True if this binding requires a view. Otherwise only a context is needed. */
   private boolean constructorNeedsView() {
     return hasViewBindings() //
-        || parentBinding != null && parentBinding.constructorNeedsView();
+        || (parentBinding != null && parentBinding.constructorNeedsView());
   }
 
   static boolean requiresCast(TypeName type) {
@@ -697,7 +709,7 @@ static Builder newBuilder(TypeElement enclosingElement) {
     private final boolean isActivity;
     private final boolean isDialog;
 
-    private BindingSet parentBinding;
+    private @Nullable BindingSet parentBinding;
 
     private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();
     private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =
@@ -743,7 +755,7 @@ void setParent(BindingSet parent) {
       this.parentBinding = parent;
     }
 
-    String findExistingBindingName(Id id) {
+    @Nullable String findExistingBindingName(Id id) {
       ViewBinding.Builder builder = viewIdMap.get(id);
       if (builder == null) {
         return null;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 8faac8b1..3f30e35d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -31,10 +31,8 @@
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.google.common.collect.ImmutableSet;
-import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeName;
-import com.sun.source.tree.ClassTree;
 import com.sun.source.util.Trees;
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.tree.JCTree;
@@ -53,9 +51,9 @@
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.ProcessingEnvironment;
@@ -67,19 +65,18 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.Name;
-import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
+import static butterknife.internal.Constants.NO_RES_ID;
+import static java.util.Objects.requireNonNull;
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
@@ -87,11 +84,12 @@
 import static javax.lang.model.element.Modifier.STATIC;
 
 @AutoService(Processor.class)
+@SuppressWarnings("NullAway") // TODO fix all these...
 public final class ButterKnifeProcessor extends AbstractProcessor {
   // TODO remove when http://b.android.com/187527 is released.
   private static final String OPTION_SDK_INT = "butterknife.minSdk";
   private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";
-  static final Id NO_ID = new Id(-1);
+  static final Id NO_ID = new Id(NO_RES_ID);
   static final String VIEW_TYPE = "android.view.View";
   static final String ACTIVITY_TYPE = "android.app.Activity";
   static final String DIALOG_TYPE = "android.app.Dialog";
@@ -118,19 +116,14 @@
       OnTouch.class //
   );
 
-  private static final List<String> SUPPORTED_TYPES = Arrays.asList(
-      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
-  );
-
-  private Elements elementUtils;
   private Types typeUtils;
   private Filer filer;
-  private Trees trees;
+  private @Nullable Trees trees;
 
   private int sdk = 1;
   private boolean debuggable = true;
 
-  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();
+  private final RScanner rScanner = new RScanner();
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
@@ -149,7 +142,6 @@
 
     debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
 
-    elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
     try {
@@ -213,8 +205,6 @@
     Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();
     Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
 
-    scanForRClasses(env);
-
     // Process each @BindAnim element.
     for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -393,7 +383,7 @@ private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annot
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
-    // Verify method modifiers.
+    // Verify field or method modifiers.
     Set<Modifier> modifiers = element.getModifiers();
     if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
       error(element, "@%s %s must not be private or static. (%s.%s)",
@@ -474,11 +464,10 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
 
     // Assemble information on the field.
     int id = element.getAnnotation(BindView.class).value();
-
     BindingSet.Builder builder = builderMap.get(enclosingElement);
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindView.class, id);
     if (builder != null) {
-      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));
+      String existingBindingName = builder.findExistingBindingName(resourceId);
       if (existingBindingName != null) {
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
             BindView.class.getSimpleName(), id, existingBindingName,
@@ -493,16 +482,12 @@ private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder>
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
-    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
+    builder.addField(resourceId, new FieldViewBinding(name, type, required));
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement);
   }
 
-  private QualifiedId elementToQualifiedId(Element element, int id) {
-    return new QualifiedId(elementUtils.getPackageOf(element), id);
-  }
-
   private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -578,18 +563,12 @@ private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder
       return;
     }
 
-    assert viewType != null; // Always false as hasError would have been true.
-    TypeName type = TypeName.get(viewType);
+    TypeName type = TypeName.get(requireNonNull(viewType));
     boolean required = isFieldRequired(element);
 
-    List<Id> idVars = new ArrayList<>();
-    for (int id : ids) {
-      QualifiedId qualifiedId = elementToQualifiedId(element, id);
-      idVars.add(getId(qualifiedId));
-    }
-
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, requireNonNull(kind),
+        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -618,9 +597,10 @@ private void parseResourceAnimation(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindAnim.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindAnim.class, id);
+
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldAnimationBinding(getId(qualifiedId), name));
+    builder.addResource(new FieldAnimationBinding(resourceId, name));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -649,10 +629,10 @@ private void parseResourceBool(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBool.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindBool.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -685,11 +665,15 @@ private void parseResourceColor(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindColor.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindColor.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
-        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
-            : FieldResourceBinding.Type.COLOR));
+
+    FieldResourceBinding.Type colorStateList = FieldResourceBinding.Type.COLOR_STATE_LIST;
+    FieldResourceBinding.Type color = FieldResourceBinding.Type.COLOR;
+    builder.addResource(new FieldResourceBinding(
+        resourceId,
+        name,
+        isColorStateList ? colorStateList : color));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -722,9 +706,9 @@ private void parseResourceDimen(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDimen.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindDimen.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
+    builder.addResource(new FieldResourceBinding(resourceId, name,
         isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
 
     erasedTargetNames.add(enclosingElement);
@@ -754,10 +738,10 @@ private void parseResourceBitmap(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBitmap.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindBitmap.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -787,10 +771,10 @@ private void parseResourceDrawable(Element element,
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDrawable.class).value();
     int tint = element.getAnnotation(BindDrawable.class).tint();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
-    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);
+    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});
+
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));
+    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -819,10 +803,10 @@ private void parseResourceFloat(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindFloat.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindFloat.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -861,8 +845,8 @@ private void parseResourceFont(Element element,
     }
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());
-    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));
+    Id resourceId = elementToId(element, BindFont.class, bindFont.value());
+    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -890,10 +874,10 @@ private void parseResourceInt(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindInt.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindInt.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -922,10 +906,10 @@ private void parseResourceString(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindString.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindString.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -956,18 +940,18 @@ private void parseResourceArray(Element element,
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindArray.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindArray.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));
+    builder.addResource(new FieldResourceBinding(resourceId, name, requireNonNull(type)));
 
     erasedTargetNames.add(enclosingElement);
   }
 
   /**
-   * Returns a method name from the {@link android.content.res.Resources} class for array resource
+   * Returns a method name from the {@code android.content.res.Resources} class for array resource
    * binding, null if the element type is not supported.
    */
-  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
+  private static @Nullable FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
     TypeMirror typeMirror = element.asType();
     if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
       return FieldResourceBinding.Type.TYPED_ARRAY;
@@ -987,7 +971,7 @@ private void parseResourceArray(Element element,
   }
 
   /** Returns the first duplicate element inside an array, null if there are no duplicates. */
-  private static Integer findDuplicate(int[] array) {
+  private static @Nullable Integer findDuplicate(int[] array) {
     Set<Integer> seenElements = new LinkedHashSet<>();
 
     for (int element : array) {
@@ -1126,7 +1110,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       TypeVariable typeVariable = (TypeVariable) returnType;
       returnType = typeVariable.getUpperBound();
     }
-    if (!returnType.toString().equals(method.returnType())) {
+    String returnTypeString = returnType.toString();
+    boolean hasReturnValue = !"void".equals(returnTypeString);
+    if (!returnTypeString.equals(method.returnType()) && hasReturnValue) {
       error(element, "@%s methods must have a '%s' return type. (%s.%s)",
           annotationClass.getSimpleName(), method.returnType(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
@@ -1155,7 +1141,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
             continue;
           }
           if ((isSubtypeOfType(methodParameterType, parameterTypes[j])
-                  && isSubtypeOfType(methodParameterType, VIEW_TYPE))
+              && isSubtypeOfType(methodParameterType, VIEW_TYPE))
               || isTypeEqual(methodParameterType, parameterTypes[j])
               || isInterface(methodParameterType)) {
             parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
@@ -1202,13 +1188,15 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
       }
     }
 
-    MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
+    MethodViewBinding binding =
+        new MethodViewBinding(name, Arrays.asList(parameters), required, hasReturnValue);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    for (int id : ids) {
-      QualifiedId qualifiedId = elementToQualifiedId(element, id);
-      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {
+    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);
+
+    for (Map.Entry<Integer, Id> entry : resourceIds.entrySet()) {
+      if (!builder.addMethod(entry.getValue(), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
-            id, enclosingElement.getQualifiedName(), element.getSimpleName());
+            entry.getKey(), enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
     }
@@ -1277,7 +1265,7 @@ private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
   }
 
   /** Finds the parent binder type in the supplied set, if any. */
-  private TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
+  private @Nullable TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
     TypeMirror type;
     while (true) {
       type = typeElement.getSuperclass();
@@ -1311,6 +1299,35 @@ private void printMessage(Kind kind, Element element, String message, Object[] a
     processingEnv.getMessager().printMessage(kind, message, element);
   }
 
+  private Id elementToId(Element element, Class<? extends Annotation> annotation, int value) {
+    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      rScanner.reset();
+      tree.accept(rScanner);
+      if (!rScanner.resourceIds.isEmpty()) {
+        return rScanner.resourceIds.values().iterator().next();
+      }
+    }
+    return new Id(value);
+  }
+
+  private Map<Integer, Id> elementToIds(Element element, Class<? extends Annotation> annotation,
+      int[] values) {
+    Map<Integer, Id> resourceIds = new LinkedHashMap<>();
+    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      rScanner.reset();
+      tree.accept(rScanner);
+      resourceIds = rScanner.resourceIds;
+    }
+
+    // Every value looked up should have an Id
+    for (int value : values) {
+      resourceIds.putIfAbsent(value, new Id(value));
+    }
+    return resourceIds;
+  }
+
   private static boolean hasAnnotationWithName(Element element, String simpleName) {
     for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
       String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
@@ -1329,7 +1346,7 @@ private static boolean isListenerRequired(ExecutableElement element) {
     return element.getAnnotation(Optional.class) == null;
   }
 
-  private static AnnotationMirror getMirror(Element element,
+  private static @Nullable AnnotationMirror getMirror(Element element,
       Class<? extends Annotation> annotation) {
     for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
       if (annotationMirror.getAnnotationType().toString().equals(annotation.getCanonicalName())) {
@@ -1339,186 +1356,30 @@ private static AnnotationMirror getMirror(Element element,
     return null;
   }
 
-  private Id getId(QualifiedId qualifiedId) {
-    if (symbols.get(qualifiedId) == null) {
-      symbols.put(qualifiedId, new Id(qualifiedId.id));
-    }
-    return symbols.get(qualifiedId);
-  }
-
-  private void scanForRClasses(RoundEnvironment env) {
-    if (trees == null) return;
-
-    RClassScanner scanner = new RClassScanner();
-
-    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
-      for (Element element : env.getElementsAnnotatedWith(annotation)) {
-        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
-        if (tree != null) { // tree can be null if the references are compiled types and not source
-          scanner.setCurrentPackage(elementUtils.getPackageOf(element));
-          tree.accept(scanner);
-        }
-      }
-    }
-
-    for (Map.Entry<PackageElement, Set<Symbol.ClassSymbol>> packageNameToRClassSet
-          : scanner.getRClasses().entrySet()) {
-      PackageElement respectivePackageName = packageNameToRClassSet.getKey();
-      for (Symbol.ClassSymbol rClass : packageNameToRClassSet.getValue()) {
-        parseRClass(respectivePackageName, rClass, scanner.getReferenced());
-      }
-    }
-  }
-
-  private void parseRClass(PackageElement respectivePackageName, Symbol.ClassSymbol rClass,
-      Set<String> referenced) {
-    TypeElement element;
-
-    try {
-      element = rClass;
-    } catch (MirroredTypeException mte) {
-      element = (TypeElement) typeUtils.asElement(mte.getTypeMirror());
-    }
-
-    JCTree tree = (JCTree) trees.getTree(element);
-    if (tree != null) { // tree can be null if the references are compiled types and not source
-      IdScanner idScanner =
-          new IdScanner(symbols, elementUtils.getPackageOf(element), respectivePackageName,
-              referenced);
-      tree.accept(idScanner);
-    } else {
-      parseCompiledR(respectivePackageName, element, referenced);
-    }
-  }
-
-  private void parseCompiledR(PackageElement respectivePackageName, TypeElement rClass,
-      Set<String> referenced) {
-    for (Element element : rClass.getEnclosedElements()) {
-      String innerClassName = element.getSimpleName().toString();
-      if (SUPPORTED_TYPES.contains(innerClassName)) {
-        for (Element enclosedElement : element.getEnclosedElements()) {
-          if (enclosedElement instanceof VariableElement) {
-            String fqName = elementUtils.getPackageOf(enclosedElement).getQualifiedName().toString()
-                + ".R."
-                + innerClassName
-                + "."
-                + enclosedElement.toString();
-            if (referenced.contains(fqName)) {
-              VariableElement variableElement = (VariableElement) enclosedElement;
-              Object value = variableElement.getConstantValue();
-
-              if (value instanceof Integer) {
-                int id = (Integer) value;
-                ClassName rClassName =
-                    ClassName.get(elementUtils.getPackageOf(variableElement).toString(), "R",
-                        innerClassName);
-                String resourceName = variableElement.getSimpleName().toString();
-                QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
-                symbols.put(qualifiedId, new Id(id, rClassName, resourceName));
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-
-  private static class RClassScanner extends TreeScanner {
-    // Maps the currently evaluated rPackageName to R Classes
-    private final Map<PackageElement, Set<Symbol.ClassSymbol>> rClasses = new LinkedHashMap<>();
-    private PackageElement currentPackage;
-    private Set<String> referenced = new HashSet<>();
+  private static class RScanner extends TreeScanner {
+    Map<Integer, Id> resourceIds = new LinkedHashMap<>();
 
     @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
       Symbol symbol = jcFieldAccess.sym;
-      if (symbol != null
-          && symbol.getEnclosingElement() != null
+      if (symbol.getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
-        Set<Symbol.ClassSymbol> rClassSet = rClasses.get(currentPackage);
-        if (rClassSet == null) {
-          rClassSet = new HashSet<>();
-          rClasses.put(currentPackage, rClassSet);
-        }
-        referenced.add(getFqName(symbol));
-        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass());
+        try {
+          int value = (Integer) requireNonNull(((Symbol.VarSymbol) symbol).getConstantValue());
+          resourceIds.put(value, new Id(value, symbol));
+        } catch (Exception ignored) { }
       }
     }
 
-    Map<PackageElement, Set<Symbol.ClassSymbol>> getRClasses() {
-      return rClasses;
-    }
-
-    Set<String> getReferenced() {
-      return referenced;
-    }
-
-    void setCurrentPackage(PackageElement packageElement) {
-      this.currentPackage = packageElement;
-    }
-  }
-
-  private static class IdScanner extends TreeScanner {
-    private final Map<QualifiedId, Id> ids;
-    private final PackageElement rPackageName;
-    private final PackageElement respectivePackageName;
-    private final Set<String> referenced;
-
-    IdScanner(Map<QualifiedId, Id> ids, PackageElement rPackageName,
-        PackageElement respectivePackageName, Set<String> referenced) {
-      this.ids = ids;
-      this.rPackageName = rPackageName;
-      this.respectivePackageName = respectivePackageName;
-      this.referenced = referenced;
-    }
-
-    @Override public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {
-      for (JCTree tree : jcClassDecl.defs) {
-        if (tree instanceof ClassTree) {
-          ClassTree classTree = (ClassTree) tree;
-          String className = classTree.getSimpleName().toString();
-          if (SUPPORTED_TYPES.contains(className)) {
-            ClassName rClassName = ClassName.get(rPackageName.getQualifiedName().toString(), "R",
-                    className);
-            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName, referenced);
-            ((JCTree) classTree).accept(scanner);
-          }
-        }
-      }
+    @Override public void visitLiteral(JCTree.JCLiteral jcLiteral) {
+      try {
+        int value = (Integer) jcLiteral.value;
+        resourceIds.put(value, new Id(value));
+      } catch (Exception ignored) { }
     }
-  }
 
-  private static class VarScanner extends TreeScanner {
-    private final Map<QualifiedId, Id> ids;
-    private final ClassName className;
-    private final PackageElement respectivePackageName;
-    private final Set<String> referenced;
-
-    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,
-        PackageElement respectivePackageName, Set<String> referenced) {
-      this.ids = ids;
-      this.className = className;
-      this.respectivePackageName = respectivePackageName;
-      this.referenced = referenced;
-    }
-
-    @Override public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
-      if ("int".equals(jcVariableDecl.getType().toString())) {
-        String resourceName = jcVariableDecl.getName().toString();
-        if (referenced.contains(getFqName(jcVariableDecl.sym))) {
-          int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());
-          QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
-          ids.put(qualifiedId, new Id(id, className, resourceName));
-        }
-      }
+    void reset() {
+      resourceIds.clear();
     }
   }
-
-  private static String getFqName(Symbol rSymbol) {
-    return rSymbol.packge().getQualifiedName().toString()
-        + ".R."
-        + rSymbol.enclClass().name.toString()
-        + "."
-        + rSymbol.name.toString();
-  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 8da58ac3..b68f6dc5 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -10,8 +10,8 @@
 
 final class FieldCollectionViewBinding {
   enum Kind {
-    ARRAY("arrayOf"),
-    LIST("listOf");
+    ARRAY("arrayFilteringNull"),
+    LIST("listFilteringNull");
 
     final String factoryName;
 
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 238a0947..b888a3f0 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -4,6 +4,7 @@
 
 import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
 import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.internal.Constants.NO_RES_ID;
 
 final class FieldDrawableBinding implements ResourceBinding {
   private final Id id;
@@ -25,7 +26,7 @@
   }
 
   @Override public CodeBlock render(int sdk) {
-    if (tintAttributeId.value != 0) {
+    if (tintAttributeId.value != NO_RES_ID) {
       return CodeBlock.of("target.$L = $T.getTintedDrawable(context, $L, $L)", name, UTILS, id.code,
           tintAttributeId.code);
     }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index d9510525..4bf9e7be 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,21 +1,22 @@
 package butterknife.compiler;
 
+import androidx.annotation.Nullable;
+import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.Immutable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import static java.util.Collections.singletonList;
-import static java.util.Collections.unmodifiableList;
-
 final class FieldResourceBinding implements ResourceBinding {
   enum Type {
     BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
     BOOL("getBoolean"),
     COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
         new ResourceMethod(null, "getColor", false, 23)),
-    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT,
+        "getColorStateList", false, 1),
         new ResourceMethod(null, "getColorStateList", false, 23)),
     DIMEN_AS_INT("getDimensionPixelSize"),
     DIMEN_AS_FLOAT("getDimension"),
@@ -27,18 +28,18 @@
     TEXT_ARRAY("getTextArray"),
     TYPED_ARRAY("obtainTypedArray");
 
-    private final List<ResourceMethod> methods;
+    private final ImmutableList<ResourceMethod> methods;
 
     Type(ResourceMethod... methods) {
       List<ResourceMethod> methodList = new ArrayList<>(methods.length);
       Collections.addAll(methodList, methods);
       Collections.sort(methodList);
       Collections.reverse(methodList);
-      this.methods = unmodifiableList(methodList);
+      this.methods = ImmutableList.copyOf(methodList);
     }
 
     Type(String methodName) {
-      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+      methods = ImmutableList.of(new ResourceMethod(null, methodName, true, 1));
     }
 
     ResourceMethod methodForSdk(int sdk) {
@@ -51,13 +52,15 @@ ResourceMethod methodForSdk(int sdk) {
     }
   }
 
+  @Immutable
   static final class ResourceMethod implements Comparable<ResourceMethod> {
-    final ClassName typeName;
+    @SuppressWarnings("Immutable")
+    final @Nullable ClassName typeName;
     final String name;
     final boolean requiresResources;
     final int sdk;
 
-    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+    ResourceMethod(@Nullable ClassName typeName, String name, boolean requiresResources, int sdk) {
       this.typeName = typeName;
       this.name = name;
       this.requiresResources = requiresResources;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
index 5707f2bd..21d79116 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -1,12 +1,12 @@
 package butterknife.compiler;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 
 final class FieldTypefaceBinding implements ResourceBinding {
   private static final ClassName RESOURCES_COMPAT =
-      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
+      ClassName.get("androidx.core.content.res", "ResourcesCompat");
   private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
 
   /** Keep in sync with {@link android.graphics.Typeface} constants. */
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
index 8ce6c887..84fd6a1d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
@@ -1,30 +1,40 @@
 package butterknife.compiler;
 
+import androidx.annotation.Nullable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
+import com.sun.tools.javac.code.Symbol;
 
 /**
  * Represents an ID of an Android resource.
  */
 final class Id {
   private static final ClassName ANDROID_R = ClassName.get("android", "R");
+  private static final String R = "R";
 
   final int value;
   final CodeBlock code;
   final boolean qualifed;
 
   Id(int value) {
-    this.value = value;
-    this.code = CodeBlock.of("$L", value);
-    this.qualifed = false;
+    this(value, null);
   }
 
-  Id(int value, ClassName className, String resourceName) {
+  Id(int value, @Nullable Symbol rSymbol) {
     this.value = value;
-    this.code = className.topLevelClassName().equals(ANDROID_R)
-      ? CodeBlock.of("$L.$N", className, resourceName)
-      : CodeBlock.of("$T.$N", className, resourceName);
-    this.qualifed = true;
+    if (rSymbol != null) {
+      ClassName className = ClassName.get(rSymbol.packge().getQualifiedName().toString(), R,
+          rSymbol.enclClass().name.toString());
+      String resourceName = rSymbol.name.toString();
+
+      this.code = className.topLevelClassName().equals(ANDROID_R)
+        ? CodeBlock.of("$L.$N", className, resourceName)
+        : CodeBlock.of("$T.$N", className, resourceName);
+      this.qualifed = true;
+    } else {
+      this.code = CodeBlock.of("$L", value);
+      this.qualifed = false;
+    }
   }
 
   @Override public boolean equals(Object o) {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index e4d1c4b7..179d7e53 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -8,11 +8,14 @@
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
+  private final boolean hasReturnValue;
 
-  MethodViewBinding(String name, List<Parameter> parameters, boolean required) {
+  MethodViewBinding(String name, List<Parameter> parameters, boolean required,
+      boolean hasReturnValue) {
     this.name = name;
     this.parameters = Collections.unmodifiableList(new ArrayList<>(parameters));
     this.required = required;
+    this.hasReturnValue = hasReturnValue;
   }
 
   public String getName() {
@@ -30,4 +33,8 @@ public String getName() {
   public boolean isRequired() {
     return required;
   }
+
+  public boolean hasReturnValue() {
+    return hasReturnValue;
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java b/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
deleted file mode 100644
index 1d8683e4..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package butterknife.compiler;
-
-import javax.lang.model.element.PackageElement;
-
-final class QualifiedId {
-  final PackageElement packageName;
-  final int id;
-
-  QualifiedId(PackageElement packageName, int id) {
-    this.packageName = packageName;
-    this.id = id;
-  }
-
-  @Override public String toString() {
-    return "QualifiedId{packageName='" + packageName + "', id=" + id + '}';
-  }
-
-  @Override public boolean equals(Object o) {
-    if (this == o) return true;
-    if (!(o instanceof QualifiedId)) return false;
-    QualifiedId other = (QualifiedId) o;
-    return id == other.id
-        && packageName.equals(other.packageName);
-  }
-
-  @Override public int hashCode() {
-    int result = packageName.hashCode();
-    result = 31 * result + id;
-    return result;
-  }
-}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 085124cd..f2d49f3d 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -8,14 +8,15 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 
 final class ViewBinding {
   private final Id id;
   private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings;
-  private final FieldViewBinding fieldBinding;
+  private final @Nullable FieldViewBinding fieldBinding;
 
   ViewBinding(Id id, Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings,
-      FieldViewBinding fieldBinding) {
+      @Nullable FieldViewBinding fieldBinding) {
     this.id = id;
     this.methodBindings = methodBindings;
     this.fieldBinding = fieldBinding;
@@ -25,7 +26,7 @@ public Id getId() {
     return id;
   }
 
-  public FieldViewBinding getFieldBinding() {
+  public @Nullable FieldViewBinding getFieldBinding() {
     return fieldBinding;
   }
 
@@ -73,7 +74,7 @@ public boolean isBoundToRoot() {
 
     private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
         new LinkedHashMap<>();
-    FieldViewBinding fieldBinding;
+    @Nullable FieldViewBinding fieldBinding;
 
     Builder(Id id) {
       this.id = id;
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
index 74b81994..9b027ef6 100644
--- a/butterknife-gradle-plugin/build.gradle
+++ b/butterknife-gradle-plugin/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'java-library'
+apply plugin: 'java-gradle-plugin'
 apply plugin: 'kotlin'
 
 sourceCompatibility = JavaVersion.VERSION_1_8
@@ -8,13 +8,12 @@ dependencies {
   compileOnly gradleApi()
 
   implementation deps.android.gradlePlugin
-  implementation deps.javaparser
   implementation deps.javapoet
-  implementation deps.kotlin.stdLibJre8
+  implementation deps.kotlin.stdLibJdk8
 
   testImplementation deps.junit
   testImplementation deps.truth
-  testImplementation deps.support.annotations
+  testImplementation deps.androidx.annotations
   testImplementation deps.compiletesting
 }
 
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 0f320906..d72b63a9 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -7,11 +7,13 @@ import com.android.build.gradle.FeaturePlugin
 import com.android.build.gradle.LibraryExtension
 import com.android.build.gradle.LibraryPlugin
 import com.android.build.gradle.api.BaseVariant
+import com.android.build.gradle.internal.res.GenerateLibraryRFileTask
+import com.android.build.gradle.internal.res.LinkApplicationAndroidResourcesTask
+import groovy.util.XmlSlurper
 import org.gradle.api.DomainObjectSet
 import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
-import java.io.File
 import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
@@ -39,33 +41,47 @@ class ButterKnifePlugin : Plugin<Project> {
     }
   }
 
+  // Parse the variant's main manifest file in order to get the package id which is used to create
+  // R.java in the right place.
+  private fun getPackageName(variant : BaseVariant) : String {
+    val slurper = XmlSlurper(false, false)
+    val list = variant.sourceSets.map { it.manifestFile }
+
+    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones.
+    // So the first file in the sourceSets list should be main.
+    val result = slurper.parse(list[0])
+    return result.getProperty("@package").toString()
+  }
+
   private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
       val outputDir = project.buildDir.resolve(
           "generated/source/r2/${variant.dirName}")
 
-      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
-      task.outputs.dir(outputDir)
-      variant.registerJavaGeneratingTask(task, outputDir)
-
+      val rPackage = getPackageName(variant)
       val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
-        task.dependsOn(processResources)
 
         // Though there might be multiple outputs, their R files are all the same. Thus, we only
         // need to configure the task once with the R.java input and action.
         if (once.compareAndSet(false, true)) {
-          val rPackage = processResources.packageForR
-          val pathToR = rPackage.replace('.', File.separatorChar)
-          val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
-
-          task.apply {
-            inputs.file(rFile)
-
-            doLast {
-              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
-            }
+          // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005)
+          val rFile =
+              project.files(
+                  when (processResources) {
+                    is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile
+                    is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile
+                    else -> throw RuntimeException(
+                        "Minimum supported Android Gradle Plugin is 3.1.0")
+                  })
+                  .builtBy(processResources)
+          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {
+            it.outputDir = outputDir
+            it.rFile = rFile
+            it.packageName = rPackage
+            it.className = "R2"
+            variant.registerJavaGeneratingTask(it, outputDir)
           }
         }
       }
@@ -73,6 +89,6 @@ class ButterKnifePlugin : Plugin<Project> {
   }
 
   private operator fun <T : Any> ExtensionContainer.get(type: KClass<T>): T {
-    return getByType(type.java)!!
+    return getByType(type.java)
   }
 }
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
deleted file mode 100644
index 672da6dc..00000000
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package butterknife.plugin;
-
-import com.github.javaparser.JavaParser;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.ast.Node;
-import com.github.javaparser.ast.body.BodyDeclaration;
-import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
-import com.github.javaparser.ast.body.FieldDeclaration;
-import com.github.javaparser.ast.body.TypeDeclaration;
-import com.github.javaparser.ast.body.VariableDeclarator;
-import com.github.javaparser.ast.type.PrimitiveType;
-import com.github.javaparser.ast.type.Type;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.FieldSpec;
-import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.TypeSpec;
-import java.io.File;
-import java.util.Arrays;
-import java.util.List;
-
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PUBLIC;
-import static javax.lang.model.element.Modifier.STATIC;
-
-/**
- * Generates a class that contains all supported field names in an R file as final values.
- * Also enables adding support annotations to indicate the type of resource for every field.
- */
-public final class FinalRClassBuilder {
-  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
-  private static final String[] SUPPORTED_TYPES = {
-      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
-      "string", "style", "styleable"
-  };
-
-  private FinalRClassBuilder() { }
-
-  public static void brewJava(File rFile, File outputDir, String packageName, String className)
-      throws Exception {
-    CompilationUnit compilationUnit = JavaParser.parse(rFile);
-    TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
-
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
-
-    for (Node node : resourceClass.getChildNodes()) {
-      if (node instanceof ClassOrInterfaceDeclaration) {
-        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);
-      }
-    }
-
-    JavaFile finalR = JavaFile.builder(packageName, result.build())
-        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
-        .build();
-
-    finalR.writeTo(outputDir);
-  }
-
-  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
-      ClassOrInterfaceDeclaration node) {
-    if (!supportedTypes.contains(node.getNameAsString())) {
-      return;
-    }
-
-    String type = node.getNameAsString();
-    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
-
-    for (BodyDeclaration field : node.getMembers()) {
-      if (field instanceof FieldDeclaration) {
-        FieldDeclaration declaration = (FieldDeclaration) field;
-        // Check that the field is an Int because styleable also contains Int arrays which can't be
-        // used in annotations.
-        if (isInt(declaration)) {
-          addResourceField(resourceType, declaration.getVariables().get(0),
-                  getSupportAnnotationClass(type));
-        }
-      }
-    }
-
-    result.addType(resourceType.build());
-  }
-
-  private static boolean isInt(FieldDeclaration field) {
-    Type type = field.getCommonType();
-    return type instanceof PrimitiveType
-        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
-  }
-
-  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
-      ClassName annotation) {
-    String fieldName = variable.getNameAsString();
-    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);
-    FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
-        .addModifiers(PUBLIC, STATIC, FINAL)
-        .initializer(fieldValue);
-
-    if (annotation != null) {
-      fieldSpecBuilder.addAnnotation(annotation);
-    }
-
-    resourceType.addField(fieldSpecBuilder.build());
-  }
-
-  private static ClassName getSupportAnnotationClass(String type) {
-    return ClassName.get(SUPPORT_ANNOTATION_PACKAGE, capitalize(type) + "Res");
-  }
-
-  private static String capitalize(String word) {
-    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
-  }
-}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
new file mode 100644
index 00000000..463a7531
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt
@@ -0,0 +1,64 @@
+package butterknife.plugin
+
+import com.squareup.javapoet.ClassName
+import com.squareup.javapoet.FieldSpec
+import com.squareup.javapoet.JavaFile
+import com.squareup.javapoet.TypeSpec
+import java.util.Locale
+import javax.lang.model.element.Modifier.FINAL
+import javax.lang.model.element.Modifier.PUBLIC
+import javax.lang.model.element.Modifier.STATIC
+
+
+private const val ANNOTATION_PACKAGE = "androidx.annotation"
+internal val SUPPORTED_TYPES = setOf("anim", "array", "attr", "bool", "color", "dimen",
+    "drawable", "id", "integer", "layout", "menu", "plurals", "string", "style", "styleable")
+
+/**
+ * Generates a class that contains all supported field names in an R file as final values.
+ * Also enables adding support annotations to indicate the type of resource for every field.
+ */
+class FinalRClassBuilder(
+  private val packageName: String,
+  private val className: String
+) {
+
+  private var resourceTypes = mutableMapOf<String, TypeSpec.Builder>()
+
+  fun build(): JavaFile {
+    val result = TypeSpec.classBuilder(className)
+        .addModifiers(PUBLIC, FINAL)
+    for (type in SUPPORTED_TYPES) {
+      resourceTypes.get(type)?.let {
+        result.addType(it.build())
+      }
+    }
+    return JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+        .build()
+  }
+
+  fun addResourceField(type: String, fieldName: String, fieldValue: String) {
+    if (type !in SUPPORTED_TYPES) {
+      return
+    }
+    val fieldSpecBuilder = FieldSpec.builder(Int::class.javaPrimitiveType, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer(fieldValue)
+
+    fieldSpecBuilder.addAnnotation(getSupportAnnotationClass(type))
+
+    val resourceType =
+        resourceTypes.getOrPut(type) {
+          TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL)
+        }
+    resourceType.addField(fieldSpecBuilder.build())
+  }
+
+  private fun getSupportAnnotationClass(type: String): ClassName {
+    return ClassName.get(ANNOTATION_PACKAGE, type.capitalize(Locale.US) + "Res")
+  }
+
+  // TODO https://youtrack.jetbrains.com/issue/KT-28933
+  private fun String.capitalize(locale: Locale) = substring(0, 1).toUpperCase(locale) + substring(1)
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
new file mode 100644
index 00000000..96e723d0
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt
@@ -0,0 +1,41 @@
+package butterknife.plugin
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.file.FileCollection
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputFiles
+import org.gradle.api.tasks.OutputDirectory
+import org.gradle.api.tasks.TaskAction
+import java.io.File
+
+open class R2Generator : DefaultTask() {
+  @get:OutputDirectory
+  var outputDir: File? = null
+
+  @get:InputFiles
+  var rFile: FileCollection? = null
+
+  @get:Input
+  var packageName: String? = null
+
+  @get:Input
+  var className: String? = null
+
+  @Suppress("unused") // Invoked by Gradle.
+  @TaskAction
+  fun brewJava() {
+    brewJava(rFile!!.singleFile, outputDir!!, packageName!!, className!!)
+  }
+}
+
+fun brewJava(
+  rFile: File,
+  outputDir: File,
+  packageName: String,
+  className: String
+) {
+  FinalRClassBuilder(packageName, className)
+      .also { ResourceSymbolListReader(it).readSymbolTable(rFile) }
+      .build()
+      .writeTo(outputDir)
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
new file mode 100644
index 00000000..1bcf57fb
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt
@@ -0,0 +1,28 @@
+package butterknife.plugin
+
+import java.io.File
+
+class ResourceSymbolListReader(private val builder: FinalRClassBuilder) {
+
+  fun readSymbolTable(symbolTable: File) {
+    symbolTable.forEachLine { processLine(it) }
+  }
+
+  private fun processLine(line: String) {
+    val values = line.split(' ')
+    if (values.size < 4) {
+      return
+    }
+    val javaType = values[0]
+    if (javaType != "int") {
+      return
+    }
+    val symbolType = values[1]
+    if (symbolType !in SUPPORTED_TYPES) {
+      return
+    }
+    val name = values[2]
+    val value = values[3]
+    builder.addResourceField(symbolType, name, value)
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/AndroidManifest.xml b/butterknife-gradle-plugin/src/test/AndroidManifest.xml
new file mode 100644
index 00000000..b9637928
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package="com.example.butterknife"/>
diff --git a/butterknife-gradle-plugin/src/test/build.gradle b/butterknife-gradle-plugin/src/test/build.gradle
new file mode 100644
index 00000000..92f5a7c9
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/build.gradle
@@ -0,0 +1,66 @@
+plugins {
+    id 'com.android.application'
+    id 'com.jakewharton.butterknife'
+}
+
+repositories {
+    google()
+}
+
+android {
+    compileSdkVersion 28
+
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
+    }
+
+    defaultConfig {
+        // This is different than the manifest.
+        applicationId 'com.example.butterknife'
+        minSdkVersion 27
+        targetSdkVersion 27
+        versionCode 1
+        versionName '1.0.0'
+    }
+
+    // Add differing applicationIdSuffixes for debug and release to ensure that the gradle plugin
+    // finds the R.java file correctly.
+    buildTypes {
+        debug {
+            applicationIdSuffix = ".debug"
+        }
+        release {
+            applicationIdSuffix = ".release"
+        }
+    }
+
+    flavorDimensions "flavorA"
+
+    // Override the applicationId in flavors to ensure that the gradle plugin
+    // finds the R.java file correctly.
+    productFlavors {
+        flavorA {
+            applicationId "foo.bar"
+        }
+
+        flavorB {
+            applicationId "bar.foo"
+        }
+    }
+
+    sourceSets {
+        main.java.srcDirs += '../../../../../butterknife/src/main/java'
+        main.java.srcDirs += '../../../../../butterknife-runtime/src/main/java'
+        main.java.srcDirs += '../../../../../butterknife-annotations/src/main/java'
+    }
+
+    lintOptions {
+        checkReleaseBuilds false
+    }
+
+}
+
+dependencies {
+    implementation "androidx.core:core:1.0.0"
+}
diff --git a/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/java/butterknife/test/ButteryActivity.java b/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/java/butterknife/test/ButteryActivity.java
new file mode 100644
index 00000000..6f3a4dec
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/java/butterknife/test/ButteryActivity.java
@@ -0,0 +1,21 @@
+package butterknife.test;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.TextView;
+import butterknife.ButterKnife;
+import butterknife.BindView;
+import com.example.butterknife.R;
+import com.example.butterknife.R2;
+
+class ButteryActivity extends Activity {
+
+  @BindView(R2.id.title) TextView title;
+
+  @Override protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    ButterKnife.bind(this);
+
+  }
+
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/res/layout/activity_layout.xml b/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/res/layout/activity_layout.xml
new file mode 100644
index 00000000..2a409b84
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/res/layout/activity_layout.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:tools="http://schemas.android.com/tools"
+  android:layout_width="match_parent"
+  android:layout_height="match_parent"
+  android:orientation="vertical"
+  android:padding="8dp"
+  tools:ignore="SelectableText">
+  <TextView
+    android:id="@+id/title"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:gravity="center"
+    android:textSize="50sp"/>
+</LinearLayout>
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/AndroidHome.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/AndroidHome.kt
new file mode 100644
index 00000000..75592461
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/AndroidHome.kt
@@ -0,0 +1,25 @@
+package butterknife.plugin
+
+import java.io.File
+import java.util.Properties
+
+
+internal fun androidHome(): String {
+    val env = System.getenv("ANDROID_HOME")
+    if (env != null) {
+        return env
+    }
+    val localProp = File(File(System.getProperty("user.dir")).parentFile, "local.properties")
+    if (localProp.exists()) {
+        val prop = Properties()
+        localProp.inputStream().use {
+            prop.load(it)
+        }
+        val sdkHome = prop.getProperty("sdk.dir")
+        if (sdkHome != null) {
+            return sdkHome
+        }
+    }
+    throw IllegalStateException(
+            "Missing 'ANDROID_HOME' environment variable or local.properties with 'sdk.dir'")
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
new file mode 100644
index 00000000..fa358db9
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt
@@ -0,0 +1,42 @@
+package butterknife.plugin
+
+import com.google.common.truth.Truth.assertThat
+import org.junit.rules.TestRule
+import org.junit.runner.Description
+import org.junit.runners.model.Statement
+import java.io.File
+
+class BuildFilesRule(private val root: File) : TestRule {
+    override fun apply(base: Statement, description: Description): Statement {
+        return object : Statement() {
+            override fun evaluate() {
+                val settingsFile = File(root, "settings.gradle")
+                val hasSettingsFile = settingsFile.exists()
+                if (!hasSettingsFile) settingsFile.writeText("")
+                val buildFile = File(root, "build.gradle")
+                val hasBuildFile = buildFile.exists()
+                if (hasBuildFile) {
+                    assertThat(buildFile.readText())
+                } else {
+                    val buildFileTemplate = File(root, "../../build.gradle").readText()
+                    buildFile.writeText(buildFileTemplate)
+                }
+
+                val manifestFile = File(root, "src/main/AndroidManifest.xml")
+                val hasManifestFile = manifestFile.exists()
+                if (!hasManifestFile) {
+                    val manifestFileTemplate = File(root, "../../AndroidManifest.xml").readText()
+                    manifestFile.writeText(manifestFileTemplate)
+                }
+
+                try {
+                    base.evaluate()
+                } finally {
+                    if (!hasSettingsFile) settingsFile.delete()
+                    if (!hasBuildFile) buildFile.delete()
+                    if (!hasManifestFile) manifestFile.delete()
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
index 68918ff8..656cdddb 100644
--- a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -7,37 +7,25 @@ import org.junit.Assert.assertEquals
 import org.junit.Rule
 import org.junit.Test
 import org.junit.rules.TemporaryFolder
-import org.junit.runner.RunWith
-import org.junit.runners.Parameterized
-import org.junit.runners.Parameterized.Parameters
 
-@RunWith(Parameterized::class)
-class FinalRClassBuilderTest(val rFile: String, val r2File: String) {
+class FinalRClassBuilderTest {
   @Rule @JvmField val tempFolder = TemporaryFolder()
 
   @Test fun brewJava() {
     val packageName = "com.butterknife.example"
-
-    val rFile = tempFolder.newFile("R.java").also {
-      it.writeText(javaClass.getResource("/fixtures/$rFile.java").readText())
+    val rFile = tempFolder.newFile("R.txt").also {
+      it.writeText(javaClass.getResource("/fixtures/R.txt").readText())
     }
 
     val outputDir = tempFolder.newFolder()
-    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2")
+    brewJava(rFile, outputDir, packageName, "R2")
 
     val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
-    val expected = javaClass.getResource("/fixtures/$r2File.java").readText()
+    val expected = javaClass.getResource("/fixtures/R2.java").readText()
 
     assertEquals(expected.trim(), actual.trim())
 
     val actualJava = JavaFileObjects.forSourceString("$packageName.R2", actual)
     assertAbout(javaSource()).that(actualJava).compilesWithoutError()
   }
-
-  companion object {
-    @JvmStatic @Parameters fun data() = listOf(
-        arrayOf<Any>("R", "R2"),
-        arrayOf<Any>("RFinal", "R2")
-    )
-  }
 }
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt
new file mode 100644
index 00000000..8a4966c1
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt
@@ -0,0 +1,51 @@
+package butterknife.plugin
+
+import com.google.common.truth.Truth.assertThat
+import org.gradle.testkit.runner.GradleRunner
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import org.junit.runners.Parameterized.Parameters
+import java.io.File
+
+
+@RunWith(Parameterized::class)
+class FixturesTest(val fixtureRoot: File, val name: String) {
+    @Suppress("unused") // Used by JUnit reflectively.
+    @get:Rule val buildFilesRule = BuildFilesRule(fixtureRoot)
+
+    @Test fun execute() {
+        val androidHome = androidHome()
+        File(fixtureRoot, "local.properties").writeText("sdk.dir=$androidHome\n")
+
+        val runner = GradleRunner.create()
+                .withProjectDir(fixtureRoot)
+                .withPluginClasspath()
+                .withArguments("clean", "assembleDebug", "assembleRelease", "--stacktrace")
+
+        if (File(fixtureRoot, "ignored.txt").exists()) {
+            println("Skipping ignored test $name.")
+            return
+        }
+
+        val expectedFailure = File(fixtureRoot, "failure.txt")
+        if (expectedFailure.exists()) {
+            val result = runner.buildAndFail()
+            for (chunk in expectedFailure.readText().split("\n\n")) {
+                assertThat(result.output).contains(chunk)
+            }
+        } else {
+            val result = runner.build()
+            assertThat(result.output).contains("BUILD SUCCESSFUL")
+        }
+    }
+
+    companion object {
+        @Suppress("unused") // Used by Parameterized JUnit runner reflectively.
+        @Parameters(name = "{1}")
+        @JvmStatic fun parameters() = File("src/test/fixtures").listFiles()
+                .filter { it.isDirectory }
+                .map { arrayOf(it, it.name) }
+    }
+}
\ No newline at end of file
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
deleted file mode 100644
index f02e0d09..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class unsupported {
-    public static int res = 0x7f040000;
-  }
-
-  public static final class anim {
-    public static int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static int[] resArray = { 0x7f040003 };
-    public static int res = 0x7f040015;
-  }
-}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
new file mode 100644
index 00000000..1117f0d8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.txt
@@ -0,0 +1,18 @@
+int unsupported res 0x7f040000
+int anim res 0x7f040001
+int array res 0x7f040002
+int attr res 0x7f040003
+int bool res 0x7f040004
+int color res 0x7f040005
+int dimen res 0x7f040006
+int drawable res 0x7f040007
+int id res 0x7f040008
+int integer res 0x7f040009
+int layout res 0x7f040010
+int menu res 0x7f040011
+int plurals res 0x7f040012
+int string res 0x7f040013
+int style res 0x7f040014
+int[] styleable resArray { 0x7f040003 , 0x7f040015 }
+int styleable resArray_child 0
+int styleable resArray_child2 1
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
index 4b44bab4..095214bb 100644
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -1,21 +1,21 @@
 // Generated code from Butter Knife gradle plugin. Do not modify!
 package com.butterknife.example;
 
-import android.support.annotation.AnimRes;
-import android.support.annotation.ArrayRes;
-import android.support.annotation.AttrRes;
-import android.support.annotation.BoolRes;
-import android.support.annotation.ColorRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.IntegerRes;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.MenuRes;
-import android.support.annotation.PluralsRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-import android.support.annotation.StyleableRes;
+import androidx.annotation.AnimRes;
+import androidx.annotation.ArrayRes;
+import androidx.annotation.AttrRes;
+import androidx.annotation.BoolRes;
+import androidx.annotation.ColorRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.IntegerRes;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.MenuRes;
+import androidx.annotation.PluralsRes;
+import androidx.annotation.StringRes;
+import androidx.annotation.StyleRes;
+import androidx.annotation.StyleableRes;
 
 public final class R2 {
   public static final class anim {
@@ -90,6 +90,9 @@
 
   public static final class styleable {
     @StyleableRes
-    public static final int res = 0x7f040015;
+    public static final int resArray_child = 0;
+
+    @StyleableRes
+    public static final int resArray_child2 = 1;
   }
 }
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
deleted file mode 100644
index c1391905..00000000
--- a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package com.example.butterknife;
-
-public final class R {
-  public static final class anim {
-    public static final int res = 0x7f040001;
-  }
-
-  public static final class array {
-    public static final int res = 0x7f040002;
-  }
-
-  public static final class attr {
-    public static final int res = 0x7f040003;
-  }
-
-  public static final class bool {
-    public static final int res = 0x7f040004;
-  }
-
-  public static final class color {
-    public static final int res = 0x7f040005;
-  }
-
-  public static final class dimen {
-    public static final int res = 0x7f040006;
-  }
-
-  public static final class drawable {
-    public static final int res = 0x7f040007;
-  }
-
-  public static final class id {
-    public static final int res = 0x7f040008;
-  }
-
-  public static final class integer {
-    public static final int res = 0x7f040009;
-  }
-
-  public static final class layout {
-    public static final int res = 0x7f040010;
-  }
-
-  public static final class menu {
-    public static final int res = 0x7f040011;
-  }
-
-  public static final class plurals {
-    public static final int res = 0x7f040012;
-  }
-
-  public static final class string {
-    public static final int res = 0x7f040013;
-  }
-
-  public static final class style {
-    public static final int res = 0x7f040014;
-  }
-
-  public static final class styleable {
-    public static final int res = 0x7f040015;
-  }
-}
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
index f06fe678..e604af1f 100644
--- a/butterknife-integration-test/build.gradle
+++ b/butterknife-integration-test/build.gradle
@@ -4,8 +4,8 @@ android {
   compileSdkVersion versions.compileSdk
 
   compileOptions {
-    sourceCompatibility = JavaVersion.VERSION_1_7
-    targetCompatibility = JavaVersion.VERSION_1_7
+    sourceCompatibility = JavaVersion.VERSION_1_8
+    targetCompatibility = JavaVersion.VERSION_1_8
   }
 
   defaultConfig {
@@ -14,6 +14,8 @@ android {
     targetSdkVersion versions.compileSdk
     versionCode 1
     versionName '1.0.0'
+
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
   }
 
   lintOptions {
@@ -21,6 +23,7 @@ android {
     textOutput "stdout"
     checkAllWarnings true
     warningsAsErrors true
+    disable 'UnknownNullness'
     showAll true
     explainIssues true
     // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
@@ -28,9 +31,21 @@ android {
   }
 
   buildTypes {
-    release {
+    debug {
       minifyEnabled true
-      proguardFile getDefaultProguardFile('proguard-android.txt')
+      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard.pro'
+      testProguardFile 'src/androidTest/proguard.pro'
+    }
+  }
+
+  productFlavors {
+    flavorDimensions 'runtime'
+
+    reflect {
+      dimension 'runtime'
+    }
+    codegen {
+      dimension 'runtime'
     }
   }
 
@@ -42,10 +57,14 @@ android {
 }
 
 dependencies {
-  implementation project(':butterknife')
-  annotationProcessor project(':butterknife-compiler')
+  reflectImplementation project(':butterknife-reflect')
+
+  codegenImplementation project(':butterknife')
+  codegenAnnotationProcessor project(':butterknife-compiler')
+  androidTestCodegenAnnotationProcessor project(':butterknife-compiler')
 
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.robolectric
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.androidx.test.runner
+  androidTestImplementation deps.androidx.test.rules
 }
diff --git a/butterknife-integration-test/src/androidTest/font_licenses.txt b/butterknife-integration-test/src/androidTest/font_licenses.txt
new file mode 100644
index 00000000..0b83a9a7
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/font_licenses.txt
@@ -0,0 +1,93 @@
+Copyright 2006 The Inconsolata Project Authors
+
+This Font Software is licensed under the SIL Open Font License, Version 1.1.
+This license is copied below, and is also available with a FAQ at:
+http://scripts.sil.org/OFL
+
+
+-----------------------------------------------------------
+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
+-----------------------------------------------------------
+
+PREAMBLE
+The goals of the Open Font License (OFL) are to stimulate worldwide
+development of collaborative font projects, to support the font creation
+efforts of academic and linguistic communities, and to provide a free and
+open framework in which fonts may be shared and improved in partnership
+with others.
+
+The OFL allows the licensed fonts to be used, studied, modified and
+redistributed freely as long as they are not sold by themselves. The
+fonts, including any derivative works, can be bundled, embedded, 
+redistributed and/or sold with any software provided that any reserved
+names are not used by derivative works. The fonts and derivatives,
+however, cannot be released under any other type of license. The
+requirement for fonts to remain under this license does not apply
+to any document created using the fonts or their derivatives.
+
+DEFINITIONS
+"Font Software" refers to the set of files released by the Copyright
+Holder(s) under this license and clearly marked as such. This may
+include source files, build scripts and documentation.
+
+"Reserved Font Name" refers to any names specified as such after the
+copyright statement(s).
+
+"Original Version" refers to the collection of Font Software components as
+distributed by the Copyright Holder(s).
+
+"Modified Version" refers to any derivative made by adding to, deleting,
+or substituting -- in part or in whole -- any of the components of the
+Original Version, by changing formats or by porting the Font Software to a
+new environment.
+
+"Author" refers to any designer, engineer, programmer, technical
+writer or other person who contributed to the Font Software.
+
+PERMISSION & CONDITIONS
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of the Font Software, to use, study, copy, merge, embed, modify,
+redistribute, and sell modified and unmodified copies of the Font
+Software, subject to the following conditions:
+
+1) Neither the Font Software nor any of its individual components,
+in Original or Modified Versions, may be sold by itself.
+
+2) Original or Modified Versions of the Font Software may be bundled,
+redistributed and/or sold with any software, provided that each copy
+contains the above copyright notice and this license. These can be
+included either as stand-alone text files, human-readable headers or
+in the appropriate machine-readable metadata fields within text or
+binary files as long as those fields can be easily viewed by the user.
+
+3) No Modified Version of the Font Software may use the Reserved Font
+Name(s) unless explicit written permission is granted by the corresponding
+Copyright Holder. This restriction only applies to the primary font name as
+presented to the users.
+
+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
+Software shall not be used to promote, endorse or advertise any
+Modified Version, except to acknowledge the contribution(s) of the
+Copyright Holder(s) and the Author(s) or with their explicit written
+permission.
+
+5) The Font Software, modified or unmodified, in part or in whole,
+must be distributed entirely under this license, and must not be
+distributed under any other license. The requirement for fonts to
+remain under this license does not apply to any document created
+using the Font Software.
+
+TERMINATION
+This license becomes null and void if any of the above conditions are
+not met.
+
+DISCLAIMER
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
+COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
+DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
+OTHER DEALINGS IN THE FONT SOFTWARE.
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
deleted file mode 100644
index c9c69e79..00000000
--- a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.example.butterknife;
-
-import android.test.ActivityInstrumentationTestCase2;
-import com.example.butterknife.library.SimpleActivity;
-
-public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {
-  public SimpleActivityTest() {
-    super(SimpleActivity.class);
-  }
-
-  public void testActivityStarts() {
-    getActivity(); // Trigger activity creation.
-    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup.
-  }
-}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
new file mode 100644
index 00000000..fdfc9c2f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java
@@ -0,0 +1,28 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import android.view.animation.Animation;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+
+public final class BindAnimTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(android.R.anim.fade_in) Animation actual;
+  }
+
+  @Test public void anim() {
+    Target target = new Target();
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertNotNull(target.actual); // Check more?
+
+    unbinder.unbind();
+    assertNotNull(target.actual);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
similarity index 79%
rename from butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
index 19992317..792b403f 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindArray;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindArrayTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class StringArrayTarget {
     @BindArray(R.array.string_one_two_three) String[] actual;
@@ -20,7 +23,7 @@
     StringArrayTarget target = new StringArrayTarget();
     String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -35,7 +38,7 @@
     IntArrayTarget target = new IntArrayTarget();
     int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$IntArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -50,7 +53,7 @@
     CharSequenceArrayTarget target = new CharSequenceArrayTarget();
     CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);
 
-    Unbinder unbinder = new BindArrayTest$CharSequenceArrayTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
similarity index 70%
rename from butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
index b3517fc8..c918af45 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java
@@ -1,20 +1,21 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindBitmap;
-import butterknife.BindBool;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
-import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertTrue;
 
 public final class BindBitmapTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBitmap(R.drawable.pixel) Bitmap actual;
@@ -24,7 +25,7 @@
     Target target = new Target();
     Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);
 
-    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertTrue(target.actual.sameAs(expected));
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
similarity index 68%
rename from butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
index 9156f8dc..6a2be219 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindBool;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindBoolTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindBool(R.bool.just_true) boolean actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     boolean expected = context.getResources().getBoolean(R.bool.just_true);
 
-    Unbinder unbinder = new BindBoolTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
similarity index 76%
rename from butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
index 12c8d020..99eaa0d7 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java
@@ -1,17 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
 import android.content.res.ColorStateList;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindColor;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindColorTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindColor(R.color.red) int actual;
@@ -21,7 +24,7 @@
     IntTarget target = new IntTarget();
     int expected = context.getResources().getColor(R.color.red);
 
-    Unbinder unbinder = new BindColorTest$IntTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -36,7 +39,7 @@
     ColorStateListTarget target = new ColorStateListTarget();
     ColorStateList expected = context.getResources().getColorStateList(R.color.colors);
 
-    Unbinder unbinder = new BindColorTest$ColorStateListTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual.toString()).isEqualTo(expected.toString());
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
similarity index 75%
rename from butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
index 4c76d548..538e643c 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindDimen;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindDimenTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class IntTarget {
     @BindDimen(R.dimen.twelve_point_two_dp) int actual;
@@ -20,7 +23,7 @@
     IntTarget target = new IntTarget();
     int expected = context.getResources().getDimensionPixelSize(R.dimen.twelve_point_two_dp);
 
-    Unbinder unbinder = new BindDimenTest$IntTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
@@ -35,7 +38,7 @@
     FloatTarget target = new FloatTarget();
     float expected = context.getResources().getDimension(R.dimen.twelve_point_two_dp);
 
-    Unbinder unbinder = new BindDimenTest$FloatTarget_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
similarity index 69%
rename from butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
index 88d23687..37f47c50 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java
@@ -1,21 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.drawable.Drawable;
-import android.support.test.InstrumentationRegistry;
-import butterknife.BindBitmap;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindDrawable;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertTrue;
 
 public final class BindDrawableTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindDrawable(R.drawable.circle) Drawable actual;
@@ -25,7 +24,7 @@
     Target target = new Target();
     Drawable expected = context.getResources().getDrawable(R.drawable.circle);
 
-    Unbinder unbinder = new BindDrawableTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
similarity index 72%
rename from butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
index 5ec97658..5e2e1e8a 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java
@@ -1,18 +1,20 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
 import android.util.TypedValue;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindFloat;
-import butterknife.BindInt;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindFloatTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindFloat(R.dimen.twelve_point_two) float actual;
@@ -24,7 +26,7 @@
     context.getResources().getValue(R.dimen.twelve_point_two, value, true);
     float expected = value.getFloat();
 
-    Unbinder unbinder = new BindFloatTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
new file mode 100644
index 00000000..b2cb1c57
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java
@@ -0,0 +1,53 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static android.graphics.Typeface.BOLD;
+import static com.google.common.truth.Truth.assertThat;
+
+@SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+public final class BindFontTest {
+  private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
+
+  static class TargetTypeface {
+    @BindFont(R.font.inconsolata_regular) Typeface actual;
+  }
+
+  @Test public void typeface() {
+    TargetTypeface target = new TargetTypeface();
+    Typeface expected = ResourcesCompat.getFont(context, R.font.inconsolata_regular);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = BOLD) Typeface actual;
+  }
+
+  @Test public void style() {
+    TargetStyle target = new TargetStyle();
+    Typeface expected =
+        Typeface.create(ResourcesCompat.getFont(context, R.font.inconsolata_regular), BOLD);
+
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isSameAs(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
similarity index 67%
rename from butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
index 8f091966..4900d396 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindInt;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindIntTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindInt(R.integer.twelve) int actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     int expected = context.getResources().getInteger(R.integer.twelve);
 
-    Unbinder unbinder = new BindIntTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
similarity index 67%
rename from butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
index c72e0549..6a8ce976 100644
--- a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java
@@ -1,16 +1,19 @@
-package butterknife.functional;
+package com.example.butterknife.functional;
 
 import android.content.Context;
-import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import butterknife.BindString;
+import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import butterknife.test.R;
+import com.example.butterknife.test.R;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public final class BindStringTest {
   private final Context context = InstrumentationRegistry.getContext();
+  private final View tree = ViewTree.create(1);
 
   static class Target {
     @BindString(R.string.hey) String actual;
@@ -20,7 +23,7 @@
     Target target = new Target();
     String expected = context.getString(R.string.hey);
 
-    Unbinder unbinder = new BindStringTest$Target_ViewBinding(target, context);
+    Unbinder unbinder = ButterKnife.bind(target, tree);
     assertThat(target.actual).isEqualTo(expected);
 
     unbinder.unbind();
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
new file mode 100644
index 00000000..7f7fd62f
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java
@@ -0,0 +1,27 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewTest {
+  static class TargetView {
+    @BindView(1) View actual;
+  }
+
+  @Test public void view() {
+    View tree = ViewTree.create(1);
+    View expected = tree.findViewById(1);
+
+    TargetView target = new TargetView();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).isSameAs(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
new file mode 100644
index 00000000..61370435
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java
@@ -0,0 +1,47 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindViewsTest {
+  static class TargetViewArray {
+    @BindViews({1, 2, 3}) View[] actual;
+  }
+
+  @Test public void array() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewArray target = new TargetViewArray();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).asList().containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+  static class TargetViewList {
+    @BindViews({1, 2, 3}) List<View> actual;
+  }
+
+  @Test public void list() {
+    View tree = ViewTree.create(1, 2, 3);
+    View expected1 = tree.findViewById(1);
+    View expected2 = tree.findViewById(2);
+    View expected3 = tree.findViewById(3);
+
+    TargetViewList target = new TargetViewList();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertThat(target.actual).containsExactly(expected1, expected2, expected3).inOrder();
+
+    unbinder.unbind();
+    assertThat(target.actual).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
new file mode 100644
index 00000000..d2ecc713
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java
@@ -0,0 +1,238 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CompoundButton;
+import android.widget.FrameLayout;
+import android.widget.ToggleButton;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnCheckedChanged;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnCheckedChangedTest {
+  static final class Simple {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class MultipleBindings {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) void click1() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(1) void clicks2() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleBindings() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnCheckedChanged(1) public void publicClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(2) void packageClick() {
+      clicks++;
+    }
+
+    @OnCheckedChanged(3) protected void protectedClick() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    view3.performClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnCheckedChanged({1, 2}) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(ToggleButton.class, 1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    view2.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnCheckedChanged(1) public void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(ToggleButton.class, 1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(ToggleButton.class, 2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnCheckedChanged(1) void clickTextView(CompoundButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(2) void clickButton(ToggleButton view) {
+      last = view;
+    }
+
+    @OnCheckedChanged(3) void clickMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends ToggleButton implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performClick();
+    assertSame(view1, target.last);
+
+    view2.performClick();
+    assertSame(view2, target.last);
+
+    view3.performClick();
+    assertSame(view3, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
new file mode 100644
index 00000000..9893f1a4
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java
@@ -0,0 +1,254 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnClickTest {
+  static final class Simple {
+    int clicks = 0;
+
+    @OnClick(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class MultipleBindings {
+    int clicks = 0;
+
+    @OnClick(1) void click1() {
+      clicks++;
+    }
+
+    @OnClick(1) void clicks2() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleBindings() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnClick(1) public void publicClick() {
+      clicks++;
+    }
+
+    @OnClick(2) void packageClick() {
+      clicks++;
+    }
+
+    @OnClick(3) protected void protectedClick() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    view3.performClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnClick({1, 2}) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    view2.performClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    view2.performClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnClick(1) public void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnClick(1) void clickView(View view) {
+      last = view;
+    }
+
+    @OnClick(2) void clickTextView(TextView view) {
+      last = view;
+    }
+
+    @OnClick(3) void clickButton(Button view) {
+      last = view;
+    }
+
+    @OnClick(4) void clickMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+
+      @Override public boolean post(Runnable action) {
+        // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+        action.run();
+        return true;
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    View view4 = new MyView(InstrumentationRegistry.getContext());
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performClick();
+    assertSame(view1, target.last);
+
+    view2.performClick();
+    assertSame(view2, target.last);
+
+    view3.performClick();
+    assertSame(view3, target.last);
+
+    view4.performClick();
+    assertSame(view4, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java
new file mode 100644
index 00000000..6c08cfbd
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java
@@ -0,0 +1,265 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsSpinner;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnItemClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import com.example.butterknife.library.SimpleAdapter;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnItemClickTest {
+    static class TestSpinner extends AbsSpinner {
+        public TestSpinner(Context context) {
+            super(context);
+            setAdapter(new SimpleAdapter(context));
+        }
+
+        void performItemClick(int position) {
+            if (position < 0) {
+                return;
+            }
+
+            AdapterView.OnItemClickListener listener = getOnItemClickListener();
+            if (listener != null) {
+                listener.onItemClick(this, null, position, NO_ID);
+            }
+        }
+    }
+
+    static final class Simple {
+        int clickedPosition = -1;
+
+        @OnItemClick(1) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void simple() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        Simple target = new Simple();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+
+    static final class MultipleBindings {
+        int clickedPosition1 = -1;
+        int clickedPosition2 = -1;
+
+        @OnItemClick(1) void itemClick1(int position) {
+            clickedPosition1 = position;
+        }
+
+        @OnItemClick(1) void itemClick2(int position) {
+            clickedPosition2 = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleBindings() {
+        assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        MultipleBindings target = new MultipleBindings();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition1);
+        assertEquals(-1, target.clickedPosition2);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition1);
+        assertEquals(0, target.clickedPosition2);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition1);
+        assertEquals(0, target.clickedPosition2);
+    }
+
+
+    static final class Visibilities {
+        int clickedPosition = -1;
+
+        @OnItemClick(1) public void publicItemClick(int position) {
+            clickedPosition = position;
+        }
+
+        @OnItemClick(2) void packageItemClick(int position) {
+            clickedPosition = position;
+        }
+
+        @OnItemClick(3) protected void protectedItemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void visibilities() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+        TestSpinner spinner3 = tree.findViewById(3);
+
+        Visibilities target = new Visibilities();
+        ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        spinner3.performItemClick(2);
+        assertEquals(2, target.clickedPosition);
+    }
+
+    static final class MultipleIds {
+        int clickedPosition = -1;
+
+        @OnItemClick({1, 2}) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleIds() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+
+        MultipleIds target = new MultipleIds();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner1.performItemClick(2);
+        assertEquals(1, target.clickedPosition);
+        spinner2.performItemClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class OptionalId {
+        int clickedPosition = -1;
+
+        @Optional @OnItemClick(1) void itemClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdPresent() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdAbsent() {
+        View tree = ViewTree.create(TestSpinner.class, 2);
+        TestSpinner spinner = tree.findViewById(2);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemClick(0);
+        assertEquals(-1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemClick(0);
+        assertEquals(-1, target.clickedPosition);
+    }
+
+    static final class ArgumentCast {
+        interface MyInterface {}
+
+        View last;
+
+        @OnItemClick(1) void itemClickAdapterView(AdapterView<?> view) {
+            last = view;
+        }
+
+        @OnItemClick(2) void itemClickAbsSpinner(AbsSpinner view) {
+            last = view;
+        }
+
+        @OnItemClick(3) void itemClickMyInterface(ArgumentCast.MyInterface view) {
+            last = (View) view;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void argumentCast() {
+        class MySpinner extends TestSpinner implements ArgumentCast.MyInterface {
+            MySpinner(Context context) {
+                super(context);
+            }
+        }
+
+        Context context = InstrumentationRegistry.getContext();
+        TestSpinner spinner1 = new MySpinner(context);
+        spinner1.setId(1);
+        TestSpinner spinner2 = new MySpinner(context);
+        spinner2.setId(2);
+        TestSpinner spinner3 = new MySpinner(context);
+        spinner3.setId(3);
+        ViewGroup tree = new FrameLayout(context);
+        tree.addView(spinner1);
+        tree.addView(spinner2);
+        tree.addView(spinner3);
+
+        ArgumentCast target = new ArgumentCast();
+        ButterKnife.bind(target, tree);
+
+        spinner1.performItemClick(0);
+        assertSame(spinner1, target.last);
+
+        spinner2.performItemClick(0);
+        assertSame(spinner2, target.last);
+
+        spinner3.performItemClick(0);
+        assertSame(spinner3, target.last);
+    }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java
new file mode 100644
index 00000000..60a2f505
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java
@@ -0,0 +1,267 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsSpinner;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnItemLongClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.library.SimpleAdapter;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnItemLongClickTest {
+    static class TestSpinner extends AbsSpinner {
+        public TestSpinner(Context context) {
+            super(context);
+            setAdapter(new SimpleAdapter(context));
+        }
+
+        boolean performItemLongClick(int position) {
+            if (position >= 0) {
+                AdapterView.OnItemLongClickListener listener = getOnItemLongClickListener();
+                if (listener != null) {
+                    return listener.onItemLongClick(this, null, position, NO_ID);
+                }
+            }
+
+            return false;
+        }
+    }
+
+    static final class Simple {
+        boolean returnValue = true;
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) boolean itemClick(int position) {
+            clickedPosition = position;
+            return returnValue;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void simple() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        Simple target = new Simple();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        assertTrue(spinner.performItemLongClick(0));
+        assertEquals(0, target.clickedPosition);
+
+        target.returnValue = false;
+        assertFalse(spinner.performItemLongClick(1));
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class ReturnVoid {
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) void itemLongClick(int position) {
+            clickedPosition = position;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void returnVoid() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        ReturnVoid target = new ReturnVoid();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        assertTrue(spinner.performItemLongClick(0));
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    static final class Visibilities {
+        int clickedPosition = -1;
+
+        @OnItemLongClick(1) public boolean publicItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+
+        @OnItemLongClick(2) boolean packageItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+
+        @OnItemLongClick(3) protected boolean protectedItemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void visibilities() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+        TestSpinner spinner3 = tree.findViewById(3);
+
+        Visibilities target = new Visibilities();
+        ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemLongClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        spinner3.performItemLongClick(2);
+        assertEquals(2, target.clickedPosition);
+    }
+
+    static final class MultipleIds {
+        int clickedPosition = -1;
+
+        @OnItemLongClick({1, 2}) boolean itemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void multipleIds() {
+        View tree = ViewTree.create(TestSpinner.class, 1, 2);
+        TestSpinner spinner1 = tree.findViewById(1);
+        TestSpinner spinner2 = tree.findViewById(2);
+
+        MultipleIds target = new MultipleIds();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner1.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        spinner2.performItemLongClick(1);
+        assertEquals(1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner1.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+        spinner2.performItemLongClick(2);
+        assertEquals(1, target.clickedPosition);
+    }
+
+    static final class OptionalId {
+        int clickedPosition = -1;
+
+        @Optional @OnItemLongClick(1) boolean itemLongClick(int position) {
+            clickedPosition = position;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdPresent() {
+        View tree = ViewTree.create(TestSpinner.class, 1);
+        TestSpinner spinner = tree.findViewById(1);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemLongClick(0);
+        assertEquals(0, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(1);
+        assertEquals(0, target.clickedPosition);
+    }
+
+    @UiThreadTest
+    @Test public void optionalIdAbsent() {
+        View tree = ViewTree.create(TestSpinner.class, 2);
+        TestSpinner spinner = tree.findViewById(2);
+
+        OptionalId target = new OptionalId();
+        Unbinder unbinder = ButterKnife.bind(target, tree);
+        assertEquals(-1, target.clickedPosition);
+
+        spinner.performItemLongClick(0);
+        assertEquals(-1, target.clickedPosition);
+
+        unbinder.unbind();
+        spinner.performItemLongClick(0);
+        assertEquals(-1, target.clickedPosition);
+    }
+
+    static final class ArgumentCast {
+        interface MyInterface {}
+
+        View last;
+
+        @OnItemLongClick(1) boolean itemLongClickAdapterView(AdapterView<?> view) {
+            last = view;
+            return true;
+        }
+
+        @OnItemLongClick(2) boolean itemLongClickAbsSpinner(AbsSpinner view) {
+            last = view;
+            return true;
+        }
+
+        @OnItemLongClick(3) boolean itemLongClickMyInterface(ArgumentCast.MyInterface view) {
+            last = (View) view;
+            return true;
+        }
+    }
+
+    @UiThreadTest
+    @Test public void argumentCast() {
+        class MySpinner extends TestSpinner implements ArgumentCast.MyInterface {
+            MySpinner(Context context) {
+                super(context);
+            }
+        }
+
+        Context context = InstrumentationRegistry.getContext();
+        TestSpinner spinner1 = new MySpinner(context);
+        spinner1.setId(1);
+        TestSpinner spinner2 = new MySpinner(context);
+        spinner2.setId(2);
+        TestSpinner spinner3 = new MySpinner(context);
+        spinner3.setId(3);
+        ViewGroup tree = new FrameLayout(context);
+        tree.addView(spinner1);
+        tree.addView(spinner2);
+        tree.addView(spinner3);
+
+        ArgumentCast target = new ArgumentCast();
+        ButterKnife.bind(target, tree);
+
+        spinner1.performItemLongClick(0);
+        assertSame(spinner1, target.last);
+
+        spinner2.performItemLongClick(0);
+        assertSame(spinner2, target.last);
+
+        spinner3.performItemLongClick(0);
+        assertSame(spinner3, target.last);
+    }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemSelectedTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemSelectedTest.java
new file mode 100644
index 00000000..8a37518d
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemSelectedTest.java
@@ -0,0 +1,387 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsSpinner;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnItemSelected;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import com.example.butterknife.BuildConfig;
+import com.example.butterknife.library.SimpleAdapter;
+import org.junit.Before;
+import org.junit.Test;
+
+import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assume.assumeFalse;
+
+@SuppressWarnings("unused") // Used by code gen.
+public final class OnItemSelectedTest {
+  static class TestSpinner extends AbsSpinner {
+    public TestSpinner(Context context) {
+      super(context);
+      setAdapter(new SimpleAdapter(context));
+    }
+
+    void performSelection(int position) {
+      if (position < 0) {
+        return;
+      }
+
+      AdapterView.OnItemSelectedListener listener = getOnItemSelectedListener();
+      if (listener != null) {
+        listener.onItemSelected(this, null, position, NO_ID);
+      }
+    }
+
+    void clearSelection() {
+      AdapterView.OnItemSelectedListener listener = getOnItemSelectedListener();
+      if (listener != null) {
+        listener.onNothingSelected(this);
+      }
+    }
+  }
+
+  @Before public void ignoreIfReflect() {
+    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO
+  }
+
+  static final class Simple {
+    int selectedPosition = -1;
+
+    @OnItemSelected(1) void select(int position) {
+      selectedPosition = position;
+    }
+
+    @OnItemSelected(value = 1, callback = NOTHING_SELECTED) void clear() {
+      selectedPosition = -1;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(TestSpinner.class, 1);
+    TestSpinner spinner = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(-1, target.selectedPosition);
+
+    spinner.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner.performSelection(1);
+    unbinder.unbind();
+    spinner.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+    spinner.clearSelection();
+    assertEquals(1, target.selectedPosition);
+  }
+
+  static final class MultipleBindings {
+    int selectedPosition1 = -1;
+    int selectedPosition2 = -1;
+
+    @OnItemSelected(1) void select1(int position) {
+      selectedPosition1 = position;
+    }
+
+    @OnItemSelected(1) void select2(int position) {
+      selectedPosition2 = position;
+    }
+
+    @OnItemSelected(value = 1, callback = NOTHING_SELECTED) void clear1() {
+      selectedPosition1 = -1;
+    }
+
+    @OnItemSelected(value = 1, callback = NOTHING_SELECTED) void clear2() {
+      selectedPosition2 = -1;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleBindings() {
+    View tree = ViewTree.create(TestSpinner.class, 1);
+    TestSpinner spinner = tree.findViewById(1);
+
+    MultipleBindings target = new MultipleBindings();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(-1, target.selectedPosition1);
+    assertEquals(-1, target.selectedPosition2);
+
+    spinner.performSelection(0);
+    assertEquals(0, target.selectedPosition1);
+    assertEquals(0, target.selectedPosition2);
+
+    spinner.clearSelection();
+    assertEquals(-1, target.selectedPosition1);
+    assertEquals(-1, target.selectedPosition2);
+
+    spinner.performSelection(1);
+    unbinder.unbind();
+    spinner.performSelection(0);
+    assertEquals(1, target.selectedPosition1);
+    assertEquals(1, target.selectedPosition2);
+    spinner.clearSelection();
+    assertEquals(1, target.selectedPosition1);
+    assertEquals(1, target.selectedPosition2);
+  }
+
+  static final class Visibilities {
+    int selectedPosition = -1;
+
+    @OnItemSelected(1) public void publicSelect(int position) {
+      selectedPosition = position;
+    }
+
+    @OnItemSelected(2) void packageSelect(int position) {
+      selectedPosition = position;
+    }
+
+    @OnItemSelected(3) protected void protectedSelect(int position) {
+      selectedPosition = position;
+    }
+
+    @OnItemSelected(value = 1, callback = NOTHING_SELECTED) public void publicClear() {
+      selectedPosition = -1;
+    }
+
+    @OnItemSelected(value = 2, callback = NOTHING_SELECTED) void packageClear() {
+      selectedPosition = -1;
+    }
+
+    @OnItemSelected(value = 3, callback = NOTHING_SELECTED) protected void protectedClear() {
+      selectedPosition = -1;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+    TestSpinner spinner1 = tree.findViewById(1);
+    TestSpinner spinner2 = tree.findViewById(2);
+    TestSpinner spinner3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(-1, target.selectedPosition);
+
+    spinner1.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner1.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner2.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner2.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner3.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner3.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+  }
+
+  static final class MultipleIdPermutation {
+    int selectedPosition = -1;
+
+    @OnItemSelected({1, 2}) void select(int position) {
+      selectedPosition = position;
+    }
+
+    @OnItemSelected(value = {1, 3}, callback = NOTHING_SELECTED) void clear() {
+      selectedPosition = -1;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIdPermutation() {
+    View tree = ViewTree.create(TestSpinner.class, 1, 2, 3);
+    TestSpinner spinner1 = tree.findViewById(1);
+    TestSpinner spinner2 = tree.findViewById(2);
+    TestSpinner spinner3 = tree.findViewById(3);
+
+    MultipleIdPermutation target = new MultipleIdPermutation();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(-1, target.selectedPosition);
+
+    spinner1.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner1.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner2.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner2.clearSelection();
+    assertEquals(0, target.selectedPosition);
+
+    spinner3.performSelection(1);
+    assertEquals(0, target.selectedPosition);
+
+    spinner3.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner1.performSelection(1);
+    unbinder.unbind();
+    spinner1.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+    spinner2.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+    spinner3.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+    spinner1.clearSelection();
+    assertEquals(1, target.selectedPosition);
+    spinner2.clearSelection();
+    assertEquals(1, target.selectedPosition);
+    spinner3.clearSelection();
+    assertEquals(1, target.selectedPosition);
+  }
+
+  static final class OptionalId {
+    int selectedPosition = -1;
+
+    @Optional @OnItemSelected(1) void select(int position) {
+      selectedPosition = position;
+    }
+
+    @Optional @OnItemSelected(value = 1, callback = NOTHING_SELECTED) void clear() {
+      selectedPosition = -1;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(TestSpinner.class, 1);
+    TestSpinner spinner = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(-1, target.selectedPosition);
+
+    spinner.performSelection(0);
+    assertEquals(0, target.selectedPosition);
+
+    spinner.clearSelection();
+    assertEquals(-1, target.selectedPosition);
+
+    spinner.performSelection(1);
+    unbinder.unbind();
+    spinner.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+    spinner.clearSelection();
+    assertEquals(1, target.selectedPosition);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(TestSpinner.class, 2);
+    TestSpinner spinner = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    target.selectedPosition = 1;
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(1, target.selectedPosition);
+
+    spinner.performSelection(0);
+    assertEquals(1, target.selectedPosition);
+
+    spinner.clearSelection();
+    assertEquals(1, target.selectedPosition);
+
+    unbinder.unbind();
+    spinner.performSelection(1);
+    assertEquals(1, target.selectedPosition);
+    spinner.clearSelection();
+    assertEquals(1, target.selectedPosition);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnItemSelected(1) void selectAdapterView(AdapterView<?> view) {
+      last = view;
+    }
+
+    @OnItemSelected(2) void selectAbsSpinner(AbsSpinner view) {
+      last = view;
+    }
+
+    @OnItemSelected(3) void selectMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+
+    @OnItemSelected(value = 1, callback = NOTHING_SELECTED)
+    void clearAdapterView(AdapterView<?> view) {
+      last = view;
+    }
+
+    @OnItemSelected(value = 2, callback = NOTHING_SELECTED)
+    void clearAbsSpinner(AbsSpinner view) {
+      last = view;
+    }
+
+    @OnItemSelected(value = 3, callback = NOTHING_SELECTED)
+    void clearMyInterface(MyInterface view) {
+      last = (View) view;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MySpinner extends TestSpinner implements ArgumentCast.MyInterface {
+      MySpinner(Context context) {
+        super(context);
+      }
+    }
+
+    Context context = InstrumentationRegistry.getContext();
+    TestSpinner spinner1 = new MySpinner(context);
+    spinner1.setId(1);
+    TestSpinner spinner2 = new MySpinner(context);
+    spinner2.setId(2);
+    TestSpinner spinner3 = new MySpinner(context);
+    spinner3.setId(3);
+    ViewGroup tree = new FrameLayout(context);
+    tree.addView(spinner1);
+    tree.addView(spinner2);
+    tree.addView(spinner3);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    spinner1.performSelection(0);
+    assertSame(spinner1, target.last);
+
+    spinner2.performSelection(0);
+    assertSame(spinner2, target.last);
+
+    spinner3.performSelection(0);
+    assertSame(spinner3, target.last);
+
+    spinner1.clearSelection();
+    assertSame(spinner1, target.last);
+
+    spinner2.clearSelection();
+    assertSame(spinner2, target.last);
+
+    spinner3.clearSelection();
+    assertSame(spinner3, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
new file mode 100644
index 00000000..019f5b9e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java
@@ -0,0 +1,257 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnLongClick;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnLongClickTest {
+  static final class Simple {
+    boolean returnValue = true;
+    int clicks = 0;
+
+    @OnLongClick(1) boolean click() {
+      clicks++;
+      return returnValue;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    target.returnValue = false;
+    assertFalse(view1.performLongClick());
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class ReturnVoid {
+    int clicks = 0;
+
+    @OnLongClick(1) void click() {
+      clicks++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void returnVoid() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    ReturnVoid target = new ReturnVoid();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    assertTrue(view1.performLongClick());
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  static final class Visibilities {
+    int clicks = 0;
+
+    @OnLongClick(1) public boolean publicClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(2) boolean packageClick() {
+      clicks++;
+      return true;
+    }
+
+    @OnLongClick(3) protected boolean protectedClick() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    view3.performLongClick();
+    assertEquals(3, target.clicks);
+  }
+
+  static final class MultipleIds {
+    int clicks = 0;
+
+    @OnLongClick({1, 2}) boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    view2.performLongClick();
+    assertEquals(2, target.clicks);
+  }
+
+  static final class OptionalId {
+    int clicks = 0;
+
+    @Optional @OnLongClick(1) public boolean click() {
+      clicks++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+
+    unbinder.unbind();
+    view1.performLongClick();
+    assertEquals(1, target.clicks);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.clicks);
+
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+
+    unbinder.unbind();
+    view2.performLongClick();
+    assertEquals(0, target.clicks);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnLongClick(1) boolean clickView(View view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(2) boolean clickTextView(TextView view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(3) boolean clickButton(Button view) {
+      last = view;
+      return true;
+    }
+
+    @OnLongClick(4) boolean clickMyInterface(MyInterface view) {
+      last = (View) view;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    View view1 = new MyView(InstrumentationRegistry.getContext());
+    view1.setId(1);
+    View view2 = new MyView(InstrumentationRegistry.getContext());
+    view2.setId(2);
+    View view3 = new MyView(InstrumentationRegistry.getContext());
+    view3.setId(3);
+    View view4 = new MyView(InstrumentationRegistry.getContext());
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(InstrumentationRegistry.getContext());
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    view1.performLongClick();
+    assertSame(view1, target.last);
+
+    view2.performLongClick();
+    assertSame(view2, target.last);
+
+    view3.performLongClick();
+    assertSame(view3, target.last);
+
+    view4.performLongClick();
+    assertSame(view4, target.last);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java
new file mode 100644
index 00000000..497f7096
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java
@@ -0,0 +1,264 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import androidx.test.InstrumentationRegistry;
+import androidx.test.annotation.UiThreadTest;
+import butterknife.ButterKnife;
+import butterknife.OnTouch;
+import butterknife.Optional;
+import butterknife.Unbinder;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+@SuppressWarnings("unused") // Used reflectively / by code gen.
+public final class OnTouchTest {
+  static final class Simple {
+    boolean returnValue = true;
+    int touches = 0;
+
+    @OnTouch(1) boolean touch() {
+      touches++;
+      return returnValue;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void simple() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    Simple target = new Simple();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    assertTrue(performTouch(view1));
+    assertEquals(1, target.touches);
+
+    target.returnValue = false;
+    assertFalse(performTouch(view1));
+    assertEquals(2, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(2, target.touches);
+  }
+
+  static final class ReturnVoid {
+    int touches = 0;
+
+    @OnTouch(1) void touch() {
+      touches++;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void returnVoid() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    ReturnVoid target = new ReturnVoid();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    assertTrue(performTouch(view1));
+    assertEquals(1, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(1, target.touches);
+  }
+
+  static final class Visibilities {
+    int touches = 0;
+
+    @OnTouch(1) public boolean publicTouch() {
+      touches++;
+      return true;
+    }
+
+    @OnTouch(2) boolean packageTouch() {
+      touches++;
+      return true;
+    }
+
+    @OnTouch(3) protected boolean protectedTouch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void visibilities() {
+    View tree = ViewTree.create(1, 2, 3);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+    View view3 = tree.findViewById(3);
+
+    Visibilities target = new Visibilities();
+    ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    performTouch(view2);
+    assertEquals(2, target.touches);
+
+    performTouch(view3);
+    assertEquals(3, target.touches);
+  }
+
+  static final class MultipleIds {
+    int touches = 0;
+
+    @OnTouch({1, 2}) boolean touch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void multipleIds() {
+    View tree = ViewTree.create(1, 2);
+    View view1 = tree.findViewById(1);
+    View view2 = tree.findViewById(2);
+
+    MultipleIds target = new MultipleIds();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    performTouch(view2);
+    assertEquals(2, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    performTouch(view2);
+    assertEquals(2, target.touches);
+  }
+
+  static final class OptionalId {
+    int touches = 0;
+
+    @Optional @OnTouch(1) public boolean touch() {
+      touches++;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdPresent() {
+    View tree = ViewTree.create(1);
+    View view1 = tree.findViewById(1);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view1);
+    assertEquals(1, target.touches);
+
+    unbinder.unbind();
+    performTouch(view1);
+    assertEquals(1, target.touches);
+  }
+
+  @UiThreadTest
+  @Test public void optionalIdAbsent() {
+    View tree = ViewTree.create(2);
+    View view2 = tree.findViewById(2);
+
+    OptionalId target = new OptionalId();
+    Unbinder unbinder = ButterKnife.bind(target, tree);
+    assertEquals(0, target.touches);
+
+    performTouch(view2);
+    assertEquals(0, target.touches);
+
+    unbinder.unbind();
+    performTouch(view2);
+    assertEquals(0, target.touches);
+  }
+
+  static final class ArgumentCast {
+    interface MyInterface {}
+
+    View last;
+
+    @OnTouch(1) boolean touchView(View view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(2) boolean touchTextView(TextView view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(3) boolean touchButton(Button view) {
+      last = view;
+      return true;
+    }
+
+    @OnTouch(4) boolean touchMyInterface(ArgumentCast.MyInterface view) {
+      last = (View) view;
+      return true;
+    }
+  }
+
+  @UiThreadTest
+  @Test public void argumentCast() {
+    class MyView extends Button implements ArgumentCast.MyInterface {
+      MyView(Context context) {
+        super(context);
+      }
+    }
+
+    Context context = InstrumentationRegistry.getContext();
+    View view1 = new MyView(context);
+    view1.setId(1);
+    View view2 = new MyView(context);
+    view2.setId(2);
+    View view3 = new MyView(context);
+    view3.setId(3);
+    View view4 = new MyView(context);
+    view4.setId(4);
+    ViewGroup tree = new FrameLayout(context);
+    tree.addView(view1);
+    tree.addView(view2);
+    tree.addView(view3);
+    tree.addView(view4);
+
+    ArgumentCast target = new ArgumentCast();
+    ButterKnife.bind(target, tree);
+
+    performTouch(view1);
+    assertSame(view1, target.last);
+
+    performTouch(view2);
+    assertSame(view2, target.last);
+
+    performTouch(view3);
+    assertSame(view3, target.last);
+
+    performTouch(view4);
+    assertSame(view4, target.last);
+  }
+
+  private static boolean performTouch(View view) {
+    MotionEvent event = MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, 0, 0, 0);
+    return view.dispatchTouchEvent(event);
+  }
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
new file mode 100644
index 00000000..cae85884
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java
@@ -0,0 +1,52 @@
+package com.example.butterknife.functional;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
+import java.lang.reflect.InvocationTargetException;
+
+final class ViewTree {
+  static View create(int... ids) {
+    return create(View.class, ids);
+  }
+
+  static View create(Class<? extends View> cls, int... ids) {
+    Context context = InstrumentationRegistry.getContext();
+    ViewGroup group = new FrameLayout(context);
+    for (int id : ids) {
+      View view;
+      if (cls == View.class) {
+        view = new NoPostView(context);
+      } else {
+        try {
+          view = cls.getConstructor(Context.class).newInstance(context);
+        } catch (IllegalAccessException | InstantiationException | NoSuchMethodException e) {
+          throw new RuntimeException(e);
+        } catch (InvocationTargetException e) {
+          Throwable cause = e.getCause();
+          if (cause instanceof RuntimeException) throw (RuntimeException) cause;
+          if (cause instanceof Error) throw (Error) cause;
+          throw new RuntimeException(cause);
+        }
+      }
+
+      view.setId(id);
+      group.addView(view);
+    }
+    return group;
+  }
+
+  private static final class NoPostView extends View {
+    NoPostView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean post(Runnable action) {
+      // Because of DebouncingOnClickListener, we run any posted Runnables synchronously.
+      action.run();
+      return true;
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
similarity index 80%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
index ccda50b4..d7da3011 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -1,19 +1,20 @@
 package com.example.butterknife.library;
 
+import androidx.test.rule.ActivityTestRule;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import com.example.butterknife.R;
+import org.junit.Rule;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
-public class SimpleActivityTest {
+public final class SimpleActivityTest {
+  @Rule public final ActivityTestRule<SimpleActivity> activityRule =
+      new ActivityTestRule<>(SimpleActivity.class);
+
   @Test public void verifyContentViewBinding() {
-    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
+    SimpleActivity activity = activityRule.getActivity();
 
     Unbinder unbinder = ButterKnife.bind(activity);
     verifySimpleActivityBound(activity);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
similarity index 76%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
index cd625c3e..382a22df 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -2,19 +2,16 @@
 
 import android.content.Context;
 import android.view.View;
+import androidx.test.InstrumentationRegistry;
 import com.example.butterknife.R;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 
 import static com.example.butterknife.library.SimpleAdapter.ViewHolder;
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
 public class SimpleAdapterTest {
   @Test public void verifyViewHolderViews() {
-    Context context = RuntimeEnvironment.application;
+    Context context = InstrumentationRegistry.getTargetContext();
 
     View root = View.inflate(context, R.layout.simple_list_item, null);
     ViewHolder holder = new ViewHolder(root);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
similarity index 66%
rename from butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
rename to butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
index 55754140..81eb766d 100644
--- a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -1,33 +1,31 @@
 package com.example.butterknife.unbinder;
 
+import android.content.Context;
 import android.view.View;
 import android.widget.Button;
 import android.widget.FrameLayout;
+import androidx.test.InstrumentationRegistry;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
 public final class UnbinderTest {
+  private final Context context = InstrumentationRegistry.getContext();
 
-  @Test
-  public void verifyContentViewBinding() {
-    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);
-    Button button1 = new Button(RuntimeEnvironment.application);
+  @Test public void verifyContentViewBinding() {
+    FrameLayout frameLayout = new FrameLayout(context);
+    Button button1 = new Button(context);
     button1.setId(android.R.id.button1);
     frameLayout.addView(button1);
-    Button button2 = new Button(RuntimeEnvironment.application);
+    Button button2 = new Button(context);
     button2.setId(android.R.id.button2);
     frameLayout.addView(button2);
-    Button button3 = new Button(RuntimeEnvironment.application);
+    Button button3 = new Button(context);
     button3.setId(android.R.id.button3);
     frameLayout.addView(button3);
-    View content = new View(RuntimeEnvironment.application);
+    View content = new View(context);
     content.setId(android.R.id.content);
     frameLayout.addView(content);
     H h = new H(frameLayout);
diff --git a/butterknife-integration-test/src/androidTest/proguard.pro b/butterknife-integration-test/src/androidTest/proguard.pro
new file mode 100644
index 00000000..4807b6d1
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/proguard.pro
@@ -0,0 +1,5 @@
+-dontoptimize
+-dontobfuscate
+-dontshrink
+-dontnote **
+-dontwarn **
diff --git a/butterknife/src/androidTest/res/color/colors.xml b/butterknife-integration-test/src/androidTest/res/color/colors.xml
similarity index 100%
rename from butterknife/src/androidTest/res/color/colors.xml
rename to butterknife-integration-test/src/androidTest/res/color/colors.xml
diff --git a/butterknife/src/androidTest/res/drawable/circle.xml b/butterknife-integration-test/src/androidTest/res/drawable/circle.xml
similarity index 100%
rename from butterknife/src/androidTest/res/drawable/circle.xml
rename to butterknife-integration-test/src/androidTest/res/drawable/circle.xml
diff --git a/butterknife/src/androidTest/res/drawable/pixel.png b/butterknife-integration-test/src/androidTest/res/drawable/pixel.png
similarity index 100%
rename from butterknife/src/androidTest/res/drawable/pixel.png
rename to butterknife-integration-test/src/androidTest/res/drawable/pixel.png
diff --git a/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf
new file mode 100644
index 00000000..fc981ce7
Binary files /dev/null and b/butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf differ
diff --git a/butterknife/src/androidTest/res/values/values.xml b/butterknife-integration-test/src/androidTest/res/values/values.xml
similarity index 100%
rename from butterknife/src/androidTest/res/values/values.xml
rename to butterknife-integration-test/src/androidTest/res/values/values.xml
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
new file mode 100644
index 00000000..79bd2521
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindAnim;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindAnimFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindAnim(1) String actual;
+  }
+
+  @Test public void typeMustBeAnimation() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindAnim field type must be 'Animation'. "
+              + "(com.example.butterknife.functional.BindAnimFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
new file mode 100644
index 00000000..5740af10
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java
@@ -0,0 +1,31 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindArray;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindArrayFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindArray(1) String actual;
+  }
+
+  @Test public void typeMustBeSupported() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindArray field type must be one of: "
+              + "String[], int[], CharSequence[], android.content.res.TypedArray. "
+              + "(com.example.butterknife.functional.BindArrayFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
new file mode 100644
index 00000000..c46c3295
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBitmap;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBitmapFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBitmap(1) String actual;
+  }
+
+  @Test public void typeMustBeBitmap() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBitmap field type must be 'Bitmap'. "
+              + "(com.example.butterknife.functional.BindBitmapFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
new file mode 100644
index 00000000..d0b23508
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindBool;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindBoolFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindBool(1) String actual;
+  }
+
+  @Test public void typeMustBeBool() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindBool field type must be 'boolean'. "
+              + "(com.example.butterknife.functional.BindBoolFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
new file mode 100644
index 00000000..eb666f49
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindColorFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindColor(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindColor field type must be 'int' or 'ColorStateList'. "
+              + "(com.example.butterknife.functional.BindColorFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
new file mode 100644
index 00000000..8bbddfbf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDimen;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDimenFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDimen(1) String actual;
+  }
+
+  @Test public void typeMustBeIntOrFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDimen field type must be 'int' or 'float'. "
+              + "(com.example.butterknife.functional.BindDimenFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
new file mode 100644
index 00000000..74cc0b4e
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindDrawable;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindDrawableFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindDrawable(1) String actual;
+  }
+
+  @Test public void typeMustBeDrawable() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindDrawable field type must be 'Drawable'. "
+              + "(com.example.butterknife.functional.BindDrawableFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
new file mode 100644
index 00000000..c188d977
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindFloat;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFloatFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindFloat(1) String actual;
+  }
+
+  @Test public void typeMustBeFloat() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFloat field type must be 'float'. "
+              + "(com.example.butterknife.functional.BindFloatFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
new file mode 100644
index 00000000..fcbca3fb
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java
@@ -0,0 +1,51 @@
+package com.example.butterknife.functional;
+
+import android.graphics.Typeface;
+import android.view.View;
+import androidx.test.filters.SdkSuppress;
+import butterknife.BindFont;
+import butterknife.ButterKnife;
+import com.example.butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindFontFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class TargetType {
+    @BindFont(1) String actual;
+  }
+
+  @Test public void typeMustBeTypeface() {
+    TargetType target = new TargetType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont field type must be 'Typeface'. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetType.actual)");
+    }
+  }
+
+  static class TargetStyle {
+    @BindFont(value = R.font.inconsolata_regular, style = 5) Typeface actual;
+  }
+
+  @SdkSuppress(minSdkVersion = 24) // AndroidX problems on earlier versions
+  @Test public void styleMustBeValid() {
+    TargetStyle target = new TargetStyle();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. "
+              + "(com.example.butterknife.functional.BindFontFailureTest$TargetStyle.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
new file mode 100644
index 00000000..cdd970ce
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindInt;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindIntFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindInt(1) String actual;
+  }
+
+  @Test public void typeMustBeInt() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindInt field type must be 'int'. "
+              + "(com.example.butterknife.functional.BindIntFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
new file mode 100644
index 00000000..f68d78bf
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindString;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindStringFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class Target {
+    @BindString(1) boolean actual;
+  }
+
+  @Test public void typeMustBeString() {
+    Target target = new Target();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindString field type must be 'String'. "
+              + "(com.example.butterknife.functional.BindStringFailureTest$Target.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
new file mode 100644
index 00000000..912b68bc
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java
@@ -0,0 +1,30 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NotView {
+    @BindView(1) String actual;
+  }
+
+  @Test public void failsIfNotView() {
+    NotView target = new NotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindView fields must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewFailureTest$NotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
new file mode 100644
index 00000000..78983566
--- /dev/null
+++ b/butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java
@@ -0,0 +1,100 @@
+package com.example.butterknife.functional;
+
+import android.view.View;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import java.util.Deque;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class BindViewsFailureTest {
+  private final View tree = ViewTree.create(1);
+
+  static class NoIds {
+    @BindViews({}) View[] actual;
+  }
+
+  @Test public void failsIfNoIds() {
+    NoIds target = new NoIds();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must specify at least one ID. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoIds.actual)");
+    }
+  }
+
+  static class NoGenericType {
+    @BindViews(1) List actual;
+  }
+
+  @Test public void failsIfNoGenericType() {
+    NoGenericType target = new NoGenericType();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List must have a generic component. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$NoGenericType.actual)");
+    }
+  }
+
+  static class BadCollection {
+    @BindViews(1) Deque<View> actual;
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    BadCollection target = new BadCollection();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews must be a List or array. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$BadCollection.actual)");
+    }
+  }
+
+  static class ListNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfGenericNotView() {
+    ListNotView target = new ListNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ListNotView.actual)");
+    }
+  }
+
+  static class ArrayNotView {
+    @BindViews(1) List<String> actual;
+  }
+
+  @Test public void failsIfArrayNotView() {
+    ArrayNotView target = new ArrayNotView();
+
+    try {
+      ButterKnife.bind(target, tree);
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessageThat()
+          .isEqualTo("@BindViews List or array type must extend from View or be an interface. "
+              + "(com.example.butterknife.functional.BindViewsFailureTest$ArrayNotView.actual)");
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 7097639f..f72eb3e4 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -2,13 +2,13 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
+import butterknife.Action;
 import butterknife.BindString;
 import butterknife.BindView;
 import butterknife.BindViews;
@@ -16,21 +16,19 @@
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import butterknife.ViewCollections;
 import com.example.butterknife.R;
-
 import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
 public class SimpleActivity extends Activity {
-  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
-      alphaAnimation.setFillBefore(true);
-      alphaAnimation.setDuration(500);
-      alphaAnimation.setStartOffset(index * 100);
-      view.startAnimation(alphaAnimation);
-    }
+  private static final Action<View> ALPHA_FADE = (view, index) -> {
+    AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+    alphaAnimation.setFillBefore(true);
+    alphaAnimation.setDuration(500);
+    alphaAnimation.setStartOffset(index * 100);
+    view.startAnimation(alphaAnimation);
   };
 
   @BindView(R.id.title) TextView title;
@@ -49,7 +47,7 @@
 
   @OnClick(R.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
-    ButterKnife.apply(headerViews, ALPHA_FADE);
+    ViewCollections.run(headerViews, ALPHA_FADE);
   }
 
   @OnLongClick(R.id.hello) boolean sayGetOffMe() {
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
index 5f4db917..f1344c69 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
index 59b87e06..d6115123 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
index ee69cb08..f5568184 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
index 1ea1ff88..3e760279 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
index 5411da11..4f54510c 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
index 838a2dcf..bedf258e 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.ButterKnife;
 
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
index 497b9f4c..e643bf65 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
@@ -1,7 +1,7 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
index 354bc4b8..c4dab646 100644
--- a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
@@ -1,14 +1,14 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
 import android.view.View;
+import androidx.annotation.ColorInt;
 import butterknife.BindColor;
 import butterknife.BindView;
 import butterknife.ButterKnife;
 
 public class H extends G {
 
-  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;
   @BindView(android.R.id.button3) View button3;
 
   public H(View view) {
diff --git a/butterknife-integration-test/src/main/proguard.pro b/butterknife-integration-test/src/main/proguard.pro
new file mode 100644
index 00000000..87c34705
--- /dev/null
+++ b/butterknife-integration-test/src/main/proguard.pro
@@ -0,0 +1,22 @@
+-dontoptimize
+-dontobfuscate
+-dontnote **
+-dontwarn **
+
+# STUFF USED BY TESTS:
+
+-keep class butterknife.internal.Utils {
+  <methods>;
+}
+
+-keep class butterknife.Unbinder {
+  void unbind();
+}
+
+-keep class com.example.butterknife.unbinder.H {
+  <init>(...);
+}
+
+-keep class androidx.core.** {
+  <methods>;
+}
diff --git a/butterknife-integration-test/src/test/resources/robolectric.properties b/butterknife-integration-test/src/test/resources/robolectric.properties
deleted file mode 100644
index 135477ad..00000000
--- a/butterknife-integration-test/src/test/resources/robolectric.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-constants=com.example.butterknife.BuildConfig
-sdk=23
diff --git a/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
index 440fbe5d..6d37fec4 100644
--- a/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
+++ b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
@@ -1,6 +1,7 @@
 package butterknife.lint;
 
 import com.android.tools.lint.client.api.IssueRegistry;
+import com.android.tools.lint.detector.api.ApiKt;
 import com.android.tools.lint.detector.api.Issue;
 import com.google.common.collect.ImmutableList;
 import java.util.List;
@@ -13,4 +14,8 @@
   @Override public List<Issue> getIssues() {
     return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
   }
+
+  @Override public int getApi() {
+    return ApiKt.CURRENT_API;
+  }
 }
diff --git a/butterknife-reflect/README.md b/butterknife-reflect/README.md
new file mode 100644
index 00000000..a4f06e8d
--- /dev/null
+++ b/butterknife-reflect/README.md
@@ -0,0 +1,61 @@
+ButterKnife Reflect
+===================
+
+The `butterknife-reflect` artifact is an API-compatible replacement for `butterknife` which uses
+100% reflection to fulfill field and method bindings for use during development.
+
+
+Er, what? Why would I want this?
+--------------------------------
+
+The normal `butterknife` artifact requires the use of `butterknife-compiler` as an annotation
+processor for compile-time validation of your bindings and code generation for runtime performance.
+This is a desirable feature for your CI and release builds, but it slows down iterative development.
+By using `butterknife-reflect` for only your IDE builds, you have one less annotation processor
+sitting between you and your running app. This is especially important for Kotlin-only or
+Java/Kotlin mixed projects using KAPT. And if `butterknife-compiler` is your only annotation
+processor for a module, using `butterknife-reflect` means that **zero** annotation processors run
+during development.
+
+
+Can I use this in production?
+-----------------------------
+
+No.
+
+Well technically you _can_, but don't. It's slow, inefficient, and lacks the level of validation
+that normal Butter Knife usage provides.
+
+
+Usage
+-----
+
+Kotlin modules:
+```groovy
+dependencies {
+  if (properties.containsKey('android.injected.invoked.from.ide')) {
+    implementation 'com.jakewharton:butterknife-reflect:<version>'
+  } else {
+    implementation 'com.jakewharton:butterknife:<version>'
+    kapt 'com.jakewharton:butterknife-compiler:<version>'
+  }
+}
+```
+
+Java modules:
+```groovy
+dependencies {
+  if (properties.containsKey('android.injected.invoked.from.ide')) {
+    implementation 'com.jakewharton:butterknife-reflect:<version>'
+  } else {
+    implementation 'com.jakewharton:butterknife:<version>'
+    annotationProcessor 'com.jakewharton:butterknife-compiler:<version>'
+  }
+}
+```
+
+_(Replacing `<version>` with whatever version you are using.)_
+
+If you have a dedicated variant for development you can skip the `if` check and simply add
+`butterknife-reflect` to that variant and `butterknife`+`butterknife-compiler` for the regular
+variants.
diff --git a/butterknife-reflect/build.gradle b/butterknife-reflect/build.gradle
new file mode 100644
index 00000000..d4d5d941
--- /dev/null
+++ b/butterknife-reflect/build.gradle
@@ -0,0 +1,35 @@
+apply plugin: 'com.android.library'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+
+    consumerProguardFiles 'proguard-rules.txt'
+  }
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':butterknife-runtime')
+  api deps.androidx.viewpager
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-reflect/gradle.properties b/butterknife-reflect/gradle.properties
new file mode 100644
index 00000000..f4fbc045
--- /dev/null
+++ b/butterknife-reflect/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife-reflect
+POM_NAME=ButterKnife Reflect
+POM_PACKAGING=aar
diff --git a/butterknife-reflect/proguard-rules.txt b/butterknife-reflect/proguard-rules.txt
new file mode 100644
index 00000000..977eba49
--- /dev/null
+++ b/butterknife-reflect/proguard-rules.txt
@@ -0,0 +1,2 @@
+-keepclassmembers class * { @butterknife.* <methods>; }
+-keepclassmembers class * { @butterknife.* <fields>; }
diff --git a/butterknife-reflect/src/main/AndroidManifest.xml b/butterknife-reflect/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..3306b63c
--- /dev/null
+++ b/butterknife-reflect/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package="butterknife.reflect"/>
diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
new file mode 100644
index 00000000..fcf3fff5
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -0,0 +1,1208 @@
+package butterknife;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.widget.AdapterView;
+import android.widget.CompoundButton;
+import android.widget.TextView;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.core.content.ContextCompat;
+import androidx.core.content.res.ResourcesCompat;
+import androidx.viewpager.widget.ViewPager;
+import butterknife.internal.Constants;
+import butterknife.internal.Utils;
+import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.Array;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Member;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static java.lang.reflect.Modifier.PRIVATE;
+import static java.lang.reflect.Modifier.PUBLIC;
+import static java.lang.reflect.Modifier.STATIC;
+import static java.util.Collections.singletonList;
+
+public final class ButterKnife {
+  private ButterKnife() {
+    throw new AssertionError();
+  }
+
+  private static final String TAG = "ButterKnife";
+  private static boolean debug = false;
+
+  /** Control whether debug logging is enabled. */
+  public static void setDebug(boolean debug) {
+    ButterKnife.debug = debug;
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
+   * view is used as the view root.
+   *
+   * @param target Target activity for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Activity target) {
+    View sourceView = target.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link View}. The view and its children
+   * are used as the view root.
+   *
+   * @param target Target view for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull View target) {
+    return bind(target, target);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@link Dialog}. The current content
+   * view is used as the view root.
+   *
+   * @param target Target dialog for view binding.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Dialog target) {
+    View sourceView = target.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link Activity} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source Activity on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link Dialog} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source Dialog on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
+  }
+
+  /**
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
+   * {@link View} as the view root.
+   *
+   * @param target Target class for view binding.
+   * @param source View root on which IDs will be looked up.
+   */
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
+    List<Unbinder> unbinders = new ArrayList<>();
+    Class<?> targetClass = target.getClass();
+    if ((targetClass.getModifiers() & PRIVATE) != 0) {
+      throw new IllegalArgumentException(targetClass.getName() + " must not be private.");
+    }
+
+    while (true) {
+      String clsName = targetClass.getName();
+      if (clsName.startsWith("android.") || clsName.startsWith("java.")
+          || clsName.startsWith("androidx.")) {
+        break;
+      }
+
+      for (Field field : targetClass.getDeclaredFields()) {
+        int unbinderStartingSize = unbinders.size();
+        Unbinder unbinder;
+
+        unbinder = parseBindView(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindViews(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindAnim(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindArray(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBitmap(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBool(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindColor(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindDimen(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindDrawable(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindFloat(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindFont(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindInt(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindString(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        if (unbinders.size() - unbinderStartingSize > 1) {
+          throw new IllegalStateException(
+              "More than one bind annotation on " + targetClass.getName() + "." + field.getName());
+        }
+      }
+
+      for (Method method : targetClass.getDeclaredMethods()) {
+        Unbinder unbinder;
+
+        unbinder = parseOnCheckedChanged(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnEditorAction(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnFocusChange(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnItemClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnItemLongClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnLongClick(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnPageChange(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnTextChanged(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseOnTouch(target, method, source);
+        if (unbinder != null) unbinders.add(unbinder);
+      }
+
+      targetClass = targetClass.getSuperclass();
+    }
+
+    if (unbinders.isEmpty()) {
+      if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
+      return Unbinder.EMPTY;
+    }
+
+    if (debug) Log.d(TAG, "HIT: Reflectively found " + unbinders.size() + " bindings.");
+    return new CompositeUnbinder(unbinders);
+  }
+
+  private static @Nullable Unbinder parseBindView(Object target, Field field, View source) {
+    BindView bindView = field.getAnnotation(BindView.class);
+    if (bindView == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindView.value();
+    Class<?> viewClass = field.getType();
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindView fields must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
+    }
+
+    String who = "field '" + field.getName() + "'";
+    Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
+    trySet(field, target, view);
+
+    return new FieldUnbinder(target, field);
+  }
+
+  private static @Nullable Unbinder parseBindViews(Object target, Field field, View source) {
+    BindViews bindViews = field.getAnnotation(BindViews.class);
+    if (bindViews == null) {
+      return null;
+    }
+    validateMember(field);
+
+    Class<?> fieldClass = field.getType();
+    Class<?> viewClass;
+    boolean isArray = fieldClass.isArray();
+    if (isArray) {
+      viewClass = fieldClass.getComponentType();
+    } else if (fieldClass == List.class) {
+      Type fieldType = field.getGenericType();
+      if (fieldType instanceof ParameterizedType) {
+        Type viewType = ((ParameterizedType) fieldType).getActualTypeArguments()[0];
+        // TODO real rawType impl!!!!
+        viewClass = (Class<?>) viewType;
+      } else {
+        throw new IllegalStateException("@BindViews List must have a generic component. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
+      }
+    } else {
+      throw new IllegalStateException("@BindViews must be a List or array. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    if (!View.class.isAssignableFrom(viewClass) && !viewClass.isInterface()) {
+      throw new IllegalStateException(
+          "@BindViews List or array type must extend from View or be an interface. ("
+              + field.getDeclaringClass().getName()
+              + '.'
+              + field.getName()
+              + ')');
+    }
+
+    int[] ids = bindViews.value();
+    if (ids.length == 0) {
+      throw new IllegalStateException("@BindViews must specify at least one ID. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+
+    List<Object> views = new ArrayList<>(ids.length);
+    String who = "field '" + field.getName() + "'";
+    for (int id : ids) {
+      Object view = Utils.findOptionalViewAsType(source, id, who, viewClass);
+      if (view != null) {
+        views.add(view);
+      }
+    }
+
+    Object value;
+    if (isArray) {
+      Object[] viewArray = (Object[]) Array.newInstance(viewClass, views.size());
+      value = views.toArray(viewArray);
+    } else {
+      value = views;
+    }
+
+    trySet(field, target, value);
+    return new FieldUnbinder(target, field);
+  }
+
+  private static @Nullable Unbinder parseBindAnim(Object target, Field field, View source) {
+    BindAnim bindAnim = field.getAnnotation(BindAnim.class);
+    if (bindAnim == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindAnim.value();
+    Context context = source.getContext();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Animation.class) {
+      value = AnimationUtils.loadAnimation(context, id);
+    } else {
+      throw new IllegalStateException("@BindAnim field type must be 'Animation'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindArray(Object target, Field field, View source) {
+    BindArray bindArray = field.getAnnotation(BindArray.class);
+    if (bindArray == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindArray.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == TypedArray.class) {
+      value = resources.obtainTypedArray(id);
+    } else if (fieldType.isArray()) {
+      Class<?> componentType = fieldType.getComponentType();
+      if (componentType == String.class) {
+        value = resources.getStringArray(id);
+      } else if (componentType == int.class) {
+        value = resources.getIntArray(id);
+      } else if (componentType == CharSequence.class) {
+        value = resources.getTextArray(id);
+      } else {
+        throw new IllegalStateException("@BindArray field type must be one of: "
+            + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+            + field.getDeclaringClass().getName()
+            + '.'
+            + field.getName()
+            + ')');
+      }
+    } else {
+      throw new IllegalStateException("@BindArray field type must be one of: "
+          + "String[], int[], CharSequence[], android.content.res.TypedArray. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBitmap(Object target, Field field, View source) {
+    BindBitmap bindBitmap = field.getAnnotation(BindBitmap.class);
+    if (bindBitmap == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBitmap.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Bitmap.class) {
+      value = BitmapFactory.decodeResource(resources, id);
+    } else {
+      throw new IllegalStateException("@BindBitmap field type must be 'Bitmap'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBool(Object target, Field field, View source) {
+    BindBool bindBool = field.getAnnotation(BindBool.class);
+    if (bindBool == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBool.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == boolean.class) {
+      value = resources.getBoolean(id);
+    } else {
+      throw new IllegalStateException("@BindBool field type must be 'boolean'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindColor(Object target, Field field, View source) {
+    BindColor bindColor = field.getAnnotation(BindColor.class);
+    if (bindColor == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindColor.value();
+    Context context = source.getContext();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == int.class) {
+      value = ContextCompat.getColor(context, id);
+    } else if (fieldType == ColorStateList.class) {
+      value = ContextCompat.getColorStateList(context, id);
+    } else {
+      throw new IllegalStateException("@BindColor field type must be 'int' or 'ColorStateList'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindDimen(Object target, Field field, View source) {
+    BindDimen bindDimen = field.getAnnotation(BindDimen.class);
+    if (bindDimen == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindDimen.value();
+    Resources resources = source.getContext().getResources();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == int.class) {
+      value = resources.getDimensionPixelSize(id);
+    } else if (fieldType == float.class) {
+      value = resources.getDimension(id);
+    } else {
+      throw new IllegalStateException("@BindDimen field type must be 'int' or 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindDrawable(Object target, Field field, View source) {
+    BindDrawable bindDrawable = field.getAnnotation(BindDrawable.class);
+    if (bindDrawable == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindDrawable.value();
+    int tint = bindDrawable.tint();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == Drawable.class) {
+      value = tint != Constants.NO_RES_ID
+          ? Utils.getTintedDrawable(context, id, tint)
+          : ContextCompat.getDrawable(context, id);
+    } else {
+      throw new IllegalStateException("@BindDrawable field type must be 'Drawable'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindFloat(Object target, Field field, View source) {
+    BindFloat bindInt = field.getAnnotation(BindFloat.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == float.class) {
+      value = Utils.getFloat(context, id);
+    } else {
+      throw new IllegalStateException("@BindFloat field type must be 'float'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindFont(Object target, Field field, View source) {
+    BindFont bindFont = field.getAnnotation(BindFont.class);
+    if (bindFont == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindFont.value();
+    int style = bindFont.style();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == Typeface.class) {
+      Typeface font = ResourcesCompat.getFont(context, id);
+      switch (style) {
+        case Typeface.NORMAL:
+          value = font;
+          break;
+        case Typeface.BOLD:
+        case Typeface.ITALIC:
+        case Typeface.BOLD_ITALIC:
+          value = Typeface.create(font, style);
+          break;
+        default:
+          throw new IllegalStateException(
+              "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. ("
+                  + field.getDeclaringClass().getName()
+                  + '.'
+                  + field.getName()
+                  + ')');
+      }
+    } else {
+      throw new IllegalStateException("@BindFont field type must be 'Typeface'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindInt(Object target, Field field, View source) {
+    BindInt bindInt = field.getAnnotation(BindInt.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Resources resources = source.getContext().getResources();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == int.class) {
+      value = resources.getInteger(id);
+    } else {
+      throw new IllegalStateException("@BindInt field type must be 'int'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindString(Object target, Field field, View source) {
+    BindString bindString = field.getAnnotation(BindString.class);
+    if (bindString == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindString.value();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == String.class) {
+      value = context.getString(id);
+    } else {
+      throw new IllegalStateException("@BindString field type must be 'String'. ("
+          + field.getDeclaringClass().getName()
+          + '.'
+          + field.getName()
+          + ')');
+    }
+    trySet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseOnCheckedChanged(final Object target, final Method method,
+      View source) {
+    OnCheckedChanged onCheckedChanged = method.getAnnotation(OnCheckedChanged.class);
+    if (onCheckedChanged == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_CHECKED_CHANGED_TYPES);
+
+    List<CompoundButton> views =
+        findViews(source, onCheckedChanged.value(), isRequired(method), method.getName(),
+            CompoundButton.class);
+
+    ViewCollections.set(views, ON_CHECKED_CHANGE,
+        (buttonView, isChecked) -> tryInvoke(method, target,
+            argumentTransformer.transform(buttonView, isChecked)));
+
+    return new ListenerUnbinder<>(views, ON_CHECKED_CHANGE);
+  }
+
+  private static @Nullable Unbinder parseOnClick(final Object target, final Method method,
+      View source) {
+    OnClick onClick = method.getAnnotation(OnClick.class);
+    if (onClick == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_CLICK_TYPES);
+
+    List<View> views =
+        findViews(source, onClick.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_CLICK,
+        v -> tryInvoke(method, target, argumentTransformer.transform(v)));
+
+    return new ListenerUnbinder<>(views, ON_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnEditorAction(final Object target, final Method method,
+      View source) {
+    OnEditorAction onEditorAction = method.getAnnotation(OnEditorAction.class);
+    if (onEditorAction == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_EDITOR_ACTION_TYPES);
+
+    List<TextView> views =
+        findViews(source, onEditorAction.value(), isRequired(method), method.getName(),
+            TextView.class);
+
+    ViewCollections.set(views, ON_EDITOR_ACTION, (v, actionId, event) -> {
+      Object value = tryInvoke(method, target, argumentTransformer.transform(v, actionId, event));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : true;
+    });
+
+    return new ListenerUnbinder<>(views, ON_EDITOR_ACTION);
+  }
+
+  private static @Nullable Unbinder parseOnFocusChange(final Object target, final Method method,
+      View source) {
+    OnFocusChange onFocusChange = method.getAnnotation(OnFocusChange.class);
+    if (onFocusChange == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_FOCUS_CHANGE_TYPES);
+
+    List<View> views =
+        findViews(source, onFocusChange.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_FOCUS_CHANGE,
+        (v, hasFocus) -> tryInvoke(method, target, argumentTransformer.transform(v, hasFocus)));
+
+    return new ListenerUnbinder<>(views, ON_FOCUS_CHANGE);
+  }
+
+  private static @Nullable Unbinder parseOnItemClick(final Object target, final Method method,
+      View source) {
+    OnItemClick onItemClick = method.getAnnotation(OnItemClick.class);
+    if (onItemClick == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_ITEM_CLICK_TYPES);
+
+    List<AdapterView<?>> views =
+        findViews(source, onItemClick.value(), isRequired(method), method.getName(),
+            AdapterView.class);
+
+    ViewCollections.set(views, ON_ITEM_CLICK,
+        (parent, view, position, id) -> tryInvoke(method, target,
+            argumentTransformer.transform(parent, view, position, id)));
+
+    return new ListenerUnbinder<>(views, ON_ITEM_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnItemLongClick(final Object target, final Method method,
+      View source) {
+    OnItemLongClick onItemLongClick = method.getAnnotation(OnItemLongClick.class);
+    if (onItemLongClick == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_ITEM_LONG_CLICK_TYPES);
+
+    List<AdapterView<?>> views =
+        findViews(source, onItemLongClick.value(), isRequired(method), method.getName(),
+            AdapterView.class);
+
+    ViewCollections.set(views, ON_ITEM_LONG_CLICK, (parent, view, position, id) -> {
+      Object value =
+          tryInvoke(method, target, argumentTransformer.transform(parent, view, position, id));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) value
+          : true;
+    });
+
+    return new ListenerUnbinder<>(views, ON_ITEM_LONG_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnLongClick(final Object target, final Method method,
+      View source) {
+    OnLongClick onLongClick = method.getAnnotation(OnLongClick.class);
+    if (onLongClick == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_LONG_CLICK_TYPES);
+
+    List<View> views =
+        findViews(source, onLongClick.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_LONG_CLICK, v -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : true;
+    });
+
+    return new ListenerUnbinder<>(views, ON_LONG_CLICK);
+  }
+
+  private static @Nullable Unbinder parseOnPageChange(final Object target, final Method method,
+      View source) {
+    OnPageChange onPageChange = method.getAnnotation(OnPageChange.class);
+    if (onPageChange == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+
+    List<ViewPager> views =
+        findViews(source, onPageChange.value(), isRequired(method), method.getName(),
+            ViewPager.class);
+
+    ViewPager.OnPageChangeListener listener;
+    switch (onPageChange.callback()) {
+      case PAGE_SCROLLED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SCROLLED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageScrolled(int position, float positionOffset,
+              int positionOffsetPixels) {
+            tryInvoke(method, target,
+                argumentTransformer.transform(position, positionOffset, positionOffsetPixels));
+          }
+        };
+        break;
+      }
+      case PAGE_SELECTED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SELECTED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageSelected(int position) {
+            tryInvoke(method, target, argumentTransformer.transform(position));
+          }
+        };
+        break;
+      }
+      case PAGE_SCROLL_STATE_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_PAGE_SCROLL_STATE_CHANGED_TYPES);
+        listener = new ViewPager.SimpleOnPageChangeListener() {
+          @Override public void onPageScrollStateChanged(int state) {
+            tryInvoke(method, target, argumentTransformer.transform(state));
+          }
+        };
+        break;
+      }
+      default:
+        throw new AssertionError();
+    }
+
+    ViewCollections.set(views, ADD_ON_PAGE_CHANGE, listener);
+    return new ListenerUnbinder<>(views, REMOVE_ON_PAGE_CHANGE, listener);
+  }
+
+  private static @Nullable Unbinder parseOnTextChanged(Object target, Method method, View source) {
+    OnTextChanged onTextChanged = method.getAnnotation(OnTextChanged.class);
+    if (onTextChanged == null) {
+      return null;
+    }
+    validateMember(method);
+    validateReturnType(method, void.class);
+
+    List<TextView> views =
+        findViews(source, onTextChanged.value(), isRequired(method), method.getName(), View.class);
+
+    TextWatcher textWatcher;
+    switch (onTextChanged.callback()) {
+      case TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, ON_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, before, count));
+          }
+        };
+        break;
+      }
+      case BEFORE_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, BEFORE_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            tryInvoke(method, target, argumentTransformer.transform(s, start, count, after));
+          }
+        };
+        break;
+      }
+      case AFTER_TEXT_CHANGED: {
+        ArgumentTransformer argumentTransformer =
+            createArgumentTransformer(method, AFTER_TEXT_CHANGED_TYPES);
+        textWatcher = new EmptyTextWatcher() {
+          @Override public void afterTextChanged(Editable s) {
+            tryInvoke(method, target, argumentTransformer.transform(s));
+          }
+        };
+        break;
+      }
+      default:
+        throw new AssertionError();
+    }
+
+    ViewCollections.set(views, ADD_TEXT_WATCHER, textWatcher);
+    return new ListenerUnbinder<>(views, REMOVE_TEXT_WATCHER, textWatcher);
+  }
+
+  private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,
+      View source) {
+    OnTouch onTouch = method.getAnnotation(OnTouch.class);
+    if (onTouch == null) {
+      return null;
+    }
+    validateMember(method);
+    final boolean propagateReturn = validateReturnType(method, boolean.class);
+    final ArgumentTransformer argumentTransformer =
+        createArgumentTransformer(method, ON_TOUCH_TYPES);
+
+    List<View> views =
+        findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);
+
+    ViewCollections.set(views, ON_TOUCH, (v, event) -> {
+      Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));
+      //noinspection SimplifiableConditionalExpression
+      return propagateReturn
+          ? (boolean) returnValue
+          : true;
+    });
+
+    return new ListenerUnbinder<>(views, ON_TOUCH);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T extends View> List<T> findViews(View source, int[] ids, boolean isRequired,
+      String name, Class<? extends View> cls) {
+    if (ids.length == 1 && ids[0] == View.NO_ID) {
+      return singletonList((T) cls.cast(source));
+    }
+
+    String who = "method '" + name + "'";
+    List<T> views = new ArrayList<>(ids.length);
+    for (int id : ids) {
+      if (isRequired) {
+        views.add((T) Utils.findRequiredViewAsType(source, id, who, cls));
+      } else {
+        T view = (T) Utils.findOptionalViewAsType(source, id, who, cls);
+        if (view != null) {
+          views.add(view);
+        }
+      }
+    }
+    return views;
+  }
+
+  private static <T extends AccessibleObject & Member> void validateMember(T object) {
+    int modifiers = object.getModifiers();
+    if ((modifiers & (PRIVATE | STATIC)) != 0) {
+      throw new IllegalStateException(object.getDeclaringClass().getName()
+          + "."
+          + object.getName()
+          + " must not be private or static");
+    }
+    if ((modifiers & PUBLIC) == 0) {
+      object.setAccessible(true);
+    }
+  }
+
+  /** Returns true when the return value should be propagated. Use a default otherwise. */
+  private static boolean validateReturnType(Method method, Class<?> expected) {
+    Class<?> returnType = method.getReturnType();
+    if (returnType == void.class) {
+      return false;
+    }
+    if (returnType != expected) {
+      String expectedType = "'" + expected.getName() + "'";
+      if (expected != void.class) {
+        expectedType = "'void' or " + expectedType;
+      }
+      throw new IllegalStateException(method.getDeclaringClass().getName()
+          + "."
+          + method.getName()
+          + " must have return type of "
+          + expectedType);
+    }
+    return true;
+  }
+
+  private static boolean isRequired(Method method) {
+    return method.getAnnotation(Optional.class) == null;
+  }
+
+  private static ArgumentTransformer createArgumentTransformer(Method method,
+      Class<?>[] callbackParameterTypes) {
+    Class<?>[] targetParameterTypes = method.getParameterTypes();
+
+    int targetParameterLength = targetParameterTypes.length;
+    if (targetParameterLength == 0) {
+      // Special case the common case of no arguments.
+      return ArgumentTransformer.EMPTY;
+    }
+
+    int callbackParameterLength = callbackParameterTypes.length;
+    if (targetParameterLength > callbackParameterLength) {
+      throw new IllegalStateException(method.getDeclaringClass().getName()
+          + "."
+          + method.getName()
+          + " must have at most "
+          + callbackParameterLength
+          + " parameter(s).");
+    }
+
+    if (Arrays.equals(targetParameterTypes, callbackParameterTypes)) {
+      // Special case the common case of exact argument match.
+      return ArgumentTransformer.IDENTITY;
+    }
+
+    boolean[] callbackIndexUsed = new boolean[callbackParameterLength];
+    final int[] indexMap = new int[targetParameterLength];
+    nextTarget: for (int targetIndex = 0; targetIndex < targetParameterLength; targetIndex++) {
+      Class<?> targetParameterType = targetParameterTypes[targetIndex];
+      for (int callbackIndex = 0; callbackIndex < callbackParameterLength; callbackIndex++) {
+        if (callbackIndexUsed[callbackIndex]) {
+          continue; // We have already used this callback argument.
+        }
+        Class<?> callbackParameterType = callbackParameterTypes[callbackIndex];
+
+        if (/* exact match */
+            callbackParameterType.equals(targetParameterType)
+            /* or subtype of view */
+            || (View.class.isAssignableFrom(callbackParameterType)
+                && callbackParameterType.isAssignableFrom(targetParameterType))
+            /* or interface (like Checkable) */
+            || targetParameterType.isInterface()) {
+          indexMap[targetIndex] = callbackIndex;
+          callbackIndexUsed[callbackIndex] = true;
+          continue nextTarget; // This avoids the error handling code if loop exits normally.
+        }
+      }
+
+      StringBuilder builder = new StringBuilder();
+      builder.append("Unable to match ")
+          .append(method.getDeclaringClass().getName())
+          .append('.')
+          .append(method.getName())
+          .append(" method arguments.");
+      for (int i = 0; i < targetParameterLength; i++) {
+        builder.append("\n\n  Parameter #")
+            .append(i + 1)
+            .append(": ")
+            .append(targetParameterTypes[i].getName())
+            .append("\n    ");
+        if (i < targetIndex) {
+          builder.append("matched listener parameter #")
+              .append(indexMap[i])
+              .append(": ")
+              .append(callbackParameterTypes[indexMap[i]].getName());
+        } else {
+          builder.append("did not match any listener parameters");
+        }
+      }
+      builder.append("\n\nMethods may have up to ")
+          .append(callbackParameterLength)
+          .append(" parameter(s):\n");
+      for (Class<?> callbackParameter : callbackParameterTypes) {
+        builder.append("\n  ").append(callbackParameter.getName());
+      }
+      builder.append(
+          "\n\nThese may be listed in any order but will be searched for from top to bottom.");
+      throw new IllegalStateException(builder.toString());
+    }
+
+    return new ArgumentTransformer() {
+      @Override public Object[] transform(Object... arguments) {
+        Object[] newArguments = new Object[indexMap.length];
+        for (int i = 0; i < indexMap.length; i++) {
+          newArguments[i] = arguments[indexMap[i]];
+        }
+        return newArguments;
+      }
+
+      @Override public String toString() {
+        StringBuilder builder = new StringBuilder("ArgumentTransformer[");
+        for (int i = 0; i < indexMap.length; i++) {
+          if (i > 0) {
+            builder.append(", ");
+          }
+          builder.append(i).append(" => ").append(indexMap[i]);
+        }
+        return builder.append(']').toString();
+      }
+    };
+  }
+
+  static void trySet(Field field, Object target, @Nullable Object value) {
+    try {
+      field.set(target, value);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException("Unable to assign " + value + " to " + field + " on " + target, e);
+    }
+  }
+
+  private static Object tryInvoke(Method method, Object target, Object... arguments) {
+    Throwable cause;
+    try {
+      return method.invoke(target, arguments);
+    } catch (IllegalAccessException e) {
+      cause = e;
+    } catch (InvocationTargetException e) {
+      cause = e;
+    }
+    throw new RuntimeException(
+        "Unable to invoke " + method + " on " + target + " with arguments "
+            + Arrays.toString(arguments), cause);
+  }
+
+  private static final Setter<CompoundButton, CompoundButton.OnCheckedChangeListener>
+      ON_CHECKED_CHANGE = (view, value, index) -> view.setOnCheckedChangeListener(value);
+  private static final Setter<View, View.OnClickListener> ON_CLICK =
+      (view, value, index) -> view.setOnClickListener(value);
+  private static final Setter<TextView, TextView.OnEditorActionListener> ON_EDITOR_ACTION =
+      (view, value, index) -> view.setOnEditorActionListener(value);
+  private static final Setter<View, View.OnFocusChangeListener> ON_FOCUS_CHANGE =
+      (view, value, index) -> view.setOnFocusChangeListener(value);
+  private static final Setter<AdapterView<?>, AdapterView.OnItemClickListener> ON_ITEM_CLICK =
+      (view, value, index) -> view.setOnItemClickListener(value);
+  private static final Setter<AdapterView<?>, AdapterView.OnItemLongClickListener>
+      ON_ITEM_LONG_CLICK = (view, value, index) -> view.setOnItemLongClickListener(value);
+  private static final Setter<View, View.OnLongClickListener> ON_LONG_CLICK =
+      (view, value, index) -> view.setOnLongClickListener(value);
+  private static final Setter<View, View.OnTouchListener> ON_TOUCH =
+      (view, value, index) -> view.setOnTouchListener(value);
+  private static final Setter<ViewPager, ViewPager.OnPageChangeListener> ADD_ON_PAGE_CHANGE =
+      (view, value, index) -> view.addOnPageChangeListener(value);
+  private static final Setter<ViewPager, ViewPager.OnPageChangeListener> REMOVE_ON_PAGE_CHANGE =
+      (view, value, index) -> view.removeOnPageChangeListener(value);
+  private static final Setter<TextView, TextWatcher> ADD_TEXT_WATCHER =
+      (view, value, index) -> view.addTextChangedListener(value);
+  private static final Setter<TextView, TextWatcher> REMOVE_TEXT_WATCHER =
+      (view, value, index) -> view.removeTextChangedListener(value);
+
+  private static final Class<?>[] ON_CHECKED_CHANGED_TYPES =
+      { CompoundButton.class, boolean.class };
+  private static final Class<?>[] ON_CLICK_TYPES = { View.class };
+  private static final Class<?>[] ON_EDITOR_ACTION_TYPES =
+      { TextView.class, int.class, KeyEvent.class };
+  private static final Class<?>[] ON_FOCUS_CHANGE_TYPES = { View.class, boolean.class };
+  private static final Class<?>[] ON_ITEM_CLICK_TYPES =
+      { AdapterView.class, View.class, int.class, long.class };
+  private static final Class<?>[] ON_ITEM_LONG_CLICK_TYPES = ON_ITEM_CLICK_TYPES;
+  private static final Class<?>[] ON_LONG_CLICK_TYPES = ON_CLICK_TYPES;
+  private static final Class<?>[] ON_PAGE_SCROLLED_TYPES = { int.class, float.class, int.class };
+  private static final Class<?>[] ON_PAGE_SELECTED_TYPES = { int.class };
+  private static final Class<?>[] ON_PAGE_SCROLL_STATE_CHANGED_TYPES = { int.class };
+  private static final Class<?>[] ON_TEXT_CHANGED_TYPES =
+      { CharSequence.class, int.class, int.class, int.class };
+  private static final Class<?>[] BEFORE_TEXT_CHANGED_TYPES = ON_TEXT_CHANGED_TYPES;
+  private static final Class<?>[] AFTER_TEXT_CHANGED_TYPES = { Editable.class };
+  private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };
+
+  private interface ArgumentTransformer {
+    ArgumentTransformer EMPTY = new ArgumentTransformer() {
+      private final Object[] empty = new Object[0];
+
+      @Override public Object[] transform(Object... arguments) {
+        return empty;
+      }
+
+      @Override public String toString() {
+        return "ArgumentTransformer[empty]";
+      }
+    };
+    ArgumentTransformer IDENTITY = new ArgumentTransformer() {
+      @Override public Object[] transform(Object... arguments) {
+        return arguments;
+      }
+
+      @Override public String toString() {
+        return "ArgumentTransformer[identity]";
+      }
+    };
+
+    Object[] transform(Object... arguments);
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
new file mode 100644
index 00000000..5e5adb47
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java
@@ -0,0 +1,23 @@
+package butterknife;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import java.util.List;
+
+final class CompositeUnbinder implements Unbinder {
+  private @Nullable List<Unbinder> unbinders;
+
+  CompositeUnbinder(@NonNull List<Unbinder> unbinders) {
+    this.unbinders = unbinders;
+  }
+
+  @Override public void unbind() {
+    if (unbinders == null) {
+      throw new IllegalStateException("Bindings already cleared.");
+    }
+    for (Unbinder unbinder : unbinders) {
+      unbinder.unbind();
+    }
+    unbinders = null;
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
new file mode 100644
index 00000000..3b578dee
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java
@@ -0,0 +1,15 @@
+package butterknife;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+
+class EmptyTextWatcher implements TextWatcher {
+  @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+  }
+
+  @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
+  }
+
+  @Override public void afterTextChanged(Editable s) {
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java b/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java
new file mode 100644
index 00000000..915c567a
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java
@@ -0,0 +1,19 @@
+package butterknife;
+
+import java.lang.reflect.Field;
+
+import static butterknife.ButterKnife.trySet;
+
+final class FieldUnbinder implements Unbinder {
+  private final Object target;
+  private final Field field;
+
+  FieldUnbinder(Object target, Field field) {
+    this.target = target;
+    this.field = field;
+  }
+
+  @Override public void unbind() {
+    trySet(field, target, null);
+  }
+}
diff --git a/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
new file mode 100644
index 00000000..063f294d
--- /dev/null
+++ b/butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java
@@ -0,0 +1,26 @@
+package butterknife;
+
+import android.view.View;
+import java.util.List;
+
+final class ListenerUnbinder<V extends View, L> implements Unbinder {
+  private final List<V> targets;
+  private final Setter<V, L> setter;
+  private final L listener;
+
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter) {
+    this.targets = targets;
+    this.setter = setter;
+    this.listener = null;
+  }
+
+  ListenerUnbinder(List<V> targets, Setter<V, L> setter, L listener) {
+    this.targets = targets;
+    this.setter = setter;
+    this.listener = listener;
+  }
+
+  @Override public void unbind() {
+    ViewCollections.set(targets, setter, listener);
+  }
+}
diff --git a/butterknife-runtime/build.gradle b/butterknife-runtime/build.gradle
new file mode 100644
index 00000000..02944b05
--- /dev/null
+++ b/butterknife-runtime/build.gradle
@@ -0,0 +1,70 @@
+apply plugin: 'com.android.library'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
+
+    javaCompileOptions {
+      annotationProcessorOptions {
+        includeCompileClasspath = true
+      }
+    }
+  }
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
+  }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
+}
+
+dependencies {
+  api project(':butterknife-annotations')
+  api deps.androidx.core
+
+  lintChecks project(':butterknife-lint')
+
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.androidx.test.runner
+  androidTestAnnotationProcessor project(':butterknife-compiler')
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.compiletesting
+  testImplementation files(getRuntimeJar())
+  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation project(':butterknife-compiler')
+  testImplementation deps.androidx.annotations
+}
+
+def getRuntimeJar() {
+  try {
+    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
+    File runtimeJar = new File(javaBase, "lib/rt.jar");
+    if (runtimeJar.exists()) {
+      return runtimeJar;
+    }
+    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
+    return runtimeJar.exists() ? runtimeJar : null;
+  } catch (IOException e) {
+    throw new RuntimeException(e);
+  }
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-runtime/gradle.properties b/butterknife-runtime/gradle.properties
new file mode 100644
index 00000000..db9751f9
--- /dev/null
+++ b/butterknife-runtime/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=butterknife-runtime
+POM_NAME=ButterKnife Runtime
+POM_PACKAGING=aar
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
new file mode 100644
index 00000000..4694c3f9
--- /dev/null
+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java
@@ -0,0 +1,206 @@
+package butterknife;
+
+import android.content.Context;
+import android.util.Property;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
+import java.util.List;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
+
+public class ViewCollectionsTest {
+  private static final Property<View, Boolean> PROPERTY_ENABLED =
+      new Property<View, Boolean>(Boolean.class, "enabled") {
+        @Override public Boolean get(View view) {
+          return view.isEnabled();
+        }
+
+        @Override public void set(View view, Boolean enabled) {
+          view.setEnabled(enabled);
+        }
+      };
+  private static final Setter<View, Boolean> SETTER_ENABLED =
+      (view, value, index) -> view.setEnabled(value);
+  private static final Action<View> ACTION_DISABLE = (view, index) -> view.setEnabled(false);
+  private static final Action<View> ACTION_ZERO_ALPHA = (view, index) -> view.setAlpha(0f);
+
+  private final Context context = InstrumentationRegistry.getContext();
+
+  @Test public void propertyAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.set(view, PROPERTY_ENABLED, false);
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.set(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void propertyAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.set(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.run(view, ACTION_DISABLE);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+    assertThat(view.getAlpha()).isEqualTo(1f);
+
+    ViewCollections.run(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+    assertThat(view.isEnabled()).isFalse();
+    assertThat(view.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.run(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.run(views, ACTION_DISABLE);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void actionsAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.run(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void actionsAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+    assertThat(view1.getAlpha()).isEqualTo(1f);
+    assertThat(view2.getAlpha()).isEqualTo(1f);
+    assertThat(view3.getAlpha()).isEqualTo(1f);
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.run(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+    assertThat(view1.getAlpha()).isEqualTo(0f);
+    assertThat(view2.getAlpha()).isEqualTo(0f);
+    assertThat(view3.getAlpha()).isEqualTo(0f);
+  }
+
+  @Test public void setterAppliedToView() {
+    View view = new View(context);
+    assertThat(view.isEnabled()).isTrue();
+
+    ViewCollections.set(view, SETTER_ENABLED, false);
+
+    assertThat(view.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInList() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    List<View> views = asList(view1, view2, view3);
+    ViewCollections.set(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+
+  @Test public void setterAppliedToEveryViewInArray() {
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
+    assertThat(view1.isEnabled()).isTrue();
+    assertThat(view2.isEnabled()).isTrue();
+    assertThat(view3.isEnabled()).isTrue();
+
+    View[] views = new View[] { view1, view2, view3 };
+    ViewCollections.set(views, SETTER_ENABLED, false);
+
+    assertThat(view1.isEnabled()).isFalse();
+    assertThat(view2.isEnabled()).isFalse();
+    assertThat(view3.isEnabled()).isFalse();
+  }
+}
diff --git a/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
new file mode 100644
index 00000000..2470e710
--- /dev/null
+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -0,0 +1,47 @@
+package butterknife.internal;
+
+import android.content.Context;
+import android.view.View;
+import androidx.test.InstrumentationRegistry;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class UtilsTest {
+  @Test public void finderThrowsNiceError() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new View(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view 'button1' with ID "
+          + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new EditModeView(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  static final class EditModeView extends View {
+    EditModeView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean isInEditMode() {
+      return true;
+    }
+  }
+}
diff --git a/butterknife-runtime/src/main/AndroidManifest.xml b/butterknife-runtime/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..e116347b
--- /dev/null
+++ b/butterknife-runtime/src/main/AndroidManifest.xml
@@ -0,0 +1,2 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="butterknife.runtime"/>
diff --git a/butterknife-runtime/src/main/java/butterknife/Action.java b/butterknife-runtime/src/main/java/butterknife/Action.java
new file mode 100644
index 00000000..596f3572
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/Action.java
@@ -0,0 +1,11 @@
+package butterknife;
+
+import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.UiThread;
+
+/** An action that can be applied to a list of views. */
+public interface Action<T extends View> {
+  /** Apply the action on the {@code view} which is at {@code index} in the list. */
+  @UiThread void apply(@NonNull T view, int index);
+}
diff --git a/butterknife-runtime/src/main/java/butterknife/Setter.java b/butterknife-runtime/src/main/java/butterknife/Setter.java
new file mode 100644
index 00000000..abecb72f
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/Setter.java
@@ -0,0 +1,12 @@
+package butterknife;
+
+import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+
+/** A setter that can apply a value to a list of views. */
+public interface Setter<T extends View, V> {
+  /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
+  @UiThread void set(@NonNull T view, @Nullable V value, int index);
+}
diff --git a/butterknife/src/main/java/butterknife/Unbinder.java b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
similarity index 53%
rename from butterknife/src/main/java/butterknife/Unbinder.java
rename to butterknife-runtime/src/main/java/butterknife/Unbinder.java
index ce27c3e9..0b477534 100644
--- a/butterknife/src/main/java/butterknife/Unbinder.java
+++ b/butterknife-runtime/src/main/java/butterknife/Unbinder.java
@@ -1,12 +1,10 @@
 package butterknife;
 
-import android.support.annotation.UiThread;
+import androidx.annotation.UiThread;
 
 /** An unbinder contract that will unbind views when called. */
 public interface Unbinder {
   @UiThread void unbind();
 
-  Unbinder EMPTY = new Unbinder() {
-    @Override public void unbind() { }
-  };
+  Unbinder EMPTY = () -> { };
 }
diff --git a/butterknife-runtime/src/main/java/butterknife/ViewCollections.java b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
new file mode 100644
index 00000000..9a4c1cf8
--- /dev/null
+++ b/butterknife-runtime/src/main/java/butterknife/ViewCollections.java
@@ -0,0 +1,124 @@
+package butterknife;
+
+import android.util.Property;
+import android.view.View;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import java.util.List;
+
+/** Convenience methods for working with view collections. */
+public final class ViewCollections {
+  /** Apply the specified {@code actions} across the {@code list} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull List<T> list,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(list.get(i), i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code actions} across the {@code array} of views. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull T[] array,
+      @NonNull Action<? super T>... actions) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      for (Action<? super T> action : actions) {
+        action.apply(array[i], i);
+      }
+    }
+  }
+
+  /** Apply the specified {@code action} across the {@code list} of views. */
+  @UiThread
+  public static <T extends View> void run(@NonNull List<T> list,
+      @NonNull Action<? super T> action) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      action.apply(list.get(i), i);
+    }
+  }
+
+  /** Apply the specified {@code action} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View> void run(@NonNull T[] array, @NonNull Action<? super T> action) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      action.apply(array[i], i);
+    }
+  }
+
+  /** Apply {@code actions} to {@code view}. */
+  @UiThread
+  @SafeVarargs public static <T extends View> void run(@NonNull T view,
+      @NonNull Action<? super T>... actions) {
+    for (Action<? super T> action : actions) {
+      action.apply(view, 0);
+    }
+  }
+
+  /** Apply {@code action} to {@code view}. */
+  @UiThread
+  public static <T extends View> void run(@NonNull T view, @NonNull Action<? super T> action) {
+    action.apply(view, 0);
+  }
+
+  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull List<T> list,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    for (int i = 0, count = list.size(); i < count; i++) {
+      setter.set(list.get(i), value, i);
+    }
+  }
+
+  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T[] array,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value, i);
+    }
+  }
+
+  /** Set {@code value} on {@code view} using {@code setter}. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T view,
+      @NonNull Setter<? super T, V> setter, @Nullable V value) {
+    setter.set(view, value, 0);
+  }
+
+  /**
+   * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
+   */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull List<T> list,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = list.size(); i < count; i++) {
+      setter.set(list.get(i), value);
+    }
+  }
+
+  /**
+   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
+   */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T[] array,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    //noinspection ForLoopReplaceableByForEach
+    for (int i = 0, count = array.length; i < count; i++) {
+      setter.set(array[i], value);
+    }
+  }
+
+  /** Apply {@code value} to {@code view} using {@code property}. */
+  @UiThread
+  public static <T extends View, V> void set(@NonNull T view,
+      @NonNull Property<? super T, V> setter, @Nullable V value) {
+    setter.set(view, value);
+  }
+
+  private ViewCollections() {
+  }
+}
diff --git a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
similarity index 80%
rename from butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
rename to butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
index f936ff6f..b1de399e 100644
--- a/butterknife/src/main/java/butterknife/internal/DebouncingOnClickListener.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java
@@ -9,11 +9,7 @@
 public abstract class DebouncingOnClickListener implements View.OnClickListener {
   static boolean enabled = true;
 
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
+  private static final Runnable ENABLE_AGAIN = () -> enabled = true;
 
   @Override public final void onClick(View v) {
     if (enabled) {
diff --git a/butterknife/src/main/java/butterknife/internal/ImmutableList.java b/butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
similarity index 100%
rename from butterknife/src/main/java/butterknife/internal/ImmutableList.java
rename to butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
similarity index 82%
rename from butterknife/src/main/java/butterknife/internal/Utils.java
rename to butterknife-runtime/src/main/java/butterknife/internal/Utils.java
index e9101f74..9032ad76 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife-runtime/src/main/java/butterknife/internal/Utils.java
@@ -3,16 +3,16 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
-import android.support.annotation.AttrRes;
-import android.support.annotation.DimenRes;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.IdRes;
-import android.support.annotation.UiThread;
-import android.support.v4.content.ContextCompat;
-import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
 import android.view.View;
-import java.lang.reflect.Array;
+import androidx.annotation.AttrRes;
+import androidx.annotation.DimenRes;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.IdRes;
+import androidx.annotation.UiThread;
+import androidx.core.content.ContextCompat;
+import androidx.core.graphics.drawable.DrawableCompat;
+import java.util.Arrays;
 import java.util.List;
 
 @SuppressWarnings("WeakerAccess") // Used by generated code.
@@ -50,16 +50,7 @@ public static float getFloat(Context context, @DimenRes int id) {
   }
 
   @SafeVarargs
-  public static <T> T[] arrayOf(T... views) {
-    return filterNull(views);
-  }
-
-  @SafeVarargs
-  public static <T> List<T> listOf(T... views) {
-    return new ImmutableList<>(filterNull(views));
-  }
-
-  private static <T> T[] filterNull(T[] views) {
+  public static <T> T[] arrayFilteringNull(T... views) {
     int end = 0;
     int length = views.length;
     for (int i = 0; i < length; i++) {
@@ -68,13 +59,14 @@ public static float getFloat(Context context, @DimenRes int id) {
         views[end++] = view;
       }
     }
-    if (end == length) {
-      return views;
-    }
-    //noinspection unchecked
-    T[] newViews = (T[]) Array.newInstance(views.getClass().getComponentType(), end);
-    System.arraycopy(views, 0, newViews, 0, end);
-    return newViews;
+    return end == length
+        ? views
+        : Arrays.copyOfRange(views, 0, end);
+  }
+
+  @SafeVarargs
+  public static <T> List<T> listFilteringNull(T... views) {
+    return new ImmutableList<>(arrayFilteringNull(views));
   }
 
   public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
diff --git a/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
new file mode 100644
index 00000000..34e4a776
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/BindAnimTest.java
@@ -0,0 +1,30 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindAnimTest {
+  @Test public void typeMustBeAnimation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindAnim field type must be 'Animation'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
similarity index 96%
rename from butterknife/src/test/java/butterknife/BindArrayTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
index fb228829..36eec904 100644
--- a/butterknife/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindArrayTest.java
@@ -24,9 +24,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindBitmapTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife-runtime/src/test/java/butterknife/BindBoolTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindBoolTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindBoolTest.java
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/BindColorTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindColorTest.java
index 558e06ec..d6f83f3e 100644
--- a/butterknife/src/test/java/butterknife/BindColorTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindColorTest.java
@@ -22,9 +22,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -73,9 +73,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife-runtime/src/test/java/butterknife/BindDimenTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindDimenTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindDimenTest.java
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/BindDrawableTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
index 742fa1c5..ebed6890 100644
--- a/butterknife/src/test/java/butterknife/BindDrawableTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java
@@ -23,9 +23,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -74,9 +74,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.Deprecated;\n"
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife-runtime/src/test/java/butterknife/BindFloatTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindFloatTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindFloatTest.java
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/BindFontTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindFontTest.java
index 290853aa..6374c5a6 100644
--- a/butterknife/src/test/java/butterknife/BindFontTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindFontTest.java
@@ -3,65 +3,12 @@
 import butterknife.compiler.ButterKnifeProcessor;
 import com.google.testing.compile.JavaFileObjects;
 import javax.tools.JavaFileObject;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindFontTest {
-  @Test public void simpleTypeface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(1) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.res.ResourcesCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void simpleIntSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -77,9 +24,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -115,59 +62,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void style() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import butterknife.BindFont;\n"
-        + "public class Test {\n"
-        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.graphics.Typeface;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.res.ResourcesCompat;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void styleSdk26() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -184,9 +78,9 @@
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import android.graphics.Typeface;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife-runtime/src/test/java/butterknife/BindIntTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindIntTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindIntTest.java
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife-runtime/src/test/java/butterknife/BindStringTest.java
similarity index 100%
rename from butterknife/src/test/java/butterknife/BindStringTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindStringTest.java
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
similarity index 87%
rename from butterknife/src/test/java/butterknife/BindViewTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindViewTest.java
index 525abe5b..76bae63c 100644
--- a/butterknife/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewTest.java
@@ -13,51 +13,6 @@
 import static java.util.Arrays.asList;
 
 public class BindViewTest {
-  @Test public void bindingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingViewNonDebuggable() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -70,9 +25,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -114,10 +69,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -194,8 +149,8 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -245,9 +200,9 @@
 
     JavaFileObject bindingBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -272,8 +227,8 @@
 
     JavaFileObject bindingTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -304,53 +259,6 @@
         .generatesSources(bindingBaseSource, bindingTestSource);
   }
 
-  @Test public void bindingViewInnerClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "public class Outer {\n"
-        + "  public static class Test {\n"
-        + "    @BindView(1) View thing;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
-        + "  private Outer.Test target;\n"
-        + "  @UiThread\n"
-        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Outer.Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingViewUppercasePackageName() {
     JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
         + "package com.Example;\n"
@@ -363,9 +271,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package com.Example;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -409,9 +317,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -455,10 +363,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -505,9 +413,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -565,10 +473,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.Button;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -643,9 +551,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -702,9 +610,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -729,8 +637,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -788,9 +696,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -815,8 +723,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
similarity index 88%
rename from butterknife/src/test/java/butterknife/BindViewsTest.java
rename to butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
index f84b145e..db927bef 100644
--- a/butterknife/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/BindViewsTest.java
@@ -13,73 +13,6 @@
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 public class BindViewsTest {
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "  @BindViews(1) public List<View> thing1;\n"
-        + "  @BindViews(2) List<View> thing2;\n"
-        + "  @BindViews(3) protected List<View> thing3;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings();
-  }
-
-  @Test public void bindingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) View[] thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
   @Test public void bindingArrayWithGenerics() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -92,9 +25,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -104,7 +37,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -142,10 +75,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -155,7 +88,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
         + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
         + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
@@ -191,9 +124,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -203,7 +136,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        source.findViewById(1), \n"
         + "        source.findViewById(2), \n"
         + "        source.findViewById(3));\n"
@@ -239,10 +172,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -252,7 +185,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.arrayOf(\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
         + "        (TextView) source.findViewById(1), \n"
         + "        (TextView) source.findViewById(2), \n"
         + "        (TextView) source.findViewById(3));\n"
@@ -276,56 +209,6 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void bindingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindViews;\n"
-        + "import java.util.List;\n"
-        + "public class Test {\n"
-        + "    @BindViews({1, 2, 3}) List<View> thing;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
-        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.thing = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-
   @Test public void bindingGeneratedView() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -375,9 +258,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -387,7 +270,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
         + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
         + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
@@ -424,9 +307,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -436,7 +319,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
@@ -476,9 +359,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -488,7 +371,7 @@
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
-        + "    target.thing = Utils.listOf(\n"
+        + "    target.thing = Utils.listFilteringNull(\n"
         + "        source.findViewById(1), \n"
         + "        source.findViewById(2), \n"
         + "        source.findViewById(3));\n"
@@ -617,4 +500,101 @@
         .withErrorContaining("@BindViews annotation contains duplicate ID 1. (test.Test.thing)")
         .in(source).onLine(6);
   }
+
+  @Test public void bindingArrayWithRScanner() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.R;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({R.color.black, R.color.white}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
+        + "        Utils.findRequiredView(source, android.R.color.black, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, android.R.color.white, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithMixedRAndLiteral() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.R;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({R.color.black, 2, R.color.white}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayFilteringNull(\n"
+        + "        Utils.findRequiredView(source, android.R.color.black, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, android.R.color.white, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife/src/test/java/butterknife/ExtendActivityTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
similarity index 94%
rename from butterknife/src/test/java/butterknife/ExtendActivityTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
index 0499d3c2..24c1a525 100644
--- a/butterknife/src/test/java/butterknife/ExtendActivityTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java
@@ -25,9 +25,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -81,9 +81,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife/src/test/java/butterknife/ExtendDialogTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/ExtendDialogTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
index dc9a76b0..7f7c636b 100644
--- a/butterknife/src/test/java/butterknife/ExtendDialogTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java
@@ -28,9 +28,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -87,9 +87,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife/src/test/java/butterknife/ExtendViewTest.java b/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/ExtendViewTest.java
rename to butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
index 1e08dc32..c25d7d8c 100644
--- a/butterknife/src/test/java/butterknife/ExtendViewTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java
@@ -28,9 +28,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -86,9 +86,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/OnClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
new file mode 100644
index 00000000..d2df0551
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/OnClickTest.java
@@ -0,0 +1,412 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnClickTest {
+  @Test public void findOnlyCalledOnce() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodCastsArgumentNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(0);\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(1);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(2);\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2((TextView) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(3);\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3((Button) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(4);\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4((Test.TestInterface) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void optionalAndRequiredSkipsNullCheck() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfHasReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public String doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfPrivateMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  private void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public static void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfParameterNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(String thing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: java.lang.String\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 1 parameter(s):\n"
+            + "  \n"
+            + "    android.view.View\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfMoreThanOneParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(View thing, View otherThing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public interface Test {\n"
+        + "  @OnClick(1)\n"
+        + "  void doStuff();\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
+        .in(source).onLine(3);
+  }
+
+  @Test public void failsIfHasDuplicateIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick({1, 2, 3, 1})\n"
+        + "  void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnEditorActionTest.java b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
similarity index 51%
rename from butterknife/src/test/java/butterknife/OnEditorActionTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
index f57edfcd..7541a00c 100644
--- a/butterknife/src/test/java/butterknife/OnEditorActionTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java
@@ -20,11 +20,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.KeyEvent;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -63,4 +63,60 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnEditorAction;\n"
+        + "public class Test {\n"
+        + "  @OnEditorAction(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.KeyEvent;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).setOnEditorActionListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/OnFocusChangeTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
index d8216f1c..32bec043 100644
--- a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java
@@ -20,9 +20,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
similarity index 95%
rename from butterknife/src/test/java/butterknife/OnItemClickTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
index 03f334c4..31435325 100644
--- a/butterknife/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java
@@ -21,10 +21,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -82,10 +82,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -141,11 +141,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import android.widget.ListView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -201,11 +201,11 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
         + "import android.widget.ListView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -264,10 +264,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -319,10 +319,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
similarity index 51%
rename from butterknife/src/test/java/butterknife/OnItemLongClickTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
index 4f809dfc..20dc76eb 100644
--- a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java
@@ -20,10 +20,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -62,4 +62,59 @@
         .and()
         .generatesSources(bindingSource);
   }
+
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemLongClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
 }
diff --git a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
similarity index 96%
rename from butterknife/src/test/java/butterknife/OnItemSelectedTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
index 05c5f249..11449b13 100644
--- a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java
@@ -21,10 +21,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -80,10 +80,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -141,10 +141,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -203,10 +203,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import android.widget.AdapterView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
diff --git a/butterknife/src/test/java/butterknife/OnPageChangeTest.java b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
similarity index 86%
rename from butterknife/src/test/java/butterknife/OnPageChangeTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
index a7c7590e..cfd5ff8f 100644
--- a/butterknife/src/test/java/butterknife/OnPageChangeTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java
@@ -5,8 +5,10 @@
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 
+import static butterknife.TestStubs.ANDROIDX_VIEW_PAGER;
 import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
 
 public class OnPageChangeTest {
   @Test public void pageChange() {
@@ -20,10 +22,10 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.view.ViewPager;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.viewpager.widget.ViewPager;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -64,7 +66,8 @@
         + "}"
     );
 
-    assertAbout(javaSource()).that(source)
+    assertAbout(javaSources())
+        .that(asList(source, ANDROIDX_VIEW_PAGER))
         .withCompilerOptions("-Xlint:-processing")
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutWarnings()
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
similarity index 96%
rename from butterknife/src/test/java/butterknife/OnTextChangedTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
index e1b75a68..dcc98467 100644
--- a/butterknife/src/test/java/butterknife/OnTextChangedTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java
@@ -20,12 +20,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.text.Editable;\n"
         + "import android.text.TextWatcher;\n"
         + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.CharSequence;\n"
@@ -86,12 +86,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
             + "package test;\n"
-            + "import android.support.annotation.CallSuper;\n"
-            + "import android.support.annotation.UiThread;\n"
             + "import android.text.Editable;\n"
             + "import android.text.TextWatcher;\n"
             + "import android.view.View;\n"
             + "import android.widget.TextView;\n"
+            + "import androidx.annotation.CallSuper;\n"
+            + "import androidx.annotation.UiThread;\n"
             + "import butterknife.Unbinder;\n"
             + "import butterknife.internal.Utils;\n"
             + "import java.lang.CharSequence;\n"
@@ -152,12 +152,12 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
             + "package test;\n"
-            + "import android.support.annotation.CallSuper;\n"
-            + "import android.support.annotation.UiThread;\n"
             + "import android.text.Editable;\n"
             + "import android.text.TextWatcher;\n"
             + "import android.view.View;\n"
             + "import android.widget.TextView;\n"
+            + "import androidx.annotation.CallSuper;\n"
+            + "import androidx.annotation.UiThread;\n"
             + "import butterknife.Unbinder;\n"
             + "import butterknife.internal.Utils;\n"
             + "import java.lang.CharSequence;\n"
diff --git a/butterknife/src/test/java/butterknife/OnTouchTest.java b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
similarity index 55%
rename from butterknife/src/test/java/butterknife/OnTouchTest.java
rename to butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
index fe9b9eb7..06e3701c 100644
--- a/butterknife/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
@@ -21,10 +21,10 @@
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.annotation.SuppressLint;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.MotionEvent;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -65,7 +65,64 @@
         .generatesSources(bindingSource);
   }
 
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.annotation.SuppressLint;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  @SuppressLint(\"ClickableViewAccessibility\")\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import butterknife.OnTouch;\n"
diff --git a/butterknife/src/test/java/butterknife/RClassTest.java b/butterknife-runtime/src/test/java/butterknife/RClassTest.java
similarity index 96%
rename from butterknife/src/test/java/butterknife/RClassTest.java
rename to butterknife-runtime/src/test/java/butterknife/RClassTest.java
index d03bede0..65acf98e 100644
--- a/butterknife/src/test/java/butterknife/RClassTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/RClassTest.java
@@ -91,9 +91,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -243,9 +243,9 @@
     JavaFileObject bindingSourceBar = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test.bar;\n\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -277,9 +277,9 @@
     JavaFileObject bindingSourceFoo = JavaFileObjects.forSourceString("test/FooTest_ViewBinding", ""
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test.foo;\n\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -338,9 +338,9 @@
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -387,10 +387,10 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
diff --git a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java b/butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
similarity index 84%
rename from butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
rename to butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
index 372f15dd..72a13522 100644
--- a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
+++ b/butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java
@@ -46,20 +46,12 @@
   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
     if (!processed) {
       processed = true;
-      Writer writer = null;
-      try {
-        writer = processingEnv.getFiler().createSourceFile(generatedClassName).openWriter();
+      try (Writer writer = processingEnv.getFiler()
+          .createSourceFile(generatedClassName)
+          .openWriter()) {
         writer.append(generatedSource);
       } catch (IOException e) {
         throw new RuntimeException(e);
-      } finally {
-        if (writer != null) {
-          try {
-            writer.close();
-          } catch (IOException e) {
-            throw new RuntimeException(e);
-          }
-        }
       }
     }
     return false;
diff --git a/butterknife-runtime/src/test/java/butterknife/TestStubs.java b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
new file mode 100644
index 00000000..df562958
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/TestStubs.java
@@ -0,0 +1,25 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+
+final class TestStubs {
+  static final JavaFileObject ANDROIDX_CONTEXT_COMPAT =
+      JavaFileObjects.forSourceString("androidx.core.content.ContextCompat", ""
+          + "package androidx.core.content;\n"
+          + "public class ContextCompat {}");
+
+  static final JavaFileObject ANDROIDX_VIEW_PAGER =
+      JavaFileObjects.forSourceString("androidx.viewpager.widget.ViewPager", ""
+          + "package androidx.viewpager.widget;\n"
+          + "\n"
+          + "public interface ViewPager {\n"
+          + "  void addOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  void removeOnPageChangeListener(OnPageChangeListener listener);\n"
+          + "  interface OnPageChangeListener {\n"
+          + "    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\n"
+          + "    void onPageSelected(int position);\n"
+          + "    void onPageScrollStateChanged(int state);\n"
+          + "  }\n"
+          + "}\n");
+}
diff --git a/butterknife/src/test/java/butterknife/UnbinderTest.java b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
similarity index 87%
rename from butterknife/src/test/java/butterknife/UnbinderTest.java
rename to butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
index ef0388fc..f9eb717a 100644
--- a/butterknife/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/UnbinderTest.java
@@ -28,9 +28,9 @@
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -108,9 +108,9 @@
 
     JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
@@ -145,8 +145,8 @@
 
     JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinding", ""
         + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
@@ -190,103 +190,89 @@
   @Test public void fullIntegration() {
     JavaFileObject sourceA = JavaFileObjects.forSourceString("test.A", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class A {\n"
         + "  @BindColor(android.R.color.black) @ColorInt int blackColor;\n"
         + "  public A(View view) {\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceB = JavaFileObjects.forSourceString("test.B", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class B extends A {\n"
         + "  @BindColor(android.R.color.white) @ColorInt int whiteColor;\n"
         + "  public B(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceC = JavaFileObjects.forSourceString("test.C", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class C extends B {\n"
         + "  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;\n"
         + "  @BindView(android.R.id.button1) View button1;\n"
         + "  public C(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceD = JavaFileObjects.forSourceString("test.D", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class D extends C {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
         + "  public D(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceE = JavaFileObjects.forSourceString("test.E", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class E extends C {\n"
         + "  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;\n"
         + "  public E(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceF = JavaFileObjects.forSourceString("test.F", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class F extends D {\n"
         + "  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;\n"
         + "  public F(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
     JavaFileObject sourceG = JavaFileObjects.forSourceString("test.G", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "import butterknife.OnClick;\n"
         + "public class G extends E {\n"
         + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
         + "  @BindView(android.R.id.button2) View button2;\n"
         + "  public G(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "  @OnClick(android.R.id.content) public void onClick() {\n"
         + "  }\n"
@@ -294,17 +280,15 @@
 
     JavaFileObject sourceH = JavaFileObjects.forSourceString("test.H", ""
         + "package test;\n"
-        + "import android.support.annotation.ColorInt;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.ColorInt;\n"
         + "import butterknife.BindView;\n"
         + "import butterknife.BindColor;\n"
-        + "import butterknife.ButterKnife;\n"
         + "public class H extends G {\n"
-        + "  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;\n"
+        + "  @BindColor(android.R.color.holo_green_dark) @ColorInt int holoGreenDark;\n"
         + "  @BindView(android.R.id.button3) View button3;\n"
         + "  public H(View view) {\n"
         + "    super(view);\n"
-        + "    ButterKnife.bind(this, view);\n"
         + "  }\n"
         + "}\n");
 
@@ -312,10 +296,10 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
         + "import java.lang.Override;\n"
@@ -344,9 +328,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import java.lang.Deprecated;\n"
         + "public class B_ViewBinding extends A_ViewBinding {\n"
         + "  /**\n"
@@ -370,9 +354,9 @@
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -400,9 +384,9 @@
     JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class D_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public D_ViewBinding(D target, View source) {\n"
@@ -416,9 +400,9 @@
     JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class E_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public E_ViewBinding(E target, View source) {\n"
@@ -432,9 +416,9 @@
     JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "public class F_ViewBinding extends D_ViewBinding {\n"
         + "  @UiThread\n"
         + "  public F_ViewBinding(F target, View source) {\n"
@@ -448,16 +432,16 @@
     JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
         + "public class G_ViewBinding extends E_ViewBinding {\n"
         + "  private G target;\n"
-        + "  private View view16908290;\n"
+        + "  private View view1020002;\n"
         + "  @UiThread\n"
         + "  public G_ViewBinding(final G target, View source) {\n"
         + "    super(target, source);\n"
@@ -465,7 +449,7 @@
         + "    View view;\n"
         + "    target.button2 = Utils.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n"
         + "    view = Utils.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n"
-        + "    view16908290 = view;\n"
+        + "    view1020002 = view;\n"
         + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "      @Override\n"
         + "      public void doClick(View p0) {\n"
@@ -481,8 +465,8 @@
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
         + "    this.target = null\n"
         + "    target.button2 = null;\n"
-        + "    view16908290.setOnClickListener(null);\n"
-        + "    view16908290 = null;\n"
+        + "    view1020002.setOnClickListener(null);\n"
+        + "    view1020002 = null;\n"
         + "    super.unbind();\n"
         + "  }\n"
         + "}"
@@ -491,9 +475,9 @@
     JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
         + "package test;\n"
         + "import android.content.Context;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import androidx.core.content.ContextCompat;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
@@ -505,7 +489,7 @@
         + "    this.target = target;\n"
         + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
         + "    Context context = source.getContext();\n"
-        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
+        + "    target.holoGreenDark = ContextCompat.getColor(context, android.R.color.holo_green_dark);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
diff --git a/butterknife-runtime/src/test/java/butterknife/UtilsTest.java b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java
new file mode 100644
index 00000000..67386b7a
--- /dev/null
+++ b/butterknife-runtime/src/test/java/butterknife/UtilsTest.java
@@ -0,0 +1,50 @@
+package butterknife;
+
+import butterknife.internal.Utils;
+import org.junit.Test;
+
+import static butterknife.internal.Utils.arrayFilteringNull;
+import static butterknife.internal.Utils.listFilteringNull;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class UtilsTest {
+  @Test public void listOfFiltersNull() {
+    assertThat(listFilteringNull(null, null, null)).isEmpty();
+    assertThat(listFilteringNull("One", null, null)).containsExactly("One");
+    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");
+    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");
+    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");
+    assertThat(listFilteringNull("One", "Two", "Three")).containsExactly("One", "Two", "Three");
+  }
+
+  @Test public void arrayFilteringNullRemovesNulls() {
+    assertThat(arrayFilteringNull(null, null, null)).isEmpty();
+    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");
+  }
+
+  @Test public void arrayFilteringNullReturnsOriginalWhenNoNulls() {
+    String[] input = { "One", "Two", "Three" };
+    String[] actual = arrayFilteringNull(input);
+    assertThat(actual).isSameAs(input);
+    // Even though we got the same reference back check to ensure its contents weren't mutated.
+    assertThat(actual).asList().containsExactly("One", "Two", "Three");
+  }
+
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      fail();
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).isEqualTo(
+          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
+    }
+  }
+}
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index 4cc9d54f..4b045262 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -8,13 +8,12 @@ android {
 
     consumerProguardFiles 'proguard-rules.txt'
 
-    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
+  }
 
-    javaCompileOptions {
-      annotationProcessorOptions {
-        includeCompileClasspath = true
-      }
-    }
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
   }
 
   lintOptions {
@@ -23,39 +22,20 @@ android {
     // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
     checkReleaseBuilds false
   }
+
+  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
+  libraryVariants.all {
+    it.generateBuildConfig.enabled = false
+  }
 }
 
 dependencies {
-  api project(':butterknife-annotations')
-  api deps.support.compat
-
-  lintChecks project(':butterknife-lint')
+  api project(':butterknife-runtime')
 
   androidTestImplementation deps.junit
   androidTestImplementation deps.truth
-  androidTestImplementation deps.support.test.runner
+  androidTestImplementation deps.androidx.test.runner
   androidTestAnnotationProcessor project(':butterknife-compiler')
-
-  testImplementation deps.junit
-  testImplementation deps.truth
-  testImplementation deps.compiletesting
-  testImplementation files(getRuntimeJar())
-  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
-  testImplementation project(':butterknife-compiler')
-}
-
-def getRuntimeJar() {
-  try {
-    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
-    File runtimeJar = new File(javaBase, "lib/rt.jar");
-    if (runtimeJar.exists()) {
-      return runtimeJar;
-    }
-    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
-    return runtimeJar.exists() ? runtimeJar : null;
-  } catch (IOException e) {
-    throw new RuntimeException(e);
-  }
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index 9bde9ff5..06634f61 100644
--- a/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -1,51 +1,15 @@
 package butterknife;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.SdkSuppress;
-import android.util.Property;
 import android.view.View;
-import java.util.List;
+import androidx.test.InstrumentationRegistry;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static com.google.common.truth.Truth.assertThat;
-import static java.util.Arrays.asList;
 
-@TargetApi(ICE_CREAM_SANDWICH)
-@SdkSuppress(minSdkVersion = ICE_CREAM_SANDWICH)
 public class ButterKnifeTest {
-  private static final Property<View, Boolean> PROPERTY_ENABLED =
-      new Property<View, Boolean>(Boolean.class, "enabled") {
-        @Override public Boolean get(View view) {
-          return view.isEnabled();
-        }
-
-        @Override public void set(View view, Boolean enabled) {
-          view.setEnabled(enabled);
-        }
-      };
-  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =
-      new ButterKnife.Setter<View, Boolean>() {
-        @Override public void set(@NonNull View view, Boolean value, int index) {
-          view.setEnabled(value);
-        }
-      };
-  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setEnabled(false);
-    }
-  };
-  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {
-    @Override public void apply(@NonNull View view, int index) {
-      view.setAlpha(0f);
-    }
-  };
-
   private final Context context = InstrumentationRegistry.getContext();
 
   @Before @After // Clear out cache of binders before and after each test.
@@ -53,188 +17,15 @@ public void resetViewsCache() {
     ButterKnife.BINDINGS.clear();
   }
 
-  @Test public void propertyAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, PROPERTY_ENABLED, false);
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void propertyAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void propertyAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, PROPERTY_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, ACTION_DISABLE);
-
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void actionsAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-    assertThat(view.getAlpha()).isEqualTo(1f);
-
-    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-    assertThat(view.isEnabled()).isFalse();
-    assertThat(view.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void actionAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, ACTION_DISABLE);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void actionsAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-    assertThat(view1.getAlpha()).isEqualTo(1f);
-    assertThat(view2.getAlpha()).isEqualTo(1f);
-    assertThat(view3.getAlpha()).isEqualTo(1f);
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-    assertThat(view1.getAlpha()).isEqualTo(0f);
-    assertThat(view2.getAlpha()).isEqualTo(0f);
-    assertThat(view3.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void actionsAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-    assertThat(view1.getAlpha()).isEqualTo(1f);
-    assertThat(view2.getAlpha()).isEqualTo(1f);
-    assertThat(view3.getAlpha()).isEqualTo(1f);
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-    assertThat(view1.getAlpha()).isEqualTo(0f);
-    assertThat(view2.getAlpha()).isEqualTo(0f);
-    assertThat(view3.getAlpha()).isEqualTo(0f);
-  }
-
-  @Test public void setterAppliedToView() {
-    View view = new View(context);
-    assertThat(view.isEnabled()).isTrue();
-
-    ButterKnife.apply(view, SETTER_ENABLED, false);
-
-    assertThat(view.isEnabled()).isFalse();
-  }
-
-  @Test public void setterAppliedToEveryViewInList() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    List<View> views = asList(view1, view2, view3);
-    ButterKnife.apply(views, SETTER_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void setterAppliedToEveryViewInArray() {
-    View view1 = new View(context);
-    View view2 = new View(context);
-    View view3 = new View(context);
-    assertThat(view1.isEnabled()).isTrue();
-    assertThat(view2.isEnabled()).isTrue();
-    assertThat(view3.isEnabled()).isTrue();
-
-    View[] views = new View[] { view1, view2, view3 };
-    ButterKnife.apply(views, SETTER_ENABLED, false);
-
-    assertThat(view1.isEnabled()).isFalse();
-    assertThat(view2.isEnabled()).isFalse();
-    assertThat(view3.isEnabled()).isFalse();
-  }
-
-  @Test public void zeroBindingsBindDoesNotThrowException() {
+  @Test public void zeroBindingsBindDoesNotThrowExceptionAndCaches() {
     class Example {
     }
 
     Example example = new Example();
-    assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
+    View view = new View(context);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
+    assertThat(ButterKnife.bind(example, view)).isSameAs(Unbinder.EMPTY);
+    assertThat(ButterKnife.BINDINGS).containsEntry(Example.class, null);
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
deleted file mode 100644
index a46b74a4..00000000
--- a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package butterknife.internal;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.view.View;
-import org.junit.Test;
-
-import static butterknife.internal.Utils.arrayOf;
-import static butterknife.internal.Utils.listOf;
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.fail;
-
-public final class UtilsTest {
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
-  }
-
-  @Test public void finderThrowsNiceError() {
-    Context context = InstrumentationRegistry.getContext();
-    View view = new View(context);
-    try {
-      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view 'button1' with ID "
-          + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
-    }
-  }
-
-  @Test public void finderThrowsLessNiceErrorInEditMode() {
-    Context context = InstrumentationRegistry.getContext();
-    View view = new EditModeView(context);
-    try {
-      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
-          + "with ID " + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
-    }
-  }
-
-  @Test public void testCastParam() {
-    try {
-      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
-      fail();
-    } catch (IllegalStateException ise) {
-      assertThat(ise.getMessage()).isEqualTo(
-          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
-    }
-  }
-
-  static final class EditModeView extends View {
-    EditModeView(Context context) {
-      super(context);
-    }
-
-    @Override public boolean isInEditMode() {
-      return true;
-    }
-  }
-}
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index e4090708..84606c9a 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -1,18 +1,14 @@
 package butterknife;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
-import android.os.Build;
-import android.support.annotation.CheckResult;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RequiresApi;
-import android.support.annotation.UiThread;
-import android.support.annotation.VisibleForTesting;
 import android.util.Log;
-import android.util.Property;
 import android.view.View;
+import androidx.annotation.CheckResult;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+import androidx.annotation.VisibleForTesting;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
@@ -47,12 +43,6 @@
  * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
- * There are three convenience methods for working with view collections:
- * <ul>
- * <li>{@link #apply(List, Action)} &ndash; Applies an action to each view.</li>
- * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>
- * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>
- * </ul>
  * <p>
  * To bind listeners to your views you can annotate your methods:
  * <pre><code>
@@ -86,20 +76,6 @@ private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
-  /** An action that can be applied to a list of views. */
-  public interface Action<T extends View> {
-    /** Apply the action on the {@code view} which is at {@code index} in the list. */
-    @UiThread
-    void apply(@NonNull T view, int index);
-  }
-
-  /** A setter that can apply a value to a list of views. */
-  public interface Setter<T extends View, V> {
-    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
-    @UiThread
-    void set(@NonNull T view, V value, int index);
-  }
-
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
@@ -120,7 +96,7 @@ public static void setDebug(boolean debug) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Activity target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
@@ -131,7 +107,7 @@ public static Unbinder bind(@NonNull Activity target) {
    */
   @NonNull @UiThread
   public static Unbinder bind(@NonNull View target) {
-    return createBinding(target, target);
+    return bind(target, target);
   }
 
   /**
@@ -143,7 +119,7 @@ public static Unbinder bind(@NonNull View target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Dialog target) {
     View sourceView = target.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
@@ -156,35 +132,31 @@ public static Unbinder bind(@NonNull Dialog target) {
   @NonNull @UiThread
   public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
     View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
+    return bind(target, sourceView);
   }
 
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link View} as the view root.
+   * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
-   * @param source View root on which IDs will be looked up.
+   * @param source Dialog on which IDs will be looked up.
    */
   @NonNull @UiThread
-  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
-    return createBinding(target, source);
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return bind(target, sourceView);
   }
 
   /**
    * BindView annotated fields and methods in the specified {@code target} using the {@code source}
-   * {@link Dialog} as the view root.
+   * {@link View} as the view root.
    *
    * @param target Target class for view binding.
-   * @param source Dialog on which IDs will be looked up.
+   * @param source View root on which IDs will be looked up.
    */
   @NonNull @UiThread
-  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
-    View sourceView = source.getWindow().getDecorView();
-    return createBinding(target, sourceView);
-  }
-
-  private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
     Class<?> targetClass = target.getClass();
     if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
     Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
@@ -215,12 +187,13 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
   @Nullable @CheckResult @UiThread
   private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {
     Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);
-    if (bindingCtor != null) {
+    if (bindingCtor != null || BINDINGS.containsKey(cls)) {
       if (debug) Log.d(TAG, "HIT: Cached in binding map.");
       return bindingCtor;
     }
     String clsName = cls.getName();
-    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
+    if (clsName.startsWith("android.") || clsName.startsWith("java.")
+        || clsName.startsWith("androidx.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
       return null;
     }
@@ -238,120 +211,4 @@ private static Unbinder createBinding(@NonNull Object target, @NonNull View sour
     BINDINGS.put(cls, bindingCtor);
     return bindingCtor;
   }
-
-  /** Apply the specified {@code actions} across the {@code list} of views. */
-  @UiThread
-  @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(list.get(i), i);
-      }
-    }
-  }
-
-  /** Apply the specified {@code actions} across the {@code array} of views. */
-  @UiThread
-  @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
-      @NonNull Action<? super T>... actions) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      for (Action<? super T> action : actions) {
-        action.apply(array[i], i);
-      }
-    }
-  }
-
-  /** Apply the specified {@code action} across the {@code list} of views. */
-  @UiThread
-  public static <T extends View> void apply(@NonNull List<T> list,
-      @NonNull Action<? super T> action) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      action.apply(list.get(i), i);
-    }
-  }
-
-  /** Apply the specified {@code action} across the {@code array} of views. */
-  @UiThread
-  public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      action.apply(array[i], i);
-    }
-  }
-
-  /** Apply {@code actions} to {@code view}. */
-  @UiThread
-  @SafeVarargs public static <T extends View> void apply(@NonNull T view,
-      @NonNull Action<? super T>... actions) {
-    for (Action<? super T> action : actions) {
-      action.apply(view, 0);
-    }
-  }
-
-  /** Apply {@code action} to {@code view}. */
-  @UiThread
-  public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
-    action.apply(view, 0);
-  }
-
-  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value, i);
-    }
-  }
-
-  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Setter<? super T, V> setter, V value) {
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value, i);
-    }
-  }
-
-  /** Set {@code value} on {@code view} using {@code setter}. */
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Setter<? super T, V> setter, V value) {
-    setter.set(view, value, 0);
-  }
-
-  /**
-   * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull List<T> list,
-      @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = list.size(); i < count; i++) {
-      setter.set(list.get(i), value);
-    }
-  }
-
-  /**
-   * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
-   */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull T[] array,
-      @NonNull Property<? super T, V> setter, V value) {
-    //noinspection ForLoopReplaceableByForEach
-    for (int i = 0, count = array.length; i < count; i++) {
-      setter.set(array[i], value);
-    }
-  }
-
-  /** Apply {@code value} to {@code view} using {@code property}. */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
-  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  @UiThread
-  public static <T extends View, V> void apply(@NonNull T view,
-      @NonNull Property<? super T, V> setter, V value) {
-    setter.set(view, value);
-  }
 }
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index bb2a5807..8b0a8718 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -6,12 +6,6 @@
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
  * {@link butterknife.BindView @BindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} or array.
- * Operate on all of them at once with
- * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
- * actions}, {@linkplain butterknife.ButterKnife#apply(java.util.List,
- * butterknife.ButterKnife.Setter, Object) setters}, or
- * {@linkplain butterknife.ButterKnife#apply(java.util.List, android.util.Property, Object)
- * properties}.</li>
  * <li>Eliminate anonymous inner-classes for listeners by annotating methods with
  * {@link butterknife.OnClick @OnClick} and others.</li>
  * <li>Eliminate resource lookups by using resource annotations on fields.</li>
diff --git a/butterknife/src/test/java/android/support/v4/view/ViewPager.java b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
deleted file mode 100644
index f5be6a29..00000000
--- a/butterknife/src/test/java/android/support/v4/view/ViewPager.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package android.support.v4.view;
-
-/** STUB! Required for test sources to compile. */
-public interface ViewPager {
-  void addOnPageChangeListener(OnPageChangeListener listener);
-
-  void removeOnPageChangeListener(OnPageChangeListener listener);
-
-  interface OnPageChangeListener {
-    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);
-
-    void onPageSelected(int position);
-
-    void onPageScrollStateChanged(int state);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/BindAnimTest.java b/butterknife/src/test/java/butterknife/BindAnimTest.java
deleted file mode 100644
index 3cbff425..00000000
--- a/butterknife/src/test/java/butterknife/BindAnimTest.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package butterknife;
-
-import com.google.testing.compile.JavaFileObjects;
-
-import org.junit.Test;
-
-import javax.tools.JavaFileObject;
-
-import butterknife.compiler.ButterKnifeProcessor;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindAnimTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.animation.Animation;\n"
-        + "import butterknife.BindAnim;\n"
-        + "public class Test {\n"
-        + "  @BindAnim(1) Animation one;\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "// Generated code from Butter Knife. Do not modify!\n"
-        + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.view.animation.AnimationUtils;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import java.lang.Deprecated;\n"
-        + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
-        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
-        + "   */\n"
-        + "  @Deprecated\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(Test target, View source) {\n"
-        + "    this(target, source.getContext());\n"
-        + "  }\n"
-        + "  @UiThread\n"
-        + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Test_ViewBinding(Test target, Context context) {\n"
-        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void typeMustBeAnimation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.BindAnim;\n"
-        + "public class Test {\n"
-        + "  @BindAnim(1) String one;\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindAnim field type must be 'Animation'. (test.Test.one)")
-        .in(source).onLine(4);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
deleted file mode 100644
index b0b5fbd3..00000000
--- a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnCheckedChangedTest {
-  @Test public void checkedChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnCheckedChanged;\n"
-        + "public class Test {\n"
-        + "  @OnCheckedChanged(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.CompoundButton;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n"
-        + "      @Override\n"
-        + "      public void onCheckedChanged(CompoundButton p0, boolean p1) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
deleted file mode 100644
index 9d06efce..00000000
--- a/butterknife/src/test/java/butterknife/OnClickTest.java
+++ /dev/null
@@ -1,848 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnClickTest {
-  @Test public void onClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void onClickBindingFinalType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public final class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public final class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void onClickMultipleBindings() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff1() {}\n"
-        + "  @OnClick(1) void doStuff2() {}\n"
-        + "  @OnClick({1, 2}) void doStuff3(View v) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "        target.doStuff2();\n"
-        + "        target.doStuff3(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff3'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff3(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void findOnlyCalledOnce() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @BindView(1) View view;\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
-        + "    target.view = view;\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.view = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) public void thing1() {}\n"
-        + "  @OnClick(2) void thing2() {}\n"
-        + "  @OnClick(3) protected void thing3() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings();
-  }
-
-  @Test public void methodCastsArgument() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  interface TestInterface {}\n"
-        + "  @OnClick(0) void click0() {}\n"
-        + "  @OnClick(1) void click1(View view) {}\n"
-        + "  @OnClick(2) void click2(TextView view) {}\n"
-        + "  @OnClick(3) void click3(Button button) {}\n"
-        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view0;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  private View view4;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 0, \"method 'click0'\");\n"
-        + "    view0 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click0();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'click1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click1(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'click2'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
-        + "    view4 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view0.setOnClickListener(null);\n"
-        + "    view0 = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "    view4.setOnClickListener(null);\n"
-        + "    view4 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodCastsArgumentNonDebuggable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  interface TestInterface {}\n"
-        + "  @OnClick(0) void click0() {}\n"
-        + "  @OnClick(1) void click1(View view) {}\n"
-        + "  @OnClick(2) void click2(TextView view) {}\n"
-        + "  @OnClick(3) void click3(Button button) {}\n"
-        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import android.widget.Button;\n"
-        + "import android.widget.TextView;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view0;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  private View view4;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(0);\n"
-        + "    view0 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click0();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(1);\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click1(p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(2);\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click2((TextView) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(3);\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click3((Button) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = source.findViewById(4);\n"
-        + "    view4 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click4((Test.TestInterface) p0);\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view0.setOnClickListener(null);\n"
-        + "    view0 = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "    view4.setOnClickListener(null);\n"
-        + "    view4 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void methodWithMultipleIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick({1, 2, 3}) void click() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  private View view2;\n"
-        + "  private View view3;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'click'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 2, \"method 'click'\");\n"
-        + "    view2 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "    view = Utils.findRequiredView(source, 3, \"method 'click'\");\n"
-        + "    view3 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.click();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    view2.setOnClickListener(null);\n"
-        + "    view2 = null;\n"
-        + "    view3.setOnClickListener(null);\n"
-        + "    view3 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test {\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}");
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(1);\n"
-        + "    if (view != null) {\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    if (view1 != null) {\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void optionalAndRequiredSkipsNullCheck() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.BindView;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test {\n"
-        + "  @BindView(1) View view;\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
-        + "    target.view = view;\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    Test target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
-        + "    target.view = null;\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package java.test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package android.test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfHasReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public String doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfPrivateMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  private void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public static void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfParameterNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public void doStuff(String thing) {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(""
-            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
-            + "  \n"
-            + "    Parameter #1: java.lang.String\n"
-            + "      did not match any listener parameters\n"
-            + "  \n"
-            + "  Methods may have up to 1 parameter(s):\n"
-            + "  \n"
-            + "    android.view.View\n"
-            + "  \n"
-            + "  These may be listed in any order but will be searched for from top to bottom.")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfMoreThanOneParameter() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick(1)\n"
-        + "  public void doStuff(View thing, View otherThing) {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public interface Test {\n"
-        + "  @OnClick(1)\n"
-        + "  void doStuff();\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
-        .in(source).onLine(3);
-  }
-
-  @Test public void failsIfHasDuplicateIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test {\n"
-        + "  @OnClick({1, 2, 3, 1})\n"
-        + "  void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
deleted file mode 100644
index 0926b2f3..00000000
--- a/butterknife/src/test/java/butterknife/OnLongClickTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
-public class OnLongClickTest {
-  @Test public void onLongClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1) boolean doStuff() {\n"
-        + "    return true;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding implements Unbinder {\n"
-        + "  private Test target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final Test target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
-        + "      @Override\n"
-        + "      public boolean onLongClick(View p0) {\n"
-        + "        return target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target = null;\n"
-        + "    view1.setOnLongClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void failsIfMissingReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import butterknife.OnLongClick;\n"
-        + "public class Test {\n"
-        + "  @OnLongClick(1)\n"
-        + "  public void doStuff() {\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/checkstyle.xml b/checkstyle.xml
index 69942dfe..bf3140b8 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -78,7 +78,9 @@
     <module name="GenericWhitespace"/>
     <module name="EmptyForIteratorPad"/>
     <module name="MethodParamPad"/>
-    <module name="NoWhitespaceAfter"/>
+    <module name="NoWhitespaceAfter">
+      <property name="tokens" value="INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP"/>
+    </module>
     <module name="NoWhitespaceBefore"/>
     <module name="OperatorWrap"/>
     <module name="ParenPad"/>
@@ -95,7 +97,9 @@
 
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name="AvoidNestedBlocks"/>
+    <module name="AvoidNestedBlocks">
+        <property name="allowInSwitchCase" value="true"/>
+    </module>
     <!--<module name="EmptyBlock"/>-->
     <module name="LeftCurly"/>
     <module name="NeedBraces">
diff --git a/gradle.properties b/gradle.properties
index a4db5d39..f23da41e 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=9.0.0-SNAPSHOT
+VERSION_NAME=10.1.1-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -16,3 +16,6 @@ POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
 
 org.gradle.jvmargs=-Xmx1536M
+
+# TODO https://issuetracker.google.com/issues/73450622
+android.enableAapt2=false
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 7a3265ee..94336fca 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index bf1b63c3..290541c7 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
index 79feb9e8..d0d7615f 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
index 2b78fe9b..3a7b73db 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
index 3772e400..dcd7e13a 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
index 5ab8b2c6..35a91039 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
index bd5e28aa..8b76b3c5 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
index 5b1a2faa..351f8ddd 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindColor;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
index 419ef4b5..f2a08ef6 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
index e9cd4136..f8656842 100644
--- a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
@@ -1,6 +1,6 @@
 package com.example.butterknife.unbinder;
 
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.view.View;
 
 import butterknife.BindView;
diff --git a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 5f40f5af..1d96194a 100644
--- a/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -3,7 +3,7 @@
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.widget.Button;
diff --git a/settings.gradle b/settings.gradle
index cd8829a5..9ecaae16 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,8 +2,10 @@ include ':butterknife'
 include ':butterknife-annotations'
 include ':butterknife-compiler'
 include ':butterknife-gradle-plugin'
-include ':butterknife-lint'
 include ':butterknife-integration-test'
+include ':butterknife-lint'
+include ':butterknife-reflect'
+include ':butterknife-runtime'
 
 //include ':sample:app'
 //include ':sample:library'
diff --git a/website/index.html b/website/index.html
index fab8be1c..24d26521 100644
--- a/website/index.html
+++ b/website/index.html
@@ -6,7 +6,7 @@
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta name="description" content="Field and method binding for Android views.">
-    <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
+    <link href="https://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
     <link href="static/prettify.css" rel="stylesheet">
@@ -51,7 +51,7 @@ <h4 id="resource">Resource Binding</h4>
   @BindString(R.string.title) String title;
   @BindDrawable(R.drawable.graphic) Drawable graphic;
   @BindColor(R.color.red) int red; // int or ColorStateList field
-  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
+  @BindDimen(R.dimen.spacer) float spacer; // int (for pixel size) or float (for exact value) field
   // ...
 }</pre>
 
@@ -202,17 +202,9 @@ <h4 id="multi-method-listeners">Multi-Method Listeners</h4>
   // TODO ...
 }</pre>
 
-            <h4 id="bonus">Bonus</h4>
-            <p>Also included are <code>findById</code> methods which simplify code that still has to find views on a <code>View</code>, <code>Activity</code>, or <code>Dialog</code>. It uses generics to infer the return type and automatically performs the cast.</p>
-            <pre class="prettyprint">View view = LayoutInflater.from(context).inflate(R.layout.thing, null);
-TextView firstName = ButterKnife.findById(view, R.id.first_name);
-TextView lastName = ButterKnife.findById(view, R.id.last_name);
-ImageView photo = ButterKnife.findById(view, R.id.photo);</pre>
-            <p>Add a static import for <code>ButterKnife.findById</code> and enjoy even more fun.</p>
-
             <h3 id="download">Download</h3>
             <h4>Gradle</h4>
-            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
+            <pre class="prettyprint">implementation 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
 annotationProcessor 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
 
             <h3 id="license">License</h3>
@@ -235,7 +227,7 @@ <h3 id="license">License</h3>
         </div>
       </div>
     </div>
-    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
+    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
     <script src="static/jquery-maven-artifact.min.js"></script>
     <script src="static/prettify.js"></script>
     <script>
diff --git a/website/static/jquery-maven-artifact.min.js b/website/static/jquery-maven-artifact.min.js
index 84180e6b..848cb9cd 100644
--- a/website/static/jquery-maven-artifact.min.js
+++ b/website/static/jquery-maven-artifact.min.js
@@ -5,4 +5,4 @@
  * Author: Jake Wharton
  * License: Apache 2.0
  */
-(function($){function downloadUrl(groupId,artifactId,version,type){var groupPath=groupId.replace(".","/");var artifactPath=artifactId.replace(".","/");return"http://repo1.maven.org/maven2/"+groupPath+"/"+artifactPath+"/"+version+"/"+artifactId+"-"+version+type}$.fn.artifactVersion=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}var version=versions[0].latestVersion;var versionUrl=downloadUrl(groupId,artifactId,version,".jar");callback(version,versionUrl)})};$.fn.artifactVersions=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&rows=10&core=gav&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}versions.sort(function(o1,o2){return o1.v>o2.v?-1:1});var newVersions=[];for(var i=0;i<versions.length;i++){var version=versions[i].v;newVersions.push({name:version,url:downloadUrl(groupId,artifactId,version,".jar")})}callback(newVersions)})}})(jQuery);
\ No newline at end of file
+(function($){function downloadUrl(groupId,artifactId,version,type){var groupPath=groupId.replace(".","/");var artifactPath=artifactId.replace(".","/");return"https://repo1.maven.org/maven2/"+groupPath+"/"+artifactPath+"/"+version+"/"+artifactId+"-"+version+type}$.fn.artifactVersion=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='https://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}var version=versions[0].latestVersion;var versionUrl=downloadUrl(groupId,artifactId,version,".jar");callback(version,versionUrl)})};$.fn.artifactVersions=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='https://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&rows=10&core=gav&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}versions.sort(function(o1,o2){return o1.v>o2.v?-1:1});var newVersions=[];for(var i=0;i<versions.length;i++){var version=versions[i].v;newVersions.push({name:version,url:downloadUrl(groupId,artifactId,version,".jar")})}callback(newVersions)})}})(jQuery);
\ No newline at end of file
