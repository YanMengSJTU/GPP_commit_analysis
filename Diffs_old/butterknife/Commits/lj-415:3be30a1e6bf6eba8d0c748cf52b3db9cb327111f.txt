diff --git a/.gitignore b/.gitignore
index 92007a21..49cdbbe4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,11 +1,5 @@
-.classpath
-.project
-.settings
-eclipsebin
-
 bin
 gen
-build
 out
 lib
 
diff --git a/.travis.yml b/.travis.yml
index 3c35b6bf..bdec6648 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,16 +2,33 @@ language: android
 
 android:
   components:
-    - build-tools-23.0.1
-    - android-23
-    - extra-android-m2repository
-  licenses:
-    - android-sdk-license-5be876d5
+    # Update tools and then platform-tools explicitly so lint gets an updated database. Can be removed once 3.0 is out.
+    - tools
+    - platform-tools
 
 jdk:
-  - oraclejdk7
   - oraclejdk8
 
+before_install:
+  # Install SDK license so Android Gradle plugin can install deps.
+  - mkdir "$ANDROID_HOME/licenses" || true
+  - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
+  # Install the rest of tools (e.g., avdmanager)
+  - sdkmanager tools
+  # Install the system image
+  - sdkmanager "system-images;android-18;default;armeabi-v7a"
+  # Create and start emulator for the script. Meant to race the install task.
+  - echo no | avdmanager create avd --force -n test -k "system-images;android-18;default;armeabi-v7a"
+  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window &
+
+install: ./gradlew clean assemble assembleAndroidTest --stacktrace
+
+before_script:
+  - android-wait-for-emulator
+  - adb shell input keyevent 82
+
+script: ./gradlew check connectedCheck --stacktrace
+
 after_success:
   - .buildscript/deploy_snapshot.sh
 
@@ -29,6 +46,12 @@ notifications:
 
 sudo: false
 
+before_cache:
+  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
+
 cache:
   directories:
-    - $HOME/.m2
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
+    - $HOME/.android/build-cache
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2fd857cc..a61b410e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,137 @@
 Change Log
 ==========
 
+Version 8.8.1 *(2017-08-09)*
+----------------------------
+
+ * Fix: Properly emit casts for single-bound view subtypes when `butterknife.debuggable` is set to `false`.
+
+
+Version 8.8.0 *(2017-08-04)*
+----------------------------
+
+ * New: Processor option `butterknife.debuggable` controls whether debug information is generated. When
+   specified as `false`, checks for required views being non-null are elided and casts are no longer guarded
+   with user-friendly error messages. This reduces the amount of generated code for release builds at the
+   expense of less friendly exceptions when something breaks.
+ * Deprecate the `findById` methods. Compile against API 26 and use the normal `findViewById` for the same
+   functionality.
+ * Fix: Correct `@BindFont` code generation on pre-API 26 builds to pass a `Context` (not a `Resources`) to
+   `ResourceCompat`.
+
+
+Version 8.7.0 *(2017-07-07)*
+----------------------------
+
+ * New: `@BindFont` annotation binds `Typeface` instances with an optional style. Requires support libraries
+   26.0.0-beta1 or newer.
+ * New: `@BindAnim` annotation binds `Animation` instances.
+ * New: Generate `R2` constants for animation, layout, menu, plurals, styles, and styleables.
+ * Fix: Properly catch and re-throw type cast exceptions when method binding arguments do not match.
+
+
+Version 8.6.0 *(2017-05-16)*
+----------------------------
+
+ * Plugin was ported to Kotlin and updated to support future Android Gradle plugin versions.
+ * Fix: Properly handle multiple library modules using Butter Knife and defining the same ID.
+ * Fix: Use the same classloader of the binding target to load the generated view binding class.
+
+
+Version 8.5.1 *(2017-01-24)*
+----------------------------
+
+ * Fix: Tweak bundled ProGuard rules to only retain the two-argument constructor accessed via reflection.
+
+
+Version 8.5.0 *(2017-01-23)*
+----------------------------
+
+ * Emit `@SuppressLint` when using `@OnTouch` to avoid a lint warning.
+ * Migrate lint checks from Lombok AST to JetBrains PSI.
+ * Annotations are no longer claimed by the processor.
+ * Based on the minimum SDK version (as specified by `butterknife.minSdk` until http://b.android.com/187527 is
+   released) the generated code now changes to use newer APIs when available.
+ * Generated classes now include single-argument overloads for `View`, `Activity`, and `Dialog` subclasses.
+ * Generated classes are no longer generic.
+ * Minimum supported SDK is now 9.
+
+
+Version 8.4.0 *(2016-08-26)*
+----------------------------
+
+ * New: `@BindFloat` annotation for dimensions whose format is of type 'float'. See the annotation for more
+   information.
+ * Generated constructors are now annotated with `@UiThread` and non-final, base classes `unbind()` methods
+   are annotated with `@CallSuper`.
+
+
+Version 8.3.0 *(2016-08-23)*
+----------------------------
+
+ * New: Support for Jack compiler in application projects.
+ * Fix: Generate ~20% less code and ~40% less methods.
+ * Fix: Allow `@BindView` to reference types which are generated by other annotation processors.
+ * Experimental: The generated view binding class can now be used directly. This allows ProGuard shrinking,
+   optimization, and obfuscation to work without any rules being needed. For a class `Test`, the binding
+   class will be named `Test_ViewBinding`. Calling its constructor will bind the instance passed in, and
+   the create object is also the implementation of `Unbinder` that can be used to unbind the views.
+   Note: The API of this generated code is subject to backwards-incompatible changes until v9.0.
+
+
+Version 8.2.1 *(2016-07-11)*
+----------------------------
+
+ * Fix: Do not emit `android.R` imports in generated code.
+ * Fix: Ensure the processor does not crash when scanning for `R` classes. This can occur when used in a
+   Kotlin project.
+
+
+Version 8.2.0 *(2016-07-10)*
+----------------------------
+
+ * New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for
+   details.
+ * New: Generated code now emits `R` references instead of raw integer IDs.
+ * Fix: `@OnPageChange` listener binding now uses the 'add'/'remove' methods on `ViewPager` instead of 'set'.
+
+
+Version 8.1.0 *(2016-06-14)*
+----------------------------
+
+ * New: Change the structure of generated view binders to optimize for performance and generated code. This
+   should result in faster binding (not that it's slow) and a reduction of methods.
+ * Fix: Call the correct method on `TextView` to unbind `@OnTextChanged` uses.
+ * Fix: Properly handle package names which contain uppercase letters.
+
+
+Version 8.0.1 *(2016-04-27)*
+----------------------------
+
+ * Fix: ProGuard rules now prevent obfuscation of only types which reference ButterKnife annotations.
+ * Eliminate some of the generated machinery when referenced from `final` types.
+
+
+Version 8.0.0 *(2016-04-25)*
+----------------------------
+
+ *  `@Bind` becomes `@BindView` and `@BindViews` (one view and multiple views, respectively).
+ *  Calls to `bind` now return an `Unbinder` instance which can be used to `null` references. This replaces
+    the `unbind` API and adds support for being able to clear listeners.
+ *  New: `@BindArray` binds `String`, `CharSequence`, and `int` arrays and `TypeArray` to fields.
+ *  New: `@BindBitmap` binds `Bitmap` instances from resources to fields.
+ *  `@BindDrawable` now supports a `tint` field which accepts a theme attribute.
+ *  The runtime and compiler are now split into two artifacts.
+
+    ```groovy
+    compile 'com.jakewharton:butterknife:8.0.0'
+    apt 'com.jakewharton:butterknife-compiler:8.0.0'
+    ```
+ *  New: `apply` overloads which accept a single view and arrays of views.
+ *  ProGuard rules now ship inside of the library and are included automatically.
+ *  `@Optional` annotation is back to mark methods as being optional.
+
+
 Version 7.0.1 *(2015-06-30)*
 ----------------------------
 
diff --git a/README.md b/README.md
index dbbcf19f..c9a97a17 100644
--- a/README.md
+++ b/README.md
@@ -6,7 +6,7 @@ Butter Knife
 Field and method binding for Android views which uses annotation processing to generate boilerplate
 code for you.
 
- * Eliminate `findViewById` calls by using `@Bind` on fields.
+ * Eliminate `findViewById` calls by using `@BindView` on fields.
  * Group multiple views in a list or array. Operate on all of them at once with actions,
    setters, or properties.
  * Eliminate anonymous inner-classes for listeners by annotating methods with `@OnClick` and others.
@@ -14,11 +14,10 @@ code for you.
 
 ```java
 class ExampleActivity extends Activity {
-  @Bind(R.id.user) EditText username;
-  @Bind(R.id.pass) EditText password;
+  @BindView(R.id.user) EditText username;
+  @BindView(R.id.pass) EditText password;
 
-  @BindString(R.string.login_error)
-  String loginErrorMessage;
+  @BindString(R.string.login_error) String loginErrorMessage;
 
   @OnClick(R.id.submit) void submit() {
     // TODO call server...
@@ -42,50 +41,52 @@ __Remember: A butter knife is like [a dagger][1] only infinitely less sharp.__
 Download
 --------
 
-Download [the latest JAR][2] or grab via Maven:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>7.0.1</version>
-</dependency>
-```
-or Gradle:
 ```groovy
-compile 'com.jakewharton:butterknife:7.0.1'
+dependencies {
+  compile 'com.jakewharton:butterknife:8.8.1'
+  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
+}
 ```
 
-For the SNAPSHOT version:
-```xml
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife</artifactId>
-  <version>8.0.0-SNAPSHOT</version>
-</dependency>
-<dependency>
-  <groupId>com.jakewharton</groupId>
-  <artifactId>butterknife-compiler</artifactId>
-  <version>8.0.0-SNAPSHOT</version>
-  <optional>true</optional>
-</dependency>
-```
-or Gradle:
+If you are using Kotlin, replace `annotationProcessor` with `kapt`.
+
+Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+
+
+
+Library projects
+--------------------
+
+To use Butter Knife in a library, add the plugin to your `buildscript`:
+
 ```groovy
 buildscript {
+  repositories {
+    mavenCentral()
+   }
   dependencies {
-    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+    classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
   }
 }
+```
 
-apply plugin: 'com.neenbedankt.android-apt'
+and then apply it in your module:
 
-dependencies {
-  compile 'com.jakewharton:butterknife:8.0.0-SNAPSHOT'
-  apt 'com.jakewharton:butterknife-compiler:8.0.0-SNAPSHOT'
+```groovy
+apply plugin: 'com.android.library'
+apply plugin: 'com.jakewharton.butterknife'
+```
+
+Now make sure you use `R2` instead of `R` inside all Butter Knife annotations.
+
+```java
+class ExampleActivity extends Activity {
+  @BindView(R2.id.user) EditText username;
+  @BindView(R2.id.pass) EditText password;
+...
 }
 ```
 
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
 
 
 License
diff --git a/RELEASING.md b/RELEASING.md
new file mode 100644
index 00000000..9f872c7b
--- /dev/null
+++ b/RELEASING.md
@@ -0,0 +1,16 @@
+Releasing
+========
+
+ 1. Change the version in `gradle.properties` to a non-SNAPSHOT version.
+ 2. Update the `CHANGELOG.md` for the impending release.
+ 3. Update the `README.md` with the new version.
+ 4. `git commit -am "Prepare for release X.Y.Z."` (where X.Y.Z is the new version)
+ 5. `./gradlew clean uploadArchives`.
+ 6. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.
+ 7. `git tag -a X.Y.X -m "Version X.Y.Z"` (where X.Y.Z is the new version)
+ 8. Update the `gradle.properties` to the next SNAPSHOT version.
+ 9. `git commit -am "Prepare next development version."`
+ 10. `git push && git push --tags`
+ 11. Update the two sample modules to point to the newly released version.
+
+If step 5 or 6 fails, drop the Sonatype repo, fix the problem, commit, and start again at step 5.
diff --git a/build.gradle b/build.gradle
index 16704f1f..1e4d9a72 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,63 +1,96 @@
+apply plugin: 'com.github.ben-manes.versions'
+
+buildscript {
+  ext.versions = [
+      'minSdk': 14,
+      'compileSdk': 26,
+
+      'supportLibrary': '26.0.2',
+      'androidPlugin': '3.0.0-beta7',
+      'androidTools': '26.0.0-beta7',
+      'kotlin': '1.1.51',
+
+      'release': '8.8.1',
+  ]
+
+  ext.deps = [
+      android: [
+          'runtime': 'com.google.android:android:4.1.1.4',
+          'gradlePlugin': "com.android.tools.build:gradle:${versions.androidPlugin}",
+      ],
+      'support': [
+          'compat': "com.android.support:support-compat:${versions.supportLibrary}",
+          'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
+          'test': [
+              'runner': 'com.android.support.test:runner:1.0.1',
+          ],
+      ],
+      'lint': [
+          'core': "com.android.tools.lint:lint:${versions.androidTools}",
+          'api': "com.android.tools.lint:lint-api:${versions.androidTools}",
+          'checks': "com.android.tools.lint:lint-checks:${versions.androidTools}",
+          'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
+      ],
+      javapoet: 'com.squareup:javapoet:1.9.0',
+      javaparser: 'com.github.javaparser:javaparser-core:3.3.5',
+      junit: 'junit:junit:4.12',
+      truth: 'com.google.truth:truth:0.35',
+      robolectric: 'org.robolectric:robolectric:3.4.2',
+      compiletesting: 'com.google.testing.compile:compile-testing:0.12',
+      'auto': [
+          'service': 'com.google.auto.service:auto-service:1.0-rc3',
+          'common': 'com.google.auto:auto-common:0.8',
+      ],
+      'guava': 'com.google.guava:guava:23.0',
+      'release': [
+          'runtime': "com.jakewharton:butterknife:${versions.release}",
+          'compiler': "com.jakewharton:butterknife-compiler:${versions.release}"
+      ],
+      'kotlin': [
+          'stdLibJre8': "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}",
+      ]
+  ]
+
+  repositories {
+    mavenCentral()
+    jcenter()
+    google()
+  }
+
+  dependencies {
+    classpath deps.android.gradlePlugin
+    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
+    classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
+  }
+}
+
 subprojects { project ->
   group = GROUP
   version = VERSION_NAME
 
   repositories {
     mavenCentral()
+    jcenter()
+    google()
   }
 
-  apply plugin: 'checkstyle'
+  if (!project.name.equals('butterknife-gradle-plugin')) {
+    apply plugin: 'checkstyle'
 
-  task checkstyle(type: Checkstyle) {
-    configFile rootProject.file('checkstyle.xml')
-    source 'src/main/java'
-    ignoreFailures false
-    showViolations true
-    include '**/*.java'
+    task checkstyle(type: Checkstyle) {
+      configFile rootProject.file('checkstyle.xml')
+      source 'src/main/java'
+      ignoreFailures false
+      showViolations true
+      include '**/*.java'
 
-    classpath = files()
-  }
-
-  afterEvaluate {
-    if (project.tasks.findByName('check')) {
-      check.dependsOn('checkstyle')
+      classpath = files()
     }
-  }
 
-  buildscript {
-    repositories {
-      mavenCentral()
-    }
-    dependencies {
-      classpath 'com.android.tools.build:gradle:1.3.1'
-      classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
+    afterEvaluate {
+      if (project.tasks.findByName('check')) {
+        check.dependsOn('checkstyle')
+      }
     }
   }
 }
-
-ext {
-  minSdkVersion = 8
-  targetSdkVersion = 23
-  compileSdkVersion = 23
-  buildToolsVersion = '23.0.1'
-  sourceCompatibilityVersion = JavaVersion.VERSION_1_7
-  targetCompatibilityVersion = JavaVersion.VERSION_1_7
-}
-
-ext.deps = [
-    // Android
-    android: 'com.google.android:android:2.1.2',
-    supportv4: 'com.android.support:support-v4:23.0.1',
-    supportAnnotations: 'com.android.support:support-annotations:23.0.1',
-
-    // Square
-    javapoet: 'com.squareup:javapoet:1.4.0',
-
-    // Test dependencies
-    junit: 'junit:junit:4.12',
-    truth: 'com.google.truth:truth:0.27',
-    robolectric: 'org.robolectric:robolectric:2.2',
-    compiletesting: 'com.google.testing.compile:compile-testing:0.7',
-    autoservice: 'com.google.auto.service:auto-service:1.0-rc2',
-    autocommon: 'com.google.auto:auto-common:0.4'
-]
diff --git a/butterknife-annotations/build.gradle b/butterknife-annotations/build.gradle
index b7955fe6..f96179a7 100644
--- a/butterknife-annotations/build.gradle
+++ b/butterknife-annotations/build.gradle
@@ -1,30 +1,17 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
-
-targetCompatibility = JavaVersion.VERSION_1_7
 sourceCompatibility = JavaVersion.VERSION_1_7
+targetCompatibility = JavaVersion.VERSION_1_7
 
 checkstyle {
   configFile rootProject.file('checkstyle.xml')
   showViolations true
 }
 
-configurations {
-  provided
-  compile.extendsFrom provided
-}
-
 dependencies {
-  provided deps.android
-  compile deps.supportAnnotations
+  compileOnly deps.android.runtime
+  api deps.support.annotations
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-annotations/src/main/java/butterknife/BindAnim.java b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
new file mode 100644
index 00000000..62c30778
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindAnim.java
@@ -0,0 +1,21 @@
+package butterknife;
+
+import android.support.annotation.AnimRes;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified animation resource ID.
+ * <pre><code>
+ * {@literal @}BindAnim(R.anim.fade_in) Animation fadeIn;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindAnim {
+  /** Animation resource ID to which the field will be bound. */
+  @AnimRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFloat.java b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
new file mode 100644
index 00000000..49a1a482
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFloat.java
@@ -0,0 +1,24 @@
+package butterknife;
+
+import android.support.annotation.DimenRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified dimension resource ID whose type is explicitly defined as float.
+ * <p>
+ * This is different than simply reading a normal dimension as a float value which
+ * {@link BindDimen @BindDimen} supports. The resource must be defined as a float like
+ * {@code <item name="whatever" format="float" type="dimen">1.1</item>}.
+ * <pre><code>
+ * {@literal @}BindFloat(R.dimen.image_ratio) float imageRatio;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindFloat {
+  /** Float resource ID to which the field will be bound. */
+  @DimenRes int value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/BindFont.java b/butterknife-annotations/src/main/java/butterknife/BindFont.java
new file mode 100644
index 00000000..5e6e7666
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java
@@ -0,0 +1,35 @@
+package butterknife;
+
+import android.graphics.Typeface;
+import android.support.annotation.IntDef;
+import android.support.annotation.RestrictTo;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the specified font resource ID.
+ * <pre><code>
+ * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindFont {
+  /** Font resource ID to which the field will be bound. */
+  /* TODO support lib 26.0.0: @FontRes */ int value();
+
+  @TypefaceStyle int style() default Typeface.NORMAL;
+
+  @IntDef({
+      Typeface.NORMAL,
+      Typeface.BOLD,
+      Typeface.ITALIC,
+      Typeface.BOLD_ITALIC
+  })
+  @RestrictTo(LIBRARY)
+  @interface TypefaceStyle {
+  }
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/Bind.java b/butterknife-annotations/src/main/java/butterknife/BindView.java
similarity index 82%
rename from butterknife-annotations/src/main/java/butterknife/Bind.java
rename to butterknife-annotations/src/main/java/butterknife/BindView.java
index 82454a7a..4770bf69 100644
--- a/butterknife-annotations/src/main/java/butterknife/Bind.java
+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java
@@ -11,11 +11,11 @@
  * Bind a field to the view for the specified ID. The view will automatically be cast to the field
  * type.
  * <pre><code>
- * {@literal @}Bind(R.id.title) TextView title;
+ * {@literal @}BindView(R.id.title) TextView title;
  * </code></pre>
  */
 @Retention(CLASS) @Target(FIELD)
-public @interface Bind {
+public @interface BindView {
   /** View ID to which the field will be bound. */
-  @IdRes int[] value();
+  @IdRes int value();
 }
diff --git a/butterknife-annotations/src/main/java/butterknife/BindViews.java b/butterknife-annotations/src/main/java/butterknife/BindViews.java
new file mode 100644
index 00000000..07a0499c
--- /dev/null
+++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java
@@ -0,0 +1,22 @@
+package butterknife;
+
+import android.support.annotation.IdRes;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.CLASS;
+
+/**
+ * Bind a field to the view for the specified ID. The view will automatically be cast to the field
+ * type.
+ * <pre><code>
+ * {@literal @}BindViews({ R.id.title, R.id.subtitle })
+ * List&lt;TextView&gt; titles;
+ * </code></pre>
+ */
+@Retention(CLASS) @Target(FIELD)
+public @interface BindViews {
+  /** View IDs to which the field will be bound. */
+  @IdRes int[] value();
+}
diff --git a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
index 7dc81b42..3c792e6d 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java
@@ -31,7 +31,8 @@
 @Retention(CLASS)
 @ListenerClass(
     targetType = "android.support.v4.view.ViewPager",
-    setter = "setOnPageChangeListener",
+    setter = "addOnPageChangeListener",
+    remover = "removeOnPageChangeListener",
     type = "android.support.v4.view.ViewPager.OnPageChangeListener",
     callbacks = OnPageChange.Callback.class
 )
diff --git a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
index 5669ba6f..89adb820 100644
--- a/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java
@@ -36,6 +36,7 @@
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "addTextChangedListener",
+    remover = "removeTextChangedListener",
     type = "android.text.TextWatcher",
     callbacks = OnTextChanged.Callback.class
 )
diff --git a/butterknife-annotations/src/main/java/butterknife/Unbinder.java b/butterknife-annotations/src/main/java/butterknife/Unbinder.java
deleted file mode 100644
index 1bb9a617..00000000
--- a/butterknife-annotations/src/main/java/butterknife/Unbinder.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package butterknife;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.CLASS;
-
-/**
- * Bind a target field to an un-binder instance. Use when binding in a fragment to clear view
- * references in the {@code onDestroyView} callback.
- * <pre><code>
- * {@literal @}Unbinder ButterKnife.Unbinder unbinder;
- * </code></pre>
- */
-@Retention(CLASS)
-@Target(FIELD)
-public @interface Unbinder {
-}
diff --git a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
index 82101cc5..e6d3ed5f 100644
--- a/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
+++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java
@@ -10,9 +10,15 @@
 public @interface ListenerClass {
   String targetType();
 
-  /** Name of the setter method on the {@link #targetType() target type} for the listener. */
+  /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */
   String setter();
 
+  /**
+   * Name of the method on the {@linkplain #targetType() target type} to remove the listener. If
+   * empty {@link #setter()} will be used by default.
+   */
+  String remover() default "";
+
   /** Fully-qualified class name of the listener type. */
   String type();
 
diff --git a/butterknife-compiler/build.gradle b/butterknife-compiler/build.gradle
index 85d2bd78..5775e644 100644
--- a/butterknife-compiler/build.gradle
+++ b/butterknife-compiler/build.gradle
@@ -1,25 +1,19 @@
-apply plugin: 'java'
+apply plugin: 'java-library'
 apply plugin: 'checkstyle'
 
-def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
-def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
-for (File file : sdkHandler.sdkLoader.repositories) {
-  repositories.maven {
-    url = file.toURI()
-  }
-}
+sourceCompatibility = JavaVersion.VERSION_1_7
+targetCompatibility = JavaVersion.VERSION_1_7
 
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.autoservice
-  compile deps.autocommon
-  compile deps.javapoet
+  implementation project(':butterknife-annotations')
+  implementation deps.auto.common
+  implementation deps.guava
+  api deps.javapoet
+  compileOnly deps.auto.service
+  compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.robolectric
-  testCompile deps.compiletesting
-  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation deps.junit
+  testImplementation deps.truth
 }
 
 checkstyle {
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
deleted file mode 100644
index 45f92454..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java
+++ /dev/null
@@ -1,529 +0,0 @@
-package butterknife.compiler;
-
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
-import com.squareup.javapoet.AnnotationSpec;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.ParameterizedTypeName;
-import com.squareup.javapoet.TypeName;
-import com.squareup.javapoet.TypeSpec;
-import com.squareup.javapoet.TypeVariableName;
-import com.squareup.javapoet.WildcardTypeName;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static butterknife.compiler.ButterKnifeProcessor.NO_ID;
-import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
-import static java.util.Collections.singletonList;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PUBLIC;
-import static javax.lang.model.element.Modifier.STATIC;
-
-final class BindingClass {
-  private static final ClassName FINDER = ClassName.get("butterknife.internal", "Finder");
-  private static final ClassName VIEW_BINDER = ClassName.get("butterknife.internal", "ViewBinder");
-  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");
-  private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
-  private static final ClassName VIEW = ClassName.get("android.view", "View");
-  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
-  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
-  private static final ClassName THEME = RESOURCES.nestedClass("Theme");
-  private static final ClassName BITMAP_FACTORY =
-      ClassName.get("android.graphics", "BitmapFactory");
-
-  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();
-  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();
-  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();
-  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();
-  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();
-  private final String classPackage;
-  private final String className;
-  private final String targetClass;
-  private String parentViewBinder;
-  private UnbinderBinding unbinderBinding;
-
-  BindingClass(String classPackage, String className, String targetClass) {
-    this.classPackage = classPackage;
-    this.className = className;
-    this.targetClass = targetClass;
-  }
-
-  void requiresUnbinder(String unbinderFieldName) {
-    unbinderBinding = new UnbinderBinding(classPackage, className, unbinderFieldName);
-  }
-
-  void addBitmap(FieldBitmapBinding binding) {
-    bitmapBindings.add(binding);
-  }
-
-  void addDrawable(FieldDrawableBinding binding) {
-    drawableBindings.add(binding);
-  }
-
-  void addField(int id, FieldViewBinding binding) {
-    getOrCreateViewBindings(id).addFieldBinding(binding);
-  }
-
-  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {
-    collectionBindings.put(binding, ids);
-  }
-
-  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,
-      MethodViewBinding binding) {
-    ViewBindings viewBindings = getOrCreateViewBindings(id);
-    if (viewBindings.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
-      return false;
-    }
-    viewBindings.addMethodBinding(listener, method, binding);
-    return true;
-  }
-
-  void addResource(FieldResourceBinding binding) {
-    resourceBindings.add(binding);
-  }
-
-  void setParentViewBinder(String parentViewBinder) {
-    this.parentViewBinder = parentViewBinder;
-  }
-
-  ViewBindings getViewBinding(int id) {
-    return viewIdMap.get(id);
-  }
-
-  private ViewBindings getOrCreateViewBindings(int id) {
-    ViewBindings viewId = viewIdMap.get(id);
-    if (viewId == null) {
-      viewId = new ViewBindings(id);
-      viewIdMap.put(id, viewId);
-    }
-    return viewId;
-  }
-
-  JavaFile brewJava() {
-    TypeSpec.Builder result = TypeSpec.classBuilder(className)
-        .addModifiers(PUBLIC)
-        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));
-
-    if (parentViewBinder != null) {
-      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),
-          TypeVariableName.get("T")));
-    } else {
-      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));
-    }
-
-    if (hasUnbinder()) {
-      result.addType(createUnbinderClass());
-    }
-
-    result.addMethod(createBindMethod());
-
-    return JavaFile.builder(classPackage, result.build())
-        .addFileComment("Generated code from Butter Knife. Do not modify!")
-        .build();
-  }
-
-  private TypeSpec createUnbinderClass() {
-    ClassName targetClassName = ClassName.bestGuess(targetClass);
-
-    MethodSpec unbinderConstructor = MethodSpec.constructorBuilder()
-        .addParameter(targetClassName, "target")
-        .addStatement("this.$1N = $1N", "target")
-        .build();
-
-    TypeSpec.Builder result =
-        TypeSpec.classBuilder(unbinderBinding.getUnbinderClassName().simpleName())
-        .addSuperinterface(UNBINDER)
-        .addModifiers(PRIVATE, STATIC, FINAL)
-        .addField(targetClassName, "target", PRIVATE)
-        .addMethod(unbinderConstructor);
-
-    // Even if there are no bindings we need to implement the interface method.
-    MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind")
-        .addAnnotation(Override.class)
-        .addModifiers(PUBLIC);
-
-    // Throw exception if unbind called twice.
-    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
-        "Bindings already cleared.");
-
-    for (ViewBindings bindings : viewIdMap.values()) {
-      addFieldAndUnbindStatement(result, unbindMethod, bindings);
-      for (FieldViewBinding fieldBinding : bindings.getFieldBindings()) {
-        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());
-      }
-    }
-
-    for (FieldCollectionViewBinding fieldCollectionBinding : collectionBindings.keySet()) {
-      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());
-    }
-
-    unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());
-    unbindMethod.addStatement("target = null");
-    result.addMethod(unbindMethod.build());
-
-    return result.build();
-  }
-
-  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBindings bindings) {
-    // Only add fields to the unbinder if there are method bindings.
-    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
-        bindings.getMethodBindings();
-    if (classMethodBindings.isEmpty()) {
-      return;
-    }
-
-    // Using view id for name uniqueness.
-    String fieldName = "view" + bindings.getId();
-    result.addField(VIEW, fieldName);
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      unbindMethod.beginControlFlow("if ($L != null)", fieldName);
-    }
-
-    for (ListenerClass listenerClass : classMethodBindings.keySet()) {
-      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
-        unbindMethod.addStatement("(($T) $L).$L(null)", bestGuess(listenerClass.targetType()),
-            fieldName, listenerClass.setter());
-      } else {
-        unbindMethod.addStatement("$L.$L(null)", fieldName, listenerClass.setter());
-      }
-    }
-
-    if (needsNullChecked) {
-      unbindMethod.endControlFlow();
-    }
-  }
-
-  private MethodSpec createBindMethod() {
-    MethodSpec.Builder result = MethodSpec.methodBuilder("bind")
-        .addAnnotation(Override.class)
-        .addModifiers(PUBLIC)
-        .addParameter(FINDER, "finder", FINAL)
-        .addParameter(TypeVariableName.get("T"), "target", FINAL)
-        .addParameter(Object.class, "source");
-
-    if (hasResourceBindings()) {
-      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
-      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
-          .addMember("value", "$S", "ResourceType")
-          .build());
-    }
-
-    // Emit a call to the superclass binder, if any.
-    if (parentViewBinder != null) {
-      result.addStatement("super.bind(finder, target, source)");
-    }
-
-    // If the caller requested an unbinder, we need to create an instance of it.
-    if (hasUnbinder()) {
-      result.addStatement("$T unbinder = new $T($N)", unbinderBinding.getUnbinderClassName(),
-          unbinderBinding.getUnbinderClassName(), "target");
-    }
-
-    if (!viewIdMap.isEmpty() || !collectionBindings.isEmpty()) {
-      // Local variable in which all views will be temporarily stored.
-      result.addStatement("$T view", VIEW);
-
-      // Loop over each view bindings and emit it.
-      for (ViewBindings bindings : viewIdMap.values()) {
-        addViewBindings(result, bindings);
-      }
-
-      // Loop over each collection binding and emit it.
-      for (Map.Entry<FieldCollectionViewBinding, int[]> entry : collectionBindings.entrySet()) {
-        emitCollectionBinding(result, entry.getKey(), entry.getValue());
-      }
-    }
-
-    // Bind unbinder if was requested.
-    if (hasUnbinder()) {
-      result.addStatement("target.$L = unbinder", unbinderBinding.getUnbinderFieldName());
-    }
-
-    if (hasResourceBindings()) {
-      if (hasResourceBindingsNeedingTheme()) {
-        result.addStatement("$T context = finder.getContext(source)", CONTEXT);
-        result.addStatement("$T res = context.getResources()", RESOURCES);
-        result.addStatement("$T theme = context.getTheme()", THEME);
-      } else {
-        result.addStatement("$T res = finder.getContext(source).getResources()", RESOURCES);
-      }
-
-      for (FieldBitmapBinding binding : bitmapBindings) {
-        result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),
-            BITMAP_FACTORY, binding.getId());
-      }
-
-      for (FieldDrawableBinding binding : drawableBindings) {
-        int tintAttributeId = binding.getTintAttributeId();
-        if (tintAttributeId != 0) {
-          result.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",
-              binding.getName(), UTILS, binding.getId(), tintAttributeId);
-        } else {
-          result.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),
-              UTILS, binding.getId());
-        }
-      }
-
-      for (FieldResourceBinding binding : resourceBindings) {
-        // TODO being themeable is poor correlation to the need to use Utils.
-        if (binding.isThemeable()) {
-          result.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),
-              UTILS, binding.getMethod(), binding.getId());
-        } else {
-          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),
-              binding.getId());
-        }
-      }
-    }
-
-    return result.build();
-  }
-
-  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,
-      int[] ids) {
-    String ofName;
-    switch (binding.getKind()) {
-      case ARRAY:
-        ofName = "arrayOf";
-        break;
-      case LIST:
-        ofName = "listOf";
-        break;
-      default:
-        throw new IllegalStateException("Unknown kind: " + binding.getKind());
-    }
-
-    CodeBlock.Builder builder = CodeBlock.builder();
-    for (int i = 0; i < ids.length; i++) {
-      if (i > 0) {
-        builder.add(", ");
-      }
-      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";
-      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],
-          asHumanDescription(singletonList(binding)));
-    }
-
-    result.addStatement("target.$L = $T.$L($L)", binding.getName(), UTILS, ofName, builder.build());
-  }
-
-  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {
-    List<ViewBinding> requiredViewBindings = bindings.getRequiredBindings();
-    if (requiredViewBindings.isEmpty()) {
-      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());
-    } else {
-      if (bindings.getId() == NO_ID) {
-        result.addStatement("view = target");
-      } else {
-        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),
-            asHumanDescription(requiredViewBindings));
-      }
-    }
-
-    addFieldBindings(result, bindings);
-    addMethodBindings(result, bindings);
-  }
-
-  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {
-    Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();
-    for (FieldViewBinding fieldBinding : fieldBindings) {
-      if (fieldBinding.requiresCast()) {
-        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),
-            bindings.getId(), asHumanDescription(fieldBindings));
-      } else {
-        result.addStatement("target.$L = view", fieldBinding.getName());
-      }
-    }
-  }
-
-  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {
-    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
-        bindings.getMethodBindings();
-    if (classMethodBindings.isEmpty()) {
-      return;
-    }
-
-    // We only need to emit the null check if there are zero required bindings.
-    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
-    if (needsNullChecked) {
-      result.beginControlFlow("if (view != null)");
-    }
-
-    // Add the view reference to the unbinder.
-    if (hasUnbinder()) {
-      result.addStatement("unbinder.$L = view", "view" + bindings.getId());
-    }
-
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
-        : classMethodBindings.entrySet()) {
-      ListenerClass listener = e.getKey();
-      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
-
-      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
-          .superclass(ClassName.bestGuess(listener.type()));
-
-      for (ListenerMethod method : getListenerMethods(listener)) {
-        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
-            .addAnnotation(Override.class)
-            .addModifiers(PUBLIC)
-            .returns(bestGuess(method.returnType()));
-        String[] parameterTypes = method.parameters();
-        for (int i = 0, count = parameterTypes.length; i < count; i++) {
-          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
-        }
-
-        boolean hasReturnType = !"void".equals(method.returnType());
-        CodeBlock.Builder builder = CodeBlock.builder();
-        if (hasReturnType) {
-          builder.add("return ");
-        }
-
-        if (methodBindings.containsKey(method)) {
-          for (MethodViewBinding binding : methodBindings.get(method)) {
-            builder.add("target.$L(", binding.getName());
-            List<Parameter> parameters = binding.getParameters();
-            String[] listenerParameters = method.parameters();
-            for (int i = 0, count = parameters.size(); i < count; i++) {
-              if (i > 0) {
-                builder.add(", ");
-              }
-
-              Parameter parameter = parameters.get(i);
-              int listenerPosition = parameter.getListenerPosition();
-
-              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
-                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),
-                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);
-              } else {
-                builder.add("p$L", listenerPosition);
-              }
-            }
-            builder.add(");\n");
-          }
-        } else if (hasReturnType) {
-          builder.add("$L;\n", method.defaultReturn());
-        }
-        callbackMethod.addCode(builder.build());
-        callback.addMethod(callbackMethod.build());
-      }
-
-      if (!VIEW_TYPE.equals(listener.targetType())) {
-        result.addStatement("(($T) view).$L($L)", bestGuess(listener.targetType()),
-            listener.setter(), callback.build());
-      } else {
-        result.addStatement("view.$L($L)", listener.setter(), callback.build());
-      }
-    }
-
-    if (needsNullChecked) {
-      result.endControlFlow();
-    }
-  }
-
-  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
-    if (listener.method().length == 1) {
-      return Arrays.asList(listener.method());
-    }
-
-    try {
-      List<ListenerMethod> methods = new ArrayList<>();
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
-        Field callbackField = callbacks.getField(callbackMethod.name());
-        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-        if (method == null) {
-          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-        }
-        methods.add(method);
-      }
-      return methods;
-    } catch (NoSuchFieldException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  static String asHumanDescription(Collection<? extends ViewBinding> bindings) {
-    Iterator<? extends ViewBinding> iterator = bindings.iterator();
-    switch (bindings.size()) {
-      case 1:
-        return iterator.next().getDescription();
-      case 2:
-        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
-      default:
-        StringBuilder builder = new StringBuilder();
-        for (int i = 0, count = bindings.size(); i < count; i++) {
-          if (i != 0) {
-            builder.append(", ");
-          }
-          if (i == count - 1) {
-            builder.append("and ");
-          }
-          builder.append(iterator.next().getDescription());
-        }
-        return builder.toString();
-    }
-  }
-
-  static TypeName bestGuess(String type) {
-    switch (type) {
-      case "void": return TypeName.VOID;
-      case "boolean": return TypeName.BOOLEAN;
-      case "byte": return TypeName.BYTE;
-      case "char": return TypeName.CHAR;
-      case "double": return TypeName.DOUBLE;
-      case "float": return TypeName.FLOAT;
-      case "int": return TypeName.INT;
-      case "long": return TypeName.LONG;
-      case "short": return TypeName.SHORT;
-      default:
-        int left = type.indexOf('<');
-        if (left != -1) {
-          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
-          List<TypeName> typeArguments = new ArrayList<>();
-          do {
-            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
-            left = type.indexOf('<', left + 1);
-          } while (left != -1);
-          return ParameterizedTypeName.get(typeClassName,
-              typeArguments.toArray(new TypeName[typeArguments.size()]));
-        }
-        return ClassName.bestGuess(type);
-    }
-  }
-
-  boolean hasUnbinder() {
-    return unbinderBinding != null;
-  }
-
-  private boolean hasResourceBindings() {
-    return !(bitmapBindings.isEmpty() && drawableBindings.isEmpty() && resourceBindings.isEmpty());
-  }
-
-  private boolean hasResourceBindingsNeedingTheme() {
-    if (!drawableBindings.isEmpty()) {
-      return true;
-    }
-    for (FieldResourceBinding resourceBinding : resourceBindings) {
-      if (resourceBinding.isThemeable()) {
-        return true;
-      }
-    }
-    return false;
-  }
-}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
new file mode 100644
index 00000000..c5c7bc46
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -0,0 +1,777 @@
+package butterknife.compiler;
+
+import butterknife.OnTouch;
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import com.google.common.collect.ImmutableList;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.WildcardTypeName;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
+
+import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
+import static com.google.auto.common.MoreElements.getPackage;
+import static java.util.Collections.singletonList;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PUBLIC;
+
+/** A set of all the bindings requested by a single type. */
+final class BindingSet {
+  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");
+  private static final ClassName VIEW = ClassName.get("android.view", "View");
+  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");
+  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");
+  private static final ClassName UI_THREAD =
+      ClassName.get("android.support.annotation", "UiThread");
+  private static final ClassName CALL_SUPER =
+      ClassName.get("android.support.annotation", "CallSuper");
+  private static final ClassName SUPPRESS_LINT =
+      ClassName.get("android.annotation", "SuppressLint");
+  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");
+  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");
+  static final ClassName CONTEXT_COMPAT =
+      ClassName.get("android.support.v4.content", "ContextCompat");
+  static final ClassName ANIMATION_UTILS =
+          ClassName.get("android.view.animation", "AnimationUtils");
+
+  private final TypeName targetTypeName;
+  private final ClassName bindingClassName;
+  private final boolean isFinal;
+  private final boolean isView;
+  private final boolean isActivity;
+  private final boolean isDialog;
+  private final ImmutableList<ViewBinding> viewBindings;
+  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
+  private final ImmutableList<ResourceBinding> resourceBindings;
+  private final BindingSet parentBinding;
+
+  private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
+      ImmutableList<FieldCollectionViewBinding> collectionBindings,
+      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
+    this.isFinal = isFinal;
+    this.targetTypeName = targetTypeName;
+    this.bindingClassName = bindingClassName;
+    this.isView = isView;
+    this.isActivity = isActivity;
+    this.isDialog = isDialog;
+    this.viewBindings = viewBindings;
+    this.collectionBindings = collectionBindings;
+    this.resourceBindings = resourceBindings;
+    this.parentBinding = parentBinding;
+  }
+
+  JavaFile brewJava(int sdk, boolean debuggable) {
+    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable))
+        .addFileComment("Generated code from Butter Knife. Do not modify!")
+        .build();
+  }
+
+  private TypeSpec createType(int sdk, boolean debuggable) {
+    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())
+        .addModifiers(PUBLIC);
+    if (isFinal) {
+      result.addModifiers(FINAL);
+    }
+
+    if (parentBinding != null) {
+      result.superclass(parentBinding.bindingClassName);
+    } else {
+      result.addSuperinterface(UNBINDER);
+    }
+
+    if (hasTargetField()) {
+      result.addField(targetTypeName, "target", PRIVATE);
+    }
+
+    if (isView) {
+      result.addMethod(createBindingConstructorForView());
+    } else if (isActivity) {
+      result.addMethod(createBindingConstructorForActivity());
+    } else if (isDialog) {
+      result.addMethod(createBindingConstructorForDialog());
+    }
+    if (!constructorNeedsView()) {
+      // Add a delegating constructor with a target type + view signature for reflective use.
+      result.addMethod(createBindingViewDelegateConstructor());
+    }
+    result.addMethod(createBindingConstructor(sdk, debuggable));
+
+    if (hasViewBindings() || parentBinding == null) {
+      result.addMethod(createBindingUnbindMethod(result));
+    }
+
+    return result.build();
+  }
+
+  private MethodSpec createBindingViewDelegateConstructor() {
+    return MethodSpec.constructorBuilder()
+        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    "
+                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",
+            bindingClassName, targetTypeName, CONTEXT)
+        .addAnnotation(Deprecated.class)
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target")
+        .addParameter(VIEW, "source")
+        .addStatement(("this(target, source.getContext())"))
+        .build();
+  }
+
+  private MethodSpec createBindingConstructorForView() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target)");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForActivity() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target)");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForDialog() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {
+    MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC);
+
+    if (hasMethodBindings()) {
+      constructor.addParameter(targetTypeName, "target", FINAL);
+    } else {
+      constructor.addParameter(targetTypeName, "target");
+    }
+
+    if (constructorNeedsView()) {
+      constructor.addParameter(VIEW, "source");
+    } else {
+      constructor.addParameter(CONTEXT, "context");
+    }
+
+    if (hasUnqualifiedResourceBindings()) {
+      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime.
+      constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
+          .addMember("value", "$S", "ResourceType")
+          .build());
+    }
+
+    if (hasOnTouchMethodBindings()) {
+      constructor.addAnnotation(AnnotationSpec.builder(SUPPRESS_LINT)
+          .addMember("value", "$S", "ClickableViewAccessibility")
+          .build());
+    }
+
+    if (parentBinding != null) {
+      if (parentBinding.constructorNeedsView()) {
+        constructor.addStatement("super(target, source)");
+      } else if (constructorNeedsView()) {
+        constructor.addStatement("super(target, source.getContext())");
+      } else {
+        constructor.addStatement("super(target, context)");
+      }
+      constructor.addCode("\n");
+    }
+    if (hasTargetField()) {
+      constructor.addStatement("this.target = target");
+      constructor.addCode("\n");
+    }
+
+    if (hasViewBindings()) {
+      if (hasViewLocal()) {
+        // Local variable in which all views will be temporarily stored.
+        constructor.addStatement("$T view", VIEW);
+      }
+      for (ViewBinding binding : viewBindings) {
+        addViewBinding(constructor, binding, debuggable);
+      }
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        constructor.addStatement("$L", binding.render(debuggable));
+      }
+
+      if (!resourceBindings.isEmpty()) {
+        constructor.addCode("\n");
+      }
+    }
+
+    if (!resourceBindings.isEmpty()) {
+      if (constructorNeedsView()) {
+        constructor.addStatement("$T context = source.getContext()", CONTEXT);
+      }
+      if (hasResourceBindingsNeedingResource(sdk)) {
+        constructor.addStatement("$T res = context.getResources()", RESOURCES);
+      }
+      for (ResourceBinding binding : resourceBindings) {
+        constructor.addStatement("$L", binding.render(sdk));
+      }
+    }
+
+    return constructor.build();
+  }
+
+  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass) {
+    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind")
+        .addAnnotation(Override.class)
+        .addModifiers(PUBLIC);
+    if (!isFinal && parentBinding == null) {
+      result.addAnnotation(CALL_SUPER);
+    }
+
+    if (hasTargetField()) {
+      if (hasFieldBindings()) {
+        result.addStatement("$T target = this.target", targetTypeName);
+      }
+      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,
+          "Bindings already cleared.");
+      result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");
+      result.addCode("\n");
+      for (ViewBinding binding : viewBindings) {
+        if (binding.getFieldBinding() != null) {
+          result.addStatement("target.$L = null", binding.getFieldBinding().getName());
+        }
+      }
+      for (FieldCollectionViewBinding binding : collectionBindings) {
+        result.addStatement("target.$L = null", binding.name);
+      }
+    }
+
+    if (hasMethodBindings()) {
+      result.addCode("\n");
+      for (ViewBinding binding : viewBindings) {
+        addFieldAndUnbindStatement(bindingClass, result, binding);
+      }
+    }
+
+    if (parentBinding != null) {
+      result.addCode("\n");
+      result.addStatement("super.unbind()");
+    }
+    return result.build();
+  }
+
+  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
+      ViewBinding bindings) {
+    // Only add fields to the binding if there are method bindings.
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        bindings.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    String fieldName = bindings.isBoundToRoot() ? "viewSource" : "view" + bindings.getId().value;
+    result.addField(VIEW, fieldName, PRIVATE);
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = bindings.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      unbindMethod.beginControlFlow("if ($N != null)", fieldName);
+    }
+
+    for (ListenerClass listenerClass : classMethodBindings.keySet()) {
+      // We need to keep a reference to the listener
+      // in case we need to unbind it via a remove method.
+      boolean requiresRemoval = !"".equals(listenerClass.remover());
+      String listenerField = "null";
+      if (requiresRemoval) {
+        TypeName listenerClassName = bestGuess(listenerClass.type());
+        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
+        result.addField(listenerClassName, listenerField, PRIVATE);
+      }
+
+      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
+        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),
+            fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
+      } else {
+        unbindMethod.addStatement("$N.$N($N)", fieldName,
+            removerOrSetter(listenerClass, requiresRemoval), listenerField);
+      }
+
+      if (requiresRemoval) {
+        unbindMethod.addStatement("$N = null", listenerField);
+      }
+    }
+
+    unbindMethod.addStatement("$N = null", fieldName);
+
+    if (needsNullChecked) {
+      unbindMethod.endControlFlow();
+    }
+  }
+
+  private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {
+    return requiresRemoval
+        ? listenerClass.remover()
+        : listenerClass.setter();
+  }
+
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
+    if (binding.isSingleFieldBinding()) {
+      // Optimize the common case where there's a single binding directly to a field.
+      FieldViewBinding fieldBinding = binding.getFieldBinding();
+      CodeBlock.Builder builder = CodeBlock.builder()
+          .add("target.$L = ", fieldBinding.getName());
+
+      boolean requiresCast = requiresCast(fieldBinding.getType());
+      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {
+        if (requiresCast) {
+          builder.add("($T) ", fieldBinding.getType());
+        }
+        builder.add("source.findViewById($L)", binding.getId().code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
+        }
+        builder.add("(source, $L", binding.getId().code);
+        if (fieldBinding.isRequired() || requiresCast) {
+          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));
+        }
+        if (requiresCast) {
+          builder.add(", $T.class", fieldBinding.getRawType());
+        }
+        builder.add(")");
+      }
+      result.addStatement("$L", builder.build());
+      return;
+    }
+
+    List<MemberViewBinding> requiredBindings = binding.getRequiredBindings();
+    if (!debuggable || requiredBindings.isEmpty()) {
+      result.addStatement("view = source.findViewById($L)", binding.getId().code);
+    } else if (!binding.isBoundToRoot()) {
+      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,
+          binding.getId().code, asHumanDescription(requiredBindings));
+    }
+
+    addFieldBinding(result, binding, debuggable);
+    addMethodBindings(result, binding, debuggable);
+  }
+
+  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
+    FieldViewBinding fieldBinding = binding.getFieldBinding();
+    if (fieldBinding != null) {
+      if (requiresCast(fieldBinding.getType())) {
+        if (debuggable) {
+          result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",
+              fieldBinding.getName(), UTILS, binding.getId().code,
+              asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());
+        } else {
+          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),
+              fieldBinding.getType());
+        }
+      } else {
+        result.addStatement("target.$L = view", fieldBinding.getName());
+      }
+    }
+  }
+
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
+      boolean debuggable) {
+    Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
+        binding.getMethodBindings();
+    if (classMethodBindings.isEmpty()) {
+      return;
+    }
+
+    // We only need to emit the null check if there are zero required bindings.
+    boolean needsNullChecked = binding.getRequiredBindings().isEmpty();
+    if (needsNullChecked) {
+      result.beginControlFlow("if (view != null)");
+    }
+
+    // Add the view reference to the binding.
+    String fieldName = "viewSource";
+    String bindName = "source";
+    if (!binding.isBoundToRoot()) {
+      fieldName = "view" + binding.getId().value;
+      bindName = "view";
+    }
+    result.addStatement("$L = $N", fieldName, bindName);
+
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> e
+        : classMethodBindings.entrySet()) {
+      ListenerClass listener = e.getKey();
+      Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
+
+      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
+          .superclass(ClassName.bestGuess(listener.type()));
+
+      for (ListenerMethod method : getListenerMethods(listener)) {
+        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
+            .addAnnotation(Override.class)
+            .addModifiers(PUBLIC)
+            .returns(bestGuess(method.returnType()));
+        String[] parameterTypes = method.parameters();
+        for (int i = 0, count = parameterTypes.length; i < count; i++) {
+          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);
+        }
+
+        boolean hasReturnType = !"void".equals(method.returnType());
+        CodeBlock.Builder builder = CodeBlock.builder();
+        if (hasReturnType) {
+          builder.add("return ");
+        }
+
+        if (methodBindings.containsKey(method)) {
+          for (MethodViewBinding methodBinding : methodBindings.get(method)) {
+            builder.add("target.$L(", methodBinding.getName());
+            List<Parameter> parameters = methodBinding.getParameters();
+            String[] listenerParameters = method.parameters();
+            for (int i = 0, count = parameters.size(); i < count; i++) {
+              if (i > 0) {
+                builder.add(", ");
+              }
+
+              Parameter parameter = parameters.get(i);
+              int listenerPosition = parameter.getListenerPosition();
+
+              if (parameter.requiresCast(listenerParameters[listenerPosition])) {
+                if (debuggable) {
+                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,
+                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,
+                      parameter.getType());
+                } else {
+                  builder.add("($T) p$L", parameter.getType(), listenerPosition);
+                }
+              } else {
+                builder.add("p$L", listenerPosition);
+              }
+            }
+            builder.add(");\n");
+          }
+        } else if (hasReturnType) {
+          builder.add("$L;\n", method.defaultReturn());
+        }
+        callbackMethod.addCode(builder.build());
+        callback.addMethod(callbackMethod.build());
+      }
+
+      boolean requiresRemoval = listener.remover().length() != 0;
+      String listenerField = null;
+      if (requiresRemoval) {
+        TypeName listenerClassName = bestGuess(listener.type());
+        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
+        result.addStatement("$L = $L", listenerField, callback.build());
+      }
+
+      if (!VIEW_TYPE.equals(listener.targetType())) {
+        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,
+            listener.setter(), requiresRemoval ? listenerField : callback.build());
+      } else {
+        result.addStatement("$N.$L($L)", bindName, listener.setter(),
+            requiresRemoval ? listenerField : callback.build());
+      }
+    }
+
+    if (needsNullChecked) {
+      result.endControlFlow();
+    }
+  }
+
+  private static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  static String asHumanDescription(Collection<? extends MemberViewBinding> bindings) {
+    Iterator<? extends MemberViewBinding> iterator = bindings.iterator();
+    switch (bindings.size()) {
+      case 1:
+        return iterator.next().getDescription();
+      case 2:
+        return iterator.next().getDescription() + " and " + iterator.next().getDescription();
+      default:
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          if (i != 0) {
+            builder.append(", ");
+          }
+          if (i == count - 1) {
+            builder.append("and ");
+          }
+          builder.append(iterator.next().getDescription());
+        }
+        return builder.toString();
+    }
+  }
+
+  private static TypeName bestGuess(String type) {
+    switch (type) {
+      case "void": return TypeName.VOID;
+      case "boolean": return TypeName.BOOLEAN;
+      case "byte": return TypeName.BYTE;
+      case "char": return TypeName.CHAR;
+      case "double": return TypeName.DOUBLE;
+      case "float": return TypeName.FLOAT;
+      case "int": return TypeName.INT;
+      case "long": return TypeName.LONG;
+      case "short": return TypeName.SHORT;
+      default:
+        int left = type.indexOf('<');
+        if (left != -1) {
+          ClassName typeClassName = ClassName.bestGuess(type.substring(0, left));
+          List<TypeName> typeArguments = new ArrayList<>();
+          do {
+            typeArguments.add(WildcardTypeName.subtypeOf(Object.class));
+            left = type.indexOf('<', left + 1);
+          } while (left != -1);
+          return ParameterizedTypeName.get(typeClassName,
+              typeArguments.toArray(new TypeName[typeArguments.size()]));
+        }
+        return ClassName.bestGuess(type);
+    }
+  }
+
+  /** True when this type's bindings require a view hierarchy. */
+  private boolean hasViewBindings() {
+    return !viewBindings.isEmpty() || !collectionBindings.isEmpty();
+  }
+
+  /** True when this type's bindings use raw integer values instead of {@code R} references. */
+  private boolean hasUnqualifiedResourceBindings() {
+    for (ResourceBinding binding : resourceBindings) {
+      if (!binding.id().qualifed) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /** True when this type's bindings use Resource directly instead of Context. */
+  private boolean hasResourceBindingsNeedingResource(int sdk) {
+    for (ResourceBinding binding : resourceBindings) {
+      if (binding.requiresResources(sdk)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean hasMethodBindings() {
+    for (ViewBinding bindings : viewBindings) {
+      if (!bindings.getMethodBindings().isEmpty()) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean hasOnTouchMethodBindings() {
+    for (ViewBinding bindings : viewBindings) {
+      if (bindings.getMethodBindings()
+          .containsKey(OnTouch.class.getAnnotation(ListenerClass.class))) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private boolean hasFieldBindings() {
+    for (ViewBinding bindings : viewBindings) {
+      if (bindings.getFieldBinding() != null) {
+        return true;
+      }
+    }
+    return !collectionBindings.isEmpty();
+  }
+
+  private boolean hasTargetField() {
+    return hasFieldBindings() || hasMethodBindings();
+  }
+
+  private boolean hasViewLocal() {
+    for (ViewBinding bindings : viewBindings) {
+      if (bindings.requiresLocal()) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /** True if this binding requires a view. Otherwise only a context is needed. */
+  private boolean constructorNeedsView() {
+    return hasViewBindings() //
+        || parentBinding != null && parentBinding.constructorNeedsView();
+  }
+
+  static boolean requiresCast(TypeName type) {
+    return !VIEW_TYPE.equals(type.toString());
+  }
+
+  @Override public String toString() {
+    return bindingClassName.toString();
+  }
+
+  static Builder newBuilder(TypeElement enclosingElement) {
+    TypeMirror typeMirror = enclosingElement.asType();
+
+    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);
+    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);
+    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);
+
+    TypeName targetType = TypeName.get(typeMirror);
+    if (targetType instanceof ParameterizedTypeName) {
+      targetType = ((ParameterizedTypeName) targetType).rawType;
+    }
+
+    String packageName = getPackage(enclosingElement).getQualifiedName().toString();
+    String className = enclosingElement.getQualifiedName().toString().substring(
+        packageName.length() + 1).replace('.', '$');
+    ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
+
+    boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
+    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);
+  }
+
+  static final class Builder {
+    private final TypeName targetTypeName;
+    private final ClassName bindingClassName;
+    private final boolean isFinal;
+    private final boolean isView;
+    private final boolean isActivity;
+    private final boolean isDialog;
+
+    private BindingSet parentBinding;
+
+    private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();
+    private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =
+        ImmutableList.builder();
+    private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
+
+    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+        boolean isView, boolean isActivity, boolean isDialog) {
+      this.targetTypeName = targetTypeName;
+      this.bindingClassName = bindingClassName;
+      this.isFinal = isFinal;
+      this.isView = isView;
+      this.isActivity = isActivity;
+      this.isDialog = isDialog;
+    }
+
+    void addField(Id id, FieldViewBinding binding) {
+      getOrCreateViewBindings(id).setFieldBinding(binding);
+    }
+
+    void addFieldCollection(FieldCollectionViewBinding binding) {
+      collectionBindings.add(binding);
+    }
+
+    boolean addMethod(
+        Id id,
+        ListenerClass listener,
+        ListenerMethod method,
+        MethodViewBinding binding) {
+      ViewBinding.Builder viewBinding = getOrCreateViewBindings(id);
+      if (viewBinding.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {
+        return false;
+      }
+      viewBinding.addMethodBinding(listener, method, binding);
+      return true;
+    }
+
+    void addResource(ResourceBinding binding) {
+      resourceBindings.add(binding);
+    }
+
+    void setParent(BindingSet parent) {
+      this.parentBinding = parent;
+    }
+
+    String findExistingBindingName(Id id) {
+      ViewBinding.Builder builder = viewIdMap.get(id);
+      if (builder == null) {
+        return null;
+      }
+      FieldViewBinding fieldBinding = builder.fieldBinding;
+      if (fieldBinding == null) {
+        return null;
+      }
+      return fieldBinding.getName();
+    }
+
+    private ViewBinding.Builder getOrCreateViewBindings(Id id) {
+      ViewBinding.Builder viewId = viewIdMap.get(id);
+      if (viewId == null) {
+        viewId = new ViewBinding.Builder(id);
+        viewIdMap.put(id, viewId);
+      }
+      return viewId;
+    }
+
+    BindingSet build() {
+      ImmutableList.Builder<ViewBinding> viewBindings = ImmutableList.builder();
+      for (ViewBinding.Builder builder : viewIdMap.values()) {
+        viewBindings.add(builder.build());
+      }
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,
+          viewBindings.build(), collectionBindings.build(), resourceBindings.build(),
+          parentBinding);
+    }
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index ae6fa7c9..8faac8b1 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -1,14 +1,18 @@
 package butterknife.compiler;
 
-import butterknife.Bind;
+import butterknife.BindAnim;
 import butterknife.BindArray;
 import butterknife.BindBitmap;
 import butterknife.BindBool;
 import butterknife.BindColor;
 import butterknife.BindDimen;
 import butterknife.BindDrawable;
+import butterknife.BindFloat;
+import butterknife.BindFont;
 import butterknife.BindInt;
 import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
 import butterknife.OnCheckedChanged;
 import butterknife.OnClick;
 import butterknife.OnEditorAction;
@@ -21,24 +25,35 @@
 import butterknife.OnTextChanged;
 import butterknife.OnTouch;
 import butterknife.Optional;
-import butterknife.Unbinder;
+import butterknife.compiler.FieldTypefaceBinding.TypefaceStyles;
 import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
+import com.google.common.collect.ImmutableSet;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeName;
+import com.sun.source.tree.ClassTree;
+import com.sun.source.util.Trees;
+import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.tree.JCTree;
+import com.sun.tools.javac.tree.TreeScanner;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
-import java.util.Iterator;
+import java.util.Deque;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
@@ -51,36 +66,43 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
+import javax.lang.model.element.Name;
+import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
+import javax.tools.Diagnostic.Kind;
 
 import static javax.lang.model.element.ElementKind.CLASS;
 import static javax.lang.model.element.ElementKind.INTERFACE;
 import static javax.lang.model.element.ElementKind.METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
-import static javax.tools.Diagnostic.Kind.ERROR;
 
 @AutoService(Processor.class)
 public final class ButterKnifeProcessor extends AbstractProcessor {
-  static final int NO_ID = -1;
+  // TODO remove when http://b.android.com/187527 is released.
+  private static final String OPTION_SDK_INT = "butterknife.minSdk";
+  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";
+  static final Id NO_ID = new Id(-1);
   static final String VIEW_TYPE = "android.view.View";
-  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";
+  static final String ACTIVITY_TYPE = "android.app.Activity";
+  static final String DIALOG_TYPE = "android.app.Dialog";
   private static final String COLOR_STATE_LIST_TYPE = "android.content.res.ColorStateList";
   private static final String BITMAP_TYPE = "android.graphics.Bitmap";
+  private static final String ANIMATION_TYPE = "android.view.animation.Animation";
   private static final String DRAWABLE_TYPE = "android.graphics.drawable.Drawable";
   private static final String TYPED_ARRAY_TYPE = "android.content.res.TypedArray";
+  private static final String TYPEFACE_TYPE = "android.graphics.Typeface";
   private static final String NULLABLE_ANNOTATION_NAME = "Nullable";
-  private static final String ITERABLE_TYPE = "java.lang.Iterable<?>";
   private static final String STRING_TYPE = "java.lang.String";
-  private static final String UNBINDER_TYPE = "butterknife.ButterKnife.Unbinder<?>";
   private static final String LIST_TYPE = List.class.getCanonicalName();
   private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//
       OnCheckedChanged.class, //
@@ -96,82 +118,118 @@
       OnTouch.class //
   );
 
+  private static final List<String> SUPPORTED_TYPES = Arrays.asList(
+      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
+  );
+
   private Elements elementUtils;
   private Types typeUtils;
   private Filer filer;
+  private Trees trees;
+
+  private int sdk = 1;
+  private boolean debuggable = true;
+
+  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
 
+    String sdk = env.getOptions().get(OPTION_SDK_INT);
+    if (sdk != null) {
+      try {
+        this.sdk = Integer.parseInt(sdk);
+      } catch (NumberFormatException e) {
+        env.getMessager()
+            .printMessage(Kind.WARNING, "Unable to parse supplied minSdk option '"
+                + sdk
+                + "'. Falling back to API 1 support.");
+      }
+    }
+
+    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
+
     elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
+    try {
+      trees = Trees.instance(processingEnv);
+    } catch (IllegalArgumentException ignored) {
+    }
+  }
+
+  @Override public Set<String> getSupportedOptions() {
+    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);
   }
 
   @Override public Set<String> getSupportedAnnotationTypes() {
     Set<String> types = new LinkedHashSet<>();
-
-    types.add(Bind.class.getCanonicalName());
-
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      types.add(listener.getCanonicalName());
+    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
+      types.add(annotation.getCanonicalName());
     }
-
-    types.add(BindArray.class.getCanonicalName());
-    types.add(BindBitmap.class.getCanonicalName());
-    types.add(BindBool.class.getCanonicalName());
-    types.add(BindColor.class.getCanonicalName());
-    types.add(BindDimen.class.getCanonicalName());
-    types.add(BindDrawable.class.getCanonicalName());
-    types.add(BindInt.class.getCanonicalName());
-    types.add(BindString.class.getCanonicalName());
-    types.add(Unbinder.class.getCanonicalName());
-
     return types;
   }
 
+  private Set<Class<? extends Annotation>> getSupportedAnnotations() {
+    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
+
+    annotations.add(BindAnim.class);
+    annotations.add(BindArray.class);
+    annotations.add(BindBitmap.class);
+    annotations.add(BindBool.class);
+    annotations.add(BindColor.class);
+    annotations.add(BindDimen.class);
+    annotations.add(BindDrawable.class);
+    annotations.add(BindFloat.class);
+    annotations.add(BindFont.class);
+    annotations.add(BindInt.class);
+    annotations.add(BindString.class);
+    annotations.add(BindView.class);
+    annotations.add(BindViews.class);
+    annotations.addAll(LISTENERS);
+
+    return annotations;
+  }
+
   @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = findAndParseTargets(env);
+    Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(env);
 
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
+    for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {
       TypeElement typeElement = entry.getKey();
-      BindingClass bindingClass = entry.getValue();
+      BindingSet binding = entry.getValue();
 
+      JavaFile javaFile = binding.brewJava(sdk, debuggable);
       try {
-        bindingClass.brewJava().writeTo(filer);
+        javaFile.writeTo(filer);
       } catch (IOException e) {
-        error(typeElement, "Unable to write view binder for type %s: %s", typeElement,
-            e.getMessage());
+        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());
       }
     }
 
-    return true;
+    return false;
   }
 
-  private Map<TypeElement, BindingClass> findAndParseTargets(RoundEnvironment env) {
-    Map<TypeElement, BindingClass> targetClassMap = new LinkedHashMap<>();
-    Set<String> erasedTargetNames = new LinkedHashSet<>();
+  private Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {
+    Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();
+    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
+
+    scanForRClasses(env);
 
-    // Process each @Bind element.
-    for (Element element : env.getElementsAnnotatedWith(Bind.class)) {
+    // Process each @BindAnim element.
+    for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseBind(element, targetClassMap, erasedTargetNames);
+        parseResourceAnimation(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, Bind.class, e);
+        logParsingError(element, BindAnim.class, e);
       }
     }
 
-    // Process each annotation that corresponds to a listener.
-    for (Class<? extends Annotation> listener : LISTENERS) {
-      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);
-    }
-
     // Process each @BindArray element.
     for (Element element : env.getElementsAnnotatedWith(BindArray.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceArray(element, targetClassMap, erasedTargetNames);
+        parseResourceArray(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindArray.class, e);
       }
@@ -181,7 +239,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindBitmap.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceBitmap(element, targetClassMap, erasedTargetNames);
+        parseResourceBitmap(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindBitmap.class, e);
       }
@@ -191,7 +249,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindBool.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceBool(element, targetClassMap, erasedTargetNames);
+        parseResourceBool(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindBool.class, e);
       }
@@ -201,7 +259,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindColor.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceColor(element, targetClassMap, erasedTargetNames);
+        parseResourceColor(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindColor.class, e);
       }
@@ -211,7 +269,7 @@
     for (Element element : env.getElementsAnnotatedWith(BindDimen.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceDimen(element, targetClassMap, erasedTargetNames);
+        parseResourceDimen(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindDimen.class, e);
       }
@@ -221,17 +279,37 @@
     for (Element element : env.getElementsAnnotatedWith(BindDrawable.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceDrawable(element, targetClassMap, erasedTargetNames);
+        parseResourceDrawable(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindDrawable.class, e);
       }
     }
 
+    // Process each @BindFloat element.
+    for (Element element : env.getElementsAnnotatedWith(BindFloat.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceFloat(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindFloat.class, e);
+      }
+    }
+
+    // Process each @BindFont element.
+    for (Element element : env.getElementsAnnotatedWith(BindFont.class)) {
+      if (!SuperficialValidation.validateElement(element)) continue;
+      try {
+        parseResourceFont(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindFont.class, e);
+      }
+    }
+
     // Process each @BindInt element.
     for (Element element : env.getElementsAnnotatedWith(BindInt.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceInt(element, targetClassMap, erasedTargetNames);
+        parseResourceInt(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindInt.class, e);
       }
@@ -241,31 +319,66 @@
     for (Element element : env.getElementsAnnotatedWith(BindString.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseResourceString(element, targetClassMap, erasedTargetNames);
+        parseResourceString(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         logParsingError(element, BindString.class, e);
       }
     }
 
-    // Process each @Unbinder element.
-    for (Element element : env.getElementsAnnotatedWith(Unbinder.class)) {
-      if (!SuperficialValidation.validateElement(element)) continue;
+    // Process each @BindView element.
+    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {
+      // we don't SuperficialValidation.validateElement(element)
+      // so that an unresolved View type can be generated by later processing rounds
+      try {
+        parseBindView(element, builderMap, erasedTargetNames);
+      } catch (Exception e) {
+        logParsingError(element, BindView.class, e);
+      }
+    }
+
+    // Process each @BindViews element.
+    for (Element element : env.getElementsAnnotatedWith(BindViews.class)) {
+      // we don't SuperficialValidation.validateElement(element)
+      // so that an unresolved View type can be generated by later processing rounds
       try {
-        parseBindUnbinder(element, targetClassMap, erasedTargetNames);
+        parseBindViews(element, builderMap, erasedTargetNames);
       } catch (Exception e) {
-        logParsingError(element, Unbinder.class, e);
+        logParsingError(element, BindViews.class, e);
       }
     }
 
-    // Try to find a parent binder for each.
-    for (Map.Entry<TypeElement, BindingClass> entry : targetClassMap.entrySet()) {
-      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);
-      if (parentClassFqcn != null) {
-        entry.getValue().setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);
+    // Process each annotation that corresponds to a listener.
+    for (Class<? extends Annotation> listener : LISTENERS) {
+      findAndParseListener(env, listener, builderMap, erasedTargetNames);
+    }
+
+    // Associate superclass binders with their subclass binders. This is a queue-based tree walk
+    // which starts at the roots (superclasses) and walks to the leafs (subclasses).
+    Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =
+        new ArrayDeque<>(builderMap.entrySet());
+    Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();
+    while (!entries.isEmpty()) {
+      Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();
+
+      TypeElement type = entry.getKey();
+      BindingSet.Builder builder = entry.getValue();
+
+      TypeElement parentType = findParentType(type, erasedTargetNames);
+      if (parentType == null) {
+        bindingMap.put(type, builder.build());
+      } else {
+        BindingSet parentBinding = bindingMap.get(parentType);
+        if (parentBinding != null) {
+          builder.setParent(parentBinding);
+          bindingMap.put(type, builder.build());
+        } else {
+          // Has a superclass binding but we haven't built it yet. Re-enqueue for later.
+          entries.addLast(entry);
+        }
       }
     }
 
-    return targetClassMap;
+    return bindingMap;
   }
 
   private void logParsingError(Element element, Class<? extends Annotation> annotation,
@@ -327,97 +440,82 @@ private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationCl
     return false;
   }
 
-  private void parseBind(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    // Verify common generated code restrictions.
-    if (isInaccessibleViaGeneratedCode(Bind.class, "fields", element)
-        || isBindingInWrongPackage(Bind.class, element)) {
-      return;
-    }
-
-    TypeMirror elementType = element.asType();
-    if (elementType.getKind() == TypeKind.ARRAY) {
-      parseBindMany(element, targetClassMap, erasedTargetNames);
-    } else if (LIST_TYPE.equals(doubleErasure(elementType))) {
-      parseBindMany(element, targetClassMap, erasedTargetNames);
-    } else if (isSubtypeOfType(elementType, ITERABLE_TYPE)) {
-      error(element, "@%s must be a List or array. (%s.%s)", Bind.class.getSimpleName(),
-          ((TypeElement) element.getEnclosingElement()).getQualifiedName(),
-          element.getSimpleName());
-    } else {
-      parseBindOne(element, targetClassMap, erasedTargetNames);
-    }
-  }
-
-  private void parseBindOne(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
+  private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
+      Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindView.class, "fields", element)
+        || isBindingInWrongPackage(BindView.class, element);
+
     // Verify that the target type extends from View.
     TypeMirror elementType = element.asType();
     if (elementType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) elementType;
       elementType = typeVariable.getUpperBound();
     }
+    Name qualifiedName = enclosingElement.getQualifiedName();
+    Name simpleName = element.getSimpleName();
     if (!isSubtypeOfType(elementType, VIEW_TYPE) && !isInterface(elementType)) {
-      error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
-          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    // Assemble information on the field.
-    int[] ids = element.getAnnotation(Bind.class).value();
-    if (ids.length != 1) {
-      error(element, "@%s for a view must only specify one ID. Found: %s. (%s.%s)",
-          Bind.class.getSimpleName(), Arrays.toString(ids), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
+      if (elementType.getKind() == TypeKind.ERROR) {
+        note(element, "@%s field with unresolved type (%s) "
+                + "must elsewhere be generated as a View or interface. (%s.%s)",
+            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);
+      } else {
+        error(element, "@%s fields must extend from View or be an interface. (%s.%s)",
+            BindView.class.getSimpleName(), qualifiedName, simpleName);
+        hasError = true;
+      }
     }
 
     if (hasError) {
       return;
     }
 
-    int id = ids[0];
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass != null) {
-      ViewBindings viewBindings = bindingClass.getViewBinding(id);
-      if (viewBindings != null) {
-        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
-        if (iterator.hasNext()) {
-          FieldViewBinding existingBinding = iterator.next();
-          error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
-              Bind.class.getSimpleName(), id, existingBinding.getName(),
-              enclosingElement.getQualifiedName(), element.getSimpleName());
-          return;
-        }
+    // Assemble information on the field.
+    int id = element.getAnnotation(BindView.class).value();
+
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    if (builder != null) {
+      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));
+      if (existingBindingName != null) {
+        error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
+            BindView.class.getSimpleName(), id, existingBindingName,
+            enclosingElement.getQualifiedName(), element.getSimpleName());
+        return;
       }
     } else {
-      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+      builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     }
 
-    String name = element.getSimpleName().toString();
+    String name = simpleName.toString();
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
-    FieldViewBinding binding = new FieldViewBinding(name, type, required);
-    bindingClass.addField(id, binding);
+    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
 
     // Add the type-erased version to the valid binding targets set.
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseBindMany(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
+  private QualifiedId elementToQualifiedId(Element element, int id) {
+    return new QualifiedId(elementUtils.getPackageOf(element), id);
+  }
+
+  private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
+      Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
+    // Start by verifying common generated code restrictions.
+    boolean hasError = isInaccessibleViaGeneratedCode(BindViews.class, "fields", element)
+        || isBindingInWrongPackage(BindViews.class, element);
+
     // Verify that the type is a List or an array.
     TypeMirror elementType = element.asType();
     String erasedType = doubleErasure(elementType);
     TypeMirror viewType = null;
-    FieldCollectionViewBinding.Kind kind;
+    FieldCollectionViewBinding.Kind kind = null;
     if (elementType.getKind() == TypeKind.ARRAY) {
       ArrayType arrayType = (ArrayType) elementType;
       viewType = arrayType.getComponentType();
@@ -427,7 +525,7 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
       List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
       if (typeArguments.size() != 1) {
         error(element, "@%s List must have a generic component. (%s.%s)",
-            Bind.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
             element.getSimpleName());
         hasError = true;
       } else {
@@ -435,7 +533,9 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
       }
       kind = FieldCollectionViewBinding.Kind.LIST;
     } else {
-      throw new AssertionError();
+      error(element, "@%s must be a List or array. (%s.%s)", BindViews.class.getSimpleName(),
+          enclosingElement.getQualifiedName(), element.getSimpleName());
+      hasError = true;
     }
     if (viewType != null && viewType.getKind() == TypeKind.TYPEVAR) {
       TypeVariable typeVariable = (TypeVariable) viewType;
@@ -444,43 +544,89 @@ private void parseBindMany(Element element, Map<TypeElement, BindingClass> targe
 
     // Verify that the target type extends from View.
     if (viewType != null && !isSubtypeOfType(viewType, VIEW_TYPE) && !isInterface(viewType)) {
-      error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
-          Bind.class.getSimpleName(), enclosingElement.getQualifiedName(), element.getSimpleName());
-      hasError = true;
-    }
-
-    if (hasError) {
-      return;
+      if (viewType.getKind() == TypeKind.ERROR) {
+        note(element, "@%s List or array with unresolved type (%s) "
+                + "must elsewhere be generated as a View or interface. (%s.%s)",
+            BindViews.class.getSimpleName(), viewType, enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+      } else {
+        error(element, "@%s List or array type must extend from View or be an interface. (%s.%s)",
+            BindViews.class.getSimpleName(), enclosingElement.getQualifiedName(),
+            element.getSimpleName());
+        hasError = true;
+      }
     }
 
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
-    int[] ids = element.getAnnotation(Bind.class).value();
+    int[] ids = element.getAnnotation(BindViews.class).value();
     if (ids.length == 0) {
-      error(element, "@%s must specify at least one ID. (%s.%s)", Bind.class.getSimpleName(),
+      error(element, "@%s must specify at least one ID. (%s.%s)", BindViews.class.getSimpleName(),
           enclosingElement.getQualifiedName(), element.getSimpleName());
-      return;
+      hasError = true;
     }
 
     Integer duplicateId = findDuplicate(ids);
     if (duplicateId != null) {
-      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)", Bind.class.getSimpleName(),
-          duplicateId, enclosingElement.getQualifiedName(), element.getSimpleName());
+      error(element, "@%s annotation contains duplicate ID %d. (%s.%s)",
+          BindViews.class.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
     }
 
     assert viewType != null; // Always false as hasError would have been true.
     TypeName type = TypeName.get(viewType);
     boolean required = isFieldRequired(element);
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldCollectionViewBinding binding = new FieldCollectionViewBinding(name, type, kind, required);
-    bindingClass.addFieldCollection(ids, binding);
+    List<Id> idVars = new ArrayList<>();
+    for (int id : ids) {
+      QualifiedId qualifiedId = elementToQualifiedId(element, id);
+      idVars.add(getId(qualifiedId));
+    }
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceAnimation(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is Animation.
+    if (!ANIMATION_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Animation'. (%s.%s)",
+          BindAnim.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindAnim.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindAnim.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindAnim.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldAnimationBinding(getId(qualifiedId), name));
 
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceBool(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceBool(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -503,16 +649,16 @@ private void parseResourceBool(Element element, Map<TypeElement, BindingClass> t
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBool.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getBoolean", false);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceColor(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceColor(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -539,17 +685,17 @@ private void parseResourceColor(Element element, Map<TypeElement, BindingClass>
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindColor.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
+        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
+            : FieldResourceBinding.Type.COLOR));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isColorStateList ? "getColorStateList" : "getColor", true);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceDimen(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceDimen(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -576,17 +722,16 @@ private void parseResourceDimen(Element element, Map<TypeElement, BindingClass>
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDimen.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
+        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name,
-        isInt ? "getDimensionPixelSize" : "getDimension", false);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceBitmap(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -609,16 +754,16 @@ private void parseResourceBitmap(Element element, Map<TypeElement, BindingClass>
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBitmap.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldBitmapBinding binding = new FieldBitmapBinding(id, name);
-    bindingClass.addBitmap(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceDrawable(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceDrawable(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -642,16 +787,88 @@ private void parseResourceDrawable(Element element, Map<TypeElement, BindingClas
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDrawable.class).value();
     int tint = element.getAnnotation(BindDrawable.class).tint();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));
+
+    erasedTargetNames.add(enclosingElement);
+  }
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldDrawableBinding binding = new FieldDrawableBinding(id, name, tint);
-    bindingClass.addDrawable(binding);
+  private void parseResourceFloat(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
-    erasedTargetNames.add(enclosingElement.toString());
+    // Verify that the target type is float.
+    if (element.asType().getKind() != TypeKind.FLOAT) {
+      error(element, "@%s field type must be 'float'. (%s.%s)",
+          BindFloat.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindFloat.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFloat.class, element);
+
+    if (hasError) {
+      return;
+    }
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    int id = element.getAnnotation(BindFloat.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));
+
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceInt(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceFont(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
+    boolean hasError = false;
+    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
+
+    // Verify that the target type is a Typeface.
+    if (!TYPEFACE_TYPE.equals(element.asType().toString())) {
+      error(element, "@%s field type must be 'Typeface'. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(),
+          element.getSimpleName());
+      hasError = true;
+    }
+
+    // Verify common generated code restrictions.
+    hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);
+    hasError |= isBindingInWrongPackage(BindFont.class, element);
+
+    // Assemble information on the field.
+    String name = element.getSimpleName().toString();
+    BindFont bindFont = element.getAnnotation(BindFont.class);
+
+    int styleValue = bindFont.style();
+    TypefaceStyles style = TypefaceStyles.fromValue(styleValue);
+    if (style == null) {
+      error(element, "@%s style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (%s.%s)",
+          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(), name);
+      hasError = true;
+    }
+
+    if (hasError) {
+      return;
+    }
+
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());
+    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));
+
+    erasedTargetNames.add(enclosingElement);
+  }
+
+  private void parseResourceInt(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -673,16 +890,16 @@ private void parseResourceInt(Element element, Map<TypeElement, BindingClass> ta
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindInt.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getInteger", false);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceString(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceString(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
@@ -705,22 +922,22 @@ private void parseResourceString(Element element, Map<TypeElement, BindingClass>
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindString.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(
+        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getString", false);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
-  private void parseResourceArray(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+  private void parseResourceArray(Element element,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     boolean hasError = false;
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
     // Verify that the target type is supported.
-    String methodName = getArrayResourceMethodName(element);
-    if (methodName == null) {
+    FieldResourceBinding.Type type = getArrayResourceMethodName(element);
+    if (type == null) {
       error(element,
           "@%s field type must be one of: String[], int[], CharSequence[], %s. (%s.%s)",
           BindArray.class.getSimpleName(), TYPED_ARRAY_TYPE, enclosingElement.getQualifiedName(),
@@ -739,72 +956,31 @@ private void parseResourceArray(Element element, Map<TypeElement, BindingClass>
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindArray.class).value();
+    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
+    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));
 
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    FieldResourceBinding binding = new FieldResourceBinding(id, name, methodName, false);
-    bindingClass.addResource(binding);
-
-    erasedTargetNames.add(enclosingElement.toString());
-  }
-
-  private void parseBindUnbinder(Element element, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
-    boolean hasError = false;
-    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
-
-    // Verify that the element type is ButterKnife.Unbinder.
-    TypeMirror elementType = element.asType();
-    if (!isSubtypeOfType(elementType, UNBINDER_TYPE) && !isInterface(elementType)) {
-      error(element,
-          "@%s filed must be of type ButterKnife.Unbinder. (%s.%s)",
-          Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),
-          element.getSimpleName());
-      hasError = true;
-    }
-
-    // Verify common restrictions for generated code.
-    hasError |= isInaccessibleViaGeneratedCode(Unbinder.class, "field", element);
-    hasError |= isBindingInWrongPackage(Unbinder.class, element);
-
-    if (hasError) {
-      return;
-    }
-
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass != null) {
-      if (bindingClass.hasUnbinder()) {
-        error(element,
-            "Only one filed should be annotated with @%s. (%s.%s)",
-            Unbinder.class.getSimpleName(), enclosingElement.getQualifiedName(),
-            element.getSimpleName());
-        return;
-      }
-    } else {
-      bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
-    }
-
-    bindingClass.requiresUnbinder(element.getSimpleName().toString());
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
   /**
    * Returns a method name from the {@link android.content.res.Resources} class for array resource
    * binding, null if the element type is not supported.
    */
-  private static String getArrayResourceMethodName(Element element) {
+  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {
     TypeMirror typeMirror = element.asType();
     if (TYPED_ARRAY_TYPE.equals(typeMirror.toString())) {
-      return "obtainTypedArray";
+      return FieldResourceBinding.Type.TYPED_ARRAY;
     }
     if (TypeKind.ARRAY.equals(typeMirror.getKind())) {
       ArrayType arrayType = (ArrayType) typeMirror;
       String componentType = arrayType.getComponentType().toString();
       if (STRING_TYPE.equals(componentType)) {
-        return "getStringArray";
+        return FieldResourceBinding.Type.STRING_ARRAY;
       } else if ("int".equals(componentType)) {
-        return "getIntArray";
+        return FieldResourceBinding.Type.INT_ARRAY;
       } else if ("java.lang.CharSequence".equals(componentType)) {
-        return "getTextArray";
+        return FieldResourceBinding.Type.TEXT_ARRAY;
       }
     }
     return null;
@@ -834,12 +1010,12 @@ private String doubleErasure(TypeMirror elementType) {
   }
 
   private void findAndParseListener(RoundEnvironment env,
-      Class<? extends Annotation> annotationClass, Map<TypeElement, BindingClass> targetClassMap,
-      Set<String> erasedTargetNames) {
+      Class<? extends Annotation> annotationClass,
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {
     for (Element element : env.getElementsAnnotatedWith(annotationClass)) {
       if (!SuperficialValidation.validateElement(element)) continue;
       try {
-        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);
+        parseListenerAnnotation(annotationClass, element, builderMap, erasedTargetNames);
       } catch (Exception e) {
         StringWriter stackTrace = new StringWriter();
         e.printStackTrace(new PrintWriter(stackTrace));
@@ -851,7 +1027,7 @@ private void findAndParseListener(RoundEnvironment env,
   }
 
   private void parseListenerAnnotation(Class<? extends Annotation> annotationClass, Element element,
-      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames)
+      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames)
       throws Exception {
     // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
     if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
@@ -894,24 +1070,13 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     for (int id : ids) {
-      if (id == NO_ID) {
+      if (id == NO_ID.value) {
         if (ids.length == 1) {
           if (!required) {
             error(element, "ID-free binding must not be annotated with @Optional. (%s.%s)",
                 enclosingElement.getQualifiedName(), element.getSimpleName());
             hasError = true;
           }
-
-          // Verify target type is valid for a binding without an id.
-          String targetType = listener.targetType();
-          if (!isSubtypeOfType(enclosingElement.asType(), targetType)
-              && !isInterface(enclosingElement.asType())) {
-            error(element, "@%s annotation without an ID may only be used with an object of type "
-                    + "\"%s\" or an interface. (%s.%s)",
-                annotationClass.getSimpleName(), targetType,
-                enclosingElement.getQualifiedName(), element.getSimpleName());
-            hasError = true;
-          }
         } else {
           error(element, "@%s annotation contains invalid ID %d. (%s.%s)",
               annotationClass.getSimpleName(), id, enclosingElement.getQualifiedName(),
@@ -989,7 +1154,9 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
           if (methodParameterUsed.get(j)) {
             continue;
           }
-          if (isSubtypeOfType(methodParameterType, parameterTypes[j])
+          if ((isSubtypeOfType(methodParameterType, parameterTypes[j])
+                  && isSubtypeOfType(methodParameterType, VIEW_TYPE))
+              || isTypeEqual(methodParameterType, parameterTypes[j])
               || isInterface(methodParameterType)) {
             parameters[i] = new Parameter(j, TypeName.get(methodParameterType));
             methodParameterUsed.set(j);
@@ -1036,9 +1203,10 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
-    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
+    BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     for (int id : ids) {
-      if (!bindingClass.addMethod(id, listener, method, binding)) {
+      QualifiedId qualifiedId = elementToQualifiedId(element, id);
+      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
@@ -1046,7 +1214,7 @@ private void parseListenerAnnotation(Class<? extends Annotation> annotationClass
     }
 
     // Add the type-erased version to the valid binding targets set.
-    erasedTargetNames.add(enclosingElement.toString());
+    erasedTargetNames.add(enclosingElement);
   }
 
   private boolean isInterface(TypeMirror typeMirror) {
@@ -1054,8 +1222,8 @@ private boolean isInterface(TypeMirror typeMirror) {
         && ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;
   }
 
-  private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
-    if (otherType.equals(typeMirror.toString())) {
+  static boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
+    if (isTypeEqual(typeMirror, otherType)) {
       return true;
     }
     if (typeMirror.getKind() != TypeKind.DECLARED) {
@@ -1094,27 +1262,22 @@ private boolean isSubtypeOfType(TypeMirror typeMirror, String otherType) {
     return false;
   }
 
-  private BindingClass getOrCreateTargetClass(Map<TypeElement, BindingClass> targetClassMap,
-      TypeElement enclosingElement) {
-    BindingClass bindingClass = targetClassMap.get(enclosingElement);
-    if (bindingClass == null) {
-      String targetType = enclosingElement.getQualifiedName().toString();
-      String classPackage = getPackageName(enclosingElement);
-      String className = getClassName(enclosingElement, classPackage) + BINDING_CLASS_SUFFIX;
-
-      bindingClass = new BindingClass(classPackage, className, targetType);
-      targetClassMap.put(enclosingElement, bindingClass);
-    }
-    return bindingClass;
+  private static boolean isTypeEqual(TypeMirror typeMirror, String otherType) {
+    return otherType.equals(typeMirror.toString());
   }
 
-  private static String getClassName(TypeElement type, String packageName) {
-    int packageLen = packageName.length() + 1;
-    return type.getQualifiedName().toString().substring(packageLen).replace('.', '$');
+  private BindingSet.Builder getOrCreateBindingBuilder(
+      Map<TypeElement, BindingSet.Builder> builderMap, TypeElement enclosingElement) {
+    BindingSet.Builder builder = builderMap.get(enclosingElement);
+    if (builder == null) {
+      builder = BindingSet.newBuilder(enclosingElement);
+      builderMap.put(enclosingElement, builder);
+    }
+    return builder;
   }
 
   /** Finds the parent binder type in the supplied set, if any. */
-  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
+  private TypeElement findParentType(TypeElement typeElement, Set<TypeElement> parents) {
     TypeMirror type;
     while (true) {
       type = typeElement.getSuperclass();
@@ -1122,9 +1285,8 @@ private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
         return null;
       }
       typeElement = (TypeElement) ((DeclaredType) type).asElement();
-      if (parents.contains(typeElement.toString())) {
-        String packageName = getPackageName(typeElement);
-        return packageName + "." + getClassName(typeElement, packageName);
+      if (parents.contains(typeElement)) {
+        return typeElement;
       }
     }
   }
@@ -1134,14 +1296,19 @@ private String findParentFqcn(TypeElement typeElement, Set<String> parents) {
   }
 
   private void error(Element element, String message, Object... args) {
+    printMessage(Kind.ERROR, element, message, args);
+  }
+
+  private void note(Element element, String message, Object... args) {
+    printMessage(Kind.NOTE, element, message, args);
+  }
+
+  private void printMessage(Kind kind, Element element, String message, Object[] args) {
     if (args.length > 0) {
       message = String.format(message, args);
     }
-    processingEnv.getMessager().printMessage(ERROR, message, element);
-  }
 
-  private String getPackageName(TypeElement type) {
-    return elementUtils.getPackageOf(type).getQualifiedName().toString();
+    processingEnv.getMessager().printMessage(kind, message, element);
   }
 
   private static boolean hasAnnotationWithName(Element element, String simpleName) {
@@ -1161,4 +1328,197 @@ private static boolean isFieldRequired(Element element) {
   private static boolean isListenerRequired(ExecutableElement element) {
     return element.getAnnotation(Optional.class) == null;
   }
+
+  private static AnnotationMirror getMirror(Element element,
+      Class<? extends Annotation> annotation) {
+    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
+      if (annotationMirror.getAnnotationType().toString().equals(annotation.getCanonicalName())) {
+        return annotationMirror;
+      }
+    }
+    return null;
+  }
+
+  private Id getId(QualifiedId qualifiedId) {
+    if (symbols.get(qualifiedId) == null) {
+      symbols.put(qualifiedId, new Id(qualifiedId.id));
+    }
+    return symbols.get(qualifiedId);
+  }
+
+  private void scanForRClasses(RoundEnvironment env) {
+    if (trees == null) return;
+
+    RClassScanner scanner = new RClassScanner();
+
+    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
+      for (Element element : env.getElementsAnnotatedWith(annotation)) {
+        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+        if (tree != null) { // tree can be null if the references are compiled types and not source
+          scanner.setCurrentPackage(elementUtils.getPackageOf(element));
+          tree.accept(scanner);
+        }
+      }
+    }
+
+    for (Map.Entry<PackageElement, Set<Symbol.ClassSymbol>> packageNameToRClassSet
+          : scanner.getRClasses().entrySet()) {
+      PackageElement respectivePackageName = packageNameToRClassSet.getKey();
+      for (Symbol.ClassSymbol rClass : packageNameToRClassSet.getValue()) {
+        parseRClass(respectivePackageName, rClass, scanner.getReferenced());
+      }
+    }
+  }
+
+  private void parseRClass(PackageElement respectivePackageName, Symbol.ClassSymbol rClass,
+      Set<String> referenced) {
+    TypeElement element;
+
+    try {
+      element = rClass;
+    } catch (MirroredTypeException mte) {
+      element = (TypeElement) typeUtils.asElement(mte.getTypeMirror());
+    }
+
+    JCTree tree = (JCTree) trees.getTree(element);
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      IdScanner idScanner =
+          new IdScanner(symbols, elementUtils.getPackageOf(element), respectivePackageName,
+              referenced);
+      tree.accept(idScanner);
+    } else {
+      parseCompiledR(respectivePackageName, element, referenced);
+    }
+  }
+
+  private void parseCompiledR(PackageElement respectivePackageName, TypeElement rClass,
+      Set<String> referenced) {
+    for (Element element : rClass.getEnclosedElements()) {
+      String innerClassName = element.getSimpleName().toString();
+      if (SUPPORTED_TYPES.contains(innerClassName)) {
+        for (Element enclosedElement : element.getEnclosedElements()) {
+          if (enclosedElement instanceof VariableElement) {
+            String fqName = elementUtils.getPackageOf(enclosedElement).getQualifiedName().toString()
+                + ".R."
+                + innerClassName
+                + "."
+                + enclosedElement.toString();
+            if (referenced.contains(fqName)) {
+              VariableElement variableElement = (VariableElement) enclosedElement;
+              Object value = variableElement.getConstantValue();
+
+              if (value instanceof Integer) {
+                int id = (Integer) value;
+                ClassName rClassName =
+                    ClassName.get(elementUtils.getPackageOf(variableElement).toString(), "R",
+                        innerClassName);
+                String resourceName = variableElement.getSimpleName().toString();
+                QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
+                symbols.put(qualifiedId, new Id(id, rClassName, resourceName));
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  private static class RClassScanner extends TreeScanner {
+    // Maps the currently evaluated rPackageName to R Classes
+    private final Map<PackageElement, Set<Symbol.ClassSymbol>> rClasses = new LinkedHashMap<>();
+    private PackageElement currentPackage;
+    private Set<String> referenced = new HashSet<>();
+
+    @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
+      Symbol symbol = jcFieldAccess.sym;
+      if (symbol != null
+          && symbol.getEnclosingElement() != null
+          && symbol.getEnclosingElement().getEnclosingElement() != null
+          && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
+        Set<Symbol.ClassSymbol> rClassSet = rClasses.get(currentPackage);
+        if (rClassSet == null) {
+          rClassSet = new HashSet<>();
+          rClasses.put(currentPackage, rClassSet);
+        }
+        referenced.add(getFqName(symbol));
+        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass());
+      }
+    }
+
+    Map<PackageElement, Set<Symbol.ClassSymbol>> getRClasses() {
+      return rClasses;
+    }
+
+    Set<String> getReferenced() {
+      return referenced;
+    }
+
+    void setCurrentPackage(PackageElement packageElement) {
+      this.currentPackage = packageElement;
+    }
+  }
+
+  private static class IdScanner extends TreeScanner {
+    private final Map<QualifiedId, Id> ids;
+    private final PackageElement rPackageName;
+    private final PackageElement respectivePackageName;
+    private final Set<String> referenced;
+
+    IdScanner(Map<QualifiedId, Id> ids, PackageElement rPackageName,
+        PackageElement respectivePackageName, Set<String> referenced) {
+      this.ids = ids;
+      this.rPackageName = rPackageName;
+      this.respectivePackageName = respectivePackageName;
+      this.referenced = referenced;
+    }
+
+    @Override public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {
+      for (JCTree tree : jcClassDecl.defs) {
+        if (tree instanceof ClassTree) {
+          ClassTree classTree = (ClassTree) tree;
+          String className = classTree.getSimpleName().toString();
+          if (SUPPORTED_TYPES.contains(className)) {
+            ClassName rClassName = ClassName.get(rPackageName.getQualifiedName().toString(), "R",
+                    className);
+            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName, referenced);
+            ((JCTree) classTree).accept(scanner);
+          }
+        }
+      }
+    }
+  }
+
+  private static class VarScanner extends TreeScanner {
+    private final Map<QualifiedId, Id> ids;
+    private final ClassName className;
+    private final PackageElement respectivePackageName;
+    private final Set<String> referenced;
+
+    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,
+        PackageElement respectivePackageName, Set<String> referenced) {
+      this.ids = ids;
+      this.className = className;
+      this.respectivePackageName = respectivePackageName;
+      this.referenced = referenced;
+    }
+
+    @Override public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
+      if ("int".equals(jcVariableDecl.getType().toString())) {
+        String resourceName = jcVariableDecl.getName().toString();
+        if (referenced.contains(getFqName(jcVariableDecl.sym))) {
+          int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());
+          QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
+          ids.put(qualifiedId, new Id(id, className, resourceName));
+        }
+      }
+    }
+  }
+
+  private static String getFqName(Symbol rSymbol) {
+    return rSymbol.packge().getQualifiedName().toString()
+        + ".R."
+        + rSymbol.enclClass().name.toString()
+        + "."
+        + rSymbol.name.toString();
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
new file mode 100644
index 00000000..739261af
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java
@@ -0,0 +1,28 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.ANIMATION_UTILS;
+
+final class FieldAnimationBinding implements ResourceBinding {
+  private final Id id;
+  private final String name;
+
+  FieldAnimationBinding(Id id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return false;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    return CodeBlock.of("target.$L = $T.loadAnimation(context, $L)", name, ANIMATION_UTILS,
+            id.code);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
deleted file mode 100644
index 19b37849..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldBitmapBinding.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package butterknife.compiler;
-
-final class FieldBitmapBinding {
-  private final int id;
-  private final String name;
-
-  FieldBitmapBinding(int id, String name) {
-    this.id = id;
-    this.name = name;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public String getName() {
-    return name;
-  }
-}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 95c06172..8da58ac3 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -1,42 +1,75 @@
 package butterknife.compiler;
 
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
+import java.util.List;
 
-final class FieldCollectionViewBinding implements ViewBinding {
+import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.compiler.BindingSet.requiresCast;
+
+final class FieldCollectionViewBinding {
   enum Kind {
-    ARRAY,
-    LIST
+    ARRAY("arrayOf"),
+    LIST("listOf");
+
+    final String factoryName;
+
+    Kind(String factoryName) {
+      this.factoryName = factoryName;
+    }
   }
 
-  private final String name;
+  final String name;
   private final TypeName type;
   private final Kind kind;
   private final boolean required;
+  private final List<Id> ids;
 
-  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,
+      boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
+    this.ids = ids;
     this.required = required;
   }
 
-  public String getName() {
-    return name;
-  }
-
-  public TypeName getType() {
-    return type;
-  }
-
-  public Kind getKind() {
-    return kind;
-  }
-
-  public boolean isRequired() {
-    return required;
-  }
+  CodeBlock render(boolean debuggable) {
+    CodeBlock.Builder builder = CodeBlock.builder()
+        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);
+    for (int i = 0; i < ids.size(); i++) {
+      if (i > 0) {
+        builder.add(", ");
+      }
+      builder.add("\n");
 
-  @Override public String getDescription() {
-    return "field '" + name + "'";
+      Id id = ids.get(i);
+      boolean requiresCast = requiresCast(type);
+      if (!debuggable) {
+        if (requiresCast) {
+          builder.add("($T) ", type);
+        }
+        builder.add("source.findViewById($L)", id.code);
+      } else if (!requiresCast && !required) {
+        builder.add("source.findViewById($L)", id.code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(required ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
+        }
+        builder.add("(source, $L, \"field '$L'\"", id.code, name);
+        if (requiresCast) {
+          TypeName rawType = type;
+          if (rawType instanceof ParameterizedTypeName) {
+            rawType = ((ParameterizedTypeName) rawType).rawType;
+          }
+          builder.add(", $T.class", rawType);
+        }
+        builder.add(")");
+      }
+    }
+    return builder.add(")").build();
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
index 2516186f..238a0947 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java
@@ -1,25 +1,37 @@
 package butterknife.compiler;
 
-final class FieldDrawableBinding {
-  private final int id;
+import com.squareup.javapoet.CodeBlock;
+
+import static butterknife.compiler.BindingSet.CONTEXT_COMPAT;
+import static butterknife.compiler.BindingSet.UTILS;
+
+final class FieldDrawableBinding implements ResourceBinding {
+  private final Id id;
   private final String name;
-  private final int tintAttributeId;
+  private final Id tintAttributeId;
 
-  FieldDrawableBinding(int id, String name, int tintAttributeId) {
+  FieldDrawableBinding(Id id, String name, Id tintAttributeId) {
     this.id = id;
     this.name = name;
     this.tintAttributeId = tintAttributeId;
   }
 
-  public int getId() {
+  @Override public Id id() {
     return id;
   }
 
-  public String getName() {
-    return name;
+  @Override public boolean requiresResources(int sdk) {
+    return false;
   }
 
-  public int getTintAttributeId() {
-    return tintAttributeId;
+  @Override public CodeBlock render(int sdk) {
+    if (tintAttributeId.value != 0) {
+      return CodeBlock.of("target.$L = $T.getTintedDrawable(context, $L, $L)", name, UTILS, id.code,
+          tintAttributeId.code);
+    }
+    if (sdk >= 21) {
+      return CodeBlock.of("target.$L = context.getDrawable($L)", name, id.code);
+    }
+    return CodeBlock.of("target.$L = $T.getDrawable(context, $L)", name, CONTEXT_COMPAT, id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 7311983d..d9510525 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,31 +1,105 @@
 package butterknife.compiler;
 
-final class FieldResourceBinding {
-  private final int id;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Collections.singletonList;
+import static java.util.Collections.unmodifiableList;
+
+final class FieldResourceBinding implements ResourceBinding {
+  enum Type {
+    BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
+    BOOL("getBoolean"),
+    COLOR(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColor", false, 1),
+        new ResourceMethod(null, "getColor", false, 23)),
+    COLOR_STATE_LIST(new ResourceMethod(BindingSet.CONTEXT_COMPAT, "getColorStateList", false, 1),
+        new ResourceMethod(null, "getColorStateList", false, 23)),
+    DIMEN_AS_INT("getDimensionPixelSize"),
+    DIMEN_AS_FLOAT("getDimension"),
+    FLOAT(new ResourceMethod(BindingSet.UTILS, "getFloat", false, 1)),
+    INT("getInteger"),
+    INT_ARRAY("getIntArray"),
+    STRING("getString"),
+    STRING_ARRAY("getStringArray"),
+    TEXT_ARRAY("getTextArray"),
+    TYPED_ARRAY("obtainTypedArray");
+
+    private final List<ResourceMethod> methods;
+
+    Type(ResourceMethod... methods) {
+      List<ResourceMethod> methodList = new ArrayList<>(methods.length);
+      Collections.addAll(methodList, methods);
+      Collections.sort(methodList);
+      Collections.reverse(methodList);
+      this.methods = unmodifiableList(methodList);
+    }
+
+    Type(String methodName) {
+      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+    }
+
+    ResourceMethod methodForSdk(int sdk) {
+      for (ResourceMethod method : methods) {
+        if (method.sdk <= sdk) {
+          return method;
+        }
+      }
+      throw new AssertionError();
+    }
+  }
+
+  static final class ResourceMethod implements Comparable<ResourceMethod> {
+    final ClassName typeName;
+    final String name;
+    final boolean requiresResources;
+    final int sdk;
+
+    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+      this.typeName = typeName;
+      this.name = name;
+      this.requiresResources = requiresResources;
+      this.sdk = sdk;
+    }
+
+    @Override public int compareTo(ResourceMethod other) {
+      return Integer.compare(sdk, other.sdk);
+    }
+  }
+
+  private final Id id;
   private final String name;
-  private final String method;
-  private final boolean themeable;
+  private final Type type;
 
-  FieldResourceBinding(int id, String name, String method, boolean themeable) {
+  FieldResourceBinding(Id id, String name, Type type) {
     this.id = id;
     this.name = name;
-    this.method = method;
-    this.themeable = themeable;
+    this.type = type;
   }
 
-  public int getId() {
+  @Override public Id id() {
     return id;
   }
 
-  public String getName() {
-    return name;
-  }
-
-  public String getMethod() {
-    return method;
+  @Override public boolean requiresResources(int sdk) {
+    return type.methodForSdk(sdk).requiresResources;
   }
 
-  public boolean isThemeable() {
-    return themeable;
+  @Override public CodeBlock render(int sdk) {
+    ResourceMethod method = type.methodForSdk(sdk);
+    if (method.typeName == null) {
+      if (method.requiresResources) {
+        return CodeBlock.of("target.$L = res.$L($L)", name, method.name, id.code);
+      }
+      return CodeBlock.of("target.$L = context.$L($L)", name, method.name, id.code);
+    }
+    if (method.requiresResources) {
+      return CodeBlock.of("target.$L = $T.$L(res, $L)", name, method.typeName, method.name,
+          id.code);
+    }
+    return CodeBlock.of("target.$L = $T.$L(context, $L)", name, method.typeName, method.name,
+        id.code);
   }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
new file mode 100644
index 00000000..5707f2bd
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java
@@ -0,0 +1,62 @@
+package butterknife.compiler;
+
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+final class FieldTypefaceBinding implements ResourceBinding {
+  private static final ClassName RESOURCES_COMPAT =
+      ClassName.get("android.support.v4.content.res", "ResourcesCompat");
+  private static final ClassName TYPEFACE = ClassName.get("android.graphics", "Typeface");
+
+  /** Keep in sync with {@link android.graphics.Typeface} constants. */
+  enum TypefaceStyles {
+    NORMAL(0),
+    BOLD(1),
+    ITALIC(2),
+    BOLD_ITALIC(3);
+
+    final int value;
+
+    TypefaceStyles(int value) {
+      this.value = value;
+    }
+
+    @Nullable static TypefaceStyles fromValue(int value) {
+      for (TypefaceStyles style : values()) {
+        if (style.value == value) {
+          return style;
+        }
+      }
+      return null;
+    }
+  }
+
+  private final Id id;
+  private final String name;
+  private final TypefaceStyles style;
+
+  FieldTypefaceBinding(Id id, String name, TypefaceStyles style) {
+    this.id = id;
+    this.name = name;
+    this.style = style;
+  }
+
+  @Override public Id id() {
+    return id;
+  }
+
+  @Override public boolean requiresResources(int sdk) {
+    return sdk >= 26;
+  }
+
+  @Override public CodeBlock render(int sdk) {
+    CodeBlock typeface = sdk >= 26
+        ? CodeBlock.of("res.getFont($L)", id.code)
+        : CodeBlock.of("$T.getFont(context, $L)", RESOURCES_COMPAT, id.code);
+    if (style != TypefaceStyles.NORMAL) {
+      typeface = CodeBlock.of("$1T.create($2L, $1T.$3L)", TYPEFACE, typeface, style);
+    }
+    return CodeBlock.of("target.$L = $L", name, typeface);
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
index 2a0cf0df..0abd6974 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java
@@ -1,10 +1,10 @@
 package butterknife.compiler;
 
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 
-import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
-
-final class FieldViewBinding implements ViewBinding {
+final class FieldViewBinding implements MemberViewBinding {
   private final String name;
   private final TypeName type;
   private final boolean required;
@@ -23,6 +23,13 @@ public TypeName getType() {
     return type;
   }
 
+  public ClassName getRawType() {
+    if (type instanceof ParameterizedTypeName) {
+      return ((ParameterizedTypeName) type).rawType;
+    }
+    return (ClassName) type;
+  }
+
   @Override public String getDescription() {
     return "field '" + name + "'";
   }
@@ -30,8 +37,4 @@ public TypeName getType() {
   public boolean isRequired() {
     return required;
   }
-
-  public boolean requiresCast() {
-    return !VIEW_TYPE.equals(type.toString());
-  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/Id.java b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
new file mode 100644
index 00000000..8ce6c887
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/Id.java
@@ -0,0 +1,41 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+
+/**
+ * Represents an ID of an Android resource.
+ */
+final class Id {
+  private static final ClassName ANDROID_R = ClassName.get("android", "R");
+
+  final int value;
+  final CodeBlock code;
+  final boolean qualifed;
+
+  Id(int value) {
+    this.value = value;
+    this.code = CodeBlock.of("$L", value);
+    this.qualifed = false;
+  }
+
+  Id(int value, ClassName className, String resourceName) {
+    this.value = value;
+    this.code = className.topLevelClassName().equals(ANDROID_R)
+      ? CodeBlock.of("$L.$N", className, resourceName)
+      : CodeBlock.of("$T.$N", className, resourceName);
+    this.qualifed = true;
+  }
+
+  @Override public boolean equals(Object o) {
+    return o instanceof Id && value == ((Id) o).value;
+  }
+
+  @Override public int hashCode() {
+    return value;
+  }
+
+  @Override public String toString() {
+    throw new UnsupportedOperationException("Please use value or code explicitly");
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java
new file mode 100644
index 00000000..6e82d46e
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java
@@ -0,0 +1,7 @@
+package butterknife.compiler;
+
+/** A field or method view binding. */
+interface MemberViewBinding {
+  /** A description of the binding in human readable form (e.g., "field 'foo'"). */
+  String getDescription();
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
index 33beb621..e4d1c4b7 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java
@@ -4,7 +4,7 @@
 import java.util.Collections;
 import java.util.List;
 
-final class MethodViewBinding implements ViewBinding {
+final class MethodViewBinding implements MemberViewBinding {
   private final String name;
   private final List<Parameter> parameters;
   private final boolean required;
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java b/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
new file mode 100644
index 00000000..1d8683e4
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/QualifiedId.java
@@ -0,0 +1,31 @@
+package butterknife.compiler;
+
+import javax.lang.model.element.PackageElement;
+
+final class QualifiedId {
+  final PackageElement packageName;
+  final int id;
+
+  QualifiedId(PackageElement packageName, int id) {
+    this.packageName = packageName;
+    this.id = id;
+  }
+
+  @Override public String toString() {
+    return "QualifiedId{packageName='" + packageName + "', id=" + id + '}';
+  }
+
+  @Override public boolean equals(Object o) {
+    if (this == o) return true;
+    if (!(o instanceof QualifiedId)) return false;
+    QualifiedId other = (QualifiedId) o;
+    return id == other.id
+        && packageName.equals(other.packageName);
+  }
+
+  @Override public int hashCode() {
+    int result = packageName.hashCode();
+    result = 31 * result + id;
+    return result;
+  }
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
new file mode 100644
index 00000000..42b63acb
--- /dev/null
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java
@@ -0,0 +1,12 @@
+package butterknife.compiler;
+
+import com.squareup.javapoet.CodeBlock;
+
+interface ResourceBinding {
+  Id id();
+
+  /** True if the code for this binding requires a 'res' variable for {@code Resources} access. */
+  boolean requiresResources(int sdk);
+
+  CodeBlock render(int sdk);
+}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java
deleted file mode 100644
index 9db7e2b7..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/UnbinderBinding.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package butterknife.compiler;
-
-import com.squareup.javapoet.ClassName;
-
-final class UnbinderBinding {
-  private static final String UNBINDER_SIMPLE_NAME = "Unbinder";
-
-  private final String unbinderFieldName;
-  private final ClassName unbinderClassName;
-
-  public UnbinderBinding(String packageName, String enclosingClassName, String fieldName) {
-    unbinderClassName = ClassName.get(packageName, enclosingClassName, UNBINDER_SIMPLE_NAME);
-    unbinderFieldName = fieldName;
-  }
-
-  public String getUnbinderFieldName() {
-    return unbinderFieldName;
-  }
-
-  public ClassName getUnbinderClassName() {
-    return unbinderClassName;
-  }
-}
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
index 6159caae..085124cd 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java
@@ -1,7 +1,115 @@
 package butterknife.compiler;
 
-/** A field or method view binding. */
-interface ViewBinding {
-  /** A description of the binding in human readable form (e.g., "field 'foo'"). */
-  String getDescription();
+import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+final class ViewBinding {
+  private final Id id;
+  private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings;
+  private final FieldViewBinding fieldBinding;
+
+  ViewBinding(Id id, Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings,
+      FieldViewBinding fieldBinding) {
+    this.id = id;
+    this.methodBindings = methodBindings;
+    this.fieldBinding = fieldBinding;
+  }
+
+  public Id getId() {
+    return id;
+  }
+
+  public FieldViewBinding getFieldBinding() {
+    return fieldBinding;
+  }
+
+  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
+    return methodBindings;
+  }
+
+  public List<MemberViewBinding> getRequiredBindings() {
+    List<MemberViewBinding> requiredBindings = new ArrayList<>();
+    if (fieldBinding != null && fieldBinding.isRequired()) {
+      requiredBindings.add(fieldBinding);
+    }
+    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
+      for (Set<MethodViewBinding> set : methodBinding.values()) {
+        for (MethodViewBinding binding : set) {
+          if (binding.isRequired()) {
+            requiredBindings.add(binding);
+          }
+        }
+      }
+    }
+    return requiredBindings;
+  }
+
+  public boolean isSingleFieldBinding() {
+    return methodBindings.isEmpty() && fieldBinding != null;
+  }
+
+  public boolean requiresLocal() {
+    if (isBoundToRoot()) {
+      return false;
+    }
+    if (isSingleFieldBinding()) {
+      return false;
+    }
+    return true;
+  }
+
+  public boolean isBoundToRoot() {
+    return ButterKnifeProcessor.NO_ID.equals(id);
+  }
+
+  public static final class Builder {
+    private final Id id;
+
+    private final Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> methodBindings =
+        new LinkedHashMap<>();
+    FieldViewBinding fieldBinding;
+
+    Builder(Id id) {
+      this.id = id;
+    }
+
+    public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
+      Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+      return methods != null && methods.containsKey(method);
+    }
+
+    public void addMethodBinding(ListenerClass listener, ListenerMethod method,
+        MethodViewBinding binding) {
+      Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
+      Set<MethodViewBinding> set = null;
+      if (methods == null) {
+        methods = new LinkedHashMap<>();
+        methodBindings.put(listener, methods);
+      } else {
+        set = methods.get(method);
+      }
+      if (set == null) {
+        set = new LinkedHashSet<>();
+        methods.put(method, set);
+      }
+      set.add(binding);
+    }
+
+    public void setFieldBinding(FieldViewBinding fieldBinding) {
+      if (this.fieldBinding != null) {
+        throw new AssertionError();
+      }
+      this.fieldBinding = fieldBinding;
+    }
+
+    public ViewBinding build() {
+      return new ViewBinding(id, methodBindings, fieldBinding);
+    }
+  }
 }
diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java b/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
deleted file mode 100644
index 569d512b..00000000
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ViewBindings.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package butterknife.compiler;
-
-import butterknife.internal.ListenerClass;
-import butterknife.internal.ListenerMethod;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-final class ViewBindings {
-  private final int id;
-  private final Set<FieldViewBinding> fieldBindings = new LinkedHashSet<>();
-  private final LinkedHashMap<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>>
-      methodBindings = new LinkedHashMap<>();
-
-  ViewBindings(int id) {
-    this.id = id;
-  }
-
-  public int getId() {
-    return id;
-  }
-
-  public Collection<FieldViewBinding> getFieldBindings() {
-    return fieldBindings;
-  }
-
-  public Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> getMethodBindings() {
-    return methodBindings;
-  }
-
-  public boolean hasMethodBinding(ListenerClass listener, ListenerMethod method) {
-    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
-    return methods != null && methods.containsKey(method);
-  }
-
-  public void addMethodBinding(ListenerClass listener, ListenerMethod method,
-      MethodViewBinding binding) {
-    Map<ListenerMethod, Set<MethodViewBinding>> methods = methodBindings.get(listener);
-    Set<MethodViewBinding> set = null;
-    if (methods == null) {
-      methods = new LinkedHashMap<>();
-      methodBindings.put(listener, methods);
-    } else {
-      set = methods.get(method);
-    }
-    if (set == null) {
-      set = new LinkedHashSet<>();
-      methods.put(method, set);
-    }
-    set.add(binding);
-  }
-
-  public void addFieldBinding(FieldViewBinding fieldBinding) {
-    fieldBindings.add(fieldBinding);
-  }
-
-  public List<ViewBinding> getRequiredBindings() {
-    List<ViewBinding> requiredViewBindings = new ArrayList<>();
-    for (FieldViewBinding fieldBinding : fieldBindings) {
-      if (fieldBinding.isRequired()) {
-        requiredViewBindings.add(fieldBinding);
-      }
-    }
-    for (Map<ListenerMethod, Set<MethodViewBinding>> methodBinding : methodBindings.values()) {
-      for (Set<MethodViewBinding> set : methodBinding.values()) {
-        for (MethodViewBinding binding : set) {
-          if (binding.isRequired()) {
-            requiredViewBindings.add(binding);
-          }
-        }
-      }
-    }
-    return requiredViewBindings;
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
deleted file mode 100644
index 45ccd766..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindArrayTest {
-  @Test public void stringArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) String[] one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getStringArray(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void intArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) int[] one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getIntArray(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void textArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) CharSequence[] one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getTextArray(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typedArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "import android.content.res.TypedArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) TypedArray one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.obtainTypedArray(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeSupported() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@BindArray field type must be one of: String[], int[], CharSequence[], "
-                + "android.content.res.TypedArray. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java b/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
deleted file mode 100644
index a96f6f30..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindBitmapTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindBitmapTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.graphics.Bitmap;",
-        "import butterknife.BindBitmap;",
-        "public class Test extends Activity {",
-        "  @BindBitmap(1) Bitmap one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import android.graphics.BitmapFactory;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = BitmapFactory.decodeResource(res, 1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeBitmap() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindBitmap;",
-        "public class Test extends Activity {",
-        "  @BindBitmap(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java b/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
deleted file mode 100644
index fd9028f0..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindBoolTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindBoolTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindBool;",
-        "public class Test extends Activity {",
-        "  @BindBool(1) boolean one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getBoolean(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeBoolean() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindBool;",
-        "public class Test extends Activity {",
-        "  @BindBool(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindColorTest.java b/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
deleted file mode 100644
index d475a98e..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindColorTest.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindColorTest {
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindColor;",
-        "public class Test extends Activity {",
-        "  @BindColor(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Context context = finder.getContext(source);",
-            "    Resources res = context.getResources();",
-            "    Resources.Theme theme = context.getTheme();",
-            "    target.one = Utils.getColor(res, theme, 1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void simpleColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.content.res.ColorStateList;",
-        "import butterknife.BindColor;",
-        "public class Test extends Activity {",
-        "  @BindColor(1) ColorStateList one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Context context = finder.getContext(source);",
-            "    Resources res = context.getResources();",
-            "    Resources.Theme theme = context.getTheme();",
-            "    target.one = Utils.getColorStateList(res, theme, 1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeIntOrColorStateList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindColor;",
-        "public class Test extends Activity {",
-        "  @BindColor(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java b/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
deleted file mode 100644
index 8c5e9c32..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindDimenTest.java
+++ /dev/null
@@ -1,101 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindDimenTest {
-  @Test public void simpleFloat() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindDimen;",
-        "public class Test extends Activity {",
-        "  @BindDimen(1) float one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getDimension(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void simpleInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindDimen;",
-        "public class Test extends Activity {",
-        "  @BindDimen(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getDimensionPixelSize(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeIntOrFloat() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindDimen;",
-        "public class Test extends Activity {",
-        "  @BindDimen(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java b/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
deleted file mode 100644
index 8220fa5a..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindDrawableTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindDrawableTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.graphics.drawable.Drawable;",
-        "import butterknife.BindDrawable;",
-        "public class Test extends Activity {",
-        "  @BindDrawable(1) Drawable one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Context context = finder.getContext(source);",
-            "    Resources res = context.getResources();",
-            "    Resources.Theme theme = context.getTheme();",
-            "    target.one = Utils.getDrawable(res, theme, 1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void withTint() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.graphics.drawable.Drawable;",
-        "import butterknife.BindDrawable;",
-        "public class Test extends Activity {",
-        "  @BindDrawable(value = 1, tint = 2) Drawable one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Context context = finder.getContext(source);",
-            "    Resources res = context.getResources();",
-            "    Resources.Theme theme = context.getTheme();",
-            "    target.one = Utils.getTintedDrawable(res, theme, 1, 2);",
-            "",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeDrawable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindDrawable;",
-        "public class Test extends Activity {",
-        "  @BindDrawable(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindIntTest.java b/butterknife-compiler/src/test/java/butterknife/BindIntTest.java
deleted file mode 100644
index c876d71f..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindIntTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindIntTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindInt;",
-        "public class Test extends Activity {",
-        "  @BindInt(1) int one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getInteger(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeInt() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindInt;",
-        "public class Test extends Activity {",
-        "  @BindInt(1) String one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindStringTest.java b/butterknife-compiler/src/test/java/butterknife/BindStringTest.java
deleted file mode 100644
index 80eff6ea..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindStringTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindStringTest {
-  @Test public void simple() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindString;",
-        "public class Test extends Activity {",
-        "  @BindString(1) String one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public void bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getString(1);",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void typeMustBeString() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindString;",
-        "public class Test extends Activity {",
-        "  @BindString(1) boolean one;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
-        .in(source).onLine(5);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/BindTest.java b/butterknife-compiler/src/test/java/butterknife/BindTest.java
deleted file mode 100644
index 95062f90..00000000
--- a/butterknife-compiler/src/test/java/butterknife/BindTest.java
+++ /dev/null
@@ -1,932 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class BindTest {
-  @Test public void bindingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.Bind;",
-            "public class Test extends Activity {",
-            "    @Bind(1) View thing;",
-            "}"
-        ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-  @Test public void bindingViewTooManyIdsFail() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2}) View thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind for a view must only specify one ID. Found: [1, 2]. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void bindingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @Bind(1) TestInterface thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.Bind;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @Bind(1) T thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @Bind(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
-            "    target.thing1 = view;",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @Bind(1) public View thing1;",
-        "  @Bind(2) View thing2;",
-        "  @Bind(3) protected View thing3;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError();
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @Bind(1) View view;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    target.view = view;",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @Bind(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @Bind(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class TestOne$$ViewBinder<T extends TestOne> ",
-            "    extends Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test<T> extends Activity {",
-        "  @Bind(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @Bind(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
-
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class TestOne$$ViewBinder<T extends TestOne> ",
-            "    extends Test$$ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    super.bind(finder, target, source);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = view;",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource1, expectedSource2);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test {",
-        "  @Bind(1) View thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@Bind-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test {",
-        "  @Bind(1) View thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@Bind-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @Bind(1) View thing;",
-        "  }",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@Bind fields may not be contained in private classes. (test.Test.Inner.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @Bind(1) String thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public interface Test {",
-        "    @Bind(1) View thing = null;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@Bind fields may only be contained in classes. (test.Test.thing)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind(1) private View thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind(1) static View thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind fields must not be private or static. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void duplicateBindingFails() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind(1) View thing1;",
-        "    @Bind(1) View thing2;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "Attempt to use @Bind for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsRootViewBindingWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    assertAbout(javaSource())
-        .that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining((
-            "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(6);
-  }
-
-  @Test public void failsOptionalRootViewBinding() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnClick;",
-            "import butterknife.Optional;",
-            "public class Test extends View {",
-            "  @Optional @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
-
-    assertAbout(javaSource())
-        .that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            ("ID-free binding must not be annotated with @Optional. (test.Test.doStuff)"))
-        .in(source)
-        .onLine(7);
-  }
-
-  @Test public void bindingArray() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) View[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinding",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.arrayOf(",
-            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingArrayWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "public class Test<T extends View> extends Activity {",
-        "    @Bind({1, 2, 3}) T[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.arrayOf(",
-            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingArrayWithCast() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.TextView;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) TextView[] thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.TextView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.arrayOf(",
-            "        finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.listOf(",
-            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingListOfInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "    interface TestInterface {}",
-        "    @Bind({1, 2, 3}) List<TestInterface> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.listOf(",
-            "        finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void bindingListWithGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test<T extends View> extends Activity {",
-        "    @Bind({1, 2, 3}) List<T> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.listOf(",
-            "        finder.<View>findRequiredView(source, 1, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 2, \"field 'thing'\"),",
-            "        finder.<View>findRequiredView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullableList() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @interface Nullable {}",
-        "    @Nullable @Bind({1, 2, 3}) List<View> thing;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.Utils;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    target.thing = Utils.listOf(",
-            "        finder.<View>findOptionalView(source, 1, \"field 'thing'\"),",
-            "        finder.<View>findOptionalView(source, 2, \"field 'thing'\"),",
-            "        finder.<View>findOptionalView(source, 3, \"field 'thing'\")",
-            "    );",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfNoIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @Bind({}) List<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind must specify at least one ID. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfNoGenericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test {",
-        "  @Bind(1) List thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List must have a generic component. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfUnsupportedCollection() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.Deque;",
-        "public class Test {",
-        "  @Bind(1) Deque<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind must be a List or array. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfGenericNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "  @Bind(1) List<String> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfArrayNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.Bind;",
-        "public class Test extends Activity {",
-        "  @Bind(1) String[] thing;",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind List or array type must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfContainsDuplicateIds() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import java.util.List;",
-        "public class Test extends Activity {",
-        "    @Bind({1, 1}) List<View> thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@Bind annotation contains duplicate ID 1. (test.Test.thing)")
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/ButterKnife.java b/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
deleted file mode 100644
index 1b298720..00000000
--- a/butterknife-compiler/src/test/java/butterknife/ButterKnife.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package butterknife;
-
-/** STUB! Required for test sources to compile. */
-public class ButterKnife {
-  public interface Unbinder {
-    void unbind();
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
deleted file mode 100644
index de9d0f9f..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnCheckedChangedTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnCheckedChangedTest {
-  @Test public void checkedChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnCheckedChanged;",
-        "public class Test extends Activity {",
-        "  @OnCheckedChanged(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.CompoundButton;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {",
-            "      @Override public void onCheckedChanged(CompoundButton p0, boolean p1) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
deleted file mode 100644
index 6bc5c35c..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
+++ /dev/null
@@ -1,539 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnClickTest {
-  @Test public void onClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickMultipleBindings() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) void doStuff1() {}",
-        "  @OnClick(1) void doStuff2() {}",
-        "  @OnClick({1, 2}) void doStuff3(View v) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff1();",
-            "        target.doStuff2();",
-            "        target.doStuff3(p0);",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff3(p0);",
-            "      }",
-            "    });",
-            "  }",
-            "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void findOnlyCalledOnce() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @Bind(1) View view;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");",
-            "    target.view = view;",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void methodVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1) public void thing1() {}",
-        "  @OnClick(2) void thing2() {}",
-        "  @OnClick(3) protected void thing3() {}",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError();
-  }
-
-  @Test public void methodCastsArgument() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.Button;",
-        "import android.widget.TextView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  interface TestInterface {}",
-        "  @OnClick(0) void click0() {}",
-        "  @OnClick(1) void click1(View view) {}",
-        "  @OnClick(2) void click2(TextView view) {}",
-        "  @OnClick(3) void click3(Button button) {}",
-        "  @OnClick(4) void click4(TestInterface thing) {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.Button;",
-            "import android.widget.TextView;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 0, \"method 'click0'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click0();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 1, \"method 'click1'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click1(p0);",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'click2'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click2(finder.<TextView>castParam(p0, \"doClick\", 0, \"click2\", 0));",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 3, \"method 'click3'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click3(finder.<Button>castParam(p0, \"doClick\", 0, \"click3\", 0);",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 4, \"method 'click4'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click4(finder.<Test.TestInterface>castParam(p0, \"doClick\", 0, \"click4\", 0);",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void methodWithMultipleIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick({1, 2, 3}) void click() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'click'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'click'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 3, \"method 'click'\");",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.click();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "import butterknife.Optional;",
-        "public class Test extends Activity {",
-        "  @Optional @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findOptionalView(source, 1, null);",
-            "    if (view != null) {",
-            "      view.setOnClickListener(new DebouncingOnClickListener() {",
-            "        @Override public void doClick(View p0) {",
-            "          target.doStuff();",
-            "        }",
-            "      });",
-            "    }",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void optionalAndRequiredSkipsNullCheck() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.Bind;",
-        "import butterknife.OnClick;",
-        "import butterknife.Optional;",
-        "public class Test extends Activity {",
-        "  @Bind(1) View view;",
-        "  @Optional @OnClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
-            "    target.view = view;",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import butterknife.OnClick;",
-        "public class Test {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import butterknife.OnClick;",
-        "public class Test {",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
-        .in(source).onLine(4);
-  }
-
-  @Test public void failsIfHasReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public String doStuff() {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfPrivateMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  private void doStuff() {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public static void doStuff() {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfParameterNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public void doStuff(String thing) {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(Joiner.on('\n').join(
-            "Unable to match @OnClick method arguments. (test.Test.doStuff)",
-            "  ",
-            "    Parameter #1: java.lang.String",
-            "      did not match any listener parameters",
-            "  ",
-            "  Methods may have up to 1 parameter(s):",
-            "  ",
-            "    android.view.View",
-            "  ",
-            "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsIfMoreThanOneParameter() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick(1)",
-        "  public void doStuff(View thing, View otherThing) {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import butterknife.OnClick;",
-        "public interface Test {",
-        "  @OnClick(1)",
-        "  void doStuff();",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
-        .in(source).onLine(3);
-  }
-
-  @Test public void failsIfHasDuplicateIds() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @OnClick({1, 2, 3, 1})",
-        "  void doStuff() {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java b/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
deleted file mode 100644
index d4cb8833..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnEditorActionTest.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnEditorActionTest {
-  @Test public void editorAction() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnEditorAction;",
-        "public class Test extends Activity {",
-        "  @OnEditorAction(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.KeyEvent;",
-            "import android.view.View;",
-            "import android.widget.TextView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {",
-            "      @Override public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
deleted file mode 100644
index 4cbc04e5..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnFocusChangeTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnFocusChangeTest {
-  @Test public void focusChange() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnFocusChange;",
-        "public class Test extends Activity {",
-        "  @OnFocusChange(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {",
-            "      @Override public void onFocusChange(View p0, boolean p1) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
deleted file mode 100644
index 94b37d71..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
+++ /dev/null
@@ -1,284 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
-public class OnItemClickTest {
-  @Test public void onItemClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff() {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
-            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onItemClickBindingWithParameters() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    int position,",
-        "    long id",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
-            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff(p0, p1, p2, p3);",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onItemClickBindingWithParameterSubset() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    ListView parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import android.widget.ListView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
-            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test<T extends ListView> extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    T parent,",
-        "    int position",
-        "  ) {}",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import android.widget.ListView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
-            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff(finder.<ListView>castParam(p0, \"onItemClick\", 0, \"doStuff\", 0), p2);",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void onClickRootViewBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.content.Context;",
-        "import android.widget.ListView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends ListView {",
-        "  @OnItemClick void doStuff() {}",
-        "  public Test(Context context) {",
-        "    super(context);",
-        "  }",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = target;",
-            "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {",
-            "      @Override public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsWithInvalidId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.content.Context;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick({1, -1}) void doStuff() {}",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-
-  @Test public void failsWithInvalidParameterConfiguration() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import android.widget.AdapterView;",
-        "import butterknife.OnItemClick;",
-        "public class Test extends Activity {",
-        "  @OnItemClick(1) void doStuff(",
-        "    AdapterView<?> parent,",
-        "    View view,",
-        "    View whatIsThis",
-        "  ) {}",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(Joiner.on('\n').join(
-            "Unable to match @OnItemClick method arguments. (test.Test.doStuff)",
-            "  ",
-            "    Parameter #1: android.widget.AdapterView<?>",
-            "      matched listener parameter #1: android.widget.AdapterView<?>",
-            "  ",
-            "    Parameter #2: android.view.View",
-            "      matched listener parameter #2: android.view.View",
-            "  ",
-            "    Parameter #3: android.view.View",
-            "      did not match any listener parameters",
-            "  ",
-            "  Methods may have up to 4 parameter(s):",
-            "  ",
-            "    android.widget.AdapterView<?>",
-            "    android.view.View",
-            "    int",
-            "    long",
-            "  ",
-            "  These may be listed in any order but will be searched for from top to bottom."))
-        .in(source).onLine(7);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
deleted file mode 100644
index e93d1809..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnItemLongClickTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnItemLongClickTest {
-  @Test public void itemLongClick() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemLongClick;",
-        "public class Test extends Activity {",
-        "  @OnItemLongClick(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {",
-            "      @Override public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
deleted file mode 100644
index f150bd1f..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnItemSelectedTest.java
+++ /dev/null
@@ -1,205 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
-public class OnItemSelectedTest {
-  @Test public void defaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.doStuff();",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void nonDefaultMethod() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void allMethods() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected(1)",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.onItemSelected();",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "        target.onNothingSelected();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void multipleBindingPermutation() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnItemSelected;",
-        "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;",
-        "public class Test extends Activity {",
-        "  @OnItemSelected({ 1, 2 })",
-        "  void onItemSelected() {}",
-        "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)",
-        "  void onNothingSelected() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import android.widget.AdapterView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.onItemSelected();",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "        target.onNothingSelected();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"method 'onItemSelected'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "        target.onItemSelected();",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 3, \"method 'onNothingSelected'\");",
-            "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {",
-            "      @Override public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {",
-            "      }",
-            "      @Override public void onNothingSelected(AdapterView<?> p0) {",
-            "        target.onNothingSelected();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
deleted file mode 100644
index 2f3c174a..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnLongClickTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
-public class OnLongClickTest {
-  @Test public void onLongClickBinding() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
-        "public class Test extends Activity {",
-        "  @OnLongClick(1) boolean doStuff() {",
-        "    return true;",
-        "  }",
-        "}"));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
-            "      @Override public boolean onLongClick(View p0) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsIfMissingReturnType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnLongClick;",
-        "public class Test extends Activity {",
-        "  @OnLongClick(1)",
-        "  public void doStuff() {",
-        "  }",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java b/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
deleted file mode 100644
index bab5f4b1..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnPageChangeTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnPageChangeTest {
-  @Test public void pageChange() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnPageChange;",
-        "public class Test extends Activity {",
-        "  @OnPageChange(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.support.v4.view.ViewPager;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((ViewPager) view).setOnPageChangeListener(new ViewPager.OnPageChangeListener() {",
-            "      @Override public void onPageSelected(int p0) {",
-            "        target.doStuff();",
-            "      }",
-            "      @Override public void onPageScrolled(int p0, float p1, int p2) {",
-            "      }",
-            "      @Override public void onPageScrollStateChanged(int p0) {",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java b/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
deleted file mode 100644
index 1a737593..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnTextChangedTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnTextChangedTest {
-  @Test public void textChanged() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTextChanged;",
-        "public class Test extends Activity {",
-        "  @OnTextChanged(1) void doStuff() {}",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.text.Editable;",
-            "import android.text.TextWatcher;",
-            "import android.view.View;",
-            "import android.widget.TextView;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.CharSequence;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    ((TextView) view).addTextChangedListener(new TextWatcher() {",
-            "      @Override public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {",
-            "        target.doStuff();",
-            "      }",
-            "      @Override public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {",
-            "      }",
-            "      @Override public void afterTextChanged(Editable p0) {",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java b/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
deleted file mode 100644
index a95044f3..00000000
--- a/butterknife-compiler/src/test/java/butterknife/OnTouchTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class OnTouchTest {
-  @Test public void touch() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTouch;",
-        "public class Test extends Activity {",
-        "  @OnTouch(1) boolean doStuff() { return false; }",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.MotionEvent;",
-            "import android.view.View;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    view.setOnTouchListener(new View.OnTouchListener() {",
-            "      @Override public boolean onTouch(View p0, MotionEvent p1) {",
-            "        return target.doStuff();",
-            "      }",
-            "    });",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.OnTouch;",
-        "public class Test extends Activity {",
-        "  @OnTouch(1) boolean doStuff1() {}",
-        "  @OnTouch(1) boolean doStuff2() {}",
-        "}"));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
-        .in(source).onLine(6);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
deleted file mode 100644
index 189920d0..00000000
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ /dev/null
@@ -1,260 +0,0 @@
-package butterknife;
-
-import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
-import com.google.testing.compile.JavaFileObjects;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
-
-public class UnbinderTest {
-  @Test public void bindingUnbinder() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n')
-        .join(
-            "package test;",
-            "import android.support.v4.app.Fragment;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.OnClick;",
-            "import butterknife.Unbinder;",
-            "public class Test extends Fragment {",
-            "  @Unbinder ButterKnife.Unbinder unbinder;",
-            "  @OnClick(1) void doStuff() {",
-            "  }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.IllegalStateException;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Unbinder unbinder = new Unbinder(target);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");",
-            "    unbinder.view1 = view;",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "    target.unbinder = unbinder;",
-            "  }",
-            "  private static final class Unbinder implements ButterKnife.Unbinder {",
-            "    private Test target;",
-            "    View view1;",
-            "    Unbinder(Test target) {",
-            "      this.target = target;",
-            "    }",
-            "    @Override public void unbind() {",
-            "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
-            "      view1.setOnClickListener(null);",
-            "      target.unbinder = null;",
-            "      target = null;",
-            "    }",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void failWhenMultipleUnbinders() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n')
-        .join(
-            "package test;",
-            "import android.support.v4.app.Fragment;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.Unbinder;",
-            "public class Test extends Fragment {",
-            "  @Unbinder ButterKnife.Unbinder unbinder1;",
-            "  @Unbinder ButterKnife.Unbinder unbinder2;",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "Only one filed should be annotated with @Unbinder. (test.Test.unbinder2)")
-        .in(source).onLine(7);
-  }
-
-  @Test public void failOnWrongUnbinderType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n')
-        .join(
-            "package test;",
-            "import android.support.v4.app.Fragment;",
-            "import butterknife.Unbinder;",
-            "public class Test extends Fragment {",
-            "  @Unbinder Object unbinder;",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining(
-            "@Unbinder filed must be of type ButterKnife.Unbinder. (test.Test.unbinder)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void multipleBindings() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n')
-        .join(
-            "package test;",
-            "import android.support.v4.app.Fragment;",
-            "import android.view.View;",
-            "import butterknife.Bind;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.OnClick;",
-            "import butterknife.OnLongClick;",
-            "import butterknife.Unbinder;",
-            "public class Test extends Fragment {",
-            "  @Unbinder ButterKnife.Unbinder unbinder;",
-            "  @Bind(1) View view;",
-            "  @Bind(2) View view2;",
-            "  @OnClick(1) void doStuff() {",
-            "  }",
-            "  @OnLongClick(1) boolean doMoreStuff() { return false; }",
-            "}"
-        ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.ButterKnife;",
-            "import butterknife.internal.DebouncingOnClickListener;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.IllegalStateException;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override public void bind(final Finder finder, final T target, Object source) {",
-            "    Unbinder unbinder = new Unbinder(target);",
-            "    View view;",
-            "    view = finder.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");",
-            "    target.view = view;",
-            "    unbinder.view1 = view;",
-            "    view.setOnClickListener(new DebouncingOnClickListener() {",
-            "      @Override public void doClick(View p0) {",
-            "        target.doStuff();",
-            "      }",
-            "    });",
-            "    view.setOnLongClickListener(new View.OnLongClickListener() {",
-            "      @Override public boolean onLongClick(View p0) {",
-            "        return target.doMoreStuff();",
-            "      }",
-            "    });",
-            "    view = finder.findRequiredView(source, 2, \"field 'view2'\");",
-            "    target.view2 = view;",
-            "    target.unbinder = unbinder;",
-            "  }",
-            "  private static final class Unbinder implements ButterKnife.Unbinder {",
-            "    private Test target;",
-            "    View view1;",
-            "    Unbinder(Test target) {",
-            "      this.target = target;",
-            "    }",
-            "    @Override public void unbind() {",
-            "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
-            "      view1.setOnClickListener(null);",
-            "      view1.setOnLongClickListener(null);",
-            "      target.view = null;",
-            "      target.view2 = null;",
-            "      target.unbinder = null;",
-            "      target = null;",
-            "    }",
-            "  }",
-            "}"
-        ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
-  @Test public void unbinderRespectsNullable() {
-      JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n')
-          .join(
-              "package test;",
-              "import android.support.v4.app.Fragment;",
-              "import butterknife.ButterKnife;",
-              "import butterknife.OnClick;",
-              "import butterknife.Optional;",
-              "import butterknife.Unbinder;",
-              "public class Test extends Fragment {",
-              "  @Unbinder ButterKnife.Unbinder unbinder;",
-              "  @Optional @OnClick(1) void doStuff() {",
-              "  }",
-              "}"
-          ));
-
-      JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-          Joiner.on('\n').join(
-              "package test;",
-              "import android.view.View;",
-              "import butterknife.ButterKnife;",
-              "import butterknife.internal.DebouncingOnClickListener;",
-              "import butterknife.internal.Finder;",
-              "import butterknife.internal.ViewBinder;",
-              "import java.lang.IllegalStateException;",
-              "import java.lang.Object;",
-              "import java.lang.Override;",
-              "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-              "  @Override public void bind(final Finder finder, final T target, Object source) {",
-              "    Unbinder unbinder = new Unbinder(target);",
-              "    View view;",
-              "    view = finder.findOptionalView(source, 1, null);",
-              "    if (view != null) {",
-              "      unbinder.view1 = view;",
-              "      view.setOnClickListener(new DebouncingOnClickListener() {",
-              "        @Override public void doClick(View p0) {",
-              "          target.doStuff();",
-              "        }",
-              "      });",
-              "    }",
-              "    target.unbinder = unbinder;",
-              "  }",
-              "  private static final class Unbinder implements ButterKnife.Unbinder {",
-              "    private Test target;",
-              "    View view1;",
-              "    Unbinder(Test target) {",
-              "      this.target = target;",
-              "    }",
-              "    @Override public void unbind() {",
-              "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");",
-              "      if (view1 != null) {",
-              "        view1.setOnClickListener(null);",
-              "      }",
-              "      target.unbinder = null;",
-              "      target = null;",
-              "    }",
-              "  }",
-              "}"
-          ));
-
-      assertAbout(javaSource()).that(source)
-          .processedWith(new ButterKnifeProcessor())
-          .compilesWithoutError()
-          .and()
-          .generatesSources(expectedSource);
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
similarity index 70%
rename from butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
rename to butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
index caedd36c..26f8d78c 100644
--- a/butterknife-compiler/src/test/java/butterknife/compiler/ViewBindingClassTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java
@@ -2,16 +2,16 @@
 
 import org.junit.Test;
 
-import static butterknife.compiler.BindingClass.asHumanDescription;
+import static butterknife.compiler.BindingSet.asHumanDescription;
 import static com.google.common.truth.Truth.assertThat;
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 
-public class ViewBindingClassTest {
+public class BindingSetTest {
   @Test public void humanDescriptionJoinWorks() {
-    ViewBinding one = new TestViewBinding("one");
-    ViewBinding two = new TestViewBinding("two");
-    ViewBinding three = new TestViewBinding("three");
+    MemberViewBinding one = new TestViewBinding("one");
+    MemberViewBinding two = new TestViewBinding("two");
+    MemberViewBinding three = new TestViewBinding("three");
 
     String result1 = asHumanDescription(singletonList(one));
     assertThat(result1).isEqualTo("one");
@@ -23,7 +23,7 @@
     assertThat(result3).isEqualTo("one, two, and three");
   }
 
-  private static class TestViewBinding implements ViewBinding {
+  private static class TestViewBinding implements MemberViewBinding {
     private final String description;
 
     private TestViewBinding(String description) {
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java b/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
deleted file mode 100644
index 011cd83f..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/DebouncingOnClickListener.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-
-/**
- * DO NOT MODIFY! This is a Stub class for DebouncingOnClickListener.java found in the butterknife
- * module, in order to work around the fact that java projects can't depend on android libraries.
- */
-public abstract class DebouncingOnClickListener implements View.OnClickListener {
-
-  static boolean enabled = true;
-
-  private static final Runnable ENABLE_AGAIN = new Runnable() {
-    @Override public void run() {
-      enabled = true;
-    }
-  };
-
-  @Override public final void onClick(View v) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public abstract void doClick(View v);
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/Finder.java b/butterknife-compiler/src/test/java/butterknife/internal/Finder.java
deleted file mode 100644
index 446c6059..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/Finder.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package butterknife.internal;
-
-import android.content.Context;
-import android.view.View;
-import java.util.List;
-
-public class Finder {
-
-  private static <T> T[] filterNull(T[] views) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public <T> T findRequiredView(Object source, int id, String who) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public <T> T findOptionalView(Object source, int id, String who) {
-    throw new RuntimeException("Stub!");
-  }
-
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castView(View view, int id, String who) {
-    throw new RuntimeException("Stub!");
-  }
-
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public Context getContext(Object source) {
-    throw new RuntimeException("Stub!");
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/Utils.java b/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
deleted file mode 100644
index 201f5190..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/Utils.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package butterknife.internal;
-
-import android.content.res.ColorStateList;
-import android.content.res.Resources;
-import android.graphics.drawable.Drawable;
-import java.util.List;
-
-public final class Utils {
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme, int id,
-      int tintAttrId) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static int getColor(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, int id) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> T[] arrayOf(T... views) {
-    throw new RuntimeException("Stub!");
-  }
-
-  public static <T> List<T> listOf(T... views) {
-    throw new RuntimeException("Stub!");
-  }
-}
diff --git a/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java b/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java
deleted file mode 100644
index f0234899..00000000
--- a/butterknife-compiler/src/test/java/butterknife/internal/ViewBinder.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package butterknife.internal;
-
-public interface ViewBinder<T> {
-  void bind(Finder finder, T target, Object source);
-}
diff --git a/butterknife-gradle-plugin/build.gradle b/butterknife-gradle-plugin/build.gradle
new file mode 100644
index 00000000..74b81994
--- /dev/null
+++ b/butterknife-gradle-plugin/build.gradle
@@ -0,0 +1,21 @@
+apply plugin: 'java-library'
+apply plugin: 'kotlin'
+
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
+
+dependencies {
+  compileOnly gradleApi()
+
+  implementation deps.android.gradlePlugin
+  implementation deps.javaparser
+  implementation deps.javapoet
+  implementation deps.kotlin.stdLibJre8
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.support.annotations
+  testImplementation deps.compiletesting
+}
+
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife-gradle-plugin/gradle.properties b/butterknife-gradle-plugin/gradle.properties
new file mode 100644
index 00000000..8edce620
--- /dev/null
+++ b/butterknife-gradle-plugin/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Butterknife Gradle Plugin
+POM_ARTIFACT_ID=butterknife-gradle-plugin
+POM_PACKAGING=jar
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
new file mode 100644
index 00000000..0f320906
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -0,0 +1,78 @@
+package butterknife.plugin
+
+import com.android.build.gradle.AppExtension
+import com.android.build.gradle.AppPlugin
+import com.android.build.gradle.FeatureExtension
+import com.android.build.gradle.FeaturePlugin
+import com.android.build.gradle.LibraryExtension
+import com.android.build.gradle.LibraryPlugin
+import com.android.build.gradle.api.BaseVariant
+import org.gradle.api.DomainObjectSet
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+import org.gradle.api.plugins.ExtensionContainer
+import java.io.File
+import java.util.concurrent.atomic.AtomicBoolean
+import kotlin.reflect.KClass
+
+class ButterKnifePlugin : Plugin<Project> {
+  override fun apply(project: Project) {
+    project.plugins.all {
+      when (it) {
+        is FeaturePlugin -> {
+          project.extensions[FeatureExtension::class].run {
+            configureR2Generation(project, featureVariants)
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is LibraryPlugin -> {
+          project.extensions[LibraryExtension::class].run {
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is AppPlugin -> {
+          project.extensions[AppExtension::class].run {
+            configureR2Generation(project, applicationVariants)
+          }
+        }
+      }
+    }
+  }
+
+  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
+    variants.all { variant ->
+      val outputDir = project.buildDir.resolve(
+          "generated/source/r2/${variant.dirName}")
+
+      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.outputs.dir(outputDir)
+      variant.registerJavaGeneratingTask(task, outputDir)
+
+      val once = AtomicBoolean()
+      variant.outputs.all { output ->
+        val processResources = output.processResources
+        task.dependsOn(processResources)
+
+        // Though there might be multiple outputs, their R files are all the same. Thus, we only
+        // need to configure the task once with the R.java input and action.
+        if (once.compareAndSet(false, true)) {
+          val rPackage = processResources.packageForR
+          val pathToR = rPackage.replace('.', File.separatorChar)
+          val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
+
+          task.apply {
+            inputs.file(rFile)
+
+            doLast {
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+            }
+          }
+        }
+      }
+    }
+  }
+
+  private operator fun <T : Any> ExtensionContainer.get(type: KClass<T>): T {
+    return getByType(type.java)!!
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
new file mode 100644
index 00000000..672da6dc
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java
@@ -0,0 +1,111 @@
+package butterknife.plugin;
+
+import com.github.javaparser.JavaParser;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.body.BodyDeclaration;
+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
+import com.github.javaparser.ast.body.FieldDeclaration;
+import com.github.javaparser.ast.body.TypeDeclaration;
+import com.github.javaparser.ast.body.VariableDeclarator;
+import com.github.javaparser.ast.type.PrimitiveType;
+import com.github.javaparser.ast.type.Type;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+import java.io.File;
+import java.util.Arrays;
+import java.util.List;
+
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.STATIC;
+
+/**
+ * Generates a class that contains all supported field names in an R file as final values.
+ * Also enables adding support annotations to indicate the type of resource for every field.
+ */
+public final class FinalRClassBuilder {
+  private static final String SUPPORT_ANNOTATION_PACKAGE = "android.support.annotation";
+  private static final String[] SUPPORTED_TYPES = {
+      "anim", "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "layout", "menu", "plurals",
+      "string", "style", "styleable"
+  };
+
+  private FinalRClassBuilder() { }
+
+  public static void brewJava(File rFile, File outputDir, String packageName, String className)
+      throws Exception {
+    CompilationUnit compilationUnit = JavaParser.parse(rFile);
+    TypeDeclaration resourceClass = compilationUnit.getTypes().get(0);
+
+    TypeSpec.Builder result =
+        TypeSpec.classBuilder(className).addModifiers(PUBLIC).addModifiers(FINAL);
+
+    for (Node node : resourceClass.getChildNodes()) {
+      if (node instanceof ClassOrInterfaceDeclaration) {
+        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node);
+      }
+    }
+
+    JavaFile finalR = JavaFile.builder(packageName, result.build())
+        .addFileComment("Generated code from Butter Knife gradle plugin. Do not modify!")
+        .build();
+
+    finalR.writeTo(outputDir);
+  }
+
+  private static void addResourceType(List<String> supportedTypes, TypeSpec.Builder result,
+      ClassOrInterfaceDeclaration node) {
+    if (!supportedTypes.contains(node.getNameAsString())) {
+      return;
+    }
+
+    String type = node.getNameAsString();
+    TypeSpec.Builder resourceType = TypeSpec.classBuilder(type).addModifiers(PUBLIC, STATIC, FINAL);
+
+    for (BodyDeclaration field : node.getMembers()) {
+      if (field instanceof FieldDeclaration) {
+        FieldDeclaration declaration = (FieldDeclaration) field;
+        // Check that the field is an Int because styleable also contains Int arrays which can't be
+        // used in annotations.
+        if (isInt(declaration)) {
+          addResourceField(resourceType, declaration.getVariables().get(0),
+                  getSupportAnnotationClass(type));
+        }
+      }
+    }
+
+    result.addType(resourceType.build());
+  }
+
+  private static boolean isInt(FieldDeclaration field) {
+    Type type = field.getCommonType();
+    return type instanceof PrimitiveType
+        && ((PrimitiveType) type).getType() == PrimitiveType.Primitive.INT;
+  }
+
+  private static void addResourceField(TypeSpec.Builder resourceType, VariableDeclarator variable,
+      ClassName annotation) {
+    String fieldName = variable.getNameAsString();
+    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);
+    FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(int.class, fieldName)
+        .addModifiers(PUBLIC, STATIC, FINAL)
+        .initializer(fieldValue);
+
+    if (annotation != null) {
+      fieldSpecBuilder.addAnnotation(annotation);
+    }
+
+    resourceType.addField(fieldSpecBuilder.build());
+  }
+
+  private static ClassName getSupportAnnotationClass(String type) {
+    return ClassName.get(SUPPORT_ANNOTATION_PACKAGE, capitalize(type) + "Res");
+  }
+
+  private static String capitalize(String word) {
+    return Character.toUpperCase(word.charAt(0)) + word.substring(1);
+  }
+}
diff --git a/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties
new file mode 100644
index 00000000..b5f8ecf3
--- /dev/null
+++ b/butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties
@@ -0,0 +1 @@
+implementation-class=butterknife.plugin.ButterKnifePlugin
diff --git a/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
new file mode 100644
index 00000000..68918ff8
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt
@@ -0,0 +1,43 @@
+package butterknife.plugin
+
+import com.google.common.truth.Truth.assertAbout
+import com.google.testing.compile.JavaFileObjects
+import com.google.testing.compile.JavaSourceSubjectFactory.javaSource
+import org.junit.Assert.assertEquals
+import org.junit.Rule
+import org.junit.Test
+import org.junit.rules.TemporaryFolder
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import org.junit.runners.Parameterized.Parameters
+
+@RunWith(Parameterized::class)
+class FinalRClassBuilderTest(val rFile: String, val r2File: String) {
+  @Rule @JvmField val tempFolder = TemporaryFolder()
+
+  @Test fun brewJava() {
+    val packageName = "com.butterknife.example"
+
+    val rFile = tempFolder.newFile("R.java").also {
+      it.writeText(javaClass.getResource("/fixtures/$rFile.java").readText())
+    }
+
+    val outputDir = tempFolder.newFolder()
+    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2")
+
+    val actual = outputDir.resolve("com/butterknife/example/R2.java").readText()
+    val expected = javaClass.getResource("/fixtures/$r2File.java").readText()
+
+    assertEquals(expected.trim(), actual.trim())
+
+    val actualJava = JavaFileObjects.forSourceString("$packageName.R2", actual)
+    assertAbout(javaSource()).that(actualJava).compilesWithoutError()
+  }
+
+  companion object {
+    @JvmStatic @Parameters fun data() = listOf(
+        arrayOf<Any>("R", "R2"),
+        arrayOf<Any>("RFinal", "R2")
+    )
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
new file mode 100644
index 00000000..f02e0d09
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R.java
@@ -0,0 +1,68 @@
+package com.example.butterknife;
+
+public final class R {
+  public static final class unsupported {
+    public static int res = 0x7f040000;
+  }
+
+  public static final class anim {
+    public static int res = 0x7f040001;
+  }
+
+  public static final class array {
+    public static int res = 0x7f040002;
+  }
+
+  public static final class attr {
+    public static int res = 0x7f040003;
+  }
+
+  public static final class bool {
+    public static int res = 0x7f040004;
+  }
+
+  public static final class color {
+    public static int res = 0x7f040005;
+  }
+
+  public static final class dimen {
+    public static int res = 0x7f040006;
+  }
+
+  public static final class drawable {
+    public static int res = 0x7f040007;
+  }
+
+  public static final class id {
+    public static int res = 0x7f040008;
+  }
+
+  public static final class integer {
+    public static int res = 0x7f040009;
+  }
+
+  public static final class layout {
+    public static int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static int[] resArray = { 0x7f040003 };
+    public static int res = 0x7f040015;
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
new file mode 100644
index 00000000..4b44bab4
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/R2.java
@@ -0,0 +1,95 @@
+// Generated code from Butter Knife gradle plugin. Do not modify!
+package com.butterknife.example;
+
+import android.support.annotation.AnimRes;
+import android.support.annotation.ArrayRes;
+import android.support.annotation.AttrRes;
+import android.support.annotation.BoolRes;
+import android.support.annotation.ColorRes;
+import android.support.annotation.DimenRes;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.IdRes;
+import android.support.annotation.IntegerRes;
+import android.support.annotation.LayoutRes;
+import android.support.annotation.MenuRes;
+import android.support.annotation.PluralsRes;
+import android.support.annotation.StringRes;
+import android.support.annotation.StyleRes;
+import android.support.annotation.StyleableRes;
+
+public final class R2 {
+  public static final class anim {
+    @AnimRes
+    public static final int res = 0x7f040001;
+  }
+
+  public static final class array {
+    @ArrayRes
+    public static final int res = 0x7f040002;
+  }
+
+  public static final class attr {
+    @AttrRes
+    public static final int res = 0x7f040003;
+  }
+
+  public static final class bool {
+    @BoolRes
+    public static final int res = 0x7f040004;
+  }
+
+  public static final class color {
+    @ColorRes
+    public static final int res = 0x7f040005;
+  }
+
+  public static final class dimen {
+    @DimenRes
+    public static final int res = 0x7f040006;
+  }
+
+  public static final class drawable {
+    @DrawableRes
+    public static final int res = 0x7f040007;
+  }
+
+  public static final class id {
+    @IdRes
+    public static final int res = 0x7f040008;
+  }
+
+  public static final class integer {
+    @IntegerRes
+    public static final int res = 0x7f040009;
+  }
+
+  public static final class layout {
+    @LayoutRes
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    @MenuRes
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    @PluralsRes
+    public static final int res = 0x7f040012;
+  }
+
+  public static final class string {
+    @StringRes
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    @StyleRes
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    @StyleableRes
+    public static final int res = 0x7f040015;
+  }
+}
diff --git a/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
new file mode 100644
index 00000000..c1391905
--- /dev/null
+++ b/butterknife-gradle-plugin/src/test/resources/fixtures/RFinal.java
@@ -0,0 +1,63 @@
+package com.example.butterknife;
+
+public final class R {
+  public static final class anim {
+    public static final int res = 0x7f040001;
+  }
+
+  public static final class array {
+    public static final int res = 0x7f040002;
+  }
+
+  public static final class attr {
+    public static final int res = 0x7f040003;
+  }
+
+  public static final class bool {
+    public static final int res = 0x7f040004;
+  }
+
+  public static final class color {
+    public static final int res = 0x7f040005;
+  }
+
+  public static final class dimen {
+    public static final int res = 0x7f040006;
+  }
+
+  public static final class drawable {
+    public static final int res = 0x7f040007;
+  }
+
+  public static final class id {
+    public static final int res = 0x7f040008;
+  }
+
+  public static final class integer {
+    public static final int res = 0x7f040009;
+  }
+
+  public static final class layout {
+    public static final int res = 0x7f040010;
+  }
+
+  public static final class menu {
+    public static final int res = 0x7f040011;
+  }
+
+  public static final class plurals {
+    public static final int res = 0x7f040012;
+  }
+
+  public static final class string {
+    public static final int res = 0x7f040013;
+  }
+
+  public static final class style {
+    public static final int res = 0x7f040014;
+  }
+
+  public static final class styleable {
+    public static final int res = 0x7f040015;
+  }
+}
diff --git a/butterknife-integration-test/build.gradle b/butterknife-integration-test/build.gradle
new file mode 100644
index 00000000..f06fe678
--- /dev/null
+++ b/butterknife-integration-test/build.gradle
@@ -0,0 +1,51 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  compileOptions {
+    sourceCompatibility = JavaVersion.VERSION_1_7
+    targetCompatibility = JavaVersion.VERSION_1_7
+  }
+
+  defaultConfig {
+    applicationId 'com.example.butterknife'
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput "stdout"
+    checkAllWarnings true
+    warningsAsErrors true
+    showAll true
+    explainIssues true
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
+  }
+
+  buildTypes {
+    release {
+      minifyEnabled true
+      proguardFile getDefaultProguardFile('proguard-android.txt')
+    }
+  }
+
+  testOptions {
+    unitTests {
+      includeAndroidResources = true
+    }
+  }
+}
+
+dependencies {
+  implementation project(':butterknife')
+  annotationProcessor project(':butterknife-compiler')
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.robolectric
+}
diff --git a/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
new file mode 100644
index 00000000..c9c69e79
--- /dev/null
+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/SimpleActivityTest.java
@@ -0,0 +1,15 @@
+package com.example.butterknife;
+
+import android.test.ActivityInstrumentationTestCase2;
+import com.example.butterknife.library.SimpleActivity;
+
+public final class SimpleActivityTest extends ActivityInstrumentationTestCase2<SimpleActivity> {
+  public SimpleActivityTest() {
+    super(SimpleActivity.class);
+  }
+
+  public void testActivityStarts() {
+    getActivity(); // Trigger activity creation.
+    getInstrumentation().waitForIdleSync(); // Wait for it to complete startup.
+  }
+}
diff --git a/butterknife-integration-test/src/main/AndroidManifest.xml b/butterknife-integration-test/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..f3d3b89a
--- /dev/null
+++ b/butterknife-integration-test/src/main/AndroidManifest.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.example.butterknife">
+
+  <application
+      android:allowBackup="false"
+      android:fullBackupContent="false"
+      android:label="@string/app_name"
+      android:name=".SimpleApp"
+      tools:ignore="MissingApplicationIcon,UnusedAttribute,GoogleAppIndexingWarning">
+
+    <activity
+        android:label="@string/app_name"
+        android:name=".library.SimpleActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+
+        <category android:name="android.intent.category.LAUNCHER"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+      </intent-filter>
+    </activity>
+  </application>
+</manifest>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java b/butterknife-integration-test/src/main/java/com/example/butterknife/SimpleApp.java
similarity index 100%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java
rename to butterknife-integration-test/src/main/java/com/example/butterknife/SimpleApp.java
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
new file mode 100644
index 00000000..7097639f
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -0,0 +1,78 @@
+package com.example.butterknife.library;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.animation.AlphaAnimation;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+import butterknife.BindString;
+import butterknife.BindView;
+import butterknife.BindViews;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+import butterknife.OnItemClick;
+import butterknife.OnLongClick;
+import com.example.butterknife.R;
+
+import java.util.List;
+
+import static android.widget.Toast.LENGTH_SHORT;
+
+public class SimpleActivity extends Activity {
+  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {
+    @Override public void apply(@NonNull View view, int index) {
+      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);
+      alphaAnimation.setFillBefore(true);
+      alphaAnimation.setDuration(500);
+      alphaAnimation.setStartOffset(index * 100);
+      view.startAnimation(alphaAnimation);
+    }
+  };
+
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.hello) Button hello;
+  @BindView(R.id.list_of_things) ListView listOfThings;
+  @BindView(R.id.footer) TextView footer;
+  @BindString(R.string.app_name) String butterKnife;
+  @BindString(R.string.field_method) String fieldMethod;
+  @BindString(R.string.by_jake_wharton) String byJakeWharton;
+  @BindString(R.string.say_hello) String sayHello;
+
+  @BindViews({ R.id.title, R.id.subtitle, R.id.hello }) List<View> headerViews;
+
+  private SimpleAdapter adapter;
+
+  @OnClick(R.id.hello) void sayHello() {
+    Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
+    ButterKnife.apply(headerViews, ALPHA_FADE);
+  }
+
+  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+    Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
+    return true;
+  }
+
+  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
+    Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
+  }
+
+  @Override protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.simple_activity);
+    ButterKnife.bind(this);
+
+    // Contrived code to use the bound fields.
+    title.setText(butterKnife);
+    subtitle.setText(fieldMethod);
+    footer.setText(byJakeWharton);
+    hello.setText(sayHello);
+
+    adapter = new SimpleAdapter(this);
+    listOfThings.setAdapter(adapter);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java
new file mode 100644
index 00000000..5e68d5d1
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -0,0 +1,64 @@
+package com.example.butterknife.library;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import com.example.butterknife.R;
+
+import java.util.Locale;
+
+public class SimpleAdapter extends BaseAdapter {
+  private static final String[] CONTENTS = "The quick brown fox jumps over the lazy dog".split(" ");
+
+  private final LayoutInflater inflater;
+
+  public SimpleAdapter(Context context) {
+    inflater = LayoutInflater.from(context);
+  }
+
+  @Override public int getCount() {
+    return CONTENTS.length;
+  }
+
+  @Override public String getItem(int position) {
+    return CONTENTS[position];
+  }
+
+  @Override public long getItemId(int position) {
+    return position;
+  }
+
+  @Override public View getView(int position, View view, ViewGroup parent) {
+    ViewHolder holder;
+    if (view != null) {
+      holder = (ViewHolder) view.getTag();
+    } else {
+      view = inflater.inflate(R.layout.simple_list_item, parent, false);
+      holder = new ViewHolder(view);
+      view.setTag(holder);
+    }
+
+    String word = getItem(position);
+    holder.word.setText(String.format(Locale.getDefault(), "Word: %s", word));
+    holder.length.setText(String.format(Locale.getDefault(), "Length: %d", word.length()));
+    holder.position.setText(String.format(Locale.getDefault(), "Position: %d", position));
+    // Note: don't actually do string concatenation like this in an adapter's getView.
+
+    return view;
+  }
+
+  static final class ViewHolder {
+    @BindView(R.id.word) TextView word;
+    @BindView(R.id.length) TextView length;
+    @BindView(R.id.position) TextView position;
+
+    ViewHolder(View view) {
+      ButterKnife.bind(this, view);
+    }
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
new file mode 100644
index 00000000..5f4db917
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java
@@ -0,0 +1,15 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class A {
+
+  @BindColor(android.R.color.black) @ColorInt int blackColor;
+
+  public A(View view) {
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
new file mode 100644
index 00000000..59b87e06
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class B extends A {
+
+  @BindColor(android.R.color.white) @ColorInt int whiteColor;
+
+  public B(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
new file mode 100644
index 00000000..ee69cb08
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java
@@ -0,0 +1,18 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class C extends B {
+
+  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;
+  @BindView(android.R.id.button1) View button1;
+
+  public C(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
new file mode 100644
index 00000000..1ea1ff88
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class D extends C {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+
+  public D(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
new file mode 100644
index 00000000..5411da11
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class E extends C {
+
+  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;
+
+  public E(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
new file mode 100644
index 00000000..838a2dcf
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public final class F extends D {
+
+  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;
+
+  public F(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
new file mode 100644
index 00000000..497b9f4c
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java
@@ -0,0 +1,23 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class G extends E {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+  @BindView(android.R.id.button2) View button2;
+
+  public G(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+
+  @OnClick(android.R.id.content) public void onClick() {
+
+  }
+}
diff --git a/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
new file mode 100644
index 00000000..354bc4b8
--- /dev/null
+++ b/butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java
@@ -0,0 +1,18 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+import butterknife.BindColor;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class H extends G {
+
+  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindView(android.R.id.button3) View button3;
+
+  public H(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/butterknife-integration-test/src/main/res/layout/simple_activity.xml b/butterknife-integration-test/src/main/res/layout/simple_activity.xml
new file mode 100644
index 00000000..d95547a8
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/layout/simple_activity.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              android:padding="8dp"
+              tools:ignore="SelectableText">
+    <TextView
+            android:id="@+id/title"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="50sp"/>
+    <TextView
+            android:id="@+id/subtitle"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="20sp"/>
+    <Button
+            android:id="@+id/hello"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:layout_margin="10dp"/>
+    <ListView
+            android:id="@+id/list_of_things"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:layout_margin="10dp"/>
+    <TextView
+            android:id="@+id/footer"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="17sp"
+            android:textStyle="italic"/>
+</LinearLayout>
diff --git a/butterknife-integration-test/src/main/res/layout/simple_list_item.xml b/butterknife-integration-test/src/main/res/layout/simple_list_item.xml
new file mode 100644
index 00000000..8d57d86a
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/layout/simple_list_item.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical"
+              tools:ignore="SelectableText">
+    <TextView
+            android:id="@+id/word"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+    <TextView
+            android:id="@+id/length"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+    <TextView
+            android:id="@+id/position"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+</LinearLayout>
diff --git a/butterknife-integration-test/src/main/res/values/strings.xml b/butterknife-integration-test/src/main/res/values/strings.xml
new file mode 100644
index 00000000..11580e25
--- /dev/null
+++ b/butterknife-integration-test/src/main/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+  <string name="app_name">Butter Knife</string>
+  <string name="field_method">Field and method binding for Android views.</string>
+  <string name="by_jake_wharton">by Jake Wharton</string>
+  <string name="say_hello">Say Hello</string>
+</resources>
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
similarity index 63%
rename from butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
rename to butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
index 6af0ea8a..ccda50b4 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleActivityTest.java
@@ -1,33 +1,39 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import com.example.butterknife.R;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = "src/main/AndroidManifest.xml")
+@RunWith(RobolectricTestRunner.class)
 public class SimpleActivityTest {
   @Test public void verifyContentViewBinding() {
-    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class) //
-        .create() //
-        .get();
+    SimpleActivity activity = Robolectric.buildActivity(SimpleActivity.class).create().get();
 
+    Unbinder unbinder = ButterKnife.bind(activity);
+    verifySimpleActivityBound(activity);
+    unbinder.unbind();
+    verifySimpleActivityUnbound(activity);
+  }
+
+  protected static void verifySimpleActivityBound(SimpleActivity activity) {
     assertThat(activity.title.getId()).isEqualTo(R.id.title);
     assertThat(activity.subtitle.getId()).isEqualTo(R.id.subtitle);
     assertThat(activity.hello.getId()).isEqualTo(R.id.hello);
     assertThat(activity.listOfThings.getId()).isEqualTo(R.id.list_of_things);
     assertThat(activity.footer.getId()).isEqualTo(R.id.footer);
+  }
 
-    activity.unbinder.unbind();
+  protected static void verifySimpleActivityUnbound(SimpleActivity activity) {
     assertThat(activity.title).isNull();
     assertThat(activity.subtitle).isNull();
     assertThat(activity.hello).isNull();
     assertThat(activity.listOfThings).isNull();
     assertThat(activity.footer).isNull();
-    assertThat(activity.unbinder).isNull();
   }
 }
diff --git a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
similarity index 55%
rename from butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
rename to butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
index afc96add..cd625c3e 100644
--- a/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/library/SimpleAdapterTest.java
@@ -1,24 +1,22 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
 import android.content.Context;
-import android.view.LayoutInflater;
 import android.view.View;
+import com.example.butterknife.R;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
 
-import static com.example.butterknife.SimpleAdapter.ViewHolder;
+import static com.example.butterknife.library.SimpleAdapter.ViewHolder;
 import static com.google.common.truth.Truth.assertThat;
 
-@RunWith(RobolectricTestRunner.class) //
-@Config(manifest = "src/main/AndroidManifest.xml")
+@RunWith(RobolectricTestRunner.class)
 public class SimpleAdapterTest {
   @Test public void verifyViewHolderViews() {
-    Context context = Robolectric.application;
+    Context context = RuntimeEnvironment.application;
 
-    View root = LayoutInflater.from(context).inflate(R.layout.simple_list_item, null);
+    View root = View.inflate(context, R.layout.simple_list_item, null);
     ViewHolder holder = new ViewHolder(root);
 
     assertThat(holder.word.getId()).isEqualTo(R.id.word);
diff --git a/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
new file mode 100644
index 00000000..55754140
--- /dev/null
+++ b/butterknife-integration-test/src/test/java/com/example/butterknife/unbinder/UnbinderTest.java
@@ -0,0 +1,52 @@
+package com.example.butterknife.unbinder;
+
+import android.view.View;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import butterknife.ButterKnife;
+import butterknife.Unbinder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+import static com.google.common.truth.Truth.assertThat;
+
+@RunWith(RobolectricTestRunner.class)
+public final class UnbinderTest {
+
+  @Test
+  public void verifyContentViewBinding() {
+    FrameLayout frameLayout = new FrameLayout(RuntimeEnvironment.application);
+    Button button1 = new Button(RuntimeEnvironment.application);
+    button1.setId(android.R.id.button1);
+    frameLayout.addView(button1);
+    Button button2 = new Button(RuntimeEnvironment.application);
+    button2.setId(android.R.id.button2);
+    frameLayout.addView(button2);
+    Button button3 = new Button(RuntimeEnvironment.application);
+    button3.setId(android.R.id.button3);
+    frameLayout.addView(button3);
+    View content = new View(RuntimeEnvironment.application);
+    content.setId(android.R.id.content);
+    frameLayout.addView(content);
+    H h = new H(frameLayout);
+
+    Unbinder unbinder = ButterKnife.bind(h, frameLayout);
+    verifyHBound(h);
+    unbinder.unbind();
+    verifyHUnbound(h);
+  }
+
+  private void verifyHBound(H h) {
+    assertThat(h.button1).isNotNull();
+    assertThat(h.button2).isNotNull();
+    assertThat(h.button3).isNotNull();
+  }
+
+  private void verifyHUnbound(H h) {
+    assertThat(h.button1).isNull();
+    assertThat(h.button2).isNull();
+    assertThat(h.button3).isNull();
+  }
+}
diff --git a/butterknife-integration-test/src/test/resources/robolectric.properties b/butterknife-integration-test/src/test/resources/robolectric.properties
new file mode 100644
index 00000000..135477ad
--- /dev/null
+++ b/butterknife-integration-test/src/test/resources/robolectric.properties
@@ -0,0 +1,2 @@
+constants=com.example.butterknife.BuildConfig
+sdk=23
diff --git a/butterknife-lint/build.gradle b/butterknife-lint/build.gradle
new file mode 100644
index 00000000..fb63a78f
--- /dev/null
+++ b/butterknife-lint/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'java-library'
+apply plugin: 'checkstyle'
+
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
+
+dependencies {
+  compileOnly deps.lint.api
+  compileOnly deps.lint.checks
+
+  testImplementation deps.junit
+  testImplementation deps.lint.core
+  testImplementation deps.lint.tests
+  testImplementation(deps.truth) {
+    exclude group: 'com.google.guava', module: 'guava'
+  }
+}
+
+jar {
+  manifest {
+    attributes 'Lint-Registry-v2': 'butterknife.lint.LintRegistry'
+  }
+}
+
+checkstyle {
+  configFile rootProject.file('checkstyle.xml')
+  showViolations true
+  sourceSets = [sourceSets.main]
+}
diff --git a/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
new file mode 100644
index 00000000..08cdfda5
--- /dev/null
+++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java
@@ -0,0 +1,112 @@
+package butterknife.lint;
+
+import com.android.tools.lint.client.api.UElementHandler;
+import com.android.tools.lint.detector.api.Category;
+import com.android.tools.lint.detector.api.Detector;
+import com.android.tools.lint.detector.api.Implementation;
+import com.android.tools.lint.detector.api.Issue;
+import com.android.tools.lint.detector.api.JavaContext;
+import com.android.tools.lint.detector.api.LintUtils;
+import com.android.tools.lint.detector.api.Scope;
+import com.android.tools.lint.detector.api.Severity;
+import com.google.common.collect.ImmutableSet;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import org.jetbrains.uast.UAnnotation;
+import org.jetbrains.uast.UClass;
+import org.jetbrains.uast.UElement;
+import org.jetbrains.uast.UExpression;
+import org.jetbrains.uast.UFile;
+import org.jetbrains.uast.UQualifiedReferenceExpression;
+import org.jetbrains.uast.USimpleNameReferenceExpression;
+import org.jetbrains.uast.visitor.AbstractUastVisitor;
+
+/**
+ * Custom lint rule to make sure that generated R2 is not referenced outside annotations.
+ */
+public class InvalidR2UsageDetector extends Detector implements Detector.UastScanner {
+  private static final String LINT_ERROR_BODY = "R2 should only be used inside annotations";
+  private static final String LINT_ERROR_TITLE = "Invalid usage of R2";
+  private static final String ISSUE_ID = "InvalidR2Usage";
+  private static final Set<String> SUPPORTED_TYPES =
+      ImmutableSet.of("array", "attr", "bool", "color", "dimen", "drawable", "id", "integer",
+          "string");
+
+  static final Issue ISSUE =
+      Issue.create(ISSUE_ID, LINT_ERROR_TITLE, LINT_ERROR_BODY, Category.CORRECTNESS, 6,
+          Severity.ERROR, new Implementation(InvalidR2UsageDetector.class, Scope.JAVA_FILE_SCOPE));
+
+  private static final String R2 = "R2";
+
+  @Override public List<Class<? extends UElement>> getApplicableUastTypes() {
+    return Collections.singletonList(UClass.class);
+  }
+
+  @Override public UElementHandler createUastHandler(final JavaContext context) {
+    return new UElementHandler() {
+      @Override public void visitClass(UClass node) {
+        node.accept(new R2UsageVisitor(context));
+      }
+    };
+  }
+
+  private static class R2UsageVisitor extends AbstractUastVisitor {
+    private final JavaContext context;
+
+    R2UsageVisitor(JavaContext context) {
+      this.context = context;
+    }
+
+    @Override public boolean visitAnnotation(UAnnotation annotation) {
+      // skip annotations
+      return true;
+    }
+
+    @Override public boolean visitQualifiedReferenceExpression(UQualifiedReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitQualifiedReferenceExpression(node);
+    }
+
+    @Override
+    public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression node) {
+      detectR2(context, node);
+      return super.visitSimpleNameReferenceExpression(node);
+    }
+
+    private static void detectR2(JavaContext context, UElement node) {
+      UFile sourceFile = context.getUastFile();
+      List<UClass> classes = sourceFile.getClasses();
+      if (!classes.isEmpty() && classes.get(0).getName() != null) {
+        String qualifiedName = classes.get(0).getName();
+        if (qualifiedName.contains("_ViewBinder")
+            || qualifiedName.contains("_ViewBinding")
+            || qualifiedName.equals(R2)) {
+          // skip generated files and R2
+          return;
+        }
+      }
+      boolean isR2 = isR2Expression(node);
+      if (isR2 && !context.isSuppressedWithComment(node, ISSUE)) {
+        context.report(ISSUE, node, context.getLocation(node), LINT_ERROR_BODY);
+      }
+    }
+
+    private static boolean isR2Expression(UElement node) {
+      UElement parentNode = node.getUastParent();
+      if (parentNode == null) {
+        return false;
+      }
+      String text = node.asSourceString();
+      UElement parent = LintUtils.skipParentheses(parentNode);
+      return (text.equals(R2) || text.contains(".R2"))
+          && parent instanceof UExpression
+          && endsWithAny(parent.asSourceString(), SUPPORTED_TYPES);
+    }
+
+    private static boolean endsWithAny(String text, Set<String> possibleValues) {
+      String[] tokens = text.split("\\.");
+      return tokens.length > 1 && possibleValues.contains(tokens[tokens.length - 1]);
+    }
+  }
+}
diff --git a/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
new file mode 100644
index 00000000..440fbe5d
--- /dev/null
+++ b/butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java
@@ -0,0 +1,16 @@
+package butterknife.lint;
+
+import com.android.tools.lint.client.api.IssueRegistry;
+import com.android.tools.lint.detector.api.Issue;
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+
+/**
+ * Contains references to all custom lint checks for butterknife.
+ */
+public class LintRegistry extends IssueRegistry {
+
+  @Override public List<Issue> getIssues() {
+    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
+  }
+}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
new file mode 100644
index 00000000..d655f943
--- /dev/null
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -0,0 +1,137 @@
+package butterknife.lint;
+
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
+
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
+
+public final class InvalidR2UsageDetectorTest {
+  private static final TestFile BIND_TEST = java(""
+      + "package sample.r2;\n"
+      + "\n"
+      + "import java.lang.annotation.ElementType;\n"
+      + "import java.lang.annotation.Retention;\n"
+      + "import java.lang.annotation.RetentionPolicy;\n"
+      + "import java.lang.annotation.Target;\n"
+      + "\n"
+      + "@Retention(RetentionPolicy.SOURCE) @Target({ ElementType.FIELD, ElementType.METHOD })\n"
+      + "public @interface BindTest {\n"
+      + "  int value();\n"
+      + "}\n");
+
+  private static final TestFile R2 = java(""
+      + "package sample.r2;\n"
+      + "\n"
+      + "public final class R2 {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class attr {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class dimen {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class drawable {\n"
+      + "    public static final int res = 0x7f040006;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class id {\n"
+      + "    public static final int res = 0x7f040007;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040008;\n"
+      + "  }\n"
+      + "\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040009;\n"
+      + "  }\n"
+      + "}");
+
+  @Test public void noR2Usage() {
+    lint() //
+        .files(R2, //
+            java("" //
+                + "package sample;\n" //
+                + "class NoR2Usage {}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
+  }
+
+  @Test public void usesR2InAnnotations() {
+    lint() //
+        .files(R2, BIND_TEST, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageInAnnotations {\n"
+                + "\n"
+                + "  @BindTest(sample.r2.R2.string.res) String test;\n"
+                + "\n"
+                + "  @BindTest(R2.id.res) public void foo() {}\n"
+                + "}\n") //
+        ) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
+  }
+
+  @Test public void usesR2OutsideAnnotations() {
+    lint() //
+        .files(R2, //
+            java(""
+                + "package sample.r2;\n"
+                + "\n"
+                + "public class R2UsageOutsideAnnotations {\n"
+                + "\n"
+                + "  int array = sample.r2.R2.array.res;\n"
+                + "\n"
+                + "  public void foo(int color) {}\n"
+                + "\n"
+                + "  public void bar() {\n"
+                + "    foo(R2.color.res);\n"
+                + "  }\n"
+                + "}\n" //
+            )) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectErrorCount(2) //
+        .expectWarningCount(0);
+  }
+
+  @Test public void usesR2WithSuppression() {
+    lint() //
+        .files(R2, java(""
+            + "package sample.r2;\n"
+            + "\n"
+            + "public class R2UsageWithSuppression {\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  int bool = sample.r2.R2.bool.res;\n"
+            + "\n"
+            + "  public void foo(int attr) {}\n"
+            + "\n"
+            + "  @SuppressWarnings(\"InvalidR2Usage\")\n"
+            + "  public void bar() {\n"
+            + "    foo(R2.attr.res);\n"
+            + "  }\n"
+            + "}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
+  }
+}
diff --git a/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
new file mode 100644
index 00000000..53c7480f
--- /dev/null
+++ b/butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java
@@ -0,0 +1,11 @@
+package butterknife.lint;
+
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class LintRegistryTest {
+  @Test public void issues() {
+    assertThat(new LintRegistry().getIssues()).contains(InvalidR2UsageDetector.ISSUE);
+  }
+}
diff --git a/butterknife-sample/build.gradle b/butterknife-sample/build.gradle
deleted file mode 100644
index 9e728385..00000000
--- a/butterknife-sample/build.gradle
+++ /dev/null
@@ -1,35 +0,0 @@
-apply plugin: 'com.android.application'
-apply plugin: 'com.neenbedankt.android-apt'
-
-android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
-
-  compileOptions {
-    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
-    targetCompatibility rootProject.ext.targetCompatibilityVersion
-  }
-
-  defaultConfig {
-    applicationId 'com.example.butterknife'
-    minSdkVersion rootProject.ext.minSdkVersion
-    targetSdkVersion rootProject.ext.targetSdkVersion
-    versionCode 1
-    versionName '1.0.0'
-  }
-
-  buildTypes {
-    debug {
-      minifyEnabled true
-    }
-  }
-}
-
-dependencies {
-  compile project(':butterknife')
-  apt project(':butterknife-compiler')
-
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.robolectric
-}
diff --git a/butterknife/build.gradle b/butterknife/build.gradle
index ac3837bc..304dee70 100644
--- a/butterknife/build.gradle
+++ b/butterknife/build.gradle
@@ -1,24 +1,62 @@
 apply plugin: 'com.android.library'
 
 android {
-  compileSdkVersion rootProject.ext.compileSdkVersion
-  buildToolsVersion rootProject.ext.buildToolsVersion
+  compileSdkVersion versions.compileSdk
 
   defaultConfig {
-    minSdkVersion rootProject.ext.minSdkVersion
+    minSdkVersion versions.minSdk
 
     consumerProguardFiles 'proguard-rules.txt'
+
+    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
+
+    javaCompileOptions {
+      annotationProcessorOptions {
+        includeCompileClasspath = true
+      }
+    }
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
+    checkReleaseBuilds false
   }
 }
 
 dependencies {
-  compile project(':butterknife-annotations')
-  compile deps.supportAnnotations
-  provided deps.supportv4
+  api project(':butterknife-annotations')
+  implementation deps.support.annotations
+  api deps.support.compat
+
+  lintChecks project(':butterknife-lint')
 
-  testCompile deps.junit
-  testCompile deps.truth
-  testCompile deps.robolectric
+  androidTestImplementation deps.junit
+  androidTestImplementation deps.truth
+  androidTestImplementation deps.support.test.runner
+  androidTestAnnotationProcessor project(':butterknife-compiler')
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+  testImplementation deps.compiletesting
+  testImplementation files(getRuntimeJar())
+  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
+  testImplementation project(':butterknife-compiler')
+}
+
+def getRuntimeJar() {
+  try {
+    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
+    File runtimeJar = new File(javaBase, "lib/rt.jar");
+    if (runtimeJar.exists()) {
+      return runtimeJar;
+    }
+    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
+    return runtimeJar.exists() ? runtimeJar : null;
+  } catch (IOException e) {
+    throw new RuntimeException(e);
+  }
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
diff --git a/butterknife/proguard-rules.txt b/butterknife/proguard-rules.txt
index f76e67de..dd010a40 100644
--- a/butterknife/proguard-rules.txt
+++ b/butterknife/proguard-rules.txt
@@ -1,11 +1,8 @@
--keep class butterknife.** { *; }
--dontwarn butterknife.internal.**
--keep class **$$ViewBinder { *; }
+# Retain generated class which implement Unbinder.
+-keep public class * implements butterknife.Unbinder { public <init>(**, android.view.View); }
 
--keepclasseswithmembernames class * {
-    @butterknife.* <fields>;
-}
-
--keepclasseswithmembernames class * {
-    @butterknife.* <methods>;
-}
\ No newline at end of file
+# Prevent obfuscation of types which use ButterKnife annotations since the simple name
+# is used to reflectively look up the generated ViewBinding.
+-keep class butterknife.*
+-keepclasseswithmembernames class * { @butterknife.* <methods>; }
+-keepclasseswithmembernames class * { @butterknife.* <fields>; }
diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
similarity index 71%
rename from butterknife/src/test/java/butterknife/ButterKnifeTest.java
rename to butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
index 4798d698..9bde9ff5 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java
@@ -1,23 +1,23 @@
 package butterknife;
 
-import android.app.Activity;
+import android.annotation.TargetApi;
+import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.filters.SdkSuppress;
 import android.util.Property;
 import android.view.View;
-import java.util.Arrays;
 import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
+import static android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH;
 import static com.google.common.truth.Truth.assertThat;
+import static java.util.Arrays.asList;
 
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
+@TargetApi(ICE_CREAM_SANDWICH)
+@SdkSuppress(minSdkVersion = ICE_CREAM_SANDWICH)
 public class ButterKnifeTest {
   private static final Property<View, Boolean> PROPERTY_ENABLED =
       new Property<View, Boolean>(Boolean.class, "enabled") {
@@ -46,13 +46,15 @@
     }
   };
 
+  private final Context context = InstrumentationRegistry.getContext();
+
   @Before @After // Clear out cache of binders before and after each test.
   public void resetViewsCache() {
-    ButterKnife.BINDERS.clear();
+    ButterKnife.BINDINGS.clear();
   }
 
   @Test public void propertyAppliedToView() {
-    View view = new View(Robolectric.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, PROPERTY_ENABLED, false);
@@ -60,14 +62,14 @@ public void resetViewsCache() {
   }
 
   @Test public void propertyAppliedToEveryViewInList() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
 
-    List<View> views = Arrays.asList(view1, view2, view3);
+    List<View> views = asList(view1, view2, view3);
     ButterKnife.apply(views, PROPERTY_ENABLED, false);
 
     assertThat(view1.isEnabled()).isFalse();
@@ -76,9 +78,9 @@ public void resetViewsCache() {
   }
 
   @Test public void propertyAppliedToEveryViewInArray() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -92,7 +94,7 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToView() {
-    View view = new View(Robolectric.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, ACTION_DISABLE);
@@ -101,7 +103,7 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToView() {
-    View view = new View(Robolectric.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
     assertThat(view.getAlpha()).isEqualTo(1f);
 
@@ -111,14 +113,14 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToEveryViewInList() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
 
-    List<View> views = Arrays.asList(view1, view2, view3);
+    List<View> views = asList(view1, view2, view3);
     ButterKnife.apply(views, ACTION_DISABLE);
 
     assertThat(view1.isEnabled()).isFalse();
@@ -127,9 +129,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionAppliedToEveryViewInArray() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -143,9 +145,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToEveryViewInList() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -153,7 +155,7 @@ public void resetViewsCache() {
     assertThat(view2.getAlpha()).isEqualTo(1f);
     assertThat(view3.getAlpha()).isEqualTo(1f);
 
-    List<View> views = Arrays.asList(view1, view2, view3);
+    List<View> views = asList(view1, view2, view3);
     ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);
 
     assertThat(view1.isEnabled()).isFalse();
@@ -165,9 +167,9 @@ public void resetViewsCache() {
   }
 
   @Test public void actionsAppliedToEveryViewInArray() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -187,7 +189,7 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToView() {
-    View view = new View(Robolectric.application);
+    View view = new View(context);
     assertThat(view.isEnabled()).isTrue();
 
     ButterKnife.apply(view, SETTER_ENABLED, false);
@@ -196,14 +198,14 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToEveryViewInList() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
 
-    List<View> views = Arrays.asList(view1, view2, view3);
+    List<View> views = asList(view1, view2, view3);
     ButterKnife.apply(views, SETTER_ENABLED, false);
 
     assertThat(view1.isEnabled()).isFalse();
@@ -212,9 +214,9 @@ public void resetViewsCache() {
   }
 
   @Test public void setterAppliedToEveryViewInArray() {
-    View view1 = new View(Robolectric.application);
-    View view2 = new View(Robolectric.application);
-    View view3 = new View(Robolectric.application);
+    View view1 = new View(context);
+    View view2 = new View(context);
+    View view3 = new View(context);
     assertThat(view1.isEnabled()).isTrue();
     assertThat(view2.isEnabled()).isTrue();
     assertThat(view3.isEnabled()).isTrue();
@@ -227,29 +229,19 @@ public void resetViewsCache() {
     assertThat(view3.isEnabled()).isFalse();
   }
 
-  @Test public void bindingViewReturnsView() {
-    View view = new View(Robolectric.application);
-
-    View one = ButterKnife.bind(view);
-    assertThat(one).isSameAs(view);
-
-    View two = ButterKnife.bind(new Object(), view);
-    assertThat(two).isSameAs(view);
-  }
-
   @Test public void zeroBindingsBindDoesNotThrowException() {
     class Example {
     }
 
     Example example = new Example();
-    ButterKnife.bind(example, null, null);
-    assertThat(ButterKnife.BINDERS).containsEntry(Example.class, ButterKnife.NOP_VIEW_BINDER);
+    assertThat(ButterKnife.bind(example, (View) null)).isSameAs(Unbinder.EMPTY);
   }
 
   @Test public void bindingKnownPackagesIsNoOp() {
-    ButterKnife.bind(new Activity());
-    assertThat(ButterKnife.BINDERS).isEmpty();
-    ButterKnife.bind(new Object(), new Activity());
-    assertThat(ButterKnife.BINDERS).isEmpty();
+    View view = new View(context);
+    ButterKnife.bind(view);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
+    ButterKnife.bind(new Object(), view);
+    assertThat(ButterKnife.BINDINGS).isEmpty();
   }
 }
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
new file mode 100644
index 00000000..19992317
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindArrayTest.java
@@ -0,0 +1,59 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindArray;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindArrayTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class StringArrayTarget {
+    @BindArray(R.array.string_one_two_three) String[] actual;
+  }
+
+  @Test public void asStringArray() {
+    StringArrayTarget target = new StringArrayTarget();
+    String[] expected = context.getResources().getStringArray(R.array.string_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$StringArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class IntArrayTarget {
+    @BindArray(R.array.int_one_two_three) int[] actual;
+  }
+
+  @Test public void asIntArray() {
+    IntArrayTarget target = new IntArrayTarget();
+    int[] expected = context.getResources().getIntArray(R.array.int_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$IntArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class CharSequenceArrayTarget {
+    @BindArray(R.array.int_one_two_three) CharSequence[] actual;
+  }
+
+  @Test public void asCharSequenceArray() {
+    CharSequenceArrayTarget target = new CharSequenceArrayTarget();
+    CharSequence[] expected = context.getResources().getTextArray(R.array.int_one_two_three);
+
+    Unbinder unbinder = new BindArrayTest$CharSequenceArrayTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
new file mode 100644
index 00000000..b3517fc8
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBitmapTest.java
@@ -0,0 +1,33 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBitmap;
+import butterknife.BindBool;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public final class BindBitmapTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindBitmap(R.drawable.pixel) Bitmap actual;
+  }
+
+  @Test public void asBitmap() {
+    Target target = new Target();
+    Bitmap expected = BitmapFactory.decodeResource(context.getResources(), R.drawable.pixel);
+
+    Unbinder unbinder = new BindBitmapTest$Target_ViewBinding(target, context);
+    assertTrue(target.actual.sameAs(expected));
+
+    unbinder.unbind();
+    assertTrue(target.actual.sameAs(expected));
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
new file mode 100644
index 00000000..9156f8dc
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindBoolTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBool;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindBoolTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindBool(R.bool.just_true) boolean actual;
+  }
+
+  @Test public void asBoolean() {
+    Target target = new Target();
+    boolean expected = context.getResources().getBoolean(R.bool.just_true);
+
+    Unbinder unbinder = new BindBoolTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
new file mode 100644
index 00000000..12c8d020
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindColorTest.java
@@ -0,0 +1,45 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindColor;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindColorTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class IntTarget {
+    @BindColor(R.color.red) int actual;
+  }
+
+  @Test public void asInt() {
+    IntTarget target = new IntTarget();
+    int expected = context.getResources().getColor(R.color.red);
+
+    Unbinder unbinder = new BindColorTest$IntTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class ColorStateListTarget {
+    @BindColor(R.color.colors) ColorStateList actual;
+  }
+
+  @Test public void asColorStateList() {
+    ColorStateListTarget target = new ColorStateListTarget();
+    ColorStateList expected = context.getResources().getColorStateList(R.color.colors);
+
+    Unbinder unbinder = new BindColorTest$ColorStateListTarget_ViewBinding(target, context);
+    assertThat(target.actual.toString()).isEqualTo(expected.toString());
+
+    unbinder.unbind();
+    assertThat(target.actual.toString()).isEqualTo(expected.toString());
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
new file mode 100644
index 00000000..4c76d548
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindDimenTest.java
@@ -0,0 +1,44 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindDimen;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindDimenTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class IntTarget {
+    @BindDimen(R.dimen.twelve_point_two_dp) int actual;
+  }
+
+  @Test public void asInt() {
+    IntTarget target = new IntTarget();
+    int expected = context.getResources().getDimensionPixelSize(R.dimen.twelve_point_two_dp);
+
+    Unbinder unbinder = new BindDimenTest$IntTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+
+  static class FloatTarget {
+    @BindDimen(R.dimen.twelve_point_two_dp) float actual;
+  }
+
+  @Test public void asFloat() {
+    FloatTarget target = new FloatTarget();
+    float expected = context.getResources().getDimension(R.dimen.twelve_point_two_dp);
+
+    Unbinder unbinder = new BindDimenTest$FloatTarget_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
new file mode 100644
index 00000000..88d23687
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindDrawableTest.java
@@ -0,0 +1,34 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.drawable.Drawable;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindBitmap;
+import butterknife.BindDrawable;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertTrue;
+
+public final class BindDrawableTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindDrawable(R.drawable.circle) Drawable actual;
+  }
+
+  @Test public void asDrawable() {
+    Target target = new Target();
+    Drawable expected = context.getResources().getDrawable(R.drawable.circle);
+
+    Unbinder unbinder = new BindDrawableTest$Target_ViewBinding(target, context);
+    assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
+
+    unbinder.unbind();
+    assertThat(target.actual.getConstantState()).isEqualTo(expected.getConstantState());
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
new file mode 100644
index 00000000..5ec97658
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindFloatTest.java
@@ -0,0 +1,33 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.util.TypedValue;
+import butterknife.BindFloat;
+import butterknife.BindInt;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindFloatTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindFloat(R.dimen.twelve_point_two) float actual;
+  }
+
+  @Test public void asFloat() {
+    Target target = new Target();
+    TypedValue value = new TypedValue();
+    context.getResources().getValue(R.dimen.twelve_point_two, value, true);
+    float expected = value.getFloat();
+
+    Unbinder unbinder = new BindFloatTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
new file mode 100644
index 00000000..8f091966
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindIntTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindInt;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindIntTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindInt(R.integer.twelve) int actual;
+  }
+
+  @Test public void asInt() {
+    Target target = new Target();
+    int expected = context.getResources().getInteger(R.integer.twelve);
+
+    Unbinder unbinder = new BindIntTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java b/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
new file mode 100644
index 00000000..c72e0549
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/functional/BindStringTest.java
@@ -0,0 +1,29 @@
+package butterknife.functional;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import butterknife.BindString;
+import butterknife.Unbinder;
+import butterknife.test.R;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+public final class BindStringTest {
+  private final Context context = InstrumentationRegistry.getContext();
+
+  static class Target {
+    @BindString(R.string.hey) String actual;
+  }
+
+  @Test public void simpleInt() {
+    Target target = new Target();
+    String expected = context.getString(R.string.hey);
+
+    Unbinder unbinder = new BindStringTest$Target_ViewBinding(target, context);
+    assertThat(target.actual).isEqualTo(expected);
+
+    unbinder.unbind();
+    assertThat(target.actual).isEqualTo(expected);
+  }
+}
diff --git a/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
new file mode 100644
index 00000000..a46b74a4
--- /dev/null
+++ b/butterknife/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -0,0 +1,79 @@
+package butterknife.internal;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.view.View;
+import org.junit.Test;
+
+import static butterknife.internal.Utils.arrayOf;
+import static butterknife.internal.Utils.listOf;
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.fail;
+
+public final class UtilsTest {
+  @Test public void listOfFiltersNull() {
+    assertThat(listOf(null, null, null)).isEmpty();
+    assertThat(listOf("One", null, null)).containsExactly("One");
+    assertThat(listOf(null, "One", null)).containsExactly("One");
+    assertThat(listOf(null, null, "One")).containsExactly("One");
+    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+  }
+
+  @Test public void arrayOfFiltersNull() {
+    assertThat(arrayOf(null, null, null)).isEmpty();
+    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
+  }
+
+  @Test public void finderThrowsNiceError() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new View(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view 'button1' with ID "
+          + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  @Test public void finderThrowsLessNiceErrorInEditMode() {
+    Context context = InstrumentationRegistry.getContext();
+    View view = new EditModeView(context);
+    try {
+      Utils.findRequiredView(view, android.R.id.button1, "yo mama");
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
+          + "with ID " + android.R.id.button1
+          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
+    }
+  }
+
+  @Test public void testCastParam() {
+    try {
+      Utils.castParam("abc", "Foo", 3, "foo()", 4, Integer.class);
+      fail();
+    } catch (IllegalStateException ise) {
+      assertThat(ise.getMessage()).isEqualTo(
+          "Parameter #4 of method 'Foo' was of the wrong type for parameter #5 of method 'foo()'. See cause for more info.");
+    }
+  }
+
+  static final class EditModeView extends View {
+    EditModeView(Context context) {
+      super(context);
+    }
+
+    @Override public boolean isInEditMode() {
+      return true;
+    }
+  }
+}
diff --git a/butterknife/src/androidTest/res/color/colors.xml b/butterknife/src/androidTest/res/color/colors.xml
new file mode 100644
index 00000000..2af4b135
--- /dev/null
+++ b/butterknife/src/androidTest/res/color/colors.xml
@@ -0,0 +1,11 @@
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+  <item
+      android:color="#ffff0000"
+      android:state_pressed="true"
+      />
+  <item
+      android:color="#ff0000ff"
+      android:state_focused="true"
+      />
+  <item android:color="#ff000000"/>
+</selector>
diff --git a/butterknife/src/androidTest/res/drawable/circle.xml b/butterknife/src/androidTest/res/drawable/circle.xml
new file mode 100644
index 00000000..54496c5b
--- /dev/null
+++ b/butterknife/src/androidTest/res/drawable/circle.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval"
+    >
+  <size
+      android:height="10px"
+      android:width="10px"
+      />
+  <solid
+      android:color="#fff"
+      />
+</shape>
diff --git a/butterknife/src/androidTest/res/drawable/pixel.png b/butterknife/src/androidTest/res/drawable/pixel.png
new file mode 100644
index 00000000..9644db32
Binary files /dev/null and b/butterknife/src/androidTest/res/drawable/pixel.png differ
diff --git a/butterknife/src/androidTest/res/values/values.xml b/butterknife/src/androidTest/res/values/values.xml
new file mode 100644
index 00000000..f53d702e
--- /dev/null
+++ b/butterknife/src/androidTest/res/values/values.xml
@@ -0,0 +1,18 @@
+<resources>
+  <bool name="just_true">true</bool>
+  <color name="red">#ffff0000</color>
+  <integer name="twelve">12</integer>
+  <dimen name="twelve_point_two_dp">12.2dp</dimen>
+  <item name="twelve_point_two" format="float" type="dimen">12.2</item>
+  <string name="hey">Hey</string>
+  <string-array name="string_one_two_three">
+    <item>One</item>
+    <item>Two</item>
+    <item>Three</item>
+  </string-array>
+  <integer-array name="int_one_two_three">
+    <item>1</item>
+    <item>2</item>
+    <item>3</item>
+  </integer-array>
+</resources>
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index acd68ed9..e4090708 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -5,13 +5,16 @@
 import android.app.Dialog;
 import android.os.Build;
 import android.support.annotation.CheckResult;
-import android.support.annotation.IdRes;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RequiresApi;
+import android.support.annotation.UiThread;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import android.util.Property;
 import android.view.View;
-import butterknife.internal.Finder;
-import butterknife.internal.ViewBinder;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -23,8 +26,8 @@
  * Finding views from your activity is as easy as:
  * <pre><code>
  * public class ExampleActivity extends Activity {
- *   {@literal @}Bind(R.id.title) EditText titleView;
- *   {@literal @}Bind(R.id.subtitle) EditText subtitleView;
+ *   {@literal @}BindView(R.id.title) EditText titleView;
+ *   {@literal @}BindView(R.id.subtitle) EditText subtitleView;
  *
  *   {@literal @}Override protected void onCreate(Bundle savedInstanceState) {
  *     super.onCreate(savedInstanceState);
@@ -41,7 +44,7 @@
  * <p>
  * Group multiple views together into a {@link List} or array.
  * <pre><code>
- * {@literal @}Bind({R.id.first_name, R.id.middle_name, R.id.last_name})
+ * {@literal @}BindView({R.id.first_name, R.id.middle_name, R.id.last_name})
  * List<EditText> nameViews;
  * </code></pre>
  * There are three convenience methods for working with view collections:
@@ -69,7 +72,7 @@
  * <a href="http://tools.android.com/tech-docs/support-annotations">support-annotations</a> library)
  * or the {@code @Optional} annotation for methods.
  * <pre><code>
- * {@literal @}Nullable @Bind(R.id.title) TextView subtitleView;
+ * {@literal @}Nullable @BindView(R.id.title) TextView subtitleView;
  * </code></pre>
  * Resources can also be bound to fields to simplify programmatically working with views:
  * <pre><code>
@@ -83,31 +86,25 @@ private ButterKnife() {
     throw new AssertionError("No instances.");
   }
 
-  /** An unbinder contract that can be bind with {@link butterknife.Unbinder}. */
-  @SuppressWarnings("unused") // Used by generated code.
-  public interface Unbinder {
-    void unbind();
-  }
-
   /** An action that can be applied to a list of views. */
   public interface Action<T extends View> {
     /** Apply the action on the {@code view} which is at {@code index} in the list. */
+    @UiThread
     void apply(@NonNull T view, int index);
   }
 
   /** A setter that can apply a value to a list of views. */
   public interface Setter<T extends View, V> {
     /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */
+    @UiThread
     void set(@NonNull T view, V value, int index);
   }
 
   private static final String TAG = "ButterKnife";
   private static boolean debug = false;
 
-  static final Map<Class<?>, ViewBinder<Object>> BINDERS = new LinkedHashMap<>();
-  static final ViewBinder<Object> NOP_VIEW_BINDER = new ViewBinder<Object>() {
-    @Override public void bind(Finder finder, Object target, Object source) { }
-  };
+  @VisibleForTesting
+  static final Map<Class<?>, Constructor<? extends Unbinder>> BINDINGS = new LinkedHashMap<>();
 
   /** Control whether debug logging is enabled. */
   public static void setDebug(boolean debug) {
@@ -115,112 +112,135 @@ public static void setDebug(boolean debug) {
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Activity}. The current content
+   * BindView annotated fields and methods in the specified {@link Activity}. The current content
    * view is used as the view root.
    *
    * @param target Target activity for view binding.
    */
-  public static void bind(@NonNull Activity target) {
-    bind(target, target, Finder.ACTIVITY);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Activity target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link View}. The view and its children
+   * BindView annotated fields and methods in the specified {@link View}. The view and its children
    * are used as the view root.
    *
    * @param target Target view for view binding.
    */
-  @NonNull
-  public static View bind(@NonNull View target) {
-    bind(target, target, Finder.VIEW);
-    return target;
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull View target) {
+    return createBinding(target, target);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@link Dialog}. The current content
+   * BindView annotated fields and methods in the specified {@link Dialog}. The current content
    * view is used as the view root.
    *
    * @param target Target dialog for view binding.
    */
-  @SuppressWarnings("unused") // Public api.
-  public static void bind(@NonNull Dialog target) {
-    bind(target, target, Finder.DIALOG);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Dialog target) {
+    View sourceView = target.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Activity} as the view root.
    *
    * @param target Target class for view binding.
    * @param source Activity on which IDs will be looked up.
    */
-  public static void bind(@NonNull Object target, @NonNull Activity source) {
-    bind(target, source, Finder.ACTIVITY);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Activity source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link View} as the view root.
    *
    * @param target Target class for view binding.
    * @param source View root on which IDs will be looked up.
    */
-  @NonNull
-  public static View bind(@NonNull Object target, @NonNull View source) {
-    bind(target, source, Finder.VIEW);
-    return source;
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull View source) {
+    return createBinding(target, source);
   }
 
   /**
-   * Bind annotated fields and methods in the specified {@code target} using the {@code source}
+   * BindView annotated fields and methods in the specified {@code target} using the {@code source}
    * {@link Dialog} as the view root.
    *
    * @param target Target class for view binding.
    * @param source Dialog on which IDs will be looked up.
    */
-  @SuppressWarnings("unused") // Public api.
-  public static void bind(@NonNull Object target, @NonNull Dialog source) {
-    bind(target, source, Finder.DIALOG);
+  @NonNull @UiThread
+  public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
+    View sourceView = source.getWindow().getDecorView();
+    return createBinding(target, sourceView);
   }
 
-  static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder finder) {
+  private static Unbinder createBinding(@NonNull Object target, @NonNull View source) {
     Class<?> targetClass = target.getClass();
+    if (debug) Log.d(TAG, "Looking up binding for " + targetClass.getName());
+    Constructor<? extends Unbinder> constructor = findBindingConstructorForClass(targetClass);
+
+    if (constructor == null) {
+      return Unbinder.EMPTY;
+    }
+
+    //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.
     try {
-      if (debug) Log.d(TAG, "Looking up view binder for " + targetClass.getName());
-      ViewBinder<Object> viewBinder = findViewBinderForClass(targetClass);
-      viewBinder.bind(finder, target, source);
-    } catch (Exception e) {
-      throw new RuntimeException("Unable to bind views for " + targetClass.getName(), e);
+      return constructor.newInstance(target, source);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException("Unable to invoke " + constructor, e);
+    } catch (InstantiationException e) {
+      throw new RuntimeException("Unable to invoke " + constructor, e);
+    } catch (InvocationTargetException e) {
+      Throwable cause = e.getCause();
+      if (cause instanceof RuntimeException) {
+        throw (RuntimeException) cause;
+      }
+      if (cause instanceof Error) {
+        throw (Error) cause;
+      }
+      throw new RuntimeException("Unable to create binding instance.", cause);
     }
   }
 
-  @NonNull
-  private static ViewBinder<Object> findViewBinderForClass(Class<?> cls)
-      throws IllegalAccessException, InstantiationException {
-    ViewBinder<Object> viewBinder = BINDERS.get(cls);
-    if (viewBinder != null) {
-      if (debug) Log.d(TAG, "HIT: Cached in view binder map.");
-      return viewBinder;
+  @Nullable @CheckResult @UiThread
+  private static Constructor<? extends Unbinder> findBindingConstructorForClass(Class<?> cls) {
+    Constructor<? extends Unbinder> bindingCtor = BINDINGS.get(cls);
+    if (bindingCtor != null) {
+      if (debug) Log.d(TAG, "HIT: Cached in binding map.");
+      return bindingCtor;
     }
     String clsName = cls.getName();
     if (clsName.startsWith("android.") || clsName.startsWith("java.")) {
       if (debug) Log.d(TAG, "MISS: Reached framework class. Abandoning search.");
-      return NOP_VIEW_BINDER;
+      return null;
     }
     try {
-      Class<?> viewBindingClass = Class.forName(clsName + "$$ViewBinder");
+      Class<?> bindingClass = cls.getClassLoader().loadClass(clsName + "_ViewBinding");
       //noinspection unchecked
-      viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
-      if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
+      bindingCtor = (Constructor<? extends Unbinder>) bindingClass.getConstructor(cls, View.class);
+      if (debug) Log.d(TAG, "HIT: Loaded binding class and constructor.");
     } catch (ClassNotFoundException e) {
       if (debug) Log.d(TAG, "Not found. Trying superclass " + cls.getSuperclass().getName());
-      viewBinder = findViewBinderForClass(cls.getSuperclass());
+      bindingCtor = findBindingConstructorForClass(cls.getSuperclass());
+    } catch (NoSuchMethodException e) {
+      throw new RuntimeException("Unable to find binding constructor for " + clsName, e);
     }
-    BINDERS.put(cls, viewBinder);
-    return viewBinder;
+    BINDINGS.put(cls, bindingCtor);
+    return bindingCtor;
   }
 
   /** Apply the specified {@code actions} across the {@code list} of views. */
+  @UiThread
   @SafeVarargs public static <T extends View> void apply(@NonNull List<T> list,
       @NonNull Action<? super T>... actions) {
     for (int i = 0, count = list.size(); i < count; i++) {
@@ -231,6 +251,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply the specified {@code actions} across the {@code array} of views. */
+  @UiThread
   @SafeVarargs public static <T extends View> void apply(@NonNull T[] array,
       @NonNull Action<? super T>... actions) {
     for (int i = 0, count = array.length; i < count; i++) {
@@ -241,6 +262,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply the specified {@code action} across the {@code list} of views. */
+  @UiThread
   public static <T extends View> void apply(@NonNull List<T> list,
       @NonNull Action<? super T> action) {
     for (int i = 0, count = list.size(); i < count; i++) {
@@ -249,6 +271,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply the specified {@code action} across the {@code array} of views. */
+  @UiThread
   public static <T extends View> void apply(@NonNull T[] array, @NonNull Action<? super T> action) {
     for (int i = 0, count = array.length; i < count; i++) {
       action.apply(array[i], i);
@@ -256,6 +279,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply {@code actions} to {@code view}. */
+  @UiThread
   @SafeVarargs public static <T extends View> void apply(@NonNull T view,
       @NonNull Action<? super T>... actions) {
     for (Action<? super T> action : actions) {
@@ -264,11 +288,13 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply {@code action} to {@code view}. */
+  @UiThread
   public static <T extends View> void apply(@NonNull T view, @NonNull Action<? super T> action) {
     action.apply(view, 0);
   }
 
   /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */
+  @UiThread
   public static <T extends View, V> void apply(@NonNull List<T> list,
       @NonNull Setter<? super T, V> setter, V value) {
     for (int i = 0, count = list.size(); i < count; i++) {
@@ -277,6 +303,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */
+  @UiThread
   public static <T extends View, V> void apply(@NonNull T[] array,
       @NonNull Setter<? super T, V> setter, V value) {
     for (int i = 0, count = array.length; i < count; i++) {
@@ -285,6 +312,7 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Set {@code value} on {@code view} using {@code setter}. */
+  @UiThread
   public static <T extends View, V> void apply(@NonNull T view,
       @NonNull Setter<? super T, V> setter, V value) {
     setter.set(view, value, 0);
@@ -293,7 +321,9 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   /**
    * Apply the specified {@code value} across the {@code list} of views using the {@code property}.
    */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
   public static <T extends View, V> void apply(@NonNull List<T> list,
       @NonNull Property<? super T, V> setter, V value) {
     //noinspection ForLoopReplaceableByForEach
@@ -305,7 +335,9 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   /**
    * Apply the specified {@code value} across the {@code array} of views using the {@code property}.
    */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
   public static <T extends View, V> void apply(@NonNull T[] array,
       @NonNull Property<? super T, V> setter, V value) {
     //noinspection ForLoopReplaceableByForEach
@@ -315,30 +347,11 @@ static void bind(@NonNull Object target, @NonNull Object source, @NonNull Finder
   }
 
   /** Apply {@code value} to {@code view} using {@code property}. */
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) // http://b.android.com/213630
+  @RequiresApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+  @UiThread
   public static <T extends View, V> void apply(@NonNull T view,
       @NonNull Property<? super T, V> setter, V value) {
     setter.set(view, value);
   }
-
-  /** Simpler version of {@link View#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull View view, @IdRes int id) {
-    return (T) view.findViewById(id);
-  }
-
-  /** Simpler version of {@link Activity#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Activity activity, @IdRes int id) {
-    return (T) activity.findViewById(id);
-  }
-
-  /** Simpler version of {@link Dialog#findViewById(int)} which infers the target type. */
-  @SuppressWarnings({ "unchecked", "UnusedDeclaration" }) // Checked by runtime cast. Public API.
-  @CheckResult
-  public static <T extends View> T findById(@NonNull Dialog dialog, @IdRes int id) {
-    return (T) dialog.findViewById(id);
-  }
 }
diff --git a/butterknife/src/main/java/butterknife/Unbinder.java b/butterknife/src/main/java/butterknife/Unbinder.java
new file mode 100644
index 00000000..ce27c3e9
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/Unbinder.java
@@ -0,0 +1,12 @@
+package butterknife;
+
+import android.support.annotation.UiThread;
+
+/** An unbinder contract that will unbind views when called. */
+public interface Unbinder {
+  @UiThread void unbind();
+
+  Unbinder EMPTY = new Unbinder() {
+    @Override public void unbind() { }
+  };
+}
diff --git a/butterknife/src/main/java/butterknife/internal/Finder.java b/butterknife/src/main/java/butterknife/internal/Finder.java
deleted file mode 100644
index effd6de4..00000000
--- a/butterknife/src/main/java/butterknife/internal/Finder.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package butterknife.internal;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Context;
-import android.view.View;
-
-@SuppressWarnings("UnusedDeclaration") // Used by generated code.
-public enum Finder {
-  VIEW {
-    @Override protected View findView(Object source, int id) {
-      return ((View) source).findViewById(id);
-    }
-
-    @Override public Context getContext(Object source) {
-      return ((View) source).getContext();
-    }
-
-    @Override protected String getResourceEntryName(Object source, int id) {
-      final View view = (View) source;
-      // In edit mode, getResourceEntryName() is unsupported due to use of BridgeResources
-      if (view.isInEditMode()) {
-        return "<unavailable while editing>";
-      }
-      return super.getResourceEntryName(source, id);
-    }
-  },
-  ACTIVITY {
-    @Override protected View findView(Object source, int id) {
-      return ((Activity) source).findViewById(id);
-    }
-
-    @Override public Context getContext(Object source) {
-      return (Activity) source;
-    }
-  },
-  DIALOG {
-    @Override protected View findView(Object source, int id) {
-      return ((Dialog) source).findViewById(id);
-    }
-
-    @Override public Context getContext(Object source) {
-      return ((Dialog) source).getContext();
-    }
-  };
-
-  public <T> T findRequiredView(Object source, int id, String who) {
-    T view = findOptionalView(source, id, who);
-    if (view == null) {
-      String name = getResourceEntryName(source, id);
-      throw new IllegalStateException("Required view '"
-          + name
-          + "' with ID "
-          + id
-          + " for "
-          + who
-          + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
-          + " (methods) annotation.");
-    }
-    return view;
-  }
-
-  public <T> T findOptionalView(Object source, int id, String who) {
-    View view = findView(source, id);
-    return castView(view, id, who);
-  }
-
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castView(View view, int id, String who) {
-    try {
-      return (T) view;
-    } catch (ClassCastException e) {
-      if (who == null) {
-        throw new AssertionError();
-      }
-      String name = getResourceEntryName(view, id);
-      throw new IllegalStateException("View '"
-          + name
-          + "' with ID "
-          + id
-          + " for "
-          + who
-          + " was of the wrong type. See cause for more info.", e);
-    }
-  }
-
-  @SuppressWarnings("unchecked") // That's the point.
-  public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {
-    try {
-      return (T) value;
-    } catch (ClassCastException e) {
-      throw new IllegalStateException("Parameter #"
-          + (fromPosition + 1)
-          + " of method '"
-          + from
-          + "' was of the wrong type for parameter #"
-          + (toPosition + 1)
-          + " of method '"
-          + to
-          + "'. See cause for more info.", e);
-    }
-  }
-
-  protected String getResourceEntryName(Object source, int id) {
-    return getContext(source).getResources().getResourceEntryName(id);
-  }
-
-  protected abstract View findView(Object source, int id);
-
-  public abstract Context getContext(Object source);
-}
diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index cd158d50..e9101f74 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -1,59 +1,52 @@
 package butterknife.internal;
 
-import android.content.res.ColorStateList;
+import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.support.annotation.AttrRes;
-import android.support.annotation.ColorRes;
+import android.support.annotation.DimenRes;
 import android.support.annotation.DrawableRes;
+import android.support.annotation.IdRes;
+import android.support.annotation.UiThread;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
+import android.view.View;
 import java.lang.reflect.Array;
 import java.util.List;
 
-@SuppressWarnings("deprecation") //
+@SuppressWarnings("WeakerAccess") // Used by generated code.
 public final class Utils {
-  private static final boolean HAS_SUPPORT_V4 = hasSupportV4();
+  private static final TypedValue VALUE = new TypedValue();
 
-  private static boolean hasSupportV4() {
-    try {
-      Class.forName("android.support.v4.graphics.drawable.DrawableCompat");
-      return true;
-    } catch (ClassNotFoundException ignored) {
-      return false;
-    }
-  }
-
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
+  @UiThread // Implicit synchronization for use of shared resource VALUE.
+  public static Drawable getTintedDrawable(Context context,
       @DrawableRes int id, @AttrRes int tintAttrId) {
-    if (HAS_SUPPORT_V4) {
-      return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
-    }
-    throw new RuntimeException(
-        "Android support-v4 library is required for @BindDrawable with tint.");
-  }
-
-  public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColor(id);
+    boolean attributeFound = context.getTheme().resolveAttribute(tintAttrId, VALUE, true);
+    if (!attributeFound) {
+      throw new Resources.NotFoundException("Required tint color attribute with name "
+          + context.getResources().getResourceEntryName(tintAttrId)
+          + " and attribute ID "
+          + tintAttrId
+          + " was not found.");
     }
-    return res.getColor(id, theme);
-  }
 
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
-      @ColorRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
-      return res.getColorStateList(id);
-    }
-    return res.getColorStateList(id, theme);
+    Drawable drawable = ContextCompat.getDrawable(context, id);
+    drawable = DrawableCompat.wrap(drawable.mutate());
+    int color = ContextCompat.getColor(context, VALUE.resourceId);
+    DrawableCompat.setTint(drawable, color);
+    return drawable;
   }
 
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
-    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
-      return res.getDrawable(id);
+  @UiThread // Implicit synchronization for use of shared resource VALUE.
+  public static float getFloat(Context context, @DimenRes int id) {
+    TypedValue value = VALUE;
+    context.getResources().getValue(id, value, true);
+    if (value.type == TypedValue.TYPE_FLOAT) {
+      return value.getFloat();
     }
-    return res.getDrawable(id, theme);
+    throw new Resources.NotFoundException("Resource ID #0x" + Integer.toHexString(id)
+        + " type #0x" + Integer.toHexString(value.type) + " is not valid");
   }
 
   @SafeVarargs
@@ -84,26 +77,71 @@ public static Drawable getDrawable(Resources res, Resources.Theme theme, @Drawab
     return newViews;
   }
 
-  static class SupportV4 {
-    private static final TypedValue OUT_VALUE = new TypedValue();
+  public static <T> T findOptionalViewAsType(View source, @IdRes int id, String who,
+      Class<T> cls) {
+    View view = source.findViewById(id);
+    return castView(view, id, who, cls);
+  }
 
-    static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
-        @AttrRes int tintAttributeId) {
-      boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
-      if (!attributeFound) {
-        throw new Resources.NotFoundException("Required tint color attribute with name "
-            + res.getResourceEntryName(tintAttributeId)
-            + " and attribute ID "
-            + tintAttributeId
-            + " was not found.");
-      }
+  public static View findRequiredView(View source, @IdRes int id, String who) {
+    View view = source.findViewById(id);
+    if (view != null) {
+      return view;
+    }
+    String name = getResourceEntryName(source, id);
+    throw new IllegalStateException("Required view '"
+        + name
+        + "' with ID "
+        + id
+        + " for "
+        + who
+        + " was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"
+        + " (methods) annotation.");
+  }
+
+  public static <T> T findRequiredViewAsType(View source, @IdRes int id, String who,
+      Class<T> cls) {
+    View view = findRequiredView(source, id, who);
+    return castView(view, id, who, cls);
+  }
+
+  public static <T> T castView(View view, @IdRes int id, String who, Class<T> cls) {
+    try {
+      return cls.cast(view);
+    } catch (ClassCastException e) {
+      String name = getResourceEntryName(view, id);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
+  public static <T> T castParam(Object value, String from, int fromPos, String to, int toPos,
+      Class<T> cls) {
+    try {
+      return cls.cast(value);
+    } catch (ClassCastException e) {
+      throw new IllegalStateException("Parameter #"
+          + (fromPos + 1)
+          + " of method '"
+          + from
+          + "' was of the wrong type for parameter #"
+          + (toPos + 1)
+          + " of method '"
+          + to
+          + "'. See cause for more info.", e);
+    }
+  }
 
-      Drawable drawable = getDrawable(res, theme, id);
-      drawable = DrawableCompat.wrap(drawable.mutate());
-      int color = getColor(res, theme, OUT_VALUE.resourceId);
-      DrawableCompat.setTint(drawable, color);
-      return drawable;
+  private static String getResourceEntryName(View view, @IdRes int id) {
+    if (view.isInEditMode()) {
+      return "<unavailable while editing>";
     }
+    return view.getContext().getResources().getResourceEntryName(id);
   }
 
   private Utils() {
diff --git a/butterknife/src/main/java/butterknife/internal/ViewBinder.java b/butterknife/src/main/java/butterknife/internal/ViewBinder.java
deleted file mode 100644
index f0234899..00000000
--- a/butterknife/src/main/java/butterknife/internal/ViewBinder.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package butterknife.internal;
-
-public interface ViewBinder<T> {
-  void bind(Finder finder, T target, Object source);
-}
diff --git a/butterknife/src/main/java/butterknife/package-info.java b/butterknife/src/main/java/butterknife/package-info.java
index bfa469fb..bb2a5807 100644
--- a/butterknife/src/main/java/butterknife/package-info.java
+++ b/butterknife/src/main/java/butterknife/package-info.java
@@ -4,7 +4,7 @@
  * <p>
  * <ul>
  * <li>Eliminate {@link android.view.View#findViewById findViewById} calls by using
- * {@link butterknife.Bind @Bind} on fields.</li>
+ * {@link butterknife.BindView @BindView} on fields.</li>
  * <li>Group multiple views in a {@linkplain java.util.List list} or array.
  * Operate on all of them at once with
  * {@linkplain butterknife.ButterKnife#apply(java.util.List, butterknife.ButterKnife.Action)
diff --git a/butterknife/src/test/java/android/support/v4/view/ViewPager.java b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
new file mode 100644
index 00000000..f5be6a29
--- /dev/null
+++ b/butterknife/src/test/java/android/support/v4/view/ViewPager.java
@@ -0,0 +1,16 @@
+package android.support.v4.view;
+
+/** STUB! Required for test sources to compile. */
+public interface ViewPager {
+  void addOnPageChangeListener(OnPageChangeListener listener);
+
+  void removeOnPageChangeListener(OnPageChangeListener listener);
+
+  interface OnPageChangeListener {
+    void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);
+
+    void onPageSelected(int position);
+
+    void onPageScrollStateChanged(int state);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindAnimTest.java b/butterknife/src/test/java/butterknife/BindAnimTest.java
new file mode 100644
index 00000000..3cbff425
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindAnimTest.java
@@ -0,0 +1,82 @@
+package butterknife;
+
+import com.google.testing.compile.JavaFileObjects;
+
+import org.junit.Test;
+
+import javax.tools.JavaFileObject;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindAnimTest {
+  @Test public void simple() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.animation.Animation;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) Animation one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.view.animation.AnimationUtils;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = AnimationUtils.loadAnimation(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeAnimation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindAnim;\n"
+        + "public class Test {\n"
+        + "  @BindAnim(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindAnim field type must be 'Animation'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindArrayTest.java b/butterknife/src/test/java/butterknife/BindArrayTest.java
new file mode 100644
index 00000000..fb228829
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindArrayTest.java
@@ -0,0 +1,82 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindArrayTest {
+  @Test public void typedArray() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindArray;\n"
+        + "import android.content.res.TypedArray;\n"
+        + "public class Test {\n"
+        + "  @BindArray(1) TypedArray one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.obtainTypedArray(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeSupported() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test {\n"
+        + "  @BindArray(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindArray field type must be one of: String[], int[], CharSequence[], "
+                + "android.content.res.TypedArray. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindBitmapTest.java b/butterknife/src/test/java/butterknife/BindBitmapTest.java
new file mode 100644
index 00000000..4a1e42a6
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindBitmapTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindBitmapTest {
+  @Test public void typeMustBeBitmap() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindBitmap;\n"
+        + "public class Test {\n"
+        + "  @BindBitmap(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBitmap field type must be 'Bitmap'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindBoolTest.java b/butterknife/src/test/java/butterknife/BindBoolTest.java
new file mode 100644
index 00000000..e32031cb
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindBoolTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindBoolTest {
+  @Test public void typeMustBeBoolean() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindBool;\n"
+        + "public class Test {\n"
+        + "  @BindBool(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindBool field type must be 'boolean'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindColorTest.java b/butterknife/src/test/java/butterknife/BindColorTest.java
new file mode 100644
index 00000000..558e06ec
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindColorTest.java
@@ -0,0 +1,128 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindColorTest {
+  @Test public void simpleIntSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test {\n"
+        + "  @BindColor(1) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColor(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleColorStateListSdk23() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.res.ColorStateList;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test {\n"
+        + "  @BindColor(1) ColorStateList one;\n"
+        +"}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getColorStateList(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=23")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeIntOrColorStateList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test {\n"
+        + "  @BindColor(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindColor field type must be 'int' or 'ColorStateList'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindDimenTest.java b/butterknife/src/test/java/butterknife/BindDimenTest.java
new file mode 100644
index 00000000..0b0d235a
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindDimenTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindDimenTest {
+  @Test public void typeMustBeIntOrFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindDimen;\n"
+        + "public class Test {\n"
+        + "  @BindDimen(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDimen field type must be 'int' or 'float'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindDrawableTest.java b/butterknife/src/test/java/butterknife/BindDrawableTest.java
new file mode 100644
index 00000000..742fa1c5
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindDrawableTest.java
@@ -0,0 +1,130 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindDrawableTest {
+  @Test public void simpleSdk21() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test {\n"
+        + "  @BindDrawable(1) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = context.getDrawable(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=21")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void withTint() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.drawable.Drawable;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test {\n"
+        + "  @BindDrawable(value = 1, tint = 2) Drawable one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Utils.getTintedDrawable(context, 1, 2);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeDrawable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindDrawable;\n"
+        + "public class Test {\n"
+        + "  @BindDrawable(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindDrawable field type must be 'Drawable'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindFloatTest.java b/butterknife/src/test/java/butterknife/BindFloatTest.java
new file mode 100644
index 00000000..56980458
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindFloatTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindFloatTest {
+  @Test public void typeMustBeFloat() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindFloat;\n"
+        + "public class Test {\n"
+        + "  @BindFloat(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindFloat field type must be 'float'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindFontTest.java b/butterknife/src/test/java/butterknife/BindFontTest.java
new file mode 100644
index 00000000..290853aa
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindFontTest.java
@@ -0,0 +1,258 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class BindFontTest {
+  @Test public void simpleTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = ResourcesCompat.getFont(context, 1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void simpleIntSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getFont(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void style() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.res.ResourcesCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.one = Typeface.create(ResourcesCompat.getFont(context, 1), Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void styleSdk26() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = Typeface.BOLD) Typeface one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = Typeface.create(res.getFont(1), Typeface.BOLD);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.minSdk=26")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void typeMustBeTypeface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindFont field type must be 'Typeface'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void styleMustBeValid() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.graphics.Typeface;\n"
+        + "import butterknife.BindFont;\n"
+        + "public class Test {\n"
+        + "  @BindFont(value = 1, style = 5) Typeface one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindFont style must be NORMAL, BOLD, ITALIC, or BOLD_ITALIC. (test.Test.one)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindIntTest.java b/butterknife/src/test/java/butterknife/BindIntTest.java
new file mode 100644
index 00000000..0b7ef2ca
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindIntTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindIntTest {
+  @Test public void typeMustBeInt() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindInt;\n"
+        + "public class Test {\n"
+        + "  @BindInt(1) String one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindInt field type must be 'int'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindStringTest.java b/butterknife/src/test/java/butterknife/BindStringTest.java
new file mode 100644
index 00000000..27d68879
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindStringTest.java
@@ -0,0 +1,27 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public final class BindStringTest {
+  @Test public void typeMustBeString() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindString;\n"
+        + "public class Test {\n"
+        + "  @BindString(1) boolean one;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindString field type must be 'String'. (test.Test.one)")
+        .in(source).onLine(4);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/BindViewTest.java b/butterknife/src/test/java/butterknife/BindViewTest.java
new file mode 100644
index 00000000..525abe5b
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindViewTest.java
@@ -0,0 +1,1021 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import javax.tools.StandardLocation;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class BindViewTest {
+  @Test public void bindingView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewSubclassNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) TextView thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = (TextView) source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingGeneratedView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindView;\n"
+        + "@PerformGeneration\n"
+        + "public class Test {\n"
+        + "    @BindView(1) GeneratedView thing;\n"
+        + "}"
+    );
+
+    // w/o the GeneratingProcessor it can't find `class GeneratedView`
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("cannot find symbol");
+
+    // now the GeneratingProcessor should let it compile
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor(), new TestGeneratingProcessor("GeneratedView",
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "public class GeneratedView extends View {",
+            "  public GeneratedView(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"
+        ))
+        .compilesWithoutError()
+        .withNoteContaining("@BindView field with unresolved type (GeneratedView)").and()
+        .withNoteContaining("must elsewhere be generated as a View or interface").and()
+        .and()
+        .generatesFileNamed(StandardLocation.CLASS_OUTPUT, "test", "Test_ViewBinding.class");
+  }
+
+  @Test public void bindingViewFinalClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewFinalClassWithBaseClass() {
+    JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Base {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+    JavaFileObject testSource = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test extends Base {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Base_ViewBinding implements Unbinder {\n"
+        + "  private Base target;\n"
+        + "  @UiThread\n"
+        + "  public Base_ViewBinding(Base target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Base target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding extends Base_ViewBinding {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(baseSource, testSource))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingBaseSource, bindingTestSource);
+  }
+
+  @Test public void bindingViewInnerClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Outer {\n"
+        + "  public static class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
+        + "  private Outer.Test target;\n"
+        + "  @UiThread\n"
+        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Outer.Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingViewUppercasePackageName() {
+    JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
+        + "package com.Example;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package com.Example;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    interface TestInterface {}\n"
+        + "    @BindView(1) TestInterface thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void genericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.EditText;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "class Test<T extends TextView> {\n"
+        + "    @BindView(1) T thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing1;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
+        + "    target.thing1 = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing1 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void oneFindPerIdWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.Button;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) Button thing1;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
+        + "    target.thing1 = Utils.castView(view, 1, \"field 'thing1'\", Button.class);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing1 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) public View thing1;\n"
+        + "  @BindView(2) View thing2;\n"
+        + "  @BindView(3) protected View thing3;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @interface Nullable {}\n"
+        + "  @Nullable @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = source.findViewById(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class TestOne extends Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "public class TestTwo extends Test {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
+        + "  @UiThread\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test<T> {\n"
+        + "  @BindView(1) View view;\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class TestOne extends Test<String> {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "public class TestTwo extends Test<Object> {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
+        + "  @UiThread\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.thing = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  private static class Inner {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields may not be contained in private classes. (test.Test.Inner.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) String thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public interface Test {\n"
+        + "    @BindView(1) View thing = null;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindView fields may only be contained in classes. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfPrivate() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) private View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) static View thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindView fields must not be private or static. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void duplicateBindingFails() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "    @BindView(1) View thing1;\n"
+        + "    @BindView(1) View thing2;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Attempt to use @BindView for an already bound ID 1 on 'thing1'. (test.Test.thing2)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsOptionalRootViewBinding() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test extends View {\n"
+        + "  @Optional @OnClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource())
+        .that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "ID-free binding must not be annotated with @Optional. (test.Test.doStuff)")
+        .in(source)
+        .onLine(7);
+  }
+
+}
diff --git a/butterknife/src/test/java/butterknife/BindViewsTest.java b/butterknife/src/test/java/butterknife/BindViewsTest.java
new file mode 100644
index 00000000..f84b145e
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/BindViewsTest.java
@@ -0,0 +1,620 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import javax.tools.StandardLocation;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+
+public class BindViewsTest {
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) public List<View> thing1;\n"
+        + "  @BindViews(2) List<View> thing2;\n"
+        + "  @BindViews(3) protected List<View> thing3;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void bindingArray() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test<T extends View> {\n"
+        + "    @BindViews({1, 2, 3}) T[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithCast() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) TextView[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) View[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        source.findViewById(1), \n"
+        + "        source.findViewById(2), \n"
+        + "        source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingArrayWithCastNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) TextView[] thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.arrayOf(\n"
+        + "        (TextView) source.findViewById(1), \n"
+        + "        (TextView) source.findViewById(2), \n"
+        + "        (TextView) source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2, 3}) List<View> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+
+  @Test public void bindingGeneratedView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "@PerformGeneration\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 2}) List<GeneratedView> things;\n"
+        + "}"
+    );
+
+    // w/o the GeneratingProcessor it can't find `class GeneratedView`
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("cannot find symbol");
+
+    // now the GeneratingProcessor should let it compile
+    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION))
+        .processedWith(new ButterKnifeProcessor(), new TestGeneratingProcessor("GeneratedView",
+            "package test;",
+            "import android.content.Context;",
+            "import android.view.View;",
+            "public class GeneratedView extends View {",
+            "  public GeneratedView(Context context) {",
+            "    super(context);",
+            "  }",
+            "}"
+        ))
+        .compilesWithoutError()
+        .withNoteContaining("@BindViews List or array with unresolved type (GeneratedView)").and()
+        .withNoteContaining("must elsewhere be generated as a View or interface").and()
+        .and()
+        .generatesFileNamed(StandardLocation.CLASS_OUTPUT, "test", "Test_ViewBinding.class");
+  }
+
+  @Test public void bindingListOfInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "    interface TestInterface {}\n"
+        + "    @BindViews({1, 2, 3}) List<TestInterface> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void bindingListWithGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test<T extends View> {\n"
+        + "    @BindViews({1, 2, 3}) List<T> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nullableList() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "    @interface Nullable {}\n"
+        + "    @Nullable @BindViews({1, 2, 3}) List<View> thing;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.thing = Utils.listOf(\n"
+        + "        source.findViewById(1), \n"
+        + "        source.findViewById(2), \n"
+        + "        source.findViewById(3));\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.thing = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources( bindingSource);
+  }
+
+  @Test public void failsIfNoIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews({}) List<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must specify at least one ID. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfNoGenericType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) List thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews List must have a generic component. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfUnsupportedCollection() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.Deque;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) Deque<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews must be a List or array. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfGenericNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) List<String> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfArrayNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindViews;\n"
+        + "public class Test {\n"
+        + "  @BindViews(1) String[] thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@BindViews List or array type must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfContainsDuplicateIds() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindViews;\n"
+        + "import java.util.List;\n"
+        + "public class Test {\n"
+        + "    @BindViews({1, 1}) List<View> thing;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindViews annotation contains duplicate ID 1. (test.Test.thing)")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ExtendActivityTest.java b/butterknife/src/test/java/butterknife/ExtendActivityTest.java
new file mode 100644
index 00000000..0499d3c2
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendActivityTest.java
@@ -0,0 +1,120 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendActivityTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import android.content.Context;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends Activity {"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Activity;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends Activity {"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ExtendDialogTest.java b/butterknife/src/test/java/butterknife/ExtendDialogTest.java
new file mode 100644
index 00000000..dc9a76b0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendDialogTest.java
@@ -0,0 +1,126 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendDialogTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Dialog;"
+        + "import android.content.Context;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends Dialog {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getContext());\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.app.Dialog;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends Dialog {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/ExtendViewTest.java b/butterknife/src/test/java/butterknife/ExtendViewTest.java
new file mode 100644
index 00000000..1e08dc32
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/ExtendViewTest.java
@@ -0,0 +1,125 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class ExtendViewTest {
+  @Test public void onlyResources() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindBool;"
+        + "public class Test extends View {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindBool(1) boolean one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getContext());\n"
+        + "  }\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getBoolean(1);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void views() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import android.content.Context;"
+        + "import android.view.View;"
+        + "import butterknife.BindView;"
+        + "public class Test extends View {"
+        + "  Test(Context context) {"
+        + "    super(context);"
+        + "  }"
+        + "  @BindView(1) View one;"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, 1, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.one = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
new file mode 100644
index 00000000..b0b5fbd3
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnCheckedChangedTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnCheckedChangedTest {
+  @Test public void checkedChanged() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnCheckedChanged;\n"
+        + "public class Test {\n"
+        + "  @OnCheckedChanged(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.CompoundButton;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((CompoundButton) view).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onCheckedChanged(CompoundButton p0, boolean p1) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((CompoundButton) view1).setOnCheckedChangeListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnClickTest.java b/butterknife/src/test/java/butterknife/OnClickTest.java
new file mode 100644
index 00000000..9d06efce
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnClickTest.java
@@ -0,0 +1,848 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnClickTest {
+  @Test public void onClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickBindingFinalType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public final class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickMultipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff1() {}\n"
+        + "  @OnClick(1) void doStuff2() {}\n"
+        + "  @OnClick({1, 2}) void doStuff3(View v) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff1();\n"
+        + "        target.doStuff2();\n"
+        + "        target.doStuff3(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff3'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff3(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void findOnlyCalledOnce() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) public void thing1() {}\n"
+        + "  @OnClick(2) void thing2() {}\n"
+        + "  @OnClick(3) protected void thing3() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings();
+  }
+
+  @Test public void methodCastsArgument() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 0, \"method 'click0'\");\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'click1'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'click2'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2(Utils.castParam(p0, \"doClick\", 0, \"click2\", 0, TextView.class));\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'click3'\");\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3(Utils.castParam(p0, \"doClick\", 0, \"click3\", 0, Button.class));\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 4, \"method 'click4'\");\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4(Utils.castParam(p0, \"doClick\", 0, \"click4\", 0, Test.TestInterface.class));\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodCastsArgumentNonDebuggable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  interface TestInterface {}\n"
+        + "  @OnClick(0) void click0() {}\n"
+        + "  @OnClick(1) void click1(View view) {}\n"
+        + "  @OnClick(2) void click2(TextView view) {}\n"
+        + "  @OnClick(3) void click3(Button button) {}\n"
+        + "  @OnClick(4) void click4(TestInterface thing) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.Button;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view0;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  private View view4;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(0);\n"
+        + "    view0 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click0();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(1);\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click1(p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(2);\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click2((TextView) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(3);\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click3((Button) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = source.findViewById(4);\n"
+        + "    view4 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click4((Test.TestInterface) p0);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view0.setOnClickListener(null);\n"
+        + "    view0 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "    view4.setOnClickListener(null);\n"
+        + "    view4 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing", "-Abutterknife.debuggable=false")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void methodWithMultipleIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick({1, 2, 3}) void click() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'click'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'click'\");\n"
+        + "    view2 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'click'\");\n"
+        + "    view3 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.click();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    view2.setOnClickListener(null);\n"
+        + "    view2 = null;\n"
+        + "    view3.setOnClickListener(null);\n"
+        + "    view3 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nullable() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test {\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}");
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = source.findViewById(1);\n"
+        + "    if (view != null) {\n"
+        + "      view1 = view;\n"
+        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "        @Override\n"
+        + "        public void doClick(View p0) {\n"
+        + "          target.doStuff();\n"
+        + "        }\n"
+        + "      });\n"
+        + "    }\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    if (view1 != null) {\n"
+        + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "    }\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void optionalAndRequiredSkipsNullCheck() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @Optional @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsInJavaPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Java framework package. (java.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsInAndroidPackage() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick-annotated class incorrectly in Android framework package. (android.test.Test)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsIfHasReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public String doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must have a 'void' return type. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfPrivateMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  private void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfStatic() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public static void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnClick methods must not be private or static. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfParameterNotView() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(String thing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: java.lang.String\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 1 parameter(s):\n"
+            + "  \n"
+            + "    android.view.View\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfMoreThanOneParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1)\n"
+        + "  public void doStuff(View thing, View otherThing) {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods can have at most 1 parameter(s). (test.Test.doStuff)")
+        .in(source).onLine(6);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public interface Test {\n"
+        + "  @OnClick(1)\n"
+        + "  void doStuff();\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick methods may only be contained in classes. (test.Test.doStuff)")
+        .in(source).onLine(3);
+  }
+
+  @Test public void failsIfHasDuplicateIds() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick({1, 2, 3, 1})\n"
+        + "  void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnClick annotation for method contains duplicate ID 1. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnEditorActionTest.java b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
new file mode 100644
index 00000000..f57edfcd
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnEditorActionTest.java
@@ -0,0 +1,66 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnEditorActionTest {
+  @Test public void editorAction() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnEditorAction;\n"
+        + "public class Test {\n"
+        + "  @OnEditorAction(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.KeyEvent;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((TextView) view).setOnEditorActionListener(new TextView.OnEditorActionListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onEditorAction(TextView p0, int p1, KeyEvent p2) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).setOnEditorActionListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnFocusChangeTest.java b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
new file mode 100644
index 00000000..d8216f1c
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnFocusChangeTest.java
@@ -0,0 +1,64 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnFocusChangeTest {
+  @Test public void focusChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnFocusChange;\n"
+        + "public class Test {\n"
+        + "  @OnFocusChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnFocusChangeListener(new View.OnFocusChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onFocusChange(View p0, boolean p1) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnFocusChangeListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemClickTest.java b/butterknife/src/test/java/butterknife/OnItemClickTest.java
new file mode 100644
index 00000000..03f334c4
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemClickTest.java
@@ -0,0 +1,418 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with parameters. */
+public class OnItemClickTest {
+  @Test public void onItemClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import butterknife.OnItemClick;"
+        + "public class Test {"
+        + "  @OnItemClick(1) void doStuff() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    AdapterView<?> parent,\n"
+        + "    View view,\n"
+        + "    int position,\n"
+        + "    long id\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(p0, p1, p2, p3);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubset() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    ListView parent,\n"
+        + "    int position\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class), p2);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onItemClickBindingWithParameterSubsetAndGenerics() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test<T extends ListView> {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    T parent,\n"
+        + "    int position\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff(Utils.castParam(p0, \"onItemClick\", 0, \"doStuff\", 0, ListView.class)\n"
+        + "        , p2);\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        // found raw type: test.Test
+        //   missing type arguments for generic class test.Test<T>
+        .compilesWithoutError()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickRootViewBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.widget.ListView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends ListView {\n"
+        + "  @OnItemClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View viewSource;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target);\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    viewSource = source;\n"
+        + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
+        + "    viewSource = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void onClickRootViewAnyTypeBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View viewSource;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    viewSource = source;\n"
+        + "    ((AdapterView<?>) source).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) viewSource).setOnItemClickListener(null);\n"
+        + "    viewSource = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsWithInvalidId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick({1, -1}) void doStuff() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@OnItemClick annotation contains invalid ID -1. (test.Test.doStuff)")
+        .in(source).onLine(4);
+  }
+
+  @Test public void failsWithInvalidParameterConfiguration() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemClick(1) void doStuff(\n"
+        + "    AdapterView<?> parent,\n"
+        + "    View view,\n"
+        + "    View whatIsThis\n"
+        + "  ) {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(""
+            + "Unable to match @OnItemClick method arguments. (test.Test.doStuff)\n"
+            + "  \n"
+            + "    Parameter #1: android.widget.AdapterView<?>\n"
+            + "      matched listener parameter #1: android.widget.AdapterView<?>\n"
+            + "  \n"
+            + "    Parameter #2: android.view.View\n"
+            + "      matched listener parameter #2: android.view.View\n"
+            + "  \n"
+            + "    Parameter #3: android.view.View\n"
+            + "      did not match any listener parameters\n"
+            + "  \n"
+            + "  Methods may have up to 4 parameter(s):\n"
+            + "  \n"
+            + "    android.widget.AdapterView<?>\n"
+            + "    android.view.View\n"
+            + "    int\n"
+            + "    long\n"
+            + "  \n"
+            + "  These may be listed in any order but will be searched for from top to bottom.")
+        .in(source).onLine(6);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemLongClickTest.java b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
new file mode 100644
index 00000000..4f809dfc
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemLongClickTest.java
@@ -0,0 +1,65 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnItemLongClickTest {
+  @Test public void itemLongClick() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnItemLongClick(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onItemLongClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnItemSelectedTest.java b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
new file mode 100644
index 00000000..05c5f249
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnItemSelectedTest.java
@@ -0,0 +1,280 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with multiple methods. */
+public class OnItemSelectedTest {
+  @Test public void defaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnItemSelected;\n"
+        + "public class Test {\n"
+        + "  @OnItemSelected(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void nonDefaultMethod() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test {"
+        + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
+        + "  void doStuff() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void allMethods() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test {"
+        + "  @OnItemSelected(1)"
+        + "  void onItemSelected() {}"
+        + "  @OnItemSelected(value = 1, callback = NOTHING_SELECTED)"
+        + "  void onNothingSelected() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void multipleBindingPermutation() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;"
+        + "import butterknife.OnItemSelected;"
+        + "import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;"
+        + "public class Test {"
+        + "  @OnItemSelected({ 1, 2 })"
+        + "  void onItemSelected() {}"
+        + "  @OnItemSelected(value = { 1, 3 }, callback = NOTHING_SELECTED)"
+        + "  void onNothingSelected() {}"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.AdapterView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private View view2;\n"
+        + "  private View view3;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'onItemSelected' and method 'onNothingSelected'\");\n"
+        + "    view1 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 2, \"method 'onItemSelected'\");\n"
+        + "    view2 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "        target.onItemSelected();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view = Utils.findRequiredView(source, 3, \"method 'onNothingSelected'\");\n"
+        + "    view3 = view;\n"
+        + "    ((AdapterView<?>) view).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n"
+        + "      @Override\n"
+        + "      public void onItemSelected(AdapterView<?> p0, View p1, int p2, long p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onNothingSelected(AdapterView<?> p0) {\n"
+        + "        target.onNothingSelected();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((AdapterView<?>) view1).setOnItemSelectedListener(null);\n"
+        + "    view1 = null;\n"
+        + "    ((AdapterView<?>) view2).setOnItemSelectedListener(null);\n"
+        + "    view2 = null;\n"
+        + "    ((AdapterView<?>) view3).setOnItemSelectedListener(null);\n"
+        + "    view3 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnLongClickTest.java b/butterknife/src/test/java/butterknife/OnLongClickTest.java
new file mode 100644
index 00000000..0926b2f3
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnLongClickTest.java
@@ -0,0 +1,86 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+/** This augments {@link OnClickTest} with tests that exercise callbacks with return types. */
+public class OnLongClickTest {
+  @Test public void onLongClickBinding() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnLongClick(1) boolean doStuff() {\n"
+        + "    return true;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onLongClick(View p0) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsIfMissingReturnType() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test {\n"
+        + "  @OnLongClick(1)\n"
+        + "  public void doStuff() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@OnLongClick methods must have a 'boolean' return type. (test.Test.doStuff)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnPageChangeTest.java b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
new file mode 100644
index 00000000..a7c7590e
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnPageChangeTest.java
@@ -0,0 +1,74 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnPageChangeTest {
+  @Test public void pageChange() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnPageChange;\n"
+        + "public class Test {\n"
+        + "  @OnPageChange(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.view.ViewPager;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private ViewPager.OnPageChangeListener view1OnPageChangeListener;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1OnPageChangeListener = new ViewPager.OnPageChangeListener() {\n"
+        + "      @Override\n"
+        + "      public void onPageSelected(int p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrolled(int p0, float p1, int p2) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void onPageScrollStateChanged(int p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((ViewPager) view).addOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((ViewPager) view1).removeOnPageChangeListener(view1OnPageChangeListener);\n"
+        + "    view1OnPageChangeListener = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/OnTextChangedTest.java b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
new file mode 100644
index 00000000..e1b75a68
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnTextChangedTest.java
@@ -0,0 +1,225 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnTextChangedTest {
+  @Test public void textChanged() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTextChanged;\n"
+        + "public class Test {\n"
+        + "  @OnTextChanged(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.text.Editable;\n"
+        + "import android.text.TextWatcher;\n"
+        + "import android.view.View;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.CharSequence;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  private TextWatcher view1TextWatcher;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view1TextWatcher = new TextWatcher() {\n"
+        + "      @Override\n"
+        + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+        + "      }\n"
+        + "      @Override\n"
+        + "      public void afterTextChanged(Editable p0) {\n"
+        + "      }\n"
+        + "    };\n"
+        + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+        + "    view1TextWatcher = null;\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void textChangedWithParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test {\n"
+            + "  @OnTextChanged(1) void doStuff(CharSequence p0) {}\n"
+            + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+            + "package test;\n"
+            + "import android.support.annotation.CallSuper;\n"
+            + "import android.support.annotation.UiThread;\n"
+            + "import android.text.Editable;\n"
+            + "import android.text.TextWatcher;\n"
+            + "import android.view.View;\n"
+            + "import android.widget.TextView;\n"
+            + "import butterknife.Unbinder;\n"
+            + "import butterknife.internal.Utils;\n"
+            + "import java.lang.CharSequence;\n"
+            + "import java.lang.IllegalStateException;\n"
+            + "import java.lang.Override;\n"
+            + "public class Test_ViewBinding implements Unbinder {\n"
+            + "  private Test target;\n"
+            + "  private View view1;\n"
+            + "  private TextWatcher view1TextWatcher;\n"
+            + "  @UiThread\n"
+            + "  public Test_ViewBinding(final Test target, View source) {\n"
+            + "    this.target = target;\n"
+            + "    View view;\n"
+            + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+            + "    view1 = view;\n"
+            + "    view1TextWatcher = new TextWatcher() {\n"
+            + "      @Override\n"
+            + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "        target.doStuff(p0);\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void afterTextChanged(Editable p0) {\n"
+            + "      }\n"
+            + "    };\n"
+            + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+            + "  }\n"
+            + "  @Override\n"
+            + "  @CallSuper\n"
+            + "  public void unbind() {\n"
+            + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+            + "    target = null;\n"
+            + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+            + "    view1TextWatcher = null;\n"
+            + "    view1 = null;\n"
+            + "  }\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .compilesWithoutWarnings()
+            .and()
+            .generatesSources(bindingSource);
+  }
+
+  @Test public void textChangedWithParameters() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test {\n"
+            + "  @OnTextChanged(1) void doStuff(CharSequence p0, int p1, int p2, int p3) {}\n"
+            + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+            + "package test;\n"
+            + "import android.support.annotation.CallSuper;\n"
+            + "import android.support.annotation.UiThread;\n"
+            + "import android.text.Editable;\n"
+            + "import android.text.TextWatcher;\n"
+            + "import android.view.View;\n"
+            + "import android.widget.TextView;\n"
+            + "import butterknife.Unbinder;\n"
+            + "import butterknife.internal.Utils;\n"
+            + "import java.lang.CharSequence;\n"
+            + "import java.lang.IllegalStateException;\n"
+            + "import java.lang.Override;\n"
+            + "public class Test_ViewBinding implements Unbinder {\n"
+            + "  private Test target;\n"
+            + "  private View view1;\n"
+            + "  private TextWatcher view1TextWatcher;\n"
+            + "  @UiThread\n"
+            + "  public Test_ViewBinding(final Test target, View source) {\n"
+            + "    this.target = target;\n"
+            + "    View view;\n"
+            + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+            + "    view1 = view;\n"
+            + "    view1TextWatcher = new TextWatcher() {\n"
+            + "      @Override\n"
+            + "      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "        target.doStuff(p0, p1, p2, p3);\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {\n"
+            + "      }\n"
+            + "      @Override\n"
+            + "      public void afterTextChanged(Editable p0) {\n"
+            + "      }\n"
+            + "    };\n"
+            + "    ((TextView) view).addTextChangedListener(view1TextWatcher);\n"
+            + "  }\n"
+            + "  @Override\n"
+            + "  @CallSuper\n"
+            + "  public void unbind() {\n"
+            + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+            + "    target = null;\n"
+            + "    ((TextView) view1).removeTextChangedListener(view1TextWatcher);\n"
+            + "    view1TextWatcher = null;\n"
+            + "    view1 = null;\n"
+            + "  }\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .compilesWithoutWarnings()
+            .and()
+            .generatesSources(bindingSource);
+  }
+
+  @Test public void textChangedWithWrongParameter() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+            + "package test;\n"
+            + "import butterknife.OnTextChanged;\n"
+            + "public class Test {\n"
+            + "  @OnTextChanged(1) void doStuff(String p0, int p1, int p2, int p3) {}\n"
+            + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+            .withCompilerOptions("-Xlint:-processing")
+            .processedWith(new ButterKnifeProcessor())
+            .failsToCompile();
+  }
+
+}
diff --git a/butterknife/src/test/java/butterknife/OnTouchTest.java b/butterknife/src/test/java/butterknife/OnTouchTest.java
new file mode 100644
index 00000000..fe9b9eb7
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/OnTouchTest.java
@@ -0,0 +1,85 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+public class OnTouchTest {
+  @Test public void touch() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) boolean doStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.annotation.SuppressLint;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  @SuppressLint(\"ClickableViewAccessibility\")\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        return target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) boolean doStuff1() {}\n"
+        + "  @OnTouch(1) boolean doStuff2() {}\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)")
+        .in(source).onLine(5);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/RClassTest.java b/butterknife/src/test/java/butterknife/RClassTest.java
new file mode 100644
index 00000000..d03bede0
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/RClassTest.java
@@ -0,0 +1,425 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class RClassTest {
+
+  private static final JavaFileObject NON_FINAL_R = JavaFileObjects.forSourceString("test.R", ""
+      + "package test;\n"
+      + "public final class R {\n"
+      + "  public static final class array {\n"
+      + "    public static int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class styleable {\n"
+      + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+      + "  }\n"
+      + "}"
+  );
+
+  private static final JavaFileObject FINAL_R = JavaFileObjects.forSourceString("test.R", ""
+      + "package test;\n"
+      + "public final class R {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "  public static final class styleable {\n"
+      + "    public static final int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+      + "  }\n"
+      + "}"
+  );
+
+  private static final JavaFileObject R2 = JavaFileObjects.forSourceString("test.R2", ""
+      + "package test;\n"
+      + "public final class R2 {\n"
+      + "  public static final class array {\n"
+      + "    public static final int res = 0x7f040001;\n"
+      + "  }\n"
+      + "  public static final class bool {\n"
+      + "    public static final int res = 0x7f040002;\n"
+      + "  }\n"
+      + "  public static final class color {\n"
+      + "    public static final int res = 0x7f040003;\n"
+      + "  }\n"
+      + "  public static final class integer {\n"
+      + "    public static final int res = 0x7f040004;\n"
+      + "  }\n"
+      + "  public static final class string {\n"
+      + "    public static final int res = 0x7f040005;\n"
+      + "  }\n"
+      + "}"
+  );
+
+  @Test public void library() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindInt;\n"
+        + "public class Test {\n"
+        + "  @BindInt(R2.integer.res) int one;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.one = res.getInteger(R.integer.res);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, NON_FINAL_R, R2))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void issue779() {
+    JavaFileObject r2Bar = JavaFileObjects.forSourceString("test.bar.R2", ""
+        + "package test.bar;\n"
+        + "public final class R2 {\n"
+        + "  public static final class array {\n"
+        + "    public static final int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static final int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static final int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static final int res = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class string {\n"
+        + "    public static final int res = 0x7f040005;\n"
+        + "  }\n"
+        + "}");
+
+    JavaFileObject nonFinalRBar = JavaFileObjects.forSourceString("test.bar.R", ""
+        + "package test.bar;\n"
+        + "public final class R {\n"
+        + "  public static final class array {\n"
+        + "    public static int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static int res = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class styleable {\n"
+        + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject nonFinalRFoo = JavaFileObjects.forSourceString("test.foo.R", ""
+        + "package test.foo;\n"
+        + "public final class R {\n"
+        + "  public static final class array {\n"
+        + "    public static int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static int bogus = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class styleable {\n"
+        + "    public static int[] ActionBar = { 0x7f010001, 0x7f010003 };\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject r2Foo = JavaFileObjects.forSourceString("test.foo.R2", ""
+        + "package test.foo;\n"
+        + "public final class R2 {\n"
+        + "  public static final class array {\n"
+        + "    public static final int res = 0x7f040001;\n"
+        + "  }\n"
+        + "  public static final class bool {\n"
+        + "    public static final int res = 0x7f040002;\n"
+        + "  }\n"
+        + "  public static final class color {\n"
+        + "    public static final int res = 0x7f040003;\n"
+        + "  }\n"
+        + "  public static final class id {\n"
+        + "    public static final int bogus = 0x7f040004;\n"
+        + "  }\n"
+        + "  public static final class string {\n"
+        + "    public static final int res = 0x7f040005;\n"
+        + "  }\n"
+        + "}");
+
+    JavaFileObject fooSource = JavaFileObjects.forSourceString("test.foo.FooTest", ""
+        + "package test.foo;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class FooTest extends Activity {\n"
+        + "  @BindView(R2.id.bogus) View one;\n"
+        + "}"
+    );
+
+    JavaFileObject barSource = JavaFileObjects.forSourceString("test.bar.Test", ""
+        + "package test.bar;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(R2.id.res) CustomView one;\n"
+        + "}"
+    );
+
+    JavaFileObject customView = JavaFileObjects.forSourceString("test.bar.CustomView", ""
+        + "package test.bar;\n"
+        + "import android.view.View;\n"
+        + "import android.content.Context;\n"
+        + "public class CustomView extends View {\n"
+        + "  public CustomView(Context context) {\n"
+        + "    super(context);"
+        + "  }"
+        + "}"
+    );
+
+    JavaFileObject bindingSourceBar = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test.bar;\n\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredViewAsType(source, R.id.res, \"field 'one'\", " +
+        "CustomView.class);\n"
+        + "  }\n\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        +
+        "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n\n"
+        + "    target.one = null;\n\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSourceFoo = JavaFileObjects.forSourceString("test/FooTest_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test.foo;\n\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class FooTest_ViewBinding implements Unbinder {\n"
+        + "  private FooTest target;\n\n"
+        + "  @UiThread\n"
+        + "  public FooTest_ViewBinding(FooTest target) {\n"
+        + "    this(target, target.getWindow().getDecorView());\n"
+        + "  }\n\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(FooTest target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    target.one = Utils.findRequiredView(source, R.id.bogus, \"field 'one'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    FooTest target = this.target;\n"
+        +
+        "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n\n"
+        + "    this.target = null;\n\n"
+        + "    target.one = null;\n\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(customView, fooSource, barSource, nonFinalRBar, nonFinalRFoo, r2Bar, r2Foo))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSourceBar);
+
+    assertAbout(javaSources())
+        .that(asList(customView, fooSource, barSource, nonFinalRBar, nonFinalRFoo, r2Bar, r2Foo))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSourceFoo);
+  }
+
+  @Test public void app() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindBool;\n"
+        + "public class Test {\n"
+        + "  @BindBool(R.bool.res) boolean bool;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    Resources res = context.getResources();\n"
+        + "    target.bool = res.getBoolean(R.bool.res);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, FINAL_R))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void compiledRClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.BindColor;\n"
+        + "public class Test {\n"
+        + "  @BindColor(android.R.color.black) int black;\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(Test target, Context context) {\n"
+        + "    target.black = ContextCompat.getColor(context, android.R.color.black);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source, NON_FINAL_R))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java b/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
new file mode 100644
index 00000000..372f15dd
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/TestGeneratingProcessor.java
@@ -0,0 +1,67 @@
+package butterknife;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableSet;
+import com.google.testing.compile.JavaFileObjects;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.element.TypeElement;
+import javax.tools.JavaFileObject;
+
+/**
+ * A test {@link javax.annotation.processing.Processor} that produces one file.
+ *
+ * To use it, include {@link #ANNOTATION} in your source set and
+ * mark something with @PerformGeneration so the processor has something to latch onto
+ */
+public class TestGeneratingProcessor extends AbstractProcessor {
+
+  public static final JavaFileObject ANNOTATION = JavaFileObjects.forSourceString("test.PerformGeneration", ""
+          + "package test;\n"
+          + "import java.lang.annotation.*;\n"
+          + "@Target(ElementType.TYPE)\n"
+          + "public @interface PerformGeneration {\n"
+          + "}");
+
+  private final String generatedClassName;
+  private final String generatedSource;
+  private boolean processed;
+
+  TestGeneratingProcessor(String generatedClassName, String... source) {
+    this.generatedClassName = generatedClassName;
+    this.generatedSource = Joiner.on("\n").join(source);
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    return ImmutableSet.of("test.PerformGeneration");
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    if (!processed) {
+      processed = true;
+      Writer writer = null;
+      try {
+        writer = processingEnv.getFiler().createSourceFile(generatedClassName).openWriter();
+        writer.append(generatedSource);
+      } catch (IOException e) {
+        throw new RuntimeException(e);
+      } finally {
+        if (writer != null) {
+          try {
+            writer.close();
+          } catch (IOException e) {
+            throw new RuntimeException(e);
+          }
+        }
+      }
+    }
+    return false;
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/UnbinderTest.java b/butterknife/src/test/java/butterknife/UnbinderTest.java
new file mode 100644
index 00000000..ef0388fc
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/UnbinderTest.java
@@ -0,0 +1,545 @@
+package butterknife;
+
+import butterknife.compiler.ButterKnifeProcessor;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static java.util.Arrays.asList;
+
+public class UnbinderTest {
+  @Test public void multipleBindings() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.OnLongClick;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View view;\n"
+        + "  @BindView(2) View view2;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "  @OnLongClick(1) boolean doMoreStuff() { return false; }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
+        + "    target.view = view;\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    view.setOnLongClickListener(new View.OnLongClickListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onLongClick(View p0) {\n"
+        + "        return target.doMoreStuff();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    target.view2 = Utils.findRequiredView(source, 2, \"field 'view2'\");\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    Test target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.view = null;\n"
+        + "    target.view2 = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1.setOnLongClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void unbindingThroughAbstractChild() {
+    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test {\n"
+        + "  @OnClick(1) void doStuff1() { }\n"
+        + "}"
+    );
+
+    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
+        + "package test;\n"
+        + "public abstract class TestOne extends Test {\n"
+        + "}"
+    );
+
+    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
+        + "package test;\n"
+        + "import butterknife.OnClick;\n"
+        + "class TestTwo extends TestOne {\n"
+        + "  @OnClick(1) void doStuff2() { }\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff1();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinding", ""
+        + "package test;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestTwo_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestTwo target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  public TestTwo_ViewBinding(final TestTwo target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff2();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources()).that(asList(source1, source2, source3))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(binding1Source, binding2Source);
+  }
+
+  @Test public void fullIntegration() {
+    JavaFileObject sourceA = JavaFileObjects.forSourceString("test.A", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class A {\n"
+        + "  @BindColor(android.R.color.black) @ColorInt int blackColor;\n"
+        + "  public A(View view) {\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceB = JavaFileObjects.forSourceString("test.B", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class B extends A {\n"
+        + "  @BindColor(android.R.color.white) @ColorInt int whiteColor;\n"
+        + "  public B(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceC = JavaFileObjects.forSourceString("test.C", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class C extends B {\n"
+        + "  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;\n"
+        + "  @BindView(android.R.id.button1) View button1;\n"
+        + "  public C(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceD = JavaFileObjects.forSourceString("test.D", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class D extends C {\n"
+        + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
+        + "  public D(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceE = JavaFileObjects.forSourceString("test.E", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class E extends C {\n"
+        + "  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;\n"
+        + "  public E(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceF = JavaFileObjects.forSourceString("test.F", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class F extends D {\n"
+        + "  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;\n"
+        + "  public F(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceG = JavaFileObjects.forSourceString("test.G", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class G extends E {\n"
+        + "  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;\n"
+        + "  @BindView(android.R.id.button2) View button2;\n"
+        + "  public G(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "  @OnClick(android.R.id.content) public void onClick() {\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject sourceH = JavaFileObjects.forSourceString("test.H", ""
+        + "package test;\n"
+        + "import android.support.annotation.ColorInt;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.BindColor;\n"
+        + "import butterknife.ButterKnife;\n"
+        + "public class H extends G {\n"
+        + "  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;\n"
+        + "  @BindView(android.R.id.button3) View button3;\n"
+        + "  public H(View view) {\n"
+        + "    super(view);\n"
+        + "    ButterKnife.bind(this, view);\n"
+        + "  }\n"
+        + "}\n");
+
+    JavaFileObject bindingASource = JavaFileObjects.forSourceString("test/A_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.CallSuper;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import java.lang.Deprecated;\n"
+        + "import java.lang.Override;\n"
+        + "public class A_ViewBinding implements Unbinder {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(A, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(A target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public A_ViewBinding(A target, Context context) {\n"
+        + "    target.blackColor = ContextCompat.getColor(context, android.R.color.black);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBSource = JavaFileObjects.forSourceString("test/B_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import java.lang.Deprecated;\n"
+        + "public class B_ViewBinding extends A_ViewBinding {\n"
+        + "  /**\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(B, Context)} for direct creation.\n"
+        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
+        + "   */\n"
+        + "  @Deprecated\n"
+        + "  @UiThread\n"
+        + "  public Test_ViewBinding(B target, View source) {\n"
+        + "    this(target, source.getContext());\n"
+        + "  }\n"
+        + "  @UiThread\n"
+        + "  public B_ViewBinding(B target, Context context) {\n"
+        + "    super(target, context);\n"
+        + "    target.whiteColor = ContextCompat.getColor(context, android.R.color.white);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingCSource = JavaFileObjects.forSourceString("test/C_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class C_ViewBinding extends B_ViewBinding {\n"
+        + "  private C target;\n"
+        + "  @UiThread\n"
+        + "  public C_ViewBinding(C target, View source) {\n"
+        + "    super(target, source.getContext());\n"
+        + "    this.target = target;\n"
+        + "    target.button1 = Utils.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.transparentColor = ContextCompat.getColor(context, android.R.color.transparent);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    C target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.button1 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class D_ViewBinding extends C_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public D_ViewBinding(D target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class E_ViewBinding extends C_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public E_ViewBinding(E target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.backgroundDarkColor = ContextCompat.getColor(context, android.R.color.background_dark);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "public class F_ViewBinding extends D_ViewBinding {\n"
+        + "  @UiThread\n"
+        + "  public F_ViewBinding(F target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.backgroundLightColor = ContextCompat.getColor(context, android.R.color.background_light);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class G_ViewBinding extends E_ViewBinding {\n"
+        + "  private G target;\n"
+        + "  private View view16908290;\n"
+        + "  @UiThread\n"
+        + "  public G_ViewBinding(final G target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    target.button2 = Utils.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n"
+        + "    view = Utils.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n"
+        + "    view16908290 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.onClick();\n"
+        + "      }\n"
+        + "    });\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    G target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
+        + "    target.button2 = null;\n"
+        + "    view16908290.setOnClickListener(null);\n"
+        + "    view16908290 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.support.annotation.UiThread;\n"
+        + "import android.support.v4.content.ContextCompat;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class H_ViewBinding extends G_ViewBinding {\n"
+        + "  private H target;\n"
+        + "  @UiThread\n"
+        + "  public H_ViewBinding(H target, View source) {\n"
+        + "    super(target, source);\n"
+        + "    this.target = target;\n"
+        + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
+        + "    Context context = source.getContext();\n"
+        + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    H target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "    target.button3 = null;\n"
+        + "    super.unbind();\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSources())
+        .that(asList(
+            sourceA,
+            sourceB,
+            sourceC,
+            sourceD,
+            sourceE,
+            sourceF,
+            sourceG,
+            sourceH))
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(
+            bindingASource,
+            bindingBSource,
+            bindingCSource,
+            bindingDSource,
+            bindingESource,
+            bindingFSource,
+            bindingGSource,
+            bindingHSource);
+  }
+}
diff --git a/butterknife/src/test/java/butterknife/internal/FinderTest.java b/butterknife/src/test/java/butterknife/internal/FinderTest.java
deleted file mode 100644
index 7b0ed113..00000000
--- a/butterknife/src/test/java/butterknife/internal/FinderTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package butterknife.internal;
-
-import android.view.View;
-import butterknife.shadow.EditModeShadowView;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
-public final class FinderTest {
-  @Test public void finderThrowsNiceError() {
-    View view = new View(Robolectric.application);
-    try {
-      Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view 'button1' with ID "
-          + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
-    }
-  }
-
-  @Config(shadows = EditModeShadowView.class)
-  @Test public void finderThrowsLessNiceErrorInEditMode() {
-    View view = new View(Robolectric.application);
-    try {
-      Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
-          + "with ID " + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.");
-    }
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/internal/UtilsTest.java b/butterknife/src/test/java/butterknife/internal/UtilsTest.java
deleted file mode 100644
index 3608c8e3..00000000
--- a/butterknife/src/test/java/butterknife/internal/UtilsTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package butterknife.internal;
-
-import org.junit.Test;
-
-import static butterknife.internal.Utils.arrayOf;
-import static butterknife.internal.Utils.listOf;
-import static com.google.common.truth.Truth.assertThat;
-
-public final class UtilsTest {
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
-  }
-}
diff --git a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java b/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
deleted file mode 100644
index e4fd9951..00000000
--- a/butterknife/src/test/java/butterknife/shadow/EditModeShadowView.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package butterknife.shadow;
-
-import android.view.View;
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowView;
-
-/**
- * Behaves just like standard Robolectric views, but always reports that it is in Edit Mode.
- */
-@Implements(View.class)
-public class EditModeShadowView extends ShadowView {
-  @SuppressWarnings("UnusedDeclaration")
-  @Implementation
-  public boolean isInEditMode() {
-    return true;
-  }
-}
diff --git a/checkstyle.xml b/checkstyle.xml
index 6d840642..69942dfe 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
+    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">
 
 <module name="Checker">
   <!--module name="NewlineAtEndOfFile"/-->
@@ -16,7 +16,7 @@
 
   <!-- Space after 'for' and 'if' -->
   <module name="RegexpSingleline">
-    <property name="format" value="^\s*(for|if)[^ ]"/>
+    <property name="format" value="^\s*(for|if)\b[^ ]"/>
     <property name="message" value="Space needed before opening parenthesis."/>
   </module>
 
@@ -70,7 +70,7 @@
       <property name="max" value="100"/>
     </module>
     <!--<module name="MethodLength"/>-->
-    <module name="ParameterNumber"/>
+    <!--<module name="ParameterNumber"/>-->
 
 
     <!-- Checks for whitespace                               -->
@@ -96,7 +96,7 @@
     <!-- Checks for blocks. You know, those {}'s         -->
     <!-- See http://checkstyle.sf.net/config_blocks.html -->
     <module name="AvoidNestedBlocks"/>
-    <module name="EmptyBlock"/>
+    <!--<module name="EmptyBlock"/>-->
     <module name="LeftCurly"/>
     <module name="NeedBraces">
         <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE"/>
@@ -117,7 +117,6 @@
     <module name="InnerAssignment"/>
     <!--<module name="MagicNumber"/>-->
     <module name="MissingSwitchDefault"/>
-    <module name="RedundantThrows"/>
     <module name="SimplifyBooleanExpression"/>
     <module name="SimplifyBooleanReturn"/>
 
diff --git a/gradle.properties b/gradle.properties
index 7167b693..a4db5d39 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
 GROUP=com.jakewharton
-VERSION_NAME=8.0.0-SNAPSHOT
+VERSION_NAME=9.0.0-SNAPSHOT
 
 POM_DESCRIPTION=Field and method binding for Android views.
 
@@ -14,3 +14,5 @@ POM_LICENCE_DIST=repo
 
 POM_DEVELOPER_ID=jakewharton
 POM_DEVELOPER_NAME=Jake Wharton
+
+org.gradle.jvmargs=-Xmx1536M
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 8c0fb64a..7a3265ee 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ce09d606..bf1b63c3 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
index 91a7e269..cccdd3d5 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,20 +6,38 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..e95643d6
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/sample/app/build.gradle b/sample/app/build.gradle
new file mode 100644
index 00000000..1125c960
--- /dev/null
+++ b/sample/app/build.gradle
@@ -0,0 +1,50 @@
+apply plugin: 'com.android.application'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  compileOptions {
+    sourceCompatibility = JavaVersion.VERSION_1_7
+    targetCompatibility = JavaVersion.VERSION_1_7
+  }
+
+  defaultConfig {
+    applicationId 'com.example.butterknife'
+    minSdkVersion versions.minSdk
+    targetSdkVersion versions.compileSdk
+    versionCode 1
+    versionName '1.0.0'
+  }
+
+  lintOptions {
+    textReport true
+    textOutput 'stdout'
+  }
+
+  buildTypes {
+    debug {
+      minifyEnabled true
+    }
+  }
+}
+
+dependencies {
+  implementation deps.release.runtime
+  annotationProcessor deps.release.compiler
+
+  implementation project(':sample:library')
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+}
+
+afterEvaluate {
+  tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
+    task.doFirst {
+      logging.level = LogLevel.INFO
+    }
+    task.doLast {
+      logging.level = LogLevel.LIFECYCLE
+    }
+  }
+}
diff --git a/butterknife-sample/src/main/AndroidManifest.xml b/sample/app/src/main/AndroidManifest.xml
similarity index 84%
rename from butterknife-sample/src/main/AndroidManifest.xml
rename to sample/app/src/main/AndroidManifest.xml
index 02b90232..4549e5e3 100644
--- a/butterknife-sample/src/main/AndroidManifest.xml
+++ b/sample/app/src/main/AndroidManifest.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     package="com.example.butterknife">
@@ -8,13 +7,14 @@
       android:allowBackup="false"
       android:label="@string/app_name"
       android:name=".SimpleApp"
-      tools:ignore="MissingApplicationIcon">
+      tools:ignore="GoogleAppIndexingWarning,MissingApplicationIcon">
 
     <activity
         android:label="@string/app_name"
-        android:name=".SimpleActivity">
+        android:name=".library.SimpleActivity">
       <intent-filter>
         <action android:name="android.intent.action.MAIN"/>
+
         <category android:name="android.intent.category.LAUNCHER"/>
         <category android:name="android.intent.category.DEFAULT"/>
       </intent-filter>
diff --git a/sample/app/src/main/java/com/example/butterknife/SimpleApp.java b/sample/app/src/main/java/com/example/butterknife/SimpleApp.java
new file mode 100644
index 00000000..d3fa2787
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/SimpleApp.java
@@ -0,0 +1,11 @@
+package com.example.butterknife;
+
+import android.app.Application;
+import butterknife.ButterKnife;
+
+public class SimpleApp extends Application {
+  @Override public void onCreate() {
+    super.onCreate();
+    ButterKnife.setDebug(BuildConfig.DEBUG);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/A.java b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
new file mode 100644
index 00000000..79feb9e8
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/A.java
@@ -0,0 +1,16 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class A {
+
+  @BindColor(android.R.color.black) @ColorInt int blackColor;
+
+  public A(View view) {
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/B.java b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
new file mode 100644
index 00000000..2b78fe9b
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/B.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class B extends A {
+
+  @BindColor(android.R.color.white) @ColorInt int whiteColor;
+
+  public B(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/C.java b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
new file mode 100644
index 00000000..3772e400
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/C.java
@@ -0,0 +1,19 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class C extends B {
+
+  @BindColor(android.R.color.transparent) @ColorInt int transparentColor;
+  @BindView(android.R.id.button1) View button1;
+
+  public C(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/D.java b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
new file mode 100644
index 00000000..5ab8b2c6
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/D.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class D extends C {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+
+  public D(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/E.java b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
new file mode 100644
index 00000000..bd5e28aa
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/E.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class E extends C {
+
+  @BindColor(android.R.color.background_dark) @ColorInt int backgroundDarkColor;
+
+  public E(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/F.java b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
new file mode 100644
index 00000000..5b1a2faa
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/F.java
@@ -0,0 +1,17 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public final class F extends D {
+
+  @BindColor(android.R.color.background_light) @ColorInt int backgroundLightColor;
+
+  public F(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/G.java b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
new file mode 100644
index 00000000..419ef4b5
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/G.java
@@ -0,0 +1,24 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+
+public class G extends E {
+
+  @BindColor(android.R.color.darker_gray) @ColorInt int grayColor;
+  @BindView(android.R.id.button2) View button2;
+
+  public G(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+
+  @OnClick(android.R.id.content) public void onClick() {
+
+  }
+}
diff --git a/sample/app/src/main/java/com/example/butterknife/unbinder/H.java b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
new file mode 100644
index 00000000..e9cd4136
--- /dev/null
+++ b/sample/app/src/main/java/com/example/butterknife/unbinder/H.java
@@ -0,0 +1,19 @@
+package com.example.butterknife.unbinder;
+
+import android.support.annotation.ColorInt;
+import android.view.View;
+
+import butterknife.BindView;
+import butterknife.BindColor;
+import butterknife.ButterKnife;
+
+public class H extends G {
+
+  @BindColor(android.R.color.primary_text_dark) @ColorInt int grayColor;
+  @BindView(android.R.id.button3) View button3;
+
+  public H(View view) {
+    super(view);
+    ButterKnife.bind(this, view);
+  }
+}
diff --git a/sample/library/build.gradle b/sample/library/build.gradle
new file mode 100644
index 00000000..18001747
--- /dev/null
+++ b/sample/library/build.gradle
@@ -0,0 +1,30 @@
+buildscript {
+  repositories {
+    mavenCentral()
+    jcenter()
+    google()
+  }
+
+  dependencies {
+    classpath "com.jakewharton:butterknife-gradle-plugin:${versions.release}"
+  }
+}
+
+apply plugin: 'com.android.library'
+apply plugin: 'com.jakewharton.butterknife'
+
+android {
+  compileSdkVersion versions.compileSdk
+
+  defaultConfig {
+    minSdkVersion versions.minSdk
+  }
+}
+
+dependencies {
+  implementation deps.release.runtime
+  annotationProcessor deps.release.compiler
+
+  testImplementation deps.junit
+  testImplementation deps.truth
+}
diff --git a/sample/library/src/main/AndroidManifest.xml b/sample/library/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..d788df0f
--- /dev/null
+++ b/sample/library/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package="com.example.butterknife.library"/>
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
similarity index 73%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
rename to sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
index 5c7b3f0c..5f40f5af 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java
@@ -1,5 +1,6 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -9,15 +10,13 @@
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
-
-import butterknife.Unbinder;
-import java.util.List;
-
-import butterknife.Bind;
+import butterknife.BindView;
+import butterknife.BindViews;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 import butterknife.OnItemClick;
 import butterknife.OnLongClick;
+import java.util.List;
 
 import static android.widget.Toast.LENGTH_SHORT;
 
@@ -32,33 +31,31 @@
     }
   };
 
-  @Bind(R.id.title) TextView title;
-  @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.hello) Button hello;
-  @Bind(R.id.list_of_things) ListView listOfThings;
-  @Bind(R.id.footer) TextView footer;
-  @Unbinder ButterKnife.Unbinder unbinder;
+  @BindView(R2.id.title) TextView title;
+  @BindView(R2.id.subtitle) TextView subtitle;
+  @BindView(R2.id.hello) Button hello;
+  @BindView(R2.id.list_of_things) ListView listOfThings;
+  @BindView(R2.id.footer) TextView footer;
 
-  @Bind({ R.id.title, R.id.subtitle, R.id.hello })
-  List<View> headerViews;
+  @BindViews({ R2.id.title, R2.id.subtitle, R2.id.hello }) List<View> headerViews;
 
   private SimpleAdapter adapter;
 
-
-  @OnClick(R.id.hello) void sayHello() {
+  @OnClick(R2.id.hello) void sayHello() {
     Toast.makeText(this, "Hello, views!", LENGTH_SHORT).show();
     ButterKnife.apply(headerViews, ALPHA_FADE);
   }
 
-  @OnLongClick(R.id.hello) boolean sayGetOffMe() {
+  @OnLongClick(R2.id.hello) boolean sayGetOffMe() {
     Toast.makeText(this, "Let go of me!", LENGTH_SHORT).show();
     return true;
   }
 
-  @OnItemClick(R.id.list_of_things) void onItemClick(int position) {
+  @OnItemClick(R2.id.list_of_things) void onItemClick(int position) {
     Toast.makeText(this, "You clicked: " + adapter.getItem(position), LENGTH_SHORT).show();
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
diff --git a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
similarity index 76%
rename from butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
rename to sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
index 618065cd..567f560b 100644
--- a/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java
+++ b/sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java
@@ -1,17 +1,17 @@
-package com.example.butterknife;
+package com.example.butterknife.library;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+import butterknife.BindView;
 import butterknife.ButterKnife;
-import butterknife.Bind;
 
 public class SimpleAdapter extends BaseAdapter {
-  private static final String[] CONTENTS =
-      "The quick brown fox jumps over the lazy dog".split(" ");
+  private static final String[] CONTENTS = "The quick brown fox jumps over the lazy dog".split(" ");
 
   private final LayoutInflater inflater;
 
@@ -31,6 +31,7 @@ public SimpleAdapter(Context context) {
     return position;
   }
 
+  @SuppressLint("SetTextI18n") //
   @Override public View getView(int position, View view, ViewGroup parent) {
     ViewHolder holder;
     if (view != null) {
@@ -50,10 +51,10 @@ public SimpleAdapter(Context context) {
     return view;
   }
 
-  static class ViewHolder {
-    @Bind(R.id.word) TextView word;
-    @Bind(R.id.length) TextView length;
-    @Bind(R.id.position) TextView position;
+  static final class ViewHolder {
+    @BindView(R2.id.word) TextView word;
+    @BindView(R2.id.length) TextView length;
+    @BindView(R2.id.position) TextView position;
 
     ViewHolder(View view) {
       ButterKnife.bind(this, view);
diff --git a/butterknife-sample/src/main/res/layout/simple_activity.xml b/sample/library/src/main/res/layout/simple_activity.xml
similarity index 100%
rename from butterknife-sample/src/main/res/layout/simple_activity.xml
rename to sample/library/src/main/res/layout/simple_activity.xml
diff --git a/butterknife-sample/src/main/res/layout/simple_list_item.xml b/sample/library/src/main/res/layout/simple_list_item.xml
similarity index 100%
rename from butterknife-sample/src/main/res/layout/simple_list_item.xml
rename to sample/library/src/main/res/layout/simple_list_item.xml
diff --git a/butterknife-sample/src/main/res/values/strings.xml b/sample/library/src/main/res/values/strings.xml
similarity index 100%
rename from butterknife-sample/src/main/res/values/strings.xml
rename to sample/library/src/main/res/values/strings.xml
diff --git a/settings.gradle b/settings.gradle
index 04ac3757..cd8829a5 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,6 +1,11 @@
 include ':butterknife'
 include ':butterknife-annotations'
 include ':butterknife-compiler'
-include ':butterknife-sample'
+include ':butterknife-gradle-plugin'
+include ':butterknife-lint'
+include ':butterknife-integration-test'
+
+//include ':sample:app'
+//include ':sample:library'
 
 rootProject.name = 'butterknife-parent'
diff --git a/website/index.html b/website/index.html
index 0ea60397..fab8be1c 100644
--- a/website/index.html
+++ b/website/index.html
@@ -24,11 +24,11 @@ <h2>Field and method binding for Android views</h2>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@Bind</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@BindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @Bind(R.id.title) TextView title;
-  @Bind(R.id.subtitle) TextView subtitle;
-  @Bind(R.id.footer) TextView footer;
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -58,8 +58,8 @@ <h4 id="resource">Resource Binding</h4>
             <h4 id="non-activity">Non-Activity Binding</h4>
             <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @Bind(R.id.button1) Button button1;
-  @Bind(R.id.button2) Button button2;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
@@ -87,8 +87,8 @@ <h4 id="non-activity">Non-Activity Binding</h4>
   }
 
   static class ViewHolder {
-    @Bind(R.id.title) TextView name;
-    @Bind(R.id.job_title) TextView jobTitle;
+    @BindView(R.id.title) TextView name;
+    @BindView(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
       ButterKnife.bind(this, view);
@@ -107,7 +107,7 @@ <h4 id="non-activity">Non-Activity Binding</h4>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
@@ -161,15 +161,15 @@ <h4 id="listener-binding">Listener Binding</h4>
 </pre>
 
             <h4 id="reset">Binding Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife provides an <code>ButterKnife.Unbinder</code> interface which has an <code>unbind</code> method to do this automatically. Simply bind an unbinder with <code>@Unbinder</code> to the fragment.</p>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife returns an <code>Unbinder</code> instance when you call <code>bind</code> to do this for you. Call its <code>unbind</code> method in the appropriate lifecycle callback.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @Bind(R.id.button1) Button button1;
-  @Bind(R.id.button2) Button button2;
-  @Unbinder ButterKnife.Unbinder unbinder;
+  @BindView(R.id.button1) Button button1;
+  @BindView(R.id.button2) Button button2;
+  private Unbinder unbinder;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.bind(this, view);
+    unbinder = ButterKnife.bind(this, view);
     // TODO Use fields...
     return view;
   }
@@ -183,8 +183,8 @@ <h4 id="reset">Binding Reset</h4>
             <h4 id="optional">Optional Bindings</h4>
             <p>By default, both <code>@Bind</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
             <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to fields or the <code>@Optional</code> annotation to methods.</p>
-            <p>Note: Any annotation named <code>@Nullable</code> or can be used for fields. It is encouraged to use the <code>@Nullable</code> annotation from <a href="http://tools.android.com/tech-docs/support-annotations">Android's "support-annotations" library</a>.</p>
-            <pre class="prettyprint">@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;
+            <p>Note: Any annotation named <code>@Nullable</code> can be used for fields. It is encouraged to use the <code>@Nullable</code> annotation from <a href="http://tools.android.com/tech-docs/support-annotations">Android's "support-annotations" library</a>.</p>
+            <pre class="prettyprint">@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
@@ -211,36 +211,9 @@ <h4 id="bonus">Bonus</h4>
             <p>Add a static import for <code>ButterKnife.findById</code> and enjoy even more fun.</p>
 
             <h3 id="download">Download</h3>
-            <p class="downloads">
-              <a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.jakewharton&a=butterknife&v=LATEST" class="btn btn-large btn-inverse" id="download-btn">Butter Knife JAR <span class="runner-version"></span></a>
-            </p>
-            <p>The source code to the library and sample application as well as this website is <a href="http://github.com/JakeWharton/butterknife">available on GitHub</a>. The Javadoc is also <a href="javadoc/index.html">available to browse</a>.</p>
-
-            <h4>Maven</h4>
-            <p>If you are using Maven for compilation you can declare the library as a dependency.</p>
-            <pre class="prettyprint">&lt;dependency>
-  &lt;groupId>com.jakewharton&lt;/groupId>
-  &lt;artifactId>butterknife&lt;/artifactId>
-  &lt;version><span class="version"><em>(insert latest version)</em></span>&lt;/version>
-&lt;/dependency></pre>
-
             <h4>Gradle</h4>
-            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>
-            <p>Be sure to suppress this lint warning in your <code>build.gradle</code>.</p>
-            <pre class="prettyprint">lintOptions {
-  disable 'InvalidPackage'
-}</pre>
-            <p>Some configurations may also require additional exclusions.</p>
-            <pre class="prettyprint">packagingOptions {
-  exclude 'META-INF/services/javax.annotation.processing.Processor'
-}</pre>
-
-            <h4 id="ide">IDE Configuration</h4>
-            <p>Some IDEs require additional configuration in order to enable annotation processing.</p>
-            <ul>
-              <li><em>IntelliJ IDEA</em> &mdash; If your project uses an external configuration (like a Maven <code>pom.xml</code>) then annotation processing should just work. If not, try <a href="ide-idea.html">manual configuration</a>.</li>
-              <li><em>Eclipse</em> &mdash; Set up <a href="ide-eclipse.html">manual configuration</a>.</li>
-            </ul>
+            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'
+annotationProcessor 'com.jakewharton:butterknife-compiler:<span class="version"><em>(insert latest version)</em></span>'</pre>
 
             <h3 id="license">License</h3>
             <pre class="license">Copyright 2013 Jake Wharton
@@ -269,7 +242,6 @@ <h3 id="license">License</h3>
       prettyPrint();
       $.fn.artifactVersion('com.jakewharton', 'butterknife', function(version, url) {
         $('.version').text(version);
-        $('#download-btn').text('Butter Knife v' + version + ' JAR').attr('href', url);
       });
     </script>
   </body>
