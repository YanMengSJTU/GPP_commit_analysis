diff --git a/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java b/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java
index 95825c81..16997b9f 100644
--- a/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java
+++ b/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java
@@ -10,8 +10,14 @@
  *      <br>Jul 31 2016 idosu
  */
 class BindLayoutUtil {
+    private BindLayoutUtil() {
+    }
+
     @NonNull
-    public static <T extends Annotation> T getAnnotation(@NonNull Class<?> clazz, @NonNull Class<T> annotation, @NonNull String errorMessage) {
+    public static <T extends Annotation> T getAnnotation(
+            @NonNull Class<?> clazz,
+            @NonNull Class<T> annotation,
+            @NonNull String errorMessage) {
         T annot = clazz.getAnnotation(annotation);
         if (annot == null) {
             throw new IllegalStateException(errorMessage);
@@ -21,6 +27,10 @@
 
     @LayoutRes
     public static int getBindLayout(@NonNull Class<?> clazz) {
-        return getAnnotation(clazz, BindLayout.class, "Must set BindLayout to use this feature").value();
+        return getAnnotation(
+            clazz,
+            BindLayout.class,
+            "Must set BindLayout to use this feature"
+        ).value();
     }
 }
diff --git a/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java b/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java
new file mode 100644
index 00000000..aafc0842
--- /dev/null
+++ b/butterknife/src/test/java/butterknife/butterui/BindLayoutUtilTest.java
@@ -0,0 +1,58 @@
+package butterknife.butterui;
+
+import android.support.annotation.LayoutRes;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author
+ *      <br>Aug 02 2016 idosu
+ */
+public class BindLayoutUtilTest {
+    private static class ClassWithoutAnnotation {
+    }
+
+    @BindLayout(ClassWithAnnotation.res)
+    private static class ClassWithAnnotation {
+        @LayoutRes
+        public static final int res = 1337;
+    }
+
+    @Test
+    public void testGetAnnotationNoAnnotation() {
+        String expectedErrorMessage = "Error message " + Math.random();
+
+        try {
+            BindLayoutUtil.getAnnotation(ClassWithoutAnnotation.class, BindLayout.class, expectedErrorMessage);
+            fail();
+        } catch (IllegalStateException e) {
+            assertEquals(expectedErrorMessage, e.getMessage());
+        }
+    }
+
+    @Test
+    public void testGetAnnotationWithAnnotation() {
+        BindLayout annot = BindLayoutUtil.getAnnotation(ClassWithAnnotation.class, BindLayout.class, "");
+
+        assertEquals(ClassWithAnnotation.res, annot.value());
+    }
+
+    @Test
+    public void testGetBindLayoutNoAnnotation() {
+        try {
+            BindLayoutUtil.getBindLayout(ClassWithoutAnnotation.class);
+            fail();
+        } catch (IllegalStateException e) {
+            assertEquals("Must set BindLayout to use this feature", e.getMessage());
+        }
+    }
+
+    @Test
+    public void testGetBindLayoutWithAnnotation() {
+        int res = BindLayoutUtil.getBindLayout(ClassWithAnnotation.class);
+
+        assertEquals(ClassWithAnnotation.res, res);
+    }
+}
\ No newline at end of file
