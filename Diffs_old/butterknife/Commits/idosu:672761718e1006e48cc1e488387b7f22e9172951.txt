diff --git a/README.md b/README.md
index 0356055d..923a3fb6 100644
--- a/README.md
+++ b/README.md
@@ -30,6 +30,19 @@ class ExampleActivity extends Activity {
     // TODO Use fields...
   }
 }
+
+// You could also use this syntax to ilmenite boiler plates
+@BindLayout(R.layout.simple_activity)
+class ExampleActivity extends ButterActivity {
+  @BindView(R.id.user) EditText username;
+  @BindView(R.id.pass) EditText password;
+
+  @BindString(R.string.login_error) String loginErrorMessage;
+
+  @OnClick(R.id.submit) void submit() {
+    // TODO call server...
+  }
+}
 ```
 
 For documentation and additional information see [the website][3].
diff --git a/butterknife/src/main/java/butterknife/ButterKnife.java b/butterknife/src/main/java/butterknife/ButterKnife.java
index 73ac17f7..5dba86b5 100644
--- a/butterknife/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife/src/main/java/butterknife/ButterKnife.java
@@ -204,7 +204,7 @@ public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) {
     }
     //noinspection TryWithIdenticalCatches Resolves to API 19+ only type.
     try {
-      Class<?> viewBindingClass = Class.forName(clsName + "_ViewBinder");
+        Class<?> viewBindingClass = Class.forName(clsName + "_ViewBinder");
       //noinspection unchecked
       viewBinder = (ViewBinder<Object>) viewBindingClass.newInstance();
       if (debug) Log.d(TAG, "HIT: Loaded view binder class.");
diff --git a/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java b/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java
new file mode 100644
index 00000000..95825c81
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/butterui/BindLayoutUtil.java
@@ -0,0 +1,26 @@
+package butterknife.butterui;
+
+import android.support.annotation.LayoutRes;
+import android.support.annotation.NonNull;
+
+import java.lang.annotation.Annotation;
+
+/**
+ * @author
+ *      <br>Jul 31 2016 idosu
+ */
+class BindLayoutUtil {
+    @NonNull
+    public static <T extends Annotation> T getAnnotation(@NonNull Class<?> clazz, @NonNull Class<T> annotation, @NonNull String errorMessage) {
+        T annot = clazz.getAnnotation(annotation);
+        if (annot == null) {
+            throw new IllegalStateException(errorMessage);
+        }
+        return annot;
+    }
+
+    @LayoutRes
+    public static int getBindLayout(@NonNull Class<?> clazz) {
+        return getAnnotation(clazz, BindLayout.class, "Must set BindLayout to use this feature").value();
+    }
+}
diff --git a/butterknife/src/main/java/butterknife/butterui/ButterFragment.java b/butterknife/src/main/java/butterknife/butterui/ButterFragment.java
new file mode 100644
index 00000000..b82a6d00
--- /dev/null
+++ b/butterknife/src/main/java/butterknife/butterui/ButterFragment.java
@@ -0,0 +1,46 @@
+package butterknife.butterui;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import butterknife.ButterKnife;
+
+/**
+ * Extenders of this class can remove another part of the unneeded noise in the class.<br>
+ * Before:
+ * <pre class="code">
+ * public class FancyFragment extends {@link Fragment} {
+ *   &#064;{@link butterknife.BindView}(R.id.title) protected TextView title;
+ *
+ *   &#064;Override
+ *   public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+ *     View view = inflater.inflate(R.layout.fancy_fragment, container);
+ *     ButterKnife.bind(this);
+ *     return view;
+ *   }
+ * }
+ * </pre>
+ * After:
+ * <pre class="code">
+ * &#064;{@link BindLayout}(R.layout.fancy_fragment)
+ * public class FancyFragment extends ButterFragment {
+ *   &#064;{@link butterknife.BindView}(R.id.title) protected TextView title;
+ * }
+ * </pre>
+ * @author
+ *      <br>Jul 31 2016 idosu
+ */
+public abstract class ButterFragment extends Fragment {
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        // TODO(idosu): Add a way to configure attachToRoot
+        View view = inflater.inflate(BindLayoutUtil.getBindLayout(getClass()), container);
+        ButterKnife.bind(this, view);
+        return view;
+    }
+}
\ No newline at end of file
diff --git a/website/index.html b/website/index.html
index f420d078..1f8219b2 100644
--- a/website/index.html
+++ b/website/index.html
@@ -36,6 +36,13 @@ <h3 id="introduction">Introduction</h3>
     ButterKnife.bind(this);
     // TODO Use fields...
   }
+}</pre>
+            <p>You can remove boiler plate code by simply extending <code>ButterActivity</code> and adding a <code>@BindLayout</code> annotation.</p>
+            <pre class="prettyprint">@BindLayout(R.layout.simple_activity)
+class ExampleActivity extends ButterActivity {
+  @BindView(R.id.title) TextView title;
+  @BindView(R.id.subtitle) TextView subtitle;
+  @BindView(R.id.footer) TextView footer;
 }</pre>
             <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
@@ -56,7 +63,7 @@ <h4 id="resource">Resource Binding</h4>
 }</pre>
 
             <h4 id="non-activity">Non-Activity Binding</h4>
-            <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
+            <p>You can also perform binding on arbitrary objects by supplying your own view root. notice that you could preform the same operation from ButterActivity to a fragment by extending ButterFragment</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
   @BindView(R.id.button1) Button button1;
   @BindView(R.id.button2) Button button2;
