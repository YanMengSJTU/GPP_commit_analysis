diff --git a/README.md b/README.md
index a3afecd4..07e8c24b 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
 Introduction
 
 Annotate fields with @InjectView and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.
-
+<pre>
 class ExampleActivity extends Activity {
   @InjectView(R.id.title) TextView title;
   @InjectView(R.id.subtitle) TextView subtitle;
@@ -14,21 +14,21 @@ class ExampleActivity extends Activity {
     // TODO Use "injected" views...
   }
 }
-
+</pre>
 Instead of slow reflection, code is generated to perform the view look-ups. Calling inject delegates to this generated code that you can see and debug.
 
 The generated code for the above example is roughly equivalent to the following:
-
+<pre>
 public void inject(ExampleActivity activity) {
   activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
   activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }
-
+</pre>
 Non-Activity Injection
 
 You can also perform injection on arbitrary objects by supplying your own view root.
-
+<pre>
 public class FancyFragment extends Fragment {
   @InjectView(R.id.button1) Button button1;
   @InjectView(R.id.button2) Button button2;
@@ -40,9 +40,9 @@ public class FancyFragment extends Fragment {
     return view;
   }
 }
-
+</pre>
 Another use is simplifying the view holder pattern inside of a list adapter.
-
+</pre>
 public class MyAdapter extends BaseAdapter {
   @Override public View getView(int position, View view, ViewGroup parent) {
     ViewHolder holder;
@@ -69,7 +69,7 @@ public class MyAdapter extends BaseAdapter {
     }
   }
 }
-
+</pre>
 You can see this implementation in action in the provided sample.
 
 Calls to ButterKnife.inject can be made anywhere you would otherwise put findViewById calls.
@@ -82,17 +82,17 @@ Other provided injection APIs:
 View Lists
 
 You can group multiple views into a List or array.
-
+<pre>
 @InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List<EditText> nameViews;
-
+</pre>
 The apply method allows you to act on all the views in a list at once.
 
 ButterKnife.apply(nameViews, DISABLE);
 ButterKnife.apply(nameViews, ENABLED, false);
 
 Action and Setter interfaces allow specifying simple behavior.
-
+</pre>
 static final Action<View> DISABLE = new Action<>() {
   @Override public void apply(View view, int index) {
     view.setEnabled(false);
@@ -103,7 +103,7 @@ static final Setter<View, Boolean> ENABLED = new Setter<>() {
     view.setEnabled(value);
   }
 }
-
+</pre>
 An Android Property can also be used with the apply method.
 
 ButterKnife.apply(nameViews, View.ALPHA, 0);
@@ -111,28 +111,29 @@ ButterKnife.apply(nameViews, View.ALPHA, 0);
 Listener Injection
 
 Listeners can also automatically be configured onto methods.
-
+<pre>
 @OnClick(R.id.submit)
 public void submit(View view) {
   // TODO submit data to server...
 }
-
+</pre>
 All arguments to the listener method are optional.
-
+<pre>
 @OnClick(R.id.submit)
 public void submit() {
   // TODO submit data to server...
 }
-
+</pre>
 Define a specific type and it will automatically be cast.
 
+<pre>
 @OnClick(R.id.submit)
 public void sayHi(Button button) {
   button.setText("Hello!");
 }
-
+</pre>
 Specify multiple IDs in a single binding for common event handling.
-
+<pre>
 @OnClick({ R.id.door1, R.id.door2, R.id.door3 })
 public void pickDoor(DoorView door) {
   if (door.hasPrizeBehind()) {
@@ -141,20 +142,20 @@ public void pickDoor(DoorView door) {
     Toast.makeText(this, "Try again", LENGTH_SHORT).show();
   }
 }
-
+</pre>
 Custom views can bind to their own listeners by not specifying an ID.
-
+<pre>
 public class FancyButton extends Button {
   @OnClick
   public void onClick() {
     // TODO do something!
   }
 }
-
+</pre>
 Injection Reset
 
 Fragments have a different view lifecycle than activities. When injecting a fragment in onCreateView, set the views to null in onDestroyView. Butter Knife has a reset method to do this automatically.
-
+<pre>
 public class FancyFragment extends Fragment {
   @InjectView(R.id.button1) Button button1;
   @InjectView(R.id.button2) Button button2;
@@ -171,23 +172,23 @@ public class FancyFragment extends Fragment {
     ButterKnife.reset(this);
   }
 }
-
+</pre>
 Optional Injections
 
 By default, both @InjectView and listener injections are required. An exception will be thrown if the target view cannot be found.
 
 To suppress this behavior and create an optional injection, add the @Optional annotation to the field or method.
-
+<pre>
 @Optional @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
 }
-
+</pre>
 Multi-Method Listeners
 
 Method annotations whose corresponding listener has multiple callbacks can be used to bind to any one of them. Each annotation has a default callback that it binds to. Specify an alternate using the callback parameter.
-
+<pre>
 @OnItemSelected(R.id.list_view)
 void onItemSelected(int position) {
   // TODO ...
@@ -197,14 +198,14 @@ void onItemSelected(int position) {
 void onNothingSelected() {
   // TODO ...
 }
-
+</pre>
 Bonus
 
 Also included are findById methods which simplify code that still has to find views on a View, Activity, or Dialog. It uses generics to infer the return type and automatically performs the cast.
-
+<pre>
 View view = LayoutInflater.from(context).inflate(R.layout.thing, null);
 TextView firstName = ButterKnife.findById(view, R.id.first_name);
 TextView lastName = ButterKnife.findById(view, R.id.last_name);
 ImageView photo = ButterKnife.findById(view, R.id.photo);
-
+</pre>
 Add a static import for ButterKnife.findById and enjoy even more fun.
\ No newline at end of file
